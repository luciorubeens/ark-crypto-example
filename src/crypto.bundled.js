var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;

function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray(b64) {
  if (!inited) {
    init();
  }

  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice


  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

  arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  if (!inited) {
    init();
  }

  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);
  return parts.join('');
}

function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;
var isArray = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

var INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}
Buffer.isBuffer = isBuffer;

function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}

Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }

  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }

  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
} // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually


function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}

function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
} // For Node v0.10 support. Remove this eventually.


function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var byteLength_1 = byteLength$1;
var toByteArray_1 = toByteArray$1;
var fromByteArray_1 = fromByteArray$1;
var lookup$1 = [];
var revLookup$1 = [];
var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup$1[i] = code[i];
  revLookup$1[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup$1['-'.charCodeAt(0)] = 62;
revLookup$1['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength$1(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray$1(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr$1(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup$1[b64.charCodeAt(i)] << 18 | revLookup$1[b64.charCodeAt(i + 1)] << 12 | revLookup$1[b64.charCodeAt(i + 2)] << 6 | revLookup$1[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup$1[b64.charCodeAt(i)] << 2 | revLookup$1[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup$1[b64.charCodeAt(i)] << 10 | revLookup$1[b64.charCodeAt(i + 1)] << 4 | revLookup$1[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64$1(num) {
  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F];
}

function encodeChunk$1(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64$1(tmp));
  }

  return output.join('');
}

function fromByteArray$1(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk$1(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup$1[tmp >> 2] + lookup$1[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup$1[tmp >> 10] + lookup$1[tmp >> 4 & 0x3F] + lookup$1[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

var base64Js = {
  byteLength: byteLength_1,
  toByteArray: toByteArray_1,
  fromByteArray: fromByteArray_1
};

var read$1 = function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

var write$1 = function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

var ieee754 = {
  read: read$1,
  write: write$1
};

var buffer = createCommonjsModule(function (module, exports) {

  var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : null;
  exports.Buffer = Buffer;
  exports.SlowBuffer = SlowBuffer;
  exports.INSPECT_MAX_BYTES = 50;
  var K_MAX_LENGTH = 0x7fffffff;
  exports.kMaxLength = K_MAX_LENGTH;
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */

  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
  }

  function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1);
      var proto = {
        foo: function foo() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e) {
      return false;
    }
  }

  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function get() {
      if (!Buffer.isBuffer(this)) return undefined;
      return this.byteOffset;
    }
  });

  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    } // Return an augmented `Uint8Array` instance


    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */


  function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }

      return allocUnsafe(arg);
    }

    return from(arg, encodingOrOffset, length);
  } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


  if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    });
  }

  Buffer.poolSize = 8192; // not used by this implementation

  function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset);
    }

    if (ArrayBuffer.isView(value)) {
      return fromArrayLike(value);
    }

    if (value == null) {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
    }

    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }

    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }

    var valueOf = value.valueOf && value.valueOf();

    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length);
    }

    var b = fromObject(value);
    if (b) return b;

    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    }

    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
  }
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/


  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148


  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer, Uint8Array);

  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }

  function alloc(size, fill, encoding) {
    assertSize(size);

    if (size <= 0) {
      return createBuffer(size);
    }

    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }

    return createBuffer(size);
  }
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/


  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding);
  };

  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */


  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */


  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size);
  };

  function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }

    return buf;
  }

  function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);

    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }

    return buf;
  }

  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }

    var buf;

    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    } // Return an augmented `Uint8Array` instance


    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
  }

  function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0;
      var buf = createBuffer(len);

      if (buf.length === 0) {
        return buf;
      }

      obj.copy(buf, 0, 0, len);
      return buf;
    }

    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }

      return fromArrayLike(obj);
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }

  function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
    }

    return length | 0;
  }

  function SlowBuffer(length) {
    if (+length != length) {
      // eslint-disable-line eqeqeq
      length = 0;
    }

    return Buffer.alloc(+length);
  }

  Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
  };

  Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }

    if (a === b) return 0;
    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;

      default:
        return false;
    }
  };

  Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    if (list.length === 0) {
      return Buffer.alloc(0);
    }

    var i;

    if (length === undefined) {
      length = 0;

      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;

    for (i = 0; i < list.length; ++i) {
      var buf = list[i];

      if (isInstance(buf, Uint8Array)) {
        buf = Buffer.from(buf);
      }

      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      buf.copy(buffer, pos);
      pos += buf.length;
    }

    return buffer;
  };

  function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length;
    }

    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }

    if (typeof string !== 'string') {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
    }

    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;

        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length;

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;

        case 'hex':
          return len >>> 1;

        case 'base64':
          return base64ToBytes(string).length;

        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
          }

          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

    if (start === undefined || start < 0) {
      start = 0;
    } // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.


    if (start > this.length) {
      return '';
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return '';
    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return '';
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154


  Buffer.prototype._isBuffer = true;

  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16() {
    var len = this.length;

    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }

    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }

    return this;
  };

  Buffer.prototype.swap32 = function swap32() {
    var len = this.length;

    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }

    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }

    return this;
  };

  Buffer.prototype.swap64 = function swap64() {
    var len = this.length;

    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }

    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }

    return this;
  };

  Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer.prototype.toLocaleString = Buffer.prototype.toString;

  Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
  };

  Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
  };

  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  }

  Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength);
    }

    if (!Buffer.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
    }

    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = target ? target.length : 0;
    }

    if (thisStart === undefined) {
      thisStart = 0;
    }

    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }

    if (thisStart >= thisEnd) {
      return -1;
    }

    if (start >= end) {
      return 1;
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf


  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1; // Normalize byteOffset

    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }

    byteOffset = +byteOffset; // Coerce to Number.

    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    } // Normalize byteOffset: negative offsets start from the end of the buffer


    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    } // Normalize val


    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    } // Finally, search either indexOf (if dir is true) or lastIndexOf


    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }

      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]

      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }

      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }

    throw new TypeError('val must be string, number or Buffer');
  }

  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();

      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }

        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }

    var i;

    if (dir) {
      var foundIndex = -1;

      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

      for (i = byteOffset; i >= 0; i--) {
        var found = true;

        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }

        if (found) return i;
      }
    }

    return -1;
  }

  Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };

  Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;

    if (!length) {
      length = remaining;
    } else {
      length = Number(length);

      if (length > remaining) {
        length = remaining;
      }
    }

    var strLen = string.length;

    if (length > strLen / 2) {
      length = strLen / 2;
    }

    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (numberIsNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }

    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0; // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0; // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0;

      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length);

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64Js.fromByteArray(buf);
    } else {
      return base64Js.fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;

    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }

            break;

          case 2:
            secondByte = buf[i + 1];

            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }

        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety


  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;

    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    } // Decode in chunks to avoid "call stack size exceeded".


    var res = '';
    var i = 0;

    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }

    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }

    return ret;
  }

  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }

    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';

    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]];
    }

    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';

    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }

    return res;
  }

  Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;
    var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
  };
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */


  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;

    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;

    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];

    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };

  Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };

  Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };

  Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }

    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;

    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }

    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


  Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }

    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

    if (end > this.length) end = this.length;

    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;

    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end);
    } else if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (var i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }

    return len;
  }; // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])


  Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }

      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }

      if (val.length === 1) {
        var code = val.charCodeAt(0);

        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } else if (typeof val === 'boolean') {
      val = Number(val);
    } // Invalid ranges are not set to a default, so can range check early.


    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }

    if (end <= start) {
      return this;
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;

    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
      var len = bytes.length;

      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }

      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this;
  }; // HELPER FUNCTIONS
  // ================


  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

  function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

    str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

    while (str.length % 4 !== 0) {
      str = str + '=';
    }

    return str;
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i); // is surrogate component

      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } // valid lead


          leadSurrogate = codePoint;
          continue;
        } // 2 leads in a row


        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        } // valid surrogate pair


        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null; // encode utf8

      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }

    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return base64Js.toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }

    return i;
  } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166


  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }

  function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj; // eslint-disable-line no-self-compare
  } // Create lookup table for `toString('hex')`
  // See: https://github.com/feross/buffer/issues/219


  var hexSliceLookupTable = function () {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);

    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16;

      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j];
      }
    }

    return table;
  }();
});

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;

if (typeof global$1.setTimeout === 'function') {
  cachedSetTimeout = setTimeout;
}

if (typeof global$1.clearTimeout === 'function') {
  cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

function nextTick(fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
} // v8 likes predictible objects

function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues

var versions = {};
var release = {};
var config = {};

function noop() {}

var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
  throw new Error('process.binding is not supported');
}
function cwd() {
  return '/';
}
function chdir(dir) {
  throw new Error('process.chdir is not supported');
}
function umask() {
  return 0;
} // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js

var performance = global$1.performance || {};

var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
  return new Date().getTime();
}; // generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime


function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);

  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];

    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }

  return [seconds, nanoseconds];
}
var startTime = new Date();
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1000;
}
var process = {
  nextTick: nextTick,
  title: title,
  browser: browser,
  env: env,
  argv: argv,
  version: version,
  versions: versions,
  on: on,
  addListener: addListener,
  once: once,
  off: off,
  removeListener: removeListener,
  removeAllListeners: removeAllListeners,
  emit: emit,
  binding: binding,
  cwd: cwd,
  chdir: chdir,
  umask: umask,
  hrtime: hrtime,
  platform: platform,
  release: release,
  config: config,
  uptime: uptime
};

var BigInteger = createCommonjsModule(function (module) {
  var bigInt = function (undefined$1) {

    var BASE = 1e7,
        LOG_BASE = 7,
        MAX_INT = 9007199254740992,
        MAX_INT_ARR = smallToArray(MAX_INT),
        DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";
    var supportsNativeBigInt = typeof BigInt === "function";

    function Integer(v, radix, alphabet, caseSensitive) {
      if (typeof v === "undefined") return Integer[0];
      if (typeof radix !== "undefined") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
      return parseValue(v);
    }

    function BigInteger(value, sign) {
      this.value = value;
      this.sign = sign;
      this.isSmall = false;
    }

    BigInteger.prototype = Object.create(Integer.prototype);

    function SmallInteger(value) {
      this.value = value;
      this.sign = value < 0;
      this.isSmall = true;
    }

    SmallInteger.prototype = Object.create(Integer.prototype);

    function NativeBigInt(value) {
      this.value = value;
    }

    NativeBigInt.prototype = Object.create(Integer.prototype);

    function isPrecise(n) {
      return -MAX_INT < n && n < MAX_INT;
    }

    function smallToArray(n) {
      // For performance reasons doesn't reference BASE, need to change this function if BASE changes
      if (n < 1e7) return [n];
      if (n < 1e14) return [n % 1e7, Math.floor(n / 1e7)];
      return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
    }

    function arrayToSmall(arr) {
      // If BASE changes this function may need to change
      trim(arr);
      var length = arr.length;

      if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
        switch (length) {
          case 0:
            return 0;

          case 1:
            return arr[0];

          case 2:
            return arr[0] + arr[1] * BASE;

          default:
            return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
        }
      }

      return arr;
    }

    function trim(v) {
      var i = v.length;

      while (v[--i] === 0) {
      }

      v.length = i + 1;
    }

    function createArray(length) {
      // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger
      var x = new Array(length);
      var i = -1;

      while (++i < length) {
        x[i] = 0;
      }

      return x;
    }

    function truncate(n) {
      if (n > 0) return Math.floor(n);
      return Math.ceil(n);
    }

    function add(a, b) {
      // assumes a and b are arrays with a.length >= b.length
      var l_a = a.length,
          l_b = b.length,
          r = new Array(l_a),
          carry = 0,
          base = BASE,
          sum,
          i;

      for (i = 0; i < l_b; i++) {
        sum = a[i] + b[i] + carry;
        carry = sum >= base ? 1 : 0;
        r[i] = sum - carry * base;
      }

      while (i < l_a) {
        sum = a[i] + carry;
        carry = sum === base ? 1 : 0;
        r[i++] = sum - carry * base;
      }

      if (carry > 0) r.push(carry);
      return r;
    }

    function addAny(a, b) {
      if (a.length >= b.length) return add(a, b);
      return add(b, a);
    }

    function addSmall(a, carry) {
      // assumes a is array, carry is number with 0 <= carry < MAX_INT
      var l = a.length,
          r = new Array(l),
          base = BASE,
          sum,
          i;

      for (i = 0; i < l; i++) {
        sum = a[i] - base + carry;
        carry = Math.floor(sum / base);
        r[i] = sum - carry * base;
        carry += 1;
      }

      while (carry > 0) {
        r[i++] = carry % base;
        carry = Math.floor(carry / base);
      }

      return r;
    }

    BigInteger.prototype.add = function (v) {
      var n = parseValue(v);

      if (this.sign !== n.sign) {
        return this.subtract(n.negate());
      }

      var a = this.value,
          b = n.value;

      if (n.isSmall) {
        return new BigInteger(addSmall(a, Math.abs(b)), this.sign);
      }

      return new BigInteger(addAny(a, b), this.sign);
    };

    BigInteger.prototype.plus = BigInteger.prototype.add;

    SmallInteger.prototype.add = function (v) {
      var n = parseValue(v);
      var a = this.value;

      if (a < 0 !== n.sign) {
        return this.subtract(n.negate());
      }

      var b = n.value;

      if (n.isSmall) {
        if (isPrecise(a + b)) return new SmallInteger(a + b);
        b = smallToArray(Math.abs(b));
      }

      return new BigInteger(addSmall(b, Math.abs(a)), a < 0);
    };

    SmallInteger.prototype.plus = SmallInteger.prototype.add;

    NativeBigInt.prototype.add = function (v) {
      return new NativeBigInt(this.value + parseValue(v).value);
    };

    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;

    function subtract(a, b) {
      // assumes a and b are arrays with a >= b
      var a_l = a.length,
          b_l = b.length,
          r = new Array(a_l),
          borrow = 0,
          base = BASE,
          i,
          difference;

      for (i = 0; i < b_l; i++) {
        difference = a[i] - borrow - b[i];

        if (difference < 0) {
          difference += base;
          borrow = 1;
        } else borrow = 0;

        r[i] = difference;
      }

      for (i = b_l; i < a_l; i++) {
        difference = a[i] - borrow;
        if (difference < 0) difference += base;else {
          r[i++] = difference;
          break;
        }
        r[i] = difference;
      }

      for (; i < a_l; i++) {
        r[i] = a[i];
      }

      trim(r);
      return r;
    }

    function subtractAny(a, b, sign) {
      var value;

      if (compareAbs(a, b) >= 0) {
        value = subtract(a, b);
      } else {
        value = subtract(b, a);
        sign = !sign;
      }

      value = arrayToSmall(value);

      if (typeof value === "number") {
        if (sign) value = -value;
        return new SmallInteger(value);
      }

      return new BigInteger(value, sign);
    }

    function subtractSmall(a, b, sign) {
      // assumes a is array, b is number with 0 <= b < MAX_INT
      var l = a.length,
          r = new Array(l),
          carry = -b,
          base = BASE,
          i,
          difference;

      for (i = 0; i < l; i++) {
        difference = a[i] + carry;
        carry = Math.floor(difference / base);
        difference %= base;
        r[i] = difference < 0 ? difference + base : difference;
      }

      r = arrayToSmall(r);

      if (typeof r === "number") {
        if (sign) r = -r;
        return new SmallInteger(r);
      }

      return new BigInteger(r, sign);
    }

    BigInteger.prototype.subtract = function (v) {
      var n = parseValue(v);

      if (this.sign !== n.sign) {
        return this.add(n.negate());
      }

      var a = this.value,
          b = n.value;
      if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);
      return subtractAny(a, b, this.sign);
    };

    BigInteger.prototype.minus = BigInteger.prototype.subtract;

    SmallInteger.prototype.subtract = function (v) {
      var n = parseValue(v);
      var a = this.value;

      if (a < 0 !== n.sign) {
        return this.add(n.negate());
      }

      var b = n.value;

      if (n.isSmall) {
        return new SmallInteger(a - b);
      }

      return subtractSmall(b, Math.abs(a), a >= 0);
    };

    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;

    NativeBigInt.prototype.subtract = function (v) {
      return new NativeBigInt(this.value - parseValue(v).value);
    };

    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;

    BigInteger.prototype.negate = function () {
      return new BigInteger(this.value, !this.sign);
    };

    SmallInteger.prototype.negate = function () {
      var sign = this.sign;
      var small = new SmallInteger(-this.value);
      small.sign = !sign;
      return small;
    };

    NativeBigInt.prototype.negate = function () {
      return new NativeBigInt(-this.value);
    };

    BigInteger.prototype.abs = function () {
      return new BigInteger(this.value, false);
    };

    SmallInteger.prototype.abs = function () {
      return new SmallInteger(Math.abs(this.value));
    };

    NativeBigInt.prototype.abs = function () {
      return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
    };

    function multiplyLong(a, b) {
      var a_l = a.length,
          b_l = b.length,
          l = a_l + b_l,
          r = createArray(l),
          base = BASE,
          product,
          carry,
          i,
          a_i,
          b_j;

      for (i = 0; i < a_l; ++i) {
        a_i = a[i];

        for (var j = 0; j < b_l; ++j) {
          b_j = b[j];
          product = a_i * b_j + r[i + j];
          carry = Math.floor(product / base);
          r[i + j] = product - carry * base;
          r[i + j + 1] += carry;
        }
      }

      trim(r);
      return r;
    }

    function multiplySmall(a, b) {
      // assumes a is array, b is number with |b| < BASE
      var l = a.length,
          r = new Array(l),
          base = BASE,
          carry = 0,
          product,
          i;

      for (i = 0; i < l; i++) {
        product = a[i] * b + carry;
        carry = Math.floor(product / base);
        r[i] = product - carry * base;
      }

      while (carry > 0) {
        r[i++] = carry % base;
        carry = Math.floor(carry / base);
      }

      return r;
    }

    function shiftLeft(x, n) {
      var r = [];

      while (n-- > 0) {
        r.push(0);
      }

      return r.concat(x);
    }

    function multiplyKaratsuba(x, y) {
      var n = Math.max(x.length, y.length);
      if (n <= 30) return multiplyLong(x, y);
      n = Math.ceil(n / 2);
      var b = x.slice(n),
          a = x.slice(0, n),
          d = y.slice(n),
          c = y.slice(0, n);
      var ac = multiplyKaratsuba(a, c),
          bd = multiplyKaratsuba(b, d),
          abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));
      var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
      trim(product);
      return product;
    } // The following function is derived from a surface fit of a graph plotting the performance difference
    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.


    function useKaratsuba(l1, l2) {
      return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;
    }

    BigInteger.prototype.multiply = function (v) {
      var n = parseValue(v),
          a = this.value,
          b = n.value,
          sign = this.sign !== n.sign,
          abs;

      if (n.isSmall) {
        if (b === 0) return Integer[0];
        if (b === 1) return this;
        if (b === -1) return this.negate();
        abs = Math.abs(b);

        if (abs < BASE) {
          return new BigInteger(multiplySmall(a, abs), sign);
        }

        b = smallToArray(abs);
      }

      if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes
        return new BigInteger(multiplyKaratsuba(a, b), sign);
      return new BigInteger(multiplyLong(a, b), sign);
    };

    BigInteger.prototype.times = BigInteger.prototype.multiply;

    function multiplySmallAndArray(a, b, sign) {
      // a >= 0
      if (a < BASE) {
        return new BigInteger(multiplySmall(b, a), sign);
      }

      return new BigInteger(multiplyLong(b, smallToArray(a)), sign);
    }

    SmallInteger.prototype._multiplyBySmall = function (a) {
      if (isPrecise(a.value * this.value)) {
        return new SmallInteger(a.value * this.value);
      }

      return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);
    };

    BigInteger.prototype._multiplyBySmall = function (a) {
      if (a.value === 0) return Integer[0];
      if (a.value === 1) return this;
      if (a.value === -1) return this.negate();
      return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);
    };

    SmallInteger.prototype.multiply = function (v) {
      return parseValue(v)._multiplyBySmall(this);
    };

    SmallInteger.prototype.times = SmallInteger.prototype.multiply;

    NativeBigInt.prototype.multiply = function (v) {
      return new NativeBigInt(this.value * parseValue(v).value);
    };

    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;

    function square(a) {
      //console.assert(2 * BASE * BASE < MAX_INT);
      var l = a.length,
          r = createArray(l + l),
          base = BASE,
          product,
          carry,
          i,
          a_i,
          a_j;

      for (i = 0; i < l; i++) {
        a_i = a[i];
        carry = 0 - a_i * a_i;

        for (var j = i; j < l; j++) {
          a_j = a[j];
          product = 2 * (a_i * a_j) + r[i + j] + carry;
          carry = Math.floor(product / base);
          r[i + j] = product - carry * base;
        }

        r[i + l] = carry;
      }

      trim(r);
      return r;
    }

    BigInteger.prototype.square = function () {
      return new BigInteger(square(this.value), false);
    };

    SmallInteger.prototype.square = function () {
      var value = this.value * this.value;
      if (isPrecise(value)) return new SmallInteger(value);
      return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
    };

    NativeBigInt.prototype.square = function (v) {
      return new NativeBigInt(this.value * this.value);
    };

    function divMod1(a, b) {
      // Left over from previous version. Performs faster than divMod2 on smaller input sizes.
      var a_l = a.length,
          b_l = b.length,
          base = BASE,
          result = createArray(b.length),
          divisorMostSignificantDigit = b[b_l - 1],
          // normalization
      lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),
          remainder = multiplySmall(a, lambda),
          divisor = multiplySmall(b, lambda),
          quotientDigit,
          shift,
          carry,
          borrow,
          i,
          l,
          q;
      if (remainder.length <= a_l) remainder.push(0);
      divisor.push(0);
      divisorMostSignificantDigit = divisor[b_l - 1];

      for (shift = a_l - b_l; shift >= 0; shift--) {
        quotientDigit = base - 1;

        if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
          quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
        } // quotientDigit <= base - 1


        carry = 0;
        borrow = 0;
        l = divisor.length;

        for (i = 0; i < l; i++) {
          carry += quotientDigit * divisor[i];
          q = Math.floor(carry / base);
          borrow += remainder[shift + i] - (carry - q * base);
          carry = q;

          if (borrow < 0) {
            remainder[shift + i] = borrow + base;
            borrow = -1;
          } else {
            remainder[shift + i] = borrow;
            borrow = 0;
          }
        }

        while (borrow !== 0) {
          quotientDigit -= 1;
          carry = 0;

          for (i = 0; i < l; i++) {
            carry += remainder[shift + i] - base + divisor[i];

            if (carry < 0) {
              remainder[shift + i] = carry + base;
              carry = 0;
            } else {
              remainder[shift + i] = carry;
              carry = 1;
            }
          }

          borrow += carry;
        }

        result[shift] = quotientDigit;
      } // denormalization


      remainder = divModSmall(remainder, lambda)[0];
      return [arrayToSmall(result), arrayToSmall(remainder)];
    }

    function divMod2(a, b) {
      // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/
      // Performs faster than divMod1 on larger input sizes.
      var a_l = a.length,
          b_l = b.length,
          result = [],
          part = [],
          base = BASE,
          guess,
          xlen,
          highx,
          highy,
          check;

      while (a_l) {
        part.unshift(a[--a_l]);
        trim(part);

        if (compareAbs(part, b) < 0) {
          result.push(0);
          continue;
        }

        xlen = part.length;
        highx = part[xlen - 1] * base + part[xlen - 2];
        highy = b[b_l - 1] * base + b[b_l - 2];

        if (xlen > b_l) {
          highx = (highx + 1) * base;
        }

        guess = Math.ceil(highx / highy);

        do {
          check = multiplySmall(b, guess);
          if (compareAbs(check, part) <= 0) break;
          guess--;
        } while (guess);

        result.push(guess);
        part = subtract(part, check);
      }

      result.reverse();
      return [arrayToSmall(result), arrayToSmall(part)];
    }

    function divModSmall(value, lambda) {
      var length = value.length,
          quotient = createArray(length),
          base = BASE,
          i,
          q,
          remainder,
          divisor;
      remainder = 0;

      for (i = length - 1; i >= 0; --i) {
        divisor = remainder * base + value[i];
        q = truncate(divisor / lambda);
        remainder = divisor - q * lambda;
        quotient[i] = q | 0;
      }

      return [quotient, remainder | 0];
    }

    function divModAny(self, v) {
      var value,
          n = parseValue(v);

      if (supportsNativeBigInt) {
        return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];
      }

      var a = self.value,
          b = n.value;
      var quotient;
      if (b === 0) throw new Error("Cannot divide by zero");

      if (self.isSmall) {
        if (n.isSmall) {
          return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];
        }

        return [Integer[0], self];
      }

      if (n.isSmall) {
        if (b === 1) return [self, Integer[0]];
        if (b == -1) return [self.negate(), Integer[0]];
        var abs = Math.abs(b);

        if (abs < BASE) {
          value = divModSmall(a, abs);
          quotient = arrayToSmall(value[0]);
          var remainder = value[1];
          if (self.sign) remainder = -remainder;

          if (typeof quotient === "number") {
            if (self.sign !== n.sign) quotient = -quotient;
            return [new SmallInteger(quotient), new SmallInteger(remainder)];
          }

          return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];
        }

        b = smallToArray(abs);
      }

      var comparison = compareAbs(a, b);
      if (comparison === -1) return [Integer[0], self];
      if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]]; // divMod1 is faster on smaller input sizes

      if (a.length + b.length <= 200) value = divMod1(a, b);else value = divMod2(a, b);
      quotient = value[0];
      var qSign = self.sign !== n.sign,
          mod = value[1],
          mSign = self.sign;

      if (typeof quotient === "number") {
        if (qSign) quotient = -quotient;
        quotient = new SmallInteger(quotient);
      } else quotient = new BigInteger(quotient, qSign);

      if (typeof mod === "number") {
        if (mSign) mod = -mod;
        mod = new SmallInteger(mod);
      } else mod = new BigInteger(mod, mSign);

      return [quotient, mod];
    }

    BigInteger.prototype.divmod = function (v) {
      var result = divModAny(this, v);
      return {
        quotient: result[0],
        remainder: result[1]
      };
    };

    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;

    BigInteger.prototype.divide = function (v) {
      return divModAny(this, v)[0];
    };

    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {
      return new NativeBigInt(this.value / parseValue(v).value);
    };

    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;

    BigInteger.prototype.mod = function (v) {
      return divModAny(this, v)[1];
    };

    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {
      return new NativeBigInt(this.value % parseValue(v).value);
    };

    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;

    BigInteger.prototype.pow = function (v) {
      var n = parseValue(v),
          a = this.value,
          b = n.value,
          value,
          x,
          y;
      if (b === 0) return Integer[1];
      if (a === 0) return Integer[0];
      if (a === 1) return Integer[1];
      if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];

      if (n.sign) {
        return Integer[0];
      }

      if (!n.isSmall) throw new Error("The exponent " + n.toString() + " is too large.");

      if (this.isSmall) {
        if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));
      }

      x = this;
      y = Integer[1];

      while (true) {
        if (b & 1 === 1) {
          y = y.times(x);
          --b;
        }

        if (b === 0) break;
        b /= 2;
        x = x.square();
      }

      return y;
    };

    SmallInteger.prototype.pow = BigInteger.prototype.pow;

    NativeBigInt.prototype.pow = function (v) {
      var n = parseValue(v);
      var a = this.value,
          b = n.value;

      var _0 = BigInt(0),
          _1 = BigInt(1),
          _2 = BigInt(2);

      if (b === _0) return Integer[1];
      if (a === _0) return Integer[0];
      if (a === _1) return Integer[1];
      if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];
      if (n.isNegative()) return new NativeBigInt(_0);
      var x = this;
      var y = Integer[1];

      while (true) {
        if ((b & _1) === _1) {
          y = y.times(x);
          --b;
        }

        if (b === _0) break;
        b /= _2;
        x = x.square();
      }

      return y;
    };

    BigInteger.prototype.modPow = function (exp, mod) {
      exp = parseValue(exp);
      mod = parseValue(mod);
      if (mod.isZero()) throw new Error("Cannot take modPow with modulus 0");
      var r = Integer[1],
          base = this.mod(mod);

      if (exp.isNegative()) {
        exp = exp.multiply(Integer[-1]);
        base = base.modInv(mod);
      }

      while (exp.isPositive()) {
        if (base.isZero()) return Integer[0];
        if (exp.isOdd()) r = r.multiply(base).mod(mod);
        exp = exp.divide(2);
        base = base.square().mod(mod);
      }

      return r;
    };

    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;

    function compareAbs(a, b) {
      if (a.length !== b.length) {
        return a.length > b.length ? 1 : -1;
      }

      for (var i = a.length - 1; i >= 0; i--) {
        if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;
      }

      return 0;
    }

    BigInteger.prototype.compareAbs = function (v) {
      var n = parseValue(v),
          a = this.value,
          b = n.value;
      if (n.isSmall) return 1;
      return compareAbs(a, b);
    };

    SmallInteger.prototype.compareAbs = function (v) {
      var n = parseValue(v),
          a = Math.abs(this.value),
          b = n.value;

      if (n.isSmall) {
        b = Math.abs(b);
        return a === b ? 0 : a > b ? 1 : -1;
      }

      return -1;
    };

    NativeBigInt.prototype.compareAbs = function (v) {
      var a = this.value;
      var b = parseValue(v).value;
      a = a >= 0 ? a : -a;
      b = b >= 0 ? b : -b;
      return a === b ? 0 : a > b ? 1 : -1;
    };

    BigInteger.prototype.compare = function (v) {
      // See discussion about comparison with Infinity:
      // https://github.com/peterolson/BigInteger.js/issues/61
      if (v === Infinity) {
        return -1;
      }

      if (v === -Infinity) {
        return 1;
      }

      var n = parseValue(v),
          a = this.value,
          b = n.value;

      if (this.sign !== n.sign) {
        return n.sign ? 1 : -1;
      }

      if (n.isSmall) {
        return this.sign ? -1 : 1;
      }

      return compareAbs(a, b) * (this.sign ? -1 : 1);
    };

    BigInteger.prototype.compareTo = BigInteger.prototype.compare;

    SmallInteger.prototype.compare = function (v) {
      if (v === Infinity) {
        return -1;
      }

      if (v === -Infinity) {
        return 1;
      }

      var n = parseValue(v),
          a = this.value,
          b = n.value;

      if (n.isSmall) {
        return a == b ? 0 : a > b ? 1 : -1;
      }

      if (a < 0 !== n.sign) {
        return a < 0 ? -1 : 1;
      }

      return a < 0 ? 1 : -1;
    };

    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;

    NativeBigInt.prototype.compare = function (v) {
      if (v === Infinity) {
        return -1;
      }

      if (v === -Infinity) {
        return 1;
      }

      var a = this.value;
      var b = parseValue(v).value;
      return a === b ? 0 : a > b ? 1 : -1;
    };

    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;

    BigInteger.prototype.equals = function (v) {
      return this.compare(v) === 0;
    };

    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;

    BigInteger.prototype.notEquals = function (v) {
      return this.compare(v) !== 0;
    };

    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;

    BigInteger.prototype.greater = function (v) {
      return this.compare(v) > 0;
    };

    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;

    BigInteger.prototype.lesser = function (v) {
      return this.compare(v) < 0;
    };

    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;

    BigInteger.prototype.greaterOrEquals = function (v) {
      return this.compare(v) >= 0;
    };

    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;

    BigInteger.prototype.lesserOrEquals = function (v) {
      return this.compare(v) <= 0;
    };

    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;

    BigInteger.prototype.isEven = function () {
      return (this.value[0] & 1) === 0;
    };

    SmallInteger.prototype.isEven = function () {
      return (this.value & 1) === 0;
    };

    NativeBigInt.prototype.isEven = function () {
      return (this.value & BigInt(1)) === BigInt(0);
    };

    BigInteger.prototype.isOdd = function () {
      return (this.value[0] & 1) === 1;
    };

    SmallInteger.prototype.isOdd = function () {
      return (this.value & 1) === 1;
    };

    NativeBigInt.prototype.isOdd = function () {
      return (this.value & BigInt(1)) === BigInt(1);
    };

    BigInteger.prototype.isPositive = function () {
      return !this.sign;
    };

    SmallInteger.prototype.isPositive = function () {
      return this.value > 0;
    };

    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;

    BigInteger.prototype.isNegative = function () {
      return this.sign;
    };

    SmallInteger.prototype.isNegative = function () {
      return this.value < 0;
    };

    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;

    BigInteger.prototype.isUnit = function () {
      return false;
    };

    SmallInteger.prototype.isUnit = function () {
      return Math.abs(this.value) === 1;
    };

    NativeBigInt.prototype.isUnit = function () {
      return this.abs().value === BigInt(1);
    };

    BigInteger.prototype.isZero = function () {
      return false;
    };

    SmallInteger.prototype.isZero = function () {
      return this.value === 0;
    };

    NativeBigInt.prototype.isZero = function () {
      return this.value === BigInt(0);
    };

    BigInteger.prototype.isDivisibleBy = function (v) {
      var n = parseValue(v);
      if (n.isZero()) return false;
      if (n.isUnit()) return true;
      if (n.compareAbs(2) === 0) return this.isEven();
      return this.mod(n).isZero();
    };

    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;

    function isBasicPrime(v) {
      var n = v.abs();
      if (n.isUnit()) return false;
      if (n.equals(2) || n.equals(3) || n.equals(5)) return true;
      if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;
      if (n.lesser(49)) return true; // we don't know if it's prime: let the other functions figure it out
    }

    function millerRabinTest(n, a) {
      var nPrev = n.prev(),
          b = nPrev,
          r = 0,
          d,
          i,
          x;

      while (b.isEven()) {
        b = b.divide(2), r++;
      }

      next: for (i = 0; i < a.length; i++) {
        if (n.lesser(a[i])) continue;
        x = bigInt(a[i]).modPow(b, n);
        if (x.isUnit() || x.equals(nPrev)) continue;

        for (d = r - 1; d != 0; d--) {
          x = x.square().mod(n);
          if (x.isUnit()) return false;
          if (x.equals(nPrev)) continue next;
        }

        return false;
      }

      return true;
    } // Set "strict" to true to force GRH-supported lower bound of 2*log(N)^2


    BigInteger.prototype.isPrime = function (strict) {
      var isPrime = isBasicPrime(this);
      if (isPrime !== undefined$1) return isPrime;
      var n = this.abs();
      var bits = n.bitLength();
      if (bits <= 64) return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
      var logN = Math.log(2) * bits.toJSNumber();
      var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);

      for (var a = [], i = 0; i < t; i++) {
        a.push(bigInt(i + 2));
      }

      return millerRabinTest(n, a);
    };

    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;

    BigInteger.prototype.isProbablePrime = function (iterations, rng) {
      var isPrime = isBasicPrime(this);
      if (isPrime !== undefined$1) return isPrime;
      var n = this.abs();
      var t = iterations === undefined$1 ? 5 : iterations;

      for (var a = [], i = 0; i < t; i++) {
        a.push(bigInt.randBetween(2, n.minus(2), rng));
      }

      return millerRabinTest(n, a);
    };

    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;

    BigInteger.prototype.modInv = function (n) {
      var t = bigInt.zero,
          newT = bigInt.one,
          r = parseValue(n),
          newR = this.abs(),
          q,
          lastT,
          lastR;

      while (!newR.isZero()) {
        q = r.divide(newR);
        lastT = t;
        lastR = r;
        t = newT;
        r = newR;
        newT = lastT.subtract(q.multiply(newT));
        newR = lastR.subtract(q.multiply(newR));
      }

      if (!r.isUnit()) throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");

      if (t.compare(0) === -1) {
        t = t.add(n);
      }

      if (this.isNegative()) {
        return t.negate();
      }

      return t;
    };

    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;

    BigInteger.prototype.next = function () {
      var value = this.value;

      if (this.sign) {
        return subtractSmall(value, 1, this.sign);
      }

      return new BigInteger(addSmall(value, 1), this.sign);
    };

    SmallInteger.prototype.next = function () {
      var value = this.value;
      if (value + 1 < MAX_INT) return new SmallInteger(value + 1);
      return new BigInteger(MAX_INT_ARR, false);
    };

    NativeBigInt.prototype.next = function () {
      return new NativeBigInt(this.value + BigInt(1));
    };

    BigInteger.prototype.prev = function () {
      var value = this.value;

      if (this.sign) {
        return new BigInteger(addSmall(value, 1), true);
      }

      return subtractSmall(value, 1, this.sign);
    };

    SmallInteger.prototype.prev = function () {
      var value = this.value;
      if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);
      return new BigInteger(MAX_INT_ARR, true);
    };

    NativeBigInt.prototype.prev = function () {
      return new NativeBigInt(this.value - BigInt(1));
    };

    var powersOfTwo = [1];

    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) {
      powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
    }

    var powers2Length = powersOfTwo.length,
        highestPower2 = powersOfTwo[powers2Length - 1];

    function shift_isSmall(n) {
      return Math.abs(n) <= BASE;
    }

    BigInteger.prototype.shiftLeft = function (v) {
      var n = parseValue(v).toJSNumber();

      if (!shift_isSmall(n)) {
        throw new Error(String(n) + " is too large for shifting.");
      }

      if (n < 0) return this.shiftRight(-n);
      var result = this;
      if (result.isZero()) return result;

      while (n >= powers2Length) {
        result = result.multiply(highestPower2);
        n -= powers2Length - 1;
      }

      return result.multiply(powersOfTwo[n]);
    };

    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;

    BigInteger.prototype.shiftRight = function (v) {
      var remQuo;
      var n = parseValue(v).toJSNumber();

      if (!shift_isSmall(n)) {
        throw new Error(String(n) + " is too large for shifting.");
      }

      if (n < 0) return this.shiftLeft(-n);
      var result = this;

      while (n >= powers2Length) {
        if (result.isZero() || result.isNegative() && result.isUnit()) return result;
        remQuo = divModAny(result, highestPower2);
        result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
        n -= powers2Length - 1;
      }

      remQuo = divModAny(result, powersOfTwo[n]);
      return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
    };

    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;

    function bitwise(x, y, fn) {
      y = parseValue(y);
      var xSign = x.isNegative(),
          ySign = y.isNegative();
      var xRem = xSign ? x.not() : x,
          yRem = ySign ? y.not() : y;
      var xDigit = 0,
          yDigit = 0;
      var xDivMod = null,
          yDivMod = null;
      var result = [];

      while (!xRem.isZero() || !yRem.isZero()) {
        xDivMod = divModAny(xRem, highestPower2);
        xDigit = xDivMod[1].toJSNumber();

        if (xSign) {
          xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers
        }

        yDivMod = divModAny(yRem, highestPower2);
        yDigit = yDivMod[1].toJSNumber();

        if (ySign) {
          yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers
        }

        xRem = xDivMod[0];
        yRem = yDivMod[0];
        result.push(fn(xDigit, yDigit));
      }

      var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);

      for (var i = result.length - 1; i >= 0; i -= 1) {
        sum = sum.multiply(highestPower2).add(bigInt(result[i]));
      }

      return sum;
    }

    BigInteger.prototype.not = function () {
      return this.negate().prev();
    };

    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;

    BigInteger.prototype.and = function (n) {
      return bitwise(this, n, function (a, b) {
        return a & b;
      });
    };

    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;

    BigInteger.prototype.or = function (n) {
      return bitwise(this, n, function (a, b) {
        return a | b;
      });
    };

    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;

    BigInteger.prototype.xor = function (n) {
      return bitwise(this, n, function (a, b) {
        return a ^ b;
      });
    };

    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;
    var LOBMASK_I = 1 << 30,
        LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;

    function roughLOB(n) {
      // get lowestOneBit (rough)
      // SmallInteger: return Min(lowestOneBit(n), 1 << 30)
      // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]
      var v = n.value,
          x = typeof v === "number" ? v | LOBMASK_I : typeof v === "bigint" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;
      return x & -x;
    }

    function integerLogarithm(value, base) {
      if (base.compareTo(value) <= 0) {
        var tmp = integerLogarithm(value, base.square(base));
        var p = tmp.p;
        var e = tmp.e;
        var t = p.multiply(base);
        return t.compareTo(value) <= 0 ? {
          p: t,
          e: e * 2 + 1
        } : {
          p: p,
          e: e * 2
        };
      }

      return {
        p: bigInt(1),
        e: 0
      };
    }

    BigInteger.prototype.bitLength = function () {
      var n = this;

      if (n.compareTo(bigInt(0)) < 0) {
        n = n.negate().subtract(bigInt(1));
      }

      if (n.compareTo(bigInt(0)) === 0) {
        return bigInt(0);
      }

      return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
    };

    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;

    function max(a, b) {
      a = parseValue(a);
      b = parseValue(b);
      return a.greater(b) ? a : b;
    }

    function min(a, b) {
      a = parseValue(a);
      b = parseValue(b);
      return a.lesser(b) ? a : b;
    }

    function gcd(a, b) {
      a = parseValue(a).abs();
      b = parseValue(b).abs();
      if (a.equals(b)) return a;
      if (a.isZero()) return b;
      if (b.isZero()) return a;
      var c = Integer[1],
          d,
          t;

      while (a.isEven() && b.isEven()) {
        d = min(roughLOB(a), roughLOB(b));
        a = a.divide(d);
        b = b.divide(d);
        c = c.multiply(d);
      }

      while (a.isEven()) {
        a = a.divide(roughLOB(a));
      }

      do {
        while (b.isEven()) {
          b = b.divide(roughLOB(b));
        }

        if (a.greater(b)) {
          t = b;
          b = a;
          a = t;
        }

        b = b.subtract(a);
      } while (!b.isZero());

      return c.isUnit() ? a : a.multiply(c);
    }

    function lcm(a, b) {
      a = parseValue(a).abs();
      b = parseValue(b).abs();
      return a.divide(gcd(a, b)).multiply(b);
    }

    function randBetween(a, b, rng) {
      a = parseValue(a);
      b = parseValue(b);
      var usedRNG = rng || Math.random;
      var low = min(a, b),
          high = max(a, b);
      var range = high.subtract(low).add(1);
      if (range.isSmall) return low.add(Math.floor(usedRNG() * range));
      var digits = toBase(range, BASE).value;
      var result = [],
          restricted = true;

      for (var i = 0; i < digits.length; i++) {
        var top = restricted ? digits[i] : BASE;
        var digit = truncate(usedRNG() * top);
        result.push(digit);
        if (digit < top) restricted = false;
      }

      return low.add(Integer.fromArray(result, BASE, false));
    }

    var parseBase = function parseBase(text, base, alphabet, caseSensitive) {
      alphabet = alphabet || DEFAULT_ALPHABET;
      text = String(text);

      if (!caseSensitive) {
        text = text.toLowerCase();
        alphabet = alphabet.toLowerCase();
      }

      var length = text.length;
      var i;
      var absBase = Math.abs(base);
      var alphabetValues = {};

      for (i = 0; i < alphabet.length; i++) {
        alphabetValues[alphabet[i]] = i;
      }

      for (i = 0; i < length; i++) {
        var c = text[i];
        if (c === "-") continue;

        if (c in alphabetValues) {
          if (alphabetValues[c] >= absBase) {
            if (c === "1" && absBase === 1) continue;
            throw new Error(c + " is not a valid digit in base " + base + ".");
          }
        }
      }

      base = parseValue(base);
      var digits = [];
      var isNegative = text[0] === "-";

      for (i = isNegative ? 1 : 0; i < text.length; i++) {
        var c = text[i];
        if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));else if (c === "<") {
          var start = i;

          do {
            i++;
          } while (text[i] !== ">" && i < text.length);

          digits.push(parseValue(text.slice(start + 1, i)));
        } else throw new Error(c + " is not a valid character");
      }

      return parseBaseFromArray(digits, base, isNegative);
    };

    function parseBaseFromArray(digits, base, isNegative) {
      var val = Integer[0],
          pow = Integer[1],
          i;

      for (i = digits.length - 1; i >= 0; i--) {
        val = val.add(digits[i].times(pow));
        pow = pow.times(base);
      }

      return isNegative ? val.negate() : val;
    }

    function stringify(digit, alphabet) {
      alphabet = alphabet || DEFAULT_ALPHABET;

      if (digit < alphabet.length) {
        return alphabet[digit];
      }

      return "<" + digit + ">";
    }

    function toBase(n, base) {
      base = bigInt(base);

      if (base.isZero()) {
        if (n.isZero()) return {
          value: [0],
          isNegative: false
        };
        throw new Error("Cannot convert nonzero numbers to base 0.");
      }

      if (base.equals(-1)) {
        if (n.isZero()) return {
          value: [0],
          isNegative: false
        };
        if (n.isNegative()) return {
          value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])),
          isNegative: false
        };
        var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);
        arr.unshift([1]);
        return {
          value: [].concat.apply([], arr),
          isNegative: false
        };
      }

      var neg = false;

      if (n.isNegative() && base.isPositive()) {
        neg = true;
        n = n.abs();
      }

      if (base.isUnit()) {
        if (n.isZero()) return {
          value: [0],
          isNegative: false
        };
        return {
          value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),
          isNegative: neg
        };
      }

      var out = [];
      var left = n,
          divmod;

      while (left.isNegative() || left.compareAbs(base) >= 0) {
        divmod = left.divmod(base);
        left = divmod.quotient;
        var digit = divmod.remainder;

        if (digit.isNegative()) {
          digit = base.minus(digit).abs();
          left = left.next();
        }

        out.push(digit.toJSNumber());
      }

      out.push(left.toJSNumber());
      return {
        value: out.reverse(),
        isNegative: neg
      };
    }

    function toBaseString(n, base, alphabet) {
      var arr = toBase(n, base);
      return (arr.isNegative ? "-" : "") + arr.value.map(function (x) {
        return stringify(x, alphabet);
      }).join('');
    }

    BigInteger.prototype.toArray = function (radix) {
      return toBase(this, radix);
    };

    SmallInteger.prototype.toArray = function (radix) {
      return toBase(this, radix);
    };

    NativeBigInt.prototype.toArray = function (radix) {
      return toBase(this, radix);
    };

    BigInteger.prototype.toString = function (radix, alphabet) {
      if (radix === undefined$1) radix = 10;
      if (radix !== 10) return toBaseString(this, radix, alphabet);
      var v = this.value,
          l = v.length,
          str = String(v[--l]),
          zeros = "0000000",
          digit;

      while (--l >= 0) {
        digit = String(v[l]);
        str += zeros.slice(digit.length) + digit;
      }

      var sign = this.sign ? "-" : "";
      return sign + str;
    };

    SmallInteger.prototype.toString = function (radix, alphabet) {
      if (radix === undefined$1) radix = 10;
      if (radix != 10) return toBaseString(this, radix, alphabet);
      return String(this.value);
    };

    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;

    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () {
      return this.toString();
    };

    BigInteger.prototype.valueOf = function () {
      return parseInt(this.toString(), 10);
    };

    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;

    SmallInteger.prototype.valueOf = function () {
      return this.value;
    };

    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;

    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {
      return parseInt(this.toString(), 10);
    };

    function parseStringValue(v) {
      if (isPrecise(+v)) {
        var x = +v;
        if (x === truncate(x)) return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
        throw new Error("Invalid integer: " + v);
      }

      var sign = v[0] === "-";
      if (sign) v = v.slice(1);
      var split = v.split(/e/i);
      if (split.length > 2) throw new Error("Invalid integer: " + split.join("e"));

      if (split.length === 2) {
        var exp = split[1];
        if (exp[0] === "+") exp = exp.slice(1);
        exp = +exp;
        if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
        var text = split[0];
        var decimalPlace = text.indexOf(".");

        if (decimalPlace >= 0) {
          exp -= text.length - decimalPlace - 1;
          text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
        }

        if (exp < 0) throw new Error("Cannot include negative exponent part for integers");
        text += new Array(exp + 1).join("0");
        v = text;
      }

      var isValid = /^([0-9][0-9]*)$/.test(v);
      if (!isValid) throw new Error("Invalid integer: " + v);

      if (supportsNativeBigInt) {
        return new NativeBigInt(BigInt(sign ? "-" + v : v));
      }

      var r = [],
          max = v.length,
          l = LOG_BASE,
          min = max - l;

      while (max > 0) {
        r.push(+v.slice(min, max));
        min -= l;
        if (min < 0) min = 0;
        max -= l;
      }

      trim(r);
      return new BigInteger(r, sign);
    }

    function parseNumberValue(v) {
      if (supportsNativeBigInt) {
        return new NativeBigInt(BigInt(v));
      }

      if (isPrecise(v)) {
        if (v !== truncate(v)) throw new Error(v + " is not an integer.");
        return new SmallInteger(v);
      }

      return parseStringValue(v.toString());
    }

    function parseValue(v) {
      if (typeof v === "number") {
        return parseNumberValue(v);
      }

      if (typeof v === "string") {
        return parseStringValue(v);
      }

      if (typeof v === "bigint") {
        return new NativeBigInt(v);
      }

      return v;
    } // Pre-define numbers in range [-999,999]


    for (var i = 0; i < 1000; i++) {
      Integer[i] = parseValue(i);
      if (i > 0) Integer[-i] = parseValue(-i);
    } // Backwards compatibility


    Integer.one = Integer[1];
    Integer.zero = Integer[0];
    Integer.minusOne = Integer[-1];
    Integer.max = max;
    Integer.min = min;
    Integer.gcd = gcd;
    Integer.lcm = lcm;

    Integer.isInstance = function (x) {
      return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;
    };

    Integer.randBetween = randBetween;

    Integer.fromArray = function (digits, base, isNegative) {
      return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
    };

    return Integer;
  }(); // Node.js check


  if ( module.hasOwnProperty("exports")) {
    module.exports = bigInt;
  } //amd check
});

var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var toStr = Object.prototype.toString;

var isStandardArguments = function isArguments(value) {
  if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
    return false;
  }

  return toStr.call(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
  if (isStandardArguments(value)) {
    return true;
  }

  return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value) !== '[object Array]' && toStr.call(value.callee) === '[object Function]';
};

var supportsStandardArguments = function () {
  return isStandardArguments(arguments);
}();

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

var isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

var toStr$1 = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag$1 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
var getProto = Object.getPrototypeOf;

var getGeneratorFunc = function getGeneratorFunc() {
  // eslint-disable-line consistent-return
  if (!hasToStringTag$1) {
    return false;
  }

  try {
    return Function('return function*() {}')();
  } catch (e) {}
};

var generatorFunc = getGeneratorFunc();
var GeneratorFunction = generatorFunc ? getProto(generatorFunc) : {};

var isGeneratorFunction = function isGeneratorFunction(fn) {
  if (typeof fn !== 'function') {
    return false;
  }

  if (isFnRegex.test(fnToStr.call(fn))) {
    return true;
  }

  if (!hasToStringTag$1) {
    var str = toStr$1.call(fn);
    return str === '[object GeneratorFunction]';
  }

  return getProto(fn) === GeneratorFunction;
};

var hasOwn = Object.prototype.hasOwnProperty;
var toString$1 = Object.prototype.toString;

var foreach = function forEach(obj, fn, ctx) {
  if (toString$1.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

/**
 * Array#filter.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Object=} self
 * @return {Array}
 * @throw TypeError
 */
var arrayFilter = function arrayFilter(arr, fn, self) {
  if (arr.filter) return arr.filter(fn, self);
  if (void 0 === arr || null === arr) throw new TypeError();
  if ('function' != typeof fn) throw new TypeError();
  var ret = [];

  for (var i = 0; i < arr.length; i++) {
    if (!hasOwn$1.call(arr, i)) continue;
    var val = arr[i];
    if (fn.call(self, val, i, arr)) ret.push(val);
  }

  return ret;
};

var hasOwn$1 = Object.prototype.hasOwnProperty;

var availableTypedArrays = function availableTypedArrays() {
  return arrayFilter(['BigInt64Array', 'BigUint64Array', 'Float32Array', 'Float64Array', 'Int16Array', 'Int32Array', 'Int8Array', 'Uint16Array', 'Uint32Array', 'Uint8Array', 'Uint8ClampedArray'], function (typedArray) {
    return typeof commonjsGlobal[typedArray] === 'function';
  });
};

/* eslint complexity: [2, 18], max-statements: [2, 33] */

var shams = function hasSymbols() {
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }

  if (typeof Symbol.iterator === 'symbol') {
    return true;
  }

  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);

  if (typeof sym === 'string') {
    return false;
  }

  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
    return false;
  }

  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  } // temp disabled per https://github.com/ljharb/object.assign/issues/17
  // if (sym instanceof Symbol) { return false; }
  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  // if (!(symObj instanceof Symbol)) { return false; }
  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


  var symVal = 42;
  obj[sym] = symVal;

  for (sym in obj) {
    return false;
  } // eslint-disable-line no-restricted-syntax


  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }

  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }

  var syms = Object.getOwnPropertySymbols(obj);

  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }

  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }

  if (typeof Object.getOwnPropertyDescriptor === 'function') {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }

  return true;
};

var origSymbol = commonjsGlobal.Symbol;

var hasSymbols = function hasNativeSymbols() {
  if (typeof origSymbol !== 'function') {
    return false;
  }

  if (typeof Symbol !== 'function') {
    return false;
  }

  if (typeof origSymbol('foo') !== 'symbol') {
    return false;
  }

  if (typeof Symbol('bar') !== 'symbol') {
    return false;
  }

  return shams();
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr$2 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation = function bind(that) {
  var target = this;

  if (typeof target !== 'function' || toStr$2.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }

  var args = slice.call(arguments, 1);
  var bound;

  var binder = function binder() {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice.call(arguments)));

      if (Object(result) === result) {
        return result;
      }

      return this;
    } else {
      return target.apply(that, args.concat(slice.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];

  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

  if (target.prototype) {
    var Empty = function Empty() {};

    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};

var functionBind = Function.prototype.bind || implementation;

/* globals
	Atomics,
	SharedArrayBuffer,
*/


var undefined$1;
var $TypeError = TypeError;
var $gOPD = Object.getOwnPropertyDescriptor;

if ($gOPD) {
  try {
    $gOPD({}, '');
  } catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
  }
}

var throwTypeError = function throwTypeError() {
  throw new $TypeError();
};

var ThrowTypeError = $gOPD ? function () {
  try {
    // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    arguments.callee; // IE 8 does not throw here

    return throwTypeError;
  } catch (calleeThrows) {
    try {
      // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
      return $gOPD(arguments, 'callee').get;
    } catch (gOPDthrows) {
      return throwTypeError;
    }
  }
}() : throwTypeError;
var hasSymbols$1 = hasSymbols();

var getProto$1 = Object.getPrototypeOf || function (x) {
  return x.__proto__;
}; // eslint-disable-line no-proto

var generatorFunction =  undefined$1;

var asyncFunction =  undefined$1;

var asyncGenFunction =  undefined$1;
var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$1(Uint8Array);
var INTRINSICS = {
  '%Array%': Array,
  '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
  '%ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
  '%ArrayIteratorPrototype%': hasSymbols$1 ? getProto$1([][Symbol.iterator]()) : undefined$1,
  '%ArrayPrototype%': Array.prototype,
  '%ArrayProto_entries%': Array.prototype.entries,
  '%ArrayProto_forEach%': Array.prototype.forEach,
  '%ArrayProto_keys%': Array.prototype.keys,
  '%ArrayProto_values%': Array.prototype.values,
  '%AsyncFromSyncIteratorPrototype%': undefined$1,
  '%AsyncFunction%': asyncFunction,
  '%AsyncFunctionPrototype%':  undefined$1,
  '%AsyncGenerator%':  undefined$1,
  '%AsyncGeneratorFunction%': asyncGenFunction,
  '%AsyncGeneratorPrototype%':  undefined$1,
  '%AsyncIteratorPrototype%':  undefined$1,
  '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
  '%Boolean%': Boolean,
  '%BooleanPrototype%': Boolean.prototype,
  '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
  '%DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
  '%Date%': Date,
  '%DatePrototype%': Date.prototype,
  '%decodeURI%': decodeURI,
  '%decodeURIComponent%': decodeURIComponent,
  '%encodeURI%': encodeURI,
  '%encodeURIComponent%': encodeURIComponent,
  '%Error%': Error,
  '%ErrorPrototype%': Error.prototype,
  '%eval%': eval,
  // eslint-disable-line no-eval
  '%EvalError%': EvalError,
  '%EvalErrorPrototype%': EvalError.prototype,
  '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
  '%Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
  '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
  '%Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
  '%Function%': Function,
  '%FunctionPrototype%': Function.prototype,
  '%Generator%':  undefined$1,
  '%GeneratorFunction%': generatorFunction,
  '%GeneratorPrototype%':  undefined$1,
  '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
  '%Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
  '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
  '%Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
  '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
  '%Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
  '%isFinite%': isFinite,
  '%isNaN%': isNaN,
  '%IteratorPrototype%': hasSymbols$1 ? getProto$1(getProto$1([][Symbol.iterator]())) : undefined$1,
  '%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
  '%JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined$1,
  '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
  '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto$1(new Map()[Symbol.iterator]()),
  '%MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
  '%Math%': Math,
  '%Number%': Number,
  '%NumberPrototype%': Number.prototype,
  '%Object%': Object,
  '%ObjectPrototype%': Object.prototype,
  '%ObjProto_toString%': Object.prototype.toString,
  '%ObjProto_valueOf%': Object.prototype.valueOf,
  '%parseFloat%': parseFloat,
  '%parseInt%': parseInt,
  '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
  '%PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
  '%PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
  '%Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
  '%Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
  '%Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
  '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
  '%RangeError%': RangeError,
  '%RangeErrorPrototype%': RangeError.prototype,
  '%ReferenceError%': ReferenceError,
  '%ReferenceErrorPrototype%': ReferenceError.prototype,
  '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
  '%RegExp%': RegExp,
  '%RegExpPrototype%': RegExp.prototype,
  '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
  '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$1 ? undefined$1 : getProto$1(new Set()[Symbol.iterator]()),
  '%SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
  '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
  '%SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
  '%String%': String,
  '%StringIteratorPrototype%': hasSymbols$1 ? getProto$1(''[Symbol.iterator]()) : undefined$1,
  '%StringPrototype%': String.prototype,
  '%Symbol%': hasSymbols$1 ? Symbol : undefined$1,
  '%SymbolPrototype%': hasSymbols$1 ? Symbol.prototype : undefined$1,
  '%SyntaxError%': SyntaxError,
  '%SyntaxErrorPrototype%': SyntaxError.prototype,
  '%ThrowTypeError%': ThrowTypeError,
  '%TypedArray%': TypedArray,
  '%TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
  '%TypeError%': $TypeError,
  '%TypeErrorPrototype%': $TypeError.prototype,
  '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
  '%Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
  '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
  '%Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
  '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
  '%Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
  '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
  '%Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
  '%URIError%': URIError,
  '%URIErrorPrototype%': URIError.prototype,
  '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
  '%WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
  '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
  '%WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
};
var $replace = functionBind.call(Function.call, String.prototype.replace);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g;
/** Used to match backslashes in property paths. */

var stringToPath = function stringToPath(string) {
  var result = [];
  $replace(string, rePropName, function (match, number, quote, subString) {
    result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  });
  return result;
};
/* end adaptation */


var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  if (!(name in INTRINSICS)) {
    throw new SyntaxError('intrinsic ' + name + ' does not exist!');
  } // istanbul ignore if // hopefully this is impossible to test :-)


  if (typeof INTRINSICS[name] === 'undefined' && !allowMissing) {
    throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  }

  return INTRINSICS[name];
};

var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
  if (typeof name !== 'string' || name.length === 0) {
    throw new TypeError('intrinsic name must be a non-empty string');
  }

  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new TypeError('"allowMissing" argument must be a boolean');
  }

  var parts = stringToPath(name);
  var value = getBaseIntrinsic('%' + (parts.length > 0 ? parts[0] : '') + '%', allowMissing);

  for (var i = 1; i < parts.length; i += 1) {
    if (value != null) {
      if ($gOPD && i + 1 >= parts.length) {
        var desc = $gOPD(value, parts[i]);

        if (!allowMissing && !(parts[i] in value)) {
          throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
        }

        value = desc ? desc.get || desc.value : value[parts[i]];
      } else {
        value = value[parts[i]];
      }
    }
  }

  return value;
};

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);

var callBind = function callBind() {
  return $reflectApply(functionBind, $call, arguments);
};

var apply = function applyBind() {
  return $reflectApply(functionBind, $apply, arguments);
};
callBind.apply = apply;

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

var callBound = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic(name, !!allowMissing);

  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.')) {
    return callBind(intrinsic);
  }

  return intrinsic;
};

var $gOPD$1 = GetIntrinsic('%Object.getOwnPropertyDescriptor%');

if ($gOPD$1) {
  try {
    $gOPD$1([], 'length');
  } catch (e) {
    // IE 8 has a broken gOPD
    $gOPD$1 = null;
  }
}

var getOwnPropertyDescriptor = $gOPD$1;

var $toString = callBound('Object.prototype.toString');
var hasSymbols$2 = hasSymbols();
var hasToStringTag$2 = hasSymbols$2 && typeof Symbol.toStringTag === 'symbol';
var typedArrays = availableTypedArrays();

var $indexOf$1 = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
  for (var i = 0; i < array.length; i += 1) {
    if (array[i] === value) {
      return i;
    }
  }

  return -1;
};

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

if (hasToStringTag$2 && getOwnPropertyDescriptor && getPrototypeOf) {
  foreach(typedArrays, function (typedArray) {
    var arr = new commonjsGlobal[typedArray]();

    if (!(Symbol.toStringTag in arr)) {
      throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
    }

    var proto = getPrototypeOf(arr);
    var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);

    if (!descriptor) {
      var superProto = getPrototypeOf(proto);
      descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
    }

    toStrTags[typedArray] = descriptor.get;
  });
}

var tryTypedArrays = function tryAllTypedArrays(value) {
  var anyTrue = false;
  foreach(toStrTags, function (getter, typedArray) {
    if (!anyTrue) {
      try {
        anyTrue = getter.call(value) === typedArray;
      } catch (e) {
        /**/
      }
    }
  });
  return anyTrue;
};

var isTypedArray = function isTypedArray(value) {
  if (!value || typeof value !== 'object') {
    return false;
  }

  if (!hasToStringTag$2) {
    var tag = $slice($toString(value), 8, -1);
    return $indexOf$1(typedArrays, tag) > -1;
  }

  if (!getOwnPropertyDescriptor) {
    return false;
  }

  return tryTypedArrays(value);
};

var $toString$1 = callBound('Object.prototype.toString');
var hasSymbols$3 = hasSymbols();
var hasToStringTag$3 = hasSymbols$3 && typeof Symbol.toStringTag === 'symbol';
var typedArrays$1 = availableTypedArrays();
var $slice$1 = callBound('String.prototype.slice');
var toStrTags$1 = {};
var getPrototypeOf$1 = Object.getPrototypeOf; // require('getprototypeof');

if (hasToStringTag$3 && getOwnPropertyDescriptor && getPrototypeOf$1) {
  foreach(typedArrays$1, function (typedArray) {
    if (typeof commonjsGlobal[typedArray] === 'function') {
      var arr = new commonjsGlobal[typedArray]();

      if (!(Symbol.toStringTag in arr)) {
        throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
      }

      var proto = getPrototypeOf$1(arr);
      var descriptor = getOwnPropertyDescriptor(proto, Symbol.toStringTag);

      if (!descriptor) {
        var superProto = getPrototypeOf$1(proto);
        descriptor = getOwnPropertyDescriptor(superProto, Symbol.toStringTag);
      }

      toStrTags$1[typedArray] = descriptor.get;
    }
  });
}

var tryTypedArrays$1 = function tryAllTypedArrays(value) {
  var foundName = false;
  foreach(toStrTags$1, function (getter, typedArray) {
    if (!foundName) {
      try {
        var name = getter.call(value);

        if (name === typedArray) {
          foundName = name;
        }
      } catch (e) {}
    }
  });
  return foundName;
};

var whichTypedArray = function whichTypedArray(value) {
  if (!isTypedArray(value)) {
    return false;
  }

  if (!hasToStringTag$3) {
    return $slice$1($toString$1(value), 8, -1);
  }

  return tryTypedArrays$1(value);
};

var types = createCommonjsModule(function (module, exports) {

  function uncurryThis(f) {
    return f.call.bind(f);
  }

  var BigIntSupported = typeof BigInteger !== 'undefined';
  var SymbolSupported = typeof Symbol !== 'undefined';
  var ObjectToString = uncurryThis(Object.prototype.toString);
  var numberValue = uncurryThis(Number.prototype.valueOf);
  var stringValue = uncurryThis(String.prototype.valueOf);
  var booleanValue = uncurryThis(Boolean.prototype.valueOf);

  if (BigIntSupported) {
    var bigIntValue = uncurryThis(BigInteger.prototype.valueOf);
  }

  if (SymbolSupported) {
    var symbolValue = uncurryThis(Symbol.prototype.valueOf);
  }

  function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== 'object') {
      return false;
    }

    try {
      prototypeValueOf(value);
      return true;
    } catch (e) {
      return false;
    }
  }

  exports.isArgumentsObject = isArguments;
  exports.isGeneratorFunction = isGeneratorFunction;
  exports.isTypedArray = isTypedArray; // Taken from here and modified for better browser support
  // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js

  function isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
  }

  exports.isPromise = isPromise;

  function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
      return ArrayBuffer.isView(value);
    }

    return isTypedArray(value) || isDataView(value);
  }

  exports.isArrayBufferView = isArrayBufferView;

  function isUint8Array(value) {
    return whichTypedArray(value) === 'Uint8Array';
  }

  exports.isUint8Array = isUint8Array;

  function isUint8ClampedArray(value) {
    return whichTypedArray(value) === 'Uint8ClampedArray';
  }

  exports.isUint8ClampedArray = isUint8ClampedArray;

  function isUint16Array(value) {
    return whichTypedArray(value) === 'Uint16Array';
  }

  exports.isUint16Array = isUint16Array;

  function isUint32Array(value) {
    return whichTypedArray(value) === 'Uint32Array';
  }

  exports.isUint32Array = isUint32Array;

  function isInt8Array(value) {
    return whichTypedArray(value) === 'Int8Array';
  }

  exports.isInt8Array = isInt8Array;

  function isInt16Array(value) {
    return whichTypedArray(value) === 'Int16Array';
  }

  exports.isInt16Array = isInt16Array;

  function isInt32Array(value) {
    return whichTypedArray(value) === 'Int32Array';
  }

  exports.isInt32Array = isInt32Array;

  function isFloat32Array(value) {
    return whichTypedArray(value) === 'Float32Array';
  }

  exports.isFloat32Array = isFloat32Array;

  function isFloat64Array(value) {
    return whichTypedArray(value) === 'Float64Array';
  }

  exports.isFloat64Array = isFloat64Array;

  function isBigInt64Array(value) {
    return whichTypedArray(value) === 'BigInt64Array';
  }

  exports.isBigInt64Array = isBigInt64Array;

  function isBigUint64Array(value) {
    return whichTypedArray(value) === 'BigUint64Array';
  }

  exports.isBigUint64Array = isBigUint64Array;

  function isMapToString(value) {
    return ObjectToString(value) === '[object Map]';
  }

  isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());

  function isMap(value) {
    if (typeof Map === 'undefined') {
      return false;
    }

    return isMapToString.working ? isMapToString(value) : value instanceof Map;
  }

  exports.isMap = isMap;

  function isSetToString(value) {
    return ObjectToString(value) === '[object Set]';
  }

  isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());

  function isSet(value) {
    if (typeof Set === 'undefined') {
      return false;
    }

    return isSetToString.working ? isSetToString(value) : value instanceof Set;
  }

  exports.isSet = isSet;

  function isWeakMapToString(value) {
    return ObjectToString(value) === '[object WeakMap]';
  }

  isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());

  function isWeakMap(value) {
    if (typeof WeakMap === 'undefined') {
      return false;
    }

    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
  }

  exports.isWeakMap = isWeakMap;

  function isWeakSetToString(value) {
    return ObjectToString(value) === '[object WeakSet]';
  }

  isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());

  function isWeakSet(value) {
    return isWeakSetToString(value);
  }

  exports.isWeakSet = isWeakSet;

  function isArrayBufferToString(value) {
    return ObjectToString(value) === '[object ArrayBuffer]';
  }

  isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());

  function isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') {
      return false;
    }

    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
  }

  exports.isArrayBuffer = isArrayBuffer;

  function isDataViewToString(value) {
    return ObjectToString(value) === '[object DataView]';
  }

  isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));

  function isDataView(value) {
    if (typeof DataView === 'undefined') {
      return false;
    }

    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
  }

  exports.isDataView = isDataView;

  function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === '[object SharedArrayBuffer]';
  }

  isSharedArrayBufferToString.working = typeof SharedArrayBuffer !== 'undefined' && isSharedArrayBufferToString(new SharedArrayBuffer());

  function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBuffer === 'undefined') {
      return false;
    }

    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBuffer;
  }

  exports.isSharedArrayBuffer = isSharedArrayBuffer;

  function isAsyncFunction(value) {
    return ObjectToString(value) === '[object AsyncFunction]';
  }

  exports.isAsyncFunction = isAsyncFunction;

  function isMapIterator(value) {
    return ObjectToString(value) === '[object Map Iterator]';
  }

  exports.isMapIterator = isMapIterator;

  function isSetIterator(value) {
    return ObjectToString(value) === '[object Set Iterator]';
  }

  exports.isSetIterator = isSetIterator;

  function isGeneratorObject(value) {
    return ObjectToString(value) === '[object Generator]';
  }

  exports.isGeneratorObject = isGeneratorObject;

  function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === '[object WebAssembly.Module]';
  }

  exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

  function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
  }

  exports.isNumberObject = isNumberObject;

  function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
  }

  exports.isStringObject = isStringObject;

  function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
  }

  exports.isBooleanObject = isBooleanObject;

  function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
  }

  exports.isBigIntObject = isBigIntObject;

  function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
  }

  exports.isSymbolObject = isSymbolObject;

  function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
  }

  exports.isBoxedPrimitive = isBoxedPrimitive;

  function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
  }

  exports.isAnyArrayBuffer = isAnyArrayBuffer;
  ['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function (method) {
    Object.defineProperty(exports, method, {
      enumerable: false,
      value: function value() {
        throw new Error(method + ' is not supported in userland');
      }
    });
  });
});

var isBufferBrowser = function isBuffer(arg) {
  return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function TempCtor() {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

var util = createCommonjsModule(function (module, exports) {
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};

    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }

    return descriptors;
  };

  var formatRegExp = /%[sdj%]/g;

  exports.format = function (f) {
    if (!isString(f)) {
      var objects = [];

      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }

      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') return '%';
      if (i >= len) return x;

      switch (x) {
        case '%s':
          return String(args[i++]);

        case '%d':
          return Number(args[i++]);

        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }

        default:
          return x;
      }
    });

    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }

    return str;
  }; // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.


  exports.deprecate = function (fn, msg) {
    if (typeof process !== 'undefined' && process.noDeprecation === true) {
      return fn;
    } // Allow for deprecating things in the process of starting up.


    if (typeof process === 'undefined') {
      return function () {
        return exports.deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;

    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) {
          throw new Error(msg);
        } else if (process.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }

        warned = true;
      }

      return fn.apply(this, arguments);
    }

    return deprecated;
  };

  var debugs = {};
  var debugEnvRegex = /^$/;

  if (process.env.NODE_DEBUG) {
    var debugEnv = process.env.NODE_DEBUG;
    debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
    debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
  }

  exports.debuglog = function (set) {
    set = set.toUpperCase();

    if (!debugs[set]) {
      if (debugEnvRegex.test(set)) {
        var pid = process.pid;

        debugs[set] = function () {
          var msg = exports.format.apply(exports, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function () {};
      }
    }

    return debugs[set];
  };
  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */

  /* legacy: obj, showHidden, depth, colors*/


  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    }; // legacy...

    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];

    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      exports._extend(ctx, opts);
    } // set default options


    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

  inspect.colors = {
    'bold': [1, 22],
    'italic': [3, 23],
    'underline': [4, 24],
    'inverse': [7, 27],
    'white': [37, 39],
    'grey': [90, 39],
    'black': [30, 39],
    'blue': [34, 39],
    'cyan': [36, 39],
    'green': [32, 39],
    'magenta': [35, 39],
    'red': [31, 39],
    'yellow': [33, 39]
  }; // Don't use 'blue' not visible on cmd.exe

  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };

  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};
    array.forEach(function (val, idx) {
      hash[val] = true;
    });
    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);

      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }

      return ret;
    } // Primitive types cannot have properties


    var primitive = formatPrimitive(ctx, value);

    if (primitive) {
      return primitive;
    } // Look up the keys of the object.


    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    } // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    } // Some type of object without properties can be shortcutted.


    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }

      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }

      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }

      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}']; // Make Array say that they are Array

    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions


    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    } // Make RegExps say that they are RegExps


    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date


    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error


    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);
    var output;

    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }

    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];

    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }

    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
      value: value[key]
    };

    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }

    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }

    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }

        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }

    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }

      name = JSON.stringify('' + key);

      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  } // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.


  exports.types = types;

  function isArray(ar) {
    return Array.isArray(ar);
  }

  exports.isArray = isArray;

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  exports.isBoolean = isBoolean;

  function isNull(arg) {
    return arg === null;
  }

  exports.isNull = isNull;

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  exports.isNullOrUndefined = isNullOrUndefined;

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  exports.isNumber = isNumber;

  function isString(arg) {
    return typeof arg === 'string';
  }

  exports.isString = isString;

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  exports.isSymbol = isSymbol;

  function isUndefined(arg) {
    return arg === void 0;
  }

  exports.isUndefined = isUndefined;

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  exports.isRegExp = isRegExp;
  exports.types.isRegExp = isRegExp;

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  exports.isObject = isObject;

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  exports.isDate = isDate;
  exports.types.isDate = isDate;

  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  exports.isError = isError;
  exports.types.isNativeError = isError;

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  exports.isFunction = isFunction;

  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
    typeof arg === 'undefined';
  }

  exports.isPrimitive = isPrimitive;
  exports.isBuffer = isBufferBrowser;

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }

  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  } // log is just a thin wrapper to console.log that prepends a timestamp


  exports.log = function () {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
  };
  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * The Function.prototype.inherits from lang.js rewritten as a standalone
   * function (not on Function.prototype). NOTE: If this file is to be loaded
   * during bootstrapping this function needs to be rewritten using some native
   * functions as prototype setup using normal JavaScript does not work as
   * expected during bootstrapping (see mirror.js in r114903).
   *
   * @param {function} ctor Constructor function which needs to inherit the
   *     prototype.
   * @param {function} superCtor Constructor function to inherit prototype from.
   */


  exports.inherits = inherits_browser;

  exports._extend = function (origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;

    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }

    return origin;
  };

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

  exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
      var fn = original[kCustomPromisifiedSymbol];

      if (typeof fn !== 'function') {
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      }

      Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return fn;
    }

    function fn() {
      var promiseResolve, promiseReject;
      var promise = new Promise(function (resolve, reject) {
        promiseResolve = resolve;
        promiseReject = reject;
      });
      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }

      args.push(function (err, value) {
        if (err) {
          promiseReject(err);
        } else {
          promiseResolve(value);
        }
      });

      try {
        original.apply(this, args);
      } catch (err) {
        promiseReject(err);
      }

      return promise;
    }

    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
  };

  exports.promisify.custom = kCustomPromisifiedSymbol;

  function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
      var newReason = new Error('Promise was rejected with a falsy value');
      newReason.reason = reason;
      reason = newReason;
    }

    return cb(reason);
  }

  function callbackify(original) {
    if (typeof original !== 'function') {
      throw new TypeError('The "original" argument must be of type Function');
    } // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.


    function callbackified() {
      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }

      var maybeCb = args.pop();

      if (typeof maybeCb !== 'function') {
        throw new TypeError('The last argument must be of type Function');
      }

      var self = this;

      var cb = function cb() {
        return maybeCb.apply(self, arguments);
      }; // In true node style we process the callback on `nextTick` with all the
      // implications (stack, `uncaughtException`, `async_hooks`)


      original.apply(this, args).then(function (ret) {
        process.nextTick(cb.bind(null, null, ret));
      }, function (rej) {
        process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
      });
    }

    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
  }

  exports.callbackify = callbackify;
});

function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var hasOwn$2 = Object.prototype.hasOwnProperty;

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    if (hasOwn$2.call(obj, key)) keys.push(key);
  }

  return keys;
}; // based on node assert, original notice:
var pSlice = Array.prototype.slice;

var _functionsHaveNames;

function functionsHaveNames() {
  if (typeof _functionsHaveNames !== 'undefined') {
    return _functionsHaveNames;
  }

  return _functionsHaveNames = function () {
    return function foo() {}.name === 'foo';
  }();
}

function pToString(obj) {
  return Object.prototype.toString.call(obj);
}

function isView(arrbuf) {
  if (buffer.isBuffer(arrbuf)) {
    return false;
  }

  if (typeof global$1.ArrayBuffer !== 'function') {
    return false;
  }

  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }

  if (!arrbuf) {
    return false;
  }

  if (arrbuf instanceof DataView) {
    return true;
  }

  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }

  return false;
} // 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.


function assert(value, message) {
  if (!value) fail(value, true, message, '==', ok);
}
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }

  if (functionsHaveNames()) {
    return func.name;
  }

  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}

assert.AssertionError = AssertionError;
function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;

  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }

  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();

    if (err.stack) {
      var out = err.stack; // try to strip useless frames

      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);

      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
} // assert.AssertionError instanceof Error

util.inherits(AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function inspect(something) {
  if (functionsHaveNames() || !util.isFunction(something)) {
    return util.inspect(something);
  }

  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' + name + ']';
}

function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
} // At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.
// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.


function fail(actual, expected, message, operator, stackStartFunction) {
  throw new AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
} // EXTENSION! allows for well behaved errors defined elsewhere.

assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', ok);
}
assert.ok = ok;
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = equal;
function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', equal);
} // 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = notEqual;
function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', notEqual);
  }
} // 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = deepEqual;
function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', deepEqual);
  }
}
assert.deepStrictEqual = deepStrictEqual;
function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);
  }
}

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (buffer.isBuffer(actual) && buffer.isBuffer(expected)) {
    return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
    // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
    // equivalent if it is also a RegExp object with the same source and
    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
    // ArrayBuffers in a Buffer each to increase performance
    // This optimization requires the arrays to have the same type as checked by
    // Object.prototype.toString (aka pToString). Never perform binary
    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
    // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
  } else if (buffer.isBuffer(actual) !== buffer.isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {
      actual: [],
      expected: []
    };
    var actualIndex = memos.actual.indexOf(actual);

    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);
    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments$1(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  var aIsArgs = isArguments$1(a);
  var bIsArgs = isArguments$1(b);
  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }

  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i; // having the same number of owned properties (keys incorporates
  // hasOwnProperty)

  if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

  ka.sort();
  kb.sort(); //~~~cheap key test

  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i]) return false;
  } //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test


  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
  }

  return true;
} // 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);


assert.notDeepEqual = notDeepEqual;
function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);
  }
}
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
} // 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = strictEqual;
function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', strictEqual);
  }
} // 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = notStrictEqual;
function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', notStrictEqual);
  }
}

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;

  try {
    block();
  } catch (e) {
    error = e;
  }

  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);
  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
    throw actual;
  }
} // 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);


assert.throws = throws;
function throws(block,
/*optional*/
error,
/*optional*/
message) {
  _throws(true, block, error, message);
} // EXTENSION! This is annoying to write outside this module.

assert.doesNotThrow = doesNotThrow;
function doesNotThrow(block,
/*optional*/
error,
/*optional*/
message) {
  _throws(false, block, error, message);
}
assert.ifError = ifError;
function ifError(err) {
  if (err) throw err;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/*!
 * assert.js - assertions for javascript
 * Copyright (c) 2018, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/bsert
 */

class AssertionError$1 extends Error {
  constructor(options) {
    if (typeof options === 'string') options = {
      message: options
    };
    if (options === null || typeof options !== 'object') options = {};
    var message = null;
    var operator = 'fail';
    var generatedMessage = Boolean(options.generatedMessage);
    if (options.message != null) message = toString$2(options.message);
    if (typeof options.operator === 'string') operator = options.operator;

    if (message == null) {
      if (operator === 'fail') {
        message = 'Assertion failed.';
      } else {
        var a = stringify(options.actual);
        var b = stringify(options.expected);
        message = "".concat(a, " ").concat(operator, " ").concat(b);
      }

      generatedMessage = true;
    }

    super(message);
    var start = this.constructor;
    if (typeof options.stackStartFunction === 'function') start = options.stackStartFunction;else if (typeof options.stackStartFn === 'function') start = options.stackStartFn;
    this.type = 'AssertionError';
    this.name = 'AssertionError [ERR_ASSERTION]';
    this.code = 'ERR_ASSERTION';
    this.generatedMessage = generatedMessage;
    this.actual = options.actual;
    this.expected = options.expected;
    this.operator = operator;
    if (Error.captureStackTrace) Error.captureStackTrace(this, start);
  }

}
/*
 * Assert
 */


function assert$1(value, message) {
  if (!value) {
    var generatedMessage = false;

    if (arguments.length === 0) {
      message = 'No value argument passed to `assert()`.';
      generatedMessage = true;
    } else if (message == null) {
      message = 'Assertion failed.';
      generatedMessage = true;
    } else if (isError(message)) {
      throw message;
    }

    throw new AssertionError$1({
      message,
      actual: value,
      expected: true,
      operator: '==',
      generatedMessage,
      stackStartFn: assert$1
    });
  }
}

function equal$1(actual, expected, message) {
  if (!Object.is(actual, expected)) {
    if (isError(message)) throw message;
    throw new AssertionError$1({
      message,
      actual,
      expected,
      operator: 'strictEqual',
      stackStartFn: equal$1
    });
  }
}

function notEqual$1(actual, expected, message) {
  if (Object.is(actual, expected)) {
    if (isError(message)) throw message;
    throw new AssertionError$1({
      message,
      actual,
      expected,
      operator: 'notStrictEqual',
      stackStartFn: notEqual$1
    });
  }
}

function fail$1(message) {
  var generatedMessage = false;
  if (isError(message)) throw message;

  if (message == null) {
    message = 'Assertion failed.';
    generatedMessage = true;
  }

  throw new AssertionError$1({
    message,
    actual: false,
    expected: true,
    operator: 'fail',
    generatedMessage,
    stackStartFn: fail$1
  });
}

function throws$1(func, expected, message) {
  if (typeof expected === 'string') {
    message = expected;
    expected = undefined;
  }

  var thrown = false;
  var err = null;
  enforce(typeof func === 'function', 'func', 'function');

  try {
    func();
  } catch (e) {
    thrown = true;
    err = e;
  }

  if (!thrown) {
    var generatedMessage = false;

    if (message == null) {
      message = 'Missing expected exception.';
      generatedMessage = true;
    }

    throw new AssertionError$1({
      message,
      actual: undefined,
      expected,
      operator: 'throws',
      generatedMessage,
      stackStartFn: throws$1
    });
  }

  if (!testError(err, expected, message, throws$1)) throw err;
}

function doesNotThrow$1(func, expected, message) {
  if (typeof expected === 'string') {
    message = expected;
    expected = undefined;
  }

  var thrown = false;
  var err = null;
  enforce(typeof func === 'function', 'func', 'function');

  try {
    func();
  } catch (e) {
    thrown = true;
    err = e;
  }

  if (!thrown) return;

  if (testError(err, expected, message, doesNotThrow$1)) {
    var generatedMessage = false;

    if (message == null) {
      message = 'Got unwanted exception.';
      generatedMessage = true;
    }

    throw new AssertionError$1({
      message,
      actual: err,
      expected,
      operator: 'doesNotThrow',
      generatedMessage,
      stackStartFn: doesNotThrow$1
    });
  }

  throw err;
}

function rejects(_x, _x2, _x3) {
  return _rejects.apply(this, arguments);
}

function _rejects() {
  _rejects = _asyncToGenerator(function* (func, expected, message) {
    if (typeof expected === 'string') {
      message = expected;
      expected = undefined;
    }

    var thrown = false;
    var err = null;
    if (typeof func !== 'function') enforce(isPromise(func), 'func', 'promise');

    try {
      if (isPromise(func)) yield func;else yield func();
    } catch (e) {
      thrown = true;
      err = e;
    }

    if (!thrown) {
      var generatedMessage = false;

      if (message == null) {
        message = 'Missing expected rejection.';
        generatedMessage = true;
      }

      throw new AssertionError$1({
        message,
        actual: undefined,
        expected,
        operator: 'rejects',
        generatedMessage,
        stackStartFn: rejects
      });
    }

    if (!testError(err, expected, message, rejects)) throw err;
  });
  return _rejects.apply(this, arguments);
}

function doesNotReject(_x4, _x5, _x6) {
  return _doesNotReject.apply(this, arguments);
}

function _doesNotReject() {
  _doesNotReject = _asyncToGenerator(function* (func, expected, message) {
    if (typeof expected === 'string') {
      message = expected;
      expected = undefined;
    }

    var thrown = false;
    var err = null;
    if (typeof func !== 'function') enforce(isPromise(func), 'func', 'promise');

    try {
      if (isPromise(func)) yield func;else yield func();
    } catch (e) {
      thrown = true;
      err = e;
    }

    if (!thrown) return;

    if (testError(err, expected, message, doesNotReject)) {
      var generatedMessage = false;

      if (message == null) {
        message = 'Got unwanted rejection.';
        generatedMessage = true;
      }

      throw new AssertionError$1({
        message,
        actual: undefined,
        expected,
        operator: 'doesNotReject',
        generatedMessage,
        stackStartFn: doesNotReject
      });
    }

    throw err;
  });
  return _doesNotReject.apply(this, arguments);
}

function ifError$1(err) {
  if (err != null) {
    var message = 'ifError got unwanted exception: ';

    if (typeof err === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) message += err.constructor.name;else message += err.message;
    } else {
      message += stringify(err);
    }

    throw new AssertionError$1({
      message,
      actual: err,
      expected: null,
      operator: 'ifError',
      generatedMessage: true,
      stackStartFn: ifError$1
    });
  }
}

function deepEqual$1(actual, expected, message) {
  if (!isDeepEqual(actual, expected, false)) {
    if (isError(message)) throw message;
    throw new AssertionError$1({
      message,
      actual,
      expected,
      operator: 'deepStrictEqual',
      stackStartFn: deepEqual$1
    });
  }
}

function notDeepEqual$1(actual, expected, message) {
  if (isDeepEqual(actual, expected, true)) {
    if (isError(message)) throw message;
    throw new AssertionError$1({
      message,
      actual,
      expected,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepEqual$1
    });
  }
}

function bufferEqual(actual, expected, enc, message) {
  if (!isEncoding(enc)) {
    message = enc;
    enc = null;
  }

  if (enc == null) enc = 'hex';
  expected = bufferize(actual, expected, enc);
  enforce(isBuffer$1(actual), 'actual', 'buffer');
  enforce(isBuffer$1(expected), 'expected', 'buffer');

  if (actual !== expected && !actual.equals(expected)) {
    if (isError(message)) throw message;
    throw new AssertionError$1({
      message,
      actual: actual.toString(enc),
      expected: expected.toString(enc),
      operator: 'bufferEqual',
      stackStartFn: bufferEqual
    });
  }
}

function notBufferEqual(actual, expected, enc, message) {
  if (!isEncoding(enc)) {
    message = enc;
    enc = null;
  }

  if (enc == null) enc = 'hex';
  expected = bufferize(actual, expected, enc);
  enforce(isBuffer$1(actual), 'actual', 'buffer');
  enforce(isBuffer$1(expected), 'expected', 'buffer');

  if (actual === expected || actual.equals(expected)) {
    if (isError(message)) throw message;
    throw new AssertionError$1({
      message,
      actual: actual.toString(enc),
      expected: expected.toString(enc),
      operator: 'notBufferEqual',
      stackStartFn: notBufferEqual
    });
  }
}

function enforce(value, name, type) {
  if (!value) {
    var msg;

    if (name == null) {
      msg = 'Invalid type for parameter.';
    } else {
      if (type == null) msg = "Invalid type for \"".concat(name, "\".");else msg = "\"".concat(name, "\" must be a(n) ").concat(type, ".");
    }

    var err = new TypeError(msg);
    if (Error.captureStackTrace) Error.captureStackTrace(err, enforce);
    throw err;
  }
}

function range(value, name) {
  if (!value) {
    var msg = name != null ? "\"".concat(name, "\" is out of range.") : 'Parameter is out of range.';
    var err = new RangeError(msg);
    if (Error.captureStackTrace) Error.captureStackTrace(err, range);
    throw err;
  }
}
/*
 * Stringification
 */


function stringify(value) {
  switch (typeof value) {
    case 'undefined':
      return 'undefined';

    case 'object':
      if (value === null) return 'null';
      return "[".concat(objectName(value), "]");

    case 'boolean':
      return "".concat(value);

    case 'number':
      return "".concat(value);

    case 'string':
      if (value.length > 80) value = "".concat(value.substring(0, 77), "...");
      return JSON.stringify(value);

    case 'symbol':
      return tryString(value);

    case 'function':
      return "[".concat(funcName(value), "]");

    case 'bigint':
      return "".concat(value, "n");

    default:
      return "[".concat(typeof value, "]");
  }
}

function toString$2(value) {
  if (typeof value === 'string') return value;
  if (isError(value)) return tryString(value);
  return stringify(value);
}

function tryString(value) {
  try {
    return String(value);
  } catch (e) {
    return 'Object';
  }
}
/*
 * Error Testing
 */


function testError(err, expected, message, func) {
  if (expected == null) return true;
  if (isRegExp(expected)) return expected.test(err);

  if (typeof expected !== 'function') {
    if (func === doesNotThrow$1 || func === doesNotReject) throw new TypeError('"expected" must not be an object.');
    if (typeof expected !== 'object') throw new TypeError('"expected" must be an object.');
    var generatedMessage = false;

    if (message == null) {
      var name = func === rejects ? 'rejection' : 'exception';
      message = "Missing expected ".concat(name, ".");
      generatedMessage = true;
    }

    if (err == null || typeof err !== 'object') {
      throw new AssertionError$1({
        actual: err,
        expected,
        message,
        operator: func.name,
        generatedMessage,
        stackStartFn: func
      });
    }

    var keys = Object.keys(expected);
    if (isError(expected)) keys.push('name', 'message');
    if (keys.length === 0) throw new TypeError('"expected" may not be an empty object.');

    for (var key of keys) {
      var expect = expected[key];
      var value = err[key];

      if (typeof value === 'string' && isRegExp(expect) && expect.test(value)) {
        continue;
      }

      if (key in err && isDeepEqual(value, expect, false)) continue;
      throw new AssertionError$1({
        actual: err,
        expected: expected,
        message,
        operator: func.name,
        generatedMessage,
        stackStartFn: func
      });
    }

    return true;
  }

  if (expected.prototype !== undefined && err instanceof expected) return true;
  if (Error.isPrototypeOf(expected)) return false;
  return expected.call({}, err) === true;
}
/*
 * Comparisons
 */


function isDeepEqual(x, y, fail) {
  try {
    return compare$1(x, y, null);
  } catch (e) {
    return fail;
  }
}

function compare$1(a, b, cache) {
  // Primitives.
  if (Object.is(a, b)) return true;
  if (!isObject(a) || !isObject(b)) return false; // Semi-primitives.

  if (objectString(a) !== objectString(b)) return false;
  if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
  if (isBuffer$1(a) && isBuffer$1(b)) return a.equals(b);
  if (isDate(a)) return Object.is(a.getTime(), b.getTime());

  if (isRegExp(a)) {
    return a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.lastIndex === b.lastIndex && a.ignoreCase === b.ignoreCase;
  }

  if (isError(a)) {
    if (a.message !== b.message) return false;
  }

  if (isArrayBuffer(a)) {
    a = new Uint8Array(a);
    b = new Uint8Array(b);
  }

  if (isView$1(a) && !isBuffer$1(a)) {
    if (isBuffer$1(b)) return false;
    var x = new Uint8Array(a.buffer);
    var y = new Uint8Array(b.buffer);
    if (x.length !== y.length) return false;

    for (var i = 0; i < x.length; i++) {
      if (x[i] !== y[i]) return false;
    }

    return true;
  }

  if (isSet(a)) {
    if (a.size !== b.size) return false;
    var keys = new Set([...a, ...b]);
    return keys.size === a.size;
  } // Recursive.


  if (!cache) {
    cache = {
      a: new Map(),
      b: new Map(),
      p: 0
    };
  } else {
    var aa = cache.a.get(a);

    if (aa != null) {
      var bb = cache.b.get(b);
      if (bb != null) return aa === bb;
    }

    cache.p += 1;
  }

  cache.a.set(a, cache.p);
  cache.b.set(b, cache.p);
  var ret = recurse(a, b, cache);
  cache.a.delete(a);
  cache.b.delete(b);
  return ret;
}

function recurse(a, b, cache) {
  if (isMap(a)) {
    if (a.size !== b.size) return false;

    var _keys = new Set([...a.keys(), ...b.keys()]);

    if (_keys.size !== a.size) return false;

    for (var key of _keys) {
      if (!compare$1(a.get(key), b.get(key), cache)) return false;
    }

    return true;
  }

  if (isArray$1(a)) {
    if (a.length !== b.length) return false;

    for (var i = 0; i < a.length; i++) {
      if (!compare$1(a[i], b[i], cache)) return false;
    }

    return true;
  }

  var ak = ownKeys(a);
  var bk = ownKeys(b);
  if (ak.length !== bk.length) return false;
  var keys = new Set([...ak, ...bk]);
  if (keys.size !== ak.length) return false;

  for (var _key of keys) {
    if (!compare$1(a[_key], b[_key], cache)) return false;
  }

  return true;
}

function ownKeys(obj) {
  var keys = Object.keys(obj);
  if (!Object.getOwnPropertySymbols) return keys;
  if (!Object.getOwnPropertyDescriptor) return keys;
  var symbols = Object.getOwnPropertySymbols(obj);

  for (var symbol of symbols) {
    var desc = Object.getOwnPropertyDescriptor(obj, symbol);
    if (desc && desc.enumerable) keys.push(symbol);
  }

  return keys;
}
/*
 * Helpers
 */


function objectString(obj) {
  if (obj === undefined) return '[object Undefined]';
  if (obj === null) return '[object Null]';

  try {
    return Object.prototype.toString.call(obj);
  } catch (e) {
    return '[object Object]';
  }
}

function objectType(obj) {
  return objectString(obj).slice(8, -1);
}

function objectName(obj) {
  var type = objectType(obj);
  if (obj == null) return type;
  if (type !== 'Object' && type !== 'Error') return type;
  var ctor, name;

  try {
    ctor = obj.constructor;
  } catch (e) {
  }

  if (ctor == null) return type;

  try {
    name = ctor.name;
  } catch (e) {
    return type;
  }

  if (typeof name !== 'string' || name.length === 0) return type;
  return name;
}

function funcName(func) {
  var name;

  try {
    name = func.name;
  } catch (e) {
  }

  if (typeof name !== 'string' || name.length === 0) return 'Function';
  return "Function: ".concat(name);
}

function isArray$1(obj) {
  return Array.isArray(obj);
}

function isArrayBuffer(obj) {
  return obj instanceof ArrayBuffer;
}

function isBuffer$1(obj) {
  return isObject(obj) && typeof obj.writeUInt32LE === 'function' && typeof obj.equals === 'function';
}

function isDate(obj) {
  return obj instanceof Date;
}

function isError(obj) {
  return obj instanceof Error;
}

function isMap(obj) {
  return obj instanceof Map;
}

function isObject(obj) {
  return obj && typeof obj === 'object';
}

function isPromise(obj) {
  return obj instanceof Promise;
}

function isRegExp(obj) {
  return obj instanceof RegExp;
}

function isSet(obj) {
  return obj instanceof Set;
}

function isView$1(obj) {
  return ArrayBuffer.isView(obj);
}

function isEncoding(enc) {
  if (typeof enc !== 'string') return false;

  switch (enc) {
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'hex':
    case 'latin1':
    case 'ucs2':
    case 'utf8':
    case 'utf16le':
      return true;
  }

  return false;
}

function bufferize(actual, expected, enc) {
  if (typeof expected === 'string') {
    if (!isBuffer$1(actual)) return null;
    var {
      constructor: _constructor
    } = actual;
    if (!_constructor || typeof _constructor.from !== 'function') return null;
    if (!isEncoding(enc)) return null;
    if (enc === 'hex' && expected.length & 1) return null;

    var raw = _constructor.from(expected, enc);

    if (enc === 'hex' && raw.length !== expected.length >>> 1) return null;
    return raw;
  }

  return expected;
}
/*
 * API
 */


assert$1.AssertionError = AssertionError$1;
assert$1.assert = assert$1;
assert$1.strict = assert$1;
assert$1.ok = assert$1;
assert$1.equal = equal$1;
assert$1.notEqual = notEqual$1;
assert$1.strictEqual = equal$1;
assert$1.notStrictEqual = notEqual$1;
assert$1.fail = fail$1;
assert$1.throws = throws$1;
assert$1.doesNotThrow = doesNotThrow$1;
assert$1.rejects = rejects;
assert$1.doesNotReject = doesNotReject;
assert$1.ifError = ifError$1;
assert$1.deepEqual = deepEqual$1;
assert$1.notDeepEqual = notDeepEqual$1;
assert$1.deepStrictEqual = deepEqual$1;
assert$1.notDeepStrictEqual = notDeepEqual$1;
assert$1.bufferEqual = bufferEqual;
assert$1.notBufferEqual = notBufferEqual;
assert$1.enforce = enforce;
assert$1.range = range;
/*
 * Expose
 */

var assert_1 = assert$1;

/*
 * Constants
 */


var BIG_ENDIAN = new Int8Array(new Int16Array([1]).buffer)[0] === 0;
/**
 * ChaCha20
 */

class ChaCha20 {
  /**
   * Create a ChaCha20 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(16);
    this.stream = new Uint32Array(16);
    this.bytes = new Uint8Array(this.stream.buffer);
    this.pos = 0;
    if (BIG_ENDIAN) this.bytes = Buffer.allocUnsafe(64);
  }
  /**
   * Initialize chacha20 with a key, nonce, and counter.
   * @param {Buffer} key
   * @param {Buffer} nonce
   * @param {Number} counter
   */


  init(key, nonce, counter) {
    if (counter == null) counter = 0;
    assert_1(Buffer.isBuffer(key));
    assert_1(Buffer.isBuffer(nonce));
    assert_1(Number.isSafeInteger(counter));
    if (key.length !== 16 && key.length !== 32) throw new RangeError('Invalid key size.');

    if (nonce.length >= 24) {
      key = ChaCha20.derive(key, nonce.slice(0, 16));
      nonce = nonce.slice(16);
    }

    this.state[0] = 0x61707865;
    this.state[1] = key.length < 32 ? 0x3120646e : 0x3320646e;
    this.state[2] = key.length < 32 ? 0x79622d36 : 0x79622d32;
    this.state[3] = 0x6b206574;
    this.state[4] = readU32(key, 0);
    this.state[5] = readU32(key, 4);
    this.state[6] = readU32(key, 8);
    this.state[7] = readU32(key, 12);
    this.state[8] = readU32(key, 16 % key.length);
    this.state[9] = readU32(key, 20 % key.length);
    this.state[10] = readU32(key, 24 % key.length);
    this.state[11] = readU32(key, 28 % key.length);
    this.state[12] = counter >>> 0;

    if (nonce.length === 8) {
      this.state[13] = counter / 0x100000000 >>> 0;
      this.state[14] = readU32(nonce, 0);
      this.state[15] = readU32(nonce, 4);
    } else if (nonce.length === 12) {
      this.state[13] = readU32(nonce, 0);
      this.state[14] = readU32(nonce, 4);
      this.state[15] = readU32(nonce, 8);
    } else if (nonce.length === 16) {
      this.state[12] = readU32(nonce, 0);
      this.state[13] = readU32(nonce, 4);
      this.state[14] = readU32(nonce, 8);
      this.state[15] = readU32(nonce, 12);
    } else {
      throw new RangeError('Invalid nonce size.');
    }

    this.pos = 0;
    return this;
  }
  /**
   * Encrypt/decrypt data.
   * @param {Buffer} data - Will be mutated.
   * @returns {Buffer}
   */


  encrypt(data) {
    return this.crypt(data, data);
  }
  /**
   * Encrypt/decrypt data.
   * @param {Buffer} input
   * @param {Buffer} output
   * @returns {Buffer} output
   */


  crypt(input, output) {
    assert_1(Buffer.isBuffer(input));
    assert_1(Buffer.isBuffer(output));
    if (output.length < input.length) throw new Error('Invalid output size.');

    for (var i = 0; i < input.length; i++) {
      if ((this.pos & 63) === 0) {
        this._block();

        this.pos = 0;
      }

      output[i] = input[i] ^ this.bytes[this.pos++];
    }

    return output;
  }
  /**
   * Stir the stream.
   */


  _block() {
    for (var i = 0; i < 16; i++) {
      this.stream[i] = this.state[i];
    }

    for (var _i = 0; _i < 10; _i++) {
      qround(this.stream, 0, 4, 8, 12);
      qround(this.stream, 1, 5, 9, 13);
      qround(this.stream, 2, 6, 10, 14);
      qround(this.stream, 3, 7, 11, 15);
      qround(this.stream, 0, 5, 10, 15);
      qround(this.stream, 1, 6, 11, 12);
      qround(this.stream, 2, 7, 8, 13);
      qround(this.stream, 3, 4, 9, 14);
    }

    for (var _i2 = 0; _i2 < 16; _i2++) {
      this.stream[_i2] += this.state[_i2];
    }

    if (BIG_ENDIAN) {
      for (var _i3 = 0; _i3 < 16; _i3++) {
        writeU32(this.bytes, this.stream[_i3], _i3 * 4);
      }
    }

    this.state[12] += 1;
    if (this.state[12] === 0) this.state[13] += 1;
  }
  /**
   * Destroy context.
   */


  destroy() {
    for (var i = 0; i < 16; i++) {
      this.state[i] = 0;
      this.stream[i] = 0;
    }

    if (BIG_ENDIAN) {
      for (var _i4 = 0; _i4 < 64; _i4++) {
        this.bytes[_i4] = 0;
      }
    }

    this.pos = 0;
    return this;
  }
  /**
   * Derive key with XChaCha20.
   * @param {Buffer} key
   * @param {Buffer} nonce
   * @returns {Buffer}
   */


  static derive(key, nonce) {
    assert_1(Buffer.isBuffer(key));
    assert_1(Buffer.isBuffer(nonce));
    if (key.length !== 16 && key.length !== 32) throw new RangeError('Invalid key size.');
    if (nonce.length !== 16) throw new RangeError('Invalid nonce size.');
    var state = new Uint32Array(16);
    state[0] = 0x61707865;
    state[1] = key.length < 32 ? 0x3120646e : 0x3320646e;
    state[2] = key.length < 32 ? 0x79622d36 : 0x79622d32;
    state[3] = 0x6b206574;
    state[4] = readU32(key, 0);
    state[5] = readU32(key, 4);
    state[6] = readU32(key, 8);
    state[7] = readU32(key, 12);
    state[8] = readU32(key, 16 % key.length);
    state[9] = readU32(key, 20 % key.length);
    state[10] = readU32(key, 24 % key.length);
    state[11] = readU32(key, 28 % key.length);
    state[12] = readU32(nonce, 0);
    state[13] = readU32(nonce, 4);
    state[14] = readU32(nonce, 8);
    state[15] = readU32(nonce, 12);

    for (var i = 0; i < 10; i++) {
      qround(state, 0, 4, 8, 12);
      qround(state, 1, 5, 9, 13);
      qround(state, 2, 6, 10, 14);
      qround(state, 3, 7, 11, 15);
      qround(state, 0, 5, 10, 15);
      qround(state, 1, 6, 11, 12);
      qround(state, 2, 7, 8, 13);
      qround(state, 3, 4, 9, 14);
    }

    var out = Buffer.alloc(32);
    writeU32(out, state[0], 0);
    writeU32(out, state[1], 4);
    writeU32(out, state[2], 8);
    writeU32(out, state[3], 12);
    writeU32(out, state[12], 16);
    writeU32(out, state[13], 20);
    writeU32(out, state[14], 24);
    writeU32(out, state[15], 28);
    return out;
  }

}
/*
 * Static
 */


ChaCha20.native = 0;
/*
 * Helpers
 */

function qround(x, a, b, c, d) {
  x[a] += x[b];
  x[d] = rotl32(x[d] ^ x[a], 16);
  x[c] += x[d];
  x[b] = rotl32(x[b] ^ x[c], 12);
  x[a] += x[b];
  x[d] = rotl32(x[d] ^ x[a], 8);
  x[c] += x[d];
  x[b] = rotl32(x[b] ^ x[c], 7);
}

function rotl32(w, b) {
  return w << b | w >>> 32 - b;
}

function readU32(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var chacha20 = ChaCha20;

/**
 * Poly1305
 */


class Poly1305 {
  /**
   * Create a Poly1305 context.
   * @constructor
   */
  constructor() {
    this.r = new Uint16Array(10);
    this.h = new Uint16Array(10);
    this.pad = new Uint16Array(8);
    this.fin = 0;
    this.leftover = 0;
    this.buffer = Buffer.allocUnsafe(16);
  }
  /**
   * Initialize poly1305 with a key.
   * @param {Buffer} key
   */


  init(key) {
    assert_1(Buffer.isBuffer(key) && key.length >= 32); // r &= 0xffffffc0ffffffc0ffffffc0fffffff

    var t0 = readU16(key, 0);
    var t1 = readU16(key, 2);
    var t2 = readU16(key, 4);
    var t3 = readU16(key, 6);
    var t4 = readU16(key, 8);
    var t5 = readU16(key, 10);
    var t6 = readU16(key, 12);
    var t7 = readU16(key, 14);
    this.r[0] = t0 & 0x1fff;
    this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
    this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
    this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
    this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
    this.r[5] = t4 >>> 1 & 0x1ffe;
    this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
    this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
    this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
    this.r[9] = t7 >>> 5 & 0x007f; // h = 0

    for (var i = 0; i < 10; i++) {
      this.h[i] = 0;
    } // save pad for later


    for (var _i = 0; _i < 8; _i++) {
      this.pad[_i] = readU16(key, 16 + 2 * _i);
    }

    this.leftover = 0;
    this.fin = 0;
    return this;
  }
  /**
   * Process 16 byte blocks.
   * @param {Buffer} data - Blocks.
   * @param {Number} bytes - Size.
   * @param {Number} m - Offset pointer.
   */


  blocks(data, bytes, m) {
    var hibit = this.fin ? 0 : 1 << 11; // 1 << 128

    var d = new Uint32Array(10);

    while (bytes >= 16) {
      // h += m[i]
      var t0 = readU16(data, m + 0);
      var t1 = readU16(data, m + 2);
      var t2 = readU16(data, m + 4);
      var t3 = readU16(data, m + 6);
      var t4 = readU16(data, m + 8);
      var t5 = readU16(data, m + 10);
      var t6 = readU16(data, m + 12);
      var t7 = readU16(data, m + 14);
      this.h[0] += t0 & 0x1fff;
      this.h[1] += (t0 >>> 13 | t1 << 3) & 0x1fff;
      this.h[2] += (t1 >>> 10 | t2 << 6) & 0x1fff;
      this.h[3] += (t2 >>> 7 | t3 << 9) & 0x1fff;
      this.h[4] += (t3 >>> 4 | t4 << 12) & 0x1fff;
      this.h[5] += t4 >>> 1 & 0x1fff;
      this.h[6] += (t4 >>> 14 | t5 << 2) & 0x1fff;
      this.h[7] += (t5 >>> 11 | t6 << 5) & 0x1fff;
      this.h[8] += (t6 >>> 8 | t7 << 8) & 0x1fff;
      this.h[9] += t7 >>> 5 | hibit; // h *= r, (partial) h %= p

      var c = 0;

      for (var i = 0; i < 10; i++) {
        d[i] = c;

        for (var j = 0; j < 10; j++) {
          var a = this.h[j];
          if (j <= i) a *= this.r[i - j];else a *= 5 * this.r[i + 10 - j];
          d[i] += a; // Sum(h[i] * r[i] * 5) will overflow slightly
          // above 6 products with an unclamped r, so
          // carry at 5

          if (j === 4) {
            c = d[i] >>> 13;
            d[i] &= 0x1fff;
          }
        }

        c += d[i] >>> 13;
        d[i] &= 0x1fff;
      }

      c = (c << 2) + c; // c *= 5

      c += d[0];
      d[0] = c & 0x1fff;
      c = c >>> 13;
      d[1] += c;

      for (var _i2 = 0; _i2 < 10; _i2++) {
        this.h[_i2] = d[_i2];
      }

      m += 16;
      bytes -= 16;
    }
  }
  /**
   * Update the MAC with data (will be
   * processed as 16 byte blocks).
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));
    var bytes = data.length;
    var m = 0; // handle leftover

    if (this.leftover) {
      var want = 16 - this.leftover;
      if (want > bytes) want = bytes;

      for (var i = 0; i < want; i++) {
        this.buffer[this.leftover + i] = data[m + i];
      }

      bytes -= want;
      m += want;
      this.leftover += want;
      if (this.leftover < 16) return this;
      this.blocks(this.buffer, 16, 0);
      this.leftover = 0;
    } // process full blocks


    if (bytes >= 16) {
      var _want = bytes & ~(16 - 1);

      this.blocks(data, _want, m);
      m += _want;
      bytes -= _want;
    } // store leftover


    if (bytes) {
      for (var _i3 = 0; _i3 < bytes; _i3++) {
        this.buffer[this.leftover + _i3] = data[m + _i3];
      }

      this.leftover += bytes;
    }

    return this;
  }
  /**
   * Finalize and return a 16-byte MAC.
   * @returns {Buffer}
   */


  final() {
    var mac = Buffer.allocUnsafe(16);
    var g = new Uint16Array(10); // process the remaining block

    if (this.leftover) {
      var i = this.leftover;
      this.buffer[i++] = 1;

      for (; i < 16; i++) {
        this.buffer[i] = 0;
      }

      this.fin = 1;
      this.blocks(this.buffer, 16, 0);
    } // fully carry h


    var c = this.h[1] >>> 13;
    this.h[1] &= 0x1fff;

    for (var _i4 = 2; _i4 < 10; _i4++) {
      this.h[_i4] += c;
      c = this.h[_i4] >>> 13;
      this.h[_i4] &= 0x1fff;
    }

    this.h[0] += c * 5;
    c = this.h[0] >>> 13;
    this.h[0] &= 0x1fff;
    this.h[1] += c;
    c = this.h[1] >>> 13;
    this.h[1] &= 0x1fff;
    this.h[2] += c; // compute h + -p

    g[0] = this.h[0] + 5;
    c = g[0] >>> 13;
    g[0] &= 0x1fff;

    for (var _i5 = 1; _i5 < 10; _i5++) {
      g[_i5] = this.h[_i5] + c;
      c = g[_i5] >>> 13;
      g[_i5] &= 0x1fff;
    } // select h if h < p, or h + -p if h >= p


    var mask = (c ^ 1) - 1;

    for (var _i6 = 0; _i6 < 10; _i6++) {
      g[_i6] &= mask;
    }

    mask = ~mask;

    for (var _i7 = 0; _i7 < 10; _i7++) {
      this.h[_i7] = this.h[_i7] & mask | g[_i7];
    } // h = h % (2^128)


    this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
    this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
    this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
    this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
    this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
    this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
    this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
    this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff; // mac = (h + pad) % (2^128)

    var f = this.h[0] + this.pad[0];
    this.h[0] = f;

    for (var _i8 = 1; _i8 < 8; _i8++) {
      f = this.h[_i8] + this.pad[_i8] + (f >>> 16);
      this.h[_i8] = f;
    }

    for (var _i9 = 0; _i9 < 8; _i9++) {
      writeU16(mac, this.h[_i9], _i9 * 2);
    } // zero out the state


    for (var _i10 = 0; _i10 < 10; _i10++) {
      this.h[_i10] = 0;
    }

    for (var _i11 = 0; _i11 < 10; _i11++) {
      this.r[_i11] = 0;
    }

    for (var _i12 = 0; _i12 < 8; _i12++) {
      this.pad[_i12] = 0;
    }

    return mac;
  }
  /**
   * Return a MAC for a message and key.
   * @param {Buffer} msg
   * @param {Buffer} key
   * @returns {Buffer} MAC
   */


  static auth(msg, key) {
    var poly = new Poly1305();
    poly.init(key);
    poly.update(msg);
    return poly.final();
  }
  /**
   * Compare two MACs in constant time.
   * @param {Buffer} mac1
   * @param {Buffer} mac2
   * @returns {Boolean}
   */


  static verify(mac1, mac2) {
    assert_1(Buffer.isBuffer(mac1) && mac1.length === 16);
    assert_1(Buffer.isBuffer(mac2) && mac2.length === 16);
    var dif = 0; // Compare in constant time.

    for (var i = 0; i < 16; i++) {
      dif |= mac1[i] ^ mac2[i];
    }

    dif = dif - 1 >>> 31;
    return (dif & 1) !== 0;
  }

}
/*
 * Static
 */


Poly1305.native = 0;
/*
 * Helpers
 */

function readU16(data, off) {
  return data[off++] + data[off] * 0x100;
}

function writeU16(dst, num, off) {
  dst[off++] = num;
  dst[off++] = num >>> 8;
  return off;
}
/*
 * Expose
 */


var poly1305 = Poly1305;

/**
 * AEAD
 */


class AEAD {
  /**
   * Create an AEAD context.
   * @constructor
   */
  constructor() {
    this.chacha20 = new chacha20();
    this.poly1305 = new poly1305();
    this.aadLen = 0;
    this.cipherLen = 0;
    this.hasCipher = false;
    this.polyKey = null;
  }
  /**
   * Initialize the AEAD with a key and iv.
   * @param {Buffer} key
   * @param {Buffer} iv - IV / packet sequence number.
   */


  init(key, iv) {
    assert_1(Buffer.isBuffer(key));
    assert_1(Buffer.isBuffer(iv));
    var polyKey = Buffer.alloc(32, 0x00);
    this.chacha20.init(key, iv, 0);
    this.chacha20.encrypt(polyKey);
    this.poly1305.init(polyKey); // We need to encrypt a full block
    // to get the cipher in the correct state.

    this.chacha20.encrypt(Buffer.alloc(32, 0x00)); // Expose for debugging.

    this.polyKey = polyKey;
    this.aadLen = 0;
    this.cipherLen = 0;
    this.hasCipher = false;
    return this;
  }
  /**
   * Update the aad (will be finalized
   * on an encrypt/decrypt call).
   * @param {Buffer} aad
   */


  aad(data) {
    assert_1(!this.hasCipher, 'Cannot update aad.');
    this.poly1305.update(data);
    this.aadLen += data.length;
    return this;
  }
  /**
   * Encrypt a piece of data.
   * @param {Buffer} data
   */


  encrypt(data) {
    if (!this.hasCipher) this._pad16(this.aadLen);
    this.chacha20.encrypt(data);
    this.poly1305.update(data);
    this.cipherLen += data.length;
    this.hasCipher = true;
    return data;
  }
  /**
   * Decrypt a piece of data.
   * @param {Buffer} data
   */


  decrypt(data) {
    assert_1(Buffer.isBuffer(data));
    if (!this.hasCipher) this._pad16(this.aadLen);
    this.cipherLen += data.length;
    this.hasCipher = true;
    this.poly1305.update(data);
    this.chacha20.encrypt(data);
    return data;
  }
  /**
   * Authenticate data without decrypting.
   * @param {Buffer} data
   */


  auth(data) {
    assert_1(Buffer.isBuffer(data));
    if (!this.hasCipher) this._pad16(this.aadLen);
    this.cipherLen += data.length;
    this.hasCipher = true;
    this.poly1305.update(data);
    return data;
  }
  /**
   * Finalize the aead and generate a MAC.
   * @returns {Buffer} MAC
   */


  final() {
    var len = Buffer.allocUnsafe(16);
    var lo, hi; // The RFC says these are supposed to be
    // uint32le, but their own fucking test
    // cases fail unless they are uint64le's.

    lo = this.aadLen % 0x100000000;
    hi = (this.aadLen - lo) / 0x100000000;
    writeU32$1(len, lo, 0);
    writeU32$1(len, hi, 4);
    lo = this.cipherLen % 0x100000000;
    hi = (this.cipherLen - lo) / 0x100000000;
    writeU32$1(len, lo, 8);
    writeU32$1(len, hi, 12);
    if (!this.hasCipher) this._pad16(this.aadLen);

    this._pad16(this.cipherLen);

    this.poly1305.update(len);
    return this.poly1305.final();
  }
  /**
   * Pad a chunk before updating mac.
   * @private
   * @param {Number} size
   */


  _pad16(size) {
    size %= 16;
    if (size === 0) return;
    var pad = Buffer.allocUnsafe(16 - size);
    pad.fill(0);
    this.poly1305.update(pad);
  }
  /**
   * Encrypt a piece of data.
   * @param {Buffer} key
   * @param {Buffer} iv
   * @param {Buffer} msg
   * @param {Buffer?} aad
   * @returns {Buffer} tag
   */


  static encrypt(key, iv, msg, aad) {
    var aead = new AEAD();
    aead.init(key, iv);
    if (aad) aead.aad(aad);
    aead.encrypt(msg);
    return aead.final();
  }
  /**
   * Decrypt a piece of data.
   * @param {Buffer} key
   * @param {Buffer} iv
   * @param {Buffer} msg
   * @param {Buffer} tag
   * @param {Buffer?} aad
   * @returns {Boolean}
   */


  static decrypt(key, iv, msg, tag, aad) {
    var aead = new AEAD();
    aead.init(key, iv);
    if (aad) aead.aad(aad);
    aead.decrypt(msg);
    return AEAD.verify(aead.final(), tag);
  }
  /**
   * Authenticate data without decrypting.
   * @param {Buffer} key
   * @param {Buffer} iv
   * @param {Buffer} msg
   * @param {Buffer} tag
   * @param {Buffer?} aad
   * @returns {Boolean}
   */


  static auth(key, iv, msg, tag, aad) {
    var aead = new AEAD();
    aead.init(key, iv);
    if (aad) aead.aad(aad);
    aead.auth(msg);
    return AEAD.verify(aead.final(), tag);
  }
  /**
   * Compare two MACs in constant time.
   * @param {Buffer} mac1
   * @param {Buffer} mac2
   * @returns {Boolean}
   */


  static verify(mac1, mac2) {
    return poly1305.verify(mac1, mac2);
  }

}
/*
 * Static
 */


AEAD.native = chacha20.native;
/*
 * Helpers
 */

function writeU32$1(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var aead = AEAD;

var aeadBrowser = aead;

/*
 * Constants
 */


var TE0 = new Uint32Array([0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a]);
var TE1 = new Uint32Array([0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616]);
var TE2 = new Uint32Array([0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16]);
var TE3 = new Uint32Array([0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c]);
var TD0 = new Uint32Array([0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742]);
var TD1 = new Uint32Array([0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857]);
var TD2 = new Uint32Array([0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8]);
var TD3 = new Uint32Array([0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0]);
var TD4 = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);
var RCON = new Uint32Array([0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]);
/**
 * AES
 */

class AES {
  constructor() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    assert_1(bits >>> 0 === bits);
    this.bits = bits;
    this.rounds = getRounds(bits);
    this.key = null;
    this.encKey = null;
    this.decKey = null;
  }

  get blockSize() {
    return 16;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    if (key.length !== this.bits >>> 3) throw new Error('Invalid key size.');
    this.destroy();
    this.key = Buffer.from(key);
    this.encKey = null;
    this.decKey = null;
    return this;
  }

  createEncryptKey() {
    if (!this.key) throw new Error('Cipher is not initialized.');
    var ukey = this.key;
    if (ukey.length !== this.bits >>> 3) throw new Error('Invalid key size.');
    var key = new Uint32Array(60);
    key[0] = readU32$1(ukey, 0);
    key[1] = readU32$1(ukey, 4);
    key[2] = readU32$1(ukey, 8);
    key[3] = readU32$1(ukey, 12);
    var p = 0;
    var i = 0;
    var t;

    if (this.bits === 128) {
      for (;;) {
        var tmp = key[p + 3];
        t = key[p];
        t ^= TE2[tmp >>> 16 & 0xff] & 0xff000000;
        t ^= TE3[tmp >>> 8 & 0xff] & 0x00ff0000;
        t ^= TE0[tmp >>> 0 & 0xff] & 0x0000ff00;
        t ^= TE1[tmp >>> 24 & 0xff] & 0x000000ff;
        t ^= RCON[i];
        key[p + 4] = t;
        key[p + 5] = key[p + 1] ^ key[p + 4];
        key[p + 6] = key[p + 2] ^ key[p + 5];
        key[p + 7] = key[p + 3] ^ key[p + 6];
        i += 1;
        if (i === 10) break;
        p += 4;
      }

      return key;
    }

    key[p + 4] = readU32$1(ukey, 16);
    key[p + 5] = readU32$1(ukey, 20);

    if (this.bits === 192) {
      for (;;) {
        var _tmp = key[p + 5];
        t = key[p];
        t ^= TE2[_tmp >>> 16 & 0xff] & 0xff000000;
        t ^= TE3[_tmp >>> 8 & 0xff] & 0x00ff0000;
        t ^= TE0[_tmp >>> 0 & 0xff] & 0x0000ff00;
        t ^= TE1[_tmp >>> 24 & 0xff] & 0x000000ff;
        t ^= RCON[i];
        key[p + 6] = t;
        key[p + 7] = key[p + 1] ^ key[p + 6];
        key[p + 8] = key[p + 2] ^ key[p + 7];
        key[p + 9] = key[p + 3] ^ key[p + 8];
        i += 1;
        if (i === 8) break;
        key[p + 10] = key[p + 4] ^ key[p + 9];
        key[p + 11] = key[p + 5] ^ key[p + 10];
        p += 6;
      }

      return key;
    }

    key[p + 6] = readU32$1(ukey, 24);
    key[p + 7] = readU32$1(ukey, 28);

    if (this.bits === 256) {
      for (;;) {
        var _tmp2 = key[p + 7];
        t = key[p];
        t ^= TE2[_tmp2 >>> 16 & 0xff] & 0xff000000;
        t ^= TE3[_tmp2 >>> 8 & 0xff] & 0x00ff0000;
        t ^= TE0[_tmp2 >>> 0 & 0xff] & 0x0000ff00;
        t ^= TE1[_tmp2 >>> 24 & 0xff] & 0x000000ff;
        t ^= RCON[i];
        key[p + 8] = t;
        key[p + 9] = key[p + 1] ^ key[p + 8];
        key[p + 10] = key[p + 2] ^ key[p + 9];
        key[p + 11] = key[p + 3] ^ key[p + 10];
        i += 1;
        if (i === 7) break;
        _tmp2 = key[p + 11];
        t = key[p + 4];
        t ^= TE2[_tmp2 >>> 24 & 0xff] & 0xff000000;
        t ^= TE3[_tmp2 >>> 16 & 0xff] & 0x00ff0000;
        t ^= TE0[_tmp2 >>> 8 & 0xff] & 0x0000ff00;
        t ^= TE1[_tmp2 >>> 0 & 0xff] & 0x000000ff;
        key[p + 12] = t;
        key[p + 13] = key[p + 5] ^ key[p + 12];
        key[p + 14] = key[p + 6] ^ key[p + 13];
        key[p + 15] = key[p + 7] ^ key[p + 14];
        p += 8;
      }

      return key;
    }

    throw new Error('Bad key size.');
  }

  createDecryptKey() {
    // First, start with an encryption schedule.
    var key = this.createEncryptKey();
    var p = 0; // Invert the order of the round keys.

    for (var i = 0, j = 4 * this.rounds; i < j; i += 4, j -= 4) {
      var tmp = key[p + i + 0];
      key[p + i + 0] = key[p + j + 0];
      key[p + j + 0] = tmp;
      tmp = key[p + i + 1];
      key[p + i + 1] = key[p + j + 1];
      key[p + j + 1] = tmp;
      tmp = key[p + i + 2];
      key[p + i + 2] = key[p + j + 2];
      key[p + j + 2] = tmp;
      tmp = key[p + i + 3];
      key[p + i + 3] = key[p + j + 3];
      key[p + j + 3] = tmp;
    } // Apply the inverse MixColumn transform to
    // all round keys but the first and the last.


    for (var _i = 1; _i < this.rounds; _i++) {
      var t0 = void 0,
          t1 = void 0,
          t2 = void 0,
          t3 = void 0;
      p += 4;
      t0 = TD0[TE1[key[p + 0] >>> 24 & 0xff] & 0xff];
      t0 ^= TD1[TE1[key[p + 0] >>> 16 & 0xff] & 0xff];
      t0 ^= TD2[TE1[key[p + 0] >>> 8 & 0xff] & 0xff];
      t0 ^= TD3[TE1[key[p + 0] >>> 0 & 0xff] & 0xff];
      t1 = TD0[TE1[key[p + 1] >>> 24 & 0xff] & 0xff];
      t1 ^= TD1[TE1[key[p + 1] >>> 16 & 0xff] & 0xff];
      t1 ^= TD2[TE1[key[p + 1] >>> 8 & 0xff] & 0xff];
      t1 ^= TD3[TE1[key[p + 1] >>> 0 & 0xff] & 0xff];
      t2 = TD0[TE1[key[p + 2] >>> 24 & 0xff] & 0xff];
      t2 ^= TD1[TE1[key[p + 2] >>> 16 & 0xff] & 0xff];
      t2 ^= TD2[TE1[key[p + 2] >>> 8 & 0xff] & 0xff];
      t2 ^= TD3[TE1[key[p + 2] >>> 0 & 0xff] & 0xff];
      t3 = TD0[TE1[key[p + 3] >>> 24 & 0xff] & 0xff];
      t3 ^= TD1[TE1[key[p + 3] >>> 16 & 0xff] & 0xff];
      t3 ^= TD2[TE1[key[p + 3] >>> 8 & 0xff] & 0xff];
      t3 ^= TD3[TE1[key[p + 3] >>> 0 & 0xff] & 0xff];
      key[p + 0] = t0;
      key[p + 1] = t1;
      key[p + 2] = t2;
      key[p + 3] = t3;
    }

    return key;
  }

  getEncryptKey() {
    if (!this.encKey) this.encKey = this.createEncryptKey();
    return this.encKey;
  }

  getDecryptKey() {
    if (!this.decKey) this.decKey = this.createDecryptKey();
    return this.decKey;
  }

  encrypt(input, ipos, output, opos) {
    var key = this.getEncryptKey(); // Map byte array block to cipher
    // state and add initial round key.

    var s0 = readU32$1(input, ipos + 0) ^ key[0];
    var s1 = readU32$1(input, ipos + 4) ^ key[1];
    var s2 = readU32$1(input, ipos + 8) ^ key[2];
    var s3 = readU32$1(input, ipos + 12) ^ key[3]; // Nr - 1 full rounds

    var r = this.rounds >>> 1;
    var p = 0;
    var t0, t1, t2, t3;

    for (;;) {
      t0 = TE0[s0 >>> 24 & 0xff];
      t0 ^= TE1[s1 >>> 16 & 0xff];
      t0 ^= TE2[s2 >>> 8 & 0xff];
      t0 ^= TE3[s3 >>> 0 & 0xff];
      t0 ^= key[p + 4];
      t1 = TE0[s1 >>> 24 & 0xff];
      t1 ^= TE1[s2 >>> 16 & 0xff];
      t1 ^= TE2[s3 >>> 8 & 0xff];
      t1 ^= TE3[s0 >>> 0 & 0xff];
      t1 ^= key[p + 5];
      t2 = TE0[s2 >>> 24 & 0xff];
      t2 ^= TE1[s3 >>> 16 & 0xff];
      t2 ^= TE2[s0 >>> 8 & 0xff];
      t2 ^= TE3[s1 >>> 0 & 0xff];
      t2 ^= key[p + 6];
      t3 = TE0[s3 >>> 24 & 0xff];
      t3 ^= TE1[s0 >>> 16 & 0xff];
      t3 ^= TE2[s1 >>> 8 & 0xff];
      t3 ^= TE3[s2 >>> 0 & 0xff];
      t3 ^= key[p + 7];
      p += 8;
      r -= 1;
      if (r === 0) break;
      s0 = TE0[t0 >>> 24 & 0xff];
      s0 ^= TE1[t1 >>> 16 & 0xff];
      s0 ^= TE2[t2 >>> 8 & 0xff];
      s0 ^= TE3[t3 >>> 0 & 0xff];
      s0 ^= key[p + 0];
      s1 = TE0[t1 >>> 24 & 0xff];
      s1 ^= TE1[t2 >>> 16 & 0xff];
      s1 ^= TE2[t3 >>> 8 & 0xff];
      s1 ^= TE3[t0 >>> 0 & 0xff];
      s1 ^= key[p + 1];
      s2 = TE0[t2 >>> 24 & 0xff];
      s2 ^= TE1[t3 >>> 16 & 0xff];
      s2 ^= TE2[t0 >>> 8 & 0xff];
      s2 ^= TE3[t1 >>> 0 & 0xff];
      s2 ^= key[p + 2];
      s3 = TE0[t3 >>> 24 & 0xff];
      s3 ^= TE1[t0 >>> 16 & 0xff];
      s3 ^= TE2[t1 >>> 8 & 0xff];
      s3 ^= TE3[t2 >>> 0 & 0xff];
      s3 ^= key[p + 3];
    } // Apply last round and map cipher
    // state to byte array block.


    s0 = TE2[t0 >>> 24 & 0xff] & 0xff000000;
    s0 ^= TE3[t1 >>> 16 & 0xff] & 0x00ff0000;
    s0 ^= TE0[t2 >>> 8 & 0xff] & 0x0000ff00;
    s0 ^= TE1[t3 >>> 0 & 0xff] & 0x000000ff;
    s0 ^= key[p + 0];
    s1 = TE2[t1 >>> 24 & 0xff] & 0xff000000;
    s1 ^= TE3[t2 >>> 16 & 0xff] & 0x00ff0000;
    s1 ^= TE0[t3 >>> 8 & 0xff] & 0x0000ff00;
    s1 ^= TE1[t0 >>> 0 & 0xff] & 0x000000ff;
    s1 ^= key[p + 1];
    s2 = TE2[t2 >>> 24 & 0xff] & 0xff000000;
    s2 ^= TE3[t3 >>> 16 & 0xff] & 0x00ff0000;
    s2 ^= TE0[t0 >>> 8 & 0xff] & 0x0000ff00;
    s2 ^= TE1[t1 >>> 0 & 0xff] & 0x000000ff;
    s2 ^= key[p + 2];
    s3 = TE2[t3 >>> 24 & 0xff] & 0xff000000;
    s3 ^= TE3[t0 >>> 16 & 0xff] & 0x00ff0000;
    s3 ^= TE0[t1 >>> 8 & 0xff] & 0x0000ff00;
    s3 ^= TE1[t2 >>> 0 & 0xff] & 0x000000ff;
    s3 ^= key[p + 3];
    writeU32$2(output, s0, opos + 0);
    writeU32$2(output, s1, opos + 4);
    writeU32$2(output, s2, opos + 8);
    writeU32$2(output, s3, opos + 12);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    var key = this.getDecryptKey(); // Map byte array block to cipher
    // state and add initial round key.

    var s0 = readU32$1(input, ipos + 0) ^ key[0];
    var s1 = readU32$1(input, ipos + 4) ^ key[1];
    var s2 = readU32$1(input, ipos + 8) ^ key[2];
    var s3 = readU32$1(input, ipos + 12) ^ key[3]; // Nr - 1 full rounds

    var r = this.rounds >>> 1;
    var p = 0;
    var t0, t1, t2, t3;

    for (;;) {
      t0 = TD0[s0 >>> 24 & 0xff];
      t0 ^= TD1[s3 >>> 16 & 0xff];
      t0 ^= TD2[s2 >>> 8 & 0xff];
      t0 ^= TD3[s1 >>> 0 & 0xff];
      t0 ^= key[p + 4];
      t1 = TD0[s1 >>> 24 & 0xff];
      t1 ^= TD1[s0 >>> 16 & 0xff];
      t1 ^= TD2[s3 >>> 8 & 0xff];
      t1 ^= TD3[s2 >>> 0 & 0xff];
      t1 ^= key[p + 5];
      t2 = TD0[s2 >>> 24 & 0xff];
      t2 ^= TD1[s1 >>> 16 & 0xff];
      t2 ^= TD2[s0 >>> 8 & 0xff];
      t2 ^= TD3[s3 >>> 0 & 0xff];
      t2 ^= key[p + 6];
      t3 = TD0[s3 >>> 24 & 0xff];
      t3 ^= TD1[s2 >>> 16 & 0xff];
      t3 ^= TD2[s1 >>> 8 & 0xff];
      t3 ^= TD3[s0 >>> 0 & 0xff];
      t3 ^= key[p + 7];
      p += 8;
      r -= 1;
      if (r === 0) break;
      s0 = TD0[t0 >>> 24 & 0xff];
      s0 ^= TD1[t3 >>> 16 & 0xff];
      s0 ^= TD2[t2 >>> 8 & 0xff];
      s0 ^= TD3[t1 >>> 0 & 0xff];
      s0 ^= key[p + 0];
      s1 = TD0[t1 >>> 24 & 0xff];
      s1 ^= TD1[t0 >>> 16 & 0xff];
      s1 ^= TD2[t3 >>> 8 & 0xff];
      s1 ^= TD3[t2 >>> 0 & 0xff];
      s1 ^= key[p + 1];
      s2 = TD0[t2 >>> 24 & 0xff];
      s2 ^= TD1[t1 >>> 16 & 0xff];
      s2 ^= TD2[t0 >>> 8 & 0xff];
      s2 ^= TD3[t3 >>> 0 & 0xff];
      s2 ^= key[p + 2];
      s3 = TD0[t3 >>> 24 & 0xff];
      s3 ^= TD1[t2 >>> 16 & 0xff];
      s3 ^= TD2[t1 >>> 8 & 0xff];
      s3 ^= TD3[t0 >>> 0 & 0xff];
      s3 ^= key[p + 3];
    } // Apply last round and map cipher
    // state to byte array block.


    s0 = TD4[t0 >>> 24 & 0xff] << 24;
    s0 ^= TD4[t3 >>> 16 & 0xff] << 16;
    s0 ^= TD4[t2 >>> 8 & 0xff] << 8;
    s0 ^= TD4[t1 >>> 0 & 0xff] << 0;
    s0 ^= key[p + 0];
    s1 = TD4[t1 >>> 24 & 0xff] << 24;
    s1 ^= TD4[t0 >>> 16 & 0xff] << 16;
    s1 ^= TD4[t3 >>> 8 & 0xff] << 8;
    s1 ^= TD4[t2 >>> 0 & 0xff] << 0;
    s1 ^= key[p + 1];
    s2 = TD4[t2 >>> 24 & 0xff] << 24;
    s2 ^= TD4[t1 >>> 16 & 0xff] << 16;
    s2 ^= TD4[t0 >>> 8 & 0xff] << 8;
    s2 ^= TD4[t3 >>> 0 & 0xff] << 0;
    s2 ^= key[p + 2];
    s3 = TD4[t3 >>> 24 & 0xff] << 24;
    s3 ^= TD4[t2 >>> 16 & 0xff] << 16;
    s3 ^= TD4[t1 >>> 8 & 0xff] << 8;
    s3 ^= TD4[t0 >>> 0 & 0xff] << 0;
    s3 ^= key[p + 3];
    writeU32$2(output, s0, opos + 0);
    writeU32$2(output, s1, opos + 4);
    writeU32$2(output, s2, opos + 8);
    writeU32$2(output, s3, opos + 12);
    return this;
  }

  destroy() {
    if (this.key) {
      for (var i = 0; i < this.key.length; i++) {
        this.key[i] = 0;
      }
    }

    if (this.encKey) {
      for (var _i2 = 0; _i2 < 60; _i2++) {
        this.encKey[_i2] = 0;
      }
    }

    if (this.decKey) {
      for (var _i3 = 0; _i3 < 60; _i3++) {
        this.decKey[_i3] = 0;
      }
    }

    this.key = null;
    this.encKey = null;
    this.decKey = null;
    return this;
  }

}
/*
 * Helpers
 */


function getRounds(bits) {
  switch (bits) {
    case 128:
      return 10;

    case 192:
      return 12;

    case 256:
      return 14;

    default:
      throw new Error('Bad key size.');
  }
}

function readU32$1(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$2(dst, num, off) {
  dst[off++] = num >>> 24;
  dst[off++] = num >>> 16;
  dst[off++] = num >>> 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var aes = AES;

/*
 * Constants
 */


var PADDING = Buffer.alloc(16, 0x00);
var FINALIZED = -1;
var REDUCTION = new Uint16Array([0x0000, 0x1c20, 0x3840, 0x2460, 0x7080, 0x6ca0, 0x48c0, 0x54e0, 0xe100, 0xfd20, 0xd940, 0xc560, 0x9180, 0x8da0, 0xa9c0, 0xb5e0]);
/**
 * GHASH
 */

class GHASH {
  constructor() {
    this.state = new Uint32Array(4);
    this.block = Buffer.allocUnsafe(16);
    this.size = FINALIZED;
    this.adLen = 0;
    this.ctLen = 0;
    this.table = [];

    for (var i = 0; i < 16; i++) {
      this.table.push(new Uint32Array(4));
    }
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 16);

    for (var i = 0; i < 4; i++) {
      this.state[i] = 0;
    }

    this.block.fill(0x00);
    this.size = 0;
    this.adLen = 0;
    this.ctLen = 0;

    for (var _i = 0; _i < 16; _i++) {
      for (var j = 0; j < 4; j++) {
        this.table[_i][j] = 0;
      }
    }

    var x = new Uint32Array(4); // Note: We store elements in
    // ascending significance (i.e.
    // 0 is the LSW, 3 is the MSW).
    // x1, x0 = lo
    // x3, x2 = hi

    x[1] = readU32BE(key, 0);
    x[0] = readU32BE(key, 4);
    x[3] = readU32BE(key, 8);
    x[2] = readU32BE(key, 12);
    this.table[reverse(1)] = x;

    for (var _i2 = 2; _i2 < 16; _i2 += 2) {
      this.table[reverse(_i2)] = this.double(this.table[reverse(_i2 >>> 1)]);
      this.table[reverse(_i2 + 1)] = this.add(this.table[reverse(_i2)], x);
    }

    return this;
  }

  absorb(data) {
    this._absorb(data, data.length);

    return this;
  }

  _absorb(data, len) {
    assert_1(this.size !== FINALIZED, 'Context already finalized.');
    var pos = this.size & 15;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 16 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 16) return;
      this.transform(this.block, 0);
    }

    while (len >= 16) {
      this.transform(data, off);
      off += 16;
      len -= 16;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }

  transform(block, off) {
    this.state[1] ^= readU32BE(block, off + 0);
    this.state[0] ^= readU32BE(block, off + 4);
    this.state[3] ^= readU32BE(block, off + 8);
    this.state[2] ^= readU32BE(block, off + 12);
    this.mul(this.state);
  }

  pad() {
    var pos = this.size & 15;
    if (pos !== 0) this._absorb(PADDING, 16 - pos);
  }

  aad(data) {
    assert_1(Buffer.isBuffer(data));
    assert_1(this.ctLen === 0);
    this.adLen += data.length;
    return this.absorb(data);
  }

  update(data) {
    assert_1(Buffer.isBuffer(data));
    if (data.length === 0) return this;
    if (this.ctLen === 0) this.pad();
    this.ctLen += data.length;
    return this.absorb(data);
  }

  final() {
    var out = Buffer.allocUnsafe(16);
    this.pad();
    var adLen = this.adLen * 8;
    var ctLen = this.ctLen * 8;
    this.state[1] ^= hi32(adLen);
    this.state[0] ^= lo32(adLen);
    this.state[3] ^= hi32(ctLen);
    this.state[2] ^= lo32(ctLen);
    this.mul(this.state);
    writeU32BE(out, this.state[1], 0);
    writeU32BE(out, this.state[0], 4);
    writeU32BE(out, this.state[3], 8);
    writeU32BE(out, this.state[2], 12);

    for (var i = 0; i < 4; i++) {
      this.state[i] = 0;
    }

    this.block.fill(0x00);
    this.size = FINALIZED;
    this.adLen = 0;
    this.ctLen = 0;

    for (var _i3 = 0; _i3 < 16; _i3++) {
      for (var j = 0; j < 4; j++) {
        this.table[_i3][j] = 0;
      }
    }

    return out;
  }

  add(x, y) {
    assert_1(x instanceof Uint32Array);
    assert_1(x.length === 4);
    assert_1(y instanceof Uint32Array);
    assert_1(y.length === 4);
    var z = new Uint32Array(4);
    z[0] = x[0] ^ y[0];
    z[1] = x[1] ^ y[1];
    z[2] = x[2] ^ y[2];
    z[3] = x[3] ^ y[3];
    return z;
  }

  double(x) {
    assert_1(x instanceof Uint32Array);
    assert_1(x.length === 4);
    var d = new Uint32Array(4);
    var msb = (x[2] & 1) === 1;
    var v;
    d[3] = x[3];
    d[2] = x[2];
    v = d[3] & 1;
    d[3] >>>= 1;
    d[2] >>>= 1;
    d[2] |= v << 31;
    d[3] |= (x[0] & 1) << 31;
    d[1] = x[1];
    d[0] = x[0];
    v = d[1] & 1;
    d[1] >>>= 1;
    d[0] >>>= 1;
    d[0] |= v << 31;

    if (msb) {
      d[1] ^= 0xe1000000;
      d[0] ^= 0x00000000;
    }

    return d;
  }

  mul(y) {
    assert_1(y instanceof Uint32Array);
    assert_1(y.length === 4);
    var z = new Uint32Array(4);
    var w = new Uint32Array(2);
    var v, t;

    for (var i = 0; i < 2; i++) {
      w[0] = y[2];
      w[1] = y[3];

      if (i === 1) {
        w[0] = y[0];
        w[1] = y[1];
      }

      for (var j = 0; j < 64; j += 4) {
        var msw = z[2] & 0x0f;
        v = z[3] & 0x0f;
        z[3] >>>= 4;
        z[2] >>>= 4;
        z[2] |= v << 28;
        z[3] |= z[0] << 28;
        v = z[1] & 0x0f;
        z[1] >>>= 4;
        z[0] >>>= 4;
        z[0] |= v << 28;
        z[1] ^= REDUCTION[msw] << 16;
        t = this.table[w[0] & 0x0f];
        z[0] ^= t[0];
        z[1] ^= t[1];
        z[2] ^= t[2];
        z[3] ^= t[3];
        v = w[1] & 0x0f;
        w[1] >>>= 4;
        w[0] >>>= 4;
        w[0] |= v << 28;
      }
    }

    y[0] = z[0];
    y[1] = z[1];
    y[2] = z[2];
    y[3] = z[3];
  }

}
/**
 * CTR
 */


class CTR {
  constructor(ctx) {
    assert_1(ctx && typeof ctx === 'object');
    assert_1(typeof ctx.blockSize === 'number');
    if (ctx.blockSize !== 16) throw new Error('GCM only available with a 128 bit block size.');
    this.ctx = ctx;
    this.state = Buffer.alloc(16, 0x00);
    this.block = Buffer.alloc(16, 0x00);
    this.pos = 0;
  }

  get blockSize() {
    return 16;
  }

  init(key, iv, counter) {
    this.initKey(key);
    this.initIV(iv, counter);
    return this;
  }

  initKey(key) {
    this.ctx.init(key);
    this.state.fill(0x00);
    this.pos = 0;
    return this;
  }

  initIV(iv, counter) {
    assert_1(Buffer.isBuffer(iv));
    assert_1(iv.length === 12 || iv.length === 16);
    iv.copy(this.state, 0);
    if (iv.length !== 16) this.setCounter(counter);
    return this;
  }

  encrypt(data) {
    return this.crypt(data, data);
  }

  crypt(input, output) {
    assert_1(Buffer.isBuffer(input));
    assert_1(Buffer.isBuffer(output));
    if (output.length < input.length) throw new Error('Invalid output size.');

    for (var i = 0; i < input.length; i++) {
      if ((this.pos & 15) === 0) {
        this._block();

        this.pos = 0;
      }

      output[i] = input[i] ^ this.block[this.pos++];
    }

    return output;
  }

  _block() {
    this.ctx.encrypt(this.state, 0, this.block, 0);

    for (var j = 15; j >= 12; j--) {
      this.state[j] += 1;
      if (this.state[j] !== 0) break;
    }
  }

  setCounter(counter) {
    if (counter == null) counter = 0;
    assert_1(counter >>> 0 === counter);
    writeU32BE(this.state, counter, 12);
    return this;
  }

  getCounter() {
    return readU32BE(this.state, 12);
  }

  destroy() {
    this.ctx.destroy();
    this.state.fill(0x00);
    this.block.fill(0x00);
    this.pos = 0;
    return this;
  }

}
/**
 * GCM
 */


class GCM {
  constructor(ctx) {
    this.cipher = new CTR(ctx);
    this.mac = new GHASH();
    this.mask = Buffer.alloc(16, 0x00);
  }

  init(key, iv) {
    var macKey = Buffer.alloc(16, 0x00);
    this.cipher.initKey(key);
    this.cipher.encrypt(macKey);
    this.mac.init(macKey); // Full round of ghash with same key.

    if (iv.length !== 12) {
      this.mac.update(iv);
      iv = this.mac.final();
      this.mac.init(macKey);
    }

    this.cipher.initIV(iv, 1); // Counter should be one.

    if (iv.length !== 16) assert_1(this.cipher.getCounter() === 1);
    this.cipher.encrypt(this.mask);
    return this;
  }

  aad(data) {
    this.mac.aad(data);
    return this;
  }

  encrypt(data) {
    this.cipher.encrypt(data);
    this.mac.update(data);
    return data;
  }

  decrypt(data) {
    this.mac.update(data);
    this.cipher.encrypt(data);
    return data;
  }

  auth(data) {
    this.mac.update(data);
    return data;
  }

  final() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;
    assert_1(size >>> 0 === size);
    assert_1(size === 4 || size === 8 || size >= 12 && size <= 16);
    var mac = this.mac.final();

    for (var i = 0; i < 16; i++) {
      mac[i] ^= this.mask[i];
    }

    return mac.slice(0, size);
  }

  static encrypt(key, iv, msg, aad) {
    var aead = new GCM();
    aead.init(key, iv);
    if (aad) aead.aad(aad);
    aead.encrypt(msg);
    return aead.final();
  }

  static decrypt(key, iv, msg, tag, aad) {
    var aead = new GCM();
    aead.init(key, iv);
    if (aad) aead.aad(aad);
    aead.decrypt(msg);
    return GCM.verify(aead.final(), tag);
  }

  static auth(key, iv, msg, tag, aad) {
    var aead = new GCM();
    aead.init(key, iv);
    if (aad) aead.aad(aad);
    aead.auth(msg);
    return GCM.verify(aead.final(), tag);
  }

  static verify(mac1, mac2) {
    assert_1(Buffer.isBuffer(mac1));
    assert_1(Buffer.isBuffer(mac2));
    assert_1(mac1.length === mac2.length);
    var dif = 0; // Compare in constant time.

    for (var i = 0; i < mac1.length; i++) {
      dif |= mac1[i] ^ mac2[i];
    }

    dif = dif - 1 >>> 31;
    return (dif & 1) !== 0;
  }

}
/*
 * Helpers
 */


function hi32(num) {
  return num * (1 / 0x100000000) >>> 0;
}

function lo32(num) {
  return num >>> 0;
}

function reverse(i) {
  i &= 0x0f;
  i = i << 2 & 0x0c | i >>> 2 & 0x03;
  i &= 0x0f;
  i = i << 1 & 0x0a | i >>> 1 & 0x05;
  i &= 0x0f;
  return i;
}

function readU32BE(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off++];
}

function writeU32BE(dst, num, off) {
  dst[off++] = num >>> 24;
  dst[off++] = num >>> 16;
  dst[off++] = num >>> 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var GHASH_1 = GHASH;
var CTR_1 = CTR;
var GCM_1 = GCM;
var gcm = {
  GHASH: GHASH_1,
  CTR: CTR_1,
  GCM: GCM_1
};

/*
 * Constants
 */


var EMPTY = Buffer.alloc(0);
var ZERO16 = Buffer.alloc(16, 0x00);
/**
 * Cipher
 */

class Cipher {
  constructor(ctx) {
    var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    assert_1(ctx && typeof ctx.encrypt === 'function');
    assert_1(typeof ctx.blockSize === 'number');
    assert_1(typeof padding === 'boolean');
    this.ctx = ctx;
    this.padding = padding;
    this.block = Buffer.allocUnsafe(ctx.blockSize);
    this.bpos = -1;
    this.lsize = 0;
    this.last = EMPTY;
    if (padding) this.last = Buffer.alloc(ctx.blockSize, 0x00);
  }

  get blockSize() {
    return this.block.length;
  }

  init(key, iv) {
    if (iv == null) iv = EMPTY;
    assert_1(Buffer.isBuffer(key));
    assert_1(Buffer.isBuffer(iv));
    this.ctx.init(key);
    this.bpos = 0;
    this.lsize = 0;
    this.last.fill(0x00);

    this._init(key, iv);

    return this;
  }

  update(input) {
    assert_1(Buffer.isBuffer(input));
    if (this.bpos === -1) throw new Error('Cipher not initialized.');
    var bs = this.block.length;
    var bpos = this.bpos;
    var ilen = input.length;
    var olen = ilen - ilen % bs;
    var ipos = 0;
    var opos = 0;
    this.bpos = (this.bpos + ilen) % bs;

    if (bpos > 0) {
      var want = bs - bpos;
      if (want > ilen) want = ilen;
      input.copy(this.block, bpos, ipos, ipos + want);
      bpos += want;
      ilen -= want;
      ipos += want;
      if (bpos < bs) return EMPTY;
      olen += bs;
    }

    olen += this.lsize;
    var output = Buffer.allocUnsafe(olen);
    if (this.lsize > 0) opos += this.last.copy(output, opos, 0, this.lsize);

    if (ipos) {
      this._update(this.block, 0, output, opos);

      opos += bs;
    }

    while (ilen >= bs) {
      this._update(input, ipos, output, opos);

      opos += bs;
      ipos += bs;
      ilen -= bs;
    }

    if (ilen > 0) input.copy(this.block, 0, ipos, ipos + ilen);

    if (this.padding) {
      if (olen > 0) {
        this.lsize = output.copy(this.last, 0, olen - bs, olen);
        return output.slice(0, olen - bs);
      }

      this.lsize = 0;
      this.last.fill(0x00);
    }

    return output;
  }

  final() {
    if (this.bpos === -1) throw new Error('Cipher not initialized.');
    var ret;

    try {
      ret = this._final();
    } finally {
      this.ctx.destroy();
      this.block.fill(0x00);
      this.bpos = -1;
      this.lsize = 0;
      this.last.fill(0x00);
    }

    return ret;
  }

  setAAD(data) {
    throw new Error('Not authenticated.');
  }

  getAuthTag() {
    throw new Error('Not authenticated.');
  }

  setAuthTag(tag) {
    throw new Error('Not authenticated.');
  }

  _init() {
    return this;
  }

  _update() {
    throw new Error('Unimplemented.');
  }

  _final() {
    return EMPTY;
  }

}
/**
 * Block Cipher
 * @extends Cipher
 */


class BlockCipher extends Cipher {
  constructor(ctx) {
    var chain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    assert_1(typeof chain === 'boolean');
    super(ctx, false);
    this.chain = chain;
    this.prev = EMPTY;
  }

  _init(key, iv) {
    assert_1(Buffer.isBuffer(iv));
    if (this.chain) assert_1(iv.length === this.blockSize);else assert_1(iv.length === 0);
    this.prev = Buffer.from(iv);
    return this;
  }

  _update(input, ipos, output, opos) {
    if (this.chain) {
      var bs = this.blockSize;

      for (var i = 0; i < bs; i++) {
        output[opos + i] = input[ipos + i] ^ this.prev[i];
      }

      this.ctx.encrypt(output, opos, output, opos);
      output.copy(this.prev, 0, opos, opos + bs);
    } else {
      this.ctx.encrypt(input, ipos, output, opos);
    }

    return this;
  }

  _final() {
    var bs = this.blockSize;
    var left = bs - this.bpos;
    var block = Buffer.from(this.block);
    block.fill(left, this.bpos, bs);

    this._update(block, 0, block, 0);

    this.prev.fill(0x00);
    this.prev = EMPTY;
    return block;
  }

}
/**
 * Block Decipher
 * @extends Cipher
 */


class BlockDecipher extends Cipher {
  constructor(ctx) {
    var chain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    assert_1(typeof chain === 'boolean');
    super(ctx, true);
    this.chain = chain;
    this.prev = EMPTY;
  }

  _init(key, iv) {
    assert_1(Buffer.isBuffer(iv));
    if (this.chain) assert_1(iv.length === this.blockSize);else assert_1(iv.length === 0);
    this.prev = Buffer.from(iv);
    return this;
  }

  _update(input, ipos, output, opos) {
    if (this.chain) {
      var bs = this.blockSize;
      this.ctx.decrypt(input, ipos, output, opos);

      for (var i = 0; i < bs; i++) {
        output[opos + i] = output[opos + i] ^ this.prev[i];
      }

      input.copy(this.prev, 0, ipos, ipos + bs);
    } else {
      this.ctx.decrypt(input, ipos, output, opos);
    }

    return this;
  }

  _final() {
    var bs = this.blockSize;
    var block = Buffer.from(this.last);
    this.prev.fill(0x00);
    this.prev = EMPTY;
    if (this.bpos !== 0) throw new Error('Bad decrypt (trailing bytes).');
    var left = block[block.length - 1];
    if (left === 0 || left > bs) throw new Error('Bad decrypt (padding).');
    var end = bs - left;

    for (var i = end; i < block.length; i++) {
      if (block[i] !== left) throw new Error('Bad decrypt (padding).');
    }

    return block.slice(0, end);
  }

}
/**
 * ECB Cipher
 * @extends BlockCipher
 */


class ECBCipher extends BlockCipher {
  constructor(ctx) {
    super(ctx, false);
  }

}
/**
 * ECB Decipher
 * @extends BlockDecipher
 */


class ECBDecipher extends BlockDecipher {
  constructor(ctx) {
    super(ctx, false);
  }

}
/**
 * CBC Cipher
 * @extends BlockCipher
 */


class CBCCipher extends BlockCipher {
  constructor(ctx) {
    super(ctx, true);
  }

}
/**
 * CBC Decipher
 * @extends BlockDecipher
 */


class CBCDecipher extends BlockDecipher {
  constructor(ctx) {
    super(ctx, true);
  }

}
/**
 * CTR
 * @extends Cipher
 */


class CTR$1 extends Cipher {
  constructor(ctx) {
    super(ctx, false);
    this.state = EMPTY;
    this.ctr = EMPTY;
  }

  _init(key, iv) {
    assert_1(Buffer.isBuffer(iv));
    assert_1(iv.length === this.blockSize);
    this.state = Buffer.allocUnsafe(this.blockSize);
    this.ctr = Buffer.from(iv);
    return this;
  }

  _increment() {
    for (var i = this.ctr.length - 1; i >= 0; i--) {
      this.ctr[i] += 1;
      if (this.ctr[i] !== 0x00) break;
    }
  }

  _update(input, ipos, output, opos) {
    var bs = this.blockSize;
    this.ctx.encrypt(this.ctr, 0, this.state, 0);

    this._increment();

    for (var i = 0; i < bs; i++) {
      output[opos + i] = input[ipos + i] ^ this.state[i];
    }

    return this;
  }

  _final() {
    this.ctx.encrypt(this.ctr, 0, this.state, 0);
    var out = Buffer.allocUnsafe(this.bpos);

    for (var i = 0; i < this.bpos; i++) {
      out[i] = this.block[i] ^ this.state[i];
    }

    this.state.fill(0x00);
    this.ctr.fill(0x00);
    this.state = EMPTY;
    this.ctr = EMPTY;
    return out;
  }

}
/**
 * CTR Cipher
 * @extends CTR
 */


class CTRCipher extends CTR$1 {
  constructor(ctx) {
    super(ctx);
  }

}
/**
 * CTR Decipher
 * @extends CTR
 */


class CTRDecipher extends CTR$1 {
  constructor(ctx) {
    super(ctx);
  }

}
/**
 * CFB
 * @extends Cipher
 */


class CFB extends Cipher {
  constructor(ctx) {
    var encrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    assert_1(typeof encrypt === 'boolean');
    super(ctx, false);
    this.encrypt = encrypt;
    this.state = EMPTY;
    this.prev = EMPTY;
  }

  _init(key, iv) {
    assert_1(Buffer.isBuffer(iv));
    assert_1(iv.length === this.blockSize);
    this.state = Buffer.allocUnsafe(this.blockSize);
    this.prev = Buffer.from(iv);
    return this;
  }

  _update(input, ipos, output, opos) {
    var bs = this.blockSize;
    this.ctx.encrypt(this.prev, 0, this.state, 0);

    for (var i = 0; i < bs; i++) {
      output[opos + i] = input[ipos + i] ^ this.state[i];
    }

    if (this.encrypt) output.copy(this.prev, 0, opos, opos + bs);else input.copy(this.prev, 0, ipos, ipos + bs);
    return this;
  }

  _final() {
    this.ctx.encrypt(this.prev, 0, this.state, 0);
    var out = Buffer.allocUnsafe(this.bpos);

    for (var i = 0; i < this.bpos; i++) {
      out[i] = this.block[i] ^ this.state[i];
    }

    this.state.fill(0x00);
    this.state = EMPTY;
    this.prev.fill(0x00);
    this.prev = EMPTY;
    return out;
  }

}
/**
 * CFB Cipher
 * @extends CFB
 */


class CFBCipher extends CFB {
  constructor(ctx) {
    super(ctx, true);
  }

}
/**
 * CFB Decipher
 * @extends CFB
 */


class CFBDecipher extends CFB {
  constructor(ctx) {
    super(ctx, false);
  }

}
/**
 * OFB
 * @extends Cipher
 */


class OFB extends Cipher {
  constructor(ctx) {
    super(ctx, false);
    this.state = EMPTY;
  }

  _init(key, iv) {
    assert_1(Buffer.isBuffer(iv));
    assert_1(iv.length === this.blockSize);
    this.state = Buffer.from(iv);
    return this;
  }

  _update(input, ipos, output, opos) {
    var bs = this.blockSize;
    this.ctx.encrypt(this.state, 0, this.state, 0);

    for (var i = 0; i < bs; i++) {
      output[opos + i] = input[ipos + i] ^ this.state[i];
    }

    return this;
  }

  _final() {
    this.ctx.encrypt(this.state, 0, this.state, 0);
    var out = Buffer.allocUnsafe(this.bpos);

    for (var i = 0; i < this.bpos; i++) {
      out[i] = this.block[i] ^ this.state[i];
    }

    this.state.fill(0x00);
    this.state = EMPTY;
    return out;
  }

}
/**
 * OFB Cipher
 * @extends OFB
 */


class OFBCipher extends OFB {
  constructor(ctx) {
    super(ctx);
  }

}
/**
 * OFB Decipher
 * @extends OFB
 */


class OFBDecipher extends OFB {
  constructor(ctx) {
    super(ctx);
  }

}
/**
 * GCM
 * @extends Cipher
 */


class GCM$1 {
  constructor(ctx, encrypt) {
    this.aead = new gcm.GCM(ctx);
    this.encrypt = encrypt;
    this.tag = ZERO16;
    this.mac = ZERO16;
  }

  get blockSize() {
    return 16;
  }

  init(key, iv) {
    this.aead.init(key, iv);
    this.tag = ZERO16;
    this.mac = ZERO16;
    return this;
  }

  update(input) {
    assert_1(Buffer.isBuffer(input));
    var out = Buffer.allocUnsafe(input.length);
    input.copy(out, 0);
    if (this.encrypt) this.aead.encrypt(out);else this.aead.decrypt(out);
    return out;
  }

  final() {
    this.mac = this.aead.final(this.tag.length);

    if (!this.encrypt) {
      if (!gcm.GCM.verify(this.tag, this.mac)) throw new Error('Invalid decryption tag.');
    }

    return EMPTY;
  }

  setAAD(data) {
    this.aead.aad(data);
    return this;
  }

  getAuthTag() {
    assert_1(this.encrypt);
    return this.mac;
  }

  setAuthTag(tag) {
    assert_1(!this.encrypt);
    assert_1(Buffer.isBuffer(tag));
    var t = tag.length;
    assert_1(t === 4 || t === 8 || t >= 12 && t <= 16);
    this.tag = tag;
    return this;
  }

}
/**
 * GCM Cipher
 * @extends GCM
 */


class GCMCipher extends GCM$1 {
  constructor(ctx) {
    super(ctx, true);
  }

}
/**
 * GCM Decipher
 * @extends GCM
 */


class GCMDecipher extends GCM$1 {
  constructor(ctx) {
    super(ctx, false);
  }

}
/*
 * Helpers
 */


function get(name) {
  var encrypt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  assert_1(typeof name === 'string');
  assert_1(typeof encrypt === 'boolean');

  switch (name) {
    case 'ECB':
      return encrypt ? ECBCipher : ECBDecipher;

    case 'CBC':
      return encrypt ? CBCCipher : CBCDecipher;

    case 'CTR':
      return encrypt ? CTRCipher : CTRDecipher;

    case 'CFB':
      return encrypt ? CFBCipher : CFBDecipher;

    case 'OFB':
      return encrypt ? OFBCipher : OFBDecipher;

    case 'GCM':
      return encrypt ? GCMCipher : GCMDecipher;

    default:
      throw new Error("Unknown mode: ".concat(name, "."));
  }
}
/*
 * Expose
 */


var Cipher_1 = Cipher;
var BlockCipher_1 = BlockCipher;
var BlockDecipher_1 = BlockDecipher;
var ECBCipher_1 = ECBCipher;
var ECBDecipher_1 = ECBDecipher;
var CBCCipher_1 = CBCCipher;
var CBCDecipher_1 = CBCDecipher;
var CTR_1$1 = CTR$1;
var CTRCipher_1 = CTRCipher;
var CTRDecipher_1 = CTRDecipher;
var CFB_1 = CFB;
var CFBCipher_1 = CFBCipher;
var CFBDecipher_1 = CFBDecipher;
var OFB_1 = OFB;
var OFBCipher_1 = OFBCipher;
var OFBDecipher_1 = OFBDecipher;
var GCM_1$1 = GCM$1;
var GCMCipher_1 = GCMCipher;
var GCMDecipher_1 = GCMDecipher;
var get_1 = get;
var modes = {
  Cipher: Cipher_1,
  BlockCipher: BlockCipher_1,
  BlockDecipher: BlockDecipher_1,
  ECBCipher: ECBCipher_1,
  ECBDecipher: ECBDecipher_1,
  CBCCipher: CBCCipher_1,
  CBCDecipher: CBCDecipher_1,
  CTR: CTR_1$1,
  CTRCipher: CTRCipher_1,
  CTRDecipher: CTRDecipher_1,
  CFB: CFB_1,
  CFBCipher: CFBCipher_1,
  CFBDecipher: CFBDecipher_1,
  OFB: OFB_1,
  OFBCipher: OFBCipher_1,
  OFBDecipher: OFBDecipher_1,
  GCM: GCM_1$1,
  GCMCipher: GCMCipher_1,
  GCMDecipher: GCMDecipher_1,
  get: get_1
};

var {
  CBCCipher: CBCCipher$1,
  CBCDecipher: CBCDecipher$1
} = modes;
/**
 * Encrypt data with aes 256 cbc.
 * @param {Buffer} data
 * @param {Buffer} key
 * @param {Buffer} iv
 * @returns {Buffer}
 */

function encipher(data, key, iv) {
  var ctx = new CBCCipher$1(new aes(256));
  ctx.init(key, iv);
  return concat(ctx.update(data), ctx.final());
}
/**
 * Decrypt data with aes 256 cbc.
 * @param {Buffer} data
 * @param {Buffer} key
 * @param {Buffer} iv
 * @returns {Buffer}
 */


function decipher(data, key, iv) {
  var ctx = new CBCDecipher$1(new aes(256));
  ctx.init(key, iv);
  return concat(ctx.update(data), ctx.final());
}
/*
 * Helpers
 */


function concat(a, b) {
  var data = Buffer.allocUnsafe(a.length + b.length);
  a.copy(data, 0);
  b.copy(data, a.length);
  return data;
}
/*
 * Expose
 */


var native_1 = 0;
var encipher_1 = encipher;
var decipher_1 = decipher;
var aes$1 = {
  native: native_1,
  encipher: encipher_1,
  decipher: decipher_1
};

var aesBrowser = aes$1;

/**
 * HMAC
 */


class HMAC {
  /**
   * Create an HMAC.
   * @param {Function} Hash
   * @param {Number} size
   * @param {Array} [x=[]]
   * @param {Array} [y=[]]
   */
  constructor(Hash, size) {
    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    assert_1(typeof Hash === 'function');
    assert_1(size >>> 0 === size);
    assert_1(Array.isArray(x));
    assert_1(Array.isArray(y));
    this.hash = Hash;
    this.size = size;
    this.x = x;
    this.y = y;
    this.inner = new Hash();
    this.outer = new Hash();
  }
  /**
   * Initialize HMAC context.
   * @param {Buffer} data
   */


  init(key) {
    assert_1(Buffer.isBuffer(key)); // Shorten key

    if (key.length > this.size) {
      var Hash = this.hash;
      var h = new Hash();
      h.init(...this.x);
      h.update(key);
      key = h.final(...this.y);
      assert_1(key.length <= this.size);
    } // Pad key


    var pad = Buffer.allocUnsafe(this.size);

    for (var i = 0; i < key.length; i++) {
      pad[i] = key[i] ^ 0x36;
    }

    for (var _i = key.length; _i < pad.length; _i++) {
      pad[_i] = 0x36;
    }

    this.inner.init(...this.x);
    this.inner.update(pad);

    for (var _i2 = 0; _i2 < key.length; _i2++) {
      pad[_i2] = key[_i2] ^ 0x5c;
    }

    for (var _i3 = key.length; _i3 < pad.length; _i3++) {
      pad[_i3] = 0x5c;
    }

    this.outer.init(...this.x);
    this.outer.update(pad);
    return this;
  }
  /**
   * Update HMAC context.
   * @param {Buffer} data
   */


  update(data) {
    this.inner.update(data);
    return this;
  }
  /**
   * Finalize HMAC context.
   * @returns {Buffer}
   */


  final() {
    this.outer.update(this.inner.final(...this.y));
    return this.outer.final(...this.y);
  }

}
/*
 * Expose
 */


var hmac = HMAC;

/*
 * Constants
 */


var FINALIZED$1 = -1;
var DESC = Buffer.alloc(16, 0x00);
var PADDING$1 = Buffer.alloc(128, 0x00);
PADDING$1[0] = 0x80;
var K = new Uint32Array([0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817]);
/**
 * SHA512
 */

class SHA512 {
  /**
   * Create a SHA512 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(16);
    this.msg = new Uint32Array(160);
    this.block = Buffer.allocUnsafe(128);
    this.size = FINALIZED$1;
  }
  /**
   * Initialize SHA512 context.
   */


  init() {
    this.state[0] = 0x6a09e667;
    this.state[1] = 0xf3bcc908;
    this.state[2] = 0xbb67ae85;
    this.state[3] = 0x84caa73b;
    this.state[4] = 0x3c6ef372;
    this.state[5] = 0xfe94f82b;
    this.state[6] = 0xa54ff53a;
    this.state[7] = 0x5f1d36f1;
    this.state[8] = 0x510e527f;
    this.state[9] = 0xade682d1;
    this.state[10] = 0x9b05688c;
    this.state[11] = 0x2b3e6c1f;
    this.state[12] = 0x1f83d9ab;
    this.state[13] = 0xfb41bd6b;
    this.state[14] = 0x5be0cd19;
    this.state[15] = 0x137e2179;
    this.size = 0;
    return this;
  }
  /**
   * Update SHA512 context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize SHA512 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(64));
  }
  /**
   * Update SHA512 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$1, 'Context already finalized.');
    var pos = this.size & 0x7f;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 128 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 128) return;
      this.transform(this.block, 0);
    }

    while (len >= 128) {
      this.transform(data, off);
      off += 128;
      len -= 128;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize SHA512 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$1, 'Context already finalized.');
    var pos = this.size % 128;
    var len = this.size * 8;
    writeU32$3(DESC, len * (1 / 0x100000000), 8);
    writeU32$3(DESC, len, 12);

    this._update(PADDING$1, 1 + (239 - pos) % 128);

    this._update(DESC, 16);

    for (var i = 0; i < 16; i++) {
      writeU32$3(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 160; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 128; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$1;
    return out;
  }
  /**
   * Prepare SHA512 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  prepare(chunk, pos) {
    var W = this.msg;
    var i = 0;

    for (; i < 32; i++) {
      W[i] = readU32$2(chunk, pos + i * 4);
    }

    for (; i < 160; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];
      var c3_lo = W[i - 31];
      W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
  }
  /**
   * Transform SHA512 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var W = this.msg;
    this.prepare(chunk, pos);
    var ah = this.state[0];
    var al = this.state[1];
    var bh = this.state[2];
    var bl = this.state[3];
    var ch = this.state[4];
    var cl = this.state[5];
    var dh = this.state[6];
    var dl = this.state[7];
    var eh = this.state[8];
    var el = this.state[9];
    var fh = this.state[10];
    var fl = this.state[11];
    var gh = this.state[12];
    var gl = this.state[13];
    var hh = this.state[14];
    var hl = this.state[15];

    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = K[i];
      var c3_lo = K[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];
      var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64(this.state, 0, ah, al);
    sum64(this.state, 2, bh, bl);
    sum64(this.state, 4, ch, cl);
    sum64(this.state, 6, dh, dl);
    sum64(this.state, 8, eh, el);
    sum64(this.state, 10, fh, fl);
    sum64(this.state, 12, gh, gl);
    sum64(this.state, 14, hh, hl);
  }

  static hash() {
    return new SHA512();
  }

  static hmac() {
    return new hmac(SHA512, 128);
  }

  static digest(data) {
    return SHA512.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 64);
    assert_1(Buffer.isBuffer(right) && right.length === 64);
    return SHA512.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = SHA512.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return SHA512.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


SHA512.native = 0;
SHA512.id = 'SHA512';
SHA512.size = 64;
SHA512.bits = 512;
SHA512.blockSize = 128;
SHA512.zero = Buffer.alloc(64, 0x00);
SHA512.ctx = new SHA512();
/*
 * Helpers
 */

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];
  var lo = al + bl >>> 0;
  var hi = (lo < al) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}

function sum64_hi(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al) + ah + bh;
  return hi >>> 0;
}

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al;
  lo = lo + cl >>> 0;
  carry += lo < cl;
  lo = lo + dl >>> 0;
  carry += lo < dl;
  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al;
  lo = lo + cl >>> 0;
  carry += lo < cl;
  lo = lo + dl >>> 0;
  carry += lo < dl;
  lo = lo + el >>> 0;
  carry += lo < el;
  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;
  return lo >>> 0;
}

function rotr64_hi(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}

function rotr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

function shr64_hi(ah, al, num) {
  return ah >>> num;
}

function shr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = xh & yh ^ ~xh & zh;
  return r >>> 0;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  return r >>> 0;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  return r >>> 0;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  return r >>> 0;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34

  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34

  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61

  var c2_hi = shr64_hi(xh, xl, 6);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  return r >>> 0;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61

  var c2_lo = shr64_lo(xh, xl, 6);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  return r >>> 0;
}

function readU32$2(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$3(data, num, off) {
  data[off++] = num >>> 24;
  data[off++] = num >>> 16;
  data[off++] = num >>> 8;
  data[off++] = num;
  return off;
}
/*
 * Expose
 */


var sha512 = SHA512;

var sha512Browser = sha512;

/*
 * Constants
 */


var S0 = new Uint32Array([0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915, 0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a]);
var S1 = new Uint32Array([0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7]);
var S2 = new Uint32Array([0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0]);
var S3 = new Uint32Array([0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6]);
var P = new Uint32Array([0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b]);
/**
 * Blowfish
 */

class Blowfish {
  constructor() {
    this.S = [new Uint32Array(S0.length), new Uint32Array(S1.length), new Uint32Array(S2.length), new Uint32Array(S3.length)];
    this.P = new Uint32Array(P.length);
    this.block = new Uint32Array(2);
    this.off = 0;
  }

  get blockSize() {
    return 8;
  }

  init(key, salt) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length >= 1 && key.length <= 72);

    if (salt != null) {
      assert_1(Buffer.isBuffer(salt));
      assert_1(salt.length >= 0 && salt.length <= 1096);
    }

    copy(this.S[0], S0);
    copy(this.S[1], S1);
    copy(this.S[2], S2);
    copy(this.S[3], S3);
    copy(this.P, P);
    this.off = 0;
    if (salt && salt.length > 0) this.expandstate(key, salt);else this.expand0state(key);
    return this;
  }

  encrypt(input, ipos, output, opos) {
    var d = this.block;
    d[0] = readU32$3(input, ipos);
    d[1] = readU32$3(input, ipos + 4);
    this.encipher(d, 0);
    writeU32$4(output, d[0], opos);
    writeU32$4(output, d[1], opos + 4);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    var d = this.block;
    d[0] = readU32$3(input, ipos);
    d[1] = readU32$3(input, ipos + 4);
    this.decipher(d, 0);
    writeU32$4(output, d[0], opos);
    writeU32$4(output, d[1], opos + 4);
    return this;
  }

  destroy() {
    cleanse(this.S[0]);
    cleanse(this.S[1]);
    cleanse(this.S[2]);
    cleanse(this.S[3]);
    cleanse(this.P);
    cleanse(this.block);
    this.off = 0;
    return this;
  }

  encipher(x, off) {
    var P = this.P;
    var S = this.S;
    var l = x[off] ^ P[0];
    var r = x[off + 1];
    var j = 0;

    while (j <= 14) {
      r ^= (S[0][l >>> 24 & 0xff] + S[1][l >>> 16 & 0xff] ^ S[2][l >>> 8 & 0xff]) + S[3][l & 0xff] ^ P[++j];
      l ^= (S[0][r >>> 24 & 0xff] + S[1][r >>> 16 & 0xff] ^ S[2][r >>> 8 & 0xff]) + S[3][r & 0xff] ^ P[++j];
    }

    x[off] = r ^ P[17];
    x[off + 1] = l;
  }

  decipher(x, off) {
    var P = this.P;
    var S = this.S;
    var l = x[off] ^ P[17];
    var r = x[off + 1];
    var j = 17;

    while (j >= 3) {
      r ^= (S[0][l >>> 24 & 0xff] + S[1][l >>> 16 & 0xff] ^ S[2][l >>> 8 & 0xff]) + S[3][l & 0xff] ^ P[--j];
      l ^= (S[0][r >>> 24 & 0xff] + S[1][r >>> 16 & 0xff] ^ S[2][r >>> 8 & 0xff]) + S[3][r & 0xff] ^ P[--j];
    }

    x[off] = r ^ P[0];
    x[off + 1] = l;
  }

  stream2word(data) {
    var word = 0;
    if (data.length === 0) return word;

    for (var i = 0; i < 4; i++) {
      if (this.off >= data.length) this.off = 0;
      word *= 0x100;
      word += data[this.off];
      this.off += 1;
    }

    return word;
  }

  expand0state(key) {
    var d = new Uint32Array(2);
    this.off = 0;

    for (var i = 0; i < 18; i++) {
      this.P[i] ^= this.stream2word(key);
    }

    this.off = 0;

    for (var _i = 0; _i < 18; _i += 2) {
      this.encipher(d, 0);
      this.P[_i] = d[0];
      this.P[_i + 1] = d[1];
    }

    for (var _i2 = 0; _i2 < 4; _i2++) {
      for (var k = 0; k < 256; k += 2) {
        this.encipher(d, 0);
        this.S[_i2][k] = d[0];
        this.S[_i2][k + 1] = d[1];
      }
    }
  }

  expandstate(key, data) {
    var d = new Uint32Array(2);
    this.off = 0;

    for (var i = 0; i < 18; i++) {
      this.P[i] ^= this.stream2word(key);
    }

    this.off = 0;

    for (var _i3 = 0; _i3 < 18; _i3 += 2) {
      d[0] ^= this.stream2word(data);
      d[1] ^= this.stream2word(data);
      this.encipher(d, 0);
      this.P[_i3] = d[0];
      this.P[_i3 + 1] = d[1];
    }

    for (var _i4 = 0; _i4 < 4; _i4++) {
      for (var k = 0; k < 256; k += 2) {
        d[0] ^= this.stream2word(data);
        d[1] ^= this.stream2word(data);
        this.encipher(d, 0);
        this.S[_i4][k] = d[0];
        this.S[_i4][k + 1] = d[1];
      }
    }

    this.off = 0;
  }

  enc(data) {
    var blocks = data.byteLength >>> 3;

    for (var i = 0; i < blocks; i++) {
      this.encipher(data, i * 2);
    }
  }

  dec(data) {
    var blocks = data.byteLength >>> 3;

    for (var i = 0; i < blocks; i++) {
      this.decipher(data, i * 2);
    }
  }

}
/*
 * Helpers
 */


function copy(dst, src) {
  for (var i = 0; i < src.length; i++) {
    dst[i] = src[i];
  }
}

function cleanse(arr) {
  for (var i = 0; i < arr.length; i++) {
    arr[i] = 0;
  }
}

function readU32$3(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$4(dst, num, off) {
  dst[off++] = num >>> 24;
  dst[off++] = num >>> 16;
  dst[off++] = num >>> 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var blowfish = Blowfish;

/*
 * Constants
 */


var CIPHERTEXT192 = Buffer.from('OrpheanBeholderScryDoubt', 'binary');
var BCRYPT_BLOCKS192 = 6;
var BCRYPT_SIZE192 = 24;
var BCRYPT_SALT192 = 16;
var BCRYPT_HASH192 = 23;
var CIPHERTEXT256 = Buffer.from('OxychromaticBlowfishSwatDynamite', 'binary');
var BCRYPT_BLOCKS256 = 8;
var BCRYPT_SIZE256 = 32;
var NUL = Buffer.alloc(1, 0x00);
/*
 * Bcrypt
 */

function hash192(pass, salt, rounds) {
  if (typeof pass === 'string') pass = Buffer.from(pass, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  if (salt == null) salt = Buffer.alloc(0);
  assert_1(Buffer.isBuffer(pass));
  assert_1(Buffer.isBuffer(salt));
  assert_1(rounds >>> 0 === rounds);
  if (rounds < 4 || rounds > 31) throw new RangeError('Invalid rounds.');
  return _hash192(pass, salt, rounds, Buffer.alloc(BCRYPT_SIZE192));
}

function derive(pass, salt, rounds) {
  var minor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'b';
  if (typeof pass === 'string') pass = Buffer.from(pass, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  assert_1(Buffer.isBuffer(pass));
  assert_1(Buffer.isBuffer(salt));
  assert_1(rounds >>> 0 === rounds);
  assert_1(typeof minor === 'string');
  if (salt.length !== BCRYPT_SALT192) throw new RangeError('Invalid salt length.');

  switch (minor) {
    case 'a':
      pass = Buffer.concat([pass, NUL]);
      pass = pass.slice(0, pass.length & 0xff);
      break;

    case 'b':
      if (pass.length > 72) pass = pass.slice(0, 73);else pass = Buffer.concat([pass, NUL]);
      break;

    default:
      throw new Error('Invalid minor version.');
  }

  return hash192(pass, salt, rounds).slice(0, BCRYPT_HASH192);
}

function generate(pass, salt, rounds) {
  var minor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'b';

  if (typeof salt === 'string') {
    var [i, data] = decode64(salt, 0, BCRYPT_SALT192);
    if (i !== salt.length || data == null) throw new Error('Invalid salt string.');
    salt = data;
  }

  var hash = derive(pass, salt, rounds, minor);
  return encode(minor, rounds, salt, hash);
}

function verify(pass, record) {
  var [minor, rounds, salt, expect] = decode(record);
  var hash = derive(pass, salt, rounds, minor);
  var res = 0;

  for (var i = 0; i < BCRYPT_HASH192; i++) {
    res |= hash[i] ^ expect[i];
  }

  return res - 1 >>> 31 !== 0;
}
/*
 * PBKDF
 */


function hash256(pass, salt, rounds) {
  if (typeof pass === 'string') pass = Buffer.from(pass, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  if (salt == null) salt = Buffer.alloc(0);
  assert_1(Buffer.isBuffer(pass));
  assert_1(Buffer.isBuffer(salt));
  assert_1(rounds >>> 0 === rounds);
  if (rounds < 4 || rounds > 31) throw new RangeError('Invalid rounds.');
  return _hash256(pass, salt, rounds, Buffer.alloc(BCRYPT_SIZE256));
}

function pbkdf(pass, salt, rounds, size) {
  if (typeof pass === 'string') pass = Buffer.from(pass, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  if (salt == null) salt = Buffer.alloc(0);
  assert_1(Buffer.isBuffer(pass));
  assert_1(Buffer.isBuffer(salt));
  assert_1(rounds >>> 0 === rounds);
  assert_1(size >>> 0 === size);
  var out = Buffer.alloc(BCRYPT_SIZE256);
  var tmpout = Buffer.alloc(BCRYPT_SIZE256);
  var countsalt = Buffer.alloc(salt.length + 4);
  var key = Buffer.alloc(size);

  if (rounds < 1 || pass.length === 0 || salt.length === 0 || size === 0 || size > out.length ** 2 || salt.length > 1 << 20) {
    throw new Error('Invalid bcrypt parameters.');
  }

  var stride = (size + out.length - 1) / out.length >>> 0;
  var amount = (size + stride - 1) / stride >>> 0;
  salt.copy(countsalt, 0);
  var sha2pass = sha512Browser.digest(pass);
  var sha2salt = Buffer.alloc(0);
  var keylen = size;
  var amt = amount;

  for (var count = 1; keylen > 0; count++) {
    countsalt[salt.length + 0] = count >>> 24;
    countsalt[salt.length + 1] = count >>> 16;
    countsalt[salt.length + 2] = count >>> 8;
    countsalt[salt.length + 3] = count;
    sha2salt = sha512Browser.digest(countsalt);

    _hash256(sha2pass, sha2salt, 6, tmpout);

    tmpout.copy(out, 0);

    for (var _i = 1; _i < rounds; _i++) {
      sha2salt = sha512Browser.digest(tmpout);

      _hash256(sha2pass, sha2salt, 6, tmpout);

      for (var j = 0; j < out.length; j++) {
        out[j] ^= tmpout[j];
      }
    }

    amt = Math.min(amt, keylen);
    var i = 0;

    for (; i < amt; i++) {
      var dest = i * stride + (count - 1);
      if (dest >= size) break;
      key[dest] = out[i];
    }

    keylen -= i;
  }

  return key;
}
/*
 * Hashing
 */


function _hash192(pass, salt, rounds, out) {
  var state = new blowfish();
  var cdata = new Uint32Array(BCRYPT_BLOCKS192);
  state.init(pass, salt);
  var r = 2 ** rounds;

  for (var i = 0; i < r; i++) {
    state.expand0state(pass);
    state.expand0state(salt);
  }

  for (var _i2 = 0; _i2 < BCRYPT_BLOCKS192; _i2++) {
    cdata[_i2] = state.stream2word(CIPHERTEXT192);
  }

  for (var _i3 = 0; _i3 < 64; _i3++) {
    state.enc(cdata);
  }

  for (var _i4 = 0; _i4 < BCRYPT_BLOCKS192; _i4++) {
    out[4 * _i4 + 0] = cdata[_i4] >>> 24;
    out[4 * _i4 + 1] = cdata[_i4] >>> 16;
    out[4 * _i4 + 2] = cdata[_i4] >>> 8;
    out[4 * _i4 + 3] = cdata[_i4];
  }

  return out;
}

function _hash256(pass, salt, rounds, out) {
  var state = new blowfish();
  var cdata = new Uint32Array(BCRYPT_BLOCKS256);
  state.init(pass, salt);
  var r = 2 ** rounds;

  for (var i = 0; i < r; i++) {
    state.expand0state(salt);
    state.expand0state(pass);
  }

  for (var _i5 = 0; _i5 < BCRYPT_BLOCKS256; _i5++) {
    cdata[_i5] = state.stream2word(CIPHERTEXT256);
  }

  for (var _i6 = 0; _i6 < 64; _i6++) {
    state.enc(cdata);
  }

  for (var _i7 = 0; _i7 < BCRYPT_BLOCKS256; _i7++) {
    out[4 * _i7 + 3] = cdata[_i7] >>> 24;
    out[4 * _i7 + 2] = cdata[_i7] >>> 16;
    out[4 * _i7 + 1] = cdata[_i7] >>> 8;
    out[4 * _i7 + 0] = cdata[_i7];
  }

  return out;
}
/*
 * Encoding
 */


function encode(minor, rounds, salt, hash) {
  assert_1(typeof minor === 'string');
  assert_1(rounds >>> 0 === rounds);
  assert_1(Buffer.isBuffer(salt));
  assert_1(Buffer.isBuffer(hash));
  assert_1(minor === 'a' || minor === 'b');
  assert_1(rounds >= 4 && rounds <= 31);
  assert_1(salt.length === BCRYPT_SALT192);
  assert_1(hash.length === BCRYPT_HASH192);
  var logr = rounds.toString(10);
  if (rounds < 10) logr = '0' + logr;
  return "$2".concat(minor, "$").concat(logr, "$").concat(encode64(salt)).concat(encode64(hash));
}

function decode(str) {
  assert_1(typeof str === 'string');
  if (str.length < 46) throw new Error('Invalid bcrypt string.');
  if (str[0] !== '$' || str[1] !== '2') throw new Error('Invalid major version.');
  var minor = str[2];

  switch (minor) {
    case 'a':
    case 'b':
      break;

    default:
      throw new Error('Invalid minor version.');
  }

  if (str[3] !== '$') throw new Error('Invalid bcrypt string.');
  var p = str.charCodeAt(4) - 0x30;
  var q = str.charCodeAt(5) - 0x30;
  if (p < 0 || p > 9 || q < 0 || q > 9) throw new Error('Invalid bcrypt string.');
  var rounds = p * 10 + q;
  if (rounds < 4 || rounds > 31) throw new Error('Invalid log rounds.');
  if (str[6] !== '$') throw new Error('Invalid bcrypt string.');
  var i = 7;
  var salt, hash;
  [i, salt] = decode64(str, i, BCRYPT_SALT192);
  if (salt == null) throw new Error('Invalid salt.');
  [i, hash] = decode64(str, i, BCRYPT_HASH192);
  if (hash == null) throw new Error('Invalid hash.');
  if (i !== str.length) throw new Error('Invalid bcrypt string.');
  return [minor, rounds, salt, hash];
}
/*
 * Base64
 */


var CHARSET = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
var TABLE = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];

function encode64(data) {
  assert_1(Buffer.isBuffer(data));
  var p = 0;
  var s = '';
  var a, b;

  while (p < data.length) {
    a = data[p++];
    s += CHARSET[a >>> 2];
    a = (a & 3) << 4;

    if (p >= data.length) {
      s += CHARSET[a];
      break;
    }

    b = data[p++];
    a |= b >>> 4 & 15;
    s += CHARSET[a];
    a = (b & 0x0f) << 2;

    if (p >= data.length) {
      s += CHARSET[a];
      break;
    }

    b = data[p++];
    a |= b >>> 6 & 3;
    s += CHARSET[a];
    s += CHARSET[b & 63];
  }

  return s;
}

function decode64(s, i, len) {
  assert_1(typeof s === 'string');
  assert_1(i >>> 0 === i);
  assert_1(len >>> 0 === len);
  var data = Buffer.alloc(len);
  var p = 0;
  var a, b, c, d;

  while (p < len) {
    a = unbase64(s, i++);
    if (a === -1) return [i, null];
    b = unbase64(s, i++);
    if (b === -1) return [i, null];
    data[p++] = a << 2 | (b & 48) >>> 4;
    if (p >= len) break;
    c = unbase64(s, i++);
    if (c === -1) return [i, null];
    data[p++] = (b & 15) << 4 | (c & 60) >>> 2;
    if (p >= len) break;
    d = unbase64(s, i++);
    if (d === -1) return [i, null];
    data[p++] = (c & 3) << 6 | d;
  }

  return [i, data];
}

function unbase64(s, i) {
  if (i >= s.length) return -1;
  var ch = s.charCodeAt(i);
  if (ch & 0xff80) return -1;
  return TABLE[ch];
}
/*
 * Expose
 */


var native_1$1 = 0;
var hash192_1 = hash192;
var derive_1 = derive;
var generate_1 = generate;
var verify_1 = verify;
var hash256_1 = hash256;
var pbkdf_1 = pbkdf;
var bcrypt = {
  native: native_1$1,
  hash192: hash192_1,
  derive: derive_1,
  generate: generate_1,
  verify: verify_1,
  hash256: hash256_1,
  pbkdf: pbkdf_1
};

/*
 * Constants
 */


var FINALIZED$2 = 0x80000000;
var IV = new Uint32Array([0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19]);
var SIGMA = new Uint8Array([0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x1c, 0x14, 0x08, 0x10, 0x12, 0x1e, 0x1a, 0x0c, 0x02, 0x18, 0x00, 0x04, 0x16, 0x0e, 0x0a, 0x06, 0x16, 0x10, 0x18, 0x00, 0x0a, 0x04, 0x1e, 0x1a, 0x14, 0x1c, 0x06, 0x0c, 0x0e, 0x02, 0x12, 0x08, 0x0e, 0x12, 0x06, 0x02, 0x1a, 0x18, 0x16, 0x1c, 0x04, 0x0c, 0x0a, 0x14, 0x08, 0x00, 0x1e, 0x10, 0x12, 0x00, 0x0a, 0x0e, 0x04, 0x08, 0x14, 0x1e, 0x1c, 0x02, 0x16, 0x18, 0x0c, 0x10, 0x06, 0x1a, 0x04, 0x18, 0x0c, 0x14, 0x00, 0x16, 0x10, 0x06, 0x08, 0x1a, 0x0e, 0x0a, 0x1e, 0x1c, 0x02, 0x12, 0x18, 0x0a, 0x02, 0x1e, 0x1c, 0x1a, 0x08, 0x14, 0x00, 0x0e, 0x0c, 0x06, 0x12, 0x04, 0x10, 0x16, 0x1a, 0x16, 0x0e, 0x1c, 0x18, 0x02, 0x06, 0x12, 0x0a, 0x00, 0x1e, 0x08, 0x10, 0x0c, 0x04, 0x14, 0x0c, 0x1e, 0x1c, 0x12, 0x16, 0x06, 0x00, 0x10, 0x18, 0x04, 0x1a, 0x0e, 0x02, 0x08, 0x14, 0x0a, 0x14, 0x04, 0x10, 0x08, 0x0e, 0x0c, 0x02, 0x0a, 0x1e, 0x16, 0x12, 0x1c, 0x06, 0x18, 0x1a, 0x00, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x1c, 0x14, 0x08, 0x10, 0x12, 0x1e, 0x1a, 0x0c, 0x02, 0x18, 0x00, 0x04, 0x16, 0x0e, 0x0a, 0x06]);
var V = new Uint32Array(32);
var M = new Uint32Array(32);
var BLOCK = Buffer.alloc(128, 0x00);
/**
 * BLAKE2b
 */

class BLAKE2b {
  /**
   * Create a BLAKE2b context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(16);
    this.block = Buffer.allocUnsafe(128);
    this.size = 32;
    this.count = 0;
    this.pos = FINALIZED$2;
  }

  init() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(size >>> 0 === size);
    assert_1(!key || Buffer.isBuffer(key));
    if (size === 0 || size > 64) throw new Error('Bad output length.');
    if (key && key.length > 64) throw new Error('Bad key length.');
    var klen = key ? key.length : 0;

    for (var i = 0; i < 16; i++) {
      this.state[i] = IV[i];
    }

    this.size = size;
    this.count = 0;
    this.pos = 0;
    this.state[0] ^= 0x01010000 ^ klen << 8 ^ this.size;

    if (klen > 0) {
      var block = BLOCK;
      key.copy(block, 0);
      this.update(block);
      block.fill(0x00, 0, key.length);
    }

    return this;
  }

  update(data) {
    assert_1(Buffer.isBuffer(data));
    assert_1(!(this.pos & FINALIZED$2), 'Context already finalized.');
    var off = 0;
    var len = data.length;

    if (len > 0) {
      var left = this.pos;
      var fill = 128 - left;

      if (len > fill) {
        this.pos = 0;
        data.copy(this.block, left, off, off + fill);
        this.count += 128;
        this.compress(this.block, 0, false);
        off += fill;
        len -= fill;

        while (len > 128) {
          this.count += 128;
          this.compress(data, off, false);
          off += 128;
          len -= 128;
        }
      }

      data.copy(this.block, this.pos, off, off + len);
      this.pos += len;
    }

    return this;
  }

  final() {
    assert_1(!(this.pos & FINALIZED$2), 'Context already finalized.');
    this.count += this.pos;
    this.block.fill(0, this.pos, 128);
    this.compress(this.block, 0, true);
    this.pos = FINALIZED$2;
    var out = Buffer.allocUnsafe(this.size);

    for (var i = 0; i < this.size; i++) {
      out[i] = this.state[i >>> 2] >>> 8 * (i & 3);
    }

    for (var _i = 0; _i < 16; _i++) {
      this.state[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 128; _i2++) {
      this.block[_i2] = 0;
    }

    return out;
  }

  compress(block, off, last) {
    for (var i = 0; i < 16; i++) {
      V[i] = this.state[i];
      V[i + 16] = IV[i];
    } // uint128


    V[24] ^= this.count;
    V[25] ^= this.count * (1 / 0x100000000);
    V[26] ^= 0;
    V[27] ^= 0;

    if (last) {
      // last block
      V[28] ^= -1;
      V[29] ^= -1; // last node

      V[29] ^= 0;
      V[30] ^= 0;
    }

    for (var _i3 = 0; _i3 < 32; _i3++) {
      M[_i3] = readU32$4(block, off);
      off += 4;
    }

    for (var _i4 = 0; _i4 < 12; _i4++) {
      G(V, M, 0, 8, 16, 24, SIGMA[_i4 * 16 + 0], SIGMA[_i4 * 16 + 1]);
      G(V, M, 2, 10, 18, 26, SIGMA[_i4 * 16 + 2], SIGMA[_i4 * 16 + 3]);
      G(V, M, 4, 12, 20, 28, SIGMA[_i4 * 16 + 4], SIGMA[_i4 * 16 + 5]);
      G(V, M, 6, 14, 22, 30, SIGMA[_i4 * 16 + 6], SIGMA[_i4 * 16 + 7]);
      G(V, M, 0, 10, 20, 30, SIGMA[_i4 * 16 + 8], SIGMA[_i4 * 16 + 9]);
      G(V, M, 2, 12, 22, 24, SIGMA[_i4 * 16 + 10], SIGMA[_i4 * 16 + 11]);
      G(V, M, 4, 14, 16, 26, SIGMA[_i4 * 16 + 12], SIGMA[_i4 * 16 + 13]);
      G(V, M, 6, 8, 18, 28, SIGMA[_i4 * 16 + 14], SIGMA[_i4 * 16 + 15]);
    }

    for (var _i5 = 0; _i5 < 16; _i5++) {
      this.state[_i5] ^= V[_i5] ^ V[_i5 + 16];
    }
  }

  static hash() {
    return new BLAKE2b();
  }

  static hmac() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;
    return new hmac(BLAKE2b, 128, [size]);
  }

  static digest(data) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var ctx = BLAKE2b.ctx;
    ctx.init(size, key);
    ctx.update(data);
    return ctx.final();
  }

  static root(left, right) {
    var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
    assert_1(Buffer.isBuffer(left) && left.length === size);
    assert_1(Buffer.isBuffer(right) && right.length === size);
    var ctx = BLAKE2b.ctx;
    ctx.init(size);
    ctx.update(left);
    ctx.update(right);
    return ctx.final();
  }

  static multi(x, y, z) {
    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;
    var ctx = BLAKE2b.ctx;
    ctx.init(size);
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
    return BLAKE2b.hmac(size).init(key).update(data).final();
  }

}
/*
 * Static
 */


BLAKE2b.native = 0;
BLAKE2b.id = 'BLAKE2B256';
BLAKE2b.size = 32;
BLAKE2b.bits = 256;
BLAKE2b.blockSize = 128;
BLAKE2b.zero = Buffer.alloc(32, 0x00);
BLAKE2b.ctx = new BLAKE2b();
/*
 * Helpers
 */

function sum64$1(v, a, b) {
  var o0 = v[a] + v[b];
  var o1 = v[a + 1] + v[b + 1];
  if (o0 >= 0x100000000) o1 += 1;
  v[a] = o0;
  v[a + 1] = o1;
}

function sum64c(v, a, b0, b1) {
  var o0 = v[a] + b0;
  var o1 = v[a + 1] + b1;
  if (o0 >= 0x100000000) o1 += 1;
  v[a] = o0;
  v[a + 1] = o1;
}

function readU32$4(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function G(v, m, a, b, c, d, ix, iy) {
  var x0 = m[ix];
  var x1 = m[ix + 1];
  var y0 = m[iy];
  var y1 = m[iy + 1];
  var xor0, xor1; // v[a,a+1] += v[b,b+1]

  sum64$1(v, a, b); // v[a, a+1] += x

  sum64c(v, a, x0, x1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotr 32

  xor0 = v[d] ^ v[a];
  xor1 = v[d + 1] ^ v[a + 1];
  v[d] = xor1;
  v[d + 1] = xor0;
  sum64$1(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotr 24

  xor0 = v[b] ^ v[c];
  xor1 = v[b + 1] ^ v[c + 1];
  v[b] = xor0 >>> 24 ^ xor1 << 8;
  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
  sum64$1(v, a, b);
  sum64c(v, a, y0, y1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotr 16

  xor0 = v[d] ^ v[a];
  xor1 = v[d + 1] ^ v[a + 1];
  v[d] = xor0 >>> 16 ^ xor1 << 16;
  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
  sum64$1(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotr 63

  xor0 = v[b] ^ v[c];
  xor1 = v[b + 1] ^ v[c + 1];
  v[b] = xor1 >>> 31 ^ xor0 << 1;
  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
}
/*
 * Expose
 */


var blake2b = BLAKE2b;

var blake2bBrowser = blake2b;

/**
 * BLAKE2b160
 */


class BLAKE2b160 extends blake2bBrowser {
  /**
   * Create a BLAKE2b160 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(20, key);
  }

  static hash() {
    return new BLAKE2b160();
  }

  static hmac() {
    return super.hmac(20);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 20, key);
  }

  static root(left, right) {
    return super.root(left, right, 20);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 20);
  }

  static mac(data, key) {
    return super.mac(data, key, 20);
  }

}
/*
 * Static
 */


BLAKE2b160.native = blake2bBrowser.native;
BLAKE2b160.id = 'BLAKE2B160';
BLAKE2b160.size = 20;
BLAKE2b160.bits = 160;
BLAKE2b160.blockSize = 128;
BLAKE2b160.zero = Buffer.alloc(20, 0x00);
BLAKE2b160.ctx = new BLAKE2b160();
/*
 * Expose
 */

var blake2b160 = BLAKE2b160;

/**
 * BLAKE2b256
 */


class BLAKE2b256 extends blake2bBrowser {
  /**
   * Create a BLAKE2b256 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(32, key);
  }

  static hash() {
    return new BLAKE2b256();
  }

  static hmac() {
    return super.hmac(32);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 32, key);
  }

  static root(left, right) {
    return super.root(left, right, 32);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 32);
  }

  static mac(data, key) {
    return super.mac(data, key, 32);
  }

}
/*
 * Static
 */


BLAKE2b256.native = blake2bBrowser.native;
BLAKE2b256.id = 'BLAKE2B256';
BLAKE2b256.size = 32;
BLAKE2b256.bits = 256;
BLAKE2b256.blockSize = 128;
BLAKE2b256.zero = Buffer.alloc(32, 0x00);
BLAKE2b256.ctx = new BLAKE2b256();
/*
 * Expose
 */

var blake2b256 = BLAKE2b256;

/**
 * BLAKE2b384
 */


class BLAKE2b384 extends blake2bBrowser {
  /**
   * Create a BLAKE2b384 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(48, key);
  }

  static hash() {
    return new BLAKE2b384();
  }

  static hmac() {
    return super.hmac(48);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 48, key);
  }

  static root(left, right) {
    return super.root(left, right, 48);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 48);
  }

  static mac(data, key) {
    return super.mac(data, key, 48);
  }

}
/*
 * Static
 */


BLAKE2b384.native = blake2bBrowser.native;
BLAKE2b384.id = 'BLAKE2B384';
BLAKE2b384.size = 48;
BLAKE2b384.bits = 384;
BLAKE2b384.blockSize = 128;
BLAKE2b384.zero = Buffer.alloc(48, 0x00);
BLAKE2b384.ctx = new BLAKE2b384();
/*
 * Expose
 */

var blake2b384 = BLAKE2b384;

/**
 * BLAKE2b512
 */


class BLAKE2b512 extends blake2bBrowser {
  /**
   * Create a BLAKE2b512 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(64, key);
  }

  static hash() {
    return new BLAKE2b512();
  }

  static hmac() {
    return super.hmac(64);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 64, key);
  }

  static root(left, right) {
    return super.root(left, right, 64);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 64);
  }

  static mac(data, key) {
    return super.mac(data, key, 64);
  }

}
/*
 * Static
 */


BLAKE2b512.native = blake2bBrowser.native;
BLAKE2b512.id = 'BLAKE2B512';
BLAKE2b512.size = 64;
BLAKE2b512.bits = 512;
BLAKE2b512.blockSize = 128;
BLAKE2b512.zero = Buffer.alloc(64, 0x00);
BLAKE2b512.ctx = new BLAKE2b512();
/*
 * Expose
 */

var blake2b512 = BLAKE2b512;

/*
 * Constants
 */


var FINALIZED$3 = 0x80000000;
var IV$1 = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);
var SIGMA$1 = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x0e, 0x0a, 0x04, 0x08, 0x09, 0x0f, 0x0d, 0x06, 0x01, 0x0c, 0x00, 0x02, 0x0b, 0x07, 0x05, 0x03, 0x0b, 0x08, 0x0c, 0x00, 0x05, 0x02, 0x0f, 0x0d, 0x0a, 0x0e, 0x03, 0x06, 0x07, 0x01, 0x09, 0x04, 0x07, 0x09, 0x03, 0x01, 0x0d, 0x0c, 0x0b, 0x0e, 0x02, 0x06, 0x05, 0x0a, 0x04, 0x00, 0x0f, 0x08, 0x09, 0x00, 0x05, 0x07, 0x02, 0x04, 0x0a, 0x0f, 0x0e, 0x01, 0x0b, 0x0c, 0x06, 0x08, 0x03, 0x0d, 0x02, 0x0c, 0x06, 0x0a, 0x00, 0x0b, 0x08, 0x03, 0x04, 0x0d, 0x07, 0x05, 0x0f, 0x0e, 0x01, 0x09, 0x0c, 0x05, 0x01, 0x0f, 0x0e, 0x0d, 0x04, 0x0a, 0x00, 0x07, 0x06, 0x03, 0x09, 0x02, 0x08, 0x0b, 0x0d, 0x0b, 0x07, 0x0e, 0x0c, 0x01, 0x03, 0x09, 0x05, 0x00, 0x0f, 0x04, 0x08, 0x06, 0x02, 0x0a, 0x06, 0x0f, 0x0e, 0x09, 0x0b, 0x03, 0x00, 0x08, 0x0c, 0x02, 0x0d, 0x07, 0x01, 0x04, 0x0a, 0x05, 0x0a, 0x02, 0x08, 0x04, 0x07, 0x06, 0x01, 0x05, 0x0f, 0x0b, 0x09, 0x0e, 0x03, 0x0c, 0x0d, 0x00]);
var V$1 = new Uint32Array(16);
var M$1 = new Uint32Array(16);
var BLOCK$1 = Buffer.alloc(64, 0x00);
/**
 * BLAKE2s
 */

class BLAKE2s {
  /**
   * Create a BLAKE2s context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(8);
    this.block = Buffer.allocUnsafe(64);
    this.size = 32;
    this.count = 0;
    this.pos = FINALIZED$3;
  }

  init() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(size >>> 0 === size);
    assert_1(!key || Buffer.isBuffer(key));
    if (size === 0 || size > 32) throw new Error('Bad output length.');
    if (key && key.length > 32) throw new Error('Bad key length.');
    var klen = key ? key.length : 0;

    for (var i = 0; i < 8; i++) {
      this.state[i] = IV$1[i];
    }

    this.size = size;
    this.count = 0;
    this.pos = 0;
    this.state[0] ^= 0x01010000 ^ klen << 8 ^ this.size;

    if (klen > 0) {
      var block = BLOCK$1;
      key.copy(block, 0);
      this.update(block);
      block.fill(0x00, 0, key.length);
    }

    return this;
  }

  update(data) {
    assert_1(Buffer.isBuffer(data));
    assert_1(!(this.pos & FINALIZED$3), 'Context already finalized.');
    var off = 0;
    var len = data.length;

    if (len > 0) {
      var left = this.pos;
      var fill = 64 - left;

      if (len > fill) {
        this.pos = 0;
        data.copy(this.block, left, off, off + fill);
        this.count += 64;
        this.compress(this.block, 0, false);
        off += fill;
        len -= fill;

        while (len > 64) {
          this.count += 64;
          this.compress(data, off, false);
          off += 64;
          len -= 64;
        }
      }

      data.copy(this.block, this.pos, off, off + len);
      this.pos += len;
    }

    return this;
  }

  final() {
    assert_1(!(this.pos & FINALIZED$3), 'Context already finalized.');
    this.count += this.pos;
    this.block.fill(0, this.pos, 64);
    this.compress(this.block, 0, true);
    this.pos = FINALIZED$3;
    var out = Buffer.allocUnsafe(this.size);

    for (var i = 0; i < this.size; i++) {
      out[i] = this.state[i >>> 2] >>> 8 * (i & 3);
    }

    for (var _i = 0; _i < 8; _i++) {
      this.state[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    return out;
  }

  compress(block, off, last) {
    for (var i = 0; i < 8; i++) {
      V$1[i] = this.state[i];
      V$1[i + 8] = IV$1[i];
    } // uint64


    V$1[12] ^= this.count;
    V$1[13] ^= this.count * (1 / 0x100000000);

    if (last) {
      // last block
      V$1[14] ^= -1; // last node

      V$1[15] ^= 0;
    }

    for (var _i3 = 0; _i3 < 16; _i3++) {
      M$1[_i3] = readU32$5(block, off);
      off += 4;
    }

    for (var _i4 = 0; _i4 < 10; _i4++) {
      G$1(V$1, M$1, 0, 4, 8, 12, SIGMA$1[_i4 * 16 + 0], SIGMA$1[_i4 * 16 + 1]);
      G$1(V$1, M$1, 1, 5, 9, 13, SIGMA$1[_i4 * 16 + 2], SIGMA$1[_i4 * 16 + 3]);
      G$1(V$1, M$1, 2, 6, 10, 14, SIGMA$1[_i4 * 16 + 4], SIGMA$1[_i4 * 16 + 5]);
      G$1(V$1, M$1, 3, 7, 11, 15, SIGMA$1[_i4 * 16 + 6], SIGMA$1[_i4 * 16 + 7]);
      G$1(V$1, M$1, 0, 5, 10, 15, SIGMA$1[_i4 * 16 + 8], SIGMA$1[_i4 * 16 + 9]);
      G$1(V$1, M$1, 1, 6, 11, 12, SIGMA$1[_i4 * 16 + 10], SIGMA$1[_i4 * 16 + 11]);
      G$1(V$1, M$1, 2, 7, 8, 13, SIGMA$1[_i4 * 16 + 12], SIGMA$1[_i4 * 16 + 13]);
      G$1(V$1, M$1, 3, 4, 9, 14, SIGMA$1[_i4 * 16 + 14], SIGMA$1[_i4 * 16 + 15]);
    }

    for (var _i5 = 0; _i5 < 8; _i5++) {
      this.state[_i5] ^= V$1[_i5] ^ V$1[_i5 + 8];
    }
  }

  static hash() {
    return new BLAKE2s();
  }

  static hmac() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;
    return new hmac(BLAKE2s, 64, [size]);
  }

  static digest(data) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var ctx = BLAKE2s.ctx;
    ctx.init(size, key);
    ctx.update(data);
    return ctx.final();
  }

  static root(left, right) {
    var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
    assert_1(Buffer.isBuffer(left) && left.length === size);
    assert_1(Buffer.isBuffer(right) && right.length === size);
    var ctx = BLAKE2s.ctx;
    ctx.init(size);
    ctx.update(left);
    ctx.update(right);
    return ctx.final();
  }

  static multi(x, y, z) {
    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;
    var ctx = BLAKE2s.ctx;
    ctx.init(size);
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;
    return BLAKE2s.hmac(size).init(key).update(data).final();
  }

}
/*
 * Static
 */


BLAKE2s.native = 0;
BLAKE2s.id = 'BLAKE2S256';
BLAKE2s.size = 32;
BLAKE2s.bits = 256;
BLAKE2s.blockSize = 64;
BLAKE2s.zero = Buffer.alloc(32, 0x00);
BLAKE2s.ctx = new BLAKE2s();
/*
 * Helpers
 */

function rotr32(x, y) {
  return x >>> y ^ x << 32 - y;
}

function readU32$5(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function G$1(v, m, a, b, c, d, ix, iy) {
  var x = m[ix];
  var y = m[iy];
  v[a] = v[a] + v[b] + x;
  v[d] = rotr32(v[d] ^ v[a], 16);
  v[c] = v[c] + v[d];
  v[b] = rotr32(v[b] ^ v[c], 12);
  v[a] = v[a] + v[b] + y;
  v[d] = rotr32(v[d] ^ v[a], 8);
  v[c] = v[c] + v[d];
  v[b] = rotr32(v[b] ^ v[c], 7);
}
/*
 * Expose
 */


var blake2s = BLAKE2s;

var blake2sBrowser = blake2s;

/**
 * BLAKE2s128
 */


class BLAKE2s128 extends blake2sBrowser {
  /**
   * Create a BLAKE2s128 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(16, key);
  }

  static hash() {
    return new BLAKE2s128();
  }

  static hmac() {
    return super.hmac(16);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 16, key);
  }

  static root(left, right) {
    return super.root(left, right, 16);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 16);
  }

  static mac(data, key) {
    return super.mac(data, key, 16);
  }

}
/*
 * Static
 */


BLAKE2s128.native = blake2sBrowser.native;
BLAKE2s128.id = 'BLAKE2S128';
BLAKE2s128.size = 16;
BLAKE2s128.bits = 128;
BLAKE2s128.blockSize = 64;
BLAKE2s128.zero = Buffer.alloc(16, 0x00);
BLAKE2s128.ctx = new BLAKE2s128();
/*
 * Expose
 */

var blake2s128 = BLAKE2s128;

/**
 * BLAKE2s160
 */


class BLAKE2s160 extends blake2sBrowser {
  /**
   * Create a BLAKE2s160 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(20, key);
  }

  static hash() {
    return new BLAKE2s160();
  }

  static hmac() {
    return super.hmac(20);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 20, key);
  }

  static root(left, right) {
    return super.root(left, right, 20);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 20);
  }

  static mac(data, key) {
    return super.mac(data, key, 20);
  }

}
/*
 * Static
 */


BLAKE2s160.native = blake2sBrowser.native;
BLAKE2s160.id = 'BLAKE2S160';
BLAKE2s160.size = 20;
BLAKE2s160.bits = 160;
BLAKE2s160.blockSize = 64;
BLAKE2s160.zero = Buffer.alloc(20, 0x00);
BLAKE2s160.ctx = new BLAKE2s160();
/*
 * Expose
 */

var blake2s160 = BLAKE2s160;

/**
 * BLAKE2s224
 */


class BLAKE2s224 extends blake2sBrowser {
  /**
   * Create a BLAKE2s224 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(28, key);
  }

  static hash() {
    return new BLAKE2s224();
  }

  static hmac() {
    return super.hmac(28);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 28, key);
  }

  static root(left, right) {
    return super.root(left, right, 28);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 28);
  }

  static mac(data, key) {
    return super.mac(data, key, 28);
  }

}
/*
 * Static
 */


BLAKE2s224.native = blake2sBrowser.native;
BLAKE2s224.id = 'BLAKE2S224';
BLAKE2s224.size = 28;
BLAKE2s224.bits = 224;
BLAKE2s224.blockSize = 64;
BLAKE2s224.zero = Buffer.alloc(28, 0x00);
BLAKE2s224.ctx = new BLAKE2s224();
/*
 * Expose
 */

var blake2s224 = BLAKE2s224;

/**
 * BLAKE2s256
 */


class BLAKE2s256 extends blake2sBrowser {
  /**
   * Create a BLAKE2s256 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return super.init(32, key);
  }

  static hash() {
    return new BLAKE2s256();
  }

  static hmac() {
    return super.hmac(32);
  }

  static digest(data) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return super.digest(data, 32, key);
  }

  static root(left, right) {
    return super.root(left, right, 32);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 32);
  }

  static mac(data, key) {
    return super.mac(data, key, 32);
  }

}
/*
 * Static
 */


BLAKE2s256.native = blake2sBrowser.native;
BLAKE2s256.id = 'BLAKE2S256';
BLAKE2s256.size = 32;
BLAKE2s256.bits = 256;
BLAKE2s256.blockSize = 64;
BLAKE2s256.zero = Buffer.alloc(32, 0x00);
BLAKE2s256.ctx = new BLAKE2s256();
/*
 * Expose
 */

var blake2s256 = BLAKE2s256;

/*!
 * custom.js - custom inspect symbol for bcrypto
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 */

var custom = 'inspect';
var customBrowser = {
  custom: custom
};

var {
  custom: custom$1
} = customBrowser;
/*
 * Constants
 */

var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
var groupSizes = [0x00, 0x19, 0x10, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05];
var groupBases = [0x00000000, 0x02000000, 0x0290d741, 0x01000000, 0x02e90edd, 0x039aa400, 0x0267bf47, 0x01000000, 0x0290d741, 0x00989680, 0x012959c3, 0x0222c000, 0x03bd7765, 0x0072e440, 0x00adcea1, 0x01000000, 0x01704f61, 0x0206fc40, 0x02cddcf9, 0x03d09000, 0x003e5185, 0x004ea360, 0x006235f7, 0x00798000, 0x009502f9, 0x00b54ba0, 0x00daf26b, 0x01069c00, 0x0138f9ad, 0x0172c9e0, 0x01b4d89f, 0x02000000, 0x025528a1, 0x02b54a20, 0x03216b93, 0x039aa400];
var primes = {
  p192: null,
  p224: null,
  p521: null,
  k256: null,
  p25519: null,
  p448: null
};
var modes$1 = {
  NONE: 0,
  QUO: 1,
  REM: 2,
  BOTH: 3,
  EUCLID: 4,
  ALL: 7
};
/**
 * BN
 */

class BN {
  constructor(num, base, endian) {
    this.words = [0];
    this.length = 1;
    this.negative = 0;
    this.red = null;
    this.from(num, base, endian);
  }
  /*
   * Addition
   */


  iadd(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum'); // negative + positive

    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      this.isub(num);
      this.negative ^= 1;
      return this._normalize();
    } // positive + negative


    if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      var r = this.isub(num);
      num.negative = 1;
      return r._normalize();
    } // a.length > b.length


    var a = this;
    var b = num;
    if (a.length < b.length) [a, b] = [b, a];
    var carry = 0;
    var i = 0;
    if (a !== this) this._alloc(a.length);

    for (; i < b.length; i++) {
      var _r = (a.words[i] | 0) + (b.words[i] | 0) + carry;

      this.words[i] = _r & 0x3ffffff;
      carry = _r >>> 26;
    }

    for (; carry !== 0 && i < a.length; i++) {
      var _r2 = (a.words[i] | 0) + carry;

      this.words[i] = _r2 & 0x3ffffff;
      carry = _r2 >>> 26;
    }

    this.length = a.length;

    if (carry !== 0) {
      this._alloc(this.length + 1);

      this.words[this.length++] = carry;
    } else if (a !== this) {
      // Copy the rest of the words.
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    } // Note: we shouldn't need to strip here.


    return this;
  }

  iaddn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    if (num < 0) return this.isubn(-num); // Possible sign change.

    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    } // Add without checks.


    return this._iaddn(num);
  }

  _iaddn(num) {
    this.words[0] += num;
    if (this.words[0] < 0x4000000) return this; // Carry.

    var i = 0;

    this._alloc(this.length + 1);

    this.words[this.length] = 0;

    for (; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      this.words[i + 1] += 1;
    }

    this.length = Math.max(this.length, i + 1); // Note: we shouldn't need to strip here.

    return this;
  }

  add(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');

    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      var res = this.sub(num);
      num.negative ^= 1;
      return res;
    }

    if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;

      var _res = num.sub(this);

      this.negative = 1;
      return _res;
    }

    if (this.length > num.length) return this.clone().iadd(num);
    return num.clone().iadd(this);
  }

  addn(num) {
    return this.clone().iaddn(num);
  }
  /*
   * Subtraction
   */


  isub(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum'); // this - (-num) = this + num

    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normalize();
    } // -this - num = -(this + num)


    if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normalize();
    } // At this point both numbers are positive.


    var cmp = this.ucmp(num); // Optimization - zeroify.

    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    } // a > b


    var a = this;
    var b = num;
    if (cmp < 0) [a, b] = [b, a];
    var carry = 0;
    var i = 0;
    if (a !== this) this._alloc(a.length);

    for (; i < b.length; i++) {
      var _r3 = (a.words[i] | 0) - (b.words[i] | 0) + carry;

      carry = _r3 >> 26;
      this.words[i] = _r3 & 0x3ffffff;
    }

    for (; carry !== 0 && i < a.length; i++) {
      var _r4 = (a.words[i] | 0) + carry;

      carry = _r4 >> 26;
      this.words[i] = _r4 & 0x3ffffff;
    } // Copy rest of the words.


    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);
    if (a !== this) this.negative = 1;
    return this._strip();
  }

  isubn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;
    if (this.words[0] >= 0) return this;

    if (this.length === 1) {
      this.words[0] = -this.words[0];
      this.negative = 1;
      return this;
    } // Carry.


    this._alloc(this.length + 1);

    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
      this.words[i] += 0x4000000;
      this.words[i + 1] -= 1;
    }

    this.words[this.length] = 0;
    return this._strip();
  }

  sub(num) {
    return this.clone().isub(num);
  }

  subn(num) {
    return this.clone().isubn(num);
  }
  /*
   * Multiplication Engine
   */


  _mul(num, out) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    enforce$1(BN.isBN(out), 'out', 'bignum');
    if (this.length === 10 && num.length === 10) return comb10MulTo(this, num, out);
    var len = this.length + num.length;
    if (len < 63) return smallMulTo(this, num, out);
    return bigMulTo(this, num, out);
  }
  /*
   * Multiplication
   */


  imul(num) {
    return this.mul(num)._move(this);
  }

  imuln(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    var neg = num < 0 | 0;
    if (neg) num = -num; // Carry.

    var carry = 0;

    for (var i = 0; i < this.length; i++) {
      var w = this.words[i] * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0;
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    this.negative ^= neg;

    if (carry !== 0) {
      this._alloc(this.length + 1);

      this.words[this.length++] = carry;
    } else {
      this._strip();
    }

    return this;
  }

  mul(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var len = this.length + num.length;
    var out = new BN();
    out.words = new Array(len);

    for (var i = 0; i < len; i++) {
      out.words[i] = 0;
    }

    return this._mul(num, out);
  }

  muln(num) {
    return this.clone().imuln(num);
  }
  /*
   * Division Engine
   */


  _div(num, flags) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    assert$2((flags & modes$1.ALL) === flags);
    assert$2(flags !== modes$1.NONE);
    var a = this;
    var b = num;
    nonzero(!b.isZero());
    if (a.isZero()) return [new BN(0), new BN(0)];
    var as = a.negative;
    var bs = b.negative;
    a.negative = 0;
    b.negative = 0;
    var q = null;
    var r = null;

    if (a.length < b.length || a.cmp(b) < 0) {
      q = new BN(0);
      r = a.clone();
    } else if (b.length === 1) {
      if (flags & modes$1.QUO) q = a.quon(b.words[0]);
      if (flags & modes$1.REM) r = a.remn(b.words[0]);
    } else {
      [q, r] = a._wordDiv(b, flags);
    }

    a.negative = as;
    b.negative = bs;

    if (flags & modes$1.QUO) {
      q.negative = a.negative ^ b.negative;

      q._normalize();
    }

    if (flags & modes$1.REM) {
      r.negative = a.negative;

      r._normalize();
    }

    if (flags & modes$1.EUCLID) {
      if (flags & modes$1.QUO) {
        assert$2((flags & modes$1.REM) !== 0);

        if (r.negative !== 0) {
          if (b.negative !== 0) q.iaddn(1);else q.isubn(1);
        }
      }

      if (flags & modes$1.REM) {
        if (r.negative !== 0) {
          if (b.negative !== 0) r.isub(b);else r.iadd(b);
        }
      }
    }

    return [q, r];
  }

  _wordDiv(num, flags) {
    var shift = this.length - num.length;
    var a = this.clone();
    var b = num; // Normalize.

    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = countBits(bhi);
    shift = 26 - bhiBits;

    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    } // Initialize quotient.


    var m = a.length - b.length;
    assert$2(m >= 0);
    var q = null;

    if (flags & modes$1.QUO) {
      q = new BN(0);
      q.length = m + 1;
      q.words = new Array(q.length);

      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);

    if (diff.negative === 0) {
      a = diff;
      if (q) q.words[m] = 1;
    }

    for (var j = m - 1; j >= 0; j--) {
      var ahi = a.words[b.length + j];
      var alo = a.words[b.length + j - 1];
      var qj = Math.min((ahi * 0x4000000 + alo) / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);

      while (a.negative !== 0) {
        qj -= 1;
        a.negative = 0;

        a._ishlnsubmul(b, 1, j);

        if (!a.isZero()) a.negative ^= 1;
      }

      if (q) q.words[j] = qj;
    }

    if (q) q._strip();

    a._strip(); // Denormalize.


    if (flags & modes$1.REM && shift !== 0) a.iushrn(shift);
    return [q, a];
  }

  _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;

    this._expand(len);

    var carry = 0;
    var i = 0;
    var w;

    for (; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = num.words[i] * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }

    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip(); // Subtraction overflow.

    assert$2(carry === -1);
    carry = 0;

    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }

    this.negative = 1;
    return this._strip();
  }
  /*
   * Truncation Division + Modulo
   */


  quorem(num) {
    return this._div(num, modes$1.BOTH);
  }
  /*
   * Truncation Division
   */


  iquo(num) {
    return this.quo(num)._move(this);
  }

  iquon(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    nonzero(num !== 0);
    var neg = num < 0 | 0;
    if (neg) num = -num;
    var carry = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    this.negative ^= neg;
    return this._strip();
  }

  quo(num) {
    return this._div(num, modes$1.QUO)[0];
  }

  quon(num) {
    return this.clone().iquon(num);
  }
  /*
   * Truncation Modulo
   */


  irem(num) {
    return this.rem(num)._move(this);
  }

  iremn(num) {
    var m = this.remrn(num);
    if (m < 0) m = -m;
    this.words[0] = m;
    this.length = 1;
    return this._normalize();
  }

  rem(num) {
    return this._div(num, modes$1.REM)[1];
  }

  remn(num) {
    return this.clone().iremn(num);
  }

  remrn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    nonzero(num !== 0);
    if (num < 0) num = -num;
    var p = (1 << 26) % num;
    var acc = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return this.negative ? -acc | 0 : acc;
  }
  /*
   * Euclidean Division + Modulo
   */


  divmod(num) {
    return this._div(num, modes$1.BOTH | modes$1.EUCLID);
  }
  /*
   * Euclidean Division
   */


  idiv(num) {
    return this.div(num)._move(this);
  }

  idivn(num) {
    if (this.negative === 0) return this.iquon(num);
    var r = this.remrn(num);
    this.iquon(num);

    if (r < 0) {
      if (num < 0) this.iaddn(1);else this.isubn(1);
    }

    return this;
  }

  div(num) {
    return this._div(num, modes$1.BOTH | modes$1.EUCLID)[0];
  }

  divn(num) {
    return this.clone().idivn(num);
  }
  /*
   * Euclidean Modulo
   */


  imod(num) {
    if (this.ucmp(num) < 0) {
      if (this.negative !== 0) {
        if (num.negative !== 0) this.isub(num);else this.iadd(num);
      }

      return this;
    }

    return this.mod(num)._move(this);
  }

  imodn(num) {
    this.words[0] = this.modrn(num);
    this.length = 1;
    this.negative = 0;
    return this;
  }

  mod(num) {
    return this._div(num, modes$1.REM | modes$1.EUCLID)[1];
  }

  modn(num) {
    return this.clone().imodn(num);
  }

  modrn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    var r = this.remrn(num);

    if (r < 0) {
      if (num < 0) r -= num;else r += num;
    }

    return r;
  }
  /*
   * Round Division
   */


  divRound(num) {
    var [q, r] = this.quorem(num); // Fast case - exact division.

    if (r.isZero()) return q;
    var bit = num.words[0] & 1;
    num.iushrn(1);
    var cmp = r.ucmp(num);
    num.iushln(1);
    num.words[0] |= bit; // Round down.

    if (cmp < 0 || num.isOdd() && cmp === 0) return q; // Round up.

    if (this.negative ^ num.negative) return q.isubn(1);
    return q.iaddn(1);
  }
  /*
   * Exponentiation
   */


  ipow(num) {
    return this.pow(num)._move(this);
  }

  ipown(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    var x = this;
    var y = Math.abs(num);
    var r = new BN(1);

    while (y > 0) {
      if (y & 1) r = r.imul(x);
      y >>>= 1;
      x = x.isqr();
    }

    return r._move(this);
  }

  pow(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1); // Skip leading zeroes.

    var res = this;
    var i = 0;

    for (; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;
        res = res.mul(q);
      }
    }

    return res;
  }

  pown(num) {
    return this.clone().ipown(num);
  }

  isqr() {
    return this.imul(this);
  }

  sqr() {
    return this.mul(this);
  }

  isqrt() {
    return this.sqrt()._move(this);
  }

  sqrt() {
    range$1(this.negative === 0, 'sqrt');
    if (this.cmpn(1) <= 0) return this.clone();
    var r = new BN(1);
    r.iushln((this.bitLength() >>> 1) + 1);

    for (;;) {
      var z = this.quo(r);
      z.iadd(r);
      z.iushrn(1);
      if (z.cmp(r) >= 0) break;
      r = z;
    }

    return r;
  }

  isSquare() {
    if (this.negative !== 0) return false;
    return this.sqrt().isqr().eq(this);
  }
  /*
   * AND
   */


  iand(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var x = this;
    var y = num;
    if (x === y) return x;
    if ((x.negative | y.negative) === 0) return x.iuand(y);

    if ((x.negative & y.negative) === 1) {
      // (-x) & (-y) == ~(x-1) & ~(y-1)
      //             == ~((x-1) | (y-1))
      //             == -(((x-1) | (y-1)) + 1)
      //             == (-x+1) || (-y+1) - 1
      y.iaddn(1);
      x.iaddn(1).iuor(y).isubn(1);
      y.isubn(1);
      return x;
    } // Assume x is the positive number.


    if (x.negative !== 0) [x, y] = [y.clone(), x]; // x & (-y) == x & ~(y-1)
    //          == x & ~(y-1)
    //          == x && ~(-y+1)

    var width = x.bitLength();
    y.iaddn(1).inotn(width);
    x.iuand(y);
    y.inotn(width).isubn(1);
    return x._move(this);
  }

  iandn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    if ((this.negative | num < 0) !== 0) return this.iand(new BN(num));
    this.words[0] &= num;
    this.length = 1;
    return this;
  }

  and(num) {
    return this.clone().iand(num);
  }

  andn(num) {
    return this.clone().iandn(num);
  }

  andrn(num) {
    enforce$1(isSMI(num), 'num', 'smi');

    if ((this.negative | num < 0) !== 0) {
      var n = this.iand(new BN(num));
      if (n.length > 1) throw new RangeError('Number exceeds 26 bits.');
      return n.negative !== 0 ? -n.words[0] : n.words[0];
    }

    return this.words[0] & num;
  }
  /*
   * Unsigned AND
   */


  iuand(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    this.length = Math.min(this.length, num.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] &= num.words[i];
    }

    return this._strip();
  }

  iuandn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    this.words[0] &= Math.abs(num);
    this.length = 1;
    return this._normalize();
  }

  uand(num) {
    return this.clone().iuand(num);
  }

  uandn(num) {
    return this.clone().iuandn(num);
  }

  uandrn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    var n = this.words[0] & Math.abs(num);
    return this.negative !== 0 ? -n | 0 : n;
  }
  /*
   * OR
   */


  ior(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var x = this;
    var y = num;
    if (x === y) return x;
    if ((x.negative | y.negative) === 0) return x.iuor(y);

    if ((x.negative & y.negative) === 1) {
      // (-x) | (-y) == ~(x-1) | ~(y-1)
      //             == ~((x-1) & (y-1))
      //             == -(((x-1) & (y-1)) + 1)
      //             == ((-x+1) && (-y+1)) - 1
      y.iaddn(1);
      x.iaddn(1);
      x.iuand(y).isubn(1);
      y.isubn(1);
      return x;
    } // Assume x is the positive number.


    y = y.clone();
    if (x.negative !== 0) [x, y] = [y, x]; // x | (-y) == x | ~(y-1)
    //          == ~((y-1) & ~x)
    //          == -(((y-1) & ~x) + 1)
    //          == ((-y+1) && ~x) - 1

    y.iaddn(1);
    x.inotn(y.bitLength());
    y.iuand(x);
    y.isubn(1);
    return y._move(this);
  }

  iorn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    if ((this.negative | num < 0) !== 0) return this.ior(new BN(num));
    this.words[0] |= num;
    return this;
  }

  or(num) {
    return this.clone().ior(num);
  }

  orn(num) {
    return this.clone().iorn(num);
  }
  /*
   * Unsigned OR
   */


  iuor(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');

    this._expand(num.length);

    for (var i = 0; i < num.length; i++) {
      this.words[i] |= num.words[i];
    }

    return this._strip();
  }

  iuorn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    this.words[0] |= Math.abs(num);
    return this;
  }

  uor(num) {
    return this.clone().iuor(num);
  }

  uorn(num) {
    return this.clone().iuorn(num);
  }
  /*
   * XOR
   */


  ixor(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var x = this;
    var y = num;

    if (x === y) {
      x.words[0] = 0;
      x.length = 1;
      x.negative = 0;
      return x;
    }

    if ((x.negative | y.negative) === 0) return x.iuxor(y);

    if ((x.negative & y.negative) === 1) {
      // (-x) ^ (-y) == ~(x-1) ^ ~(y-1)
      //             == (x-1) ^ (y-1)
      //             == -((-x+1) ^^ (-y+1))
      x.iaddn(1);
      y.iaddn(1);
      x.iuxor(y);
      x.ineg();
      y.isubn(1);
      return x;
    } // Assume x is the positive number.


    if (x.negative !== 0) [x, y] = [y.clone(), x]; // x ^ (-y) == x ^ ~(y-1)
    //          == ~(x ^ (y-1))
    //          == -((x ^ (y-1)) + 1)
    //          == -((x ^^ (-y+1)) + 1)

    y.iaddn(1);
    x.iuxor(y);
    x.iaddn(1);
    x.ineg();
    y.isubn(1);
    return x._move(this);
  }

  ixorn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    if ((this.negative | num < 0) !== 0) return this.ixor(new BN(num));
    this.words[0] ^= num;
    return this;
  }

  xor(num) {
    return this.clone().ixor(num);
  }

  xorn(num) {
    return this.clone().ixorn(num);
  }
  /*
   * Unsigned XOR
   */


  iuxor(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var a = this;
    var b = num;
    if (a.length < b.length) [a, b] = [b, a];
    var i = 0;

    for (; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (a !== this) {
      this._alloc(a.length);

      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;
    return this._strip();
  }

  iuxorn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    this.words[0] ^= Math.abs(num);
    return this._normalize();
  }

  uxor(num) {
    return this.clone().iuxor(num);
  }

  uxorn(num) {
    return this.clone().iuxorn(num);
  }
  /*
   * NOT
   */


  inot() {
    if (this.negative !== 0) {
      // ~(-x) == ~(~(x-1)) == x-1
      this.ineg().isubn(1);
    } else {
      // ~x == -x-1 == -(x+1)
      this.iaddn(1).ineg();
    }

    return this;
  }

  not() {
    return this.clone().inot();
  }

  inotn(width) {
    enforce$1(isInteger(width), 'width', 'integer');
    range$1(width >= 0, 'inotn');
    var bitsLeft = width % 26;
    var bytesNeeded = Math.ceil(width / 26) | 0;
    var i = 0; // Extend the buffer with leading zeroes.

    this._expand(bytesNeeded);

    if (bitsLeft > 0) bytesNeeded -= 1; // Handle complete words.

    for (; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    } // Handle the residue.


    if (bitsLeft > 0) this.words[i] = ~this.words[i] & (1 << bitsLeft) - 1; // And remove leading zeroes.

    return this._strip();
  }

  notn(width) {
    return this.clone().inotn(width);
  }
  /*
   * Left Shift
   */


  ishl(num) {
    enforce$1(BN.isBN(num), 'bits', 'bignum');
    return this.ishln(num.toNumber());
  }

  ishln(bits) {
    return this.iushln(bits);
  }

  shl(num) {
    return this.clone().ishl(num);
  }

  shln(bits) {
    return this.clone().ishln(bits);
  }
  /*
   * Unsigned Left Shift
   */


  iushl(num) {
    enforce$1(BN.isBN(num), 'bits', 'bignum');
    return this.iushln(num.toNumber());
  }

  iushln(bits) {
    enforce$1(isInteger(bits), 'bits', 'integer');
    range$1(bits >= 0, 'iushln');
    var r = bits % 26;
    var s = (bits - r) / 26;
    var mask = (1 << r) - 1 << 26 - r;

    if (r !== 0) {
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var ncarry = this.words[i] & mask;
        var c = (this.words[i] | 0) - ncarry << r;
        this.words[i] = c | carry;
        carry = ncarry >>> 26 - r;
      }

      if (carry !== 0) {
        this._alloc(this.length + 1);

        this.words[this.length++] = carry;
      }
    }

    if (s !== 0) {
      this._alloc(this.length + s);

      for (var _i = this.length - 1; _i >= 0; _i--) {
        this.words[_i + s] = this.words[_i];
      }

      for (var _i2 = 0; _i2 < s; _i2++) {
        this.words[_i2] = 0;
      }

      this.length += s;
    }

    return this._strip();
  }

  ushl(num) {
    return this.clone().iushl(num);
  }

  ushln(bits) {
    return this.clone().iushln(bits);
  }
  /*
   * Right Shift
   */


  ishr(num) {
    enforce$1(BN.isBN(num), 'bits', 'bignum');
    return this.ishrn(num.toNumber());
  }

  ishrn(bits) {
    enforce$1(isInteger(bits), 'bits', 'integer');
    range$1(bits >= 0, 'ishrn');

    if (this.negative !== 0) {
      // (-x) >> y == ~(x-1) >> y
      //           == ~((x-1) >> y)
      //           == -(((x-1) >> y) + 1)
      this.negative = 0;
      this.isubn(1);
      this.iushrn(bits);
      this.iaddn(1);
      this.negative = 1;
      return this;
    }

    return this.iushrn(bits);
  }

  shr(num) {
    return this.clone().ishr(num);
  }

  shrn(bits) {
    return this.clone().ishrn(bits);
  }
  /*
   * Unsigned Right Shift
   */


  iushr(num) {
    enforce$1(BN.isBN(num), 'bits', 'bignum');
    return this.iushrn(num.toNumber());
  }

  iushrn(bits) {
    enforce$1(isInteger(bits), 'bits', 'integer');
    range$1(bits >= 0, 'iushrn');
    return this._split(bits, null);
  }

  _split(bits, output) {
    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = (1 << r) - 1; // Extended mode, copy masked part.

    if (output) {
      output._alloc(s);

      for (var i = 0; i < s; i++) {
        output.words[i] = this.words[i];
      }

      output.length = s;
    }

    if (s === 0) ; else if (this.length > s) {
      this.length -= s;

      for (var _i3 = 0; _i3 < this.length; _i3++) {
        this.words[_i3] = this.words[_i3 + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;

    for (var _i4 = this.length - 1; _i4 >= 0; _i4--) {
      var word = this.words[_i4] | 0;
      this.words[_i4] = carry << 26 - r | word >>> r;
      carry = word & mask;
    } // Push carried bits as a mask.


    if (output) {
      if (carry !== 0) {
        output._alloc(output.length + 1);

        output.words[output.length++] = carry;
      } else {
        if (output.length === 0) output.words[output.length++] = 0;

        output._strip();
      }
    }

    return this._strip();
  }

  ushr(num) {
    return this.clone().iushr(num);
  }

  ushrn(bits) {
    return this.clone().iushrn(bits);
  }
  /*
   * Bit Manipulation
   */


  setn(bit, val) {
    var negative = this.negative;

    if (negative !== 0) {
      this.iaddn(1);
      val = !val;
    }

    this.usetn(bit, val);
    if (negative !== 0) this.isubn(1);
    return this;
  }

  usetn(bit, val) {
    enforce$1(isInteger(bit), 'bit', 'integer');
    range$1(bit >= 0, 'setn');
    var r = bit % 26;
    var s = (bit - r) / 26;

    this._expand(s + 1);

    if (val) this.words[s] |= 1 << r;else this.words[s] &= ~(1 << r);
    return this._strip();
  }

  testn(bit) {
    enforce$1(isInteger(bit), 'bit', 'integer');
    range$1(bit >= 0, 'bit');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words.

    if (this.length <= s) return this.negative !== 0; // Check bit and return.

    var w = this.words[s];
    var val = (w & q) !== 0;

    if (this.negative !== 0) {
      if (r > 0 && w & q - 1) return !val;
      var j = s;

      while (j--) {
        if (this.words[j] > 0) return !val;
      }
    }

    return val;
  }

  utestn(bit) {
    enforce$1(isInteger(bit), 'bit', 'integer');
    range$1(bit >= 0, 'bit');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words.

    if (this.length <= s) return false; // Check bit and return.

    var w = this.words[s];
    return (w & q) !== 0;
  }

  imaskn(bits) {
    enforce$1(isInteger(bits), 'bits', 'integer');
    range$1(bits >= 0, 'imaskn');

    if (this.negative !== 0) {
      this.iaddn(1).inotn(bits + 1);
      this.negative = 0;
    }

    return this.iumaskn(bits);
  }

  maskn(bits) {
    return this.clone().imaskn(bits);
  }

  iumaskn(bits) {
    enforce$1(isInteger(bits), 'bits', 'integer');
    range$1(bits >= 0, 'iumaskn');
    var r = bits % 26;
    var s = (bits - r) / 26;
    if (this.length <= s) return this;
    if (r !== 0) s += 1;
    this.length = Math.min(s, this.length);
    if (r !== 0) this.words[this.length - 1] &= (1 << r) - 1;
    if (this.length === 0) this.words[this.length++] = 0;
    return this._strip();
  }

  umaskn(bits) {
    return this.clone().iumaskn(bits);
  }

  andln(num) {
    return this.words[0] & num;
  }
  /*
   * Negation
   */


  ineg() {
    if (!this.isZero()) this.negative ^= 1;
    return this;
  }

  neg() {
    return this.clone().ineg();
  }

  iabs() {
    this.negative = 0;
    return this;
  }

  abs() {
    return this.clone().iabs();
  }
  /*
   * Comparison
   */


  cmp(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    if (this.negative !== num.negative) return num.negative - this.negative;
    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  }

  cmpn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    var negative = num < 0 | 0;
    if (this.negative !== negative) return negative - this.negative;
    var res = this.ucmpn(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  }

  eq(num) {
    return this.cmp(num) === 0;
  }

  eqn(num) {
    return this.cmpn(num) === 0;
  }

  gt(num) {
    return this.cmp(num) > 0;
  }

  gtn(num) {
    return this.cmpn(num) > 0;
  }

  gte(num) {
    return this.cmp(num) >= 0;
  }

  gten(num) {
    return this.cmpn(num) >= 0;
  }

  lt(num) {
    return this.cmp(num) < 0;
  }

  ltn(num) {
    return this.cmpn(num) < 0;
  }

  lte(num) {
    return this.cmp(num) <= 0;
  }

  lten(num) {
    return this.cmpn(num) <= 0;
  }

  sign() {
    if (this.negative !== 0) return -1;
    if (this.length === 1 && this.words[0] === 0) return 0;
    return 1;
  }

  isZero() {
    return this.length === 1 && this.words[0] === 0;
  }

  isNeg() {
    return this.negative !== 0;
  }

  isOdd() {
    return (this.words[0] & 1) === 1;
  }

  isEven() {
    return (this.words[0] & 1) === 0;
  }
  /*
   * Unsigned Comparison
   */


  ucmp(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    if (this.length < num.length) return -1;
    if (this.length > num.length) return 1;

    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;
      if (a === b) continue;
      return (a > b) - (a < b);
    }

    return 0;
  }

  ucmpn(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    if (this.length > 1) return 1;
    var w = this.words[0];
    if (num < 0) num = -num;
    return (w > num) - (w < num);
  }
  /*
   * Number Theoretic Functions
   */


  legendre(num) {
    return this.toRed(BN.mont(num)).redLegendre();
  }

  jacobi(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    if (num.isZero() || num.isEven()) throw new Error('jacobi: `num` must be odd.'); // See chapter 2, section 2.4:
    // http://yacas.sourceforge.net/Algo.book.pdf

    var a = this._cloneNormal();

    var b = num._cloneNormal();

    var j = 1;

    if (b.isNeg()) {
      if (a.isNeg()) j = -1;
      b.ineg();
    }

    for (;;) {
      if (b.cmpn(1) === 0) return j;
      if (a.isZero()) return 0;
      a = a.imod(b);
      if (a.isZero()) return 0;
      var s = a.zeroBits();

      if (s & 1) {
        var bmod8 = b.andln(7);
        if (bmod8 === 3 || bmod8 === 5) j = -j;
      }

      var c = a.iushrn(s);
      if (b.andln(3) === 3 && c.andln(3) === 3) j = -j;
      a = b;
      b = c;
    }
  }

  kronecker(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var table = [0, 1, 0, -1, 0, -1, 0, 1];

    var a = this._cloneNormal();

    var b = num._cloneNormal();

    var s = 1;
    if (b.isZero()) return a.ucmpn(1) === 0 ? s : 0;
    if (!a.isOdd() && !b.isOdd()) return 0;
    var z = b.zeroBits();
    b.iushrn(z);
    if (z & 1) s = table[a.andln(7)];

    if (b.isNeg()) {
      if (a.isNeg()) s = -s;
      b.ineg();
    }

    for (;;) {
      if (a.isZero()) return b.cmpn(1) === 0 ? s : 0;

      var _z = a.zeroBits();

      a.iushrn(_z);
      if (_z & 1) s *= table[b.andln(7)];
      var w = a.words[0] ^ a.negative * 0x3ffffff;
      if (w & b.words[0] & 2) s = -s;
      b.imod(a);
      [a, b] = [b, a];
      b.negative = 0;
    }
  }

  igcd(num) {
    return this.gcd(num)._move(this);
  }

  gcd(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();
    var a = this.clone();
    var b = num.clone();
    var shift = 0;
    a.negative = 0;
    b.negative = 0; // Remove common factor of two.

    for (; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    for (;;) {
      while (a.isEven()) {
        a.iushrn(1);
      }

      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);

      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`.
        [a, b] = [b, a];
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    }

    return b.iushln(shift);
  }

  ilcm(num) {
    return this.lcm(num)._move(this);
  }

  lcm(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    if (this.isZero() || num.isZero()) return new BN(0);
    return this.quo(this.gcd(num)).mul(num).iabs();
  }

  egcd(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');

    if (this.isZero()) {
      return [new BN(0), new BN(num.sign()), num.abs()];
    }

    if (num.isZero()) {
      return [new BN(this.sign()), new BN(0), this.abs()];
    }

    var x = this.clone();
    var y = num.clone();
    x.negative = 0;
    y.negative = 0; // A * x + B * y = x

    var A = new BN(1);
    var B = new BN(0); // C * x + D * y = y

    var C = new BN(0);
    var D = new BN(1);
    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      g += 1;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      var i = 0;

      for (var im = 1; (x.words[0] & im) === 0 && i < 26; im <<= 1) {
        i += 1;
      }

      if (i > 0) {
        x.iushrn(i);

        while (i > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
          i -= 1;
        }
      }

      var j = 0;

      for (var jm = 1; (y.words[0] & jm) === 0 && j < 26; jm <<= 1) {
        j += 1;
      }

      if (j > 0) {
        y.iushrn(j);

        while (j > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
          j -= 1;
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    if (this.negative !== 0) C.ineg();
    if (num.negative !== 0) D.ineg();
    return [C, D, y.iushln(g)];
  }

  iinvert(num) {
    return this.invert(num)._move(this);
  }

  invert(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    range$1(num.sign() > 0, 'invert');
    if (num.cmpn(1) === 0) throw new RangeError('Not invertible.');
    var [s,, g] = this.egcd(num);
    if (g.cmpn(1) !== 0) throw new RangeError('Not invertible.');
    return s.imod(num);
  }

  ifermat(num) {
    return this.fermat(num)._move(this);
  }

  fermat(num) {
    return this.toRed(BN.mont(num)).redFermat().fromRed();
  }

  ipowm(y, m, mont) {
    return this.powm(y, m, mont)._move(this);
  }

  powm(y, m, mont) {
    var p = mont ? BN.mont(m) : BN.red(m);
    var n = this.toRed(p);
    return n.redPow(y).fromRed();
  }

  ipowmn(y, m, mont) {
    return this.powmn(y, m, mont)._move(this);
  }

  powmn(y, m, mont) {
    var p = mont ? BN.mont(m) : BN.red(m);
    var n = this.toRed(p);
    return n.redPown(y).fromRed();
  }

  isqrtm(p) {
    return this.sqrtm(p)._move(this);
  }

  sqrtm(p) {
    var n = this.toRed(BN.mont(p));
    return n.redSqrt().fromRed();
  }

  isqrtpq(p, q) {
    return this.sqrtpq(p, q)._move(this);
  }

  sqrtpq(p, q) {
    var sp = this.sqrtm(p);
    var sq = this.sqrtm(q);
    var [mp, mq] = p.egcd(q);
    var lhs = sq.imul(mp).imul(p);
    var rhs = sp.imul(mq).imul(q);
    var n = p.mul(q);
    return lhs.iadd(rhs).imod(n);
  }
  /*
   * Primality Testing
   */


  isPrime(rng, reps, limit) {
    enforce$1(reps >>> 0 === reps, 'reps', 'integer');
    if (!this.isPrimeMR(rng, reps + 1, true)) return false;
    if (!this.isPrimeLucas(limit)) return false;
    return true;
  }

  isPrimeMR(rng, reps) {
    var force2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    enforce$1(reps >>> 0 === reps, 'reps', 'integer');
    enforce$1(reps > 0, 'reps', 'integer');
    enforce$1(typeof force2 === 'boolean', 'force2', 'boolean');
    var n = this;

    if (n.cmpn(7) < 0) {
      if (n.cmpn(2) === 0 || n.cmpn(3) === 0 || n.cmpn(5) === 0) return true;
      return false;
    }

    if (n.isEven()) return false;
    var nm1 = n.subn(1);
    var nm3 = nm1.subn(2);
    var k = nm1.zeroBits();
    var q = nm1.ushrn(k);
    var red = BN.red(n);
    var rnm1 = nm1.toRed(red);
    var rone = new BN(1).toRed(red); // Miller-Rabin primality test.

    next: for (var i = 0; i < reps; i++) {
      var x = void 0;

      if (i === reps - 1 && force2) {
        x = new BN(2);
      } else {
        x = BN.random(rng, 0, nm3);
        x.iaddn(2);
      }

      var y = x.toRed(red).redPow(q);
      if (y.cmp(rone) === 0 || y.cmp(rnm1) === 0) continue;

      for (var j = 1; j < k; j++) {
        y.redISqr();
        if (y.cmp(rnm1) === 0) continue next;
        if (y.cmp(rone) === 0) return false;
      }

      return false;
    }

    return true;
  }

  isPrimeLucas() {
    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    enforce$1(limit >>> 0 === limit, 'limit', 'integer');
    var n = this; // Ignore 0 and 1.

    if (n.cmpn(1) <= 0) return false; // Two is the only even prime.

    if (n.isEven()) return n.cmpn(2) === 0; // Baillie-OEIS "method C" for choosing D, P, Q.
    // See: https://oeis.org/A217719/a217719.txt.

    var p = 3;

    for (;;) {
      if (p > 10000) {
        // Thought to be impossible.
        throw new Error("Cannot find (D/n) = -1 for ".concat(n.toString(10), "."));
      }

      if (limit > 0 && p > limit) {
        // It's thought to be impossible for `p`
        // to be larger than 10,000, but fail
        // on anything higher than a limit to
        // prevent DoS attacks. `p` never seems
        // to be higher than 30 in practice.
        return false;
      }

      var d = new BN(p * p - 4);
      var j = d.jacobi(n);
      if (j === -1) break;
      if (j === 0) return n.cmpn(p + 2) === 0;

      if (p === 40) {
        if (n.isSquare()) return false;
      }

      p += 1;
    } // Check for Grantham definition of
    // "extra strong Lucas pseudoprime".


    var s = n.addn(1);
    var r = s.zeroBits();
    var nm2 = n.subn(2);
    var x = new BN(2);
    var y = new BN(p);
    s.iushrn(r);

    for (var i = s.bitLength(); i >= 0; i--) {
      if (s.testn(i)) {
        x = x.imul(y).iadd(n).isubn(p).imod(n);
        y = y.isqr().iadd(nm2).imod(n);
      } else {
        y = y.imul(x).iadd(n).isubn(p).imod(n);
        x = x.isqr().iadd(nm2).imod(n);
      }
    }

    if (x.cmpn(2) === 0 || x.cmp(nm2) === 0) {
      var a = x.muln(p);
      var b = y.ushln(1);
      if (a.cmp(b) < 0) [a, b] = [b, a];
      if (a.isub(b).imod(n).isZero()) return true;
    }

    for (var t = 0; t < r - 1; t++) {
      if (x.isZero()) return true;
      if (x.cmpn(2) === 0) return false;
      x = x.isqr().isubn(2).imod(n);
    }

    return false;
  }
  /*
   * Twos Complement
   */


  toTwos(width) {
    if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
    return this.clone();
  }

  fromTwos(width) {
    enforce$1(isInteger(width), 'width', 'integer');
    range$1(width > 0, 'width');
    if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
    return this.clone();
  }
  /*
   * Reduction Context
   */


  toRed(ctx) {
    enforce$1(ctx instanceof Red, 'ctx', 'reduction context');
    if (this.red) throw new Error('Already in reduction context.');
    return ctx.convertTo(this)._forceRed(ctx);
  }

  fromRed() {
    red(this.red, 'fromRed');
    return this.red.convertFrom(this);
  }

  forceRed(ctx) {
    if (this.red) throw new Error('Already in reduction context.');
    return this._forceRed(ctx);
  }

  redIAdd(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIAdd');
    return this.red.iadd(this, num);
  }

  redAdd(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redAdd');
    return this.red.add(this, num);
  }

  redISub(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redISub');
    return this.red.isub(this, num);
  }

  redSub(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redSub');
    return this.red.sub(this, num);
  }

  redIShln(num) {
    enforce$1(isInteger(num), 'num', 'integer');
    red(this.red, 'redIShln');
    return this.red.ishln(this, num);
  }

  redShln(num) {
    enforce$1(isInteger(num), 'num', 'integer');
    red(this.red, 'redShln');
    return this.red.shln(this, num);
  }

  redIMul(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIMul');
    return this.red.imul(this, num);
  }

  redMul(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redMul');
    return this.red.mul(this, num);
  }

  redISqr() {
    red(this.red, 'redISqr');
    return this.red.isqr(this);
  }

  redSqr() {
    red(this.red, 'redISqr');
    return this.red.sqr(this);
  }

  redISqrt() {
    red(this.red, 'redISqrt');
    return this.red.isqrt(this);
  }

  redSqrt() {
    red(this.red, 'redSqrt');
    return this.red.sqrt(this);
  }

  redIInvert() {
    red(this.red, 'redIInvert');
    return this.red.iinvert(this);
  }

  redInvert() {
    red(this.red, 'redInvert');
    return this.red.invert(this);
  }

  redIFermat() {
    red(this.red, 'redIFermat');
    return this.red.ifermat(this);
  }

  redFermat() {
    red(this.red, 'redFermat');
    return this.red.fermat(this);
  }

  redINeg() {
    red(this.red, 'redINeg');
    return this.red.ineg(this);
  }

  redNeg() {
    red(this.red, 'redNeg');
    return this.red.neg(this);
  }

  redLegendre() {
    red(this.red, 'redLegendre');
    return this.red.legendre(this);
  }

  redJacobi() {
    red(this.red, 'redJacobi');
    return this.red.jacobi(this);
  }

  redKronecker() {
    red(this.red, 'redKronecker');
    return this.red.kronecker(this);
  }

  redIPow(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redIPow');
    nonred(!num.red, 'redIPow');
    return this.red.ipow(this, num);
  }

  redPow(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    red(this.red, 'redPow');
    nonred(!num.red, 'redPow');
    return this.red.pow(this, num);
  }

  redIPown(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    red(this.red, 'redIPown');
    return this.red.ipown(this, num);
  }

  redPown(num) {
    enforce$1(isSMI(num), 'num', 'smi');
    red(this.red, 'redPown');
    return this.red.pown(this, num);
  }
  /*
   * Internal
   */


  _move(dest) {
    dest.words = this.words;
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
    return dest;
  }

  _alloc(size) {
    while (this.words.length < size) {
      this.words.push(0);
    }

    return this;
  }

  _expand(size) {
    this._alloc(size);

    while (this.length < size) {
      this.words[this.length++] = 0;
    }

    return this;
  }

  _strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length -= 1;
    }

    return this._normalize();
  }

  _normalize() {
    assert$2(this.length > 0); // -0 = 0

    if (this.length === 1 && this.words[0] === 0) this.negative = 0;
    return this;
  }

  _check() {
    // We never have a zero length number.
    assert$2(this.length > 0);

    if (this.length === 1) {
      // Must be normalized.
      if (this.words[0] === 0) assert$2(this.negative === 0);
      return this;
    } // Must be stripped.


    assert$2(this.words[this.length - 1] !== 0);
    return this;
  }

  _invertp(p) {
    enforce$1(BN.isBN(p), 'p', 'bignum');
    assert$2(this.negative === 0);
    assert$2(p.sign() > 0);
    if (this.isZero() || p.cmpn(1) === 0) throw new RangeError('Not invertible.');
    var a = this.clone();
    var b = p.clone();
    var x1 = new BN(1);
    var x2 = new BN(0);
    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      var i = 0;

      for (var im = 1; (a.words[0] & im) === 0 && i < 26; im <<= 1) {
        i += 1;
      }

      if (i > 0) {
        a.iushrn(i);

        while (i > 0) {
          if (x1.isOdd()) x1.iadd(delta);
          x1.iushrn(1);
          i -= 1;
        }
      }

      var j = 0;

      for (var jm = 1; (b.words[0] & jm) === 0 && j < 26; jm <<= 1) {
        j += 1;
      }

      if (j > 0) {
        b.iushrn(j);

        while (j > 0) {
          if (x2.isOdd()) x2.iadd(delta);
          x2.iushrn(1);
          j -= 1;
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) res = x1;else res = x2;
    if (res.sign() < 0) res.iadd(p);
    return res;
  }

  _cloneNormal() {
    return this.red ? this.fromRed() : this.clone();
  }

  _forceRed(ctx) {
    this.red = ctx;
    return this;
  }
  /*
   * Helpers
   */


  clone() {
    return new BN().inject(this);
  }

  inject(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    this.words = new Array(num.length);

    for (var i = 0; i < num.length; i++) {
      this.words[i] = num.words[i];
    }

    this.length = num.length;
    this.negative = num.negative;
    this.red = num.red;
    return this;
  }

  set(num, endian) {
    return this.fromNumber(num, endian);
  }

  swap(num) {
    enforce$1(BN.isBN(num), 'num', 'bignum');
    var x = this;
    var y = num;
    [x.words, y.words] = [y.words, x.words];
    [x.length, y.length] = [y.length, x.length];
    [x.negative, y.negative] = [y.negative, x.negative];
    [x.red, y.red] = [y.red, x.red];
    return x;
  }

  reverse() {
    var neg = this.negative;
    this.fromBuffer(this.toBuffer('be'), 'le');
    this.negative = neg;
    return this;
  }

  byteLength() {
    return Math.ceil(this.bitLength() / 8);
  }

  bitLength() {
    var w = this.words[this.length - 1];
    var hi = countBits(w);
    return (this.length - 1) * 26 + hi;
  }

  zeroBits() {
    if (this.isZero()) return 0;
    var r = 0;

    for (var i = 0; i < this.length; i++) {
      var b = zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }

    return r;
  }

  isSafe() {
    if (this.length <= 2) return true;
    if (this.length === 3 && this.words[2] === 0x01) return true;
    return false;
  }

  [custom$1]() {
    var prefix = 'BN';
    if (this.red) prefix = 'BN-R';
    return "<".concat(prefix, ": ").concat(this.toString(10), ">");
  }
  /*
   * Conversion
   */


  toNumber() {
    var num = this.words[0];

    if (this.length === 2) {
      num += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // Note: at this stage it is known that the top bit is set.
      num += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      throw new RangeError('Number can only safely store up to 53 bits.');
    }

    return this.negative !== 0 ? -num : num;
  }

  toDouble() {
    var num = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      num = num * 0x4000000 + this.words[i];
    }

    return this.negative !== 0 ? -num : num;
  }

  valueOf() {
    return this.toDouble();
  }

  toBigInt() {
    if (typeof BigInteger !== 'function') throw new Error('BigInt is not supported!');
    var shift = BigInteger(26);
    var num = BigInteger(0);

    for (var i = this.length - 1; i >= 0; i--) {
      num = num << shift | BigInteger(this.words[i]);
    }

    return this.negative !== 0 ? -num : num;
  }

  toBool() {
    return !this.isZero();
  }

  toString(base, padding) {
    base = getBase(base);
    if (padding == null) padding = 0;
    if (padding === 0) padding = 1;
    enforce$1(base >>> 0 === base, 'base', 'integer');
    enforce$1(padding >>> 0 === padding, 'padding', 'integer');
    if (base < 2 || base > 36) throw new RangeError('Base ranges between 2 and 36.');

    this._check();

    if (base === 16) {
      var _out = '';
      var off = 0;
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) _out = zeros[6 - word.length] + word + _out;else _out = word + _out;
        off += 2;

        if (off >= 26) {
          off -= 26;
          i -= 1;
        }
      }

      if (carry !== 0) _out = carry.toString(16) + _out;

      while (_out.length % padding !== 0) {
        _out = '0' + _out;
      }

      if (this.negative !== 0) _out = '-' + _out;
      return _out;
    }

    var groupSize = groupSizes[base - 1];
    var groupBase = groupBases[base - 1];
    var c = this.clone();
    var out = '';
    c.negative = 0;

    while (!c.isZero()) {
      var r = c.remrn(groupBase).toString(base);
      c = c.iquon(groupBase);
      if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;else out = r + out;
    }

    if (this.isZero()) out = '0' + out;

    while (out.length % padding !== 0) {
      out = '0' + out;
    }

    if (this.negative !== 0) out = '-' + out;
    return out;
  }

  toJSON() {
    return this.toString(16, 2);
  }

  toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  }

  toBuffer(endian, length) {
    return this.toArrayLike(Buffer, endian, length);
  }

  toArrayLike(ArrayType, endian, length) {
    if (endian == null) endian = 'be';
    if (length == null) length = 0;
    enforce$1(typeof ArrayType === 'function', 'ArrayType', 'function');
    enforce$1(endian === 'be' || endian === 'le', 'endian', 'endianness');
    enforce$1(length >>> 0 === length, 'length', 'integer');

    this._check();

    var bytes = this.byteLength();
    var size = length || Math.max(1, bytes);
    if (bytes > size) throw new RangeError('Byte array longer than desired length.');
    var res = allocate(ArrayType, size);
    var q = this.clone();

    if (endian === 'be') {
      var i = size - 1;

      while (!q.isZero()) {
        res[i--] = q.words[0] & 0xff;
        q.iushrn(8);
      }

      for (; i >= 0; i--) {
        res[i] = 0x00;
      }
    } else {
      var _i5 = 0;

      while (!q.isZero()) {
        res[_i5++] = q.words[0] & 0xff;
        q.iushrn(8);
      }

      for (; _i5 < size; _i5++) {
        res[_i5] = 0x00;
      }
    }

    return res;
  }

  encode(endian, length) {
    return this.toBuffer(endian, length);
  }
  /*
   * Instantiation
   */


  of(num, endian) {
    return this.fromNumber(num, endian);
  }

  fromNumber(num, endian) {
    if (endian == null) endian = 'be';
    enforce$1(isInteger(num), 'num', 'integer');
    enforce$1(endian === 'be' || endian === 'le', 'endian', 'endianness');
    var neg = num < 0 | 0;
    if (neg) num = -num;

    if (num < 0x4000000) {
      this.words = [num & 0x3ffffff];
      this.length = 1;
    } else if (num < 0x10000000000000) {
      this.words = [num & 0x3ffffff, num / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      this.words = [num & 0x3ffffff, num / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    this.negative = neg;
    if (endian === 'le') this.reverse();
    return this;
  }

  fromDouble(num, endian) {
    if (endian == null) endian = 'be';
    enforce$1(typeof num === 'number', 'num', 'double');
    enforce$1(endian === 'be' || endian === 'le', 'endian', 'endianness');
    if (!isFinite(num)) num = 0;
    var neg = num <= -1 | 0;
    if (num < 0) num = -num;
    num = Math.floor(num);
    this.words = [];

    while (num > 0) {
      var lo = num % 0x4000000;
      var hi = (num - lo) / 0x4000000;
      this.words.push(lo);
      num = hi;
    }

    if (this.words.length === 0) this.words.push(0);
    this.length = this.words.length;
    this.negative = neg;
    if (endian === 'le') this.reverse();
    return this;
  }

  fromBigInt(num, endian) {
    if (endian == null) endian = 'be';
    enforce$1(typeof num === 'bigint', 'num', 'bigint');
    enforce$1(endian === 'be' || endian === 'le', 'endian', 'endianness');
    if (typeof BigInteger !== 'function') throw new Error('BigInt is not supported!');
    var zero = BigInteger(0);
    var mask = BigInteger(0x3ffffff);
    var shift = BigInteger(26);
    var neg = num < zero | 0;
    if (neg) num = -num;
    this.words = [];

    while (num > zero) {
      this.words.push(Number(num & mask));
      num >>= shift;
    }

    if (this.words.length === 0) this.words.push(0);
    this.length = this.words.length;
    this.negative = neg;
    if (endian === 'le') this.reverse();
    return this;
  }

  fromBool(value) {
    enforce$1(typeof value === 'boolean', 'value', 'boolean');
    return this.set(value ? 1 : 0);
  }

  fromString(str, base, endian) {
    if (base === 'le' || base === 'be') [base, endian] = [endian, base];
    base = getBase(base);
    if (endian == null) endian = 'be';
    enforce$1(typeof str === 'string', 'string', 'string');
    enforce$1(base >>> 0 === base, 'base', 'integer');
    enforce$1(endian === 'be' || endian === 'le', 'endian', 'endianness');
    if (base < 2 || base > 36) throw new Error('Base ranges between 2 and 36.');
    str = str.replace(/[\t\n\r ]/g, '');
    var start = 0;
    if (str.length > 0 && str.charCodeAt(0) === 0x2d) start = 1;
    if (base === 16) this._fromHex(str, start);else this._fromBase(str, base, start);
    this.negative = start;

    this._strip();

    if (endian === 'le') this.reverse();
    return this;
  }

  _fromHex(str, start) {
    // Create possibly bigger array to ensure that it fits the number.
    this.length = Math.max(2, Math.ceil((str.length - start) / 6));
    this.words = new Array(this.length);

    for (var _i6 = 0; _i6 < this.length; _i6++) {
      this.words[_i6] = 0;
    } // Scan 24-bit chunks and add them to the number.


    var off = 0;
    var i = str.length - 6;
    var j = 0;

    for (; i >= start; i -= 6) {
      var w = parseHex(str, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff; // `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb.

      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;

      if (off >= 26) {
        off -= 26;
        j += 1;
      }
    }

    if (i + 6 !== start) {
      var _w = parseHex(str, start, i + 6);

      this.words[j] |= _w << off & 0x3ffffff;
      this.words[j + 1] |= _w >>> 26 - off & 0x3fffff;
    }

    return this._strip();
  }

  _fromBase(str, base, start) {
    // Initialize as zero.
    this.words = [0];
    this.length = 1;
    this.negative = 0; // Find length of limb in base.

    var limbLen = 0;
    var limbPow = 1;

    for (; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen += 1;
    }

    limbLen -= 1;
    limbPow = limbPow / base | 0;
    var total = str.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;
    var word = 0;
    var i = start;

    for (; i < end; i += limbLen) {
      word = parseBase(str, i, i + limbLen, base);
      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) this.words[0] += word;else this._iaddn(word);
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(str, i, str.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) this.words[0] += word;else this._iaddn(word);
    }

    return this;
  }

  fromJSON(json) {
    return this.fromString(json, 16);
  }

  fromBN(num) {
    return this.inject(num);
  }

  fromArray(data, endian) {
    enforce$1(Array.isArray(data), 'data', 'array');
    return this.fromArrayLike(data, endian);
  }

  fromBuffer(data, endian) {
    enforce$1(Buffer.isBuffer(data), 'data', 'buffer');
    return this.fromArrayLike(data, endian);
  }

  fromArrayLike(data, endian) {
    if (endian == null) endian = 'be';
    enforce$1(data && typeof data.length === 'number', 'data', 'array-like');
    enforce$1(endian === 'be' || endian === 'le', 'endian', 'endianness');

    if (data.length <= 0) {
      this.words = [0];
      this.length = 1;
      this.negative = 0;
      return this;
    }

    this.length = Math.max(2, Math.ceil(data.length / 3));
    this.words = new Array(this.length);
    this.negative = 0;

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var left = data.length % 3;
    var off = 0;
    var j = 0;
    var w = 0;

    if (endian === 'be') {
      for (var _i7 = data.length - 1; _i7 >= 2; _i7 -= 3) {
        var _w2 = data[_i7] | data[_i7 - 1] << 8 | data[_i7 - 2] << 16;

        this.words[j] |= _w2 << off & 0x3ffffff;
        this.words[j + 1] = _w2 >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j += 1;
        }
      }

      switch (left) {
        case 2:
          w = data[1] | data[0] << 8;
          break;

        case 1:
          w = data[0];
          break;
      }
    } else {
      var len = data.length - left;

      for (var _i8 = 0; _i8 < len; _i8 += 3) {
        var _w3 = data[_i8] | data[_i8 + 1] << 8 | data[_i8 + 2] << 16;

        this.words[j] |= _w3 << off & 0x3ffffff;
        this.words[j + 1] = _w3 >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j += 1;
        }
      }

      switch (left) {
        case 2:
          w = data[len] | data[len + 1] << 8;
          break;

        case 1:
          w = data[len];
          break;
      }
    }

    if (left > 0) {
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
    }

    return this._strip();
  }

  decode(data, endian) {
    return this.fromBuffer(data, endian);
  }

  from(num, base, endian) {
    if (num == null) return this;
    if (base === 'le' || base === 'be') [base, endian] = [endian, base];
    if (typeof num === 'number') return this.fromNumber(num, endian);
    if (typeof num === 'bigint') return this.fromBigInt(num, endian);
    if (typeof num === 'string') return this.fromString(num, base, endian);

    if (typeof num === 'object') {
      if (BN.isBN(num)) return this.fromBN(num, endian);
      if (typeof num.length === 'number') return this.fromArrayLike(num, endian);
    }

    if (typeof num === 'boolean') return this.fromBool(num);
    throw new TypeError('Non-numeric object passed to BN.');
  }
  /*
   * Static Methods
   */


  static min(a, b) {
    enforce$1(BN.isBN(a), 'a', 'bignum');
    return a.cmp(b) < 0 ? a : b;
  }

  static max(a, b) {
    enforce$1(BN.isBN(a), 'a', 'bignum');
    return a.cmp(b) > 0 ? a : b;
  }

  static cmp(a, b) {
    enforce$1(BN.isBN(a), 'a', 'bignum');
    return a.cmp(b);
  }

  static ucmp(a, b) {
    enforce$1(BN.isBN(a), 'a', 'bignum');
    return a.ucmp(b);
  }

  static red(num) {
    return new Red(num);
  }

  static mont(num) {
    return new Mont(num);
  }

  static _prime(name) {
    if (primes[name]) return primes[name];
    var prime;
    if (name === 'p192') prime = new P192();else if (name === 'p224') prime = new P224();else if (name === 'p521') prime = new P521();else if (name === 'k256') prime = new K256();else if (name === 'p25519') prime = new P25519();else if (name === 'p448') prime = new P448();else throw new Error('Unknown prime ' + name);
    primes[name] = prime;
    return prime;
  }

  static pow(num, exp) {
    return new BN().fromNumber(num).ipown(exp);
  }

  static shift(num, bits) {
    return new BN().fromNumber(num).ishln(bits);
  }

  static randomBits(rng, bits) {
    enforce$1(rng != null, 'rng', 'rng');
    enforce$1(isInteger(bits), 'bits', 'integer');
    range$1(bits >= 0, 'randomBits');

    if (typeof rng === 'object') {
      enforce$1(typeof rng.randomBytes === 'function', 'rng', 'rng');
      var size = bits + 7 >>> 3;
      var total = size * 8;
      var bytes = rng.randomBytes(size);
      enforce$1(Buffer.isBuffer(bytes), 'bytes', 'buffer');
      if (bytes.length !== size) throw new RangeError('Invalid number of bytes returned from RNG.');

      var _num = BN.fromBuffer(bytes);

      if (total > bits) _num.iushrn(total - bits);
      return _num;
    }

    enforce$1(typeof rng === 'function', 'rng', 'rng');
    var num = rng(bits);
    enforce$1(BN.isBN(num), 'num', 'bignum');
    range$1(num.negative === 0, 'RNG');
    nonred(!num.red, 'RNG');
    if (num.bitLength() > bits) throw new RangeError('Invalid number of bits returned from RNG.');
    return num;
  }

  static random(rng, min, max) {
    min = BN.cast(min, 16);
    max = BN.cast(max, 16);
    if (min.cmp(max) > 0) throw new RangeError('Minimum cannot be greater than maximum.');
    var space = max.sub(min).iabs();
    var bits = space.bitLength();
    if (bits === 0) return min.clone();

    for (;;) {
      var num = BN.randomBits(rng, bits); // Maximum is _exclusive_!

      if (num.cmp(space) >= 0) continue; // Minimum is _inclusive_!

      num.iadd(min);
      return num;
    }
  }

  static of(num, endian) {
    return new BN().of(num, endian);
  }

  static fromNumber(num, endian) {
    return new BN().fromNumber(num, endian);
  }

  static fromDouble(num, endian) {
    return new BN().fromDouble(num, endian);
  }

  static fromBigInt(num, endian) {
    return new BN().fromBigInt(num, endian);
  }

  static fromBool(value) {
    return new BN().fromBool(value);
  }

  static fromString(str, base, endian) {
    return new BN().fromString(str, base, endian);
  }

  static fromJSON(json) {
    return new BN().fromJSON(json);
  }

  static fromBN(num) {
    return new BN().fromBN(num);
  }

  static fromArray(data, endian) {
    return new BN().fromArray(data, endian);
  }

  static fromBuffer(data, endian) {
    return new BN().fromBuffer(data, endian);
  }

  static fromArrayLike(data, endian) {
    return new BN().fromArrayLike(data, endian);
  }

  static decode(data, endian) {
    return new BN().decode(data, endian);
  }

  static from(num, base, endian) {
    return new BN().from(num, base, endian);
  }

  static cast(num, base, endian) {
    if (BN.isBN(num)) return num;
    return new BN(num, base, endian);
  }

  static isBN(obj) {
    return obj instanceof BN;
  }

}
/*
 * Static
 */


BN.BN = BN;
BN.wordSize = 26;
BN.native = 0;
/**
 * Prime
 */

class Prime {
  constructor(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = BN.shift(1, this.n).isub(this.p);
    this.tmp = this._tmp();
  }

  _tmp() {
    var tmp = new BN();
    tmp.words = new Array(Math.ceil(this.n / 13));

    for (var i = 0; i < tmp.words.length; i++) {
      tmp.words[i] = 0;
    }

    return tmp;
  }

  ireduce(num) {
    // Assumes that `num` is less than `P^2`:
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;
    assert$2(r.negative === 0);
    assert$2(r.length <= this.p.length * 2);
    if (r.length < this.p.length) return r;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    }

    return r;
  }

  split(input, out) {
    input._split(this.n, out);
  }

  imulK(num) {
    return num.imul(this.k);
  }

}
/**
 * P192
 */


class P192 extends Prime {
  constructor() {
    super('p192', 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff ffffffff');
  }

  imulK(num) {
    // K = 0x10000000000000001
    var n = num.clone();
    return num.iushln(64).iadd(n);
  }

}
/**
 * P224
 */


class P224 extends Prime {
  constructor() {
    super('p224', 'ffffffff ffffffff ffffffff ffffffff' + '00000000 00000000 00000001');
  }

  imulK(num) {
    // K = 0xffffffffffffffffffffffff
    var n = num.clone();
    return num.iushln(96).isub(n);
  }

}
/**
 * P521
 */


class P521 extends Prime {
  constructor() {
    super('p521', '000001ff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff');
  }

  imulK(num) {
    // K = 0x01
    return num;
  }

}
/**
 * K256
 */


class K256 extends Prime {
  constructor() {
    super('k256', 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe fffffc2f');
  }

  split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;
    var outLen = Math.min(input.length, 9);

    output._alloc(outLen + 1);

    for (var _i9 = 0; _i9 < outLen; _i9++) {
      output.words[_i9] = input.words[_i9];
    }

    output.length = outLen;

    if (input.length <= 9) {
      output._strip();

      input.words[0] = 0;
      input.length = 1;
      return;
    } // Shift by 9 limbs.


    var prev = input.words[9];
    var i = 10;
    output.words[output.length++] = prev & mask;

    output._strip();

    for (; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }

    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) input.length -= 10;else input.length -= 9;

    input._strip(); // Unsure if we need this.

  }

  imulK(num) {
    // K = 0x1000003d1 = [0x40, 0x3d1]
    num._expand(num.length + 2); // Bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390


    var lo = 0;

    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    } // Fast length reduction.


    if (num.words[num.length - 1] === 0) {
      num.length -= 1;
      if (num.words[num.length - 1] === 0) num.length -= 1;
    } // Note: we shouldn't need to strip here.


    return num;
  }

}
/**
 * P25519
 */


class P25519 extends Prime {
  constructor() {
    // 2^255 - 19
    super('p25519', '7fffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffed');
  }

  imulK(num) {
    // K = 0x13
    var carry = 0;

    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;
      num.words[i] = lo;
      carry = hi;
    }

    if (carry !== 0) {
      num._alloc(num.length + 1);

      num.words[num.length++] = carry;
    } // Note: we shouldn't need to strip here.


    return num;
  }

}
/**
 * P448
 */


class P448 extends Prime {
  constructor() {
    // 2^448 - 2^224 - 1
    super('p448', 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff');
  }

  imulK(num) {
    // K = 0x100000000000000000000000000000000000000000000000000000001
    var n = num.clone();
    return num.iushln(224).iadd(n);
  }

}
/**
 * Reduction Engine
 */


class Red {
  constructor(m) {
    var prime = null;

    if (typeof m === 'string') {
      prime = BN._prime(m);
      m = prime.p;
    }

    enforce$1(BN.isBN(m), 'm', 'bignum');
    range$1(m.cmpn(1) >= 0, 'reduction');
    this.m = m;
    this.prime = prime;
  }

  _verify1(a) {
    range$1(a.negative === 0, 'red');
    red(a.red, 'red');
  }

  _verify2(a, b) {
    range$1((a.negative | b.negative) === 0, 'red');
    red(a.red && a.red === b.red, 'red');
  }

  imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.imod(this.m)._forceRed(this);
  }

  ineg(a) {
    this._verify1(a);

    if (!a.isZero()) {
      a.isub(this.m);
      a.ineg();
    }

    return a;
  }

  neg(a) {
    this._verify1(a);

    if (a.isZero()) return a.clone();
    return this.m.sub(a)._forceRed(this);
  }

  iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) res.isub(this.m);
    return res;
  }

  add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) res.isub(this.m);
    return res._forceRed(this);
  }

  isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.sign() < 0) res.iadd(this.m);
    return res;
  }

  sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.sign() < 0) res.iadd(this.m);
    return res._forceRed(this);
  }

  ishln(a, num) {
    this._verify1(a);

    return this.imod(a.iushln(num));
  }

  shln(a, num) {
    this._verify1(a);

    return this.imod(a.ushln(num));
  }

  imul(a, b) {
    this._verify2(a, b);

    return this.imod(a.imul(b));
  }

  mul(a, b) {
    this._verify2(a, b);

    return this.imod(a.mul(b));
  }

  isqr(a) {
    return this.imul(a, a);
  }

  sqr(a) {
    return this.mul(a, a);
  }

  isqrt(x) {
    return this.sqrt(x)._move(x);
  }

  sqrt(x) {
    this._verify1(x);

    switch (this.jacobi(x)) {
      case -1:
        throw new Error('X is not a square mod P.');

      case 0:
        return new BN(0)._forceRed(this);
    } // Fast case (mod 4 == 3).


    if (this.m.andln(3) === 3) {
      var _e = this.m.addn(1).iushrn(2);

      return this.pow(x, _e);
    }

    var one = new BN(1).toRed(this); // Fast case (mod 8 == 5).

    if (this.m.andln(7) === 5) {
      var _e2 = this.m.ushrn(3);

      var t = this.shln(x, 1);
      var a = this.pow(t, _e2);

      var _b = this.sqr(a);

      this.imul(_b, t);
      this.isub(_b, one);
      this.imul(_b, x);
      this.imul(_b, a);
      return _b;
    }

    var s = this.m.subn(1);
    var e = s.zeroBits();
    s.iushrn(e);
    var n = new BN(2).toRed(this);

    while (this.jacobi(n) !== -1) {
      this.iadd(n, one);
    }

    var b = this.pow(x, s);
    var g = this.pow(n, s);
    var y = this.pow(x, s.iaddn(1).iushrn(1));
    var k = e;

    for (;;) {
      var _t = b;
      var m = 0;

      while (_t.cmp(one) !== 0) {
        _t = this.sqr(_t);
        m += 1;
      }

      if (m === 0) break;
      assert$2(m !== k);
      _t = BN.shift(1, k - m - 1);
      _t = this.pow(g, _t);
      g = this.sqr(_t);
      y = this.mul(y, _t);
      b = this.mul(b, g);
      k = m;
    }

    return y;
  }

  iinvert(a) {
    return this.invert(a)._move(a);
  }

  invert(a) {
    this._verify1(a);

    if (this.prime) {
      var inv = a._invertp(this.m);

      if (inv.negative !== 0) {
        inv.negative = 0;
        this.imod(inv);
        this.ineg(inv);
      } else {
        this.imod(inv);
      }

      return inv;
    }

    return a.invert(this.m)._forceRed(this);
  }

  ifermat(a) {
    return this.fermat(a)._move(a);
  }

  fermat(a) {
    this._verify1(a);

    if (a.isZero() || this.m.cmpn(1) === 0) throw new RangeError('Not invertible.'); // Invert using fermat's little theorem.

    return this.pow(a, this.m.subn(2));
  }

  legendre(a) {
    this._verify1(a);

    if (this.m.isEven()) throw new Error('legendre: `num` must be odd.'); // Euler's criterion.

    var s = this.pow(a, this.m.subn(1).iushrn(1));
    if (s.isZero()) return 0;
    var one = new BN(1).toRed(this);
    if (s.cmp(one) === 0) return 1;
    if (this.iadd(s, one).isZero()) return -1;
    throw new Error('Invalid prime.');
  }

  jacobi(a) {
    this._verify1(a);

    return a.jacobi(this.m);
  }

  kronecker(a) {
    this._verify1(a);

    return a.kronecker(this.m);
  }

  ipow(a, num) {
    return this.pow(a, num)._move(a);
  }

  pow(a, num) {
    this._verify1(a);

    if (num.isZero()) return new BN(1).toRed(this); // GMP behavior.

    if (num.isNeg()) a = this.invert(a);
    if (num.ucmpn(1) === 0) return a.clone();
    if (num.length === 1) return this.pown(a, num.words[0]);
    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;

    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) start = 26;

    for (var _i10 = num.length - 1; _i10 >= 0; _i10--) {
      var word = num.words[_i10];

      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;
        if (res !== wnd[0]) res = this.sqr(res);

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen += 1;
        if (currentLen !== windowSize && (_i10 !== 0 || j !== 0)) continue;
        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }

      start = 26;
    }

    return res;
  }

  ipown(a, num) {
    return this.pown(a, num)._move(a);
  }

  pown(a, num) {
    this._verify1(a);

    var x = a;
    var y = num;
    var r = new BN(1).toRed(this);

    if (y < 0) {
      x = this.invert(x);
      y = -y;
    }

    while (y > 0) {
      if (y & 1) r = this.mul(r, x);
      y >>>= 1;
      x = this.sqr(x);
    }

    return r;
  }

  convertTo(num) {
    return num.mod(this.m);
  }

  convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  }

  [custom$1]() {
    return "<Red: ".concat(this.m.toString(10), ">");
  }

}
/**
 * Montgomery Method Engine
 */


class Mont extends Red {
  constructor(m) {
    super(m);
    this.n = this.m.bitLength();
    if (this.n % 26 !== 0) this.n += 26 - this.n % 26;
    this.r = BN.shift(1, this.n);
    this.r2 = this.imod(this.r.sqr());
    this.ri = this.r._invertp(this.m).imod(this.m);
    this.mi = this.r.sub(this.ri.mul(this.r).isubn(1).div(this.m).imod(this.r));
  }

  convertTo(num) {
    return this.imod(num.ushln(this.n));
  }

  convertFrom(num) {
    var r = this.imod(num.mul(this.ri));
    r.red = null;
    return r;
  }

  imul(a, b) {
    this._verify2(a, b);

    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.umaskn(this.n).mul(this.mi).iumaskn(this.n).mul(this.m);
    var u = t.isub(c).iushrn(this.n);
    var res = u;
    if (u.cmp(this.m) >= 0) res = u.isub(this.m);else if (u.sign() < 0) res = u.iadd(this.m);
    return res._forceRed(this);
  }

  mul(a, b) {
    this._verify2(a, b);

    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    var t = a.mul(b);
    var c = t.umaskn(this.n).mul(this.mi).iumaskn(this.n).mul(this.m);
    var u = t.isub(c).iushrn(this.n);
    var res = u;
    if (u.cmp(this.m) >= 0) res = u.isub(this.m);else if (u.sign() < 0) res = u.iadd(this.m);
    return res._forceRed(this);
  }

  invert(a) {
    this._verify1(a); // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R


    var res = this.imod(a._invertp(this.m).mul(this.r2));
    return res._forceRed(this);
  }

}
/*
 * Helpers
 */


function makeError(Error, msg, start) {
  var err = new Error(msg);
  if (Error.captureStackTrace) Error.captureStackTrace(err, start);
  return err;
}

function assert$2(value, message) {
  if (!value) {
    var msg = message || 'Assertion failed.';
    throw makeError(Error, msg, assert$2);
  }
}

function enforce$1(value, name, type) {
  if (!value) {
    var msg = "\"".concat(name, "\" must be a(n) ").concat(type, ".");
    throw makeError(TypeError, msg, enforce$1);
  }
}

function range$1(value, name) {
  if (!value) {
    var msg = "\"".concat(name, "\" only works with positive numbers.");
    throw makeError(RangeError, msg, range$1);
  }
}

function red(value, name) {
  if (!value) {
    var msg = "\"".concat(name, "\" only works with red numbers.");
    throw makeError(TypeError, msg, red);
  }
}

function nonred(value, name) {
  if (!value) {
    var msg = "\"".concat(name, "\" only works with normal numbers.");
    throw makeError(TypeError, msg, nonred);
  }
}

function nonzero(value) {
  if (!value) {
    var msg = 'Cannot divide by zero.';
    throw makeError(RangeError, msg, nonzero);
  }
}

function isInteger(num) {
  return Number.isSafeInteger(num);
}

function isSMI(num) {
  return isInteger(num) && num >= -0x3ffffff && num <= 0x3ffffff;
}

function allocate(ArrayType, size) {
  if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
  return new ArrayType(size);
}

function getBase(base) {
  if (base == null) return 10;
  if (typeof base === 'number') return base;

  switch (base) {
    case 'bin':
      return 2;

    case 'oct':
      return 8;

    case 'dec':
      return 10;

    case 'hex':
      return 16;
  }

  return 0;
}
/*
 * Internal
 */


function toBitArray(num) {
  var w = new Array(num.bitLength());

  for (var bit = 0; bit < w.length; bit++) {
    var wbit = bit % 26;
    var off = (bit - wbit) / 26;
    w[bit] = num.words[off] >>> wbit & 1;
  }

  return w;
}

function countBits(w) {
  if (Math.clz32) return 32 - Math.clz32(w);
  var t = w;
  var r = 0;

  if (t >= 0x1000) {
    r += 13;
    t >>>= 13;
  }

  if (t >= 0x40) {
    r += 7;
    t >>>= 7;
  }

  if (t >= 0x8) {
    r += 4;
    t >>>= 4;
  }

  if (t >= 0x02) {
    r += 2;
    t >>>= 2;
  }

  return r + t;
}

function zeroBits(w) {
  // Shortcut.
  if (w === 0) return 26;
  var t = w;
  var r = 0;

  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }

  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }

  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }

  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }

  if ((t & 0x1) === 0) r += 1;
  return r;
}

function parseHex(str, start, end) {
  var len = Math.min(str.length, end);
  var r = 0;
  var z = 0;

  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;
    r <<= 4;
    var b = void 0;

    if (c >= 49 && c <= 54) {
      // 'a' - 'f'
      b = c - 49 + 0xa;
    } else if (c >= 17 && c <= 22) {
      // 'A' - 'F'
      b = c - 17 + 0xa;
    } else {
      // '0' - '9'
      b = c;
    }

    r |= b;
    z |= b;
  }

  if (z & 0xfff0) throw new Error('Invalid string.');
  return r;
}

function parseBase(str, start, end, mul) {
  var len = Math.min(str.length, end);
  var r = 0;
  var b = 0;

  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;
    r *= mul;

    if (c >= 49) {
      // 'a'
      b = c - 49 + 0xa;
    } else if (c >= 17) {
      // 'A'
      b = c - 17 + 0xa;
    } else {
      // '0' - '9'
      b = c;
    }

    if (c < 0 || c > 207 || b >= mul) throw new Error('Invalid string.');
    r += b;
  }

  return r;
}
/*
 * Multiplication
 */


function smallMulTo(self, num, out) {
  var len = self.length + num.length;
  out.negative = self.negative ^ num.negative;

  out._alloc(len);

  out.length = len; // Peel one iteration (compiler can't
  // do it, because of code complexity).

  var a = self.words[0];
  var b = num.words[0];
  var r = a * b;
  var lo = r & 0x3ffffff;
  var carry = r / 0x4000000 | 0;
  var k = 1;
  out.words[0] = lo;

  for (; k < out.length - 1; k++) {
    // Sum all words with the same
    // `i + j = k` and accumulate
    // `ncarry`, note that ncarry
    // could be >= 0x3ffffff.
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var min = Math.max(0, k - self.length + 1);
    var max = Math.min(k, num.length - 1);

    for (var j = min; j <= max; j++) {
      var i = k - j;
      var _a = self.words[i];
      var _b2 = num.words[j];

      var _r5 = _a * _b2 + rword;

      ncarry += _r5 / 0x4000000 | 0;
      rword = _r5 & 0x3ffffff;
    }

    out.words[k] = rword | 0;
    carry = ncarry | 0;
  }

  if (carry !== 0) out.words[k] = carry | 0;else out.length -= 1;
  return out._strip();
}

function bigMulTo(self, num, out) {
  var len = self.length + num.length;
  out.negative = self.negative ^ num.negative;

  out._alloc(len);

  out.length = len;
  var carry = 0;
  var hncarry = 0;
  var k = 0;

  for (; k < out.length - 1; k++) {
    // Sum all words with the same
    // `i + j = k` and accumulate
    // `ncarry`, note that ncarry
    // could be >= 0x3ffffff.
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var min = Math.max(0, k - self.length + 1);
    var max = Math.min(k, num.length - 1);

    for (var j = min; j <= max; j++) {
      var i = k - j;
      var a = self.words[i];
      var b = num.words[j];
      var r = a * b;
      var lo = r & 0x3ffffff;
      ncarry = ncarry + (r / 0x4000000 | 0) | 0;
      lo = lo + rword | 0;
      rword = lo & 0x3ffffff;
      ncarry = ncarry + (lo >>> 26) | 0;
      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }

    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }

  if (carry !== 0) out.words[k] = carry;else out.length -= 1;
  return out._strip();
}

function comb10MulTo(self, num, out) {
  var a = self.words;
  var b = num.words;
  var o = out.words;
  var a0 = a[0] | 0;
  var al0 = a0 & 0x1fff;
  var ah0 = a0 >>> 13;
  var a1 = a[1] | 0;
  var al1 = a1 & 0x1fff;
  var ah1 = a1 >>> 13;
  var a2 = a[2] | 0;
  var al2 = a2 & 0x1fff;
  var ah2 = a2 >>> 13;
  var a3 = a[3] | 0;
  var al3 = a3 & 0x1fff;
  var ah3 = a3 >>> 13;
  var a4 = a[4] | 0;
  var al4 = a4 & 0x1fff;
  var ah4 = a4 >>> 13;
  var a5 = a[5] | 0;
  var al5 = a5 & 0x1fff;
  var ah5 = a5 >>> 13;
  var a6 = a[6] | 0;
  var al6 = a6 & 0x1fff;
  var ah6 = a6 >>> 13;
  var a7 = a[7] | 0;
  var al7 = a7 & 0x1fff;
  var ah7 = a7 >>> 13;
  var a8 = a[8] | 0;
  var al8 = a8 & 0x1fff;
  var ah8 = a8 >>> 13;
  var a9 = a[9] | 0;
  var al9 = a9 & 0x1fff;
  var ah9 = a9 >>> 13;
  var b0 = b[0] | 0;
  var bl0 = b0 & 0x1fff;
  var bh0 = b0 >>> 13;
  var b1 = b[1] | 0;
  var bl1 = b1 & 0x1fff;
  var bh1 = b1 >>> 13;
  var b2 = b[2] | 0;
  var bl2 = b2 & 0x1fff;
  var bh2 = b2 >>> 13;
  var b3 = b[3] | 0;
  var bl3 = b3 & 0x1fff;
  var bh3 = b3 >>> 13;
  var b4 = b[4] | 0;
  var bl4 = b4 & 0x1fff;
  var bh4 = b4 >>> 13;
  var b5 = b[5] | 0;
  var bl5 = b5 & 0x1fff;
  var bh5 = b5 >>> 13;
  var b6 = b[6] | 0;
  var bl6 = b6 & 0x1fff;
  var bh6 = b6 >>> 13;
  var b7 = b[7] | 0;
  var bl7 = b7 & 0x1fff;
  var bh7 = b7 >>> 13;
  var b8 = b[8] | 0;
  var bl8 = b8 & 0x1fff;
  var bh8 = b8 >>> 13;
  var b9 = b[9] | 0;
  var bl9 = b9 & 0x1fff;
  var bh9 = b9 >>> 13;
  var c = 0;
  var lo;
  var mid;
  var hi;
  out.negative = self.negative ^ num.negative;

  out._alloc(20);

  out.length = 19;
  /* k = 0 */

  lo = Math.imul(al0, bl0);
  mid = Math.imul(al0, bh0);
  mid = mid + Math.imul(ah0, bl0) | 0;
  hi = Math.imul(ah0, bh0);
  var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
  w0 &= 0x3ffffff;
  /* k = 1 */

  lo = Math.imul(al1, bl0);
  mid = Math.imul(al1, bh0);
  mid = mid + Math.imul(ah1, bl0) | 0;
  hi = Math.imul(ah1, bh0);
  lo = lo + Math.imul(al0, bl1) | 0;
  mid = mid + Math.imul(al0, bh1) | 0;
  mid = mid + Math.imul(ah0, bl1) | 0;
  hi = hi + Math.imul(ah0, bh1) | 0;
  var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
  w1 &= 0x3ffffff;
  /* k = 2 */

  lo = Math.imul(al2, bl0);
  mid = Math.imul(al2, bh0);
  mid = mid + Math.imul(ah2, bl0) | 0;
  hi = Math.imul(ah2, bh0);
  lo = lo + Math.imul(al1, bl1) | 0;
  mid = mid + Math.imul(al1, bh1) | 0;
  mid = mid + Math.imul(ah1, bl1) | 0;
  hi = hi + Math.imul(ah1, bh1) | 0;
  lo = lo + Math.imul(al0, bl2) | 0;
  mid = mid + Math.imul(al0, bh2) | 0;
  mid = mid + Math.imul(ah0, bl2) | 0;
  hi = hi + Math.imul(ah0, bh2) | 0;
  var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
  w2 &= 0x3ffffff;
  /* k = 3 */

  lo = Math.imul(al3, bl0);
  mid = Math.imul(al3, bh0);
  mid = mid + Math.imul(ah3, bl0) | 0;
  hi = Math.imul(ah3, bh0);
  lo = lo + Math.imul(al2, bl1) | 0;
  mid = mid + Math.imul(al2, bh1) | 0;
  mid = mid + Math.imul(ah2, bl1) | 0;
  hi = hi + Math.imul(ah2, bh1) | 0;
  lo = lo + Math.imul(al1, bl2) | 0;
  mid = mid + Math.imul(al1, bh2) | 0;
  mid = mid + Math.imul(ah1, bl2) | 0;
  hi = hi + Math.imul(ah1, bh2) | 0;
  lo = lo + Math.imul(al0, bl3) | 0;
  mid = mid + Math.imul(al0, bh3) | 0;
  mid = mid + Math.imul(ah0, bl3) | 0;
  hi = hi + Math.imul(ah0, bh3) | 0;
  var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
  w3 &= 0x3ffffff;
  /* k = 4 */

  lo = Math.imul(al4, bl0);
  mid = Math.imul(al4, bh0);
  mid = mid + Math.imul(ah4, bl0) | 0;
  hi = Math.imul(ah4, bh0);
  lo = lo + Math.imul(al3, bl1) | 0;
  mid = mid + Math.imul(al3, bh1) | 0;
  mid = mid + Math.imul(ah3, bl1) | 0;
  hi = hi + Math.imul(ah3, bh1) | 0;
  lo = lo + Math.imul(al2, bl2) | 0;
  mid = mid + Math.imul(al2, bh2) | 0;
  mid = mid + Math.imul(ah2, bl2) | 0;
  hi = hi + Math.imul(ah2, bh2) | 0;
  lo = lo + Math.imul(al1, bl3) | 0;
  mid = mid + Math.imul(al1, bh3) | 0;
  mid = mid + Math.imul(ah1, bl3) | 0;
  hi = hi + Math.imul(ah1, bh3) | 0;
  lo = lo + Math.imul(al0, bl4) | 0;
  mid = mid + Math.imul(al0, bh4) | 0;
  mid = mid + Math.imul(ah0, bl4) | 0;
  hi = hi + Math.imul(ah0, bh4) | 0;
  var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
  w4 &= 0x3ffffff;
  /* k = 5 */

  lo = Math.imul(al5, bl0);
  mid = Math.imul(al5, bh0);
  mid = mid + Math.imul(ah5, bl0) | 0;
  hi = Math.imul(ah5, bh0);
  lo = lo + Math.imul(al4, bl1) | 0;
  mid = mid + Math.imul(al4, bh1) | 0;
  mid = mid + Math.imul(ah4, bl1) | 0;
  hi = hi + Math.imul(ah4, bh1) | 0;
  lo = lo + Math.imul(al3, bl2) | 0;
  mid = mid + Math.imul(al3, bh2) | 0;
  mid = mid + Math.imul(ah3, bl2) | 0;
  hi = hi + Math.imul(ah3, bh2) | 0;
  lo = lo + Math.imul(al2, bl3) | 0;
  mid = mid + Math.imul(al2, bh3) | 0;
  mid = mid + Math.imul(ah2, bl3) | 0;
  hi = hi + Math.imul(ah2, bh3) | 0;
  lo = lo + Math.imul(al1, bl4) | 0;
  mid = mid + Math.imul(al1, bh4) | 0;
  mid = mid + Math.imul(ah1, bl4) | 0;
  hi = hi + Math.imul(ah1, bh4) | 0;
  lo = lo + Math.imul(al0, bl5) | 0;
  mid = mid + Math.imul(al0, bh5) | 0;
  mid = mid + Math.imul(ah0, bl5) | 0;
  hi = hi + Math.imul(ah0, bh5) | 0;
  var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
  w5 &= 0x3ffffff;
  /* k = 6 */

  lo = Math.imul(al6, bl0);
  mid = Math.imul(al6, bh0);
  mid = mid + Math.imul(ah6, bl0) | 0;
  hi = Math.imul(ah6, bh0);
  lo = lo + Math.imul(al5, bl1) | 0;
  mid = mid + Math.imul(al5, bh1) | 0;
  mid = mid + Math.imul(ah5, bl1) | 0;
  hi = hi + Math.imul(ah5, bh1) | 0;
  lo = lo + Math.imul(al4, bl2) | 0;
  mid = mid + Math.imul(al4, bh2) | 0;
  mid = mid + Math.imul(ah4, bl2) | 0;
  hi = hi + Math.imul(ah4, bh2) | 0;
  lo = lo + Math.imul(al3, bl3) | 0;
  mid = mid + Math.imul(al3, bh3) | 0;
  mid = mid + Math.imul(ah3, bl3) | 0;
  hi = hi + Math.imul(ah3, bh3) | 0;
  lo = lo + Math.imul(al2, bl4) | 0;
  mid = mid + Math.imul(al2, bh4) | 0;
  mid = mid + Math.imul(ah2, bl4) | 0;
  hi = hi + Math.imul(ah2, bh4) | 0;
  lo = lo + Math.imul(al1, bl5) | 0;
  mid = mid + Math.imul(al1, bh5) | 0;
  mid = mid + Math.imul(ah1, bl5) | 0;
  hi = hi + Math.imul(ah1, bh5) | 0;
  lo = lo + Math.imul(al0, bl6) | 0;
  mid = mid + Math.imul(al0, bh6) | 0;
  mid = mid + Math.imul(ah0, bl6) | 0;
  hi = hi + Math.imul(ah0, bh6) | 0;
  var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
  w6 &= 0x3ffffff;
  /* k = 7 */

  lo = Math.imul(al7, bl0);
  mid = Math.imul(al7, bh0);
  mid = mid + Math.imul(ah7, bl0) | 0;
  hi = Math.imul(ah7, bh0);
  lo = lo + Math.imul(al6, bl1) | 0;
  mid = mid + Math.imul(al6, bh1) | 0;
  mid = mid + Math.imul(ah6, bl1) | 0;
  hi = hi + Math.imul(ah6, bh1) | 0;
  lo = lo + Math.imul(al5, bl2) | 0;
  mid = mid + Math.imul(al5, bh2) | 0;
  mid = mid + Math.imul(ah5, bl2) | 0;
  hi = hi + Math.imul(ah5, bh2) | 0;
  lo = lo + Math.imul(al4, bl3) | 0;
  mid = mid + Math.imul(al4, bh3) | 0;
  mid = mid + Math.imul(ah4, bl3) | 0;
  hi = hi + Math.imul(ah4, bh3) | 0;
  lo = lo + Math.imul(al3, bl4) | 0;
  mid = mid + Math.imul(al3, bh4) | 0;
  mid = mid + Math.imul(ah3, bl4) | 0;
  hi = hi + Math.imul(ah3, bh4) | 0;
  lo = lo + Math.imul(al2, bl5) | 0;
  mid = mid + Math.imul(al2, bh5) | 0;
  mid = mid + Math.imul(ah2, bl5) | 0;
  hi = hi + Math.imul(ah2, bh5) | 0;
  lo = lo + Math.imul(al1, bl6) | 0;
  mid = mid + Math.imul(al1, bh6) | 0;
  mid = mid + Math.imul(ah1, bl6) | 0;
  hi = hi + Math.imul(ah1, bh6) | 0;
  lo = lo + Math.imul(al0, bl7) | 0;
  mid = mid + Math.imul(al0, bh7) | 0;
  mid = mid + Math.imul(ah0, bl7) | 0;
  hi = hi + Math.imul(ah0, bh7) | 0;
  var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
  w7 &= 0x3ffffff;
  /* k = 8 */

  lo = Math.imul(al8, bl0);
  mid = Math.imul(al8, bh0);
  mid = mid + Math.imul(ah8, bl0) | 0;
  hi = Math.imul(ah8, bh0);
  lo = lo + Math.imul(al7, bl1) | 0;
  mid = mid + Math.imul(al7, bh1) | 0;
  mid = mid + Math.imul(ah7, bl1) | 0;
  hi = hi + Math.imul(ah7, bh1) | 0;
  lo = lo + Math.imul(al6, bl2) | 0;
  mid = mid + Math.imul(al6, bh2) | 0;
  mid = mid + Math.imul(ah6, bl2) | 0;
  hi = hi + Math.imul(ah6, bh2) | 0;
  lo = lo + Math.imul(al5, bl3) | 0;
  mid = mid + Math.imul(al5, bh3) | 0;
  mid = mid + Math.imul(ah5, bl3) | 0;
  hi = hi + Math.imul(ah5, bh3) | 0;
  lo = lo + Math.imul(al4, bl4) | 0;
  mid = mid + Math.imul(al4, bh4) | 0;
  mid = mid + Math.imul(ah4, bl4) | 0;
  hi = hi + Math.imul(ah4, bh4) | 0;
  lo = lo + Math.imul(al3, bl5) | 0;
  mid = mid + Math.imul(al3, bh5) | 0;
  mid = mid + Math.imul(ah3, bl5) | 0;
  hi = hi + Math.imul(ah3, bh5) | 0;
  lo = lo + Math.imul(al2, bl6) | 0;
  mid = mid + Math.imul(al2, bh6) | 0;
  mid = mid + Math.imul(ah2, bl6) | 0;
  hi = hi + Math.imul(ah2, bh6) | 0;
  lo = lo + Math.imul(al1, bl7) | 0;
  mid = mid + Math.imul(al1, bh7) | 0;
  mid = mid + Math.imul(ah1, bl7) | 0;
  hi = hi + Math.imul(ah1, bh7) | 0;
  lo = lo + Math.imul(al0, bl8) | 0;
  mid = mid + Math.imul(al0, bh8) | 0;
  mid = mid + Math.imul(ah0, bl8) | 0;
  hi = hi + Math.imul(ah0, bh8) | 0;
  var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
  w8 &= 0x3ffffff;
  /* k = 9 */

  lo = Math.imul(al9, bl0);
  mid = Math.imul(al9, bh0);
  mid = mid + Math.imul(ah9, bl0) | 0;
  hi = Math.imul(ah9, bh0);
  lo = lo + Math.imul(al8, bl1) | 0;
  mid = mid + Math.imul(al8, bh1) | 0;
  mid = mid + Math.imul(ah8, bl1) | 0;
  hi = hi + Math.imul(ah8, bh1) | 0;
  lo = lo + Math.imul(al7, bl2) | 0;
  mid = mid + Math.imul(al7, bh2) | 0;
  mid = mid + Math.imul(ah7, bl2) | 0;
  hi = hi + Math.imul(ah7, bh2) | 0;
  lo = lo + Math.imul(al6, bl3) | 0;
  mid = mid + Math.imul(al6, bh3) | 0;
  mid = mid + Math.imul(ah6, bl3) | 0;
  hi = hi + Math.imul(ah6, bh3) | 0;
  lo = lo + Math.imul(al5, bl4) | 0;
  mid = mid + Math.imul(al5, bh4) | 0;
  mid = mid + Math.imul(ah5, bl4) | 0;
  hi = hi + Math.imul(ah5, bh4) | 0;
  lo = lo + Math.imul(al4, bl5) | 0;
  mid = mid + Math.imul(al4, bh5) | 0;
  mid = mid + Math.imul(ah4, bl5) | 0;
  hi = hi + Math.imul(ah4, bh5) | 0;
  lo = lo + Math.imul(al3, bl6) | 0;
  mid = mid + Math.imul(al3, bh6) | 0;
  mid = mid + Math.imul(ah3, bl6) | 0;
  hi = hi + Math.imul(ah3, bh6) | 0;
  lo = lo + Math.imul(al2, bl7) | 0;
  mid = mid + Math.imul(al2, bh7) | 0;
  mid = mid + Math.imul(ah2, bl7) | 0;
  hi = hi + Math.imul(ah2, bh7) | 0;
  lo = lo + Math.imul(al1, bl8) | 0;
  mid = mid + Math.imul(al1, bh8) | 0;
  mid = mid + Math.imul(ah1, bl8) | 0;
  hi = hi + Math.imul(ah1, bh8) | 0;
  lo = lo + Math.imul(al0, bl9) | 0;
  mid = mid + Math.imul(al0, bh9) | 0;
  mid = mid + Math.imul(ah0, bl9) | 0;
  hi = hi + Math.imul(ah0, bh9) | 0;
  var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
  w9 &= 0x3ffffff;
  /* k = 10 */

  lo = Math.imul(al9, bl1);
  mid = Math.imul(al9, bh1);
  mid = mid + Math.imul(ah9, bl1) | 0;
  hi = Math.imul(ah9, bh1);
  lo = lo + Math.imul(al8, bl2) | 0;
  mid = mid + Math.imul(al8, bh2) | 0;
  mid = mid + Math.imul(ah8, bl2) | 0;
  hi = hi + Math.imul(ah8, bh2) | 0;
  lo = lo + Math.imul(al7, bl3) | 0;
  mid = mid + Math.imul(al7, bh3) | 0;
  mid = mid + Math.imul(ah7, bl3) | 0;
  hi = hi + Math.imul(ah7, bh3) | 0;
  lo = lo + Math.imul(al6, bl4) | 0;
  mid = mid + Math.imul(al6, bh4) | 0;
  mid = mid + Math.imul(ah6, bl4) | 0;
  hi = hi + Math.imul(ah6, bh4) | 0;
  lo = lo + Math.imul(al5, bl5) | 0;
  mid = mid + Math.imul(al5, bh5) | 0;
  mid = mid + Math.imul(ah5, bl5) | 0;
  hi = hi + Math.imul(ah5, bh5) | 0;
  lo = lo + Math.imul(al4, bl6) | 0;
  mid = mid + Math.imul(al4, bh6) | 0;
  mid = mid + Math.imul(ah4, bl6) | 0;
  hi = hi + Math.imul(ah4, bh6) | 0;
  lo = lo + Math.imul(al3, bl7) | 0;
  mid = mid + Math.imul(al3, bh7) | 0;
  mid = mid + Math.imul(ah3, bl7) | 0;
  hi = hi + Math.imul(ah3, bh7) | 0;
  lo = lo + Math.imul(al2, bl8) | 0;
  mid = mid + Math.imul(al2, bh8) | 0;
  mid = mid + Math.imul(ah2, bl8) | 0;
  hi = hi + Math.imul(ah2, bh8) | 0;
  lo = lo + Math.imul(al1, bl9) | 0;
  mid = mid + Math.imul(al1, bh9) | 0;
  mid = mid + Math.imul(ah1, bl9) | 0;
  hi = hi + Math.imul(ah1, bh9) | 0;
  var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
  w10 &= 0x3ffffff;
  /* k = 11 */

  lo = Math.imul(al9, bl2);
  mid = Math.imul(al9, bh2);
  mid = mid + Math.imul(ah9, bl2) | 0;
  hi = Math.imul(ah9, bh2);
  lo = lo + Math.imul(al8, bl3) | 0;
  mid = mid + Math.imul(al8, bh3) | 0;
  mid = mid + Math.imul(ah8, bl3) | 0;
  hi = hi + Math.imul(ah8, bh3) | 0;
  lo = lo + Math.imul(al7, bl4) | 0;
  mid = mid + Math.imul(al7, bh4) | 0;
  mid = mid + Math.imul(ah7, bl4) | 0;
  hi = hi + Math.imul(ah7, bh4) | 0;
  lo = lo + Math.imul(al6, bl5) | 0;
  mid = mid + Math.imul(al6, bh5) | 0;
  mid = mid + Math.imul(ah6, bl5) | 0;
  hi = hi + Math.imul(ah6, bh5) | 0;
  lo = lo + Math.imul(al5, bl6) | 0;
  mid = mid + Math.imul(al5, bh6) | 0;
  mid = mid + Math.imul(ah5, bl6) | 0;
  hi = hi + Math.imul(ah5, bh6) | 0;
  lo = lo + Math.imul(al4, bl7) | 0;
  mid = mid + Math.imul(al4, bh7) | 0;
  mid = mid + Math.imul(ah4, bl7) | 0;
  hi = hi + Math.imul(ah4, bh7) | 0;
  lo = lo + Math.imul(al3, bl8) | 0;
  mid = mid + Math.imul(al3, bh8) | 0;
  mid = mid + Math.imul(ah3, bl8) | 0;
  hi = hi + Math.imul(ah3, bh8) | 0;
  lo = lo + Math.imul(al2, bl9) | 0;
  mid = mid + Math.imul(al2, bh9) | 0;
  mid = mid + Math.imul(ah2, bl9) | 0;
  hi = hi + Math.imul(ah2, bh9) | 0;
  var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
  w11 &= 0x3ffffff;
  /* k = 12 */

  lo = Math.imul(al9, bl3);
  mid = Math.imul(al9, bh3);
  mid = mid + Math.imul(ah9, bl3) | 0;
  hi = Math.imul(ah9, bh3);
  lo = lo + Math.imul(al8, bl4) | 0;
  mid = mid + Math.imul(al8, bh4) | 0;
  mid = mid + Math.imul(ah8, bl4) | 0;
  hi = hi + Math.imul(ah8, bh4) | 0;
  lo = lo + Math.imul(al7, bl5) | 0;
  mid = mid + Math.imul(al7, bh5) | 0;
  mid = mid + Math.imul(ah7, bl5) | 0;
  hi = hi + Math.imul(ah7, bh5) | 0;
  lo = lo + Math.imul(al6, bl6) | 0;
  mid = mid + Math.imul(al6, bh6) | 0;
  mid = mid + Math.imul(ah6, bl6) | 0;
  hi = hi + Math.imul(ah6, bh6) | 0;
  lo = lo + Math.imul(al5, bl7) | 0;
  mid = mid + Math.imul(al5, bh7) | 0;
  mid = mid + Math.imul(ah5, bl7) | 0;
  hi = hi + Math.imul(ah5, bh7) | 0;
  lo = lo + Math.imul(al4, bl8) | 0;
  mid = mid + Math.imul(al4, bh8) | 0;
  mid = mid + Math.imul(ah4, bl8) | 0;
  hi = hi + Math.imul(ah4, bh8) | 0;
  lo = lo + Math.imul(al3, bl9) | 0;
  mid = mid + Math.imul(al3, bh9) | 0;
  mid = mid + Math.imul(ah3, bl9) | 0;
  hi = hi + Math.imul(ah3, bh9) | 0;
  var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
  w12 &= 0x3ffffff;
  /* k = 13 */

  lo = Math.imul(al9, bl4);
  mid = Math.imul(al9, bh4);
  mid = mid + Math.imul(ah9, bl4) | 0;
  hi = Math.imul(ah9, bh4);
  lo = lo + Math.imul(al8, bl5) | 0;
  mid = mid + Math.imul(al8, bh5) | 0;
  mid = mid + Math.imul(ah8, bl5) | 0;
  hi = hi + Math.imul(ah8, bh5) | 0;
  lo = lo + Math.imul(al7, bl6) | 0;
  mid = mid + Math.imul(al7, bh6) | 0;
  mid = mid + Math.imul(ah7, bl6) | 0;
  hi = hi + Math.imul(ah7, bh6) | 0;
  lo = lo + Math.imul(al6, bl7) | 0;
  mid = mid + Math.imul(al6, bh7) | 0;
  mid = mid + Math.imul(ah6, bl7) | 0;
  hi = hi + Math.imul(ah6, bh7) | 0;
  lo = lo + Math.imul(al5, bl8) | 0;
  mid = mid + Math.imul(al5, bh8) | 0;
  mid = mid + Math.imul(ah5, bl8) | 0;
  hi = hi + Math.imul(ah5, bh8) | 0;
  lo = lo + Math.imul(al4, bl9) | 0;
  mid = mid + Math.imul(al4, bh9) | 0;
  mid = mid + Math.imul(ah4, bl9) | 0;
  hi = hi + Math.imul(ah4, bh9) | 0;
  var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
  w13 &= 0x3ffffff;
  /* k = 14 */

  lo = Math.imul(al9, bl5);
  mid = Math.imul(al9, bh5);
  mid = mid + Math.imul(ah9, bl5) | 0;
  hi = Math.imul(ah9, bh5);
  lo = lo + Math.imul(al8, bl6) | 0;
  mid = mid + Math.imul(al8, bh6) | 0;
  mid = mid + Math.imul(ah8, bl6) | 0;
  hi = hi + Math.imul(ah8, bh6) | 0;
  lo = lo + Math.imul(al7, bl7) | 0;
  mid = mid + Math.imul(al7, bh7) | 0;
  mid = mid + Math.imul(ah7, bl7) | 0;
  hi = hi + Math.imul(ah7, bh7) | 0;
  lo = lo + Math.imul(al6, bl8) | 0;
  mid = mid + Math.imul(al6, bh8) | 0;
  mid = mid + Math.imul(ah6, bl8) | 0;
  hi = hi + Math.imul(ah6, bh8) | 0;
  lo = lo + Math.imul(al5, bl9) | 0;
  mid = mid + Math.imul(al5, bh9) | 0;
  mid = mid + Math.imul(ah5, bl9) | 0;
  hi = hi + Math.imul(ah5, bh9) | 0;
  var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
  w14 &= 0x3ffffff;
  /* k = 15 */

  lo = Math.imul(al9, bl6);
  mid = Math.imul(al9, bh6);
  mid = mid + Math.imul(ah9, bl6) | 0;
  hi = Math.imul(ah9, bh6);
  lo = lo + Math.imul(al8, bl7) | 0;
  mid = mid + Math.imul(al8, bh7) | 0;
  mid = mid + Math.imul(ah8, bl7) | 0;
  hi = hi + Math.imul(ah8, bh7) | 0;
  lo = lo + Math.imul(al7, bl8) | 0;
  mid = mid + Math.imul(al7, bh8) | 0;
  mid = mid + Math.imul(ah7, bl8) | 0;
  hi = hi + Math.imul(ah7, bh8) | 0;
  lo = lo + Math.imul(al6, bl9) | 0;
  mid = mid + Math.imul(al6, bh9) | 0;
  mid = mid + Math.imul(ah6, bl9) | 0;
  hi = hi + Math.imul(ah6, bh9) | 0;
  var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
  w15 &= 0x3ffffff;
  /* k = 16 */

  lo = Math.imul(al9, bl7);
  mid = Math.imul(al9, bh7);
  mid = mid + Math.imul(ah9, bl7) | 0;
  hi = Math.imul(ah9, bh7);
  lo = lo + Math.imul(al8, bl8) | 0;
  mid = mid + Math.imul(al8, bh8) | 0;
  mid = mid + Math.imul(ah8, bl8) | 0;
  hi = hi + Math.imul(ah8, bh8) | 0;
  lo = lo + Math.imul(al7, bl9) | 0;
  mid = mid + Math.imul(al7, bh9) | 0;
  mid = mid + Math.imul(ah7, bl9) | 0;
  hi = hi + Math.imul(ah7, bh9) | 0;
  var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
  w16 &= 0x3ffffff;
  /* k = 17 */

  lo = Math.imul(al9, bl8);
  mid = Math.imul(al9, bh8);
  mid = mid + Math.imul(ah9, bl8) | 0;
  hi = Math.imul(ah9, bh8);
  lo = lo + Math.imul(al8, bl9) | 0;
  mid = mid + Math.imul(al8, bh9) | 0;
  mid = mid + Math.imul(ah8, bl9) | 0;
  hi = hi + Math.imul(ah8, bh9) | 0;
  var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
  w17 &= 0x3ffffff;
  /* k = 18 */

  lo = Math.imul(al9, bl9);
  mid = Math.imul(al9, bh9);
  mid = mid + Math.imul(ah9, bl9) | 0;
  hi = Math.imul(ah9, bh9);
  var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
  c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
  w18 &= 0x3ffffff;
  o[0] = w0;
  o[1] = w1;
  o[2] = w2;
  o[3] = w3;
  o[4] = w4;
  o[5] = w5;
  o[6] = w6;
  o[7] = w7;
  o[8] = w8;
  o[9] = w9;
  o[10] = w10;
  o[11] = w11;
  o[12] = w12;
  o[13] = w13;
  o[14] = w14;
  o[15] = w15;
  o[16] = w16;
  o[17] = w17;
  o[18] = w18;

  if (c !== 0) {
    o[19] = c;
    out.length += 1;
  } // Note: we shouldn't need to strip here.


  return out;
} // Polyfill comb.


if (!Math.imul) comb10MulTo = smallMulTo;
/*
 * Expose
 */

var bn = BN;

var bnBrowser = bn;

/*
 * Constants
 */


var BIG_ENDIAN$1 = new Int8Array(new Int16Array([1]).buffer)[0] === 0;
/**
 * Salsa20
 */

class Salsa20 {
  /**
   * Create a Salsa20 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(16);
    this.stream = new Uint32Array(16);
    this.bytes = new Uint8Array(this.stream.buffer);
    this.pos = 0;
    if (BIG_ENDIAN$1) this.bytes = Buffer.allocUnsafe(64);
  }
  /**
   * Initialize salsa20 with a key, nonce, and counter.
   * @param {Buffer} key
   * @param {Buffer} nonce
   * @param {Number} counter
   */


  init(key, nonce, counter) {
    if (counter == null) counter = 0;
    assert_1(Buffer.isBuffer(key));
    assert_1(Buffer.isBuffer(nonce));
    assert_1(Number.isSafeInteger(counter));
    if (key.length !== 16 && key.length !== 32) throw new RangeError('Invalid key size.');

    if (nonce.length >= 24) {
      key = Salsa20.derive(key, nonce.slice(0, 16));
      nonce = nonce.slice(16);
    }

    this.state[0] = 0x61707865;
    this.state[1] = readU32$6(key, 0);
    this.state[2] = readU32$6(key, 4);
    this.state[3] = readU32$6(key, 8);
    this.state[4] = readU32$6(key, 12);
    this.state[5] = key.length < 32 ? 0x3120646e : 0x3320646e;

    if (nonce.length === 8) {
      this.state[6] = readU32$6(nonce, 0);
      this.state[7] = readU32$6(nonce, 4);
      this.state[8] = counter >>> 0;
      this.state[9] = counter / 0x100000000 >>> 0;
    } else if (nonce.length === 12) {
      this.state[6] = readU32$6(nonce, 0);
      this.state[7] = readU32$6(nonce, 4);
      this.state[8] = readU32$6(nonce, 8);
      this.state[9] = counter >>> 0;
    } else if (nonce.length === 16) {
      this.state[6] = readU32$6(nonce, 0);
      this.state[7] = readU32$6(nonce, 4);
      this.state[8] = readU32$6(nonce, 8);
      this.state[9] = readU32$6(nonce, 12);
    } else {
      throw new RangeError('Invalid nonce size.');
    }

    this.state[10] = key.length < 32 ? 0x79622d36 : 0x79622d32;
    this.state[11] = readU32$6(key, 16 % key.length);
    this.state[12] = readU32$6(key, 20 % key.length);
    this.state[13] = readU32$6(key, 24 % key.length);
    this.state[14] = readU32$6(key, 28 % key.length);
    this.state[15] = 0x6b206574;
    this.pos = 0;
    return this;
  }
  /**
   * Encrypt/decrypt data.
   * @param {Buffer} data - Will be mutated.
   * @returns {Buffer}
   */


  encrypt(data) {
    return this.crypt(data, data);
  }
  /**
   * Encrypt/decrypt data.
   * @param {Buffer} input
   * @param {Buffer} output
   * @returns {Buffer} output
   */


  crypt(input, output) {
    assert_1(Buffer.isBuffer(input));
    assert_1(Buffer.isBuffer(output));
    if (output.length < input.length) throw new Error('Invalid output size.');

    for (var i = 0; i < input.length; i++) {
      if ((this.pos & 63) === 0) {
        this._block();

        this.pos = 0;
      }

      output[i] = input[i] ^ this.bytes[this.pos++];
    }

    return output;
  }
  /**
   * Stir the stream.
   */


  _block() {
    for (var i = 0; i < 16; i++) {
      this.stream[i] = this.state[i];
    }

    for (var _i = 0; _i < 10; _i++) {
      qround$1(this.stream, 0, 4, 8, 12);
      qround$1(this.stream, 5, 9, 13, 1);
      qround$1(this.stream, 10, 14, 2, 6);
      qround$1(this.stream, 15, 3, 7, 11);
      qround$1(this.stream, 0, 1, 2, 3);
      qround$1(this.stream, 5, 6, 7, 4);
      qround$1(this.stream, 10, 11, 8, 9);
      qround$1(this.stream, 15, 12, 13, 14);
    }

    for (var _i2 = 0; _i2 < 16; _i2++) {
      this.stream[_i2] += this.state[_i2];
    }

    if (BIG_ENDIAN$1) {
      for (var _i3 = 0; _i3 < 16; _i3++) {
        writeU32$5(this.bytes, this.stream[_i3], _i3 * 4);
      }
    }

    this.state[8] += 1;
    if (this.state[8] === 0) this.state[9] += 1;
  }
  /**
   * Destroy context.
   */


  destroy() {
    for (var i = 0; i < 16; i++) {
      this.state[i] = 0;
      this.stream[i] = 0;
    }

    if (BIG_ENDIAN$1) {
      for (var _i4 = 0; _i4 < 64; _i4++) {
        this.bytes[_i4] = 0;
      }
    }

    this.pos = 0;
    return this;
  }
  /**
   * Derive key with XSalsa20.
   * @param {Buffer} key
   * @param {Buffer} nonce
   * @returns {Buffer}
   */


  static derive(key, nonce) {
    assert_1(Buffer.isBuffer(key));
    assert_1(Buffer.isBuffer(nonce));
    if (key.length !== 16 && key.length !== 32) throw new RangeError('Invalid key size.');
    if (nonce.length !== 16) throw new RangeError('Invalid nonce size.');
    var state = new Uint32Array(16);
    state[0] = 0x61707865;
    state[1] = readU32$6(key, 0);
    state[2] = readU32$6(key, 4);
    state[3] = readU32$6(key, 8);
    state[4] = readU32$6(key, 12);
    state[5] = key.length < 32 ? 0x3120646e : 0x3320646e;
    state[6] = readU32$6(nonce, 0);
    state[7] = readU32$6(nonce, 4);
    state[8] = readU32$6(nonce, 8);
    state[9] = readU32$6(nonce, 12);
    state[10] = key.length < 32 ? 0x79622d36 : 0x79622d32;
    state[11] = readU32$6(key, 16 % key.length);
    state[12] = readU32$6(key, 20 % key.length);
    state[13] = readU32$6(key, 24 % key.length);
    state[14] = readU32$6(key, 28 % key.length);
    state[15] = 0x6b206574;

    for (var j = 0; j < 10; j++) {
      qround$1(state, 0, 4, 8, 12);
      qround$1(state, 5, 9, 13, 1);
      qround$1(state, 10, 14, 2, 6);
      qround$1(state, 15, 3, 7, 11);
      qround$1(state, 0, 1, 2, 3);
      qround$1(state, 5, 6, 7, 4);
      qround$1(state, 10, 11, 8, 9);
      qround$1(state, 15, 12, 13, 14);
    }

    var out = Buffer.alloc(32);
    writeU32$5(out, state[0], 0);
    writeU32$5(out, state[5], 4);
    writeU32$5(out, state[10], 8);
    writeU32$5(out, state[15], 12);
    writeU32$5(out, state[6], 16);
    writeU32$5(out, state[7], 20);
    writeU32$5(out, state[8], 24);
    writeU32$5(out, state[9], 28);
    return out;
  }

}
/*
 * Static
 */


Salsa20.native = 0;
/*
 * Helpers
 */

function qround$1(x, a, b, c, d) {
  x[b] ^= rotl32$1(x[a] + x[d], 7);
  x[c] ^= rotl32$1(x[b] + x[a], 9);
  x[d] ^= rotl32$1(x[c] + x[b], 13);
  x[a] ^= rotl32$1(x[d] + x[c], 18);
}

function rotl32$1(w, b) {
  return w << b | w >>> 32 - b;
}

function readU32$6(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32$5(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var salsa20 = Salsa20;

var salsa20Browser = salsa20;

var poly1305Browser = poly1305;

/*
 * Constants
 */


var ZERO16$1 = Buffer.alloc(16, 0x00);
/*
 * Secret Box
 */

function seal(msg, key, nonce) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(key));
  assert_1(Buffer.isBuffer(nonce));
  assert_1(key.length === 32);
  assert_1(nonce.length === 24);
  var box = Buffer.alloc(16 + msg.length, 0x00);
  var firstBlock = box.slice(16, 16 + 32);
  var ciphertext = box.slice(16 + 32);
  var salsa = new salsa20Browser();
  var poly = new poly1305Browser();
  var block = Buffer.alloc(64, 0x00);
  var polyKey = block.slice(0, 32);
  var rightSide = block.slice(32);
  salsa.init(key, nonce);
  salsa.encrypt(block); // box = tag || (first-block || msg[32:])

  msg.copy(box, 16);

  for (var i = 0; i < firstBlock.length; i++) {
    firstBlock[i] ^= rightSide[i];
  }

  if (ciphertext.length > 0) {
    salsa.init(key, nonce, 1);
    salsa.encrypt(ciphertext);
  }

  poly.init(polyKey);
  poly.update(firstBlock);
  poly.update(ciphertext);
  poly.final().copy(box, 0);
  return box;
}

function open(sealed, key, nonce) {
  assert_1(Buffer.isBuffer(sealed));
  assert_1(Buffer.isBuffer(key));
  assert_1(Buffer.isBuffer(nonce));
  assert_1(key.length === 32);
  assert_1(nonce.length === 24);
  if (sealed.length < 16) throw new Error('Invalid secret box size.');
  var input = Buffer.from(sealed);
  var tag = input.slice(0, 16);
  var firstBlock = input.slice(16, 16 + 32);
  var ciphertext = input.slice(16 + 32);
  var msg = input.slice(16);
  var salsa = new salsa20Browser();
  var poly = new poly1305Browser();
  var block = Buffer.alloc(64, 0x00);
  var polyKey = block.slice(0, 32);
  var rightSide = block.slice(32, 64);
  salsa.init(key, nonce);
  salsa.encrypt(block);
  poly.init(polyKey);
  poly.update(firstBlock);
  poly.update(ciphertext);
  var valid = poly1305Browser.verify(poly.final(), tag);
  if (!valid) throw new Error('Invalid secret box tag.');

  for (var i = 0; i < firstBlock.length; i++) {
    firstBlock[i] ^= rightSide[i];
  }

  if (ciphertext.length > 0) {
    salsa.init(key, nonce, 1);
    salsa.encrypt(ciphertext);
  }

  return msg;
}

function derive$1(secret, kdf) {
  var key = deriveSecret(secret, kdf);
  return salsa20Browser.derive(key, ZERO16$1);
}
/*
 * Helpers
 */


function deriveSecret(secret, kdf) {
  assert_1(Buffer.isBuffer(secret));

  if (kdf == null) {
    if (secret.length !== 32) throw new Error('Invalid secret size for secret box.');
    return secret;
  }

  if (typeof kdf.digest === 'function') {
    if (kdf.size < 32) throw new Error('Hash is too small for secret box.');
    return kdf.digest(secret).slice(0, 32);
  }

  assert_1(typeof kdf === 'function');
  var key = kdf(secret);
  assert_1(Buffer.isBuffer(key));
  if (key.length < 32) throw new Error('Key is too small for secret box.');
  return key.slice(0, 32);
}
/*
 * Expose
 */


var native_1$2 = 0;
var seal_1 = seal;
var open_1 = open;
var derive_1$1 = derive$1;
var secretbox = {
  native: native_1$2,
  seal: seal_1,
  open: open_1,
  derive: derive_1$1
};

/**
 * Generate pseudo-random bytes.
 * @param {Number} size
 * @returns {Buffer}
 */


function randomBytes(size) {
  assert_1(size >>> 0 === size);
  var array = new Uint8Array(size);
  getRandomValues(array);
  return Buffer.from(array.buffer, array.byteOffset, array.byteLength);
}
/**
 * Generate pseudo-random bytes.
 * @param {Buffer} data
 * @param {Number} [off=0]
 * @param {Number} [size=data.length-off]
 * @returns {Buffer}
 */


function randomFill(data, off, size) {
  assert_1(Buffer.isBuffer(data));
  assert_1(data.buffer instanceof ArrayBuffer);
  assert_1(data.byteOffset >>> 0 === data.byteOffset);
  if (off == null) off = 0;
  assert_1(off >>> 0 === off);
  if (size == null) size = data.length - off;
  assert_1(size >>> 0 === size);
  assert_1(off + size <= data.length);
  var array = new Uint8Array(data.buffer, data.byteOffset + off, size);
  getRandomValues(array);
  return data;
}
/**
 * Generate a random uint32.
 * @returns {Number}
 */


function randomInt() {
  var array = new Uint32Array(1);
  getRandomValues(array);
  return array[0];
}
/**
 * Generate a random uint32 within a range.
 * @param {Number} min - Inclusive.
 * @param {Number} max - Exclusive.
 * @returns {Number}
 */


function randomRange(min, max) {
  assert_1(min >>> 0 === min);
  assert_1(max >>> 0 === max);
  assert_1(max >= min);
  var space = max - min;
  if (space === 0) return min;
  var top = -space >>> 0;
  var array = new Uint32Array(1);
  var x, r;

  do {
    getRandomValues(array);
    x = array[0];
    r = x % space;
  } while (x - r > top);

  return r + min;
}
/*
 * Helpers
 */


function isTesting() {
  return typeof process === 'object' && process && process.env && process.env.NODE_TEST === '1' && !process.browser;
}

function getRandomValues(array) {
  assert_1(array && typeof array.constructor);
  if (array.byteLength > 2 ** 31 - 1) throw new RangeError('The value "size" is out of range.');
  var {
    BYTES_PER_ELEMENT
  } = array.constructor;
  var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  assert_1(BYTES_PER_ELEMENT >>> 0 === BYTES_PER_ELEMENT);
  assert_1(BYTES_PER_ELEMENT <= 4); // Native WebCrypto support.
  // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues

  if (crypto && typeof crypto.getRandomValues === 'function') {
    var max = 65536 / BYTES_PER_ELEMENT;

    if (array.length > max) {
      for (var i = 0; i < array.length; i += max) {
        var j = i + max;
        if (j > array.length) j = array.length;
        crypto.getRandomValues(array.subarray(i, j));
      }
    } else {
      if (array.length > 0) crypto.getRandomValues(array);
    }

    return;
  } // Fallback to Math.random (FOR TESTING ONLY).


  if (isTesting()) {
    var mask = 2 ** (BYTES_PER_ELEMENT * 8);

    for (var _i = 0; _i < array.length; _i++) {
      array[_i] = Math.floor(Math.random() * mask);
    }

    return;
  } // Error if no randomness is available.
  // We don't want people using bad randomness
  // when keys are at stake!


  throw new Error('Entropy source not available.');
}
/*
 * Expose
 */


var native_1$3 = 0;
var randomBytes_1 = randomBytes;
var randomFill_1 = randomFill;
var randomInt_1 = randomInt;
var randomRange_1 = randomRange;
var random = {
  native: native_1$3,
  randomBytes: randomBytes_1,
  randomFill: randomFill_1,
  randomInt: randomInt_1,
  randomRange: randomRange_1
};

var randomBrowser = random;

/*
 * Base64
 */


function encode$1(data) {
  assert_1(Buffer.isBuffer(data));
  return data.toString('base64');
}

function decode$1(str) {
  assert_1(typeof str === 'string');
  if (/[\-_]/.test(str)) throw new Error('Invalid base64 string.');
  var data = Buffer.from(str, 'base64');
  if (str.length !== size64(data.length)) throw new Error('Invalid base64 string.');
  return data;
}

function test(str) {
  assert_1(typeof str === 'string'); // The only way to get an accurate string
  // size for base64 is by allocating a buffer.
  // Note that browserify _does_ allocate a
  // buffer to calculate base64 decoded size.
  //
  // https://github.com/nodejs/node/blob/524dd4/lib/buffer.js#L477
  // https://github.com/nodejs/node/blob/524dd4/src/node_buffer.cc#L250
  // https://github.com/nodejs/node/blob/524dd4/src/string_bytes.cc#L457
  // https://github.com/feross/buffer/blob/b651e3a/index.js#L415

  try {
    decode$1(str);
    return true;
  } catch (e) {
    return false;
  }
}

function encodeURL(data) {
  var raw = encode$1(data);
  var str = raw.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
  return str;
}

function decodeURL(str) {
  assert_1(typeof str === 'string');
  if (/[=\+\/]/.test(str)) throw new Error('Invalid base64-url string.');
  var raw = pad64(str).replace(/\-/g, '+').replace(/_/g, '/');
  return decode$1(raw);
}

function testURL(str) {
  assert_1(typeof str === 'string');

  try {
    decodeURL(str);
    return true;
  } catch (e) {
    return false;
  }
}
/*
 * Helpers
 */


function pad64(str) {
  switch (str.length & 3) {
    case 2:
      str += '==';
      break;

    case 3:
      str += '=';
      break;
  }

  return str;
}

function size64(size) {
  var expect = 4 * size / 3 + 3 & ~3;
  return expect >>> 0;
}
/*
 * Expose
 */


var encode_1 = encode$1;
var decode_1 = decode$1;
var test_1 = test;
var encodeURL_1 = encodeURL;
var decodeURL_1 = decodeURL;
var testURL_1 = testURL;
var base64 = {
  encode: encode_1,
  decode: decode_1,
  test: test_1,
  encodeURL: encodeURL_1,
  decodeURL: decodeURL_1,
  testURL: testURL_1
};

/*
 * Constants
 */


var ZERO = Buffer.alloc(1, 0x00);
var cache = [];
/*
 * Util
 */

function countLeft(data) {
  assert_1(Buffer.isBuffer(data));
  var i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0x00) break;
  }

  var bits = (data.length - i) * 8;
  if (bits === 0) return 0;
  bits -= 8;
  var oct = data[i];

  while (oct) {
    bits += 1;
    oct >>>= 1;
  }

  return bits;
}

function countRight(data) {
  assert_1(Buffer.isBuffer(data));
  var i = data.length - 1;

  for (; i >= 0; i--) {
    if (data[i] !== 0x00) break;
  }

  var bits = (i + 1) * 8;
  if (bits === 0) return 0;
  bits -= 8;
  var oct = data[i];

  while (oct) {
    bits += 1;
    oct >>>= 1;
  }

  return bits;
}

function compareLeft(x, y) {
  assert_1(Buffer.isBuffer(x));
  assert_1(Buffer.isBuffer(y));
  var xp = 0;
  var xl = x.length;
  var yp = 0;
  var yl = y.length;

  while (xl > 0 && x[xp] === 0) {
    xp++, xl--;
  }

  while (yl > 0 && y[yp] === 0) {
    yp++, yl--;
  }

  if (xl < yl) return -1;
  if (xl > yl) return 1;

  for (var i = 0; i < xl; i++) {
    if (x[xp + i] < y[yp + i]) return -1;
    if (x[xp + i] > y[yp + i]) return 1;
  }

  return 0;
}

function compareRight(x, y) {
  assert_1(Buffer.isBuffer(x));
  assert_1(Buffer.isBuffer(y));
  var xl = x.length;
  var yl = y.length;

  while (xl > 0 && x[xl - 1] === 0) {
    xl--;
  }

  while (yl > 0 && y[yl - 1] === 0) {
    yl--;
  }

  if (xl < yl) return -1;
  if (xl > yl) return 1;

  for (var i = xl - 1; i >= 0; i--) {
    if (x[i] < y[i]) return -1;
    if (x[i] > y[i]) return 1;
  }

  return 0;
}

function trimLeft(data) {
  if (data == null) return ZERO;
  assert_1(Buffer.isBuffer(data));
  var i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0x00) break;
  }

  if (i !== 0) data = data.slice(i);
  if (data.length === 0) return ZERO;
  return data;
}

function trimRight(data) {
  if (data == null) return ZERO;
  assert_1(Buffer.isBuffer(data));
  var i = data.length - 1;

  for (; i >= 0; i--) {
    if (data[i] !== 0x00) break;
  }

  if (i + 1 !== data.length) data = data.slice(0, i + 1);
  if (data.length === 0) return ZERO;
  return data;
}

function padLeft(data, size) {
  if (data == null) return getZero(size);
  assert_1(Buffer.isBuffer(data));
  assert_1(size >>> 0 === size);
  if (data.length > size) data = trimLeft(data);
  if (data.length > size) throw new RangeError("Buffer expected to be ".concat(size, " bytes in size."));
  if (data.length === size) return data;
  var out = Buffer.allocUnsafe(size);
  var pos = size - data.length;
  out.fill(0x00, 0, pos);
  data.copy(out, pos);
  return out;
}

function padRight(data, size) {
  if (data == null) return getZero(size);
  assert_1(Buffer.isBuffer(data));
  assert_1(size >>> 0 === size);
  if (data.length > size) data = trimRight(data);
  if (data.length > size) throw new RangeError("Buffer expected to be ".concat(size, " bytes in size."));
  if (data.length === size) return data;
  var out = Buffer.allocUnsafe(size);
  data.copy(out, 0);
  out.fill(0x00, data.length, size);
  return out;
}
/*
 * Helpers
 */


function getZero(size) {
  assert_1(size >>> 0 === size);
  assert_1(size <= 128);

  while (cache.length <= size) {
    cache.push(null);
  }

  var zero = cache[size];

  if (!zero) {
    zero = Buffer.alloc(size, 0x00);
    cache[size] = zero;
  }

  return zero;
}
/*
 * Expose
 */


var countLeft_1 = countLeft;
var countRight_1 = countRight;
var compareLeft_1 = compareLeft;
var compareRight_1 = compareRight;
var trimLeft_1 = trimLeft;
var trimRight_1 = trimRight;
var padLeft_1 = padLeft;
var padRight_1 = padRight;
var util$1 = {
  countLeft: countLeft_1,
  countRight: countRight_1,
  compareLeft: compareLeft_1,
  compareRight: compareRight_1,
  trimLeft: trimLeft_1,
  trimRight: trimRight_1,
  padLeft: padLeft_1,
  padRight: padRight_1
};

var {
  padLeft: padLeft$1,
  padRight: padRight$1
} = util$1;
/*
 * JWK
 */

function privateKeyExportJWK(curve, key) {
  assert_1(curve && typeof curve.publicKeyCreate === 'function');
  var pub = curve.publicKeyCreate(key, false);
  var json = publicKeyExportJWK(curve, pub);

  if (curve.type !== 'short') {
    return {
      kty: 'OKP',
      crv: json.crv,
      x: json.x,
      d: base64.encodeURL(key),
      ext: true
    };
  }

  return {
    kty: 'EC',
    crv: json.crv,
    x: json.x,
    y: json.y,
    d: base64.encodeURL(key),
    ext: true
  };
}

function privateKeyImportJWK(curve, json) {
  assert_1(curve && typeof curve.privateKeyVerify === 'function');
  assert_1(json && typeof json === 'object');
  if (json.kty !== getKTY(curve)) throw new Error('Invalid key type.');
  if (json.crv != null && fromCurve(json.crv) !== curve.id) throw new Error('Invalid curve name.');
  var key = base64.decodeURL(json.d);
  if (curve.type === 'short') key = padLeft$1(key, curve.size);else key = padRight$1(key, curve.size);
  if (!curve.privateKeyVerify(key)) throw new Error('Invalid private key.');
  return key;
}

function publicKeyExportJWK(curve, key) {
  assert_1(curve && typeof curve.publicKeyExport === 'function');
  var pub = curve.publicKeyExport(key);

  if (curve.type !== 'short') {
    // Note: The RFC says to use only `x`
    // as the coordinate name even though
    // in reality it should probably be
    // `u` or `y`.
    return {
      kty: 'OKP',
      crv: toCurve(curve.id),
      x: base64.encodeURL(pub),
      ext: true
    };
  }

  var x = pub.slice(0, curve.size);
  var y = pub.slice(curve.size, curve.size * 2);
  return {
    kty: 'EC',
    crv: toCurve(curve.id),
    x: base64.encodeURL(x),
    y: base64.encodeURL(y),
    ext: true
  };
}

function publicKeyImportJWK(curve, json, compress) {
  assert_1(curve && typeof curve.publicKeyImport === 'function');
  assert_1(json && typeof json === 'object');
  if (json.kty !== getKTY(curve)) throw new Error('Invalid key type.');
  if (json.crv != null && fromCurve(json.crv) !== curve.id) throw new Error('Invalid curve name.');

  if (curve.type !== 'short') {
    var _x = padRight$1(base64.decodeURL(json.x), curve.size);

    return curve.publicKeyImport(_x);
  }

  var x = padLeft$1(base64.decodeURL(json.x), curve.size);
  var y = padLeft$1(base64.decodeURL(json.y), curve.size);
  var pub = Buffer.concat([x, y]);
  return curve.publicKeyImport(pub, compress);
}
/*
 * Helpers
 */


function getKTY(curve) {
  return curve.type === 'short' ? 'EC' : 'OKP';
}

function toCurve(id) {
  assert_1(typeof id === 'string');

  switch (id) {
    case 'P192':
      return 'P-192';

    case 'P224':
      return 'P-224';

    case 'P256':
      return 'P-256';

    case 'P384':
      return 'P-384';

    case 'P521':
      return 'P-521';

    case 'SECP256K1':
      return 'P-256K';

    case 'ED25519':
      return 'Ed25519';

    case 'ED448':
      return 'Ed448';

    default:
      return id;
  }
}

function fromCurve(crv) {
  assert_1(typeof crv === 'string');

  switch (crv) {
    case 'P-192':
      return 'P192';

    case 'P-224':
      return 'P224';

    case 'P-256':
      return 'P256';

    case 'P-384':
      return 'P384';

    case 'P-521':
      return 'P521';

    case 'P-256K':
      return 'SECP256K1';

    case 'Ed25519':
      return 'ED25519';

    case 'Ed448':
      return 'ED448';

    default:
      return crv;
  }
}
/*
 * Expose
 */


var privateKeyExportJWK_1 = privateKeyExportJWK;
var privateKeyImportJWK_1 = privateKeyImportJWK;
var publicKeyExportJWK_1 = publicKeyExportJWK;
var publicKeyImportJWK_1 = publicKeyImportJWK;
var eckey = {
  privateKeyExportJWK: privateKeyExportJWK_1,
  privateKeyImportJWK: privateKeyImportJWK_1,
  publicKeyExportJWK: publicKeyExportJWK_1,
  publicKeyImportJWK: publicKeyImportJWK_1
};

/*
 * Constants
 */


var EOF = -1;
var INT = 0x02;
var BIT = 0x03;
var OCT = 0x04;
var NULL = 0x05;
var OID = 0x06;
var SEQ = 0x30;
var DSA_OID = Buffer.from('2a8648ce380401', 'hex');
var RSA_OID = Buffer.from('2a864886f70d010101', 'hex');
var ECDSA_OID = Buffer.from('2a8648ce3d0201', 'hex');
var EDDSA_OID = Buffer.from('2b06010401da47040c01', 'hex');
var EMPTY$1 = Buffer.alloc(0);
var ZERO$1 = Buffer.alloc(1, 0x00);
/*
 * Encoding
 */

function encodeSEC1(pki) {
  assert_1(pki && typeof pki === 'object');
  var items = [encodeByte(pki.version), encodeOct(pki.key)];
  if (pki.oid) items.push(encodeExplicit(encodeOID(pki.oid), 0));
  if (pki.pub) items.push(encodeExplicit(encodeBit(pki.pub), 1));
  return encodeSeq(items);
}

function encodePKCS8(pki) {
  assert_1(pki && typeof pki === 'object');
  return encodeSeq([encodeByte(pki.version), encodeAlgorithm(pki.algorithm), encodeOct(pki.key)]);
}

function encodeSPKI(spki) {
  assert_1(spki && typeof spki === 'object');
  return encodeSeq([encodeAlgorithm(spki.algorithm), encodeBit(spki.key)]);
}

function encodeAlgorithm(algorithm) {
  assert_1(algorithm && typeof algorithm === 'object');
  var params = EMPTY$1;
  if (algorithm.type !== NULL) params = encodeNode(algorithm.params, algorithm.type);
  return encodeSeq([encodeOID(algorithm.oid), params]);
}

function encodeParams(p, q, g) {
  return Buffer.concat([encodeInt(p), encodeInt(q), encodeInt(g)]);
}

function encodeInt(data) {
  assert_1(Buffer.isBuffer(data));
  if (data.length === 0) data = ZERO$1;
  var i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0x00) break;
  }

  if (i === data.length) return encodeNode(ZERO$1, INT);
  data = data.slice(i);
  if (data[0] & 0x80) data = Buffer.concat([ZERO$1, data]);
  return encodeNode(data, INT);
}

function encodeByte(num) {
  assert_1((num & 0xff) === num);
  return encodeInt(Buffer.from([num]));
}

function encodeBit(data) {
  assert_1(Buffer.isBuffer(data));
  return encodeNode(Buffer.concat([ZERO$1, data]), BIT);
}

function encodeOct(data) {
  return encodeNode(data, OCT);
}

function encodeOID(data) {
  return encodeNode(data, OID);
}

function encodeSeq(items) {
  assert_1(Array.isArray(items));
  return encodeNode(Buffer.concat(items), SEQ);
}

function encodeNode(data, type) {
  assert_1(Buffer.isBuffer(data));
  assert_1((type & 0xff) === type);
  var size = 0;
  var bytes = 0;
  size += 1;
  size += 1;

  if (data.length >= 0x80) {
    var len = data.length;

    while (len) {
      size += 1;
      bytes += 1;
      len >>>= 8;
    }
  }

  size += data.length;
  var out = Buffer.allocUnsafe(size);
  var pos = 0;
  out[pos] = type;
  pos += 1;

  if (bytes) {
    out[pos] = 0x80 | bytes;
    pos += 1;
    var _len = data.length;

    for (var i = bytes - 1; i >= 0; i--) {
      out[pos + i] = _len;
      _len >>>= 8;
    }

    pos += bytes;
  } else {
    out[pos] = data.length;
    pos += 1;
  }

  data.copy(out, pos);
  return out;
}

function encodeExplicit(data, type) {
  assert_1((type & 0xff) === type);
  return encodeNode(data, 0xa0 | type);
}
/*
 * Decoding
 */


function decodeSEC1(raw) {
  return readSEC1(raw, 0)[0];
}

function decodePKCS8(raw) {
  return readPKCS8(raw, 0)[0];
}

function decodeSPKI(raw) {
  return readSPKI(raw, 0)[0];
}

function decodeAlgorithm(raw) {
  return readAlgorithm(raw, 0)[0];
}

function decodeParams(raw) {
  return readParams(raw, 0)[0];
}

function decodeInt(raw) {
  return readInt(raw, 0)[0];
}

function decodeOct(raw) {
  return readOct(raw, 0)[0];
}

function readSEC1(raw, pos) {
  [raw, pos] = readSeq(raw, pos);
  var end = pos;
  pos = 0;
  var version, key, oidr, pubr;
  var oid = null;
  var pub = null;
  [version, pos] = readByte(raw, pos);
  [key, pos] = readOct(raw, pos);
  [oidr, pos] = readExplicit(raw, pos, 0);

  if (oidr) {
    try {
      [oid] = readOID(oidr, 0);
    } catch (e) {
    }
  }

  [pubr, pos] = readExplicit(raw, pos, 1);
  if (pubr) [pub] = readBit(pubr, 0);
  return [{
    version,
    key,
    oid,
    pub
  }, end];
}

function readPKCS8(raw, pos) {
  [raw, pos] = readSeq(raw, pos);
  var end = pos;
  pos = 0;
  var version, algorithm, key;
  [version, pos] = readByte(raw, pos);
  [algorithm, pos] = readAlgorithm(raw, pos);
  [key, pos] = readOct(raw, pos);
  return [{
    version,
    algorithm,
    key
  }, end];
}

function readSPKI(raw, pos) {
  [raw, pos] = readSeq(raw, pos);
  var end = pos;
  pos = 0;
  var algorithm, key;
  [algorithm, pos] = readAlgorithm(raw, pos);
  [key, pos] = readBit(raw, pos);
  return [{
    algorithm,
    key
  }, end];
}

function readAlgorithm(raw, pos) {
  [raw, pos] = readSeq(raw, pos);
  var end = pos;
  pos = 0;
  var oid;
  [oid, pos] = readOID(raw, pos);
  var type = pos < raw.length ? raw[pos] : EOF;
  var params = EMPTY$1;

  switch (type) {
    case EOF:
      type = NULL;
      break;

    case NULL:
      pos += 1;
      assert_1(pos < raw.length);
      assert_1(raw[pos] === 0x00);
      break;

    default:
      [params] = readNode(raw, pos, type);
      break;
  }

  return [{
    oid,
    type,
    params
  }, end];
}

function readParams(raw, pos) {
  var p, q, g;
  [p, pos] = readInt(raw, pos);
  [q, pos] = readInt(raw, pos);
  [g, pos] = readInt(raw, pos);
  return [[p, q, g], pos];
}

function readInt(data, pos) {
  [data, pos] = readNode(data, pos, INT);
  assert_1(data.length > 0);
  var i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0x00) break;
  }

  if (i === data.length) return [ZERO$1, pos];
  if (i === 0 && data[0] & 0x80) throw new Error('Integer is negative.');
  return [data.slice(i), pos];
}

function readByte(data, pos) {
  [data, pos] = readInt(data, pos);
  assert_1(data.length === 1);
  return [data[0], pos];
}

function readBit(data, pos) {
  [data, pos] = readNode(data, pos, BIT);
  assert_1(data.length > 0);
  assert_1(data[0] === 0x00);
  return [data.slice(1), pos];
}

function readOct(data, pos) {
  return readNode(data, pos, OCT);
}

function readOID(data, pos) {
  return readNode(data, pos, OID);
}

function readSeq(data, pos) {
  return readNode(data, pos, SEQ);
}

function readNode(data, pos, type) {
  assert_1(Buffer.isBuffer(data));
  assert_1(pos >>> 0 === pos);
  assert_1(pos < data.length);
  assert_1((type & 0xff) === type);
  assert_1(data[pos] === type);
  pos += 1;
  var len;
  [len, pos] = readSize(data, pos);
  assert_1(pos + len <= data.length);
  var body = data.slice(pos, pos + len);
  pos += len;
  return [body, pos];
}

function readExplicit(data, pos, type) {
  assert_1(Buffer.isBuffer(data));
  assert_1(pos >>> 0 === pos);
  assert_1(pos < data.length);
  assert_1((type & 0xff) === type);

  try {
    return readNode(data, pos, 0xa0 | type);
  } catch (e) {
    return [null, pos];
  }
}

function readSize(data, pos) {
  assert_1(Buffer.isBuffer(data));
  assert_1(pos >>> 0 === pos);
  assert_1(pos < data.length);
  var field = data[pos];
  var bytes = field & 0x7f;
  pos += 1; // Definite form

  if ((field & 0x80) === 0) {
    // Short form
    return [bytes, pos];
  } // Indefinite form.


  if (bytes === 0) throw new Error('Indefinite length.');
  var len = 0;

  for (var i = 0; i < bytes; i++) {
    assert_1(pos < data.length);
    var ch = data[pos];
    pos += 1;
    if (len >= 1 << 23) throw new Error('Length too large.');
    len *= 0x100;
    len += ch;
    if (len === 0) throw new Error('Unexpected leading zeroes.');
  }

  if (len < 0x80) throw new Error('Non-minimal length.');
  return [len, pos];
} // Make eslint happy.
/*
 * Expose
 */

var INT_1 = INT;
var BIT_1 = BIT;
var OCT_1 = OCT;
var NULL_1 = NULL;
var OID_1 = OID;
var SEQ_1 = SEQ;
var DSA_OID_1 = DSA_OID;
var RSA_OID_1 = RSA_OID;
var ECDSA_OID_1 = ECDSA_OID;
var EDDSA_OID_1 = EDDSA_OID;
var encodeSEC1_1 = encodeSEC1;
var encodePKCS8_1 = encodePKCS8;
var encodeSPKI_1 = encodeSPKI;
var encodeAlgorithm_1 = encodeAlgorithm;
var encodeParams_1 = encodeParams;
var encodeInt_1 = encodeInt;
var encodeOct_1 = encodeOct;
var decodeSEC1_1 = decodeSEC1;
var decodePKCS8_1 = decodePKCS8;
var decodeSPKI_1 = decodeSPKI;
var decodeAlgorithm_1 = decodeAlgorithm;
var decodeParams_1 = decodeParams;
var decodeInt_1 = decodeInt;
var decodeOct_1 = decodeOct;
var asn1Mini = {
  INT: INT_1,
  BIT: BIT_1,
  OCT: OCT_1,
  NULL: NULL_1,
  OID: OID_1,
  SEQ: SEQ_1,
  DSA_OID: DSA_OID_1,
  RSA_OID: RSA_OID_1,
  ECDSA_OID: ECDSA_OID_1,
  EDDSA_OID: EDDSA_OID_1,
  encodeSEC1: encodeSEC1_1,
  encodePKCS8: encodePKCS8_1,
  encodeSPKI: encodeSPKI_1,
  encodeAlgorithm: encodeAlgorithm_1,
  encodeParams: encodeParams_1,
  encodeInt: encodeInt_1,
  encodeOct: encodeOct_1,
  decodeSEC1: decodeSEC1_1,
  decodePKCS8: decodePKCS8_1,
  decodeSPKI: decodeSPKI_1,
  decodeAlgorithm: decodeAlgorithm_1,
  decodeParams: decodeParams_1,
  decodeInt: decodeInt_1,
  decodeOct: decodeOct_1
};

/**
 * Mont
 */


class Mont$1 {
  constructor(name, bits, size, oid, ed) {
    assert_1(typeof name === 'string');
    assert_1(bits >>> 0 === bits);
    assert_1(size >>> 0 === size);
    assert_1(typeof oid === 'string');
    assert_1(ed && typeof ed === 'object');
    this.id = name;
    this.type = 'mont';
    this.oid = Buffer.from(oid, 'hex');
    this.ed = ed;
    this.bits = bits;
    this.size = size;
    this.native = ed.native;
  }

  privateKeyGenerate() {
    return this.ed.scalarGenerate();
  }

  privateKeyVerify(key) {
    assert_1(Buffer.isBuffer(key));
    return key.length === this.size;
  }

  privateKeyExport(key) {
    if (!this.privateKeyVerify(key)) throw new Error('Invalid private key.');
    return asn1Mini.encodeOct(key);
  }

  privateKeyImport(raw) {
    var key = asn1Mini.decodeOct(raw);
    if (!this.privateKeyVerify(key)) throw new Error('Invalid private key.');
    return key;
  }

  privateKeyExportPKCS8(key) {
    return asn1Mini.encodePKCS8({
      version: 0,
      algorithm: {
        oid: this.oid,
        type: asn1Mini.NULL,
        params: null
      },
      key: this.privateKeyExport(key)
    });
  }

  privateKeyImportPKCS8(raw) {
    var pki = asn1Mini.decodePKCS8(raw);
    assert_1(pki.version === 0 || pki.version === 1);
    assert_1(pki.algorithm.oid.equals(this.oid));
    assert_1(pki.algorithm.type === asn1Mini.NULL);
    return this.privateKeyImport(pki.key);
  }

  privateKeyExportJWK(key) {
    return eckey.privateKeyExportJWK(this, key);
  }

  privateKeyImportJWK(json) {
    return eckey.privateKeyImportJWK(this, json);
  }

  publicKeyCreate(key) {
    var scalar = this.ed.scalarClamp(key);
    var pub = this.ed.publicKeyFromScalar(scalar);
    return this.ed.publicKeyConvert(pub);
  }

  _scalarBaseMul(key) {
    // Exposed for testing only.
    if (this.ed.x) {
      var scalar = this.ed.x.decodeScalar(key);
      var point = this.ed.x.g.mul(scalar);
      return point.encode();
    }

    return this.publicKeyCreate(key);
  }

  publicKeyVerify(key) {
    assert_1(Buffer.isBuffer(key));
    return key.length === this.size;
  }

  publicKeyExport(key) {
    if (!this.publicKeyVerify(key)) throw new Error('Invalid public key.');
    return Buffer.from(key);
  }

  publicKeyImport(raw) {
    if (!this.publicKeyVerify(raw)) throw new Error('Invalid public key.');
    return Buffer.from(raw);
  }

  publicKeyExportSPKI(key) {
    return asn1Mini.encodeSPKI({
      algorithm: {
        oid: this.oid,
        type: asn1Mini.NULL,
        params: null
      },
      key: this.publicKeyExport(key)
    });
  }

  publicKeyImportSPKI(raw) {
    var spki = asn1Mini.decodeSPKI(raw);
    assert_1(spki.algorithm.oid.equals(this.oid));
    assert_1(spki.algorithm.type === asn1Mini.NULL);
    return this.publicKeyImport(spki.key);
  }

  publicKeyExportJWK(key) {
    return eckey.publicKeyExportJWK(this, key);
  }

  publicKeyImportJWK(json) {
    return eckey.publicKeyImportJWK(this, json, false);
  }

  derive(pub, priv) {
    return this.ed.exchangeWithScalar(pub, priv);
  }

}
/*
 * Expose
 */


var mont = Mont$1;

var {
  custom: custom$2
} = customBrowser;
/*
 * Constants
 */

var types$1 = {
  AFFINE: 0,
  JACOBIAN: 1,
  PROJECTIVE: 2
};
var jsfIndex = [-3, // -1 -1
-1, // -1 0
-5, // -1 1
-7, // 0 -1
0, // 0 0
7, // 0 1
5, // 1 -1
1, // 1 0
3 // 1 1
];
/**
 * Curve
 */

class Curve {
  constructor(type, conf) {
    this.id = null;
    this.ossl = null;
    this.type = 'base';
    this.endian = 'be';
    this.hash = null;
    this.prefix = null;
    this.context = false;
    this.p = null;
    this.red = null;
    this.fieldSize = 0;
    this.fieldBits = 0;
    this.signBit = 0;
    this.zero = null;
    this.one = null;
    this.two = null;
    this.three = null;
    this.twisted = false;
    this.extended = false;
    this.n = null;
    this.h = null;
    this.g = null;
    this.nh = null;
    this.scalarSize = 0;
    this.scalarBits = 0;
    this.mask = null;
    this.maxwellTrick = false;
    this.redN = null;
    this.blinding = null;
    this.init(type, conf);
  }

  init(type, conf) {
    assert$3(typeof type === 'string');
    assert$3(conf && typeof conf === 'object');
    assert$3(conf.p != null, 'Must pass a prime.'); // Meta.

    this.id = conf.id || null;
    this.ossl = conf.ossl || null;
    this.type = type;
    this.endian = conf.endian || (type === 'short' ? 'be' : 'le');
    this.hash = conf.hash || null;
    this.prefix = conf.prefix ? Buffer.from(conf.prefix, 'binary') : null;
    this.context = conf.context || false; // Prime.

    this.p = new bnBrowser(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime.

    this.red = conf.prime ? bnBrowser.red(conf.prime) : bnBrowser.mont(this.p); // Precalculate encoding length.

    this.fieldSize = this.p.byteLength();
    this.fieldBits = this.p.bitLength();
    this.signBit = this.fieldSize * 8 - 1; // Figure out where the sign bit goes on edwards/mont.

    if (this.p.testn(this.signBit)) {
      // If the hi bit is set on our prime, we need an
      // extra byte to encode the sign bit (a la Ed448).
      if (this.type === 'edwards') this.fieldSize += 1; // Move the sign bit over.

      if (this.type === 'mont' || this.type === 'edwards') this.signBit += 8;
    } // Useful for many curves.


    this.zero = new bnBrowser(0).toRed(this.red);
    this.one = new bnBrowser(1).toRed(this.red);
    this.two = new bnBrowser(2).toRed(this.red);
    this.three = new bnBrowser(3).toRed(this.red); // Necessary for edwards curves.

    if (this.type === 'edwards' && conf.a != null) {
      var a = new bnBrowser(conf.a, 16).toRed(this.red);
      this.twisted = a.cmp(this.one) !== 0;
      this.extended = a.cmp(this.one.redNeg()) === 0;
    } // Curve configuration, optional.


    this.n = conf.n ? new bnBrowser(conf.n, 16) : new bnBrowser(0);
    this.h = conf.h ? new bnBrowser(conf.h, 16) : new bnBrowser(0);
    this.g = conf.g ? this.pointFromJSON(conf.g) : this.point();
    this.nh = this.n.ushrn(1);
    this.scalarSize = this.n.byteLength();
    this.scalarBits = this.n.bitLength();
    this.mask = new Mask(this); // Generalized Greg Maxwell's trick.

    this.maxwellTrick = !this.n.isZero() && this.p.div(this.n).cmpn(100) <= 0;
    this.redN = this.n.toRed(this.red); // Scalar blinding.

    this.blinding = null;
    return this;
  }

  point() {
    throw new Error('Not implemented.');
  }

  validate() {
    throw new Error('Not implemented.');
  }

  precompute(rng) {
    assert$3(!this.g.isInfinity(), 'Must have base point.');
    assert$3(!this.n.isZero(), 'Must have order.');
    this.g.precompute(this.n.bitLength() + 1, rng);
    this.blinding = this._scalarBlinding(rng);
    return this;
  }

  encodeField(num) {
    assert$3(num instanceof bnBrowser);
    assert$3(!num.red);
    return num.encode(this.endian, this.fieldSize);
  }

  decodeField(bytes) {
    assert$3(Buffer.isBuffer(bytes));
    if (bytes.length !== this.fieldSize) throw new Error('Invalid field element size.');
    return bnBrowser.decode(bytes, this.endian);
  }

  encodeScalar(num) {
    assert$3(num instanceof bnBrowser);
    assert$3(!num.red);
    return num.encode(this.endian, this.scalarSize);
  }

  decodeScalar(bytes) {
    assert$3(Buffer.isBuffer(bytes));
    if (bytes.length !== this.scalarSize) throw new Error('Invalid scalar size.');
    return bnBrowser.decode(bytes, this.endian);
  }

  encodePoint(point, compact) {
    assert$3(point instanceof Point);
    return point.encode(compact);
  }

  decodePoint(bytes) {
    throw new Error('Not implemented.');
  }

  splitHash(bytes) {
    return this.mask.splitHash(bytes);
  }

  clamp(bytes) {
    return this.mask.clamp(bytes);
  }

  isClamped(bytes) {
    return this.mask.isClamped(bytes);
  }

  getBlinding() {
    if (!this.blinding) return [new bnBrowser(1), new bnBrowser(1)];
    return this.blinding;
  }

  _scalarBlinding(rng) {
    if (!rng) return null; // We blind scalar multiplications too.
    // Our bigint implementation is only
    // constant time for 235-285 bit ints.
    // This is only effective if an attacker
    // is not able to observe the start up.

    for (;;) {
      var blind = bnBrowser.random(rng, 1, this.n);

      try {
        return [blind, blind.invert(this.n)];
      } catch (e) {
        continue;
      }
    }
  }

  _simpleMul(p, k, initial, jacobian) {
    assert$3(p instanceof Point);
    assert$3(k instanceof bnBrowser);
    assert$3(!k.red);
    assert$3(initial == null || initial instanceof Point);
    assert$3(typeof jacobian === 'boolean');
    var x = k.abs();
    var r = initial || this.jpoint();
    assert$3(r.type !== types$1.AFFINE);

    while (!x.isZero()) {
      if (x.isOdd()) {
        if (p.type === types$1.AFFINE) r = r.mixedAdd(p);else r = r.add(p);
      }

      p = p.dbl();
      x.iushrn(1);
    }

    if (k.sign() < 0) r = r.neg();
    if (jacobian) return r;
    return p.type === types$1.AFFINE ? r.toP() : r;
  }

  _fixedNafMul(p, k, initial, jacobian) {
    assert$3(p instanceof Point);
    assert$3(k instanceof bnBrowser);
    assert$3(initial == null || initial instanceof Point);
    assert$3(typeof jacobian === 'boolean');
    assert$3(p.precomputed);

    var {
      step,
      points
    } = p._getDoubles(0, 0);

    var naf = getNAF(k, 1, this.n);
    var I = ((1 << step + 1) - (step % 2 === 0 ? 2 : 1)) / 3; // Translate into more windowed form.

    var repr = [];

    for (var j = 0; j < naf.length; j += step) {
      var nafW = 0;

      for (var _k = j + step - 1; _k >= j; _k--) {
        nafW = (nafW << 1) + naf[_k];
      }

      repr.push(nafW);
    }

    var a = initial || this.jpoint();
    var b = this.jpoint();
    assert$3(a.type !== types$1.AFFINE);

    for (var i = I; i > 0; i--) {
      for (var _j = 0; _j < repr.length; _j++) {
        var _nafW = repr[_j];

        if (p.type === types$1.AFFINE) {
          if (_nafW === i) b = b.mixedAdd(points[_j]);else if (_nafW === -i) b = b.mixedAdd(points[_j].neg());
        } else {
          if (_nafW === i) b = b.add(points[_j]);else if (_nafW === -i) b = b.add(points[_j].neg());
        }
      }

      a = a.add(b);
    }

    if (jacobian) return a;
    return p.type === types$1.AFFINE ? a.toP() : a;
  }

  _wnafMul(p, k, initial, jacobian) {
    assert$3(p instanceof Point);
    assert$3(k instanceof bnBrowser);
    assert$3(initial == null || initial instanceof Point);
    assert$3(typeof jacobian === 'boolean'); // Precompute window.

    var nafPoints = p._getNAFPoints(4);

    var w = nafPoints.wnd;
    var wnd = nafPoints.points; // Get NAF form.

    var naf = getNAF(k, w, this.n); // Add `this`*(N+1) for every w-NAF index.

    var acc = this.jpoint();

    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes.
      var _k2 = 0;

      for (; i >= 0 && naf[i] === 0; i--) {
        _k2 += 1;
      }

      if (i >= 0) _k2 += 1;
      acc = acc.dblp(_k2);
      if (i < 0) break;
      var z = naf[i];
      assert$3(z !== 0);

      if (p.type === types$1.AFFINE) {
        // J +- P
        if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }

    if (initial) acc = acc.add(initial);
    if (jacobian) return acc;
    return p.type === types$1.AFFINE ? acc.toP() : acc;
  }

  _wnafMulAdd(defW, points, coeffs, initial, jacobian) {
    assert$3(defW >>> 0 === defW);
    assert$3(Array.isArray(points));
    assert$3(Array.isArray(coeffs));
    assert$3(initial == null || initial instanceof Point);
    assert$3(typeof jacobian === 'boolean');
    assert$3(points.length === coeffs.length); // Type checking.

    var type = points.length > 0 ? points[0].type : types$1.AFFINE; // Pad to even.

    if (points.length & 1) {
      if (type === types$1.AFFINE) points.push(this.point());else points.push(this.jpoint());
      coeffs.push(new bnBrowser(0));
    }

    var len = points.length;
    var width = new Array(len);
    var wnd = new Array(len);
    var naf = new Array(len);
    var max = 0; // Fill all arrays.

    for (var i = 0; i < len; i++) {
      var point = points[i];
      assert$3(point instanceof Point);
      if (point.type !== type) throw new Error('Cannot mix points.');

      var nafPoints = point._getNAFPoints(defW);

      width[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
      naf[i] = null;
    } // Comb small window NAFs.


    for (var _i = len - 1; _i >= 1; _i -= 2) {
      var a = _i - 1;
      var b = _i;

      if (width[a] !== 1 || width[b] !== 1) {
        naf[a] = getNAF(coeffs[a], width[a], this.n);
        naf[b] = getNAF(coeffs[b], width[b], this.n);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [points[a], // 1
      null, // 3
      null, // 5
      points[b] // 7
      ];

      if (type === types$1.AFFINE) {
        // Try to avoid Projective points, if possible.
        if ((points[a].inf | points[b].inf) === 0) {
          if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
          }
        }

        if (comb[1] === null) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
      } else {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].add(points[b].neg());
      }

      var jsf = getJSF(coeffs[a], coeffs[b], this.n);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);

      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = jsfIndex[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var tmp = new Array(len);
    var acc = this.jpoint();

    for (var _i2 = max; _i2 >= 0; _i2--) {
      var k = 0;

      while (_i2 >= 0) {
        var zero = true;

        for (var _j2 = 0; _j2 < len; _j2++) {
          tmp[_j2] = naf[_j2][_i2] | 0;
          if (tmp[_j2] !== 0) zero = false;
        }

        if (!zero) break;
        k += 1;
        _i2 -= 1;
      }

      if (_i2 >= 0) k += 1;
      acc = acc.dblp(k);
      if (_i2 < 0) break;

      for (var _j3 = 0; _j3 < len; _j3++) {
        var z = tmp[_j3];
        if (z === 0) continue;
        var p = null;
        if (z > 0) p = wnd[_j3][z - 1 >> 1];else if (z < 0) p = wnd[_j3][-z - 1 >> 1].neg();
        if (p.type === types$1.AFFINE) acc = acc.mixedAdd(p);else acc = acc.add(p);
      }
    }

    if (initial) acc = acc.add(initial);
    if (jacobian) return acc;
    return type === types$1.AFFINE ? acc.toP() : acc;
  }

  mulAll(points, coeffs) {
    return this._mulAll(points, coeffs, null, false);
  }

  jmulAll(points, coeffs) {
    return this._mulAll(points, coeffs, null, true);
  }

}
/**
 * Mask
 */


class Mask {
  constructor(curve) {
    assert$3(curve instanceof Curve);
    var bytes = curve.p.byteLength();
    var bits = Math.max(8, (bytes - 1) * 8); // Our curve.

    this.curve = curve; // Cofactor mask (p25519=-8, p448=-4).

    this.h = -curve.h.toNumber() & 0xff; // Group order top byte (p25519=0x7f, p448=0xff).
    // In theory we should get this from the
    // _real_ order, not the prime.

    this.n = curve.p.ushrn(bits).toNumber(); // High bit (p25519=0x40, p448=0x80).

    this.b = this.n + 1 >>> 1; // AND mask (p25519=0x7fff...f8, p448=0xffff...fc).

    this.and = bnBrowser.shift(this.n + 1, bits - 8).isubn(1);
    this.and.iushln(8).iuorn(this.h); // OR mask (p25519=0x4000..., p448=0x8000...).

    this.or = bnBrowser.shift(this.b, bits); // Verify clamping constants.

    if (curve.id === 'ed25519' || curve.id === 'x25519') {
      assert$3(this.h === (-8 & 0xff));
      assert$3(this.n === 0x7f);
      assert$3(this.b === 0x40);
    } else if (curve.id === 'ed448' || curve.id === 'x448') {
      assert$3(this.h === (-4 & 0xff));
      assert$3(this.n === 0xff);
      assert$3(this.b === 0x80);
    }
  }

  reduce(num) {
    assert$3(num instanceof bnBrowser);
    assert$3(!num.red);
    num.iuand(this.and);
    num.iuor(this.or);
    return num;
  }

  splitHash(bytes) {
    assert$3(Buffer.isBuffer(bytes));
    assert$3(bytes.length === this.curve.fieldSize * 2);
    var scalar = bytes.slice(0, this.curve.scalarSize);
    var prefix = bytes.slice(this.curve.fieldSize);
    this.clamp(scalar);
    return [scalar, prefix];
  }

  clamp(bytes) {
    assert$3(Buffer.isBuffer(bytes));
    assert$3(bytes.length === this.curve.scalarSize);
    var i = 0;
    var j = this.curve.scalarSize - 1;
    if (this.curve.endian === 'be') [i, j] = [j, i]; // Ensure a multiple of the cofactor.

    bytes[i] &= this.h; // Clamp to the group order.

    bytes[j] &= this.n; // Set the high bit.

    bytes[j] |= this.b;
    return bytes;
  }

  isClamped(bytes) {
    assert$3(Buffer.isBuffer(bytes));
    if (bytes.length !== this.curve.scalarSize) return false;
    var i = 0;
    var j = this.curve.scalarSize - 1;
    if (this.curve.endian === 'be') [i, j] = [j, i]; // Must be a multiple of the cofactor.

    if (bytes[i] & ~this.h) return false; // Must be clamped to the group order.

    if (bytes[j] & ~this.n) return false; // Must have high bit set.

    if (!(bytes[j] & this.b)) return false;
    return true;
  }

}
/**
 * Point
 */


class Point {
  constructor(curve, type) {
    assert$3(curve instanceof Curve);
    assert$3(type >>> 0 === type);
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }

  init() {
    throw new Error('Not implemented.');
  }

  eq(point) {
    throw new Error('Not implemented.');
  }

  validate() {
    return this.curve.validate(this);
  }

  encode(compact) {
    throw new Error('Not implemented.');
  }

  precompute(power, rng) {
    assert$3(power >>> 0 === power);

    if (!this.precomputed) {
      this.precomputed = {
        naf: null,
        doubles: null,
        beta: null,
        blinding: null
      };
    }

    if (!this.precomputed.naf) this.precomputed.naf = this._getNAFPoints(8);
    if (!this.precomputed.doubles) this.precomputed.doubles = this._getDoubles(4, power);
    if (!this.precomputed.beta) this.precomputed.beta = this._getBeta();
    if (!this.precomputed.blinding) this.precomputed.blinding = this._getBlinding(rng);
    return this;
  }

  _getNAFPoints(wnd) {
    assert$3(wnd >>> 0 === wnd);
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var points = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();

    for (var i = 1; i < max; i++) {
      points.push(points[i - 1].add(dbl));
    }

    return {
      wnd,
      points
    };
  }

  _getDoubles(step, power) {
    assert$3(step >>> 0 === step);
    assert$3(power >>> 0 === power);
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var points = [this];
    var acc = this;

    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++) {
        acc = acc.dbl();
      }

      points.push(acc);
    }

    return {
      step,
      points
    };
  }

  _getBeta() {
    return null;
  }

  _getBlinding(rng) {
    if (this.precomputed && this.precomputed.blinding) return this.precomputed.blinding;
    if (!rng) return null;

    for (;;) {
      var blind = bnBrowser.random(rng, 1, this.curve.n);
      var unblind = this.jmul(blind.neg().imod(this.curve.n));
      if (unblind.isInfinity()) continue;
      return {
        blind,
        unblind
      };
    }
  }

  _hasDoubles(k) {
    assert$3(k instanceof bnBrowser);
    if (!this.precomputed) return false;
    var {
      doubles
    } = this.precomputed;
    if (!doubles) return false;
    var {
      points,
      step
    } = doubles;
    if (k.sign() < 0) k = this.curve.n;
    return points.length >= Math.ceil((k.bitLength() + 1) / step);
  }

  _mulBlind(k) {
    var rng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var jacobian = arguments.length > 2 ? arguments[2] : undefined;
    assert$3(k instanceof bnBrowser);
    assert$3(!k.red);

    var blinding = this._getBlinding(rng);

    if (!blinding) return this._mul(k, null, jacobian);
    var {
      blind,
      unblind
    } = blinding;
    var t = k.add(blind).imod(this.curve.n);
    return this._mul(t, unblind, jacobian);
  }

  mul(k) {
    return this._mul(k, null, false);
  }

  jmul(k) {
    return this._mul(k, null, true);
  }

  mulAdd(k1, p2, k2) {
    return this._mulAdd(k1, p2, k2, null, false);
  }

  jmulAdd(k1, p2, k2) {
    return this._mulAdd(k1, p2, k2, null, true);
  }

  mulBlind(k) {
    var rng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return this._mulBlind(k, rng, false);
  }

  jmulBlind(k) {
    var rng = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return this._mulBlind(k, rng, true);
  }

  mulSlow(k) {
    return this.curve._simpleMul(this, k, null, false);
  }

  jmulSlow(k) {
    return this.curve._simpleMul(this, k, null, true);
  }

  dblp(k) {
    assert$3(k >>> 0 === k);
    var r = this;

    for (var i = 0; i < k; i++) {
      r = r.dbl();
    }

    return r;
  }

}
/**
 * ShortCurve
 */


class ShortCurve extends Curve {
  constructor(conf) {
    super('short', conf);
    this.a = new bnBrowser(conf.a, 16).toRed(this.red);
    this.b = new bnBrowser(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvert();
    this.zeroA = this.a.sign() === 0;
    this.threeA = this.a.cmp(this.three.redNeg()) === 0; // If the curve is endomorphic, precalculate beta and lambda.

    this.endo = this._getEndomorphism(conf);
  }

  _getEndomorphism(conf) {
    assert$3(conf && typeof conf === 'object'); // No efficient endomorphism.

    if (!this.zeroA || !this.g || !this.n || this.p.modrn(3) !== 1) return null; // Compute beta and lambda, that lambda * P = (beta * Px; Py).

    var beta;
    var lambda;

    if (conf.beta) {
      beta = new bnBrowser(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p); // Choose the smallest beta.


      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }

    if (conf.lambda) {
      lambda = new bnBrowser(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta.
      var lambdas = this._getEndoRoots(this.n);

      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$3(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    } // Get basis vectors, used for balanced length-two representation.


    var basis;

    if (conf.basis) {
      basis = conf.basis.map((_ref) => {
        var {
          a,
          b
        } = _ref;
        return {
          a: new bnBrowser(a, 16),
          b: new bnBrowser(b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta,
      lambda,
      basis
    };
  }

  _getEndoRoots(num) {
    assert$3(num instanceof bnBrowser);
    assert$3(!num.red); // Find roots of for x^2 + x + 1 in F.
    // Root = (-1 +- Sqrt(-3)) / 2

    var red = num === this.p ? this.red : bnBrowser.mont(num);
    var tinv = new bnBrowser(2).toRed(red).redInvert();
    var ntinv = tinv.redNeg();
    var s = new bnBrowser(3).toRed(red).redINeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redISub(s).fromRed();
    return [l1, l2];
  }

  _getEndoBasis(lambda) {
    assert$3(lambda instanceof bnBrowser);
    assert$3(!lambda.red); // aprxSqrt >= sqrt(this.n)

    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt.

    var u = lambda;
    var v = this.n.clone();
    var x1 = new bnBrowser(1);
    var y1 = new bnBrowser(0);
    var x2 = new bnBrowser(0);
    var y2 = new bnBrowser(1); // All vectors are roots of: a + b * lambda = 0 (mod n).

    var a0;
    var b0; // First vector.

    var a1;
    var b1; // Second vector.

    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;

    while (u.sign() !== 0) {
      assert$3(v.sign() >= 0);
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }

      prevR = r;
      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }

    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().iadd(b1.sqr());
    var len2 = a2.sqr().iadd(b2.sqr());

    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    } // Normalize signs.


    if (a1.sign() < 0) {
      a1 = a1.neg();
      b1 = b1.neg();
    }

    if (a2.sign() < 0) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [{
      a: a1,
      b: b1
    }, {
      a: a2,
      b: b2
    }];
  }

  _endoSplit(k) {
    assert$3(k instanceof bnBrowser);
    assert$3(!k.red);
    if (k.sign() < 0) k = k.mod(this.n);
    var [v1, v2] = this.endo.basis;
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().imul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b); // Calculate answer.

    var k1 = k.sub(p1).isub(p2);
    var k2 = q1.add(q2).ineg();
    return [k1, k2];
  }

  pointFromX(x, odd) {
    assert$3(x instanceof bnBrowser);
    if (!x.red) x = x.toRed(this.red);
    assert$3(x.red === this.red);
    var ax = this.a.redMul(x);
    var y2 = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.fromRed().isOdd() !== Boolean(odd)) y.redINeg();
    return this.point(x, y);
  }

  pointFromR(x) {
    assert$3(x instanceof bnBrowser);
    if (!x.red) x = x.toRed(this.red);
    assert$3(x.red === this.red);
    var ax = this.a.redMul(x);
    var y2 = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    var y = y2.redSqrt();
    return this.point(x, y);
  }

  validate(point) {
    assert$3(point instanceof ShortPoint);
    if (point.inf) return true;
    var {
      x,
      y
    } = point;
    var ax = this.a.redMul(x);
    var y2 = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().cmp(y2) === 0;
  }

  decodePoint(bytes) {
    assert$3(Buffer.isBuffer(bytes));
    var len = this.fieldSize;
    if (bytes.length < 1 + len) throw new Error('Not a point.');
    var first = bytes[0];
    var last = bytes[bytes.length - 1];

    switch (first) {
      case 0x02:
      case 0x03:
        {
          if (bytes.length !== 1 + len) throw new Error('Invalid point size for compressed.');
          var x = this.decodeField(bytes.slice(1, 1 + len));
          if (x.cmp(this.p) >= 0) throw new Error('Invalid point.');
          var p = this.pointFromX(x, first === 0x03);
          assert$3(!p.isInfinity());
          return p;
        }

      case 0x04:
      case 0x06:
      case 0x07:
        {
          if (bytes.length !== 1 + len * 2) throw new Error('Invalid point size for uncompressed.');
          if (first !== 0x04 && (last & 1) !== (first & 1)) throw new Error('Invalid hybrid encoding.');

          var _x = this.decodeField(bytes.slice(1, 1 + len));

          var y = this.decodeField(bytes.slice(1 + len, 1 + 2 * len));
          if (_x.cmp(this.p) >= 0 || y.cmp(this.p) >= 0) throw new Error('Invalid point.');

          var _p = this.point(_x, y);

          if (!_p.validate()) throw new Error('Invalid point.');
          assert$3(!_p.isInfinity());
          return _p;
        }

      default:
        {
          throw new Error('Unknown point format.');
        }
    }
  }

  _endoWnafMulAdd(points, coeffs, initial, jacobian) {
    assert$3(Array.isArray(points));
    assert$3(Array.isArray(coeffs));
    assert$3(initial == null || initial instanceof JPoint);
    assert$3(typeof jacobian === 'boolean');
    assert$3(points.length === coeffs.length);
    assert$3(this.endo != null);
    var len = points.length;
    var npoints = new Array(len * 2);
    var ncoeffs = new Array(len * 2);

    for (var i = 0; i < len; i++) {
      var point = points[i];
      var coeff = coeffs[i];
      assert$3(point instanceof ShortPoint);
      var p1 = point;

      var p2 = p1._getBeta();

      assert$3(p2 != null);

      var [k1, k2] = this._endoSplit(coeff);

      if (k1.sign() < 0) {
        p1 = p1.neg(true);
        k1.ineg();
      }

      if (k2.sign() < 0) {
        p2 = p2.neg(true);
        k2.ineg();
      }

      npoints[i * 2 + 0] = p1;
      ncoeffs[i * 2 + 0] = k1;
      npoints[i * 2 + 1] = p2;
      ncoeffs[i * 2 + 1] = k2;
    }

    return this._wnafMulAdd(1, npoints, ncoeffs, initial, jacobian);
  }

  _mulAll(points, coeffs, initial, jacobian) {
    assert$3(Array.isArray(points));
    assert$3(Array.isArray(coeffs));
    assert$3(points.length === coeffs.length);
    if (this.endo && points.length > 0 && points[0].type === types$1.AFFINE) return this._endoWnafMulAdd(points, coeffs, initial, jacobian);
    return this._wnafMulAdd(1, points, coeffs, initial, jacobian);
  }

  point(x, y) {
    return new ShortPoint(this, x, y);
  }

  pointFromJSON(json) {
    return ShortPoint.fromJSON(this, json);
  }

  jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  }

}
/**
 * ShortPoint
 */


class ShortPoint extends Point {
  constructor(curve, x, y) {
    assert$3(curve instanceof ShortCurve);
    super(curve, types$1.AFFINE);
    this.x = null;
    this.y = null;
    this.inf = true;
    if (x != null) this.init(x, y);
  }

  init(x, y) {
    assert$3(x != null);
    assert$3(y != null);
    this.x = bnBrowser.cast(x, 16);
    this.y = bnBrowser.cast(y, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }

  _getBeta() {
    if (!this.curve.endo) return null;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

    if (pre) {
      var curve = this.curve;

      var endoMul = p => curve.point(p.x.redMul(curve.endo.beta), p.y);

      pre.beta = beta;
      beta.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        },
        beta: null,
        blinding: null
      };
    }

    return beta;
  }

  encode(compact) {
    if (compact == null) compact = true;
    assert$3(typeof compact === 'boolean');
    var {
      fieldSize
    } = this.curve;

    if (compact) {
      var _p2 = Buffer.allocUnsafe(1 + fieldSize);

      var _x2 = this.curve.encodeField(this.getX());

      _p2[0] = 0x02 | this.getY().isOdd();

      _x2.copy(_p2, 1);

      return _p2;
    }

    var p = Buffer.allocUnsafe(1 + fieldSize * 2);
    var x = this.curve.encodeField(this.getX());
    var y = this.curve.encodeField(this.getY());
    p[0] = 0x04;
    x.copy(p, 1);
    y.copy(p, 1 + fieldSize);
    return p;
  }

  toJSON() {
    var x = this.x.fromRed();
    var y = this.y.fromRed();
    if (!this.precomputed) return [x, y];
    return [x, y, {
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      },
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      }
    }];
  }

  isInfinity() {
    return this.inf;
  }

  add(p) {
    assert$3(p instanceof ShortPoint); // O + P = P

    if (this.inf) return p; // P + O = P

    if (p.inf) return this; // P + P = 2P

    if (this.eq(p)) return this.dbl(); // P + (-P) = O

    if (this.neg().eq(p)) return this.curve.point(); // P + Q = O

    if (this.x.cmp(p.x) === 0) return this.curve.point();
    var c = this.y.redSub(p.y);
    if (c.sign() !== 0) c = c.redMul(this.x.redSub(p.x).redInvert());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  }

  mixedAdd(p) {
    assert$3(p instanceof JPoint);
    return p.mixedAdd(this).toP();
  }

  dbl() {
    if (this.inf) return this; // 2P = O

    var ys1 = this.y.redAdd(this.y);
    if (ys1.sign() === 0) return this.curve.point();
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvert();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  }

  getX() {
    if (this.inf) throw new Error('Invalid point.');
    return this.x.fromRed();
  }

  getY() {
    if (this.inf) throw new Error('Invalid point.');
    return this.y.fromRed();
  }

  _mul(k, initial, jacobian) {
    assert$3(k instanceof bnBrowser);
    assert$3(!k.red);
    assert$3(initial == null || initial instanceof JPoint);
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k, initial, jacobian);
    if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k], initial, jacobian);
    return this.curve._wnafMul(this, k, initial, jacobian);
  }

  _mulAdd(k1, p2, k2, initial, jacobian) {
    assert$3(k1 instanceof bnBrowser);
    assert$3(p2 instanceof ShortPoint);
    assert$3(k2 instanceof bnBrowser);
    assert$3(initial == null || initial instanceof JPoint);
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, initial, jacobian);
    return this.curve._wnafMulAdd(1, points, coeffs, initial, jacobian);
  }

  eq(p) {
    assert$3(p instanceof ShortPoint);
    if (this === p) return true;
    if (this.inf !== p.inf) return false;
    if (this.inf) return true;
    return this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0;
  }

  hasQuadY() {
    if (this.inf) return false;
    return this.y.redJacobi() === 1;
  }

  eqX(x) {
    assert$3(x instanceof bnBrowser);
    assert$3(!x.red);
    if (this.inf) return false;
    return this.getX().cmp(x) === 0;
  }

  eqXToP(x) {
    assert$3(x instanceof bnBrowser);
    assert$3(!x.red);
    if (this.inf) return false;
    return this.getX().mod(this.curve.n).cmp(x) === 0;
  }

  neg() {
    var precomp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    assert$3(typeof precomp === 'boolean');
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());

    if (precomp && this.precomputed) {
      var pre = this.precomputed;

      var negate = p => p.neg();

      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        },
        beta: null,
        blinding: null
      };
    }

    return res;
  }

  toJ() {
    if (this.inf) return this.curve.jpoint();
    return this.curve.jpoint(this.x, this.y, this.curve.one);
  }

  [custom$2]() {
    if (this.isInfinity()) return '<ShortPoint: Infinity>';
    return '<ShortPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + '>';
  }

  static fromJSON(curve, json) {
    assert$3(curve instanceof ShortCurve);
    assert$3(Array.isArray(json));
    var [x, y, pre] = json;
    var point = curve.point(x, y);
    if (!pre) return point;
    var {
      naf,
      doubles
    } = pre;

    var convert = (_ref2) => {
      var [x, y] = _ref2;
      return curve.point(x, y);
    };

    point.precomputed = {
      naf: naf && {
        wnd: naf.wnd,
        points: [point, ...naf.points.map(convert)]
      },
      doubles: doubles && {
        step: doubles.step,
        points: [point, ...doubles.points.map(convert)]
      },
      beta: null,
      blinding: null
    };
    return point;
  }

}
/**
 * JPoint
 */


class JPoint extends Point {
  constructor(curve, x, y, z) {
    assert$3(curve instanceof ShortCurve);
    super(curve, types$1.JACOBIAN);
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = this.curve.zero;
    this.zOne = false;
    if (x != null) this.init(x, y, z);
  }

  init(x, y, z) {
    assert$3(x != null);
    assert$3(y != null);
    this.x = bnBrowser.cast(x, 16);
    this.y = bnBrowser.cast(y, 16);
    this.z = z != null ? bnBrowser.cast(z, 16) : this.curve.one;
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z.eq(this.curve.one);
  }

  validate() {
    return this.curve.validate(this.toP());
  }

  toJ() {
    return this.curve.point(this.x, this.y, this.z);
  }

  toP() {
    if (this.isInfinity()) return this.curve.point();
    var zinv = this.z.redInvert();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  }

  neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  }

  add(p) {
    assert$3(p instanceof JPoint); // O + P = P

    if (this.isInfinity()) return p; // P + O = P

    if (p.isInfinity()) return this; // 12M + 4S + 7A

    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);

    if (h.sign() === 0) {
      if (r.sign() !== 0) return this.curve.jpoint();
      return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  }

  mixedAdd(p) {
    assert$3(p instanceof ShortPoint); // O + P = P

    if (this.isInfinity()) return p.toJ(); // P + O = P

    if (p.isInfinity()) return this; // 8M + 3S + 7A

    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);

    if (h.sign() === 0) {
      if (r.sign() !== 0) return this.curve.jpoint();
      return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  }

  dblp(pow) {
    assert$3(pow >>> 0 === pow);
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();

    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;

      for (var i = 0; i < pow; i++) {
        r = r.dbl();
      }

      return r;
    } // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A


    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr(); // Reuse results

    var jyd = jy.redAdd(jy);

    for (var _i3 = 0; _i3 < pow; _i3++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (_i3 + 1 < pow) jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  }

  dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    if (this.curve.threeA) return this._threeDbl();
    return this._dbl();
  }

  _zeroDbl() {
    var nx;
    var ny;
    var nz; // Z = 1

    if (this.zOne) {
      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A
      // XX = X1^2
      var xx = this.x.redSqr(); // YY = Y1^2

      var yy = this.y.redSqr(); // YYYY = YY^2

      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s); // M = 3 * XX + a; a = 0

      var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

      var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

      nx = t; // Y3 = M * (S - T) - 8 * YYYY

      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

      nz = this.y.redAdd(this.y);
    } else {
      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A
      // A = X1^2
      var a = this.x.redSqr(); // B = Y1^2

      var b = this.y.redSqr(); // C = B^2

      var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d); // E = 3 * A

      var e = a.redAdd(a).redIAdd(a); // F = E^2

      var f = e.redSqr(); // 8 * C

      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8); // X3 = F - 2 * D

      nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

      ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  }

  _threeDbl() {
    var nx;
    var ny;
    var nz; // Z = 1

    if (this.zOne) {
      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A
      // XX = X1^2
      var xx = this.x.redSqr(); // YY = Y1^2

      var yy = this.y.redSqr(); // YYYY = YY^2

      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s); // M = 3 * XX + a

      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

      var t = m.redSqr().redISub(s).redISub(s); // X3 = T

      nx = t; // Y3 = M * (S - T) - 8 * YYYY

      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

      nz = this.y.redAdd(this.y);
    } else {
      // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S
      // delta = Z1^2
      var delta = this.z.redSqr(); // gamma = Y1^2

      var gamma = this.y.redSqr(); // beta = X1 * gamma

      var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  }

  _dbl() {
    var a = this.curve.a; // 4M + 6S + 10A

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  }

  trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this); // https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2

    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // ZZ = Z1^2

    var zz = this.z.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

    var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

    var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm); // EE = E^2

    var ee = e.redSqr(); // T = 16*YYYY

    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  }

  _mul(k, initial, jacobian) {
    assert$3(k instanceof bnBrowser);
    assert$3(initial == null || initial instanceof JPoint);
    return this.curve._wnafMul(this, k, initial, jacobian);
  }

  _mulAdd(k1, p2, k2, initial, jacobian) {
    assert$3(k1 instanceof bnBrowser);
    assert$3(p2 instanceof JPoint);
    assert$3(k2 instanceof bnBrowser);
    assert$3(initial == null || initial instanceof JPoint);
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], initial, jacobian);
  }

  eq(p) {
    assert$3(p instanceof JPoint);
    if (this === p) return true; // x1 * z2^2 == x2 * z1^2

    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).sign() !== 0) return false; // y1 * z2^3 == y2 * z1^3

    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).sign() === 0;
  }

  hasQuadY() {
    return this.y.redMul(this.z).redJacobi() === 1;
  }

  eqX(x) {
    assert$3(x instanceof bnBrowser);
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    return this.x.cmp(rx) === 0;
  }

  eqXToP(x) {
    assert$3(x instanceof bnBrowser);
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);

    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0) return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0) break;
    }

    return true;
  }

  isInfinity() {
    // This code assumes that zero is always zero in red.
    return this.z.sign() === 0;
  }

  encode(compact) {
    return this.toP().encode(compact);
  }

  toJSON() {
    return this.toP().toJSON();
  }

  [custom$2]() {
    if (this.isInfinity()) return '<JPoint: Infinity>';
    return '<JPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';
  }

  static fromJSON(curve, json) {
    return ShortPoint.fromJSON(curve, json).toJ();
  }

}
/**
 * MontCurve
 */


class MontCurve extends Curve {
  constructor(conf) {
    super('mont', conf);
    this.a = new bnBrowser(conf.a, 16).toRed(this.red);
    this.b = new bnBrowser(conf.b, 16).toRed(this.red);
    this.binv = this.b.redInvert();
    this.i4 = new bnBrowser(4).toRed(this.red).redInvert();
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }

  decodePoint(bytes) {
    var x = this.decodeField(bytes); // We're supposed to ignore the hi bit
    // on montgomery points... I think. If
    // we don't, the X25519 test vectors
    // break, which is pretty convincing
    // evidence. This is a no-op for X448.

    x.setn(this.signBit, 0); // Note: montgomery points are meant to be
    // reduced by the prime and do not have to
    // be explicitly validated in order to do
    // the montgomery ladder (see rfc7748,
    // section 5).

    var p = this.point(x, this.one);
    assert$3(!p.isInfinity());
    return p;
  }

  pointFromX(x, odd) {
    assert$3(x instanceof bnBrowser);
    assert$3(odd == null);
    if (!x.red) x = x.toRed(this.red);
    assert$3(x.red === this.red);
    return this.point(x, this.one);
  }

  pointFromEdwards(point) {
    assert$3(point instanceof EdwardsPoint);
    if (point.isInfinity()) return this.point();
    point.normalize(); // Edwards point.

    var {
      x,
      y,
      z
    } = point; // Montgomery `u`.

    var nx = null;

    if (point.curve.twisted) {
      // Birational maps:
      //   u = (1+y)/(1-y)
      //   v = sqrt(-486664)*u/x
      var lhs = z.redAdd(y);
      var rhs = z.redSub(y);
      nx = lhs.redMul(rhs.redInvert());
    } else {
      // Birational maps:
      //   u = (y-1)/(y+1)
      //   v = sqrt(156324)*u/x
      //
      // 4-isogeny maps:
      //   u = y^2/x^2
      //   v = (2 - x^2 - y^2)*y/x^3
      var _lhs = y.redSqr();

      var _rhs = x.redSqr();

      nx = _lhs.redMul(_rhs.redInvert());
    } // Montgomery point.


    return this.point(nx.fromRed(), this.one);
  }

  validate(point) {
    assert$3(point instanceof MontPoint);
    if (point.isInfinity()) return true; // b*y^2 = x^3 + a*x^2 + x

    var x = point.normalize().x;
    var x2 = x.redSqr();
    var by2 = x2.redMul(x).redIAdd(this.a.redMul(x2)).redIAdd(x);
    var y2 = by2.redMul(this.binv);
    return y2.redJacobi() !== -1;
  }

  _mulAll(points, coeffs, initial, jacobian) {
    throw new Error('Not supported on Montgomery curve.');
  }

  _simpleMul(p, k, initial, jacobian) {
    throw new Error('Not supported on Montgomery curve.');
  }

  point(x, z) {
    return new MontPoint(this, x, z);
  }

  jpoint(x, y, z) {
    assert$3(x == null && y == null && z == null);
    return this.point();
  }

  pointFromJSON(json) {
    return MontPoint.fromJSON(this, json);
  }

}
/**
 * MontPoint
 */


class MontPoint extends Point {
  constructor(curve, x, z) {
    assert$3(curve instanceof MontCurve);
    super(curve, types$1.PROJECTIVE);
    this.x = this.curve.one;
    this.z = this.curve.zero;
    if (x != null) this.init(x, z);
  }

  init(x, z) {
    assert$3(x != null);
    this.x = bnBrowser.cast(x, 16);
    this.z = z != null ? bnBrowser.cast(z, 16) : this.curve.one;
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }

  precompute(power, rng) {
    // No-op.
    return this;
  }

  encode() {
    return this.curve.encodeField(this.getX());
  }

  isInfinity() {
    // This code assumes that zero is always zero in red.
    return this.z.sign() === 0;
  }

  dbl() {
    // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z); // AA = A^2

    var aa = a.redSqr(); // B = X1 - Z1

    var b = this.x.redSub(this.z); // BB = B^2

    var bb = b.redSqr(); // C = AA - BB

    var c = aa.redSub(bb); // X3 = AA * BB

    var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

    var nz = c.redMul(bb.redIAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  }

  add() {
    throw new Error('Not supported on Montgomery curve.');
  }

  diffAdd(p, diff) {
    assert$3(p instanceof MontPoint);
    assert$3(diff instanceof MontPoint); // https://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2

    var a = this.x.redAdd(this.z); // B = X2 - Z2

    var b = this.x.redSub(this.z); // C = X3 + Z3

    var c = p.x.redAdd(p.z); // D = X3 - Z3

    var d = p.x.redSub(p.z); // DA = D * A

    var da = d.redMul(a); // CB = C * B

    var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

    var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  }

  _mul(k, initial, jacobian) {
    assert$3(k instanceof bnBrowser);
    assert$3(!k.red && k.sign() >= 0);
    assert$3(initial == null || initial instanceof MontPoint);
    var s = this.curve.mask.reduce(k.clone());
    var bits = this.curve.p.bitLength();
    var a = this; // (N / 2) * Q + Q

    var b = initial || this.curve.point(); // (N / 2) * Q

    var c = this; // Q
    // Montgomery ladder.
    // https://tools.ietf.org/html/rfc7748#section-5

    for (var i = bits - 1; i >= 0; i--) {
      var bit = s.testn(i) | 0;

      if (bit === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = b.diffAdd(a, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

        a = a.dbl();
      }
    }

    return b;
  }

  _mulBlind(k) {
    // Can't do this due to the clamping.
    throw new Error('Not supported on Montgomery curve.');
  }

  _mulAdd(k1, p2, k2, initial, jacobian) {
    throw new Error('Not supported on Montgomery curve.');
  }

  eq(other) {
    assert$3(other instanceof MontPoint);
    if (this === other) return true;
    if (this.isInfinity()) return other.isInfinity();
    if (other.isInfinity()) return false;
    return this.getX().cmp(other.getX()) === 0;
  }

  normalize() {
    if (this.isInfinity()) return this;
    this.x = this.x.redMul(this.z.redInvert());
    this.z = this.curve.one;
    return this;
  }

  getX() {
    // Throw if the point is at
    // infinity (z=0 is not invertible).
    if (this.isInfinity()) throw new Error('Invalid point.');
    this.normalize();
    return this.x.fromRed();
  }

  getY() {
    // Throw if the point is at
    // infinity (z=0 is not invertible).
    if (this.isInfinity()) throw new Error('Invalid point.'); // b*y^2 = x^3 + a*x^2 + x

    var x = this.normalize().x;
    var x2 = x.redSqr();
    var by2 = x2.redMul(x).redIAdd(this.curve.a.redMul(x2)).redIAdd(x);
    var y2 = by2.redMul(this.curve.binv);
    var y = y2.redSqrt(); // Note: the `v` values in RFC 7748 are negated.
    // This tends not to matter if we are squaring.

    return y.fromRed();
  }

  mixedAdd(p) {
    throw new Error('Not supported on Montgomery curve.');
  }

  toP() {
    return this.normalize();
  }

  toJ() {
    return this.curve.point(this.x, this.z);
  }

  toJSON() {
    return [this.getX()];
  }

  [custom$2]() {
    if (this.isInfinity()) return '<MontPoint: Infinity>';
    return '<MontPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';
  }

  static fromJSON(curve, json) {
    assert$3(curve instanceof MontCurve);
    assert$3(Array.isArray(json));
    var [x, z] = json;
    return curve.point(x, z || curve.one);
  }

}
/**
 * EdwardsCurve
 */


class EdwardsCurve extends Curve {
  constructor(conf) {
    super('edwards', conf);
    this.a = new bnBrowser(conf.a, 16).toRed(this.red);
    this.c = new bnBrowser(conf.c, 16).toRed(this.red);
    this.d = new bnBrowser(conf.d, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.dd = this.d.redAdd(this.d);
    this.mOneA = this.a.cmp(this.one.redNeg()) === 0;
    this.oneC = this.c.cmp(this.one) === 0;
    assert$3(!this.twisted || this.c.cmp(this.one) === 0);
    assert$3(!this.twisted || this.a.cmp(this.one) !== 0);
    assert$3(!this.extended || this.a.cmp(this.one.redNeg()) === 0);
  }

  _mulA(num) {
    assert$3(num instanceof bnBrowser);
    if (this.mOneA) return num.redNeg();
    return this.a.redMul(num);
  }

  _mulC(num) {
    assert$3(num instanceof bnBrowser);
    if (this.oneC) return num;
    return this.c.redMul(num);
  }

  jpoint(x, y, z) {
    assert$3(x == null && y == null && z == null);
    return this.point();
  }

  pointFromX(x, odd) {
    assert$3(x instanceof bnBrowser);
    if (!x.red) x = x.toRed(this.red);
    assert$3(x.red === this.red);
    var x2 = x.redSqr();
    var lhs = this.c2.redSub(this.a.redMul(x2));
    var rhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = lhs.redMul(rhs.redInvert());
    var y = y2.redSqrt();
    if (y.fromRed().isOdd() !== Boolean(odd)) y.redINeg();
    return this.point(x, y);
  }

  pointFromY(y, odd) {
    assert$3(y instanceof bnBrowser);
    if (!y.red) y = y.toRed(this.red);
    assert$3(y.red === this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redISub(this.a);
    var x2 = lhs.redMul(rhs.redInvert());

    if (x2.sign() === 0) {
      if (odd) throw new Error('Invalid point.');
      return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.fromRed().isOdd() !== Boolean(odd)) x.redINeg();
    return this.point(x, y);
  }

  pointFromMont(point, odd) {
    assert$3(point instanceof MontPoint);

    if (point.isInfinity()) {
      if (odd) throw new Error('Invalid point.');
      return this.point();
    }

    point.normalize(); // Montgomery point.

    var {
      x,
      z
    } = point; // Edwards `y`.

    var ny = null;

    if (this.twisted) {
      // Birational maps:
      //   x = sqrt(-486664)*u/v
      //   y = (u-1)/(u+1)
      var lhs = x.redSub(z);
      var rhs = x.redAdd(z);
      ny = lhs.redMul(rhs.redInvert());
    } else {
      // Birational maps:
      //   x = sqrt(156324)*u/v
      //   y = (1+u)/(1-u)
      //
      // 4-isogeny maps:
      //   x = 4*v*(u^2 - 1)/(u^4 - 2*u^2 + 4*v^2 + 1)
      //   y = -(u^5 - 2*u^3 - 4*u*v^2 + u)/
      //        (u^5 - 2*u^2*v^2 - 2*u^3 - 2*v^2 + u)
      throw new Error('Not implemented.');
    } // Edwards point.


    return this.pointFromY(ny.fromRed(), odd);
  }

  validate(point) {
    assert$3(point instanceof EdwardsPoint);
    if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redIAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  }

  decodePoint(bytes) {
    var y = this.decodeField(bytes);
    var xIsOdd = y.testn(this.signBit);
    y.setn(this.signBit, 0);
    if (y.cmp(this.p) >= 0) throw new Error('Invalid point.');
    var p = this.pointFromY(y, xIsOdd); // Note that it _is_ possible to serialize
    // points at infinity for edwards curves.

    if (p.isInfinity()) throw new Error('Invalid point.');
    return p;
  }

  _mulAll(points, coeffs, initial, jacobian) {
    assert$3(Array.isArray(points));
    assert$3(Array.isArray(coeffs));
    assert$3(points.length === coeffs.length);
    return this._wnafMulAdd(1, points, coeffs, initial, jacobian);
  }

  pointFromJSON(json) {
    return EdwardsPoint.fromJSON(this, json);
  }

  point(x, y, z, t) {
    return new EdwardsPoint(this, x, y, z, t);
  }

}
/**
 * EdwardsPoint
 */


class EdwardsPoint extends Point {
  constructor(curve, x, y, z, t) {
    assert$3(curve instanceof EdwardsCurve);
    super(curve, types$1.PROJECTIVE);
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
    if (x != null) this.init(x, y, z, t);
  }

  init(x, y, z, t) {
    assert$3(x != null);
    assert$3(y != null);
    this.x = bnBrowser.cast(x, 16);
    this.y = bnBrowser.cast(y, 16);
    this.z = z != null ? bnBrowser.cast(z, 16) : this.curve.one;
    this.t = t != null ? bnBrowser.cast(t, 16) : null;
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z.eq(this.curve.one); // Use extended coordinates.

    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvert());
    }
  }

  encode() {
    if (this.isInfinity()) throw new Error('Invalid point.');
    var y = this.getY();
    y.setn(this.curve.signBit, this.getX().isOdd());
    return this.curve.encodeField(y);
  }

  isInfinity() {
    // This code assumes that zero is always zero in red.
    if (this.x.sign() !== 0) return false;
    if (this.y.cmp(this.z) === 0) return true;
    if (this.zOne && this.y.cmp(this.curve.c) === 0) return true;
    return false;
  }

  _extDbl() {
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr(); // B = Y1^2

    var b = this.y.redSqr(); // C = 2 * Z1^2

    var c = this.z.redSqr();
    c = c.redIAdd(c); // D = a * A

    var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

    var g = d.redAdd(b); // F = G - C

    var f = g.redSub(c); // H = D - B

    var h = d.redISub(b); // X3 = E * F

    var nx = e.redMul(f); // Y3 = G * H

    var ny = g.redMul(h); // T3 = E * H

    var nt = e.redMul(h); // Z3 = F * G

    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  }

  _projDbl() {
    // https://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

    var c = this.x.redSqr(); // D = Y1^2

    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;

    if (this.curve.twisted) {
      // E = a * C
      var e = this.curve._mulA(c); // F = E + D


      var f = e.redAdd(d);

      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redISub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

        ny = f.redMul(e.redISub(d)); // Z3 = F^2 - 2 * F

        nz = f.redSqr().redISub(f).redISub(f);
      } else {
        // H = Z1^2
        var h = this.z.redSqr(); // J = F - 2 * H

        var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

        nx = b.redISub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

        ny = f.redMul(e.redISub(d)); // Z3 = F * J

        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      var _e = c.redAdd(d); // H = (c * Z1)^2


      var _h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


      var _j4 = _e.redSub(_h).redISub(_h); // X3 = c * (B - E) * J


      nx = this.curve._mulC(b.redISub(_e)).redMul(_j4); // Y3 = c * E * (C - D)

      ny = this.curve._mulC(_e).redMul(c.redISub(d)); // Z3 = E * J

      nz = _e.redMul(_j4);
    }

    return this.curve.point(nx, ny, nz);
  }

  dbl() {
    if (this.isInfinity()) return this; // Double in extended coordinates

    if (this.curve.extended) return this._extDbl();
    return this._projDbl();
  }

  _extAdd(p) {
    assert$3(p instanceof EdwardsPoint); // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)

    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

    var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

    var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

    var e = b.redSub(a); // F = D - C

    var f = d.redSub(c); // G = D + C

    var g = d.redIAdd(c); // H = B + A

    var h = b.redIAdd(a); // X3 = E * F

    var nx = e.redMul(f); // Y3 = G * H

    var ny = g.redMul(h); // T3 = E * H

    var nt = e.redMul(h); // Z3 = F * G

    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  }

  _projAdd(p) {
    assert$3(p instanceof EdwardsPoint); // https://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2

    var a = this.z.redMul(p.z); // B = A^2

    var b = a.redSqr(); // C = X1 * X2

    var c = this.x.redMul(p.x); // D = Y1 * Y2

    var d = this.y.redMul(p.y); // E = d * C * D

    var e = this.curve.d.redMul(c).redMul(d); // F = B - E

    var f = b.redSub(e); // G = B + E

    var g = b.redIAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;

    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redISub(this.curve._mulA(c))); // Z3 = F * G

      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redISub(c)); // Z3 = c * F * G

      nz = this.curve._mulC(f).redMul(g);
    }

    return this.curve.point(nx, ny, nz);
  }

  add(p) {
    assert$3(p instanceof EdwardsPoint);
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    return this._projAdd(p);
  }

  _mul(k, initial, jacobian) {
    assert$3(k instanceof bnBrowser);
    assert$3(!k.red);
    assert$3(initial == null || initial instanceof EdwardsPoint);
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k, initial, jacobian);
    return this.curve._wnafMul(this, k, initial, jacobian);
  }

  _mulAdd(k1, p2, k2, initial, jacobian) {
    assert$3(k1 instanceof bnBrowser);
    assert$3(p2 instanceof EdwardsPoint);
    assert$3(k2 instanceof bnBrowser);
    assert$3(initial == null || initial instanceof EdwardsPoint);
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], initial, jacobian);
  }

  normalize() {
    if (this.zOne) return this; // Normalize coordinates.

    var zi = this.z.redInvert();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  }

  neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
  }

  getX() {
    this.normalize();
    return this.x.fromRed();
  }

  getY() {
    this.normalize();
    return this.y.fromRed();
  }

  eq(other) {
    assert$3(other instanceof EdwardsPoint);
    if (this === other) return true;
    return this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  }

  hasQuadY() {
    return this.y.redMul(this.z).redJacobi() === 1;
  }

  eqX(x) {
    assert$3(x instanceof bnBrowser);
    var rx = x.toRed(this.curve.red).redMul(this.z);
    return this.x.cmp(rx) === 0;
  }

  eqXToP(x) {
    assert$3(x instanceof bnBrowser);
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);

    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0) return false;
      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0) break;
    }

    return true;
  }

  mixedAdd(p) {
    return this.add(p);
  }

  toP() {
    return this.normalize();
  }

  toJ() {
    return this.curve.point(this.x, this.y, this.z, this.t);
  }

  toJSON() {
    var x = this.getX();
    var y = this.getY();
    if (!this.precomputed) return [x, y];
    return [x, y, {
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      },
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      }
    }];
  }

  [custom$2]() {
    if (this.isInfinity()) return '<EdwardsPoint: Infinity>';
    return '<EdwardsPoint:' + ' x=' + this.x.fromRed().toString(16, 2) + ' y=' + this.y.fromRed().toString(16, 2) + ' z=' + this.z.fromRed().toString(16, 2) + '>';
  }

  static fromJSON(curve, json) {
    assert$3(curve instanceof EdwardsCurve);
    assert$3(Array.isArray(json));
    var [x, y, pre] = json;
    var point = curve.point(x, y);
    if (!pre) return point;
    var {
      naf,
      doubles
    } = pre;

    var convert = (_ref3) => {
      var [x, y] = _ref3;
      return curve.point(x, y);
    };

    point.precomputed = {
      naf: naf && {
        wnd: naf.wnd,
        points: [point, ...naf.points.map(convert)]
      },
      doubles: doubles && {
        step: doubles.step,
        points: [point, ...doubles.points.map(convert)]
      },
      beta: null,
      blinding: null
    };
    return point;
  }

}
/**
 * P192
 */


class P192$1 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P192',
      ossl: 'prime192v1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prefix: null,
      context: false,
      seed: '3045ae6f c8422f64 ed579528 d38120ea' + 'e12196d5',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049' + 'feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836' + '146bc9b1 b4d22831',
      h: '1',
      g: [['188da80e b03090f6 7cbf20eb 43a18800', 'f4ff0afd 82ff1012'].join(''), ['07192b95 ffc8da78 631011ed 6b24cdd5', '73f977a1 1e794811'].join(''), pre]
    });
  }

}
/**
 * P224
 */


class P224$1 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P224',
      ossl: 'secp224r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prefix: null,
      context: false,
      seed: 'bd713447 99d5c7fc dc45b59f a3b9ab8f' + '6a948bc5',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff' + '00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7' + 'd7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2' + 'e0b8f03e 13dd2945 5c5c2a3d',
      h: '1',
      g: [['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3', '56c21122 343280d6 115c1d21'].join(''), ['bd376388 b5f723fb 4c22dfe6 cd4375a0', '5a074764 44d58199 85007e34'].join(''), pre]
    });
  }

}
/**
 * P256
 */


class P256 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P256',
      ossl: 'prime256v1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prefix: null,
      context: false,
      seed: 'c49d3608 86e70493 6a6678e1 139d26b7' + '819f7e90',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000' + '00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000' + '00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc' + '651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff' + 'bce6faad a7179e84 f3b9cac2 fc632551',
      h: '1',
      g: [['6b17d1f2 e12c4247 f8bce6e5 63a440f2', '77037d81 2deb33a0 f4a13945 d898c296'].join(''), ['4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16', '2bce3357 6b315ece cbb64068 37bf51f5'].join(''), pre]
    });
  }

}
/**
 * P384
 */


class P384 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P384',
      ossl: 'secp384r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA384',
      prefix: null,
      context: false,
      seed: 'a335926a a319a27a 1d00896a 6773a482' + '7acdac73',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19' + '181d9c6e fe814112 0314088f 5013875a' + 'c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff c7634d81 f4372ddf' + '581a0db2 48b0a77a ecec196a ccc52973',
      h: '1',
      g: [['aa87ca22 be8b0537 8eb1c71e f320ad74', '6e1d3b62 8ba79b98 59f741e0 82542a38', '5502f25d bf55296c 3a545e38 72760ab7'].join(''), ['3617de4a 96262c6f 5d9e98bf 9292dc29', 'f8f41dbd 289a147c e9da3113 b5f0b8c0', '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'].join(''), pre]
    });
  }

}
/**
 * P521
 */


class P521$1 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'P521',
      ossl: 'secp521r1',
      type: 'short',
      endian: 'be',
      hash: 'SHA512',
      prefix: null,
      context: false,
      seed: 'd09e8800 291cb853 96cc6717 393284aa' + 'a0da64ba',
      prime: 'p521',
      p: '000001ff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0' + 'b68540ee a2da725b 99b315f3 b8b48991' + '8ef109e1 56193951 ec7e937b 1652c0bd' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4' + '6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'fffffffa 51868783 bf2f966b 7fcc0148' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e' + '91386409',
      h: '1',
      g: [['000000c6 858e06b7 0404e9cd 9e3ecb66', '2395b442 9c648139 053fb521 f828af60', '6b4d3dba a14b5e77 efe75928 fe1dc127', 'a2ffa8de 3348b3c1 856a429b f97e7e31', 'c2e5bd66'].join(''), ['00000118 39296a78 9a3bc004 5c8a5fb4', '2c7d1bd9 98f54449 579b4468 17afbd17', '273e662c 97ee7299 5ef42640 c550b901', '3fad0761 353c7086 a272c240 88be9476', '9fd16650'].join(''), pre]
    });
  }

}
/**
 * SECP256K1
 */


class SECP256K1 extends ShortCurve {
  constructor(pre) {
    super({
      id: 'SECP256K1',
      ossl: 'secp256k1',
      type: 'short',
      endian: 'be',
      hash: 'SHA256',
      prefix: null,
      context: false,
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe' + 'baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      g: [['79be667e f9dcbbac 55a06295 ce870b07', '029bfcdb 2dce28d9 59f2815b 16f81798'].join(''), ['483ada77 26a3c465 5da4fbfc 0e1108a8', 'fd17b448 a6855419 9c47d08f fb10d4b8'].join(''), pre],
      // Precomputed endomorphism.
      beta: '7ae96a2b 657c0710 6e64479e ac3434e9' + '9cf04975 12f58995 c1396c28 719501ee',
      lambda: '5363ad4c c05c30e0 a5261c02 8812645a' + '122e22ea 20816678 df02967c 1b23bd72',
      basis: [{
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      }, {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }]
    });
  }

}
/**
 * X25519
 */


class X25519 extends MontCurve {
  constructor() {
    super({
      id: 'X25519',
      ossl: 'X25519',
      type: 'mont',
      endian: 'le',
      hash: 'SHA512',
      prefix: null,
      context: false,
      prime: 'p25519',
      // 2^255 - 19
      p: '7fffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffed',
      a: '76d06',
      b: '1',
      n: '10000000 00000000 00000000 00000000' + '14def9de a2f79cd6 5812631a 5cf5d3ed',
      h: '8',
      g: ['9']
    });
  }

}
/**
 * ED25519
 */


class ED25519 extends EdwardsCurve {
  constructor(pre) {
    super({
      id: 'ED25519',
      ossl: 'ED25519',
      type: 'edwards',
      endian: 'le',
      hash: 'SHA512',
      prefix: 'SigEd25519 no Ed25519 collisions',
      context: false,
      prime: 'p25519',
      // 2^255 - 19
      p: '7fffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffed',
      a: '-1',
      c: '1',
      // (-121665 * 121666^-1) mod p
      d: '52036cee 2b6ffe73 8cc74079 7779e898' + '00700a4d 4141d8ab 75eb4dca 135978a3',
      n: '10000000 00000000 00000000 00000000' + '14def9de a2f79cd6 5812631a 5cf5d3ed',
      h: '8',
      // c=3
      g: [['216936d3 cd6e53fe c0a4e231 fdd6dc5c', '692cc760 9525a7b2 c9562d60 8f25d51a'].join(''), // 4/5
      ['66666666 66666666 66666666 66666666', '66666666 66666666 66666666 66666658'].join(''), pre]
    });
  }

}
/**
 * X448
 */


class X448 extends MontCurve {
  constructor() {
    super({
      id: 'X448',
      ossl: 'X448',
      type: 'mont',
      endian: 'le',
      hash: 'SHAKE256',
      prefix: null,
      context: false,
      prime: 'p448',
      // 2^448 - 2^224 - 1
      p: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff',
      a: '262a6',
      b: '1',
      n: '3fffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff 7cca23e9' + 'c44edb49 aed63690 216cc272 8dc58f55' + '2378c292 ab5844f3',
      h: '4',
      g: ['5']
    });
  }

}
/**
 * ED448
 */


class ED448 extends EdwardsCurve {
  constructor(pre) {
    super({
      id: 'ED448',
      ossl: 'ED448',
      type: 'edwards',
      endian: 'le',
      hash: 'SHAKE256',
      prefix: 'SigEd448',
      context: true,
      prime: 'p448',
      // 2^448 - 2^224 - 1
      p: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff',
      a: '1',
      c: '1',
      // -39081 mod p
      d: 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff fffffffe ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffff6756',
      n: '3fffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff 7cca23e9' + 'c44edb49 aed63690 216cc272 8dc58f55' + '2378c292 ab5844f3',
      h: '4',
      // c=2
      g: [['4f1970c6 6bed0ded 221d15a6 22bf36da', '9e146570 470f1767 ea6de324 a3d3a464', '12ae1af7 2ab66511 433b80e1 8b00938e', '2626a82b c70cc05e'].join(''), ['693f4671 6eb6bc24 88762037 56c9c762', '4bea7373 6ca39840 87789c1e 05a0c2d7', '3ad3ff1c e67c39c4 fdbd132c 4ed7c8ad', '9808795b f230fa14'].join(''), pre]
    });
  }

}
/*
 * Helpers
 */


function assert$3(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

function getNAF(c, w, n) {
  assert$3(c instanceof bnBrowser);
  assert$3(!c.red);
  assert$3(w >>> 0 === w);
  assert$3(n instanceof bnBrowser);
  var naf = [];
  var ws = 1 << w + 1;
  var k = c.clone();
  if (k.sign() < 0) k.imod(n);

  while (k.cmpn(1) >= 0) {
    var z = 0;

    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
      k.isubn(z);
    }

    naf.push(z); // Optimization, shift by word if possible.

    var shift = k.sign() !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;

    for (var i = 1; i < shift; i++) {
      naf.push(0);
    }

    k.iushrn(shift);
  }

  return naf;
}

function getJSF(c1, c2, n) {
  assert$3(c1 instanceof bnBrowser);
  assert$3(c2 instanceof bnBrowser);
  assert$3(!c1.red);
  assert$3(!c2.red);
  assert$3(n instanceof bnBrowser);
  var jsf = [[], []];
  var k1 = c1.clone();
  var k2 = c2.clone();
  var d1 = 0;
  var d2 = 0;
  if (k1.sign() < 0) k1.imod(n);
  if (k2.sign() < 0) k2.imod(n);

  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase.
    var m14 = k1.andln(3) + d1 & 3;
    var m24 = k2.andln(3) + d2 & 3;
    if (m14 === 3) m14 = -1;
    if (m24 === 3) m24 = -1;
    var u1 = 0;

    if (m14 & 1) {
      var m8 = k1.andln(7) + d1 & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
    }

    jsf[0].push(u1);
    var u2 = 0;

    if (m24 & 1) {
      var _m = k2.andln(7) + d2 & 7;

      if ((_m === 3 || _m === 5) && m14 === 2) u2 = -m24;else u2 = m24;
    }

    jsf[1].push(u2); // Second phase.

    if (2 * d1 === u1 + 1) d1 = 1 - d1;
    if (2 * d2 === u2 + 1) d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
/*
 * Expose
 */


var Curve_1 = Curve;
var Point_1 = Point;
var ShortCurve_1 = ShortCurve;
var ShortPoint_1 = ShortPoint;
var JPoint_1 = JPoint;
var MontCurve_1 = MontCurve;
var MontPoint_1 = MontPoint;
var EdwardsCurve_1 = EdwardsCurve;
var EdwardsPoint_1 = EdwardsPoint;
var P192_1 = P192$1;
var P224_1 = P224$1;
var P256_1 = P256;
var P384_1 = P384;
var P521_1 = P521$1;
var SECP256K1_1 = SECP256K1;
var X25519_1 = X25519;
var ED25519_1 = ED25519;
var X448_1 = X448;
var ED448_1 = ED448;
var curves = {
  Curve: Curve_1,
  Point: Point_1,
  ShortCurve: ShortCurve_1,
  ShortPoint: ShortPoint_1,
  JPoint: JPoint_1,
  MontCurve: MontCurve_1,
  MontPoint: MontPoint_1,
  EdwardsCurve: EdwardsCurve_1,
  EdwardsPoint: EdwardsPoint_1,
  P192: P192_1,
  P224: P224_1,
  P256: P256_1,
  P384: P384_1,
  P521: P521_1,
  SECP256K1: SECP256K1_1,
  X25519: X25519_1,
  ED25519: ED25519_1,
  X448: X448_1,
  ED448: ED448_1
};

var custom$3 = 'inspect';
var customBrowser$1 = {
  custom: custom$3
};

/*!
 * enforce.js - type enforcement for bcoin
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */
/*
 * Enforce
 */

function enforce$2(value, name, type) {
  if (!value) {
    var err = new TypeError("'".concat(name, "' must be a(n) ").concat(type, "."));
    if (Error.captureStackTrace) Error.captureStackTrace(err, enforce$2);
    throw err;
  }
}
/*
 * Expose
 */


var enforce_1 = enforce$2;

/*!
 * error.js - encoding error for bcoin
 * Copyright (c) 2014-2015, Fedor Indutny (MIT License)
 * Copyright (c) 2014-2017, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcoin
 */
/**
 * Encoding Error
 * @extends {Error}
 */

class EncodingError extends Error {
  /**
   * Create an encoding error.
   * @constructor
   * @param {Number} offset
   * @param {String} reason
   */
  constructor(offset, reason, start) {
    super();
    this.type = 'EncodingError';
    this.name = 'EncodingError';
    this.code = 'ERR_ENCODING';
    this.message = "".concat(reason, " (offset=").concat(offset, ").");
    if (Error.captureStackTrace) Error.captureStackTrace(this, start || EncodingError);
  }

}
/*
 * Expose
 */


var error = EncodingError;

/*
 * Constants
 */


var HI = 1 / 0x100000000;
var {
  MAX_SAFE_INTEGER
} = Number;
var F32_ARRAY = new Float32Array(1);
var F328_ARRAY = new Uint8Array(F32_ARRAY.buffer);
var F64_ARRAY = new Float64Array(1);
var F648_ARRAY = new Uint8Array(F64_ARRAY.buffer);
F32_ARRAY[0] = -1;
var BIG_ENDIAN$2 = F328_ARRAY[3] === 0;
/*
 * Read Unsigned LE
 */

function readU(data, off, len) {
  switch (len) {
    case 8:
      return readU64(data, off);

    case 7:
      return readU56(data, off);

    case 6:
      return readU48(data, off);

    case 5:
      return readU40(data, off);

    case 4:
      return readU32$7(data, off);

    case 3:
      return readU24(data, off);

    case 2:
      return readU16$1(data, off);

    case 1:
      return readU8(data, off);

    default:
      throw new error(off, 'Invalid read length');
  }
}

function readU64(data, off) {
  var hi = readU32$7(data, off + 4);
  var lo = readU32$7(data, off);
  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readU56(data, off) {
  var hi = readU24(data, off + 4);
  var lo = readU32$7(data, off);
  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readU48(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off++] * 0x1000000 + data[off++] * 0x100000000 + data[off] * 0x10000000000;
}

function readU40(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off++] * 0x1000000 + data[off] * 0x100000000;
}

function readU32$7(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function readU24(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off] * 0x10000;
}

function readU16$1(data, off) {
  return data[off++] + data[off] * 0x100;
}

function readU8(data, off) {
  return data[off];
}
/*
 * Read Unsigned BE
 */


function readUBE(data, off, len) {
  switch (len) {
    case 8:
      return readU64BE(data, off);

    case 7:
      return readU56BE(data, off);

    case 6:
      return readU48BE(data, off);

    case 5:
      return readU40BE(data, off);

    case 4:
      return readU32BE$1(data, off);

    case 3:
      return readU24BE(data, off);

    case 2:
      return readU16BE(data, off);

    case 1:
      return readU8(data, off);

    default:
      throw new error(off, 'Invalid read length');
  }
}

function readU64BE(data, off) {
  var hi = readU32BE$1(data, off);
  var lo = readU32BE$1(data, off + 4);
  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readU56BE(data, off) {
  var hi = readU24BE(data, off);
  var lo = readU32BE$1(data, off + 3);
  check((hi & 0xffe00000) === 0, off, 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readU48BE(data, off) {
  return data[off++] * 0x10000000000 + data[off++] * 0x100000000 + data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readU40BE(data, off) {
  return data[off++] * 0x100000000 + data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readU32BE$1(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readU24BE(data, off) {
  return data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readU16BE(data, off) {
  return data[off++] * 0x100 + data[off];
}
/*
 * Read Signed LE
 */


function readI(data, off, len) {
  switch (len) {
    case 8:
      return readI64(data, off);

    case 7:
      return readI56(data, off);

    case 6:
      return readI48(data, off);

    case 5:
      return readI40(data, off);

    case 4:
      return readI32(data, off);

    case 3:
      return readI24(data, off);

    case 2:
      return readI16(data, off);

    case 1:
      return readI8(data, off);

    default:
      throw new error(off, 'Invalid read length');
  }
}

function readI64(data, off) {
  var hi = readI32(data, off + 4);
  var lo = readU32$7(data, off);
  check(isSafe(hi, lo), 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readI56(data, off) {
  var hi = readI24(data, off + 4);
  var lo = readU32$7(data, off);
  check(isSafe(hi, lo), 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readI48(data, off) {
  var val = data[off + 4] + data[off + 5] * 0x100;
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000 + (val | (val & 0x8000) * 0x1fffe) * 0x100000000;
}

function readI40(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off++] * 0x1000000 + (data[off] | (data[off] & 0x80) * 0x1fffffe) * 0x100000000;
}

function readI32(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + (data[off] << 24);
}

function readI24(data, off) {
  var val = data[off++] + data[off++] * 0x100 + data[off] * 0x10000;
  return val | (val & 0x800000) * 0x1fe;
}

function readI16(data, off) {
  var val = data[off++] + data[off] * 0x100;
  return val | (val & 0x8000) * 0x1fffe;
}

function readI8(data, off) {
  var val = data[off];
  return val | (val & 0x80) * 0x1fffffe;
}
/*
 * Read Signed BE
 */


function readIBE(data, off, len) {
  switch (len) {
    case 8:
      return readI64BE(data, off);

    case 7:
      return readI56BE(data, off);

    case 6:
      return readI48BE(data, off);

    case 5:
      return readI40BE(data, off);

    case 4:
      return readI32BE(data, off);

    case 3:
      return readI24BE(data, off);

    case 2:
      return readI16BE(data, off);

    case 1:
      return readI8(data, off);

    default:
      throw new error(off, 'Invalid read length');
  }
}

function readI64BE(data, off) {
  var hi = readI32BE(data, off);
  var lo = readU32BE$1(data, off + 4);
  check(isSafe(hi, lo), 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readI56BE(data, off) {
  var hi = readI24BE(data, off);
  var lo = readU32BE$1(data, off + 3);
  check(isSafe(hi, lo), 'Number exceeds 2^53-1');
  return hi * 0x100000000 + lo;
}

function readI48BE(data, off) {
  var val = data[off++] * 0x100 + data[off++];
  return (val | (val & 0x8000) * 0x1fffe) * 0x100000000 + data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readI40BE(data, off) {
  var val = data[off++];
  return (val | (val & 0x80) * 0x1fffffe) * 0x100000000 + data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readI32BE(data, off) {
  return (data[off++] << 24) + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function readI24BE(data, off) {
  var val = data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
  return val | (val & 0x800000) * 0x1fe;
}

function readI16BE(data, off) {
  var val = data[off++] * 0x100 + data[off];
  return val | (val & 0x8000) * 0x1fffe;
}
/*
 * Read Float
 */


function _readFloatBackwards(data, off) {
  F328_ARRAY[3] = data[off++];
  F328_ARRAY[2] = data[off++];
  F328_ARRAY[1] = data[off++];
  F328_ARRAY[0] = data[off];
  return F32_ARRAY[0];
}

function _readFloatForwards(data, off) {
  F328_ARRAY[0] = data[off++];
  F328_ARRAY[1] = data[off++];
  F328_ARRAY[2] = data[off++];
  F328_ARRAY[3] = data[off];
  return F32_ARRAY[0];
}

function _readDoubleBackwards(data, off) {
  F648_ARRAY[7] = data[off++];
  F648_ARRAY[6] = data[off++];
  F648_ARRAY[5] = data[off++];
  F648_ARRAY[4] = data[off++];
  F648_ARRAY[3] = data[off++];
  F648_ARRAY[2] = data[off++];
  F648_ARRAY[1] = data[off++];
  F648_ARRAY[0] = data[off];
  return F64_ARRAY[0];
}

function _readDoubleForwards(data, off) {
  F648_ARRAY[0] = data[off++];
  F648_ARRAY[1] = data[off++];
  F648_ARRAY[2] = data[off++];
  F648_ARRAY[3] = data[off++];
  F648_ARRAY[4] = data[off++];
  F648_ARRAY[5] = data[off++];
  F648_ARRAY[6] = data[off++];
  F648_ARRAY[7] = data[off];
  return F64_ARRAY[0];
}

var readFloat = BIG_ENDIAN$2 ? _readFloatBackwards : _readFloatForwards;
var readFloatBE = BIG_ENDIAN$2 ? _readFloatForwards : _readFloatBackwards;
var readDouble = BIG_ENDIAN$2 ? _readDoubleBackwards : _readDoubleForwards;
var readDoubleBE = BIG_ENDIAN$2 ? _readDoubleForwards : _readDoubleBackwards;
/*
 * Write Unsigned LE
 */

function writeU(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64(dst, num, off);

    case 7:
      return writeU56(dst, num, off);

    case 6:
      return writeU48(dst, num, off);

    case 5:
      return writeU40(dst, num, off);

    case 4:
      return writeU32$6(dst, num, off);

    case 3:
      return writeU24(dst, num, off);

    case 2:
      return writeU16$1(dst, num, off);

    case 1:
      return writeU8(dst, num, off);

    default:
      throw new error(off, 'Invalid write length');
  }
}

function writeU64(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  return write64(dst, num, off, false);
}

function writeU56(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  return write56(dst, num, off, false);
}

function writeU48(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  var hi = num * HI | 0;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  dst[off++] = hi;
  dst[off++] = hi >>> 8;
  return off;
}

function writeU40(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  var hi = num * HI | 0;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  dst[off++] = hi;
  return off;
}

function writeU32$6(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}

function writeU24(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}

function writeU16$1(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off++] = num;
  dst[off++] = num >>> 8;
  return off;
}

function writeU8(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off] = num;
  return off + 1;
}
/*
 * Write Unsigned BE
 */


function writeUBE(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64BE(dst, num, off);

    case 7:
      return writeU56BE(dst, num, off);

    case 6:
      return writeU48BE(dst, num, off);

    case 5:
      return writeU40BE(dst, num, off);

    case 4:
      return writeU32BE$1(dst, num, off);

    case 3:
      return writeU24BE(dst, num, off);

    case 2:
      return writeU16BE(dst, num, off);

    case 1:
      return writeU8(dst, num, off);

    default:
      throw new error(off, 'Invalid write length');
  }
}

function writeU64BE(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  return write64(dst, num, off, true);
}

function writeU56BE(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  return write56(dst, num, off, true);
}

function writeU48BE(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  var hi = num * HI | 0;
  dst[off++] = hi >>> 8;
  dst[off++] = hi;
  dst[off + 3] = num;
  num >>>= 8;
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;
  return off + 4;
}

function writeU40BE(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  var hi = num * HI | 0;
  dst[off++] = hi;
  dst[off + 3] = num;
  num >>>= 8;
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;
  return off + 4;
}

function writeU32BE$1(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off + 3] = num;
  num >>>= 8;
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;
  return off + 4;
}

function writeU24BE(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off + 2] = num;
  num >>>= 8;
  dst[off + 1] = num;
  num >>>= 8;
  dst[off] = num;
  return off + 3;
}

function writeU16BE(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  dst[off++] = num >>> 8;
  dst[off++] = num;
  return off;
}
/*
 * Write Signed LE
 */


function writeI(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64(dst, num, off);

    case 7:
      return writeU56(dst, num, off);

    case 6:
      return writeU48(dst, num, off);

    case 5:
      return writeU40(dst, num, off);

    case 4:
      return writeU24(dst, num, off);

    case 3:
      return writeU32$6(dst, num, off);

    case 2:
      return writeU16$1(dst, num, off);

    case 1:
      return writeU8(dst, num, off);

    default:
      throw new error(off, 'Invalid write length');
  }
}

function writeI64(dst, num, off) {
  return writeU64(dst, num, off);
}

function writeI56(dst, num, off) {
  return writeU56(dst, num, off);
}

function writeI48(dst, num, off) {
  return writeU48(dst, num, off);
}

function writeI40(dst, num, off) {
  return writeU40(dst, num, off);
}

function writeI32(dst, num, off) {
  return writeU32$6(dst, num, off);
}

function writeI24(dst, num, off) {
  return writeU24(dst, num, off);
}

function writeI16(dst, num, off) {
  return writeU16$1(dst, num, off);
}

function writeI8(dst, num, off) {
  return writeU8(dst, num, off);
}
/*
 * Write Signed BE
 */


function writeIBE(dst, num, off, len) {
  switch (len) {
    case 8:
      return writeU64BE(dst, num, off);

    case 7:
      return writeU56BE(dst, num, off);

    case 6:
      return writeU48BE(dst, num, off);

    case 5:
      return writeU40BE(dst, num, off);

    case 4:
      return writeU32BE$1(dst, num, off);

    case 3:
      return writeU24BE(dst, num, off);

    case 2:
      return writeU16BE(dst, num, off);

    case 1:
      return writeU8(dst, num, off);

    default:
      throw new error(off, 'Invalid write length');
  }
}

function writeI64BE(dst, num, off) {
  return writeU64BE(dst, num, off);
}

function writeI56BE(dst, num, off) {
  return writeU56BE(dst, num, off);
}

function writeI48BE(dst, num, off) {
  return writeU48BE(dst, num, off);
}

function writeI40BE(dst, num, off) {
  return writeU40BE(dst, num, off);
}

function writeI32BE(dst, num, off) {
  return writeU32BE$1(dst, num, off);
}

function writeI24BE(dst, num, off) {
  return writeU24BE(dst, num, off);
}

function writeI16BE(dst, num, off) {
  return writeU16BE(dst, num, off);
}

function _writeDoubleForwards(dst, num, off) {
  enforce_1(isNumber(num), 'num', 'number');
  F64_ARRAY[0] = num;
  dst[off++] = F648_ARRAY[0];
  dst[off++] = F648_ARRAY[1];
  dst[off++] = F648_ARRAY[2];
  dst[off++] = F648_ARRAY[3];
  dst[off++] = F648_ARRAY[4];
  dst[off++] = F648_ARRAY[5];
  dst[off++] = F648_ARRAY[6];
  dst[off++] = F648_ARRAY[7];
  return off;
}

function _writeDoubleBackwards(dst, num, off) {
  enforce_1(isNumber(num), 'num', 'number');
  F64_ARRAY[0] = num;
  dst[off++] = F648_ARRAY[7];
  dst[off++] = F648_ARRAY[6];
  dst[off++] = F648_ARRAY[5];
  dst[off++] = F648_ARRAY[4];
  dst[off++] = F648_ARRAY[3];
  dst[off++] = F648_ARRAY[2];
  dst[off++] = F648_ARRAY[1];
  dst[off++] = F648_ARRAY[0];
  return off;
}

function _writeFloatForwards(dst, num, off) {
  enforce_1(isNumber(num), 'num', 'number');
  F32_ARRAY[0] = num;
  dst[off++] = F328_ARRAY[0];
  dst[off++] = F328_ARRAY[1];
  dst[off++] = F328_ARRAY[2];
  dst[off++] = F328_ARRAY[3];
  return off;
}

function _writeFloatBackwards(dst, num, off) {
  enforce_1(isNumber(num), 'num', 'number');
  F32_ARRAY[0] = num;
  dst[off++] = F328_ARRAY[3];
  dst[off++] = F328_ARRAY[2];
  dst[off++] = F328_ARRAY[1];
  dst[off++] = F328_ARRAY[0];
  return off;
}

var writeFloat$1 = BIG_ENDIAN$2 ? _writeFloatBackwards : _writeFloatForwards;
var writeFloatBE = BIG_ENDIAN$2 ? _writeFloatForwards : _writeFloatBackwards;
var writeDouble$1 = BIG_ENDIAN$2 ? _writeDoubleBackwards : _writeDoubleForwards;
var writeDoubleBE = BIG_ENDIAN$2 ? _writeDoubleForwards : _writeDoubleBackwards;
/*
 * Varints
 */

function readVarint(data, off) {
  var value, size;
  checkRead(off < data.length, off);

  switch (data[off]) {
    case 0xff:
      size = 9;
      checkRead(off + size <= data.length, off);
      value = readU64(data, off + 1);
      check(value > 0xffffffff, off, 'Non-canonical varint');
      break;

    case 0xfe:
      size = 5;
      checkRead(off + size <= data.length, off);
      value = readU32$7(data, off + 1);
      check(value > 0xffff, off, 'Non-canonical varint');
      break;

    case 0xfd:
      size = 3;
      checkRead(off + size <= data.length, off);
      value = readU16$1(data, off + 1);
      check(value >= 0xfd, off, 'Non-canonical varint');
      break;

    default:
      size = 1;
      value = data[off];
      break;
  }

  return new Varint(size, value);
}

function writeVarint(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');

  if (num < 0xfd) {
    dst[off++] = num;
    return off;
  }

  if (num <= 0xffff) {
    dst[off++] = 0xfd;
    return writeU16$1(dst, num, off);
  }

  if (num <= 0xffffffff) {
    dst[off++] = 0xfe;
    return writeU32$6(dst, num, off);
  }

  dst[off++] = 0xff;
  return writeU64(dst, num, off);
}

function sizeVarint(num) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  if (num < 0xfd) return 1;
  if (num <= 0xffff) return 3;
  if (num <= 0xffffffff) return 5;
  return 9;
}

function readVarint2(data, off) {
  var num = 0;
  var size = 0;

  for (;;) {
    checkRead(off < data.length, off);
    var ch = data[off++];
    size += 1; // Number.MAX_SAFE_INTEGER >>> 7

    check(num <= 0x3fffffffffff - (ch & 0x7f), off, 'Number exceeds 2^53-1'); // num = (num << 7) | (ch & 0x7f);

    num = num * 0x80 + (ch & 0x7f);
    if ((ch & 0x80) === 0) break;
    check(num !== MAX_SAFE_INTEGER, off, 'Number exceeds 2^53-1');
    num += 1;
  }

  return new Varint(size, num);
}

function writeVarint2(dst, num, off) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  var tmp = [];
  var len = 0;

  for (;;) {
    tmp[len] = num & 0x7f | (len ? 0x80 : 0x00);
    if (num <= 0x7f) break; // num = (num >>> 7) - 1;

    num = (num - num % 0x80) / 0x80 - 1;
    len += 1;
  }

  checkRead(off + len + 1 <= dst.length, off);

  do {
    dst[off++] = tmp[len];
  } while (len--);

  return off;
}

function sizeVarint2(num) {
  enforce_1(Number.isSafeInteger(num), 'num', 'integer');
  var size = 0;

  for (;;) {
    size += 1;
    if (num <= 0x7f) break; // num = (num >>> 7) - 1;

    num = (num - num % 0x80) / 0x80 - 1;
  }

  return size;
}
/*
 * Bytes
 */


function sliceBytes(data, off, size) {
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  enforce_1(off >>> 0 === off, 'off', 'integer');
  enforce_1(size >>> 0 === size, 'size', 'integer');
  if (off + size > data.length) throw new error(off, 'Out of bounds read');
  return data.slice(off, off + size);
}

function readBytes(data, off, size) {
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  enforce_1(off >>> 0 === off, 'off', 'integer');
  enforce_1(size >>> 0 === size, 'size', 'integer');
  if (off + size > data.length) throw new error(off, 'Out of bounds read');
  var buf = Buffer.allocUnsafe(size);
  data.copy(buf, 0, off, off + size);
  return buf;
}

function writeBytes(data, value, off) {
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
  enforce_1(off >>> 0 === off, 'off', 'integer');
  if (off + value.length > data.length) throw new error(off, 'Out of bounds write');
  return value.copy(data, off, 0, value.length);
}

function readString(data, off, size, enc) {
  if (enc == null) enc = 'binary';
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  enforce_1(off >>> 0 === off, 'off', 'integer');
  enforce_1(size >>> 0 === size, 'size', 'integer');
  enforce_1(typeof enc === 'string', 'enc', 'string');
  if (off + size > data.length) throw new error(off, 'Out of bounds read');
  return data.toString(enc, off, off + size);
}

function writeString(data, str, off, enc) {
  if (enc == null) enc = 'binary';
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  enforce_1(typeof str === 'string', 'str', 'string');
  enforce_1(off >>> 0 === off, 'off', 'integer');
  enforce_1(typeof enc === 'string', 'enc', 'string');
  if (str.length === 0) return 0;
  var size = Buffer.byteLength(str, enc);
  if (off + size > data.length) throw new error(off, 'Out of bounds write');
  return data.write(str, off, enc);
}

function realloc(data, size) {
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  var buf = Buffer.allocUnsafe(size);
  data.copy(buf, 0);
  return buf;
}

function copy$1(data) {
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  return realloc(data, data.length);
}

function concat$1(a, b) {
  enforce_1(Buffer.isBuffer(a), 'a', 'buffer');
  enforce_1(Buffer.isBuffer(b), 'b', 'buffer');
  var size = a.length + b.length;
  var buf = Buffer.allocUnsafe(size);
  a.copy(buf, 0);
  b.copy(buf, a.length);
  return buf;
}
/*
 * Size Helpers
 */


function sizeVarBytes(data) {
  enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
  return sizeVarint(data.length) + data.length;
}

function sizeVarlen(len) {
  return sizeVarint(len) + len;
}

function sizeVarString(str, enc) {
  if (enc == null) enc = 'binary';
  enforce_1(typeof str === 'string', 'str', 'string');
  enforce_1(typeof enc === 'string', 'enc', 'string');
  if (str.length === 0) return 1;
  var len = Buffer.byteLength(str, enc);
  return sizeVarint(len) + len;
}
/*
 * Helpers
 */


function isSafe(hi, lo) {
  if (hi < 0) {
    hi = ~hi;
    if (lo === 0) hi += 1;
  }

  return (hi & 0xffe00000) === 0;
}

function write64(dst, num, off, be) {
  var neg = false;

  if (num < 0) {
    num = -num;
    neg = true;
  }

  var hi = num * HI | 0;
  var lo = num | 0;

  if (neg) {
    if (lo === 0) {
      hi = ~hi + 1 | 0;
    } else {
      hi = ~hi;
      lo = ~lo + 1;
    }
  }

  if (be) {
    off = writeI32BE(dst, hi, off);
    off = writeI32BE(dst, lo, off);
  } else {
    off = writeI32(dst, lo, off);
    off = writeI32(dst, hi, off);
  }

  return off;
}

function write56(dst, num, off, be) {
  var neg = false;

  if (num < 0) {
    num = -num;
    neg = true;
  }

  var hi = num * HI | 0;
  var lo = num | 0;

  if (neg) {
    if (lo === 0) {
      hi = ~hi + 1 | 0;
    } else {
      hi = ~hi;
      lo = ~lo + 1;
    }
  }

  if (be) {
    off = writeI24BE(dst, hi, off);
    off = writeI32BE(dst, lo, off);
  } else {
    off = writeI32(dst, lo, off);
    off = writeI24(dst, hi, off);
  }

  return off;
}

class Varint {
  constructor(size, value) {
    this.size = size;
    this.value = value;
  }

}

function isNumber(num) {
  return typeof num === 'number' && isFinite(num);
}

function checkRead(value, offset) {
  if (!value) throw new error(offset, 'Out of bounds read', checkRead);
}

function check(value, offset, reason) {
  if (!value) throw new error(offset, reason, check);
}
/*
 * Expose
 */


var readU_1 = readU;
var readU64_1 = readU64;
var readU56_1 = readU56;
var readU48_1 = readU48;
var readU40_1 = readU40;
var readU32_1 = readU32$7;
var readU24_1 = readU24;
var readU16_1 = readU16$1;
var readU8_1 = readU8;
var readUBE_1 = readUBE;
var readU64BE_1 = readU64BE;
var readU56BE_1 = readU56BE;
var readU48BE_1 = readU48BE;
var readU40BE_1 = readU40BE;
var readU32BE_1 = readU32BE$1;
var readU24BE_1 = readU24BE;
var readU16BE_1 = readU16BE;
var readI_1 = readI;
var readI64_1 = readI64;
var readI56_1 = readI56;
var readI48_1 = readI48;
var readI40_1 = readI40;
var readI32_1 = readI32;
var readI24_1 = readI24;
var readI16_1 = readI16;
var readI8_1 = readI8;
var readIBE_1 = readIBE;
var readI64BE_1 = readI64BE;
var readI56BE_1 = readI56BE;
var readI48BE_1 = readI48BE;
var readI40BE_1 = readI40BE;
var readI32BE_1 = readI32BE;
var readI24BE_1 = readI24BE;
var readI16BE_1 = readI16BE;
var readFloat_1 = readFloat;
var readFloatBE_1 = readFloatBE;
var readDouble_1 = readDouble;
var readDoubleBE_1 = readDoubleBE;
var writeU_1 = writeU;
var writeU64_1 = writeU64;
var writeU56_1 = writeU56;
var writeU48_1 = writeU48;
var writeU40_1 = writeU40;
var writeU32_1 = writeU32$6;
var writeU24_1 = writeU24;
var writeU16_1 = writeU16$1;
var writeU8_1 = writeU8;
var writeUBE_1 = writeUBE;
var writeU64BE_1 = writeU64BE;
var writeU56BE_1 = writeU56BE;
var writeU48BE_1 = writeU48BE;
var writeU40BE_1 = writeU40BE;
var writeU32BE_1 = writeU32BE$1;
var writeU24BE_1 = writeU24BE;
var writeU16BE_1 = writeU16BE;
var writeI_1 = writeI;
var writeI64_1 = writeI64;
var writeI56_1 = writeI56;
var writeI48_1 = writeI48;
var writeI40_1 = writeI40;
var writeI32_1 = writeI32;
var writeI24_1 = writeI24;
var writeI16_1 = writeI16;
var writeI8_1 = writeI8;
var writeIBE_1 = writeIBE;
var writeI64BE_1 = writeI64BE;
var writeI56BE_1 = writeI56BE;
var writeI48BE_1 = writeI48BE;
var writeI40BE_1 = writeI40BE;
var writeI32BE_1 = writeI32BE;
var writeI24BE_1 = writeI24BE;
var writeI16BE_1 = writeI16BE;
var writeFloat_1 = writeFloat$1;
var writeFloatBE_1 = writeFloatBE;
var writeDouble_1 = writeDouble$1;
var writeDoubleBE_1 = writeDoubleBE;
var readVarint_1 = readVarint;
var writeVarint_1 = writeVarint;
var sizeVarint_1 = sizeVarint;
var readVarint2_1 = readVarint2;
var writeVarint2_1 = writeVarint2;
var sizeVarint2_1 = sizeVarint2;
var sliceBytes_1 = sliceBytes;
var readBytes_1 = readBytes;
var writeBytes_1 = writeBytes;
var readString_1 = readString;
var writeString_1 = writeString;
var realloc_1 = realloc;
var copy_1 = copy$1;
var concat_1 = concat$1;
var sizeVarBytes_1 = sizeVarBytes;
var sizeVarlen_1 = sizeVarlen;
var sizeVarString_1 = sizeVarString;
var encoding = {
  readU: readU_1,
  readU64: readU64_1,
  readU56: readU56_1,
  readU48: readU48_1,
  readU40: readU40_1,
  readU32: readU32_1,
  readU24: readU24_1,
  readU16: readU16_1,
  readU8: readU8_1,
  readUBE: readUBE_1,
  readU64BE: readU64BE_1,
  readU56BE: readU56BE_1,
  readU48BE: readU48BE_1,
  readU40BE: readU40BE_1,
  readU32BE: readU32BE_1,
  readU24BE: readU24BE_1,
  readU16BE: readU16BE_1,
  readI: readI_1,
  readI64: readI64_1,
  readI56: readI56_1,
  readI48: readI48_1,
  readI40: readI40_1,
  readI32: readI32_1,
  readI24: readI24_1,
  readI16: readI16_1,
  readI8: readI8_1,
  readIBE: readIBE_1,
  readI64BE: readI64BE_1,
  readI56BE: readI56BE_1,
  readI48BE: readI48BE_1,
  readI40BE: readI40BE_1,
  readI32BE: readI32BE_1,
  readI24BE: readI24BE_1,
  readI16BE: readI16BE_1,
  readFloat: readFloat_1,
  readFloatBE: readFloatBE_1,
  readDouble: readDouble_1,
  readDoubleBE: readDoubleBE_1,
  writeU: writeU_1,
  writeU64: writeU64_1,
  writeU56: writeU56_1,
  writeU48: writeU48_1,
  writeU40: writeU40_1,
  writeU32: writeU32_1,
  writeU24: writeU24_1,
  writeU16: writeU16_1,
  writeU8: writeU8_1,
  writeUBE: writeUBE_1,
  writeU64BE: writeU64BE_1,
  writeU56BE: writeU56BE_1,
  writeU48BE: writeU48BE_1,
  writeU40BE: writeU40BE_1,
  writeU32BE: writeU32BE_1,
  writeU24BE: writeU24BE_1,
  writeU16BE: writeU16BE_1,
  writeI: writeI_1,
  writeI64: writeI64_1,
  writeI56: writeI56_1,
  writeI48: writeI48_1,
  writeI40: writeI40_1,
  writeI32: writeI32_1,
  writeI24: writeI24_1,
  writeI16: writeI16_1,
  writeI8: writeI8_1,
  writeIBE: writeIBE_1,
  writeI64BE: writeI64BE_1,
  writeI56BE: writeI56BE_1,
  writeI48BE: writeI48BE_1,
  writeI40BE: writeI40BE_1,
  writeI32BE: writeI32BE_1,
  writeI24BE: writeI24BE_1,
  writeI16BE: writeI16BE_1,
  writeFloat: writeFloat_1,
  writeFloatBE: writeFloatBE_1,
  writeDouble: writeDouble_1,
  writeDoubleBE: writeDoubleBE_1,
  readVarint: readVarint_1,
  writeVarint: writeVarint_1,
  sizeVarint: sizeVarint_1,
  readVarint2: readVarint2_1,
  writeVarint2: writeVarint2_1,
  sizeVarint2: sizeVarint2_1,
  sliceBytes: sliceBytes_1,
  readBytes: readBytes_1,
  writeBytes: writeBytes_1,
  readString: readString_1,
  writeString: writeString_1,
  realloc: realloc_1,
  copy: copy_1,
  concat: concat_1,
  sizeVarBytes: sizeVarBytes_1,
  sizeVarlen: sizeVarlen_1,
  sizeVarString: sizeVarString_1
};

/*
 * Constants
 */


var EMPTY$2 = Buffer.alloc(0);
/**
 * Buffer Reader
 */

class BufferReader {
  /**
   * Create a buffer reader.
   * @constructor
   * @param {Buffer} data
   * @param {Boolean?} zeroCopy - Do not reallocate buffers when
   * slicing. Note that this can lead to memory leaks if not used
   * carefully.
   */
  constructor(data) {
    var zeroCopy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(typeof zeroCopy === 'boolean', 'zeroCopy', 'boolean');
    this.data = data;
    this.offset = 0;
    this.zeroCopy = zeroCopy;
    this.stack = [];
  }
  /**
   * Assertion.
   * @param {Number} size
   */


  check(size) {
    if (this.offset + size > this.data.length) throw new error(this.offset, 'Out of bounds read', this.check);
  }
  /**
   * Get total size of passed-in Buffer.
   * @returns {Buffer}
   */


  getSize() {
    return this.data.length;
  }
  /**
   * Calculate number of bytes left to read.
   * @returns {Number}
   */


  left() {
    this.check(0);
    return this.data.length - this.offset;
  }
  /**
   * Seek to a position to read from by offset.
   * @param {Number} off - Offset (positive or negative).
   */


  seek(off) {
    enforce_1(Number.isSafeInteger(off), 'off', 'integer');
    if (this.offset + off < 0) throw new error(this.offset, 'Out of bounds read');
    this.check(off);
    this.offset += off;
    return this;
  }
  /**
   * Mark the current starting position.
   */


  start() {
    this.stack.push(this.offset);
    return this.offset;
  }
  /**
   * Stop reading. Pop the start position off the stack
   * and calculate the size of the data read.
   * @returns {Number} Size.
   * @throws on empty stack.
   */


  end() {
    if (this.stack.length === 0) throw new Error('Cannot end without a stack item.');
    var start = this.stack.pop();
    return this.offset - start;
  }
  /**
   * Stop reading. Pop the start position off the stack
   * and return the data read.
   * @param {Bolean?} zeroCopy - Do a fast buffer
   * slice instead of allocating a new buffer (warning:
   * may cause memory leaks if not used with care).
   * @returns {Buffer} Data read.
   * @throws on empty stack.
   */


  endData() {
    var zeroCopy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    enforce_1(typeof zeroCopy === 'boolean', 'zeroCopy', 'boolean');
    if (this.stack.length === 0) throw new Error('Cannot end without a stack item.');
    var start = this.stack.pop();
    var end = this.offset;
    var size = end - start;
    var data = this.data;
    if (size === data.length) return data;
    if (this.zeroCopy || zeroCopy) return data.slice(start, end);
    var ret = Buffer.allocUnsafe(size);
    data.copy(ret, 0, start, end);
    return ret;
  }
  /**
   * Destroy the reader. Remove references to the data.
   */


  destroy() {
    this.data = EMPTY$2;
    this.offset = 0;
    this.stack.length = 0;
    return this;
  }
  /**
   * Read uint8.
   * @returns {Number}
   */


  readU8() {
    this.check(1);
    var ret = this.data[this.offset];
    this.offset += 1;
    return ret;
  }
  /**
   * Read uint16le.
   * @returns {Number}
   */


  readU16() {
    this.check(2);
    var ret = encoding.readU16(this.data, this.offset);
    this.offset += 2;
    return ret;
  }
  /**
   * Read uint16be.
   * @returns {Number}
   */


  readU16BE() {
    this.check(2);
    var ret = encoding.readU16BE(this.data, this.offset);
    this.offset += 2;
    return ret;
  }
  /**
   * Read uint24le.
   * @returns {Number}
   */


  readU24() {
    this.check(3);
    var ret = encoding.readU24(this.data, this.offset);
    this.offset += 3;
    return ret;
  }
  /**
   * Read uint24be.
   * @returns {Number}
   */


  readU24BE() {
    this.check(3);
    var ret = encoding.readU24BE(this.data, this.offset);
    this.offset += 3;
    return ret;
  }
  /**
   * Read uint32le.
   * @returns {Number}
   */


  readU32() {
    this.check(4);
    var ret = encoding.readU32(this.data, this.offset);
    this.offset += 4;
    return ret;
  }
  /**
   * Read uint32be.
   * @returns {Number}
   */


  readU32BE() {
    this.check(4);
    var ret = encoding.readU32BE(this.data, this.offset);
    this.offset += 4;
    return ret;
  }
  /**
   * Read uint40le.
   * @returns {Number}
   */


  readU40() {
    this.check(5);
    var ret = encoding.readU40(this.data, this.offset);
    this.offset += 5;
    return ret;
  }
  /**
   * Read uint40be.
   * @returns {Number}
   */


  readU40BE() {
    this.check(5);
    var ret = encoding.readU40BE(this.data, this.offset);
    this.offset += 5;
    return ret;
  }
  /**
   * Read uint48le.
   * @returns {Number}
   */


  readU48() {
    this.check(6);
    var ret = encoding.readU48(this.data, this.offset);
    this.offset += 6;
    return ret;
  }
  /**
   * Read uint48be.
   * @returns {Number}
   */


  readU48BE() {
    this.check(6);
    var ret = encoding.readU48BE(this.data, this.offset);
    this.offset += 6;
    return ret;
  }
  /**
   * Read uint56le.
   * @returns {Number}
   */


  readU56() {
    this.check(7);
    var ret = encoding.readU56(this.data, this.offset);
    this.offset += 7;
    return ret;
  }
  /**
   * Read uint56be.
   * @returns {Number}
   */


  readU56BE() {
    this.check(7);
    var ret = encoding.readU56BE(this.data, this.offset);
    this.offset += 7;
    return ret;
  }
  /**
   * Read uint64le as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */


  readU64() {
    this.check(8);
    var ret = encoding.readU64(this.data, this.offset);
    this.offset += 8;
    return ret;
  }
  /**
   * Read uint64be as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */


  readU64BE() {
    this.check(8);
    var ret = encoding.readU64BE(this.data, this.offset);
    this.offset += 8;
    return ret;
  }
  /**
   * Read int8.
   * @returns {Number}
   */


  readI8() {
    this.check(1);
    var ret = encoding.readI8(this.data, this.offset);
    this.offset += 1;
    return ret;
  }
  /**
   * Read int16le.
   * @returns {Number}
   */


  readI16() {
    this.check(2);
    var ret = encoding.readI16(this.data, this.offset);
    this.offset += 2;
    return ret;
  }
  /**
   * Read int16be.
   * @returns {Number}
   */


  readI16BE() {
    this.check(2);
    var ret = encoding.readI16BE(this.data, this.offset);
    this.offset += 2;
    return ret;
  }
  /**
   * Read int24le.
   * @returns {Number}
   */


  readI24() {
    this.check(3);
    var ret = encoding.readI24(this.data, this.offset);
    this.offset += 3;
    return ret;
  }
  /**
   * Read int24be.
   * @returns {Number}
   */


  readI24BE() {
    this.check(3);
    var ret = encoding.readI24BE(this.data, this.offset);
    this.offset += 3;
    return ret;
  }
  /**
   * Read int32le.
   * @returns {Number}
   */


  readI32() {
    this.check(4);
    var ret = encoding.readI32(this.data, this.offset);
    this.offset += 4;
    return ret;
  }
  /**
   * Read int32be.
   * @returns {Number}
   */


  readI32BE() {
    this.check(4);
    var ret = encoding.readI32BE(this.data, this.offset);
    this.offset += 4;
    return ret;
  }
  /**
   * Read int40le.
   * @returns {Number}
   */


  readI40() {
    this.check(5);
    var ret = encoding.readI40(this.data, this.offset);
    this.offset += 5;
    return ret;
  }
  /**
   * Read int40be.
   * @returns {Number}
   */


  readI40BE() {
    this.check(5);
    var ret = encoding.readI40BE(this.data, this.offset);
    this.offset += 5;
    return ret;
  }
  /**
   * Read int48le.
   * @returns {Number}
   */


  readI48() {
    this.check(6);
    var ret = encoding.readI48(this.data, this.offset);
    this.offset += 6;
    return ret;
  }
  /**
   * Read int48be.
   * @returns {Number}
   */


  readI48BE() {
    this.check(6);
    var ret = encoding.readI48BE(this.data, this.offset);
    this.offset += 6;
    return ret;
  }
  /**
   * Read int56le.
   * @returns {Number}
   */


  readI56() {
    this.check(7);
    var ret = encoding.readI56(this.data, this.offset);
    this.offset += 7;
    return ret;
  }
  /**
   * Read int56be.
   * @returns {Number}
   */


  readI56BE() {
    this.check(7);
    var ret = encoding.readI56BE(this.data, this.offset);
    this.offset += 7;
    return ret;
  }
  /**
   * Read int64le as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */


  readI64() {
    this.check(8);
    var ret = encoding.readI64(this.data, this.offset);
    this.offset += 8;
    return ret;
  }
  /**
   * Read int64be as a js number.
   * @returns {Number}
   * @throws on num > MAX_SAFE_INTEGER
   */


  readI64BE() {
    this.check(8);
    var ret = encoding.readI64BE(this.data, this.offset);
    this.offset += 8;
    return ret;
  }
  /**
   * Read float le.
   * @returns {Number}
   */


  readFloat() {
    this.check(4);
    var ret = encoding.readFloat(this.data, this.offset);
    this.offset += 4;
    return ret;
  }
  /**
   * Read float be.
   * @returns {Number}
   */


  readFloatBE() {
    this.check(4);
    var ret = encoding.readFloatBE(this.data, this.offset);
    this.offset += 4;
    return ret;
  }
  /**
   * Read double float le.
   * @returns {Number}
   */


  readDouble() {
    this.check(8);
    var ret = encoding.readDouble(this.data, this.offset);
    this.offset += 8;
    return ret;
  }
  /**
   * Read double float be.
   * @returns {Number}
   */


  readDoubleBE() {
    this.check(8);
    var ret = encoding.readDoubleBE(this.data, this.offset);
    this.offset += 8;
    return ret;
  }
  /**
   * Read a varint.
   * @returns {Number}
   */


  readVarint() {
    var {
      size,
      value
    } = encoding.readVarint(this.data, this.offset);
    this.offset += size;
    return value;
  }
  /**
   * Read a varint (type 2).
   * @returns {Number}
   */


  readVarint2() {
    var {
      size,
      value
    } = encoding.readVarint2(this.data, this.offset);
    this.offset += size;
    return value;
  }
  /**
   * Read N bytes (will do a fast slice if zero copy).
   * @param {Number} size
   * @param {Bolean?} zeroCopy - Do a fast buffer
   * slice instead of allocating a new buffer (warning:
   * may cause memory leaks if not used with care).
   * @returns {Buffer}
   */


  readBytes(size) {
    var zeroCopy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    enforce_1(size >>> 0 === size, 'size', 'integer');
    enforce_1(typeof zeroCopy === 'boolean', 'zeroCopy', 'boolean');
    this.check(size);
    var ret;

    if (this.zeroCopy || zeroCopy) {
      ret = this.data.slice(this.offset, this.offset + size);
    } else {
      ret = Buffer.allocUnsafe(size);
      this.data.copy(ret, 0, this.offset, this.offset + size);
    }

    this.offset += size;
    return ret;
  }
  /**
   * Read a varint number of bytes (will do a fast slice if zero copy).
   * @param {Bolean?} zeroCopy - Do a fast buffer
   * slice instead of allocating a new buffer (warning:
   * may cause memory leaks if not used with care).
   * @returns {Buffer}
   */


  readVarBytes() {
    var zeroCopy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return this.readBytes(this.readVarint(), zeroCopy);
  }
  /**
   * Slice N bytes and create a child reader.
   * @param {Number} size
   * @returns {BufferReader}
   */


  readChild(size) {
    enforce_1(size >>> 0 === size, 'size', 'integer');
    this.check(size);
    var data = this.data.slice(0, this.offset + size);
    var br = new this.constructor(data);
    br.offset = this.offset;
    this.offset += size;
    return br;
  }
  /**
   * Read a string.
   * @param {Number} size
   * @param {String} enc - Any buffer-supported encoding.
   * @returns {String}
   */


  readString(size, enc) {
    if (enc == null) enc = 'binary';
    enforce_1(size >>> 0 === size, 'size', 'integer');
    enforce_1(typeof enc === 'string', 'enc', 'string');
    this.check(size);
    var ret = this.data.toString(enc, this.offset, this.offset + size);
    this.offset += size;
    return ret;
  }
  /**
   * Read a 32-byte hash.
   * @param {String} enc - `"hex"` or `null`.
   * @returns {Hash|Buffer}
   */


  readHash(enc) {
    if (enc) return this.readString(32, enc);
    return this.readBytes(32);
  }
  /**
   * Read string of a varint length.
   * @param {String} enc - Any buffer-supported encoding.
   * @param {Number?} limit - Size limit.
   * @returns {String}
   */


  readVarString(enc) {
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (enc == null) enc = 'binary';
    enforce_1(typeof enc === 'string', 'enc', 'string');
    enforce_1(limit >>> 0 === limit, 'limit', 'integer');
    var size = this.readVarint();
    if (limit !== 0 && size > limit) throw new error(this.offset, 'String exceeds limit');
    return this.readString(size, enc);
  }
  /**
   * Read a null-terminated string.
   * @param {String} enc - Any buffer-supported encoding.
   * @returns {String}
   */


  readNullString(enc) {
    if (enc == null) enc = 'binary';
    enforce_1(typeof enc === 'string', 'enc', 'string');
    var i = this.offset;

    for (; i < this.data.length; i++) {
      if (this.data[i] === 0) break;
    }

    if (i === this.data.length) throw new error(this.offset, 'No NUL terminator');
    var ret = this.readString(i - this.offset, enc);
    this.offset = i + 1;
    return ret;
  }
  /**
   * Create a checksum from the last start position.
   * @param {Function} hash
   * @returns {Number} Checksum.
   */


  createChecksum(hash) {
    enforce_1(typeof hash === 'function', 'hash', 'function');
    var start = 0;
    if (this.stack.length > 0) start = this.stack[this.stack.length - 1];
    var data = this.data.slice(start, this.offset);
    return encoding.readU32(hash(data), 0);
  }
  /**
   * Verify a 4-byte checksum against a calculated checksum.
   * @param {Function} hash
   * @returns {Number} checksum
   * @throws on bad checksum
   */


  verifyChecksum(hash) {
    var checksum = this.createChecksum(hash);
    var expect = this.readU32();
    if (checksum !== expect) throw new error(this.offset, 'Checksum mismatch');
    return checksum;
  }

}
/*
 * Expose
 */


var reader = BufferReader;

/*
 * Constants
 */


var SEEK = 0;
var U8 = 1;
var U16 = 2;
var U16BE = 3;
var U24 = 4;
var U24BE = 5;
var U32 = 6;
var U32BE = 7;
var U40 = 8;
var U40BE = 9;
var U48 = 10;
var U48BE = 11;
var U56 = 12;
var U56BE = 13;
var U64 = 14;
var U64BE = 15;
var I8 = 16;
var I16 = 17;
var I16BE = 18;
var I24 = 19;
var I24BE = 20;
var I32 = 21;
var I32BE = 22;
var I40 = 23;
var I40BE = 24;
var I48 = 25;
var I48BE = 26;
var I56 = 27;
var I56BE = 28;
var I64 = 29;
var I64BE = 30;
var FL = 31;
var FLBE = 32;
var DBL = 33;
var DBLBE = 34;
var VARINT = 35;
var VARINT2 = 36;
var BYTES = 37;
var STR = 38;
var CHECKSUM = 39;
var FILL = 40;
/**
 * Buffer Writer
 */

class BufferWriter {
  /**
   * Create a buffer writer.
   * @constructor
   */
  constructor() {
    this.ops = [];
    this.offset = 0;
  }
  /**
   * Allocate and render the final buffer.
   * @returns {Buffer} Rendered buffer.
   */


  render() {
    var data = Buffer.allocUnsafe(this.offset);
    var off = 0;

    for (var op of this.ops) {
      switch (op.type) {
        case SEEK:
          off += op.value;
          break;

        case U8:
          off = encoding.writeU8(data, op.value, off);
          break;

        case U16:
          off = encoding.writeU16(data, op.value, off);
          break;

        case U16BE:
          off = encoding.writeU16BE(data, op.value, off);
          break;

        case U24:
          off = encoding.writeU24(data, op.value, off);
          break;

        case U24BE:
          off = encoding.writeU24BE(data, op.value, off);
          break;

        case U32:
          off = encoding.writeU32(data, op.value, off);
          break;

        case U32BE:
          off = encoding.writeU32BE(data, op.value, off);
          break;

        case U40:
          off = encoding.writeU40(data, op.value, off);
          break;

        case U40BE:
          off = encoding.writeU40BE(data, op.value, off);
          break;

        case U48:
          off = encoding.writeU48(data, op.value, off);
          break;

        case U48BE:
          off = encoding.writeU48BE(data, op.value, off);
          break;

        case U56:
          off = encoding.writeU56(data, op.value, off);
          break;

        case U56BE:
          off = encoding.writeU56BE(data, op.value, off);
          break;

        case U64:
          off = encoding.writeU64(data, op.value, off);
          break;

        case U64BE:
          off = encoding.writeU64BE(data, op.value, off);
          break;

        case I8:
          off = encoding.writeI8(data, op.value, off);
          break;

        case I16:
          off = encoding.writeI16(data, op.value, off);
          break;

        case I16BE:
          off = encoding.writeI16BE(data, op.value, off);
          break;

        case I24:
          off = encoding.writeI24(data, op.value, off);
          break;

        case I24BE:
          off = encoding.writeI24BE(data, op.value, off);
          break;

        case I32:
          off = encoding.writeI32(data, op.value, off);
          break;

        case I32BE:
          off = encoding.writeI32BE(data, op.value, off);
          break;

        case I40:
          off = encoding.writeI40(data, op.value, off);
          break;

        case I40BE:
          off = encoding.writeI40BE(data, op.value, off);
          break;

        case I48:
          off = encoding.writeI48(data, op.value, off);
          break;

        case I48BE:
          off = encoding.writeI48BE(data, op.value, off);
          break;

        case I56:
          off = encoding.writeI56(data, op.value, off);
          break;

        case I56BE:
          off = encoding.writeI56BE(data, op.value, off);
          break;

        case I64:
          off = encoding.writeI64(data, op.value, off);
          break;

        case I64BE:
          off = encoding.writeI64BE(data, op.value, off);
          break;

        case FL:
          off = encoding.writeFloat(data, op.value, off);
          break;

        case FLBE:
          off = encoding.writeFloatBE(data, op.value, off);
          break;

        case DBL:
          off = encoding.writeDouble(data, op.value, off);
          break;

        case DBLBE:
          off = encoding.writeDoubleBE(data, op.value, off);
          break;

        case VARINT:
          off = encoding.writeVarint(data, op.value, off);
          break;

        case VARINT2:
          off = encoding.writeVarint2(data, op.value, off);
          break;

        case BYTES:
          off += op.data.copy(data, off);
          break;

        case STR:
          off += data.write(op.value, off, op.enc);
          break;

        case CHECKSUM:
          off += op.func(data.slice(0, off)).copy(data, off, 0, 4);
          break;

        case FILL:
          data.fill(op.value, off, off + op.size);
          off += op.size;
          break;

        default:
          throw new Error('Invalid type.');
      }
    }

    if (off !== data.length) throw new error(off, 'Out of bounds write');
    this.destroy();
    return data;
  }
  /**
   * Get size of data written so far.
   * @returns {Number}
   */


  getSize() {
    return this.offset;
  }
  /**
   * Seek to relative offset.
   * @param {Number} offset
   */


  seek(off) {
    enforce_1(Number.isSafeInteger(off), 'off', 'integer');
    if (this.offset + off < 0) throw new error(this.offset, 'Out of bounds write');
    this.offset += off;
    this.ops.push(new NumberOp(SEEK, off));
    return this;
  }
  /**
   * Destroy the buffer writer. Remove references to `ops`.
   */


  destroy() {
    this.ops.length = 0;
    this.offset = 0;
    return this;
  }
  /**
   * Write uint8.
   * @param {Number} value
   */


  writeU8(value) {
    this.offset += 1;
    this.ops.push(new NumberOp(U8, value));
    return this;
  }
  /**
   * Write uint16le.
   * @param {Number} value
   */


  writeU16(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(U16, value));
    return this;
  }
  /**
   * Write uint16be.
   * @param {Number} value
   */


  writeU16BE(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(U16BE, value));
    return this;
  }
  /**
   * Write uint24le.
   * @param {Number} value
   */


  writeU24(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(U24, value));
    return this;
  }
  /**
   * Write uint24be.
   * @param {Number} value
   */


  writeU24BE(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(U24BE, value));
    return this;
  }
  /**
   * Write uint32le.
   * @param {Number} value
   */


  writeU32(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(U32, value));
    return this;
  }
  /**
   * Write uint32be.
   * @param {Number} value
   */


  writeU32BE(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(U32BE, value));
    return this;
  }
  /**
   * Write uint40le.
   * @param {Number} value
   */


  writeU40(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(U40, value));
    return this;
  }
  /**
   * Write uint40be.
   * @param {Number} value
   */


  writeU40BE(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(U40BE, value));
    return this;
  }
  /**
   * Write uint48le.
   * @param {Number} value
   */


  writeU48(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(U48, value));
    return this;
  }
  /**
   * Write uint48be.
   * @param {Number} value
   */


  writeU48BE(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(U48BE, value));
    return this;
  }
  /**
   * Write uint56le.
   * @param {Number} value
   */


  writeU56(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(U56, value));
    return this;
  }
  /**
   * Write uint56be.
   * @param {Number} value
   */


  writeU56BE(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(U56BE, value));
    return this;
  }
  /**
   * Write uint64le.
   * @param {Number} value
   */


  writeU64(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(U64, value));
    return this;
  }
  /**
   * Write uint64be.
   * @param {Number} value
   */


  writeU64BE(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(U64BE, value));
    return this;
  }
  /**
   * Write int8.
   * @param {Number} value
   */


  writeI8(value) {
    this.offset += 1;
    this.ops.push(new NumberOp(I8, value));
    return this;
  }
  /**
   * Write int16le.
   * @param {Number} value
   */


  writeI16(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(I16, value));
    return this;
  }
  /**
   * Write int16be.
   * @param {Number} value
   */


  writeI16BE(value) {
    this.offset += 2;
    this.ops.push(new NumberOp(I16BE, value));
    return this;
  }
  /**
   * Write int24le.
   * @param {Number} value
   */


  writeI24(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(I24, value));
    return this;
  }
  /**
   * Write int24be.
   * @param {Number} value
   */


  writeI24BE(value) {
    this.offset += 3;
    this.ops.push(new NumberOp(I24BE, value));
    return this;
  }
  /**
   * Write int32le.
   * @param {Number} value
   */


  writeI32(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(I32, value));
    return this;
  }
  /**
   * Write int32be.
   * @param {Number} value
   */


  writeI32BE(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(I32BE, value));
    return this;
  }
  /**
   * Write int40le.
   * @param {Number} value
   */


  writeI40(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(I40, value));
    return this;
  }
  /**
   * Write int40be.
   * @param {Number} value
   */


  writeI40BE(value) {
    this.offset += 5;
    this.ops.push(new NumberOp(I40BE, value));
    return this;
  }
  /**
   * Write int48le.
   * @param {Number} value
   */


  writeI48(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(I48, value));
    return this;
  }
  /**
   * Write int48be.
   * @param {Number} value
   */


  writeI48BE(value) {
    this.offset += 6;
    this.ops.push(new NumberOp(I48BE, value));
    return this;
  }
  /**
   * Write int56le.
   * @param {Number} value
   */


  writeI56(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(I56, value));
    return this;
  }
  /**
   * Write int56be.
   * @param {Number} value
   */


  writeI56BE(value) {
    this.offset += 7;
    this.ops.push(new NumberOp(I56BE, value));
    return this;
  }
  /**
   * Write int64le.
   * @param {Number} value
   */


  writeI64(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(I64, value));
    return this;
  }
  /**
   * Write int64be.
   * @param {Number} value
   */


  writeI64BE(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(I64BE, value));
    return this;
  }
  /**
   * Write float le.
   * @param {Number} value
   */


  writeFloat(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(FL, value));
    return this;
  }
  /**
   * Write float be.
   * @param {Number} value
   */


  writeFloatBE(value) {
    this.offset += 4;
    this.ops.push(new NumberOp(FLBE, value));
    return this;
  }
  /**
   * Write double le.
   * @param {Number} value
   */


  writeDouble(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(DBL, value));
    return this;
  }
  /**
   * Write double be.
   * @param {Number} value
   */


  writeDoubleBE(value) {
    this.offset += 8;
    this.ops.push(new NumberOp(DBLBE, value));
    return this;
  }
  /**
   * Write a varint.
   * @param {Number} value
   */


  writeVarint(value) {
    this.offset += encoding.sizeVarint(value);
    this.ops.push(new NumberOp(VARINT, value));
    return this;
  }
  /**
   * Write a varint (type 2).
   * @param {Number} value
   */


  writeVarint2(value) {
    this.offset += encoding.sizeVarint2(value);
    this.ops.push(new NumberOp(VARINT2, value));
    return this;
  }
  /**
   * Write bytes.
   * @param {Buffer} value
   */


  writeBytes(value) {
    enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
    if (value.length === 0) return this;
    this.offset += value.length;
    this.ops.push(new BufferOp(BYTES, value));
    return this;
  }
  /**
   * Write bytes with a varint length before them.
   * @param {Buffer} value
   */


  writeVarBytes(value) {
    enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
    this.offset += encoding.sizeVarint(value.length);
    this.ops.push(new NumberOp(VARINT, value.length));
    if (value.length === 0) return this;
    this.offset += value.length;
    this.ops.push(new BufferOp(BYTES, value));
    return this;
  }
  /**
   * Copy bytes.
   * @param {Buffer} value
   * @param {Number} start
   * @param {Number} end
   */


  copy(value, start, end) {
    enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
    enforce_1(start >>> 0 === start, 'start', 'integer');
    enforce_1(end >>> 0 === end, 'end', 'integer');
    enforce_1(end >= start, 'start', 'integer');
    var buf = value.slice(start, end);
    this.writeBytes(buf);
    return this;
  }
  /**
   * Write string to buffer.
   * @param {String} value
   * @param {String?} enc - Any buffer-supported encoding.
   */


  writeString(value, enc) {
    if (enc == null) enc = 'binary';
    enforce_1(typeof value === 'string', 'value', 'string');
    enforce_1(typeof enc === 'string', 'enc', 'string');
    if (value.length === 0) return this;
    this.offset += Buffer.byteLength(value, enc);
    this.ops.push(new StringOp(STR, value, enc));
    return this;
  }
  /**
   * Write a 32 byte hash.
   * @param {Hash} value
   */


  writeHash(value) {
    if (typeof value !== 'string') {
      enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
      enforce_1(value.length === 32, 'value', '32-byte hash');
      this.writeBytes(value);
      return this;
    }

    enforce_1(value.length === 64, 'value', '32-byte hash');
    this.writeString(value, 'hex');
    return this;
  }
  /**
   * Write a string with a varint length before it.
   * @param {String}
   * @param {String?} enc - Any buffer-supported encoding.
   */


  writeVarString(value, enc) {
    if (enc == null) enc = 'binary';
    enforce_1(typeof value === 'string', 'value', 'string');
    enforce_1(typeof enc === 'string', 'enc', 'string');

    if (value.length === 0) {
      this.ops.push(new NumberOp(VARINT, 0));
      return this;
    }

    var size = Buffer.byteLength(value, enc);
    this.offset += encoding.sizeVarint(size);
    this.offset += size;
    this.ops.push(new NumberOp(VARINT, size));
    this.ops.push(new StringOp(STR, value, enc));
    return this;
  }
  /**
   * Write a null-terminated string.
   * @param {String|Buffer}
   * @param {String?} enc - Any buffer-supported encoding.
   */


  writeNullString(value, enc) {
    this.writeString(value, enc);
    this.writeU8(0);
    return this;
  }
  /**
   * Calculate and write a checksum for the data written so far.
   * @param {Function} hash
   */


  writeChecksum(hash) {
    enforce_1(typeof hash === 'function', 'hash', 'function');
    this.offset += 4;
    this.ops.push(new FunctionOp(CHECKSUM, hash));
    return this;
  }
  /**
   * Fill N bytes with value.
   * @param {Number} value
   * @param {Number} size
   */


  fill(value, size) {
    enforce_1((value & 0xff) === value, 'value', 'byte');
    enforce_1(size >>> 0 === size, 'size', 'integer');
    if (size === 0) return this;
    this.offset += size;
    this.ops.push(new FillOp(FILL, value, size));
    return this;
  }

}
/*
 * Helpers
 */


class WriteOp {
  constructor(type) {
    this.type = type;
  }

}

class NumberOp extends WriteOp {
  constructor(type, value) {
    super(type);
    this.value = value;
  }

}

class BufferOp extends WriteOp {
  constructor(type, data) {
    super(type);
    this.data = data;
  }

}

class StringOp extends WriteOp {
  constructor(type, value, enc) {
    super(type);
    this.value = value;
    this.enc = enc;
  }

}

class FunctionOp extends WriteOp {
  constructor(type, func) {
    super(type);
    this.func = func;
  }

}

class FillOp extends WriteOp {
  constructor(type, value, size) {
    super(type);
    this.value = value;
    this.size = size;
  }

}
/*
 * Expose
 */


var writer = BufferWriter;

/*
 * Constants
 */


var EMPTY$3 = Buffer.alloc(0);
var POOL_SIZE = 100 << 10;
var POOL = null;
/**
 * Statically Allocated Writer
 */

class StaticWriter {
  /**
   * Statically allocated buffer writer.
   * @constructor
   * @param {Number|Buffer} options
   */
  constructor(options) {
    this.data = EMPTY$3;
    this.offset = 0;
    if (options != null) this.init(options);
  }
  /**
   * Assertion.
   * @param {Number} size
   */


  check(size) {
    if (this.offset + size > this.data.length) throw new error(this.offset, 'Out of bounds write', this.check);
  }
  /**
   * Initialize options.
   * @param {Object} options
   */


  init(options) {
    if (Buffer.isBuffer(options)) {
      this.data = options;
      this.offset = 0;
      return this;
    }

    enforce_1(options >>> 0 === options, 'size', 'integer');
    this.data = Buffer.allocUnsafe(options);
    this.offset = 0;
    return this;
  }
  /**
   * Allocate writer from preallocated 100kb pool.
   * @param {Number} size
   * @returns {StaticWriter}
   */


  static pool(size) {
    enforce_1(size >>> 0 === size, 'size', 'integer');

    if (size <= POOL_SIZE) {
      if (!POOL) POOL = Buffer.allocUnsafe(POOL_SIZE);
      var bw = new StaticWriter();
      bw.data = POOL.slice(0, size);
      return bw;
    }

    return new StaticWriter(size);
  }
  /**
   * Allocate and render the final buffer.
   * @returns {Buffer} Rendered buffer.
   */


  render() {
    var {
      data,
      offset
    } = this;
    if (offset !== data.length) throw new error(offset, 'Out of bounds write');
    this.destroy();
    return data;
  }
  /**
   * Slice the final buffer at written offset.
   * @returns {Buffer} Rendered buffer.
   */


  slice() {
    var {
      data,
      offset
    } = this;
    if (offset > data.length) throw new error(offset, 'Out of bounds write');
    this.destroy();
    return data.slice(0, offset);
  }
  /**
   * Get size of data written so far.
   * @returns {Number}
   */


  getSize() {
    return this.offset;
  }
  /**
   * Seek to relative offset.
   * @param {Number} off
   */


  seek(off) {
    enforce_1(Number.isSafeInteger(off), 'off', 'integer');
    if (this.offset + off < 0) throw new error(this.offset, 'Out of bounds write');
    this.check(off);
    this.offset += off;
    return this;
  }
  /**
   * Destroy the buffer writer.
   */


  destroy() {
    this.data = EMPTY$3;
    this.offset = 0;
    return this;
  }
  /**
   * Write uint8.
   * @param {Number} value
   */


  writeU8(value) {
    this.check(1);
    this.offset = encoding.writeU8(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint16le.
   * @param {Number} value
   */


  writeU16(value) {
    this.check(2);
    this.offset = encoding.writeU16(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint16be.
   * @param {Number} value
   */


  writeU16BE(value) {
    this.check(2);
    this.offset = encoding.writeU16BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint24le.
   * @param {Number} value
   */


  writeU24(value) {
    this.check(3);
    this.offset = encoding.writeU24(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint24be.
   * @param {Number} value
   */


  writeU24BE(value) {
    this.check(3);
    this.offset = encoding.writeU24BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint32le.
   * @param {Number} value
   */


  writeU32(value) {
    this.check(4);
    this.offset = encoding.writeU32(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint32be.
   * @param {Number} value
   */


  writeU32BE(value) {
    this.check(4);
    this.offset = encoding.writeU32BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint40le.
   * @param {Number} value
   */


  writeU40(value) {
    this.check(5);
    this.offset = encoding.writeU40(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint40be.
   * @param {Number} value
   */


  writeU40BE(value) {
    this.check(5);
    this.offset = encoding.writeU40BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint48le.
   * @param {Number} value
   */


  writeU48(value) {
    this.check(6);
    this.offset = encoding.writeU48(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint48be.
   * @param {Number} value
   */


  writeU48BE(value) {
    this.check(6);
    this.offset = encoding.writeU48BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint56le.
   * @param {Number} value
   */


  writeU56(value) {
    this.check(7);
    this.offset = encoding.writeU56(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint56be.
   * @param {Number} value
   */


  writeU56BE(value) {
    this.check(7);
    this.offset = encoding.writeU56BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint64le.
   * @param {Number} value
   */


  writeU64(value) {
    this.check(8);
    this.offset = encoding.writeU64(this.data, value, this.offset);
    return this;
  }
  /**
   * Write uint64be.
   * @param {Number} value
   */


  writeU64BE(value) {
    this.check(8);
    this.offset = encoding.writeU64BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int8.
   * @param {Number} value
   */


  writeI8(value) {
    this.check(1);
    this.offset = encoding.writeI8(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int16le.
   * @param {Number} value
   */


  writeI16(value) {
    this.check(2);
    this.offset = encoding.writeI16(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int16be.
   * @param {Number} value
   */


  writeI16BE(value) {
    this.check(2);
    this.offset = encoding.writeI16BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int24le.
   * @param {Number} value
   */


  writeI24(value) {
    this.check(3);
    this.offset = encoding.writeI24(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int24be.
   * @param {Number} value
   */


  writeI24BE(value) {
    this.check(3);
    this.offset = encoding.writeI24BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int32le.
   * @param {Number} value
   */


  writeI32(value) {
    this.check(4);
    this.offset = encoding.writeI32(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int32be.
   * @param {Number} value
   */


  writeI32BE(value) {
    this.check(4);
    this.offset = encoding.writeI32BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int40le.
   * @param {Number} value
   */


  writeI40(value) {
    this.check(5);
    this.offset = encoding.writeI40(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int40be.
   * @param {Number} value
   */


  writeI40BE(value) {
    this.check(5);
    this.offset = encoding.writeI40BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int48le.
   * @param {Number} value
   */


  writeI48(value) {
    this.check(6);
    this.offset = encoding.writeI48(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int48be.
   * @param {Number} value
   */


  writeI48BE(value) {
    this.check(6);
    this.offset = encoding.writeI48BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int56le.
   * @param {Number} value
   */


  writeI56(value) {
    this.check(7);
    this.offset = encoding.writeI56(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int56be.
   * @param {Number} value
   */


  writeI56BE(value) {
    this.check(7);
    this.offset = encoding.writeI56BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int64le.
   * @param {Number} value
   */


  writeI64(value) {
    this.check(8);
    this.offset = encoding.writeI64(this.data, value, this.offset);
    return this;
  }
  /**
   * Write int64be.
   * @param {Number} value
   */


  writeI64BE(value) {
    this.check(8);
    this.offset = encoding.writeI64BE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write float le.
   * @param {Number} value
   */


  writeFloat(value) {
    this.check(4);
    this.offset = encoding.writeFloat(this.data, value, this.offset);
    return this;
  }
  /**
   * Write float be.
   * @param {Number} value
   */


  writeFloatBE(value) {
    this.check(4);
    this.offset = encoding.writeFloatBE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write double le.
   * @param {Number} value
   */


  writeDouble(value) {
    this.check(8);
    this.offset = encoding.writeDouble(this.data, value, this.offset);
    return this;
  }
  /**
   * Write double be.
   * @param {Number} value
   */


  writeDoubleBE(value) {
    this.check(8);
    this.offset = encoding.writeDoubleBE(this.data, value, this.offset);
    return this;
  }
  /**
   * Write a varint.
   * @param {Number} value
   */


  writeVarint(value) {
    this.offset = encoding.writeVarint(this.data, value, this.offset);
    return this;
  }
  /**
   * Write a varint (type 2).
   * @param {Number} value
   */


  writeVarint2(value) {
    this.offset = encoding.writeVarint2(this.data, value, this.offset);
    return this;
  }
  /**
   * Write bytes.
   * @param {Buffer} value
   */


  writeBytes(value) {
    enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
    this.check(value.length);
    this.offset += value.copy(this.data, this.offset);
    return this;
  }
  /**
   * Write bytes with a varint length before them.
   * @param {Buffer} value
   */


  writeVarBytes(value) {
    enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
    this.writeVarint(value.length);
    this.writeBytes(value);
    return this;
  }
  /**
   * Copy bytes.
   * @param {Buffer} value
   * @param {Number} start
   * @param {Number} end
   */


  copy(value, start, end) {
    enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
    enforce_1(start >>> 0 === start, 'start', 'integer');
    enforce_1(end >>> 0 === end, 'end', 'integer');
    enforce_1(end >= start, 'start', 'integer');
    this.check(end - start);
    this.offset += value.copy(this.data, this.offset, start, end);
    return this;
  }
  /**
   * Write string to buffer.
   * @param {String} value
   * @param {String?} enc - Any buffer-supported encoding.
   */


  writeString(value, enc) {
    if (enc == null) enc = 'binary';
    enforce_1(typeof value === 'string', 'value', 'string');
    enforce_1(typeof enc === 'string', 'enc', 'string');
    if (value.length === 0) return this;
    var size = Buffer.byteLength(value, enc);
    this.check(size);
    this.offset += this.data.write(value, this.offset, enc);
    return this;
  }
  /**
   * Write a 32 byte hash.
   * @param {Hash} value
   */


  writeHash(value) {
    if (typeof value !== 'string') {
      enforce_1(Buffer.isBuffer(value), 'value', 'buffer');
      enforce_1(value.length === 32, 'value', '32-byte hash');
      this.writeBytes(value);
      return this;
    }

    enforce_1(value.length === 64, 'value', '32-byte hash');
    this.check(32);
    this.offset += this.data.write(value, this.offset, 'hex');
    return this;
  }
  /**
   * Write a string with a varint length before it.
   * @param {String}
   * @param {String?} enc - Any buffer-supported encoding.
   */


  writeVarString(value, enc) {
    if (enc == null) enc = 'binary';
    enforce_1(typeof value === 'string', 'value', 'string');
    enforce_1(typeof enc === 'string', 'enc', 'string');

    if (value.length === 0) {
      this.writeVarint(0);
      return this;
    }

    var size = Buffer.byteLength(value, enc);
    this.writeVarint(size);
    this.check(size);
    this.offset += this.data.write(value, this.offset, enc);
    return this;
  }
  /**
   * Write a null-terminated string.
   * @param {String|Buffer}
   * @param {String?} enc - Any buffer-supported encoding.
   */


  writeNullString(value, enc) {
    this.writeString(value, enc);
    this.writeU8(0);
    return this;
  }
  /**
   * Calculate and write a checksum for the data written so far.
   * @param {Function} hash
   */


  writeChecksum(hash) {
    enforce_1(typeof hash === 'function', 'hash', 'function');
    this.check(4);
    var data = this.data.slice(0, this.offset);
    hash(data).copy(this.data, this.offset, 0, 4);
    this.offset += 4;
    return this;
  }
  /**
   * Fill N bytes with value.
   * @param {Number} value
   * @param {Number} size
   */


  fill(value, size) {
    enforce_1((value & 0xff) === value, 'value', 'byte');
    enforce_1(size >>> 0 === size, 'size', 'integer');
    this.check(size);
    this.data.fill(value, this.offset, this.offset + size);
    this.offset += size;
    return this;
  }

}
/*
 * Expose
 */


var staticwriter = StaticWriter;

var {
  custom: custom$4
} = customBrowser$1;
/**
 * Struct
 */

class Struct {
  constructor() {}

  inject(obj) {
    enforce_1(obj instanceof this.constructor, 'obj', 'struct');
    return this.decode(obj.encode());
  }

  clone() {
    var copy = new this.constructor();
    return copy.inject(this);
  }
  /*
   * Bindable
   */


  getSize(extra) {
    return -1;
  }

  write(bw, extra) {
    return bw;
  }

  read(br, extra) {
    return this;
  }

  toString() {
    return Object.prototype.toString.call(this);
  }

  fromString(str, extra) {
    return this;
  }

  getJSON() {
    return this;
  }

  fromJSON(json, extra) {
    return this;
  }

  fromOptions(options, extra) {
    return this;
  }

  from(options, extra) {
    return this.fromOptions(options, extra);
  }

  format() {
    return this.getJSON();
  }
  /*
   * API
   */


  encode(extra) {
    var size = this.getSize(extra);
    var bw = size === -1 ? new writer() : new staticwriter(size);
    this.write(bw, extra);
    return bw.render();
  }

  decode(data, extra) {
    var br = new reader(data);
    this.read(br, extra);
    return this;
  }

  toHex(extra) {
    return this.encode(extra).toString('hex');
  }

  fromHex(str, extra) {
    enforce_1(typeof str === 'string', 'str', 'string');
    var size = str.length >>> 1;
    var data = Buffer.from(str, 'hex');
    if (data.length !== size) throw new Error('Invalid hex string.');
    return this.decode(data, extra);
  }

  toBase64(extra) {
    return this.encode(extra).toString('base64');
  }

  fromBase64(str, extra) {
    enforce_1(typeof str === 'string', 'str', 'string');
    var data = Buffer.from(str, 'base64');
    if (str.length > size64$1(data.length)) throw new Error('Invalid base64 string.');
    return this.decode(data, extra);
  }

  toJSON() {
    return this.getJSON();
  }

  [custom$4]() {
    return this.format();
  }
  /*
   * Static API
   */


  static read(br, extra) {
    return new this().read(br, extra);
  }

  static decode(data, extra) {
    return new this().decode(data, extra);
  }

  static fromHex(str, extra) {
    return new this().fromHex(str, extra);
  }

  static fromBase64(str, extra) {
    return new this().fromBase64(str, extra);
  }

  static fromString(str, extra) {
    return new this().fromString(str, extra);
  }

  static fromJSON(json, extra) {
    return new this().fromJSON(json, extra);
  }

  static fromOptions(options, extra) {
    return new this().fromOptions(options, extra);
  }

  static from(options, extra) {
    return new this().from(options, extra);
  }
  /*
   * Aliases
   */


  toWriter(bw, extra) {
    return this.write(bw, extra);
  }

  fromReader(br, extra) {
    return this.read(br, extra);
  }

  toRaw(extra) {
    return this.encode(extra);
  }

  fromRaw(data, extra) {
    return this.decode(data, extra);
  }
  /*
   * Static Aliases
   */


  static fromReader(br, extra) {
    return this.read(br, extra);
  }

  static fromRaw(data, extra) {
    return this.decode(data, extra);
  }

}
/*
 * Helpers
 */


function size64$1(size) {
  var expect = 4 * size / 3 + 3 & ~3;
  return expect >>> 0;
}
/*
 * Expose
 */


var struct = Struct;

var custom_1 = customBrowser$1;
var encoding_1 = encoding;
var EncodingError_1 = error;
var BufferReader_1 = reader;
var BufferWriter_1 = writer;
var StaticWriter_1 = staticwriter;
var Struct_1 = struct;

var read$2 = function read(data, zeroCopy) {
  return new reader(data, zeroCopy);
};

var write$2 = function write(size) {
  return size != null ? new staticwriter(size) : new writer();
};

var pool = function pool(size) {
  return staticwriter.pool(size);
};

function _read(func, size) {
  return function (data, off) {
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(off >>> 0 === off, 'off', 'integer');
    if (off + size > data.length) throw new error(off, 'Out of bounds read');
    return func(data, off);
  };
}

function _readn(func) {
  return function (data, off, len) {
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(off >>> 0 === off, 'off', 'integer');
    enforce_1(len >>> 0 === len, 'len', 'integer');
    if (off + len > data.length) throw new error(off, 'Out of bounds read');
    return func(data, off, len);
  };
}

function _readvar(func) {
  return function (data, off) {
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(off >>> 0 === off, 'off', 'integer');
    return func(data, off);
  };
}

function _write(func, size) {
  return function (data, num, off) {
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(off >>> 0 === off, 'off', 'integer');
    if (off + size > data.length) throw new error(off, 'Out of bounds write');
    return func(data, num, off);
  };
}

function _writen(func) {
  return function (data, num, off, len) {
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(off >>> 0 === off, 'off', 'integer');
    enforce_1(len >>> 0 === len, 'len', 'integer');
    if (off + len > data.length) throw new error(off, 'Out of bounds write');
    return func(data, num, off, len);
  };
}

function _writecb(func, size) {
  return function (data, num, off) {
    enforce_1(Buffer.isBuffer(data), 'data', 'buffer');
    enforce_1(off >>> 0 === off, 'off', 'integer');
    if (off + size(num) > data.length) throw new error(off, 'Out of bounds write');
    return func(data, num, off);
  };
}

var readU$1 = _readn(encoding.readU);

var readU64$1 = _read(encoding.readU64, 8);

var readU56$1 = _read(encoding.readU56, 7);

var readU48$1 = _read(encoding.readU48, 6);

var readU40$1 = _read(encoding.readU40, 5);

var readU32$8 = _read(encoding.readU32, 4);

var readU24$1 = _read(encoding.readU24, 3);

var readU16$2 = _read(encoding.readU16, 2);

var readU8$1 = _read(encoding.readU8, 1);

var readUBE$1 = _readn(encoding.readUBE);

var readU64BE$1 = _read(encoding.readU64BE, 8);

var readU56BE$1 = _read(encoding.readU56BE, 7);

var readU48BE$1 = _read(encoding.readU48BE, 6);

var readU40BE$1 = _read(encoding.readU40BE, 5);

var readU32BE$2 = _read(encoding.readU32BE, 4);

var readU24BE$1 = _read(encoding.readU24BE, 3);

var readU16BE$1 = _read(encoding.readU16BE, 2);

var readI$1 = _readn(encoding.readI);

var readI64$1 = _read(encoding.readI64, 8);

var readI56$1 = _read(encoding.readI56, 7);

var readI48$1 = _read(encoding.readI48, 6);

var readI40$1 = _read(encoding.readI40, 5);

var readI32$1 = _read(encoding.readI32, 4);

var readI24$1 = _read(encoding.readI24, 3);

var readI16$1 = _read(encoding.readI16, 2);

var readI8$1 = _read(encoding.readI8, 1);

var readIBE$1 = _readn(encoding.readIBE);

var readI64BE$1 = _read(encoding.readI64BE, 8);

var readI56BE$1 = _read(encoding.readI56BE, 7);

var readI48BE$1 = _read(encoding.readI48BE, 6);

var readI40BE$1 = _read(encoding.readI40BE, 5);

var readI32BE$1 = _read(encoding.readI32BE, 4);

var readI24BE$1 = _read(encoding.readI24BE, 3);

var readI16BE$1 = _read(encoding.readI16BE, 2);

var readFloat$1 = _read(encoding.readFloat, 4);

var readFloatBE$1 = _read(encoding.readFloatBE, 4);

var readDouble$1 = _read(encoding.readDouble, 8);

var readDoubleBE$1 = _read(encoding.readDoubleBE, 8);

var writeU$1 = _writen(encoding.writeU);

var writeU64$1 = _write(encoding.writeU64, 8);

var writeU56$1 = _write(encoding.writeU56, 7);

var writeU48$1 = _write(encoding.writeU48, 6);

var writeU40$1 = _write(encoding.writeU40, 5);

var writeU32$7 = _write(encoding.writeU32, 4);

var writeU24$1 = _write(encoding.writeU24, 3);

var writeU16$2 = _write(encoding.writeU16, 2);

var writeU8$1 = _write(encoding.writeU8, 1);

var writeUBE$1 = _writen(encoding.writeUBE);

var writeU64BE$1 = _write(encoding.writeU64BE, 8);

var writeU56BE$1 = _write(encoding.writeU56BE, 7);

var writeU48BE$1 = _write(encoding.writeU48BE, 6);

var writeU40BE$1 = _write(encoding.writeU40BE, 5);

var writeU32BE$2 = _write(encoding.writeU32BE, 4);

var writeU24BE$1 = _write(encoding.writeU24BE, 3);

var writeU16BE$1 = _write(encoding.writeU16BE, 2);

var writeI$1 = _writen(encoding.writeI);

var writeI64$1 = _write(encoding.writeI64, 8);

var writeI56$1 = _write(encoding.writeI56, 7);

var writeI48$1 = _write(encoding.writeI48, 6);

var writeI40$1 = _write(encoding.writeI40, 5);

var writeI32$1 = _write(encoding.writeI32, 4);

var writeI24$1 = _write(encoding.writeI24, 3);

var writeI16$1 = _write(encoding.writeI16, 2);

var writeI8$1 = _write(encoding.writeI8, 1);

var writeIBE$1 = _writen(encoding.writeIBE);

var writeI64BE$1 = _write(encoding.writeI64BE, 8);

var writeI56BE$1 = _write(encoding.writeI56BE, 7);

var writeI48BE$1 = _write(encoding.writeI48BE, 6);

var writeI40BE$1 = _write(encoding.writeI40BE, 5);

var writeI32BE$1 = _write(encoding.writeI32BE, 4);

var writeI24BE$1 = _write(encoding.writeI24BE, 3);

var writeI16BE$1 = _write(encoding.writeI16BE, 2);

var writeFloat$2 = _write(encoding.writeFloat, 4);

var writeFloatBE$1 = _write(encoding.writeFloatBE, 4);

var writeDouble$2 = _write(encoding.writeDouble, 8);

var writeDoubleBE$1 = _write(encoding.writeDoubleBE, 8);

var readVarint$1 = _readvar(encoding.readVarint);

var writeVarint$1 = _writecb(encoding.writeVarint, encoding.sizeVarint);

var sizeVarint$1 = encoding.sizeVarint;

var readVarint2$1 = _readvar(encoding.readVarint2);

var writeVarint2$1 = _writecb(encoding.writeVarint2, encoding.sizeVarint2);

var sizeVarint2$1 = encoding.sizeVarint2;
var sliceBytes$1 = encoding.sliceBytes;
var readBytes$1 = encoding.readBytes;
var writeBytes$1 = encoding.writeBytes;
var readString$1 = encoding.readString;
var writeString$1 = encoding.writeString;
var realloc$1 = encoding.realloc;
var copy$2 = encoding.copy;
var concat$2 = encoding.concat;
var sizeVarBytes$1 = encoding.sizeVarBytes;
var sizeVarlen$1 = encoding.sizeVarlen;
var sizeVarString$1 = encoding.sizeVarString;
var bufio = {
  custom: custom_1,
  encoding: encoding_1,
  EncodingError: EncodingError_1,
  BufferReader: BufferReader_1,
  BufferWriter: BufferWriter_1,
  StaticWriter: StaticWriter_1,
  Struct: Struct_1,
  read: read$2,
  write: write$2,
  pool: pool,
  readU: readU$1,
  readU64: readU64$1,
  readU56: readU56$1,
  readU48: readU48$1,
  readU40: readU40$1,
  readU32: readU32$8,
  readU24: readU24$1,
  readU16: readU16$2,
  readU8: readU8$1,
  readUBE: readUBE$1,
  readU64BE: readU64BE$1,
  readU56BE: readU56BE$1,
  readU48BE: readU48BE$1,
  readU40BE: readU40BE$1,
  readU32BE: readU32BE$2,
  readU24BE: readU24BE$1,
  readU16BE: readU16BE$1,
  readI: readI$1,
  readI64: readI64$1,
  readI56: readI56$1,
  readI48: readI48$1,
  readI40: readI40$1,
  readI32: readI32$1,
  readI24: readI24$1,
  readI16: readI16$1,
  readI8: readI8$1,
  readIBE: readIBE$1,
  readI64BE: readI64BE$1,
  readI56BE: readI56BE$1,
  readI48BE: readI48BE$1,
  readI40BE: readI40BE$1,
  readI32BE: readI32BE$1,
  readI24BE: readI24BE$1,
  readI16BE: readI16BE$1,
  readFloat: readFloat$1,
  readFloatBE: readFloatBE$1,
  readDouble: readDouble$1,
  readDoubleBE: readDoubleBE$1,
  writeU: writeU$1,
  writeU64: writeU64$1,
  writeU56: writeU56$1,
  writeU48: writeU48$1,
  writeU40: writeU40$1,
  writeU32: writeU32$7,
  writeU24: writeU24$1,
  writeU16: writeU16$2,
  writeU8: writeU8$1,
  writeUBE: writeUBE$1,
  writeU64BE: writeU64BE$1,
  writeU56BE: writeU56BE$1,
  writeU48BE: writeU48BE$1,
  writeU40BE: writeU40BE$1,
  writeU32BE: writeU32BE$2,
  writeU24BE: writeU24BE$1,
  writeU16BE: writeU16BE$1,
  writeI: writeI$1,
  writeI64: writeI64$1,
  writeI56: writeI56$1,
  writeI48: writeI48$1,
  writeI40: writeI40$1,
  writeI32: writeI32$1,
  writeI24: writeI24$1,
  writeI16: writeI16$1,
  writeI8: writeI8$1,
  writeIBE: writeIBE$1,
  writeI64BE: writeI64BE$1,
  writeI56BE: writeI56BE$1,
  writeI48BE: writeI48BE$1,
  writeI40BE: writeI40BE$1,
  writeI32BE: writeI32BE$1,
  writeI24BE: writeI24BE$1,
  writeI16BE: writeI16BE$1,
  writeFloat: writeFloat$2,
  writeFloatBE: writeFloatBE$1,
  writeDouble: writeDouble$2,
  writeDoubleBE: writeDoubleBE$1,
  readVarint: readVarint$1,
  writeVarint: writeVarint$1,
  sizeVarint: sizeVarint$1,
  readVarint2: readVarint2$1,
  writeVarint2: writeVarint2$1,
  sizeVarint2: sizeVarint2$1,
  sliceBytes: sliceBytes$1,
  readBytes: readBytes$1,
  writeBytes: writeBytes$1,
  readString: readString$1,
  writeString: writeString$1,
  realloc: realloc$1,
  copy: copy$2,
  concat: concat$2,
  sizeVarBytes: sizeVarBytes$1,
  sizeVarlen: sizeVarlen$1,
  sizeVarString: sizeVarString$1
};

/*!
 * objects.js - OIDs encoding for javascript
 * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on golang/go:
 *   Copyright (c) 2009, The Go Authors. All rights reserved.
 *   https://github.com/golang/go
 *
 * Resources:
 *   https://www.ietf.org/rfc/rfc2459.txt
 *   https://tools.ietf.org/html/rfc3279
 *   http://oid-info.com/get/1.2.840.10040.4
 *   http://oid-info.com/get/1.2.840.113549.1.1
 *   http://oid-info.com/get/1.2.840.10045.4.3
 *   https://tools.ietf.org/html/draft-jivsov-openpgp-sha3-01
 *   https://github.com/golang/go/blob/master/src/crypto/x509/x509.go
 *   https://github.com/golang/go/blob/master/src/crypto/x509/pkix/pkix.go
 *   https://tools.ietf.org/html/draft-josefsson-pkix-eddsa-01
 *   https://tools.ietf.org/html/rfc5480
 *   https://tools.ietf.org/html/draft-josefsson-pkix-newcurves-00
 *   https://tools.ietf.org/id/draft-ietf-curdle-pkix-06.html
 *   https://tools.ietf.org/html/rfc7693
 */

var NONE = '0.0';
var attrs = {
  COUNTRY: '2.5.4.6',
  ORGANIZATION: '2.5.4.10',
  ORGANIZATIONALUNIT: '2.5.4.11',
  COMMONNAME: '2.5.4.3',
  SERIALNUMBER: '2.5.4.5',
  LOCALITY: '2.5.4.7',
  PROVINCE: '2.5.4.8',
  STREETADDRESS: '2.5.4.9',
  POSTALCODE: '2.5.4.17'
};
var attrsByVal = {
  [attrs.COUNTRY]: 'COUNTRY',
  [attrs.ORGANIZATION]: 'ORGANIZATION',
  [attrs.ORGANIZATIONALUNIT]: 'ORGANIZATIONALUNIT',
  [attrs.COMMONNAME]: 'COMMONNAME',
  [attrs.SERIALNUMBER]: 'SERIALNUMBER',
  [attrs.LOCALITY]: 'LOCALITY',
  [attrs.PROVINCE]: 'PROVINCE',
  [attrs.STREETADDRESS]: 'STREETADDRESS',
  [attrs.POSTALCODE]: 'POSTALCODE'
};
var keyAlgs = {
  DSA: '1.2.840.10040.4.1',
  DSA2: '1.2.840.10040.4.2',
  RSA: '1.2.840.113549.1.1.1',
  ECDSA: '1.2.840.10045.2.1',
  EDDSA: '1.3.6.1.4.1.11591.4.12.1'
};
var keyAlgsByVal = {
  [keyAlgs.DSA]: 'DSA',
  [keyAlgs.DSA2]: 'DSA',
  [keyAlgs.RSA]: 'RSA',
  [keyAlgs.ECDSA]: 'ECDSA',
  [keyAlgs.EDDSA]: 'EDDSA'
};
var hashes = {
  BLAKE2B160: '1.3.6.1.4.1.1722.12.2.1.5',
  BLAKE2B256: '1.3.6.1.4.1.1722.12.2.1.8',
  BLAKE2B384: '1.3.6.1.4.1.1722.12.2.1.12',
  BLAKE2B512: '1.3.6.1.4.1.1722.12.2.1.16',
  BLAKE2S128: '1.3.6.1.4.1.1722.12.2.2.4',
  BLAKE2S160: '1.3.6.1.4.1.1722.12.2.2.5',
  BLAKE2S224: '1.3.6.1.4.1.1722.12.2.2.7',
  BLAKE2S256: '1.3.6.1.4.1.1722.12.2.2.8',
  GOST94: '1.2.643.2.2.20',
  MD2: '1.2.840.113549.2.2',
  MD4: '1.2.840.113549.2.4',
  MD5: '1.2.840.113549.2.5',
  MDC2: '1.3.14.3.2.19',
  RIPEMD160: '1.0.10118.3.0.49',
  RIPEMD1602: '1.3.36.3.2.1',
  SHA1: '1.3.14.3.2.26',
  SHA224: '2.16.840.1.101.3.4.2.4',
  SHA256: '2.16.840.1.101.3.4.2.1',
  SHA384: '2.16.840.1.101.3.4.2.2',
  SHA512: '2.16.840.1.101.3.4.2.3',
  SHA3_224: '2.16.840.1.101.3.4.2.7',
  SHA3_256: '2.16.840.1.101.3.4.2.8',
  SHA3_384: '2.16.840.1.101.3.4.2.9',
  SHA3_512: '2.16.840.1.101.3.4.2.10',
  SHAKE128: '2.16.840.1.101.3.4.2.11',
  SHAKE256: '2.16.840.1.101.3.4.2.12',
  SM3: '1.0.10118.3.0.65',
  WHIRLPOOL: '1.0.10118.3.0.55'
};
var hashesByVal = {
  [hashes.BLAKE2B160]: 'BLAKE2B160',
  [hashes.BLAKE2B256]: 'BLAKE2B256',
  [hashes.BLAKE2B384]: 'BLAKE2B384',
  [hashes.BLAKE2B512]: 'BLAKE2B512',
  [hashes.BLAKE2S128]: 'BLAKE2S128',
  [hashes.BLAKE2S160]: 'BLAKE2S160',
  [hashes.BLAKE2S224]: 'BLAKE2S224',
  [hashes.BLAKE2S256]: 'BLAKE2S256',
  [hashes.GOST94]: 'GOST94',
  [hashes.MD2]: 'MD2',
  [hashes.MD4]: 'MD4',
  [hashes.MD5]: 'MD5',
  [hashes.MDC2]: 'MDC2',
  [hashes.RIPEMD160]: 'RIPEMD160',
  [hashes.RIPEMD1602]: 'RIPEMD160',
  [hashes.SHA1]: 'SHA1',
  [hashes.SHA224]: 'SHA224',
  [hashes.SHA256]: 'SHA256',
  [hashes.SHA384]: 'SHA384',
  [hashes.SHA512]: 'SHA512',
  [hashes.SHA3_224]: 'SHA3_224',
  [hashes.SHA3_256]: 'SHA3_256',
  [hashes.SHA3_384]: 'SHA3_384',
  [hashes.SHA3_512]: 'SHA3_512',
  [hashes.SHAKE128]: 'SHAKE128',
  [hashes.SHAKE256]: 'SHAKE256',
  [hashes.SM3]: 'SM3',
  [hashes.WHIRLPOOL]: 'WHIRLPOOL'
};
var curves$1 = {
  P192: '1.2.840.10045.3.1.1',
  P224: '1.3.132.0.33',
  P256: '1.2.840.10045.3.1.7',
  P384: '1.3.132.0.34',
  P521: '1.3.132.0.35',
  SECP256K1: '1.3.132.0.10',
  X25519: '1.3.101.110',
  X255192: '1.3.6.1.4.1.11591.7',
  X448: '1.3.101.111',
  X4482: '1.3.6.1.4.1.11591.8',
  ED25519: '1.3.101.112',
  ED448: '1.3.101.113'
};
var curvesByVal = {
  [curves$1.P192]: 'P192',
  [curves$1.P224]: 'P224',
  [curves$1.P256]: 'P256',
  [curves$1.P384]: 'P384',
  [curves$1.P521]: 'P521',
  [curves$1.SECP256K1]: 'SECP256K1',
  [curves$1.X25519]: 'X25519',
  [curves$1.X255192]: 'X255192',
  [curves$1.X448]: 'X448',
  [curves$1.X4482]: 'X448',
  [curves$1.ED25519]: 'ED25519',
  [curves$1.ED448]: 'ED448'
};
var sigAlgs = {
  DSASHA1: '1.2.840.10040.4.3',
  RSAMD2: '1.2.840.113549.1.1.2',
  RSAMD4: '1.2.840.113549.1.1.3',
  RSAMD5: '1.2.840.113549.1.1.4',
  RSASHA1: '1.2.840.113549.1.1.5',
  RSAPSS: '1.2.840.113549.1.1.10',
  RSASHA256: '1.2.840.113549.1.1.11',
  RSASHA384: '1.2.840.113549.1.1.12',
  RSASHA512: '1.2.840.113549.1.1.13',
  RSASHA224: '1.2.840.113549.1.1.14',
  MGF1: '1.2.840.113549.1.1.8',
  RSASHA1MS: '1.3.14.3.2.29',
  RSASHA3_256: '2.16.840.1.101.3.4.2.8',
  RSASHA3_384: '2.16.840.1.101.3.4.2.9',
  RSASHA3_512: '2.16.840.1.101.3.4.2.10',
  ECDSASHA1: '1.2.840.10045.4.1',
  ECDSASHA224: '1.2.840.10045.4.3.1',
  ECDSASHA256: '1.2.840.10045.4.3.2',
  ECDSASHA384: '1.2.840.10045.4.3.3',
  ECDSASHA512: '1.2.840.10045.4.3.4',
  EDDSA: '1.3.6.1.4.1.11591.4.12.2'
};
var sigAlgsByVal = {
  [sigAlgs.DSASHA1]: 'DSASHA1',
  [sigAlgs.RSAMD2]: 'RSAMD2',
  [sigAlgs.RSAMD4]: 'RSAMD4',
  [sigAlgs.RSAMD5]: 'RSAMD5',
  [sigAlgs.RSASHA1]: 'RSASHA1',
  [sigAlgs.RSAPSS]: 'RSAPSS',
  [sigAlgs.RSASHA256]: 'RSASHA256',
  [sigAlgs.RSASHA384]: 'RSASHA384',
  [sigAlgs.RSASHA512]: 'RSASHA512',
  [sigAlgs.MGF1]: 'MGF1',
  [sigAlgs.RSASHA1MS]: 'RSASHA1',
  [sigAlgs.RSASHA3_256]: 'RSASHA3_256',
  [sigAlgs.RSASHA3_384]: 'RSASHA3_384',
  [sigAlgs.RSASHA3_512]: 'RSASHA3_512',
  [sigAlgs.ECDSASHA1]: 'ECDSASHA1',
  [sigAlgs.ECDSASHA224]: 'ECDSASHA224',
  [sigAlgs.ECDSASHA384]: 'ECDSASHA384',
  [sigAlgs.ECDSASHA512]: 'ECDSASHA512',
  [sigAlgs.EDDSA]: 'EDDSA'
};
var sigToHash = {
  [sigAlgs.DSASHA1]: hashes.SHA1,
  [sigAlgs.RSAMD2]: hashes.MD2,
  [sigAlgs.RSAMD4]: hashes.MD4,
  [sigAlgs.RSAMD5]: hashes.MD5,
  [sigAlgs.RSASHA1]: hashes.SHA1,
  [sigAlgs.RSAPSS]: null,
  [sigAlgs.RSASHA256]: hashes.SHA256,
  [sigAlgs.RSASHA384]: hashes.SHA384,
  [sigAlgs.RSASHA512]: hashes.SHA512,
  [sigAlgs.MGF1]: null,
  [sigAlgs.RSASHA1MS]: hashes.SHA1,
  [sigAlgs.RSASHA3_256]: hashes.SHA3_256,
  [sigAlgs.RSASHA3_384]: hashes.SHA3_384,
  [sigAlgs.RSASHA3_512]: hashes.SHA3_512,
  [sigAlgs.ECDSASHA1]: hashes.SHA1,
  [sigAlgs.ECDSASHA224]: hashes.SHA224,
  [sigAlgs.ECDSASHA384]: hashes.SHA384,
  [sigAlgs.ECDSASHA512]: hashes.SHA512,
  [sigAlgs.EDDSA]: null
};
/*
 * Expose
 */

var NONE_1 = NONE;
var attrs_1 = attrs;
var attrsByVal_1 = attrsByVal;
var keyAlgs_1 = keyAlgs;
var keyAlgsByVal_1 = keyAlgsByVal;
var hashes_1 = hashes;
var hashesByVal_1 = hashesByVal;
var curves_1 = curves$1;
var curvesByVal_1 = curvesByVal;
var sigAlgs_1 = sigAlgs;
var sigAlgsByVal_1 = sigAlgsByVal;
var sigToHash_1 = sigToHash;
var objects = {
  NONE: NONE_1,
  attrs: attrs_1,
  attrsByVal: attrsByVal_1,
  keyAlgs: keyAlgs_1,
  keyAlgsByVal: keyAlgsByVal_1,
  hashes: hashes_1,
  hashesByVal: hashesByVal_1,
  curves: curves_1,
  curvesByVal: curvesByVal_1,
  sigAlgs: sigAlgs_1,
  sigAlgsByVal: sigAlgsByVal_1,
  sigToHash: sigToHash_1
};

/*
 * Constants
 */


var EMPTY$4 = Buffer.alloc(0);
var ZERO$2 = Buffer.alloc(1, 0x00);
var EMPTY_OID = new Uint32Array(2);
var MIN_TIME = -62167219200; // 0000-01-01T00:00:00.000Z

var MAX_TIME = 253402300799; // 9999-12-31T23:59:59.000Z

var MIN_OFFSET = -43200; // UTC-12:00

var MAX_OFFSET = 50400; // UTC+14:00
// Missing types:
//   EOC: 0
//   OBJDESC: 7
//   EXTERNAL: 8
//   REAL: 9
//   EMBED: 11
//   ROID: 13
//   VIDEOSTRING: 21
//   GRAPHSTRING: 25
//   ISO64STRING: 26
//   UNISTRING: 28
//   CHARSTRING: 29
//   BMPSTRING: 30

var types$2 = {
  BOOLEAN: 1,
  INTEGER: 2,
  BITSTRING: 3,
  OCTSTRING: 4,
  NULL: 5,
  OID: 6,
  ENUM: 10,
  UTF8STRING: 12,
  SEQUENCE: 16,
  SET: 17,
  NUMSTRING: 18,
  PRINTSTRING: 19,
  T61STRING: 20,
  IA5STRING: 22,
  UTCTIME: 23,
  GENTIME: 24,
  GENSTRING: 27
};
var typesByVal = {
  1: 'BOOLEAN',
  2: 'INTEGER',
  3: 'BITSTRING',
  4: 'OCTSTRING',
  5: 'NULL',
  6: 'OID',
  10: 'ENUM',
  12: 'UTF8STRING',
  16: 'SEQUENCE',
  17: 'SET',
  18: 'NUMSTRING',
  19: 'PRINTSTRING',
  20: 'T61STRING',
  22: 'IA5STRING',
  23: 'UTCTIME',
  24: 'GENTIME',
  27: 'GENSTRING'
};
var classes = {
  UNIVERSAL: 0,
  APPLICATION: 1,
  CONTEXT: 2,
  PRIVATE: 3
};
var classesByVal = {
  0: 'UNIVERSAL',
  1: 'APPLICATION',
  2: 'CONTEXT',
  3: 'PRIVATE'
};
var TARGET = 0xff;
var OPTIONAL = 1 << 8;
var MODE = 0xff << 9;
var NORMAL = 0 << 9;
var EXPLICIT = 1 << 9;
var IMPLICIT = 2 << 9;
/**
 * Node
 */

class Node extends bufio.Struct {
  constructor() {
    super();
    this.flags = 0;
  }

  get mode() {
    return this.flags & MODE;
  }

  set mode(value) {
    this.flags &= ~MODE;
    this.flags |= value;
  }

  get opt() {
    return (this.flags & OPTIONAL) !== 0;
  }

  set opt(value) {
    if (value) this.flags |= OPTIONAL;else this.flags &= ~OPTIONAL;
  }

  get target() {
    return this.flags & TARGET;
  }

  set target(value) {
    this.flags &= ~TARGET;
    this.flags |= value;
  }

  get isRaw() {
    return false;
  }

  explicit(target) {
    assert_1(target >>> 0 === target);
    this.mode = EXPLICIT;
    this.target = target;
    return this;
  }

  implicit(target) {
    assert_1(target >>> 0 === target);
    this.mode = IMPLICIT;
    this.target = target;
    return this;
  }

  optional() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    assert_1(typeof value === 'boolean');
    this.opt = value;
    return this;
  }

  clean() {
    return false;
  }

  getBodySize(extra) {
    return 0;
  }

  writeBody(bw, extra) {
    return bw;
  }

  readBody(br, extra) {
    return this;
  }

  encodeBody(extra) {
    var size = this.getBodySize();
    var bw = bufio.write(size);
    this.writeBody(bw, extra);
    return bw.render();
  }

  decodeBody(data, extra) {
    var br = bufio.read(data);
    return this.readBody(br, extra);
  }

  set() {
    return this;
  }

  from(options) {
    if (options == null) return this;

    for (var _len = arguments.length, extra = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      extra[_key - 1] = arguments[_key];
    }

    return this.set(options, ...extra);
  }

  error(str) {
    if (this.opt) return this;
    var err = new Error(str);
    if (Error.captureStackTrace) Error.captureStackTrace(err, this.error);
    throw err;
  }

  getSize(extra) {
    if (this.opt && this.clean()) return 0;
    var body = this.getBodySize(extra);
    var size = 0;
    size += sizeHeader(body);
    size += body;
    if (this.mode === EXPLICIT) size += sizeHeader(size);
    return size;
  }

  write(bw, extra) {
    if (this.opt && this.clean()) return bw;
    var body = this.getBodySize();

    switch (this.mode) {
      case EXPLICIT:
        {
          var size = sizeHeader(body) + body;
          writeHeader(bw, this.target, classes.CONTEXT, false, size); // fall through
        }

      case NORMAL:
        {
          var primitive = this.type !== types$2.SEQUENCE && this.type !== types$2.SET;
          writeHeader(bw, this.type, classes.UNIVERSAL, primitive, body);
          break;
        }

      case IMPLICIT:
        {
          var _primitive = this.type !== types$2.SEQUENCE && this.type !== types$2.SET;

          writeHeader(bw, this.target, classes.CONTEXT, _primitive, body);
          break;
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid mode.');
        }
    }

    return this.writeBody(bw, extra);
  }

  read(br, extra) {
    switch (this.mode) {
      case EXPLICIT:
        {
          var hdr = peekHeader(br, this.opt);
          if (!hdr) return this;
          if (hdr.cls !== classes.CONTEXT) return this.error("Unexpected class: ".concat(hdr.cls, "."));
          if (hdr.primitive) return this.error('Unexpected primitive flag.');
          if (hdr.type !== this.target) return this.error("Unexpected type: ".concat(hdr.type, "."));
          br.seek(hdr.len);
          br = br.readChild(hdr.size); // Fall through.
        }

      case NORMAL:
        {
          var _hdr = peekHeader(br, this.opt);

          if (!_hdr) return this;
          if (_hdr.cls !== classes.UNIVERSAL) return this.error("Unexpected class: ".concat(_hdr.cls, "."));
          var primitive = this.type !== types$2.SEQUENCE && this.type !== types$2.SET;
          if (_hdr.primitive !== primitive) return this.error('Unexpected primitive flag.');
          if (_hdr.type !== this.type) return this.error("Unexpected type: ".concat(_hdr.type, "."));

          if (this.isRaw) {
            var size = _hdr.len + _hdr.size;
            this.raw = br.readBytes(size);
            br.seek(-size);
          }

          br.seek(_hdr.len);
          var child = br.readChild(_hdr.size);
          return this.readBody(child, extra);
        }

      case IMPLICIT:
        {
          var _hdr2 = peekHeader(br, this.opt);

          if (!_hdr2) return this;
          if (_hdr2.cls !== classes.CONTEXT) return this.error("Unexpected class: ".concat(_hdr2.cls, "."));

          var _primitive2 = this.type !== types$2.SEQUENCE && this.type !== types$2.SET;

          if (_hdr2.primitive !== _primitive2) return this.error('Unexpected primitive flag.');
          if (_hdr2.type !== this.target) return this.error("Unexpected type: ".concat(_hdr2.type, "."));
          br.seek(_hdr2.len);

          var _child = br.readChild(_hdr2.size);

          return this.readBody(_child, extra);
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid mode.');
        }
    }
  }

  fromArray(value) {
    return this;
  }

  fromNumber(num) {
    return this;
  }

  fromPEM(num) {
    return this;
  }

  static decodeBody(value) {
    return new this().decodeBody(value);
  }

  static fromArray(value) {
    return new this().fromArray(value);
  }

  static fromNumber(num) {
    return new this().fromNumber(num);
  }

  static fromPEM(str) {
    return new this().fromPEM(str);
  }

}
/**
 * Sequence
 */


class Sequence extends Node {
  constructor() {
    super();
    this.raw = null;
    this.from(...arguments);
  }

  get type() {
    return types$2.SEQUENCE;
  }

}
/**
 * Set
 */

class Set$1 extends Node {
  constructor() {
    super();
    this.raw = null;
    this.from(...arguments);
  }

  get type() {
    return types$2.SET;
  }

}
/**
 * Any
 */

class Any extends Node {
  constructor() {
    super();
    this.node = new Null();
    this.raw = null;
    this.from(...arguments);
  }

  get isRaw() {
    return true;
  }

  explicit(target) {
    throw new Error('Cannot set explicit on any.');
  }

  implicit(target) {
    throw new Error('Cannot set implicit on any.');
  }

  get type() {
    return this.node.type;
  }

  getSize(extra) {
    this.node.flags = this.flags;
    return this.node.getSize(extra);
  }

  write(bw, extra) {
    assert_1(bw);
    assert_1(this.mode === NORMAL);
    this.node.flags = this.flags;
    this.node.write(bw, extra);
    return bw;
  }

  read(br, extra) {
    assert_1(br);
    assert_1(this.mode === NORMAL);
    var hdr = peekHeader(br, this.opt);

    if (!hdr) {
      this.node.flags = this.flags;
      return this;
    }

    var Node = typeToClass(hdr.type);
    this.node = new Node();
    this.node.flags = this.flags;
    this.node.read(br, extra);
    return this;
  }

  getBodySize(extra) {
    this.node.flags = this.flags;
    return this.node.getBodySize(extra);
  }

  writeBody(bw, extra) {
    this.node.flags = this.flags;
    this.node.writeBody(bw, extra);
    return bw;
  }

  readBody(br, extra) {
    this.node.flags = this.flags;
    this.node.readBody(br, extra);
    return this;
  }

  set(node) {
    if (node == null) node = new Null();
    assert_1(node instanceof Node);
    this.node = node;
    this.node.flags = this.flags;
    return this;
  }

  clean() {
    return this.node.type === types$2.NULL;
  }

  format() {
    return {
      type: this.constructor.name,
      node: this.node
    };
  }

}
/**
 * Choice
 */


class Choice extends Node {
  constructor(node) {
    super();
    assert_1(node instanceof Node);
    this.node = node;

    for (var _len2 = arguments.length, options = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      options[_key2 - 1] = arguments[_key2];
    }

    this.from(...options);
  }

  get type() {
    return this.node.type;
  }

  choices() {
    throw new Error('Unimplemented.');
  }

  getSize(extra) {
    return this.node.getSize(extra);
  }

  write(bw, extra) {
    assert_1(bw);
    this.node.flags = this.flags;
    this.node.write(bw, extra);
    return bw;
  }

  read(br, extra) {
    assert_1(br);
    var choices = this.choices();
    assert_1(Array.isArray(choices));
    assert_1(choices.length >= 1);
    var hdr = peekHeader(br, this.opt);
    if (!hdr) return this;
    if (choices.indexOf(hdr.type) === -1) throw new Error("Could not satisfy choice for: ".concat(hdr.type, "."));
    var Node = typeToClass(hdr.type);
    var el = new Node();
    el.flags = this.flags;
    this.node = el.read(br, extra);
    return this;
  }

  getBodySize(extra) {
    return this.node.getBodySize(extra);
  }

  writeBody(bw, extra) {
    this.node.writeBody(bw, extra);
    return bw;
  }

  readBody(br, extra) {
    this.node.readBody(br, extra);
    return this;
  }

  set() {
    return this.node.set(...arguments);
  }

  clean() {
    return this.node.clean();
  }

  format() {
    return {
      type: this.constructor.name,
      node: this.node
    };
  }

}
/**
 * String
 */


var Str = class String extends Node {
  constructor() {
    super();
    this.value = '';
    this.from(...arguments);
  }

  get encoding() {
    return 'binary';
  }

  getBodySize() {
    return Buffer.byteLength(this.value, this.encoding);
  }

  writeBody(bw) {
    bw.writeString(this.value, this.encoding);
    return bw;
  }

  readBody(br) {
    var str = br.readString(br.left(), this.encoding);

    switch (this.type) {
      case types$2.NUMSTRING:
        {
          if (!isNumString(str)) throw new Error('Invalid num string.');
          break;
        }

      case types$2.PRINTSTRING:
        {
          if (!isPrintString(str)) throw new Error('Invalid print string.');
          break;
        }

      case types$2.IA5STRING:
        {
          if (!isIA5String(str)) throw new Error('Invalid print string.');
          break;
        }
    }

    this.value = str;
    return this;
  }

  set(value) {
    if (value == null) value = '';
    assert_1(typeof value === 'string');
    this.value = value;
    return this;
  }

  clean() {
    return this.value.length === 0;
  }

  format() {
    return "<".concat(this.constructor.name, ": ").concat(this.value, ">");
  }

};
/**
 * Boolean
 */

var Bool = class Boolean extends Node {
  constructor() {
    super();
    this.value = false;
    this.from(...arguments);
  }

  get type() {
    return types$2.BOOLEAN;
  }

  getBodySize() {
    return 1;
  }

  writeBody(bw) {
    bw.writeU8(this.value ? 0xff : 0x00);
    return bw;
  }

  readBody(br) {
    if (br.left() !== 1) throw new Error('Non-minimal boolean.');
    var value = br.readU8();
    if (value !== 0x00 && value !== 0xff) throw new Error('Invalid boolean.');
    this.value = value === 0xff;
    return this;
  }

  set(value) {
    if (value == null) value = false;
    assert_1(typeof value === 'boolean');
    this.value = value;
    return this;
  }

  clean() {
    return this.value === false;
  }

  format() {
    return "<".concat(this.constructor.name, ": ").concat(this.value, ">");
  }

};
/**
 * Integer
 */

class Integer extends Node {
  constructor() {
    super();
    this.value = ZERO$2;
    this.negative = false;
    this.from(...arguments);
  }

  get type() {
    return types$2.INTEGER;
  }

  getBodySize() {
    var b = this.value;
    if (b.length === 0) return 1;
    var pad = 0;
    var size = 0;

    if (!this.negative && b[0] > 127) {
      pad = 1;
    } else if (this.negative) {
      if (b[0] > 128) {
        pad = 1;
      } else if (b[0] === 128) {
        pad = 0;

        for (var i = 1; i < b.length; i++) {
          pad |= b[i];
        }

        pad = pad ? 1 : 0;
      }
    }

    size += pad;
    size += b.length;
    return size;
  }

  writeBody(bw) {
    var b = this.value;

    if (b.length === 0) {
      bw.writeU8(0x00);
      return bw;
    }

    var pad = 0;
    var pb = 0;

    if (!this.negative && b[0] > 127) {
      pad = 1;
      pb = 0;
    } else if (this.negative) {
      pb = 0xff;

      if (b[0] > 128) {
        pad = 1;
      } else if (b[0] === 128) {
        pad = 0;

        for (var i = 1; i < b.length; i++) {
          pad |= b[i];
        }

        pb = pad !== 0 ? 0xff : 0;
        pad = pb & 1;
      }
    }

    if (pad) bw.writeU8(pb);
    var start = bw.offset;
    bw.writeBytes(b);
    if (pb) twosComplement(bw.data, start, bw.offset);
    return this;
  }

  readBody(br) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var p = br.readBytes(br.left());
    if (p.length === 0) throw new Error('Zero length integer.');

    if (strict) {
      // This line throws on a number of root certs.
      if (p[0] === 0x00 && (p[1] & 0x80) === 0) throw new Error('Non-minimal integer.');
      if (p[0] === 0xff && (p[1] & 0x80) === 0x80) throw new Error('Non-minimal integer.');
    }

    var neg = p[0] & 0x80;

    if (p.length === 1) {
      if (neg) p[0] = (p[0] ^ 0xff) + 1;
      this.negative = neg !== 0;
      this.value = p;
      return this;
    }

    var pad = 0;

    if (p[0] === 0x00) {
      pad = 1;
    } else if (p[0] === 0xff) {
      for (var i = 1; i < p.length; i++) {
        pad |= p[i];
      }

      pad = pad !== 0 ? 1 : 0;
    }

    if (pad && neg === (p[1] & 0x80)) throw new Error('Invalid integer padding.');
    if (pad) p = p.slice(1);
    if (neg) twosComplement(p, 0, p.length);
    this.negative = neg !== 0;
    this.value = trimLeft$1(p);
    return this;
  }

  set(value, negative) {
    if (typeof value === 'number') return this.fromNumber(value);
    if (value == null) value = ZERO$2;
    assert_1(Buffer.isBuffer(value));
    this.value = trimLeft$1(value);
    this.negative = false;

    if (negative != null) {
      assert_1(typeof negative === 'boolean');
      this.negative = negative;
    }

    return this;
  }

  clean() {
    return !this.negative && this.value.equals(ZERO$2);
  }

  formatValue() {
    return this.value.toString('hex');
  }

  toNumber() {
    var num = bufio.readUBE(this.value, 0, this.value.length);
    if (this.negative) num = -num;
    return num;
  }

  fromNumber(num) {
    assert_1(Number.isSafeInteger(num));
    var buf = Buffer.allocUnsafe(8);
    var neg = false;

    if (num < 0) {
      neg = true;
      num = -num;
    }

    bufio.writeU64BE(buf, num, 0);
    this.value = trimLeft$1(buf);
    this.negative = neg;
    return this;
  }

  format() {
    var name = this.constructor.name;
    if (this.value.length <= 6) return "<".concat(name, ": ").concat(this.toNumber(), ">");
    var sign = this.negative ? '-' : '';
    var hex = this.value.toString('hex');
    return "<".concat(name, ": ").concat(sign, "0x").concat(hex, ">");
  }

}
/**
 * Unsigned
 */


class Unsigned extends Integer {
  constructor() {
    super(...arguments);
  }

  getBodySize() {
    assert_1(!this.negative);
    return super.getBodySize();
  }

  writeBody(bw) {
    assert_1(!this.negative);
    return super.writeBody(bw);
  }

  readBody(br) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    super.readBody(br, strict);
    assert_1(!this.negative);
    return this;
  }

  set(value) {
    return super.set(value);
  }

  toNumber() {
    assert_1(!this.negative);
    return super.toNumber();
  }

  fromNumber(num) {
    super.fromNumber(num);
    assert_1(!this.negative);
    return this;
  }

}
/**
 * BitString
 */


class BitString extends Node {
  constructor() {
    super();
    this.bits = 0;
    this.value = EMPTY$4;
    this.from(...arguments);
  }

  get type() {
    return types$2.BITSTRING;
  }

  getBodySize() {
    return 1 + this.value.length;
  }

  writeBody(bw) {
    var prefix = 8 - (this.bits & 7) & 7;
    bw.writeU8(prefix);
    bw.writeBytes(this.value);
    return bw;
  }

  readBody(br) {
    var data = br.readBytes(br.left());
    if (data.length === 0) throw new Error('Zero length bit string.');
    var padding = data[0];

    if (padding > 7 || data.length === 1 && padding > 0 || (data[data.length - 1] & (1 << padding) - 1) !== 0) {
      throw new Error('Invalid padding bits.');
    }

    this.bits = (data.length - 1) * 8 - padding;
    this.value = data.slice(1);
    return this;
  }

  rightAlign() {
    var data = this.value;
    var shift = 8 - (this.bits & 7);
    if (shift === 8 || data.length === 0) return data;
    var out = Buffer.allocUnsafe(data.length);
    out[0] = data[0] >>> shift;

    for (var i = 1; i < data.length; i++) {
      out[i] = data[i - 1] << 8 - shift;
      out[i] |= data[i] >>> shift;
    }

    return out;
  }

  getBit(i) {
    assert_1(i >>> 0 === i);
    if (i < 0 || i > this.bits) return 0;
    var x = i >>> 3;
    var y = 7 - (i & 7);
    return this.value[x] >>> y & 1;
  }

  setBit(i, val) {
    assert_1(i >>> 0 === i);
    if (i < 0 || i > this.bits) return this;
    var x = i >>> 3;
    var y = 7 - (i & 7);
    if (val) this.value[x] |= 1 << y;else this.value[x] &= ~(1 << y);
    return this;
  }

  set(value) {
    if (value == null) value = EMPTY$4;

    if (typeof value === 'number') {
      assert_1(value >>> 0 === value);
      this.bits = value;
      this.value = Buffer.alloc(value + 7 >>> 3);
    } else {
      assert_1(Buffer.isBuffer(value));
      this.bits = value.length * 8;
      this.value = value;
    }

    return this;
  }

  clean() {
    return this.bits === 0 && this.value.length === 0;
  }

  format() {
    var value = this.rightAlign();
    if (value.length > 32) value = value.slice(0, 32);
    return "<".concat(this.constructor.name, ": ").concat(this.bits, ":").concat(value.toString('hex'), ">");
  }

}
/**
 * OctString
 */


class OctString extends Node {
  constructor() {
    super();
    this.value = EMPTY$4;
    this.from(...arguments);
  }

  get type() {
    return types$2.OCTSTRING;
  }

  getBodySize() {
    return this.value.length;
  }

  writeBody(bw) {
    bw.writeBytes(this.value);
    return bw;
  }

  readBody(br) {
    this.value = br.readBytes(br.left());
    return this;
  }

  set(value) {
    if (value == null) value = EMPTY$4;
    assert_1(Buffer.isBuffer(value));
    this.value = value;
    return this;
  }

  clean() {
    return this.value.length === 0;
  }

  format() {
    var value = this.value;
    if (value.length > 32) value = value.slice(0, 32);
    return "<".concat(this.constructor.name, ": ").concat(value.toString('hex'), ">");
  }

}
/**
 * Null
 */


class Null extends Node {
  constructor() {
    super();
    this.from(...arguments);
  }

  get type() {
    return types$2.NULL;
  }

  getBodySize() {
    return 0;
  }

  writeBody(bw) {
    return bw;
  }

  readBody(br) {
    if (br.left() !== 0) throw new Error('Non-minimal NULL.');
    return this;
  }

  clean() {
    return true;
  }

  format() {
    return "<".concat(this.constructor.name, ">");
  }

}
/**
 * OID
 */


class OID$1 extends Node {
  constructor() {
    super();
    this.value = EMPTY_OID;
    this.from(...arguments);
  }

  get type() {
    return types$2.OID;
  }

  getBodySize() {
    var oid = this.value;
    if (oid.length < 2 || oid[0] > 2 || oid[0] < 2 && oid[1] >= 40) throw new Error('Invalid OID.');
    var size = sizeBase128(oid[0] * 40 + oid[1]);

    for (var i = 2; i < oid.length; i++) {
      size += sizeBase128(oid[i]);
    }

    return size;
  }

  writeBody(bw) {
    var oid = this.value;
    var data = bw.data;
    if (oid.length < 2 || oid[0] > 2 || oid[0] < 2 && oid[1] >= 40) throw new Error('Invalid OID.');
    var off = bw.offset;
    off = writeBase128(data, oid[0] * 40 + oid[1], off);

    for (var i = 2; i < oid.length; i++) {
      off = writeBase128(data, oid[i], off);
    }

    bw.offset = off;
    return bw;
  }

  readBody(br) {
    var data = br.readBytes(br.left(), true);
    if (data.length === 0) throw new Error('Zero length OID.');
    var s = new Uint32Array(data.length + 1);
    var [v, off] = readBase128(data, 0);

    if (v < 80) {
      s[0] = v / 40 >>> 0;
      s[1] = v % 40;
    } else {
      s[0] = 2;
      s[1] = v - 80;
    }

    var i = 2;

    for (; off < data.length; i++) {
      [v, off] = readBase128(data, off);
      s[i] = v;
    }

    this.value = s.subarray(0, i);
    return this;
  }

  equals(oid) {
    assert_1(oid instanceof OID$1);
    return isEqual(this.value, oid.value);
  }

  set(value) {
    if (value == null) value = EMPTY_OID;
    if (typeof value === 'string') return this.fromString(value);
    if (Array.isArray(value)) return this.fromArray(value);
    assert_1(value instanceof Uint32Array);
    this.value = value;
    return this;
  }

  clean() {
    return isEqual(this.value, EMPTY_OID);
  }

  toArray() {
    var arr = [];

    for (var i = 0; i < this.value.length; i++) {
      arr.push(this.value[i]);
    }

    return arr;
  }

  fromArray(arr) {
    assert_1(Array.isArray(arr));
    var out = new Uint32Array(arr.length);

    for (var i = 0; i < arr.length; i++) {
      var val = arr[i];
      assert_1(val >>> 0 === val);
      out[i] = val;
    }

    this.value = out;
    return this;
  }

  toString() {
    var str = '';

    for (var i = 0; i < this.value.length; i++) {
      if (i > 0) str += '.';
      str += this.value[i].toString(10);
    }

    return str;
  }

  fromString(str) {
    assert_1(typeof str === 'string');
    if (objects.attrs.hasOwnProperty(str)) str = objects.attrs[str];else if (objects.keyAlgs.hasOwnProperty(str)) str = objects.keyAlgs[str];else if (objects.hashes.hasOwnProperty(str)) str = objects.hashes[str];else if (objects.curves.hasOwnProperty(str)) str = objects.curves[str];
    var parts = str.split('.');
    var out = new Uint32Array(parts.length);

    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      out[i] = parseU32(part);
    }

    this.value = out;
    return this;
  }

  getAttributeName() {
    return objects.attrsByVal[this.toString()] || null;
  }

  getSignatureAlgorithmName() {
    return objects.sigAlgsByVal[this.toString()] || null;
  }

  getSignatureHash() {
    return objects.sigToHash[this.toString()] || null;
  }

  getSignatureHashName() {
    var oid = this.getSignatureHash();
    if (!oid) return null;
    return objects.hashesByVal[oid] || null;
  }

  getKeyAlgorithmName() {
    return objects.keyAlgsByVal[this.toString()] || null;
  }

  getHashName() {
    return objects.hashesByVal[this.toString()] || null;
  }

  getCurveName() {
    return objects.curvesByVal[this.toString()] || null;
  }

  format() {
    var oid = this.toString();
    var name = objects.attrsByVal[oid] || objects.sigAlgsByVal[oid] || objects.keyAlgsByVal[oid] || objects.hashesByVal[oid] || objects.curvesByVal[oid] || 'UNKNOWN';
    var str = "".concat(oid, " (").concat(name, ")");
    return "<".concat(this.constructor.name, ": ").concat(str, ">");
  }

}
/**
 * Enum
 */


class Enum extends Integer {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.ENUM;
  }

}
/**
 * Utf8String
 */


class Utf8String extends Str {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.UTF8STRING;
  }

  get encoding() {
    return 'utf8';
  }

}
/**
 * RawSequence
 */


class RawSequence extends Node {
  constructor() {
    super();
    this.value = EMPTY$4;
    this.from(...arguments);
  }

  get type() {
    return types$2.SEQUENCE;
  }

  getBodySize() {
    return this.value.length;
  }

  writeBody(bw) {
    bw.writeBytes(this.value);
    return bw;
  }

  readBody(br) {
    this.value = br.readBytes(br.left());
    return this;
  }

  set(value) {
    if (value == null) value = EMPTY$4;
    if (Array.isArray(value)) return this.fromArray(value);
    assert_1(Buffer.isBuffer(value));
    this.value = value;
    return this;
  }

  clean() {
    return this.value.length === 0;
  }

  *children() {
    var br = bufio.read(this.value);

    while (br.left()) {
      yield Any.read(br).node;
    }
  }

  toArray() {
    var out = [];

    for (var el of this.children()) {
      out.push(el);
    }

    return out;
  }

  fromArray(value) {
    assert_1(Array.isArray(value));
    var size = 0;

    for (var el of value) {
      assert_1(el instanceof Node);
      size += el.getSize();
    }

    var bw = bufio.write(size);

    for (var _el of value) {
      _el.write(bw);
    }

    this.value = bw.render();
    return this;
  }

  format() {
    return this.toArray();
  }

}
/**
 * RawSet
 */


class RawSet extends RawSequence {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.SET;
  }

}
/**
 * NumString
 */


class NumString extends Str {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.NUMSTRING;
  }

}
/**
 * PrintString
 */


class PrintString extends Str {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.PRINTSTRING;
  }

}
/**
 * T61String
 */


class T61String extends Str {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.T61STRING;
  }

}
/**
 * IA5String
 */


class IA5String extends Str {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.IA5STRING;
  }

}
/**
 * Time
 */


class Time extends Node {
  constructor() {
    super();
    this.value = 0;
    this.offset = 0;
    this.from(...arguments);
  }

  set(value, offset) {
    if (value == null) value = 0;
    if (offset == null) offset = 0;
    if (typeof value === 'string') return this.fromString(value);
    assert_1(isTime(value));
    assert_1(isOffset(offset));
    this.value = value;
    this.offset = offset;
    return this;
  }

  clean() {
    return this.value === 0 && this.offset === 0;
  }

  unix() {
    return this.value - this.offset;
  }

  toString() {
    var date = new Date(this.value * 1000);
    var str = date.toISOString().slice(0, -5);
    return str + serializeOffset(this.offset);
  }

  fromString(str) {
    assert_1(typeof str === 'string');
    var ms = Date.parse(str);
    if (ms !== ms) throw new Error('Invalid date string.');
    var time = Math.floor(ms / 1000);
    if (!isTime(time)) throw new Error('Invalid time.');
    this.value = time;
    this.offset = 0;
    return this;
  }

  format() {
    var name = this.constructor.name;
    var value = this.value;
    var off = this.offset.toString(10);
    if (this.offset >= 0) off = '+' + off;
    return "<".concat(name, ": ").concat(value).concat(off, " (").concat(this.toString(), ")>");
  }

}
/**
 * UTCTime
 */


class UTCTime extends Time {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.UTCTIME;
  }

  getBodySize() {
    return this.offset === 0 ? 13 : 17;
  }

  writeBody(bw) {
    assert_1(isTime(this.value));
    var date = new Date(this.value * 1000);
    var str = '';
    str += two(date.getUTCFullYear() % 100);
    str += two(date.getUTCMonth() + 1);
    str += two(date.getUTCDate());
    str += two(date.getUTCHours());
    str += two(date.getUTCMinutes());
    str += two(date.getUTCSeconds());
    str += serializeOffset(this.offset);
    bw.writeString(str, 'binary');
    return bw;
  }

  readBody(br) {
    var size = br.left();
    if (size !== 13 && size !== 17) throw new Error('Invalid UTCTIME.');
    var str = br.readString(size, 'binary');
    var year = parseU32(str.substring(0, 2));
    var mon = parseU32(str.substring(2, 4));
    var day = parseU32(str.substring(4, 6));
    var hour = parseU32(str.substring(6, 8));
    var min = parseU32(str.substring(8, 10));
    var sec = parseU32(str.substring(10, 12));
    this.value = toSeconds(year, mon, day, hour, min, sec, true);
    this.offset = parseOffset(str.substring(12));
    return this;
  }

}
/**
 * GenTime
 */


class GenTime extends Time {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.GENTIME;
  }

  getBodySize() {
    return this.offset === 0 ? 15 : 19;
  }

  writeBody(bw) {
    assert_1(isTime(this.value));
    var date = new Date(this.value * 1000);
    var str = '';
    str += date.getUTCFullYear().toString(10);
    str += two(date.getUTCMonth() + 1);
    str += two(date.getUTCDate());
    str += two(date.getUTCHours());
    str += two(date.getUTCMinutes());
    str += two(date.getUTCSeconds());
    str += serializeOffset(this.offset);
    bw.writeString(str, 'binary');
    return bw;
  }

  readBody(br) {
    var size = br.left();
    if (size !== 15 && size !== 19) throw new Error('Invalid GENTIME.');
    var str = br.readString(size, 'binary');
    var year = parseU32(str.substring(0, 4));
    var mon = parseU32(str.substring(4, 6));
    var day = parseU32(str.substring(6, 8));
    var hour = parseU32(str.substring(8, 10));
    var min = parseU32(str.substring(10, 12));
    var sec = parseU32(str.substring(12, 14));
    this.value = toSeconds(year, mon, day, hour, min, sec, false);
    this.offset = parseOffset(str.substring(14));
    return this;
  }

}
/**
 * GenString
 */


class GenString extends Str {
  constructor() {
    super(...arguments);
  }

  get type() {
    return types$2.GENSTRING;
  }

}
/**
 * API
 */


function typeToClass(type) {
  assert_1(type >>> 0 === type);

  switch (type) {
    case types$2.BOOLEAN:
      return Bool;

    case types$2.INTEGER:
      return Integer;

    case types$2.BITSTRING:
      return BitString;

    case types$2.OCTSTRING:
      return OctString;

    case types$2.NULL:
      return Null;

    case types$2.OID:
      return OID$1;

    case types$2.ENUM:
      return Enum;

    case types$2.UTF8STRING:
      return Utf8String;

    case types$2.SEQUENCE:
      return RawSequence;

    case types$2.SET:
      return RawSet;

    case types$2.NUMSTRING:
      return NumString;

    case types$2.PRINTSTRING:
      return PrintString;

    case types$2.T61STRING:
      return T61String;

    case types$2.IA5STRING:
      return IA5String;

    case types$2.UTCTIME:
      return UTCTime;

    case types$2.GENTIME:
      return GenTime;

    case types$2.GENSTRING:
      return GenString;

    default:
      throw new Error("Unknown type: ".concat(type, "."));
  }
}
/*
 * Helpers
 */


function sizeHeader(size) {
  assert_1(size >>> 0 === size);
  if (size <= 0x7f) return 1 + 1;
  if (size <= 0xff) return 1 + 1 + 1;
  if (size <= 0xffff) return 1 + 1 + 2;
  assert_1(size <= 0xffffff);
  return 1 + 1 + 3;
}

function writeHeader(bw, type, cls, primitive, size) {
  assert_1(bw);
  assert_1(type >>> 0 === type);
  assert_1(cls >>> 0 === cls);
  assert_1(typeof primitive === 'boolean');
  assert_1(size >>> 0 === size);
  if (!primitive) type |= 0x20;
  type |= cls << 6; // Short form.

  if (size <= 0x7f) {
    bw.writeU8(type);
    bw.writeU8(size);
    return bw;
  } // Long form (1 byte).


  if (size <= 0xff) {
    bw.writeU8(type);
    bw.writeU8(0x80 | 1);
    bw.writeU8(size);
    return bw;
  } // Long form (2 bytes).


  if (size <= 0xffff) {
    bw.writeU8(type);
    bw.writeU8(0x80 | 2);
    bw.writeU16BE(size);
    return bw;
  }

  assert_1(size <= 0xffffff); // Long form (3 bytes).

  bw.writeU8(type);
  bw.writeU8(0x80 | 3);
  bw.writeU24BE(size);
  return bw;
}

function readHeader(br) {
  var start = br.offset;
  var field = br.readU8();
  var cls = field >>> 6;
  var primitive = (field & 0x20) === 0;
  var type = field & 0x1f;

  if (type === 0x1f) {
    [type, br.offset] = readBase128(br.data, br.offset);
    if (type < 0x1f) throw new Error('Non-minimal type.');
  }

  switch (cls) {
    case classes.UNIVERSAL:
    case classes.CONTEXT:
      break;

    default:
      throw new Error('Unknown class.');
  }

  var size = readSize$1(br);
  var len = br.offset - start;
  return {
    type,
    cls,
    primitive,
    size,
    len
  };
}

function peekHeader(br, optional) {
  var offset = br.offset;
  var hdr = null;
  var err = null;

  try {
    hdr = readHeader(br);
  } catch (e) {
    err = e;
  }

  br.offset = offset;
  if (!optional && !hdr) throw err;
  return hdr;
}

function readSize$1(br) {
  var field = br.readU8();
  var bytes = field & 0x7f; // Definite form

  if ((field & 0x80) === 0) {
    // Short form
    return bytes;
  } // Indefinite form.


  if (bytes === 0) throw new Error('Indefinite length.');
  var len = 0;

  for (var i = 0; i < bytes; i++) {
    var ch = br.readU8();
    if (len >= 1 << 23) throw new Error('Length too large.');
    len *= 0x100;
    len += ch;
    if (len === 0) throw new Error('Unexpected leading zeroes.');
  }

  if (len < 0x80) throw new Error('Non-minimal length.');
  return len;
}

function sizeBase128(n) {
  assert_1(n >>> 0 === n);
  if (n === 0) return 1;
  var len = 0;

  while (n > 0) {
    len += 1;
    n >>>= 7;
  }

  return len;
}

function writeBase128(data, n, off) {
  assert_1(Buffer.isBuffer(data));
  assert_1(n >>> 0 === n);
  assert_1(off >>> 0 === off);
  var l = sizeBase128(n);

  for (var i = l - 1; i >= 0; i--) {
    var o = n >>> i * 7;
    o &= 0x7f;
    if (i !== 0) o |= 0x80;
    if (off >= data.length) throw new bufio.EncodingError(off, 'Out of bounds write');
    data[off] = o;
    off += 1;
  }

  return off;
}

function readBase128(data, off) {
  assert_1(Buffer.isBuffer(data));
  assert_1(off >>> 0 === off);
  var shifted = 0;
  var num = 0;

  for (; off < data.length; shifted++) {
    if (shifted === 5) throw new Error('Base128 integer too large.');
    var b = data[off];
    num *= 128;
    num += b & 0x7f;
    off += 1;

    if ((b & 0x80) === 0) {
      if (num > 0xffffffff) throw new Error('Base128 integer too large.');
      return [num, off];
    }
  }

  throw new Error('Base128 integer too short.');
}

function two(num) {
  if (num < 10) return '0' + num.toString(10);
  return num.toString(10);
}

function isNumString(str) {
  assert_1(typeof str === 'string');

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    if (ch >= 0x30 && ch <= 0x39) continue;
    if (ch === 0x20) continue;
    return false;
  }

  return true;
}

function isPrintString(str) {
  assert_1(typeof str === 'string');

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i); // 0 - 9

    if (ch >= 0x30 && ch <= 0x39) continue; // A - Z

    if (ch >= 0x41 && ch <= 0x5a) continue; // a - z

    if (ch >= 0x61 && ch <= 0x7a) continue;

    switch (ch) {
      case 0x20: // ' '

      case 0x26: // & - nonstandard

      case 0x27: // '

      case 0x28: // (

      case 0x29: // )

      case 0x2a: // * - nonstandard

      case 0x2b: // +

      case 0x2c: // ,

      case 0x2d: // -

      case 0x2e: // .

      case 0x2f: // /

      case 0x3a: // :

      case 0x3d: // =

      case 0x3f:
        // ?
        continue;
    }

    return false;
  }

  return true;
}

function isIA5String(str) {
  assert_1(typeof str === 'string');

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    if (ch >= 0x80) return false;
  }

  return true;
}

function parseU32(str) {
  assert_1(typeof str === 'string');
  var word = 0;
  if (str.length === 0 || str.length > 10) throw new Error('Invalid integer.');

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i) - 0x30;
    if (ch < 0 || ch > 9) throw new Error('Invalid integer.');
    word *= 10;
    word += ch;
    if (word > 0xffffffff) throw new Error('Invalid integer.');
  }

  return word;
}

function isEqual(a, b) {
  assert_1(a instanceof Uint32Array);
  assert_1(b instanceof Uint32Array);
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }

  return true;
}

function trimLeft$1(buf) {
  assert_1(Buffer.isBuffer(buf));
  if (buf.length === 0) return Buffer.from([0x00]);
  if (buf[0] !== 0x00) return buf;

  for (var i = 1; i < buf.length; i++) {
    if (buf[i] !== 0x00) return buf.slice(i);
  }

  return buf.slice(-1);
}

function twosComplement(num, start, end) {
  assert_1(Buffer.isBuffer(num));
  assert_1(start >>> 0 === start);
  assert_1(end >>> 0 === end);
  assert_1(start <= end);
  var carry = 1;

  for (var i = end - 1; i >= start; i--) {
    carry += num[i] ^ 0xff;
    num[i] = carry & 0xff;
    carry >>>= 8;
  }

  return num;
}

function isTime(time) {
  if (!Number.isSafeInteger(time)) return false; // ASN.1 time ranges from;
  //   0000-01-01T00:00:00.000Z
  // to:
  //   9999-12-31T00:59:59.000Z

  if (time < MIN_TIME || time > MAX_TIME) return false;
  return true;
}

function toSeconds(year, mon, day, hour, min, sec, utc) {
  assert_1(year >>> 0 === year);
  assert_1(mon >>> 0 === mon);
  assert_1(day >>> 0 === day);
  assert_1(hour >>> 0 === hour);
  assert_1(min >>> 0 === min);
  assert_1(sec >>> 0 === sec);
  assert_1(typeof utc === 'boolean');

  if (utc) {
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } // Highest valid date:
  //   new Date(8640000000000000)


  if (year > 275760) throw new Error('Invalid year.');
  if (mon < 1 || mon > 12 || day < 1 || day > 32) throw new Error('Invalid month or day.');
  if (hour > 23 || min > 59 || sec > 59) throw new Error('Invalid hours, minutes, or seconds.');
  var ms = Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  assert_1(ms === ms);
  var time = ms / 1000;
  assert_1(isTime(time));
  return time;
}

function isOffset(offset) {
  if (!Number.isSafeInteger(offset)) return false; // UTC timezones range from -12:00 to +14:00.

  if (offset < MIN_OFFSET || offset > MAX_OFFSET) return false;
  return true;
}

function serializeOffset(offset) {
  assert_1(isOffset(offset));
  if (offset === 0) return 'Z';
  var str = '';

  if (offset < 0) {
    str += '-';
    offset = -offset;
  } else {
    str += '+';
  }

  var minutes = offset / 60 >>> 0;
  var hour = minutes / 60 >>> 0;
  var min = minutes % 60;
  str += two(hour);
  str += two(min);
  return str;
}

function parseOffset(str) {
  assert_1(typeof str === 'string');
  if (str.length === 0) throw new Error('Invalid time offset.');
  var zone = str[0];

  switch (zone) {
    case 'Z':
      {
        if (str.length !== 1) throw new Error('Non-minimal time offset.');
        return 0;
      }

    case '+':
    case '-':
      {
        if (str.length !== 5) throw new Error('Non-minimal time offset.');
        var hour = parseU32(str.substring(1, 3));
        var min = parseU32(str.substring(3, 5));
        var minutes = hour * 60 + min;
        var offset = minutes * 60;
        if (zone === '-') offset = -offset;
        if (!isOffset(offset)) throw new Error('Not a time zone.');
        return offset;
      }
  }

  throw new Error('Invalid time offset.');
}
/*
 * Expose
 */


var EMPTY_1 = EMPTY$4;
var ZERO_1 = ZERO$2;
var EMPTY_OID_1 = EMPTY_OID;
var types_1 = types$2;
var typesByVal_1 = typesByVal;
var classes_1 = classes;
var classesByVal_1 = classesByVal;
var objects_1 = objects;
var TARGET_1 = TARGET;
var OPTIONAL_1 = OPTIONAL;
var MODE_1 = MODE;
var NORMAL_1 = NORMAL;
var EXPLICIT_1 = EXPLICIT;
var IMPLICIT_1 = IMPLICIT;
var Node_1 = Node;
var Sequence_1 = Sequence;
var _Set = Set$1;
var Any_1 = Any;
var Choice_1 = Choice;
var Str_1 = Str;
var _String = Str;
var Bool_1 = Bool;
var _Boolean = Bool;
var Integer_1 = Integer;
var Unsigned_1 = Unsigned;
var BitString_1 = BitString;
var OctString_1 = OctString;
var Null_1 = Null;
var OID_1$1 = OID$1;
var Enum_1 = Enum;
var Utf8String_1 = Utf8String;
var RawSequence_1 = RawSequence;
var RawSet_1 = RawSet;
var NumString_1 = NumString;
var PrintString_1 = PrintString;
var T61String_1 = T61String;
var IA5String_1 = IA5String;
var Time_1 = Time;
var UTCTime_1 = UTCTime;
var GenTime_1 = GenTime;
var GenString_1 = GenString;
var typeToClass_1 = typeToClass;
var asn1 = {
  EMPTY: EMPTY_1,
  ZERO: ZERO_1,
  EMPTY_OID: EMPTY_OID_1,
  types: types_1,
  typesByVal: typesByVal_1,
  classes: classes_1,
  classesByVal: classesByVal_1,
  objects: objects_1,
  TARGET: TARGET_1,
  OPTIONAL: OPTIONAL_1,
  MODE: MODE_1,
  NORMAL: NORMAL_1,
  EXPLICIT: EXPLICIT_1,
  IMPLICIT: IMPLICIT_1,
  Node: Node_1,
  Sequence: Sequence_1,
  Set: _Set,
  Any: Any_1,
  Choice: Choice_1,
  Str: Str_1,
  String: _String,
  Bool: Bool_1,
  Boolean: _Boolean,
  Integer: Integer_1,
  Unsigned: Unsigned_1,
  BitString: BitString_1,
  OctString: OctString_1,
  Null: Null_1,
  OID: OID_1$1,
  Enum: Enum_1,
  Utf8String: Utf8String_1,
  RawSequence: RawSequence_1,
  RawSet: RawSet_1,
  NumString: NumString_1,
  PrintString: PrintString_1,
  T61String: T61String_1,
  IA5String: IA5String_1,
  Time: Time_1,
  UTCTime: UTCTime_1,
  GenTime: GenTime_1,
  GenString: GenString_1,
  typeToClass: typeToClass_1
};

/*
 * Lines
 */


function* lines(str) {
  assert_1(typeof str === 'string');
  var i = 0;
  var j = 0;
  var n = 0;

  if (str.length > 0) {
    if (str.charCodeAt(0) === 0xfeff) {
      i += 1;
      j += 1;
    }
  }

  for (; i < str.length; i++) {
    var ch = str.charCodeAt(i);

    switch (ch) {
      case 0x0d
      /*'\r'*/
      :
      case 0x0a
      /*'\n'*/
      :
      case 0x85
      /*NEL*/
      :
        {
          if (j !== i) {
            var line = trimSpace(str.substring(j, i));
            if (line.length > 0) yield [n, line];
          }

          if (ch === 0x0d && i + 1 < str.length) {
            if (str.charCodeAt(i + 1) === 0x0a) i += 1;
          }

          j = i + 1;
          n += 1;
          break;
        }
    }
  }

  if (j !== i) {
    var _line = trimSpace(str.substring(j, i));

    if (_line.length > 0) yield [n, _line];
  }
}
/*
 * Helpers
 */


function trimSpace(str) {
  assert_1(typeof str === 'string');

  for (var i = str.length - 1; i >= 0; i--) {
    var ch = str.charCodeAt(i);

    switch (ch) {
      case 0x09
      /*'\t'*/
      :
      case 0x0b
      /*'\v'*/
      :
      case 0x0c
      /*'\f'*/
      :
      case 0x20
      /*' '*/
      :
      case 0xa0
      /*nbsp*/
      :
        continue;
    }

    return str.substring(0, i + 1);
  }

  return str;
}
/*
 * Expose
 */


var lines_1 = lines;

/*
 * Constants
 */


var EMPTY$5 = Buffer.alloc(0);
/**
 * PEMBlock
 */

class PEMBlock {
  constructor(type, data) {
    if (type == null) type = 'PRIVACY-ENHANCED MESSAGE';
    if (data == null) data = EMPTY$5;
    assert_1(typeof type === 'string');
    assert_1(Buffer.isBuffer(data));
    this.type = type;
    this.headers = new Map();
    this.data = data;
  }

  toString(armor) {
    return encode$2(this.type, this.headers, this.data, armor);
  }

  fromString(str, armor) {
    var iter = decode$2(str, armor);
    var it = iter.next();
    if (it.done) throw new Error('No PEM data found.');
    var block = it.value;
    this.type = block.type;
    this.headers = block.headers;
    this.data = block.data;
    return this;
  }

  getProcType() {
    var hdr = this.headers.get('Proc-Type');
    if (!hdr) return null;
    return ProcType.fromString(hdr);
  }

  setProcType(version, state) {
    assert_1(version != null && state);
    var proc = new ProcType(version, state);
    this.headers.set('Proc-Type', proc.toString());
    return this;
  }

  unsetProcType() {
    this.headers.delete('Proc-Type');
    return this;
  }

  getDEKInfo() {
    var hdr = this.headers.get('DEK-Info');
    if (!hdr) return null;
    return DEKInfo.fromString(hdr);
  }

  setDEKInfo(name, iv) {
    assert_1(name);
    var info = new DEKInfo(name, iv);
    this.headers.set('DEK-Info', info.toString());
    return this;
  }

  unsetDEKInfo() {
    this.headers.delete('DEK-Info');
    return this;
  }

  isEncrypted() {
    var type;

    try {
      type = this.getProcType();
    } catch (e) {
      return false;
    }

    if (!type) return false;
    return type.version === 4 && type.state === 'ENCRYPTED';
  }

  static fromString(str, armor) {
    return new this().fromString(str, armor);
  }

}
/**
 * ProcType
 */


class ProcType {
  constructor(version, state) {
    if (version == null) version = 0;
    if (state == null) state = 'NONE';
    assert_1(version >>> 0 === version);
    assert_1(typeof state === 'string');
    this.version = version;
    this.state = state.toUpperCase();
  }

  toString() {
    return "".concat(this.version, ",").concat(this.state);
  }

  fromString(str) {
    assert_1(typeof str === 'string');
    var parts = str.split(',', 3);
    if (parts.length !== 2) throw new Error('Invalid Proc-Type.');
    this.version = parseU32$1(parts[0]);
    this.state = parts[1].toUpperCase();
    return this;
  }

  static fromString(str) {
    return new this().fromString(str);
  }

}
/**
 * DEKInfo
 */


class DEKInfo {
  constructor(name, iv) {
    if (name == null) name = 'AES-128-ECB';
    if (iv == null) iv = EMPTY$5;
    assert_1(typeof name === 'string');
    assert_1(Buffer.isBuffer(iv));
    this.name = name.toUpperCase();
    this.iv = iv;
  }

  toString() {
    var name = this.name;
    if (this.iv.length === 0) return name;
    var iv = this.iv.toString('hex');
    return "".concat(name, ",").concat(iv.toUpperCase());
  }

  fromString(str) {
    assert_1(typeof str === 'string');
    var parts = str.split(',', 3);
    if (parts.length < 1 || parts.length > 2) throw new Error('Invalid DEK-Info.');
    var name = parts[0];
    if (name.length === 0) throw new Error('Invalid DEK-Info name.');
    this.name = name.toUpperCase();
    this.iv = EMPTY$5;

    if (parts.length > 1) {
      var hex = parts[1];
      var iv = Buffer.from(hex, 'hex');
      if (iv.length !== hex.length >>> 1) throw new Error('Invalid DEK-Info IV.');
      this.iv = iv;
    }

    return this;
  }

  static fromString(str) {
    return new this().fromString(str);
  }

}
/*
 * PEM
 */


function encode$2(type, headers, data) {
  var armor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  assert_1(typeof type === 'string');
  assert_1(headers instanceof Map);
  assert_1(Buffer.isBuffer(data));
  assert_1(typeof armor === 'boolean');
  var str = '';
  str += "-----BEGIN ".concat(type, "-----\n");

  if (headers.size > 0) {
    for (var [key, value] of headers) {
      str += "".concat(key, ": ").concat(value, "\n");
    }

    str += '\n';
  }

  var s = base64.encode(data);

  for (var i = 0; i < s.length; i += 64) {
    str += s.substring(i, i + 64) + '\n';
  }

  if (armor) {
    var crc = crc24(data);
    str += "=".concat(base64.encode(crc), "\n");
  }

  str += "-----END ".concat(type, "-----\n");
  return str;
}

function* decode$2(str) {
  var armor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  assert_1(typeof str === 'string');
  assert_1(typeof armor === 'boolean');
  var chunk = '';
  var block = null;
  var crc = null;

  for (var [, line] of lines_1(str)) {
    var index = line.indexOf(':');

    if (index !== -1) {
      if (!block) throw new Error('PEM parse error (misplaced header).');
      var key = line.substring(0, index).trim();
      var value = line.substring(index + 1).trim();
      block.headers.set(key, value);
      continue;
    }

    if (line.length >= 15 && line.substring(0, 5) === '-----') {
      if (line.slice(-5) !== '-----') throw new Error('PEM parse error (invalid preamble).');
      var preamble = line.slice(5, -5);

      if (preamble.substring(0, 6) === 'BEGIN ') {
        if (block) throw new Error('PEM parse error (un-ended block).');
        var type = preamble.substring(6).trim();
        block = new PEMBlock();
        block.type = type;
        continue;
      }

      if (preamble.substring(0, 4) === 'END ') {
        if (!block) throw new Error('PEM parse error (unexpected end).');

        var _type = preamble.substring(4).trim();

        if (block.type !== _type) throw new Error('PEM parse error (type mismatch).');
        block.data = base64.decode(chunk);
        if (crc && !crc24(block.data).equals(crc)) throw new Error('PEM parse error (invalid armor checksum).');
        yield block;
        chunk = '';
        block = null;
        crc = null;
        continue;
      }

      throw new Error('PEM parse error (unknown preamble).');
    }

    if (!block) throw new Error('PEM parse error (unexpected data).');

    if (line.length === 5 && line.charCodeAt(0) === 0x3d
    /*'='*/
    ) {
        if (!armor) continue;
        if (crc) throw new Error('PEM parse error (unexpected armor checksum).');
        crc = base64.decode(line.substring(1));
        continue;
      }

    if (line.length > 96) throw new Error('PEM parse error (line too long).');
    chunk += line.replace(/[\t\v ]/g, '');
  }

  if (block || crc) throw new Error('PEM parse error (un-ended block).');
  if (chunk.length !== 0) throw new Error('PEM parse error (trailing data).');
}

function toPEM(data, type, armor) {
  assert_1(Buffer.isBuffer(data));
  assert_1(typeof type === 'string');
  var block = new PEMBlock();
  block.type = type;
  block.data = data;
  return block.toString(armor);
}

function fromPEM(str, type, armor) {
  assert_1(typeof str === 'string');
  assert_1(typeof type === 'string');
  var block = PEMBlock.fromString(str, armor);
  if (block.type !== type) throw new Error('PEM type mismatch.');
  return block.data;
}
/*
 * Helpers
 */


function crc24(data) {
  assert_1(Buffer.isBuffer(data));
  var crc = 0xb704ce;

  for (var i = 0; i < data.length; i++) {
    var ch = data[i];
    crc ^= ch << 16;

    for (var j = 0; j < 8; j++) {
      crc <<= 1;
      if (crc & 0x1000000) crc ^= 0x1864cfb;
    }
  }

  crc &= 0xffffff;
  var buf = Buffer.allocUnsafe(3);
  buf[2] = crc;
  crc >>>= 8;
  buf[1] = crc;
  crc >>>= 8;
  buf[0] = crc;
  return buf;
}

function parseU32$1(str) {
  assert_1(typeof str === 'string');
  if (str.length < 1 || str.length > 10) throw new Error('Invalid integer.');
  var word = 0;

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    if (ch < 0x30 || ch > 0x39) throw new Error('Invalid integer.');
    word *= 10;
    word += ch - 0x30;
    if (i > 0 && word === 0) throw new Error('Invalid integer.');
    if (word > 0xffffffff) throw new Error('Invalid integer.');
  }

  return word;
}
/*
 * Expose
 */


var PEMBlock_1 = PEMBlock;
var ProcType_1 = ProcType;
var DEKInfo_1 = DEKInfo;
var encode_1$1 = encode$2;
var decode_1$1 = decode$2;
var toPEM_1 = toPEM;
var fromPEM_1 = fromPEM;
var pem = {
  PEMBlock: PEMBlock_1,
  ProcType: ProcType_1,
  DEKInfo: DEKInfo_1,
  encode: encode_1$1,
  decode: decode_1$1,
  toPEM: toPEM_1,
  fromPEM: fromPEM_1
};

var {
  types: types$3
} = asn1;
/**
 * Certificate
 */
// Certificate  ::=  SEQUENCE  {
//      tbsCertificate       TBSCertificate,
//      signatureAlgorithm   AlgorithmIdentifier,
//      signature            BIT STRING  }

class Certificate extends asn1.Sequence {
  constructor() {
    super();
    this.tbsCertificate = new TBSCertificate();
    this.signatureAlgorithm = new AlgorithmIdentifier();
    this.signature = new asn1.BitString();
  }

  get isRaw() {
    return true;
  }

  getBodySize() {
    var size = 0;
    size += this.tbsCertificate.getSize();
    size += this.signatureAlgorithm.getSize();
    size += this.signature.getSize();
    return size;
  }

  writeBody(bw) {
    this.tbsCertificate.write(bw);
    this.signatureAlgorithm.write(bw);
    this.signature.write(bw);
    return bw;
  }

  readBody(br) {
    this.tbsCertificate.read(br);
    this.signatureAlgorithm.read(br);
    this.signature.read(br);
    return this;
  }

  clean() {
    return this.tbsCertificate.clean() && this.signatureAlgorithm.clean() && this.signature.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'CERTIFICATE');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'CERTIFICATE');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      tbsCertificate: this.tbsCertificate,
      signatureAlgorithm: this.signatureAlgorithm,
      signature: this.signature
    };
  }

}
/**
 * TBSCertificate
 */
// TBSCertificate  ::=  SEQUENCE  {
//      version         [0]  Version DEFAULT v1,
//      serialNumber         CertificateSerialNumber,
//      signature            AlgorithmIdentifier,
//      issuer               Name,
//      validity             Validity,
//      subject              Name,
//      subjectPublicKeyInfo SubjectPublicKeyInfo,
//      issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
//      subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
//      extensions      [3]  Extensions OPTIONAL }
//
// Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }


class TBSCertificate extends asn1.Sequence {
  constructor() {
    super();
    this.version = new asn1.Unsigned().explicit(0).optional();
    this.serialNumber = new asn1.Integer();
    this.signature = new AlgorithmIdentifier();
    this.issuer = new RDNSequence();
    this.validity = new Validity();
    this.subject = new RDNSequence();
    this.subjectPublicKeyInfo = new SubjectPublicKeyInfo();
    this.issuerUniqueID = new asn1.BitString().implicit(1).optional();
    this.subjectUniqueID = new asn1.BitString().implicit(2).optional();
    this.extensions = new Extensions().explicit(3).optional();
  }

  get isRaw() {
    return true;
  }

  getBodySize() {
    var size = 0;
    size += this.version.getSize();
    size += this.serialNumber.getSize();
    size += this.signature.getSize();
    size += this.issuer.getSize();
    size += this.validity.getSize();
    size += this.subject.getSize();
    size += this.subjectPublicKeyInfo.getSize();
    size += this.issuerUniqueID.getSize();
    size += this.subjectUniqueID.getSize();
    size += this.extensions.getSize();
    return size;
  }

  writeBody(bw) {
    this.version.write(bw);
    this.serialNumber.write(bw);
    this.signature.write(bw);
    this.issuer.write(bw);
    this.validity.write(bw);
    this.subject.write(bw);
    this.subjectPublicKeyInfo.write(bw);
    this.issuerUniqueID.write(bw);
    this.subjectUniqueID.write(bw);
    this.extensions.write(bw);
    return bw;
  }

  readBody(br) {
    this.version.read(br);
    this.serialNumber.read(br);
    this.signature.read(br);
    this.issuer.read(br);
    this.validity.read(br);
    this.subject.read(br);
    this.subjectPublicKeyInfo.read(br);
    this.issuerUniqueID.read(br);
    this.subjectUniqueID.read(br);
    this.extensions.read(br);
    return this;
  }

  clean() {
    return this.version.clean() && this.serialNumber.clean() && this.signature.clean() && this.issuer.clean() && this.validity.clean() && this.subject.clean() && this.subjectPublicKeyInfo.clean() && this.issuerUniqueID.clean() && this.subjectUniqueID.clean() && this.extensions.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'TBS CERTIFICATE');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'TBS CERTIFICATE');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      version: this.version,
      serialNumber: this.serialNumber,
      signature: this.signature,
      issuer: this.issuer,
      validity: this.validity,
      subject: this.subject,
      subjectPublicKeyInfo: this.subjectPublicKeyInfo,
      issuerUniqueID: this.issuerUniqueID,
      subjectUniqueID: this.subjectUniqueID,
      extensions: this.extensions
    };
  }

}
/**
 * AlgorithmIdentifier
 */
// AlgorithmIdentifier  ::=  SEQUENCE  {
//      algorithm               OBJECT IDENTIFIER,
//      parameters              ANY DEFINED BY algorithm OPTIONAL  }


class AlgorithmIdentifier extends asn1.Sequence {
  constructor(algorithm, parameters) {
    super();
    this.algorithm = new asn1.OID(algorithm);
    this.parameters = new asn1.Any(parameters).optional();
  }

  getBodySize() {
    var size = 0;
    size += this.algorithm.getSize();
    size += this.parameters.getSize();
    return size;
  }

  writeBody(bw) {
    this.algorithm.write(bw);
    this.parameters.write(bw);
    return bw;
  }

  readBody(br) {
    this.algorithm.read(br);
    this.parameters.read(br);
    return this;
  }

  clean() {
    return this.algorithm.clean() && this.parameters.clean();
  }

  format() {
    return {
      type: this.constructor.name,
      algorithm: this.algorithm,
      parameters: this.parameters
    };
  }

}
/**
 * RDNSequence
 */
// Name ::= CHOICE { -- only one possibility for now --
//      rdnSequence  RDNSequence }
//
// RDNSequence ::= SEQUENCE OF RelativeDistinguishedName


class RDNSequence extends asn1.Sequence {
  constructor() {
    super();
    this.names = [];
  }

  getBodySize() {
    var size = 0;

    for (var rdn of this.names) {
      size += rdn.getSize();
    }

    return size;
  }

  writeBody(bw) {
    for (var rdn of this.names) {
      rdn.write(bw);
    }

    return bw;
  }

  readBody(br) {
    while (br.left()) {
      var rdn = RDN.read(br);
      this.names.push(rdn);
    }

    return this;
  }

  clean() {
    return this.names.length === 0;
  }

  format() {
    return {
      type: this.constructor.name,
      names: this.names
    };
  }

}
/**
 * RDN
 */
// RelativeDistinguishedName ::=
//      SET SIZE (1..MAX) OF AttributeTypeAndValue
//


class RDN extends asn1.Set {
  constructor(id, value) {
    super();
    this.attributes = [new Attribute(id, value)];
  }

  getBodySize() {
    var size = 0;
    assert_1(this.attributes.length >= 1);

    for (var attr of this.attributes) {
      size += attr.getSize();
    }

    return size;
  }

  writeBody(bw) {
    assert_1(this.attributes.length >= 1);

    for (var attr of this.attributes) {
      attr.write(bw);
    }

    return bw;
  }

  readBody(br) {
    this.attributes[0].read(br);

    while (br.left()) {
      var attr = Attribute.read(br);
      this.attributes.push(attr);
    }

    return this;
  }

  clean() {
    return this.attributes.length === 1 && this.attributes[0].clean();
  }

  format() {
    return {
      type: this.constructor.name,
      attributes: this.attributes
    };
  }

}
/**
 * Attribute
 */
// AttributeTypeAndValue ::= SEQUENCE {
//      type     AttributeType,
//      value    AttributeValue }
//
// AttributeType ::= OBJECT IDENTIFIER
//
// AttributeValue ::= ANY -- DEFINED BY AttributeType


class Attribute extends asn1.Sequence {
  constructor(id, value) {
    super();
    this.id = new asn1.OID(id);
    this.value = new asn1.Any(value);
  }

  getBodySize() {
    var size = 0;
    size += this.id.getSize();
    size += this.value.getSize();
    return size;
  }

  writeBody(bw) {
    this.id.write(bw);
    this.value.write(bw);
    return bw;
  }

  readBody(br) {
    this.id.read(br);
    this.value.read(br);
    return this;
  }

  clean() {
    return this.id.clean() && this.value.clean();
  }

  format() {
    return {
      type: this.constructor.name,
      id: this.id,
      value: this.value
    };
  }

}
/**
 * Validity
 */
// Validity ::= SEQUENCE {
//      notBefore      Time,
//      notAfter       Time  }


class Validity extends asn1.Sequence {
  constructor() {
    super();
    this.notBefore = new Time$1();
    this.notAfter = new Time$1();
  }

  getBodySize() {
    var size = 0;
    size += this.notBefore.getSize();
    size += this.notAfter.getSize();
    return size;
  }

  writeBody(bw) {
    this.notBefore.write(bw);
    this.notAfter.write(bw);
    return bw;
  }

  readBody(br) {
    this.notBefore.read(br);
    this.notAfter.read(br);
    return this;
  }

  clean() {
    return this.notBefore.clean() && this.notAfter.clean();
  }

  format() {
    return {
      type: this.constructor.name,
      notBefore: this.notBefore,
      notAfter: this.notAfter
    };
  }

}
/**
 * Time
 */
// Time ::= CHOICE {
//      utcTime        UTCTime,
//      generalTime    GeneralizedTime }


class Time$1 extends asn1.Choice {
  constructor(options) {
    super(new asn1.UTCTime(), options);
  }

  choices() {
    return [types$3.UTCTIME, types$3.GENTIME];
  }

} // SubjectPublicKeyInfo  ::=  SEQUENCE  {
//      algorithm            AlgorithmIdentifier,
//      subjectPublicKey     BIT STRING  }


class SubjectPublicKeyInfo extends asn1.Sequence {
  constructor(algorithm, parameters, publicKey) {
    super();
    this.algorithm = new AlgorithmIdentifier(algorithm, parameters);
    this.publicKey = new asn1.BitString(publicKey);
  }

  get isRaw() {
    return true;
  }

  getBodySize() {
    var size = 0;
    size += this.algorithm.getSize();
    size += this.publicKey.getSize();
    return size;
  }

  writeBody(bw) {
    this.algorithm.write(bw);
    this.publicKey.write(bw);
    return bw;
  }

  readBody(br) {
    this.algorithm.read(br);
    this.publicKey.read(br);
    return this;
  }

  clean() {
    return this.algorithm.clean() && this.publicKey.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'PUBLIC KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'PUBLIC KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      algorithm: this.algorithm,
      publicKey: this.publicKey
    };
  }

}
/**
 * Extensions
 */


class Extensions extends asn1.Sequence {
  constructor() {
    super();
    this.extensions = [];
  }

  getBodySize() {
    var size = 0;

    for (var ext of this.extensions) {
      size += ext.getSize();
    }

    return size;
  }

  writeBody(bw) {
    for (var ext of this.extensions) {
      ext.write(bw);
    }

    return bw;
  }

  readBody(br) {
    for (var ext of this.extensions) {
      ext.read(br);
    }

    return this;
  }

  clean() {
    return this.extensions.length === 0;
  }

  format() {
    return {
      type: this.constructor.name,
      extensions: this.extensions
    };
  }

}
/**
 * Extension
 */
// Extension  ::=  SEQUENCE  {
//      extnID      OBJECT IDENTIFIER,
//      critical    BOOLEAN DEFAULT FALSE,
//      extnValue   OCTET STRING }


class Extension extends asn1.Sequence {
  constructor() {
    super();
    this.extnID = new asn1.OID();
    this.critical = new asn1.Bool().optional();
    this.extnValue = new asn1.OctString();
  }

  getBodySize() {
    var size = 0;
    size += this.extnID.getSize();
    size += this.critical.getSize();
    size += this.extnValue.getSize();
    return size;
  }

  writeBody(bw) {
    this.extnID.write(bw);
    this.critical.write(bw);
    this.extnValue.write(bw);
    return bw;
  }

  readBody(br) {
    this.extnID.read(br);
    this.critical.read(br);
    this.extnValue.read(br);
    return this;
  }

  clean() {
    return this.extnID.clean() && this.critical.clean() && this.extnValue.clean();
  }

  format() {
    return {
      type: this.constructor.name,
      extnID: this.extnID,
      critical: this.critical,
      extnValue: this.extnValue
    };
  }

}
/**
 * DigestInfo
 */
// See: https://www.ietf.org/rfc/rfc3447.txt
// Section 9.2
//
// DigestInfo ::= SEQUENCE {
//   digestAlgorithm AlgorithmIdentifier,
//   digest OCTET STRING
// }


class DigestInfo extends asn1.Sequence {
  constructor(algorithm, digest) {
    super();
    this.algorithm = new AlgorithmIdentifier(algorithm);
    this.algorithm.parameters.optional(false);
    this.digest = new asn1.OctString(digest);
  }

  getBodySize() {
    var size = 0;
    size += this.algorithm.getSize();
    size += this.digest.getSize();
    return size;
  }

  writeBody(bw) {
    this.algorithm.write(bw);
    this.digest.write(bw);
    return bw;
  }

  readBody(br) {
    this.algorithm.read(br);
    this.digest.read(br);
    return this;
  }

  clean() {
    return this.algorithm.clean() && this.digest.clean();
  }

  format() {
    return {
      type: this.constructor.name,
      algorithm: this.algorithm,
      digest: this.digest
    };
  }

}
/*
 * Expose
 */


var Certificate_1 = Certificate;
var TBSCertificate_1 = TBSCertificate;
var AlgorithmIdentifier_1 = AlgorithmIdentifier;
var RDNSequence_1 = RDNSequence;
var RDN_1 = RDN;
var Attribute_1 = Attribute;
var Validity_1 = Validity;
var Time_1$1 = Time$1;
var SubjectPublicKeyInfo_1 = SubjectPublicKeyInfo;
var Extensions_1 = Extensions;
var Extension_1 = Extension;
var DigestInfo_1 = DigestInfo;
var x509 = {
  Certificate: Certificate_1,
  TBSCertificate: TBSCertificate_1,
  AlgorithmIdentifier: AlgorithmIdentifier_1,
  RDNSequence: RDNSequence_1,
  RDN: RDN_1,
  Attribute: Attribute_1,
  Validity: Validity_1,
  Time: Time_1$1,
  SubjectPublicKeyInfo: SubjectPublicKeyInfo_1,
  Extensions: Extensions_1,
  Extension: Extension_1,
  DigestInfo: DigestInfo_1
};

/**
 * PublicKeyInfo
 */
// PublicKeyInfo ::= SEQUENCE {
//   algorithm       AlgorithmIdentifier,
//   PublicKey       BIT STRING
// }


class PublicKeyInfo extends asn1.Sequence {
  constructor(algorithm, identifier, publicKey) {
    super();
    this.algorithm = new x509.AlgorithmIdentifier(algorithm, identifier);
    this.publicKey = new asn1.BitString(publicKey);
  }

  getBodySize() {
    var size = 0;
    size += this.algorithm.getSize();
    size += this.publicKey.getSize();
    return size;
  }

  writeBody(bw) {
    this.algorithm.write(bw);
    this.publicKey.write(bw);
    return bw;
  }

  readBody(br) {
    this.algorithm.read(br);
    this.publicKey.read(br);
    return this;
  }

  clean() {
    return this.algorithm.clean() && this.publicKey.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'PUBLIC KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'PUBLIC KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      algorithm: this.algorithm,
      publicKey: this.publicKey
    };
  }

}
/**
 * PrivateKeyInfo
 */
// PrivateKeyInfo ::= SEQUENCE {
//   version         Version,
//   algorithm       AlgorithmIdentifier,
//   PrivateKey      OCTET STRING
// }
//
// PrivateKeyInfo ::= SEQUENCE {
//    version Version,
//    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
//    privateKey PrivateKey,
//    attributes [0] Attributes OPTIONAL
// }
//
// Version ::= INTEGER {v1(0)} (v1,...)
//
// PrivateKey ::= OCTET STRING


class PrivateKeyInfo extends asn1.Sequence {
  constructor(version, algorithm, parameters, privateKey) {
    super();
    this.version = new asn1.Unsigned(version);
    this.algorithm = new x509.AlgorithmIdentifier(algorithm, parameters);
    this.privateKey = new asn1.OctString(privateKey);
  }

  get isRaw() {
    return true;
  }

  getBodySize() {
    var size = 0;
    size += this.version.getSize();
    size += this.algorithm.getSize();
    size += this.privateKey.getSize();
    return size;
  }

  writeBody(bw) {
    this.version.write(bw);
    this.algorithm.write(bw);
    this.privateKey.write(bw);
    return bw;
  }

  readBody(br) {
    this.version.read(br);
    this.algorithm.read(br);
    this.privateKey.read(br);
    return this;
  }

  clean() {
    return this.version.clean() && this.algorithm.clean() && this.privateKey.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'PRIVATE KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'PRIVATE KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      version: this.version,
      algorithm: this.algorithm,
      privateKey: this.privateKey
    };
  }

}
/**
 * EncryptedPrivateKeyInfo
 */
// EncryptedPrivateKeyInfo ::= SEQUENCE {
//   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
//   encryptedData        EncryptedData
// }
//
// EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
//
// EncryptedData ::= OCTET STRING


class EncryptedPrivateKeyInfo extends asn1.Sequence {
  constructor(algorithm, identifier, data) {
    super();
    this.algorithm = new x509.AlgorithmIdentifier(algorithm, identifier);
    this.data = new asn1.OctString(data);
  }

  getBodySize() {
    var size = 0;
    size += this.algorithm.getSize();
    size += this.data.getSize();
    return size;
  }

  writeBody(bw) {
    this.algorithm.write(bw);
    this.data.write(bw);
    return bw;
  }

  readBody(br) {
    this.algorithm.read(br);
    this.data.read(br);
    return this;
  }

  clean() {
    return this.algorithm.clean() && this.data.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'ENCRYPTED PRIVATE KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'ENCRYPTED PRIVATE KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      algorithm: this.algorithm,
      data: this.data
    };
  }

}
/*
 * Expose
 */


var PublicKeyInfo_1 = PublicKeyInfo;
var PrivateKeyInfo_1 = PrivateKeyInfo;
var EncryptedPrivateKeyInfo_1 = EncryptedPrivateKeyInfo;
var pkcs8 = {
  PublicKeyInfo: PublicKeyInfo_1,
  PrivateKeyInfo: PrivateKeyInfo_1,
  EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo_1
};

/*
 * Constants
 */


var SLAB = Buffer.alloc(1);
/*
 * EDDSA
 */

class EDDSA {
  constructor(id, xid, hash, pre) {
    assert_1(typeof id === 'string');
    assert_1(typeof xid === 'string');
    assert_1(hash);
    this.id = id;
    this.type = 'edwards';
    this.xid = xid;
    this.hash = hash;
    this._pre = pre || null;
    this._curve = null;
    this._x = null;
    this.native = 0;
  }

  get curve() {
    if (!this._curve) {
      this._curve = new curves[this.id](this._pre);

      this._curve.precompute(randomBrowser);

      this._pre = null;
    }

    return this._curve;
  }

  get x() {
    if (!this._x) {
      this._x = new curves[this.xid]();

      this._x.precompute(randomBrowser);
    }

    return this._x;
  }

  get size() {
    return this.curve.fieldSize;
  }

  get bits() {
    return this.curve.fieldBits;
  }

  hashInt(ph, ctx) {
    assert_1(ph == null || typeof ph === 'boolean');
    assert_1(ctx == null || Buffer.isBuffer(ctx));
    assert_1(!ctx || ctx.length <= 255); // eslint-disable-next-line

    var h = new this.hash();
    h.init();

    if (this.curve.context || ph != null) {
      // Prefix.
      h.update(this.curve.prefix); // Pre-hash Flag.

      SLAB[0] = ph & 0xff;
      h.update(SLAB); // Context.

      if (ctx) {
        SLAB[0] = ctx.length;
        h.update(SLAB);
        h.update(ctx);
      } else {
        SLAB[0] = 0x00;
        h.update(SLAB);
      }
    } else {
      assert_1(ctx == null, 'Must pass pre-hash flag with context.');
    } // Integers.


    for (var _len = arguments.length, items = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      items[_key - 2] = arguments[_key];
    }

    for (var item of items) {
      h.update(item);
    }

    var hash = h.final(this.curve.fieldSize * 2);
    var num = bnBrowser.decode(hash, this.curve.endian);
    return num.imod(this.curve.n);
  }

  privateKeyGenerate() {
    return randomBrowser.randomBytes(this.curve.fieldSize);
  }

  scalarGenerate() {
    var scalar = randomBrowser.randomBytes(this.curve.scalarSize);
    return this.curve.clamp(scalar);
  }

  privateKeyExpand(secret) {
    assert_1(Buffer.isBuffer(secret));
    assert_1(secret.length === this.curve.fieldSize);
    var hash = this.hash.digest(secret, this.curve.fieldSize * 2);
    return this.curve.splitHash(hash);
  }

  privateKeyConvert(secret) {
    var [key] = this.privateKeyExpand(secret);
    return key;
  }

  privateKeyVerify(secret) {
    assert_1(Buffer.isBuffer(secret));
    return secret.length === this.curve.fieldSize;
  }

  scalarVerify(scalar) {
    return this.curve.isClamped(scalar);
  }

  scalarClamp(scalar) {
    assert_1(Buffer.isBuffer(scalar));
    assert_1(scalar.length === this.curve.scalarSize);

    if (!this.scalarVerify(scalar)) {
      scalar = Buffer.from(scalar);
      scalar = this.curve.clamp(scalar);
    }

    return scalar;
  }

  privateKeyExport(secret) {
    if (!this.privateKeyVerify(secret)) throw new Error('Invalid private key.');
    return new asn1.OctString(secret).encode();
  }

  privateKeyImport(raw) {
    var secret = asn1.OctString.decode(raw);
    if (!this.privateKeyVerify(secret.value)) throw new Error('Invalid private key.');
    return secret.value;
  }

  privateKeyExportPKCS8(secret) {
    // https://tools.ietf.org/html/draft-ietf-curdle-pkix-eddsa-00
    // https://tools.ietf.org/html/rfc8410
    // https://tools.ietf.org/html/rfc5958
    // https://tools.ietf.org/html/rfc7468
    return new pkcs8.PrivateKeyInfo(0, asn1.objects.curves[this.id], new asn1.Null(), this.privateKeyExport(secret)).encode();
  }

  privateKeyImportPKCS8(raw) {
    var pki = pkcs8.PrivateKeyInfo.decode(raw);
    var version = pki.version.toNumber();
    var {
      algorithm,
      parameters
    } = pki.algorithm;
    assert_1(version === 0 || version === 1);
    assert_1(algorithm.toString() === asn1.objects.curves[this.id]);
    assert_1(parameters.node.type === asn1.types.NULL);
    return this.privateKeyImport(pki.privateKey.value);
  }

  privateKeyExportJWK(secret) {
    return eckey.privateKeyExportJWK(this, secret);
  }

  privateKeyImportJWK(json) {
    return eckey.privateKeyImportJWK(this, json);
  }

  scalarTweakAdd(scalar, tweak) {
    var a = this.curve.decodeScalar(scalar);
    var t = this.curve.decodeScalar(tweak);
    var s = a.iadd(t).imod(this.curve.n);
    if (s.isZero()) throw new Error('Invalid scalar.');
    return this.curve.encodeScalar(s);
  }

  scalarTweakMul(scalar, tweak) {
    var a = this.curve.decodeScalar(scalar);
    var t = this.curve.decodeScalar(tweak);
    var s = a.imul(t).imod(this.curve.n);
    if (s.isZero()) throw new Error('Invalid scalar.');
    return this.curve.encodeScalar(s);
  }

  scalarReduce(scalar) {
    assert_1(Buffer.isBuffer(scalar));
    if (scalar.length > this.curve.scalarSize) scalar = scalar.slice(0, this.curve.scalarSize);
    var s = bnBrowser.decode(scalar, this.curve.endian).imod(this.curve.n);
    return this.curve.encodeScalar(s);
  }

  scalarNegate(scalar) {
    var a = this.curve.decodeScalar(scalar).imod(this.curve.n);
    var s = a.ineg().imod(this.curve.n);
    return this.curve.encodeScalar(s);
  }

  scalarInvert(scalar) {
    var a = this.curve.decodeScalar(scalar).imod(this.curve.n);
    if (a.isZero()) throw new Error('Invalid scalar.');
    var s = a.invert(this.curve.n);
    if (s.isZero()) throw new Error('Invalid scalar.');
    return this.curve.encodeScalar(s);
  }

  publicKeyCreate(secret) {
    var key = this.privateKeyConvert(secret);
    return this.publicKeyFromScalar(key);
  }

  publicKeyFromScalar(scalar) {
    var a = this.curve.decodeScalar(scalar).imod(this.curve.n);
    var A = this.curve.g.mulBlind(a);
    return A.encode();
  }

  publicKeyConvert(key) {
    var point = this.curve.decodePoint(key);
    return this.x.pointFromEdwards(point).encode();
  }

  publicKeyDeconvert(key) {
    var sign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var point = this.x.decodePoint(key);
    return this.curve.pointFromMont(point, sign).encode();
  }

  publicKeyVerify(key) {
    assert_1(Buffer.isBuffer(key));

    try {
      this.curve.decodePoint(key);
    } catch (e) {
      return false;
    }

    return true;
  }

  publicKeyExport(key) {
    if (!this.publicKeyVerify(key)) throw new Error('Invalid public key.');
    return Buffer.from(key);
  }

  publicKeyImport(raw) {
    if (!this.publicKeyVerify(raw)) throw new Error('Invalid public key.');
    return Buffer.from(raw);
  }

  publicKeyExportSPKI(key) {
    // https://tools.ietf.org/html/rfc8410
    return new x509.SubjectPublicKeyInfo(asn1.objects.curves[this.id], new asn1.Null(), this.publicKeyExport(key)).encode();
  }

  publicKeyImportSPKI(raw) {
    var spki = x509.SubjectPublicKeyInfo.decode(raw);
    var {
      algorithm,
      parameters
    } = spki.algorithm;
    assert_1(algorithm.toString() === asn1.objects.curves[this.id]);
    assert_1(parameters.node.type === asn1.types.NULL);
    return this.publicKeyImport(spki.publicKey.rightAlign());
  }

  publicKeyExportJWK(key) {
    return eckey.publicKeyExportJWK(this, key);
  }

  publicKeyImportJWK(json) {
    return eckey.publicKeyImportJWK(this, json, false);
  }

  publicKeyTweakAdd(key, tweak) {
    var t = this.curve.decodeScalar(tweak).imod(this.curve.n);
    var A = this.curve.decodePoint(key);
    var T = this.curve.g.mul(t);
    var point = T.add(A);
    return point.encode();
  }

  publicKeyTweakMul(key, tweak) {
    var t = this.curve.decodeScalar(tweak).imod(this.curve.n);
    var A = this.curve.decodePoint(key);
    var point = A.mul(t);
    return point.encode();
  }

  publicKeyAdd(key1, key2) {
    var A1 = this.curve.decodePoint(key1);
    var A2 = this.curve.decodePoint(key2);
    var point = A1.add(A2);
    return point.encode();
  }

  publicKeyCombine(keys) {
    assert_1(Array.isArray(keys));
    var acc = this.curve.point();

    for (var key of keys) {
      var point = this.curve.decodePoint(key);
      acc = acc.add(point);
    }

    return acc.encode();
  }

  publicKeyNegate(key) {
    var A = this.curve.decodePoint(key);
    var point = A.neg();
    return point.encode();
  }

  sign(msg, secret, ph, ctx) {
    var [key, prefix] = this.privateKeyExpand(secret);
    return this.signWithScalar(msg, key, prefix, ph, ctx);
  }

  signWithScalar(msg, scalar, prefix, ph, ctx) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(prefix));
    assert_1(prefix.length === this.curve.fieldSize);
    var N = this.curve.n;
    var G = this.curve.g;
    var k = this.hashInt(ph, ctx, prefix, msg);
    var Rraw = G.mulBlind(k).encode();
    var a = this.curve.decodeScalar(scalar);
    var Araw = G.mulBlind(a).encode();
    var e = this.hashInt(ph, ctx, Rraw, Araw, msg); // Scalar blinding factor.

    var [blind, unblind] = this.curve.getBlinding(); // Blind.

    a.imul(blind).imod(N);
    k.imul(blind).imod(N); // S := (k + e * a) mod n

    var S = k.iadd(e.imul(a)).imod(N); // Unblind.

    S.imul(unblind).imod(N); // Note: S is technically a scalar, but
    // decode as field due to the useless byte.

    return Buffer.concat([Rraw, this.curve.encodeField(S)]);
  }

  signTweakAdd(msg, secret, tweak, ph, ctx) {
    var [key_, prefix_] = this.privateKeyExpand(secret);
    var key = this.scalarTweakAdd(key_, tweak);
    var expanded = this.hash.multi(prefix_, tweak, null, this.curve.fieldSize * 2);
    var prefix = expanded.slice(0, this.curve.fieldSize);
    return this.signWithScalar(msg, key, prefix, ph, ctx);
  }

  signTweakMul(msg, secret, tweak, ph, ctx) {
    var [key_, prefix_] = this.privateKeyExpand(secret);
    var key = this.scalarTweakMul(key_, tweak);
    var expanded = this.hash.multi(prefix_, tweak, null, this.curve.fieldSize * 2);
    var prefix = expanded.slice(0, this.curve.fieldSize);
    return this.signWithScalar(msg, key, prefix, ph, ctx);
  }

  verify(msg, sig, key, ph, ctx) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(Buffer.isBuffer(key));
    assert_1(ph == null || typeof ph === 'boolean');
    assert_1(ctx == null || Buffer.isBuffer(ctx));
    assert_1(!ctx || ctx.length <= 255);
    if (!this.curve.context && ctx != null) assert_1(ph != null, 'Must pass pre-hash flag with context.');
    if (sig.length !== this.curve.fieldSize * 2) return false;
    if (key.length !== this.curve.fieldSize) return false;

    try {
      return this._verify(msg, sig, key, ph, ctx);
    } catch (e) {
      return false;
    }
  }

  _verify(msg, sig, key, ph, ctx) {
    var N = this.curve.n;
    var G = this.curve.g;
    var Rraw = sig.slice(0, this.curve.fieldSize);
    var Sraw = sig.slice(this.curve.fieldSize);
    var R = this.curve.decodePoint(Rraw);
    var S = this.curve.decodeField(Sraw);
    var A = this.curve.decodePoint(key); // Note: S is technically a scalar, but
    // decode as field due to the useless byte.

    if (S.cmp(N) >= 0) return false; // e = H(R, A, m).

    var e = this.hashInt(ph, ctx, Rraw, key, msg); // The spec says to check:
    //   G*S == R + A*e
    // But we can use shamir's trick to check:
    //   R == G*S - A*e

    var Rp = G.mulAdd(S, A, e.ineg().imod(N)); // We don't allow points at infinity.
    // This is technically enforced by the
    // decodePoint call above, but put it
    // here to be more explicit.

    if (Rp.isInfinity()) return false;
    return Rp.eq(R);
  }

  verifyBatch(batch, ph, ctx) {
    assert_1(Array.isArray(batch));
    assert_1(ph == null || typeof ph === 'boolean');
    assert_1(ctx == null || Buffer.isBuffer(ctx));
    assert_1(!ctx || ctx.length <= 255);
    if (!this.curve.context && ctx != null) assert_1(ph != null, 'Must pass pre-hash flag with context.');

    for (var item of batch) {
      assert_1(Array.isArray(item) && item.length === 3);
      var [msg, sig, key] = item;
      assert_1(Buffer.isBuffer(msg));
      assert_1(Buffer.isBuffer(sig));
      assert_1(Buffer.isBuffer(key));
      if (sig.length !== this.curve.fieldSize * 2) return false;
      if (key.length !== this.curve.fieldSize) return false;
    }

    try {
      return this._verifyBatch(batch, ph, ctx);
    } catch (e) {
      return false;
    }
  }

  _verifyBatch(batch, ph, ctx) {
    var N = this.curve.n;
    var G = this.curve.g;
    var points = [];
    var coeffs = [];
    var sum = null;

    for (var [msg, sig, key] of batch) {
      var Rraw = sig.slice(0, this.curve.fieldSize);
      var Sraw = sig.slice(this.curve.fieldSize);
      var R = this.curve.decodePoint(Rraw);
      var S = this.curve.decodeField(Sraw);
      var A = this.curve.decodePoint(key); // Note: S is technically a scalar, but
      // decode as field due to the useless byte.

      if (S.cmp(N) >= 0) return false;
      var e = this.hashInt(ph, ctx, Rraw, key, msg);

      if (sum === null) {
        sum = S;
        points.push(R, A);
        coeffs.push(new bnBrowser(1), e);
        continue;
      }

      var a = bnBrowser.random(randomBrowser, 1, N);
      var ea = e.imul(a).imod(N);
      sum.iadd(S.imul(a)).imod(N);
      points.push(R, A);
      coeffs.push(a, ea);
    }

    if (sum === null) return true;
    var lhs = G.mul(sum);
    var rhs = this.curve.mulAll(points, coeffs);
    return lhs.eq(rhs);
  }

  derive(pub, secret) {
    var priv = this.privateKeyConvert(secret);
    return this.deriveWithScalar(pub, priv);
  }

  deriveWithScalar(pub, scalar) {
    var s = this.curve.decodeScalar(scalar).imod(this.curve.n);
    var A = this.curve.decodePoint(pub);
    var point = A.mulBlind(s, randomBrowser);
    return point.encode();
  }

  exchange(pub, secret) {
    var priv = this.privateKeyConvert(secret);
    return this.exchangeWithScalar(pub, priv);
  }

  exchangeWithScalar(pub, scalar) {
    var s = this.x.decodeScalar(scalar);
    var A = this.x.decodePoint(pub);
    var point = A.mul(s);
    return point.encode();
  }

}
/*
 * Expose
 */


var eddsa = EDDSA;

var naf = {
  wnd: 8,
  points: [["67ae9c4a22928f491ff4ae743edac83a6343981981624886ac62485fd3f8e25c", "1267b1d177ee69aba126a18e60269ef79f16ec176724030402c3684878f5b4d4"], ["49fda73eade3587bfcef7cf7d12da5de5c2819f93e1be1a591409cc0322ef233", "5f4825b298feae6fe02c6e148992466631282eca89430b5d10d21f83d676c8ed"], ["14568685fcf4bd4ee9e3ee194b1d810783e809f3bbf1ce955855981af50e4107", "31c563e32b47d52f87ce6468dd36ad41f0882b46f7abf23d12c4c4b59f4062b8"], ["357cc970c80071651bf336e06f9422b886d80e5c2e4e0294d3e023065185715c", "7f3d23c2c2dd0df4b2befce956f2d2fd1f789013236e4430c74e44845522f1c0"], ["14e528b1154be417b6cf078dd6712438d381a5b2c593d552ff2fd2c1207cf3cb", "2d9082313f21ab975a6f7ce340ff0fce1258591c3c9c58d4308f2dc36a033713"], ["107427e0d5f366ccdb33adf0282d304f8843e3e88d22b7b83780e073b7c05fed", "12dbb00ded538b7478466022d2da89b83740cfb2289a272387efe1aeea401f80"], ["4f162deaec2ec435dc5ac6f95d20419ed9631374770189cb90617f3e66a18dc1", "12cbfb2d04ff22f55162f70164d29331ace5af18a19a9aa1946d4cc4ad2e5cdf"], ["7dc52d5a7db816e9b850741ea2fd72918d94985b85a20b4dc5597853a876df6a", "6f6d2bca60003ef9f24ac245cc919fb717b188723b34f901cd6cfe9bec97be04"], ["1d81f74a5ba45c7022e8c140d763b9c1b0e281a5304696e74f791a3a04a94472", "3f185a93d95a4347227c5bb6ddd65cf42e1830823f435f3083fe6102691d55b9"], ["6f0ac78e5eb90e87958588f9d47541edf252cb1dde3d073cc45e3e7ef9365716", "6628d116b7975ae5f323e5ddf4f8cc35ae06d5c5c7d8a56effc66051336d289e"], ["2188ac423c67db5625915e05222a391bcaf91f05d9b7cc2cab5798b2d2e14d95", "23240c559c57b79a4df69a23fc46e50504277b1fa49369ab663d79782b33c0ee"], ["794241471ed9ceb009384b370cb8790fca98552ecb822dc06b19362c36353455", "71e918c03cdfca7207772e8d18ee8f9d92d79a0a83f378912362bc68d311dcd0"], ["163bc180c22dfc5da23c5c052107bba93a88b4360aa1d4e729611d8f5a7f8079", "631107a6ba83f7458194b9766a0a54f638ca20daf800384dbae1498677501939"], ["39a32a30f3eb1da0eb7e3903b8ace3da3890b24b61a3a9e79db663b5db0f7a5d", "4d4c54675dc1f1c9a1af9ca0010045dc803c16af345823136dd203715d67c491"], ["38085391a0e2831f59c33fcce7591515784d359925f11ff958e0e4658efac0e9", "42918001a829f49b5634e34ab7fac21b30e24660669ed91955cc31944a19e62a"], ["5e3573b049d6135ffbbbbd9a480617434f2455b4a591f719e91153eeb75a32a1", "54bc665420c789da1105d53983c1a0fc33bcc2690cd9b37d6566e21a85892871"], ["7ed068b25b82c05fdc0e46bd80a357f3acd2f5c3b9330bc8d474e5b28270f6eb", "01da83a187da8ccca704d46557a462551d70df7f943a681c3b97b1db6a21b7d3"], ["05ca3370e7516f6686111b72650aab4c5484407f14b515ade03951c6a14a0aa3", "6f407fc537b95277966e7f0f5e64b86904bf7baee091cee6011a3611834c6903"], ["624cb312b698bbd6dbca79b8d2b53cb5d8b3ab33c19306e87c18211f095ab9c3", "5b3336b2751e97c793731ac9b9a2243b6229f6d0bbea6b619395d0e5200bd8a3"], ["1ddf6ece608fe2901b34b7e4f47cfcb75e947e293c704d8121b11a31a051b5f9", "5e2dc58e9a48a749ce5296d229cfb34f96a147a8246d2e9844d52b52112ea94e"], ["396b384f3d61cfc060308fbb1c941ebc9418e2d9abd81316e08d625f48c0e101", "7223e5f7b66d1ca24962bac273a7aa6618cc60cb8a64a8837e0261107e7ad644"], ["53cc3dca3410277fb38d75e4ac0dde8e77a99c817170dbc9696cffe7890fbd50", "2592a3aafce64d7c69f4de468d5d5aa19845f5ca08f64a0a40e37d23ececbbe1"], ["34705fe600f5aed77b29d3eacdffcd45d886904156d43dc550bb7fc889cc1368", "299153c141a8950ffbcc8e9352993e642fa39a476200dd4acf42e158dbe3b01e"], ["5969255bd089181b991fce96b1792ba330a14f8a0b061f8118c9c336b8504618", "680a805fa0ae93c2a12b193517fb1147d355547e4ab18a9d6ca21575bbb4d7a4"], ["27d1d57fa8808d3d452df14bda4248b37902752163b1fd499a92456c59918ecb", "0a42f1c0f4c5d7de9e82904f0b4ff63988d31fedb8aad9d8ae009c7a1dff09c3"], ["0811d14bfdfdcf2144edd9cf55bce584a9ba17aec3eac8aaa82987ad703d9b8a", "42bea70d46f3ee0df0ec77d24c5495ea56ada2e0415920470c4746b68306376e"], ["4de090761b863cb0f0650297f154a8e66d00c5119c38e5dd05303d905d527a4a", "5eef0efd105361ce198a30e09e7e7edffbe3d70189e63ca68cf6057b9772baa8"], ["1d45517858ce45556aaee056ebab7e0ef3dc9ae3740aed570f3e76bfb4fc4817", "0b5a9d8fe8b7ccb04c0a5ef77798a3ec6e1bc1138604eb05e83844f0d4c5c699"], ["4285edbe9117f30aae1ef5ee419eb1d472106c6b3d7f3ce3701e39324b0eeafc", "503aa6104a682bcf2c0a60c84f4c22b50b0caa0fed8db87dedc7173eae04bdbd"], ["3ef830cbeff9b79039b1b6bd9bb52bbcfa56d008d91b9703ea1c80351f8687d6", "62349ff5d8dbd216a874769eec152ef9734bea9240eed623992c7553dc8ee4c8"], ["649a996e6d4d3b60ccb526939ed8929134107e03e2fd4648eaa2fa9830822c1a", "1648311b942fe95d492a1ace5e5235c1aea860d036d2475cc8964cd1acedee9c"], ["3a95596d97770d050d1ecc075d58a74f5fe6b4b8222740534ba22c8be73f9d56", "15a80cdcc03317a830fa4a7461de6bac136993e0a797f83b405c161a34c98fd7"], ["2d265d3fe1c88903ca93685209418deec5af886bf0d9fdb3f499d831cbb76ce1", "08376fb0663d3aa220948612b519af4a6a1f956622b15a305fb2e60a84210b3c"], ["642cb15498d8c6b25803f3e56b98e2ea185ac808cbeab5eb0a610ed5babb9385", "21b5ca5020a9e5a2334c0bee15193ea16c909963ffa6e1d93df4b239abeaeb3e"], ["38e576301ff6cdd0822a19c6d610d445d3967e2bada903abb6220f68c6e79bef", "458fe689e31a24952d2817dda4349109c1b26ef31699fa36c4f8389eeb60eac0"], ["372bec78d75011a0ef2233cd08790a7f15c1ec1e3a78cac8d6652678641780db", "32e9e47cf2f48612ed3e2c2006ea0c0c8476d3562aa88cefb67ec97abdb538e8"], ["1aa3756aabcc3eb65afee34e0a15dd67bfb9fb199eb131f4cc6a3ca9ec4d1c77", "42333e27831add6eb49af80e17347c63c26dd684758096ee3dbdbe03a49159ae"], ["38db16447d79d3590c4a36e20286beadfbae91a4eed2e5e7dd4f975ac0537dc5", "1c48ccaed60ec12ce862ea71165bba7df1739845df2a857f4ef0a0f714f96daa"], ["176b78984cddfddef90bae619c6a98e951d9a7ac7d6af218ae7e76b273212fb7", "7b5b93eda77443f366e2a127abe12212aad8536767ec1c5861143f777db85852"], ["042d154bf7b4a7bd73897ae528c6bc552ea58d74f8109e8e4052d3e9d38bb0f6", "42d1831323e279f9f7ee9e3470ba20ca7edc3245eca5d8ffa182de120a71fc90"], ["1f8d28dd4f286a8d0687b626b01204434bf5874a9550d6e375116490c154e108", "1ce82e2360367e06f41757fd45239f9bc2c61609139446b09b55a9c43da98bb8"], ["613eb914c015076e9ae8356bf508c289e50b1c87d9e2546f6e406362e248e5e5", "3edbaafcd8c41ef4aa18b254137d201a2ef0ca4ca28807156bc949e920b97353"], ["27bf43826bf0310b4b3e3a405eff790a1d77a8d48b04891246cff8e193cb03a9", "16a24d749cc1d234fbe8af9cfd782c3aaa5869d6db0afa7b4d4c67037514f2ea"], ["769a6a59746d7bead417bdd9c3b5f5ae1dbd924083ffd9e88df7714f57a675c2", "22dc1267cfb2b41c590abb7dc3df45619af688d0421f2bdfb50748335ec5da25"], ["795734ee4fcc24194219d25d41a2889cdb942f765848e9df63bff0b158c7224d", "756420ab5c71127d39d2e79907634a177af0e483e08484ea4d7b76f7100669b5"], ["644d12fc5e7fcac5aeb5911d8240971a99fc59fdd2903f46958e6896aefbcf46", "173450789fcd40172e8124fea56f7aedad2ee13fa8fc5209cc8cb572175216dc"], ["5deca767ef17b9e8d4f351f5c8ad1fcc50e97a2ed687516bf5210679fd6c1110", "4ddf2207da12f700708089989da016f3307ce5721c9e27c952599d67898aa396"], ["296dcb24cb3185d037a94bef93c97cacd09fc7050ba8472da59d4a689d9d2848", "0b17dc85a4acf73833fab728f15abccac97cd09e57975bd996d3e1dd8b060f7b"], ["408a3f1af2e77dfe94f8e225b40dfc146abb1002db7bcf15fde61c1a6cf1b93f", "4f01ec38854c15a879e7c7924f048e2ec951dcdf04a614088b68fbcc0954e1c8"], ["07d2d9234970cdc9483e0a7c5ec52c49077c440e0a993a1e624f90b8fafbbf07", "6ac2190030c210ae3e07b9239f6ee7affba263866ee7831a564c511f703f2295"], ["2982d553002082320aa899b9b6887e40dedf11868fa931689795d93d58452873", "215e16ca447978624cad0ea6bf45aada4eca914425ee275db2a26e980dc349b6"], ["1d8649515cb49e136d2895b6276569e5c711fe1a343eeb5a3daaa8d0e7b42d1a", "5b21e2f2978f343a3e9ec3316cdc111af3b55f34afa5fc3fcbf6c26c1bb7fb6c"], ["5460df4d607147939cdbc04dbdcbdffd37c5eafdd501b50a67213a23ee724a97", "69dfc7004263ccb52487d34ab134b80bb3030273999739cb9cdc16d71b9abcd8"], ["24623476f0af9f42ca15a0697ad23abeaf5ed9dc4d2b44f7e8175486598125bb", "6aebe4a1a22d9e31194dcde6d33ff3af77dda15c22b2ecba9329849b8c042687"], ["64e507a02bfd8a8413117bac253b17f94b2911681ebc07c92da0de6a651dd538", "513ac992d72b463da110afb612fbae36590248a0507d845ee95fab2d1caa03a4"], ["47f3bd11324f6bee230a22a5bb06a3ccddbc0473b810689efaeef894a654bf0e", "7e05db9b3ff886bf32608dfc8d14eaa91e2e2ef230e7c75618060e4285c492be"], ["4a6d22703a7045d02d656015ea2d168385d42963a739a895e4fd87b3e55c5e0f", "4c58d7a8c6ded0451798e51f16ffa5b637a87aa5defb119ba868d8cccf61776d"], ["3e22af70a548097244d7798964598172a90391f84c59b04cea7af283ba368eb5", "689d8b7cda23b8dea197c5119fbbbd81dd4b59a36cc283dbe292b5b6519a2968"], ["61a6ba2ca42d9d557b3a2ff0867c1b8bb8fc40192d31ff637431a302bc065a10", "63d805f5a79f845ea2915a25cf0a8cab2e0255212a1bd3c8852b25579b63721d"], ["03d963eeae48556e88305f91c478efcfd2168c346b9ba185884ec8621e8cb414", "74b75cc839a944ad8c639719d20fd9d48d2099ef24c8633eabec7a9ec1e7e183"], ["0f04da69e0202f7b44c58b103c88de09a0599951fedb17e7f2152d6b93a58ae9", "1fbc1c9cd03c4cfd46e8e90019debf86e8036587eade038346f91070c800b8c4"], ["797899e488353ed0c6666aff11913b33be0190833766e809b2a68cbc671a9cfe", "5dd70a33ff94a84b3fe660f7070e6179e86b5c846689265bf985ce424b8909cc"], ["735b64bb872606510e4e7d57833eb7ffdc4aa0dbaa242439806be68379f77cdd", "384aaaee3ca7ba2436fcb65910859ca5ec30c10af11df7d777d287bc1a2bce2c"], ["6f6ea532a62cf4766f55a0a72a86b55e73fe9d3328ee94bfc271e122f99dc1ac", "61d8203ef6da5d0b584541c02331c7f58617cf8d4f26d11776236ce8b113ac10"], ["5d99a2a3d4aed730b827b68ed836a9910dce4e7b93faf456981ad6cd85748773", "7eeacf5680fb6108a8b7edb45f7134644111b08e17c236469685af5a79474b9e"], ["31d0b4bb57bd7b69363c064a49bf3c3b9d7635bcc287e7b3059d3d99fd8382e8", "1592e581034e13d47d02b8966f5359097e652391be8fb1e803f4219a22aba2c0"], ["424cf5c498bbbe8fa7e5c3247049cc3f45946d0e5f38c44a36a6c84b60a84aa0", "34acd712d334a2315dc8fd00c5c9b7c5c9f29bca27380a018882a5ab4a0fcb43"], ["33a6ae0522936ba774837aa7959972f9804e3ef02ae84c8039be6595598be247", "37022798cc08be9b4ded34c1c5062ab3a26081d375cadf517972fb48135a6602"], ["5939635b72aeba595b5f6e376d11a3e07d4b1153ab4d0a7ab267b8bcc47cc3cb", "382162eb33db2322cbe01a38fa4d13720b6d8edfaf8116a628725ef4293a6c27"], ["3649e78d2ae9fb0ee86b691c27386efce4f3e383790e3cfee2bd59c2e85c4036", "09b0d9e0dd82e697b9be9d61ce0d1410e281122b483125c48f7942b22f5d5be4"], ["62c7585d1677b7619d8200175346ec99118416d8fdf0103730d165934e96a973", "5fef7955ee07304429995433a468d68dec4ecf6b08bbe8cd06869080094044de"], ["0c94537d311e17f5b0c58989b5be7e40c88b978a8c074a1e9bb07a713f77f6d3", "6deaaa5001bcbbbe9ae436fe42f7042ce74fbf83c14058427fad4587ed33c4e2"], ["6f5c6894a8d3877312e608c11809c15dffec3df551711095c8cfc810533e1b3e", "74eadab9389b40d6ac6cc0d6e333d628ced60a9ef7617751c20630d23477af7b"], ["4e16e88e171f9a07e11f97bba65c0fe5483501f255343afb3335ed47fbcee08f", "41bcd7dd328871247cb7995bc6bd2e1961e94b0fb12e5fb2f264f9ad2cf47d4c"], ["65d8484cef146e6c232fb262c2ac8200a52c63ccec26ff6f038aa5c74982c741", "67283346bbae9391952b141e57ca8e3a36f0363d3b81b1c0f2b3c30a92c74235"], ["1c588485b64be8cb99bf97f065e75a82138ea2e035ba90b63745354e9cf729f8", "7c9a18d6ebf5465a197989cfb9b5b2a66a5402f46c4708ac04187c6b157a0d77"], ["2c80c4ad0aebcafab7e9d2519a329f8a1c7df21cb6b1acec7403c0204d6dce71", "7f8e62983160756e35356df95d44467e621c7274372997ca74a9fb760b4db36f"], ["1e1e5fc87fa2c49e2c44d5718e3d73c73a91a64ac1374652080bd9004291b9c6", "153828e90ed8d94c0f86e0eb54ccb31073cd29ed62c34cd9f2dbc5d98872e597"], ["0ce0488a30ed446d445efb1bd21ba32ec3d05d538e6393bc0e58e0849ad57129", "7278074ac66ac779136f4d6a334b27633645dea0fc98d137e3dbd4015d12b5a1"], ["01a6b81f7285f293f19ba019b009aed8280ce285af42fab91e87fb0bbfa6dea4", "60f910dc7c9a82e7836f36acfe7ec26b9babfa8bf26b2945b3c1a43b0c19b4dc"], ["79b4ce3c6990023859646690c9ea800174902acfa1aad7ff34eca032dbde7150", "53a1053d3fc6c749bf8a928854f392d09fa851ba963ca661bffbe74f012ba45b"], ["220ee355b5c39c1901ed34c0f50f7778ad1bedcd7259ae167c16514ffe333498", "05fd9374986e1e06035dbfada0117035b96b159354262f2b2695af1256d6aa2a"], ["1e2f97d2cb4a19ca40403b364253da71f65d2d4665894267e3c6a9db8b4a3a18", "22804fb035acb519210ff99ed7a974a725d896a77933789b4dd45a37dea3466d"], ["35b8699fa20987876ac3b3086965b05f8cc809d71cab45e017c68ac96e24ed5b", "155079de21981778dc438353bf2c6a65967a1a33ebb74c866fb42f4e3cce3e39"], ["3cb40c55f5f19c52958e8c4ecd9c459b1d3268b3971b2286d3e58d1fc6b6a6bd", "379e1f1f59df05c74485615b87441ba6203f0cdddc6873a883d4cc6dd1b75921"], ["6ad916290e0d003ce5c961679f77704dcd768589d7cb728c60f56852031803bf", "1e602b4a6725832a56944234f84c4f85f79911b55beef903549089925f2ccbea"], ["7c0162492ae668160aa56a60e8bd43ec088555f750d2223cc37362dead5de123", "34e60b446eae100d4c3abc6cb02e4ca559457fb5a9030a290a2568fa4cbf118f"], ["354c25bf7b3e83dd0c5e1f39b82e3567edeb5337634056c1091cd6a016caacdf", "7abb271ef121630f85a9a1049b3ad78d5b889f533b37a713b8801de46770fc3a"], ["1e581a4bcf7504f33f4342b2097504d13f9b5a27f4790a6cdde1242209862850", "2164d56564360fd2b5dba2f2c6ef1045ab448c3b60b2f2196c2f74625fc39e07"], ["533b56f18283ee79b9a180b887c298961bd9aaa6fa3ef97fcb0d5688e694bc3d", "6011366753812df2bce83634a92dbac18dd1cffdbf9a97fa1b1d5b49e0026764"], ["4b508b94e6e2e6cd260a20664ea7d727ad20587b63ebe826032e0d20cdc6627b", "1e8ecd6ff5aabae78172a0214d07a5013992d133af58afa74049de726df2a6c4"], ["3398c0c0219f5ac87a8c73fcd17b89311d120a53f5231cb761030c194fed4265", "025b234a1dc8662c068c4ba903939c2f79f3f7a3ae64e5edbf667b13599142d9"], ["5941a17b04cd3465031cb6745cb94eed24e1ff8d38a6e832f1637ae8e89c78e6", "5309792c546b6cda458be331957763b5adb5d535d54a4a61023678faa2ee02ee"], ["2cb490d2c0047fcbaffe1df26640bee73c158af6fec91343d606ce9d124a20c9", "2e2952ebf089200aebfa3947f241e2fe85797afebdc1ea06d9d26de1b446a964"], ["79305236b583232a91c63c7d9ca3750be7ee21711e4d6d257c39ae398212bde1", "6f9ecdfa953e302c2014fd8512405e4be0d48302acd15e93936e8dba7d01053b"], ["57d9fcb884b94664f35387fa6665cd9bc8136f90d804d77416ea99c3c653ee63", "14197e65f0a3599c0b9fcef75b5fbb93580d1b2457b59fb70ce7b9bac88d0fbc"], ["6d99df2c28c9fa1e38acddefd3e0931109143d873f3330377a9926bdacdd6523", "2f21987905f397f092fc56c5ccd301a1e6afa3c4611627e25017b2e68d07c150"], ["749d19591f1755bd481fa12a288166aac42911654c8c551395b265116269ceb9", "7ec145aa7558d0342cd87b1750933cb6f3717e727a86a1cc1f2b0c274213688d"], ["340f7f5ae19292957902635a5786d14fa38036b324ae759da501e32b8c4073f1", "64e231a413f1379a26f4e8223ff91fe2ccd865549571d3c6c28871964b40a0ea"], ["4aa33e00bf6e92cac4e84384e5dde0727394233afd5d24d357a8afeb94b08109", "3385bb4fbc441937ee01b671d506227a654fd6c1c532cf5221710c6c56ec7e21"], ["34b2ffca05f01088de266306c5cc122661e9308eab16929774e58565afc0e4eb", "7662faf0f70e82c062c2b835fc6da3353d3cb20b80611ffa6ef2982cf62fa605"], ["820fcb51326f1536ddb8dc1052aa198406c7e48f2c81e7664d15f8f9d3715e", "756574c23bb01170b97d9fa1663a8ff2f5b97eaa5cd53f34140c1bcec8c262d9"], ["0861d7e84cec6d6e33641ff6c85202fc0e9160797809ddc2193802499caf05d3", "34936e0a5dc7e2a6217d475fbb8c1c607fb8b3565908a04fd5948abdd399c59f"], ["5b4a1dc887ef684d7b4b165b70acb70842a2fa105935af15ecb4a097e33b8f2b", "54d21511c05805e5298a72372b8289e9d59c46dc8b5c368bbfda620b68aa652c"], ["755493ed60b13f03f9c019362a5af73fb49842dd6916e2572b1b6a312cd20cfc", "0750bcbf7e449cec422b93ace1489e1b177d4dbbaa781d315c74d54bb444e9a9"], ["5f1c341065b6a81ed2edb6bc38ba81b4c2e3fe2058e5baa13e1406eb2c5b4b4b", "6179ebfa7f8086f26820fc99ca2f94c1be19bca672d79cea5b02a836119e06ba"], ["1915024ee86acfba3f61ced9707521197195166fb1c4639bf3b3fcf0bf0ded46", "5f2e0547032221d2b00937cf524590e3d90901ef0286ea0b032c1a81461b6d92"], ["4e942d95930f38c8786ff4a8e576e7a29fb7627afe1fff91cda5006ba0624f5d", "45902f695d512d70ce4c1e0520c0060896b94e14d2960b2fcf2ed5e138e0217b"], ["63e45f3d91ab915d412bbaa17d1d249e1a1445077fbfaa6be7d35041c5116a91", "46dad5a4ec2ad0b86938f5e09f1c03b53b660fc5137648b08527cd20708003da"], ["5e2ddd2175417f72c9962c503ac5adf94ed11f28b9d41fccb6a4512886f3cc87", "3523b218478911145af1dc431feb7db0a04066eb6e2ade3c7b67d11bc55323aa"], ["62ff30a6b179a26e7247a8312cb3af3289e5d722f76a29f203aa623889aa05ec", "562beb7999019346beaa80dfd5b95d614e1ff96c1cb1037f65c44997b797d066"], ["14988b5d62084fb8335c2f261cdeddc1b634b09cedfce713ff5f0a0bb588a556", "447068731fb98e821b8e413b3b48f2d1c8bea308f05aac877006b0f4c3b0cab3"], ["1ac777f708a5942cc434236920e82ccc6af920c0a0676712255aa7082b37a5b6", "52a6f88d92af1887c781501c6e3a88169a2831b74aefd416f22b47e8335ce317"], ["5959792833b71bd5042b78e42212af671f5f87a08eafd8cdde2dcec8140e4bb3", "41ce94633eabb8a1b08fac66f762997ed8c9e2af3558e1f6586ad6a5bf5b7b64"], ["4464a7962e6722b457336fe98c91765b1ff178f9e892e90129e65fa7688a0607", "3d1510b92fd33c501f058a7a86bddedf1b83f9b6e4f04829d321117013f891fe"], ["62906d81e7f800e662519f4324ab4c8aac197661c729eed3e744d09efe721c08", "4b68efb5b1b709ab86e3253d70bee87ba07875c04a64ecf7e35cd8cdc6c0f7d8"], ["4300ff025ac78ef36e58ee7d0d732cf76cd0929fe265b3a093a57f23fc326757", "2f92880570846ff2e90d91f16bce3705c9c3ca8011cc543091463b623e4b3c01"], ["5427ba28d94652527a9b0c76f57a451e46bdc06cbc8a2481df17f66ffb1524e3", "547a97c4afc8d1f74a5d51f7e524f68472f589cc0b396b21368628721537d722"], ["424c4493810bfd5e3ffa21776326d8ff62bf8fe74504d7a2db5d3f74e5ce1015", "74d0daa832d40405d01551a58b330ffc5abd5356230d6d7cabeb5b1a55046f32"], ["54e10980d81b4ae8778896684295fa5c5475e8d68ec2a26e1b0a65383507b3cd", "6b1eb48da6886c4d88cea720e9dc8b0d8c51a8f0e1943afa31a40eeb553c0676"], ["732eb9e9ebb556e9f024c5574166738f4707b0fd005f568212ab575c1db71ddb", "1fc6b00c89e48114d6b13d9920a0c78093994f2b08df147bdbb56bead2cea165"], ["74029c04b34b7f314855fee42a04d0ddfdeb92ef3bf7cff629928a97733d96fb", "501f63a252dfbc090733b5a208bfe08f81c91419ce3d2d6c0de8cdc5a5625014"], ["04524402ebb71a60bf1055001000203a6d4917f112e50dd766cdd7b718a6edd7", "71c9e2d15cdc47c565a696ffbe55277570930ed7ade13b9a254059365d5bf338"], ["2555c620a50f2bbeeacac66228a96941fa733aa6070855331613578ed7c12794", "2b3c1bc5cda7f93242561dbf7572237ac43bf013553230633a5e18b7e71597e5"], ["555ea607b0ad18afaf70d7450543d7ffb5b883a3cad3e2778826ca97bf3211a6", "6df903158f51aa530d411720a760f8ad0ce9904d54955fda74a349be58eddf5f"], ["4db3cfa284207a250a9c83e1fec07e804d70065da586ff2c2a7d2bcb92e6fca6", "2a4fbf1c51dc0b2a7783db2be3bd35c2d6462470c88c8b73ae3ce8503fa07154"], ["5174e33ffdf28a87184a4d6427d821cbaa3b88ac293a90ca7e1eeae8c5050b16", "315ca6bc8e35e4a3d06f89e1db1575b16197963ee8e64746fa998ccd403561cc"], ["6e8ce4ff435b7f78fd959b956096f7b9dda31809cd4e948377ee6f3f24c4d7ce", "20ab65593c0c68857a0a0cb0a22f1625fb81e49ff0bef0b2ccabc8e4eaba452c"], ["4250fb17258f29af4c8b4dd59fdee32b9ba709f667a39e7168d20e5a1e2beb3b", "01eaeab26460b9079013b2bac1016183a20a5e4d1fc452193e32ae05ca04b42c"], ["4f66888b34279e2fb1b1c7a684b74a84f9826a8f40bdb5608f4274a65cef4972", "7236db5046d96a87509b3a271a8b0cb67cb770281c316672dcf1169e77f28de4"], ["6d4d4504110de524c435a59ffe8b7570d77eb52507def7bb6a1596b697cfe7d5", "4716501651820ab2361e4535517cfdb3c1c4f44b0161e31e24b177b647c5f96c"], ["6657d1f83299702a22d196577f4b85f956f29b26ebe3b39d977307eb8ddebe80", "6633a0e9b15e49de32cc78c9ce7e49d349d1d662459501b87c31aa243571dce5"], ["799a065c3b5fef8327923afd0ffd4f2f41482948315cba84ee0c254a956ad2a5", "183e6517633cf5a8a6a22d3cd425ed42076bab3c3aa56f89132d31956463da88"], ["0ea3069d39e3c3b5d37ca713774112fe7608c28b9bd9d2ec006427aabaa614db", "74e800aa5bb0bd45bafb2a9de7b70d7936d9c667db66f458ff60d261518f6cb4"], ["087378259b6f5aef854b2d233f6ebe0d9fea5bd737f6c41b554abbc049e73653", "56aaf06f833ec39a59ebbe553ab44bfe521dbd52bdd3a4759c80755d6f870245"], ["11a1f76ea5aaef7f8dd9ba44e2d4ce91e1fe18734e6f5114ce2c068561fa8f32", "79ad4349e3f397428aae5d69a7357de5b8e7029dd1c7035aa69ca084743f1d62"], ["6ab2f1efacd864f36a9154a409fdd5f22d9a99f1086ae59da1087eceb311cb00", "4ed69c61dac79eee2c837be2864bee315985e19748b4ef015e768348fdf83719"], ["05a2f037f5242f6af3a189741b2bbc5f7536382fbc139b39d04b5bc21fd0c500", "7c88548712f1a4d102da46508dde80d716859f21ad965bb3b5142da9a16b37ec"], ["267b47b3ae1aa634e0284a3fd97f80bd71802e406177ce6cb719a60c3ba9aad5", "75165decda59f284653e68d4211472ff4ee99b066ed838f8c1b4d080d945ccf2"], ["7b8341474f38fb873af66e8a28c19a58758847c3f29f74ab086f84d0cf55f6cc", "50b004b7426686a35fc59a7c9001345318156dbd9868eda0952c536604bbd092"], ["6b52fc1f93794346dca145b7ad11792a225f8b72017627e3c6e1fbf1eeb028d6", "18ffbef50c105a7e05e4ae1d14f423fbe9060098b970d515bfc23e92007f16de"], ["26bbf07dd431a48348119f218dc215ec7d07057ba776de108195cd95261edc0c", "2fce75baf11a12623cff17630192528d16c8d9b512633da8e9876014f54813ea"], ["5ee6a05213bfa885934bf03f1e1ad789e5f657c77c3b881d32d5262b14130936", "3cbf8c36b5dc06a7e229628b200369ef48c16d1e41dddb76f8ccae305bf6a335"], ["7bad3c55c8be4438e2561bba8b422c4c0f2022759266c463bb2b686f21d01dc1", "13904df71433a4818aea9e986587ffdf41713a89efcf3dd44c292dee313fb99a"], ["1cc77f113b9551f733831c659f465e51d2f2173cd6eb5afe0cf0cbeb39a41191", "4b2ee65201e200448eebd3b9366ac97fcdd3594076667d812ad07954c0565b5e"], ["37d0d30f69749e6e3acbc36f4ed9e1bea5416d14f96a035c1e4f22ab2dad606f", "69e1730dc8f89270bdfb5c56d45f86c0239e2b257d71036a992ab64d04727c40"], ["4970696edc00e129e59381f93d38e656747746f38db35357fbe6cd7e70002277", "04b252e2d26252da31b1c3019a9f9d9d784b358542df6a87fcbdccbd85b8138c"], ["19b848f4a29e0db1b0087321399a4c131d259d0eccfc12311484f58fdb3395ad", "11b89d71a9a42a76cb5f656484b38bc03c888826ac8a3924b176531f53e060d9"], ["53ea3d68baf61983f05e8bdea8c61f093e07fe2240c932e7e9df4e70cc6f13e9", "5a711d3edf8376c9578205260f66182001bd5a29f97cf5ec323aa8b5ddee8f49"], ["6ad9880b460638abe06b272da675f418ac18ad1cc2b2537fee29b3c974b32122", "0cc43f190fa9251b4be23e8d91ff2dd60536e9272bc79a08cf69e164db7a9077"], ["0c7c7d16010cfd786e9beb7de27537a10d68f7029638d9618b4df2580b940320", "4f20b9b4c96289da15b112c0d866427a60608ec321efef708f2a5dd094cd4d1d"], ["3059e553e39f89ccfbd6d615b3bc157c98a91045f9dfa0c5db3e6b8c41b2c571", "3616d6865b02722b4ac7fe07a0866d1f8b0b70506e441ec8605d9826eb7de139"], ["713363bc28f3a5534bd7f4859695711930fca45f754fac0ff80c089443b48842", "33c1613ecb4c44df51ea42c8e37368dc0a4ab9e0fee91f82ea0aaa345c27a815"], ["2927a4add01113ccdabf7d9c75b80b04781f339b7cc6965c9239433dee6d53fe", "64a2f80647c31ebc917519fe784dfc72a5b1212adfbbfd233b4e04ca136b0ecb"], ["5dc7e345c4813ff5a7aa732819703dabd74dc36ea078494f2b1f853efd13c5a3", "207fd983969337f92efe9458cddf32ef80851c94a20b5ff42847c1950a7466eb"], ["1937d869b1fc51070a63ef0e66a451c334c9abdfae7626e49b81f39c689c8fba", "79c917849e0e6dfa1a9d0161fef413d42f88cfad6944cd3213f4d5097c7eac29"], ["5d68b8af6f6f61c35d56bc169b66ec24c3eeae95a8c3f053175b554259e390f3", "099f135cad79d402fe318613cb042470a83223b75d68bddb749d7bc78af70f6c"], ["2a3a220ef2d953294f75a51ab00057745c57d38068ecaee616fa7706c0fea9c9", "369bd48c9507c664831911f77e18099ff7b75731639ed47522c73db65cd0727d"], ["503c51fd46f904ac18fa130c8775f4a25c6cfd3d3e3d25856f1ac392232af3c9", "741ab31a98f6f6eab6b97e314a31cd68e8bd53d862fac20b76e278b111ff3d8b"], ["415204ccb6618c5741ca2d0bc203ef932653df47812b8f5a601a3bf5d82c371f", "11dfda8f782ff4b99b3056c7dfddbbdc3d4d33bf4b61295c194d5f24a2bd4ea7"], ["0b00ff26f0ec6c6a85226503da85ac58e5f25989305eb5bf4cf842091b0e8f87", "64867cea0bbb05bbfd558edd88593b2b8bb27b906a0547cb2f4039bac8ae83da"], ["41745c098c1df1129413b1b0dd4151e120cf68643fbf0fcbc69641d07bc01332", "63bbe508d7e29f75cb59f20933763e9801274f7a886e600e6e663a552e72ba66"], ["2f36bb8ddaaa7ca88aa51b005fb092de4400d7a29649ae6ed92da8ee6f229a2c", "7d421097901e302a10f7ad41dde2ed0b299326990fbcc622c314888ea98da281"], ["22ad92a4e203876fc59a5c2abc623cf21745ed8be40a65cd572ddad9a2e0d293", "42edec13ab3355693fe424d35069923c780fcf74d826d9426fdd2a904e848541"], ["51ecfc646340b6f394a013d7c208f82eea817ed8ba720d2be0934f3e26b4b5c2", "3dadbb892c397cd7c75161e0373fea79242782284337c90dae4a2cac7c35aa9c"], ["428093a6436596b07d4a3f209631ecbea01cdf7b1a318732ed1256742fc40607", "645a749dbcc67aea58ed76932decf2eda13d24a0f49ff43de8a0d340441cd95a"], ["2dad41ee31d775f299826e76c85adbfddd379578a86e3bbc62212f86b13fac48", "79790864db95dd5350e87692eb61ebc0c401c70ca33be5b56f1c58a8b66ed722"], ["60fa5a6e4711090be5033571e01fad7ade416fb404e4f991264dfa0ed8aec548", "3445b933cdd4209fded408a1fd9874905f613f8bafa443a9923ff675feca725e"], ["2173535a88c0303d3d3cf599c170d584ce7e7042ed19d9f7bb108fb34c6afeec", "41bd601f481f6380d9fcd0f9d97dc810b2a58bb0d10a02bf5a3029c5bc1e96dd"], ["5119eacaa5a402b6339fd1a7a99d6a273efcce53c9c7b1da34c5ffb58a6a42f6", "4031bd9e2e6be94310511f63641ffeb8bd52d39407513a4d37157591cb7ce237"], ["223fb079fcbdb4060c8eed24aeec59bf1dabde9c765ce515da7cc35e45006795", "3cca088c665dec3ccd46ec63c105fa919dd2d4ff282c7abf96605a2eedc22ff1"], ["1d6b03dafa4f876fa70c40410da3b7d49dd9059515e33597aa1780094dd9bab1", "1602f28a95939e1aae57199c8bcaf889847bea3b12ddeb3240aff2813569c488"], ["1c3c71f7eb9d5606d6a470b9f356b1b62af2e5ef8da8c428117776bd05a19ceb", "66a7d0187c66691234ed1fbb5cbb4505f179074860e942c59d9dd9ca1e605cac"], ["4ae6e93c685a17a54c9d1aab5d4288e4adae2759a06ec1ade10b746820513cff", "64d3e1d08dfa2405d25bb3c112edbc5171dbccddb4f18c1088425c4222a56b39"], ["25014b8f9e4034b0227ab5527ec965a472986fa4673eb6a7b94a2ea6f7017ba2", "140479af99dff25d2d8d41d2573db6cf8c2473bd0679df29b798916f83d7fa65"], ["1384970d11d0d75a02a82f8ff9e8efcb98e07b68a5d50943fa7639d7a79eec39", "41fcf4d9dc525842afad8541493cb18fb73c875e8688c208aa1d0f907f91df76"], ["15ff1e140828ed211c2b0463f8dd71997f0785e1b0e6f6f170be2c5a77cd2b15", "523bf8e3e47f164cfffeeea69bfaa4edbdec0ac2a2618dacfc6f4900f9aecbff"], ["361abee487c370c6fb8e9468547b1ee4ef63bc23e5813ab02ff21569b7627a5e", "59395b5dbfa4649393e197d93ded2a2c580511e857edbab2544228747a6368a5"], ["2d63ce5778496e862aaf67e3482e451eb475e4a599a5426d94d8586948cccf15", "1c7a0dc6a5ea7d87ae3db30e5f128d8422a1d8490150b595d03a2da181403fa5"], ["5d41e43873aad9f5b7eccf2600f9185ece50d4366759ef68c0a871dddab600a0", "2d805422b9423d58277399d61a97b1e29c5298c8636431ad039557c8879cf742"], ["36fd686c22d85a1b87cb82a64c66be41dd4daa4849b392d90478f65a80f72313", "088d2690f57fd54c7ea6342a0db1847cf8b72a9cb89ddb23e31b11a3e16a9639"], ["10c59e8c0ceadc1e90ec536043120468e2c5ac755f1b0a37f145e59bda1c54ab", "661cbbea984da20c572e2c4a90b1da4bbc6673d99b259b050835fea60ac6d302"], ["6c289e1a464028e8a334ffc99a4c366d221bd08e30a8c2716767e6aed46dbe92", "2fde05bda0b2ffc4cc8ee0838fca390cc5d127fd5d32bc7e26ba56b3bda68141"], ["3f2d617357cf963e237436643118228b9bfce2cb1ceea15bc870ca20dcaac44d", "218cf3a58c83e48cd78f3d331c2b2af05966845ac8c1d4c6935e9ee592db9e6b"], ["46c427aceb6ed69d95955192f872801295982cd8d9dc07ed995822ab7aff4ce8", "16177f3315fd51bcd7071b76dac4fb077097e4c3e49db91da6c5a56851ca0850"], ["10135d3c155f4e8fd1a3ba60a13bbb66dad69ebc2835631ab24844e2cd379252", "521b9718a2dd129f5b181ec9e600e56f64835bf812842308838661b75cf0db56"], ["5102ee4455c40749214231e6db132c9ffb5f8dba18d205885362711280be7259", "38f1a0e1940df226ca4b322fe50e4049e5073464d26210558d929771602c1a3b"], ["1ac8ac23c1d799a258cdfcb676c8a57de1a3c93142b87438453fc5c8658cf248", "0b315142874e501640770ee7c79c0e99d68144c219df84d7179897e960ee3e67"], ["209a9281ee4ddad29844847a217eab9da909e285831c9a8eaa453491fd271191", "5ec36dd89cf705647e31a7720f078cf6670ce770353425a24b7519998c586546"], ["34861086002857e66caffd95f74cfcc527c38a038d53ac75516040ec603380a5", "2d19967964cb91f2086106133279fefa668138600ff7ef70540e77f3ba781533"], ["4f728faeb9ca147ca7f6b667064a639b6149fa3fc2393bd6a6765579bb6f3df6", "4dfbcc801a49d8a599d55c6667a7255a753c4b963b65a8fb081f767ab41df75a"], ["1254fe80b8bc9966cf4a0719cceb56c10510253500ec2f3f113fbee032ec3992", "1d1fe9b9626c893cbd5e4477789f9bd28a0eeed6fbdd6f58eba1ddc4cbae3c02"], ["14bb7ca2f1307a1ade7b0f264bec342c96c274e92750d2f15700f0267b70aee4", "57328e3c795413e389a797df7a5e6bf9ba10b4ff46cdc82788eb267d2e1a2ae3"], ["1eb6cee3fa15e87e8cb6c0137ec8e2039a136f1ba078840a1fd2ad323974a0fd", "1b70e4ef91f9b582c68947cbc61ecd2e97f870bfc53461cc4f9fccc21ef5a099"], ["78b32ebebc865ae25cf685b15fe41976eca95bdeaf78583aadcd9b09e76e6757", "1f3d7c35e601521023469f6c744cad00b6017bcbcec23ab9e774e6775041aa9a"], ["69aa4285fb45951143f8b2419a4cffd2401708ab3810b2cf3e6ecc333cb39375", "1ae53b7c42fb50bc6225b375f540f2bd3b4491a24157eaaf1167ddfd4005581d"], ["6b1de2d617077dd0e1fde2d9cec2580b9847ad55c13d22f7ce87f0d60cf8e925", "744a9109964e53a90e82e366bbcea4a81728e4f56164b13d91b36dab22e2fa88"], ["13343db20e0cc36017b78a887489c80f68e425788c171f1e80985cbe91f85b04", "305d5dd7aff53e84ddbf991904e61fed5435a35f423859a551f7d83b7c4b7547"], ["05c98760e8aa9f5cf2d49c578f8ea79ec52869ebd49f565ef35a35140781fa2b", "5f500b3ca13f9dd858b38a88d3e23b37772fe3f15bcbd8ff4c496addb20c0ac6"], ["09369cef8ced766f0a2d6bbc1246c56f33895e760247f2046eca0636eb559096", "2e593210101ec033e927d7a429dcdad89223c94fc58d60c46516d19bc5f9b291"], ["62cddbe2c489f669346184c8adfd4854d336101eca02274f0969c906ccce202c", "27f3b2a72bd115454d259561ede525e622aaef7b492848b266268289b2bcebc6"], ["79db8d361ad46f4137d995bbace2c748bcd08a0202a9c98889d7dbf230ed619d", "6902743d0f4e52b5f88b3da026d34e240b93e86d11bcf3c139934b83d2edf77a"], ["65d642b00bb660d2ff8aaea9aadacddde94c455d3718e726df76a7c5adf68a65", "5dd6a994a52e8e2cd6352145a9633ce80e0d1eb7ff5beb96dbf2fe9aced57501"], ["1f7bba9076b4bb291a0f345934556f8e07acfb491e08a5d9153f1ffed84f4f54", "43ec3b2d420bc4c2497a9e8555dba0795df72ffc1c2ed79669170b7a2b729e32"], ["29830057cdf1eb14a91c8fcddbf1b8c59fde0a290ecc7331d13e5d9e747c3b73", "2636fc1ea36e626bb42997e758463265ce2be4063c4f6db8d977001ba0d88c0e"], ["7d9f4827d737984081059ee9bdae7057c161c3143e016d8e162ec0e67b8fe03e", "4b67e34af0f88c20e50e8346935c1642053d454fa950691411085580052c7eb6"], ["22412f5b9b34894640cc0096fd3b80be9127ecb02122a7cc89ce28814239bdae", "445d1a0e813c0be24fd10aec59ab487462ee0c37273d7423fca5188bf936c6cb"], ["2cc084f9206f7c2f921834a57adc63bdb4da013912ccf4d933f976eae392c34d", "16420684ab6d78525a09035d490871551bdbe91161793c9f33e0b1c30d7a8165"], ["16446f0a72776bd8dc0d54a36178b38a87a4eb0dc9549610df6a086c2ae3cb84", "580de994cc4a5d7d2646ee7e75fd2cdbf6a9f8e1ce039db6868e638da5dca11c"], ["52af1743b86e3d17f975be6cf1cd8880f1659017fcb277f72192768736750a20", "477d58d8a7d9a5a5028a0bfdb76487abfbe21495b2024a28a7e9b7d551feb797"], ["3e5ce21e7da3ab4135dbece3eb767cb286bf6d4b5f41ce5a35ef5186db5286bf", "523029705df5c8e7345ac0aa7edc59f17621b3b3557ecb5642d9459a52a06562"], ["49960d6223d87de0cb6c8876603cf9288d3e90aa7da10b52c73d00d4fa675b14", "4c09260311ad114cf476fc1d453e7beb89c87f31d316e0a643f6681d1120194d"], ["7075911872b680611fb5dca5c51772b00ffefd9d974648415dc7147ef0c7e6bb", "23b6f7b92b3e7dce5e6fde00fd764c50f6abb84f7f5e0dc0f5d0032115a1f120"], ["6a5c1244a150904e3d4210c4bffcfae83b7b7219265018805620e41fb81d70ee", "7a1f791b9e0fe2be3a8aae4b0e31c609223efadf55a1ae43809917dc0d8852aa"], ["51aff4505befcb944de363c8bd86ee63ac48769aad103c5424d6170b666f55c5", "4db47927f30da6d127bb7fab8eb59bdac00e28cbb7c7f05dff428f178a444b93"], ["56e5275b977796409f7bafa5cef8f0da244e8828cb224d98400823fa59b03b29", "4aa592efb59e793c0bbf1a7e8ccadb52ca626ca7db597d70fa73ec77a5626252"], ["58d86a25d240c7b2bd2eaeaaa84b53cbe1a9e97b35e9ae1dac6fe9b06cb30fed", "054cdd4d77fc85194e15be50d09c071b61fd869da587ac4d2fe30c3a255002db"], ["68b4b787a32491b488acc7d88e0a2d707a53472d5e3c5e242bc2475096ccfb98", "2f783cffcb85e7eb63d613f7ba17b6d246305c460b2d5f392d2c7514ee6b1ad1"], ["291cc4f6b8975afb30ca08b542f07a092e76a3a809bb2c929a717a4fa1d00c55", "6250b9415ce137dd381edda76db963cf36903f98575e326b63a8f1dc24152c9f"], ["0e39aca3dd3ff7267e865692d6b38da8acdcc4fbface07fb059ec73a402db127", "7f35c75ad87d1db5f4b8b970c7363d5fb64280d6f04e90cfd6473817155a64bd"], ["7eeb84fee483043438da6451f3a33015e13a5f2d7290b592584e9eab69091a30", "2f07ff406b58e49a38e4b3e3ae3013666a5655d11ecc459b29428cedb4d209d7"], ["4f6bf06b632affac512b5990b09084cdb46b8b282128b24e48afaf0d2b986050", "5021650e557c655e4e1004602df0dec8549943c7cf791174149f6a3818b5a659"], ["56ce4f996ff9b9958829658f5f84f509f5e997c14ac00855716687876c11a7e5", "7dcee12d62c98bd190feceea11a7789d32e2e7634899bdd5430454640e129109"], ["3883ba700ba2bca283e715cf6ee29e4aa86838b61223b85d15a8b5b19129431f", "213b1dbb4688bc2f1bf220f9d8c30ef38aeb6bbe46925e277b86ed4a6c9f272c"], ["7833d5b192b75cb178d88ecf949fc6d6dddfe609e648b51ec665b885c44fd4e5", "13a4100a27c27149876a3209a539441c946e0d78bb3462b2f8e1cd45944b5e93"], ["474ef17c5df5652054dc1c5ba6d81a4ff3d8de6f7e48dfc0758a7ca22ba0636b", "0a6fd84785d6c45be2681436072b7ed914b509efa16213d8664a4a61d4bcd666"], ["681cc67835f29a934c44da7ec72df40e392f357da86dad3c47aaefef11c361b4", "6ae7ff27fbf6fd87fd2f2574ada80381a416c6a7d22d4b6a1a572dfcff9050be"], ["23a9aaa560722a38f22a685f5d75758e33abe0ae9af80d09e8109d22f0987342", "7f35394e0ad8dc1a54e807e7bfb985a74659a199486634d9b107c3baf4145003"], ["38f0da841b2a6cf2d035eb86b4cc9b7b2f3b8ed2100b02dbe39efe8d7cfdad34", "07bf151a32e597897e9e54396a8a072a63b94a0d35388777d465cad4b79f7958"], ["05a4bcc20a6da41c58e0ee9e468621a3565584b0b42ddf2afb39fab30c27774b", "314f97dd80045fe9198859f24193b42727c2bb6fbbf5faebca06f8e62b2e31f9"], ["02df6760144b40e890059474a8a34fd3c36e702c32b5d60ca1e9d6fd413283d5", "7f395267bb23f74bfa9f7754b070c15d20e0ac11a08c00847ec4b11adb12328f"], ["436eab769ceb9d0adb72427e73e8951217de6195a38b5bb91a2dcf483896297c", "7cf74a7399df1e983d94befd500aa939f3222b817df2afb8f8611c634ec00662"], ["12051e9fce5f836d5e1fcd86af484c5a145f4f1a4324703902e78c0b29560f48", "0f407d043401938c60f7afc04bd4922761a8ddb060158ebb0bcab3d77408a446"], ["2271b9bbda630e6223d69d01f8fd774a92675faeed9d86f9e24e20c0b239285c", "253ed8aa1d2ebd5fa9453bf8484d9290ff93cca9e5e63b9dce13e08222473161"], ["635c9b1ed13d2a101308d86dbf3e1e901b0d81c4fa07e698d9416bc0df69514d", "53e499170b097288d4b50764f408ee92f95775caf98b071132769dedb64983a8"], ["73d7aae51b0f1cc2d2ce9b61fa0711d66258e6ffd91323501d4ea82dc55c4700", "22a58bd3fd2262c04e06ef42bf272ffe8448553245a6f6d98448f858d6f0b46b"], ["6222ac763ea4a02e3c156353e2ea5570b88c903f27ba8d3d282bee6c88a9c5d1", "2fc639678c458fab70168bbbf24e3df9788d5ee0ab9f278d8fbb7e409514dfab"], ["0c937e44df313ebc4b6a3d26a6fd8ecc4d611a2c780f982cbbd4be36539250d2", "3badafed6119ea992aca91bdafadcb6fd9af057ec9edaf05991cd039c2306828"], ["0cbc83d380b735f49c5452042d08bb70889aad64f281b43f02f165dfb63e8875", "6ec90d255d8465e4d7b0887cf9096a0d5730b284297eb83fcdfec427e9d13c88"], ["421d88d9628b1bc9f8706535607badc67f2159866e8c86f9107923de4ec4d1cf", "6377757c12773b61cf8762e174388d9044cee58ada97205b15f512debe0febe0"], ["61433cfdbd3baee86c1129fbfd352088e93d8958c0c4849bb892e1f53a80b348", "3dbd49aa3d051087d321b9dde8cfe6fbce453ca144be359af3915e50029d1022"], ["462f746a5dce61a97b79e44ae35ea959210498457292a821a90a479c3499451b", "4b60305fc76bf46682ef319722daf676cb90488649d1b2f06b5dab271cd0305e"], ["3236be915fe5626c686610ad7c1454185507dda85f4b4df1455d39056afe4c35", "7c359817e89a8122053cda41630e7a8f2c50fee3673a0a11cd1bc166394f99d0"], ["0c91974871d7410026279e9e046a0648f91186ade3350cd08bb93ee6c169a85c", "0fbc963036298937d515a82c09f86d0ae50b0c33f0712b62f6d77d17bd27b730"], ["2328943b564d46447982ee0417259fa964669ac4ea0d434ad2e7d4abb470aed3", "4776061620e4b6aa7cd558afd982a83c4c64f41e54abcfef7acd3ef7668917cb"], ["1425296bb84d092a568ca4c5ec6dcf9aa350706656274fe43e76e74ad80417a6", "4cd43b4e74ff6e04b22bc3ca5d1582cba0fea687ae079fcc48a6f3e825d140a5"], ["466e94ff9b76d434ab6f92e0d8666c172e211f53ccd3108e3545ffdeebc91f0c", "28647935c52cdc8551206cebb197cd41b30c6401b15c6e6745564fa5f62ce6e5"], ["153c6502188a2c83fe3ae34385f915b1f02c1dac2ff05db5d55636e9db032e35", "0647caf8c4568934bcd46f7934879468860271cc76ca0a05cf40aa1242ef8a80"], ["56154c9ef883c62e3233d2a1362be83a4469bfc6ce4e043e25c018e659cb247a", "344b730b93e50a9dceead7952312df69111081d40b3193a4ab977385d97e52a6"], ["1e4339a9852d90defdb934eccad0103aa87aced46841630965c8dbc51a2ef8fc", "55b6cce5a6b68e0a4123edc1c3d35469b6e67b3e54b3b204dafeea3a4dcd974b"], ["5c16b6be79f4b379768b8ce151f4bfdff4155c8022b19e1997795dd01b58565c", "31f8528fe4abe24879ed8fb6ac93b21aeb00ed7b7f3f9e9ee5d169ef3ef34eab"], ["048406faca54999917155d10f343d555eaf3e5f69596bd839c38a2a6b0e2716c", "28e1cf0ea835571ec92d216a8950fda4c41f75ed653558c668d44eba10fbbf71"], ["3b602a59f473100418c3ee0d66fb8e0cb12f6e4630f7a903ad843ebd1c40e53a", "40101cf8e94f2ecfe0f5c7209748ee0c94e69694e6d25ef19611d229cbfebbd1"], ["69d7fb81fdcba378269018cfa43ba98772bf485727ee3e0034b12a03235fc762", "2e3b4262e2eea3aabff66076f691f8680d585fdec3ed8b33d8619a30b46d9c1a"]]
};
var doubles = {
  step: 4,
  points: [["23a4860627e53aeeb8e22b1508249c9109578d33e7bf237459b2596d6c28f9f8", "709696f2827fc3729f980f2e3aad6e78b06a11ff8e079c27d87aab37c16727eb"], ["5e7e07ed4e1decbfe6e9cbc126905449d4b578fbb561576d20b8bcdd0cc2a556", "0f55755c51f102796bf5ebaa81d3260e7d1b3d9ac127d9a80e142031566cf6c7"], ["7d13c0248b891b47eb524f2692008e2f97b199bac426cb5902b9003a29ded6ea", "59a976ab2c01a81a91f1a56c75ccc77a9e1e9e878e9fe9c3952080a6805b20d5"], ["5de7faa2ee4e70132f541f79ca07cd54a39fe1347a6844d19e9d678a8411a565", "2c9f23641e1c2e0aab8ea9926b432d92c0e8bc08901d6ff6df85e4cef854ec36"], ["06b349eebfed4dad4a805b63a6ed2231a565cda752d9477ff427dd9a8c9ab5ed", "07a09289ff3e1f9aab68aa374c48df65f550c2323607b97744dee990608b64f8"], ["0af367956af630266b1cc760154256ed79da960dddca9d72a1e8cf27d8d43a77", "21108d900134d3b3708dd28ace96b0b23dda9100e4b6a62a8131bd2f2ba408c5"], ["1e45a60140a3b2dee9b8dc6ff307154a1b410bcd38e0e38fb10b2f6da1afbe2b", "0e730da473dffd60d2f3241a85e68acb47d26e5043ad047d893f072c8dda0a76"], ["4d1e116d136158c5ddabd4276832800f2c081c1072de6f2d931797a46abc0cbb", "6d415be49d4e35b65cc51354b5008f8c43e84b7b5e8a4b84f44e1efb10c9b91a"], ["2b6b892ae94b454b2c2d92bb947fc4d506d173d281779c2c153c001ded42d3d0", "7f1cf64e0e180fc4d6e12c1b5c5285f376e979616a52c94a0dea4d48c5880cd2"], ["0f6c3a96e0032a9394337a02ffb2c83ba70efb8f566feab530fc90fa3b4710e5", "3d4e97e286378675038a4b58e84224ee515e1d6697ac79389f78479be167635a"], ["52ee53b981dfbc41ddaa5ddc2754c4175f4811aa45f8e2b19a425657c238a83e", "7eb0a1be3400dec87b388cad51613957643cdf0595b891cc6f925fb36da7f1c3"], ["52a837bc7a7bc9459bcc2ecf80f74d9ed99def0342e18cfbe8e799fbc504fd52", "50d6460185d8924e5485f23f36a98c86053514d163547adab6fe91478a411196"], ["6b2bd5d00fab38ceca21a27d6aaec82626b14b555d859527718f8ca404eba4", "727340c27a15f6ab3d80547f0827c56ab1ba33bc30d1ef3909ea9a3af10c67e5"], ["71dd75fe35761c01a48597ec730bc33237902fd4ad8612cbed1031eebdf40de4", "39674a4532078e34378667beae5cb55f814ead9bbaf7e01b3b69533e9f88a411"], ["57426aefc21be9ccf162e23d25ac3002ba8534351e65613f870f690f2fd46cf5", "6b45b002fb4e8a6f59a6ffb006ed71f75434217333b266325204c7d1ac2e1f34"], ["6222bd88bf2df9d5d44b60cfb4a08a960078db7ed51a35eb3e0b6b8ff4eda202", "0325bb42ea4ed025dd6bdaed261b7c4f5410b608ba902b068f1efa5782e45313"], ["71ac99647b61b9eca6f0c23432a518f738aee708d5932d4ef0f172240250a226", "3a96c2c028ebe5f48913be30147e41bc5e1cab9595d5404138a9aa1b5574cf25"], ["1f6a1fd8cc0e05b2742ba0fc0369b5247670543637dd033e64dbce90b2f23e9f", "779964401ee869a9b31c0ef874a86440ba85d25c2ce932bd31a0865869605e19"], ["22e2c039067920c42980dcb3a905fc91601c2b34e819ce1532ada4a5fc39d5cc", "631cf9945a09bf26d7e595b3f8e3390696870512820df63c5418577089e1a8bb"], ["608de273a9f6a534219d7aaede3cf65a81e4dc03d7a2765eced1d2b7be4610f4", "3b31d0113f98d81ab1312fb2837aa9c8dcc7960f84eb371358c6d841f67144fa"], ["3f748617ca63ab3e44c6e34f63e7328ea56a2a146da34368a57dca181254fe02", "0fed89e6420fc47b3938a2891ba9acee4cbb2899ee4e9ca15a13dc527dc1641e"], ["69d98b5ecc35d56c97c0bf312955d199befe116b417d70f5f57e2dfd0af81ce5", "3e26d487fbfe36ab44e0ca3b248fe94bce92a69b8154d50e2d5481f8259f4e8e"], ["1e34443347f9e627b3531157faab6eaca1bc3114df4a1423cc12bf8417b5d622", "295955a5ed061eca7f87b9485666ba9489ec20a9c484224dc920350bb4a6fc79"], ["51f4ff8c599b1c96da82941520a9f5abf4a31eb8b84fc95056145ceb3b5775d0", "35ac9588d46e41f3f6f99aee3852eeb4b12e807807d4bd1b7f8406b0d7863ac1"], ["3faa2a093a19a02424f65a10955101f4dc015c43b2dfce8e001507abd741b845", "7a1de10dacfda389ca663b15574bdc8ae8c5b6e7cee647e77b11ddbfc6eb8edc"], ["1924416956ea2c1269062588569b18178011ea7cba1a3266284f48aa01d5a90f", "0c8e28127b7dcdd206fb6fee96eb88cfc7db7319826ac8cdb8b1fb8adaf021de"], ["49761c57ce3c8c4f1435d495903e2f536f3be3712e76af8d0b5a8b7d1ebc8fac", "3225035e1065094ef32d7f3e7a6f8ff2748025f96e0c0b44eb35576b61e150a8"], ["4339fa86a23242851a16afc3ab05b352a7b4bf53599a49dd7e29d364fc3a757b", "6d07cc3462bae9160bbebb997510817040767faa9dbd13f158a5fe8a63a34b0e"], ["6bda13918dcbaf8529d6326ae7a9c278b72417c2188c5ea4f062fc50639295fb", "2c3fa803b162ee887d0d97a6734866f992f846625f314117075da54bb6c20a36"], ["4da4821314574d4fed4dcf692c8b15b99b73f13633210333ce7871359b6e6424", "314016034673d2d20529bc93a2dab6e462bcb5f66e1f4a6bf2170759a40a6e65"], ["0b2cea0029ee963c0034b61bf19e384435f14554a7d297b5144838c38e375586", "47ea95da28d39aaade5edb8ed941c687603cfdd1508776e96d6683199e99daea"], ["4c27afff3c45f32c952d3984e14e29a098e685c9c2e723e5fc8047ae60b7e824", "5f2c99e6526dc87d95f11eb626c29c3a90d0be1e51a4c49e5bbabd114bf5a66b"], ["53e2a4ed1bbb48bd016c524a02f797654cfc969849f867681da94e341f377534", "5a2334fdda642732a3c9520ce06581aa7f0f082882554c37b8d390a25a9bd559"], ["7b8d2c823baafe0d878a55e8af1db150dec85b1424a4901f9beffd3a6196e3d6", "1c45a557b3624f9b89ed15b3c3e1a065f1b453d948f7cf45d9494483f8af0c85"], ["78877b5d8777410997dacaeea59400fc9db4421fac02c4282301c67d35fb7ffe", "0341b46c328333e4484ce8607619014d41775c408c88856d2f9e19812d90fbf5"], ["2b556bbc070b5c4bae9e575836d1d68ee9fbe800448c0d2c233f78185eed3f91", "7ba01332807ebd892e00ddb368c0fa1b3f19b5b32efd90b178d984e1d7174d6f"], ["0f72556998b0044799f0fd03210ded3d984e3843bbaf3c1d5d692bc94d43c4e7", "16c19c5037c103d447caef4efe6bd81a490e7c668f6870f1b080863b5315df5e"], ["1cd96ef237b213cd446f13b3ec40d32ecc593bc6ea71e77efc284341a5f3da1a", "7a626aeb91efcb5f9777264f5e17ced8b411f68c713673ef0f184a5ccd60dbe3"], ["31a75b21cb532622a7caf9e29e652ac4e47b1450edf6655acaf3797b55a7ca46", "77006e7cf104982f8865081a2ff8a6911546755e31c3586353b0bd0826c5d790"], ["543d84cb04fb2bf787b7aa382eaab5cd8d050ad8ee52aa8a285b945652014031", "0358fdc5b63ed49e693d838f182b275846f42dd49a42ec2e6e932ba4de59ef20"], ["0a2818f5f5d8937800c30ac6b847db2cdef655b864126302249144a5a15b205a", "187c76a49af10851bb049ba97c0fbbb14b2621522a4e8d9670ea46e56c9a1bd6"], ["7efb45d3a2851109d7a8d50ddb08fe308bbf674c019b965cdad4570a141e648a", "0fe1198b11a1bf56867091c69d71f8b7792257dda321d43652e818acd0c28cda"], ["472e960dd122a534f52377235350549df4a1dd7a08cfc580bff5fb4b0a70aa7b", "10585d04fc529fef4c0c0776154fc7ebbaedbae8a99937e47598d0578932b7cc"], ["04892cfff7f94ff7f07c1241e3ac4945bc46ea9d6a3c1c3adbce109a9afceb6a", "3ae2aa25e2555135a7a3251c11a3f8eebe81758bc1c3e2cbc6e6ca461a543130"], ["2401d311a3abfd2583f1c6aa519c1f18ff730a0abf730ddcc9c9739b04d8a85e", "653224f3488cae1ae19a414a9932035a2bf2c46803b5532bbb645e62387ee34d"], ["0ea2c846a535a115972161612a192588d92d68a3c9050eae91b2817b94e68325", "3b82a8337b05f11bbac176a113be183a50a0331f3d3116f24b971b5a8b0d031b"], ["0fb3f87c2c6c89c65b74299b77f3736546a8b9e41b19197476bff27354e1c128", "1034d42c15a2bfe3e682fad49dbc2812caadf0c584bc30b51625b85d74e9d5f7"], ["1bc7af1e38185e7c2d8d04371c7e177d7a9ddee1b81d7d26db7ad644c7dad28d", "61d909d855661f2f7a5eef87795dc0491d027e12631b270fcaf2f65900314833"], ["469d0960dbd0ef9c91c4597ccf7c209549b187ff63bd378b7dac577198d74a4d", "0b5f21c7f86832241f2157c288bdc9394f83f8d57457f6d9f6b345e4909478cb"], ["5e9ac4ab2f4a3c3526e1317f913d69e3826fe862efd0c80d9310319170c5cbeb", "505f00fa8aee03ccbd2f33529ae1e4e4bcf2644fe673d0b0290ec32be5b51bab"], ["11cd80e1fdcbc565efed81d17f3f54643ffeed1cff38f3825e115adbd82759f1", "43f11943f7ef3fa68b980fee45e98134f1df22263b2d14419d61ffe62822dbe0"], ["3328bc121616a9477165ed282053d203c24f4826076c638a2c6723d42c9bfadb", "2bbf3f26c21b5cb273e5f4f0114c6718c5eb7291939b7697c74333cdfafac039"], ["0ba774bb605dd804cae6887e81f6bd2c59e024fac8bf5f5c48a841a037c28398", "54ba013ad2d04dcdfb5a151b7347ee9a10067ddd0a3907e9bc337a77bf911321"], ["1074ff0267662dc2b4ce65aaa0229c375a3d0d843ce9349233949581c869b64c", "299be0decb680ec28923da4d049770107d42c180b460da13a7b1efc7e6d5b022"], ["25ed76d78c87c3bd64b4331902c5a853734283e25f19f320295667b80a340d35", "179b5f92f545c7b326b3a63fb0b32a0f52b4159988436d5af50c1d0d76373947"], ["75d942c04210dcde5d1bd4fabfc732d3f95568e399382c0423c83c41cb05dc3f", "696cc14856cdc13c8fd7e2c5771731cbf38e3fad47a424679765c4874e35ab2d"], ["5d9324f56975477d5945599eeeccec67708c996cd3f3f2818bf2591507e3502a", "10985a3cfd573205281aec24e2c8b41f5cd8cdfc9d7be34675cf306bbe1b4f6a"], ["7511066c0e12105a7b937c7ecef367d5afe6e621e5cabf4e490b09b7ada7ee07", "604df365b8391cbca8848f88daa700b770da5bb136f70bfb0a3ea33ba386fcd5"], ["2596e5b3cf5494e60d2a750d03c66abc2e0183af53620b893f9cf9fc3b76dc26", "68a0a7ac9a0cc093884a6b84f45a2cde595194e0f48dbd566fa78a3174b182fe"], ["28bd38d44030dd9ca028b2a2f31a795f4c7a5e85a785df7847e3d525e99d4787", "552dd7405c4183733ad3c4e7ccb999b4fed81b7a4444aab499d41d6d78d5bbfc"], ["59233a3346f61135f431f96cf0197e24ad38240b222c010a6ce538cf4c24347b", "3cce55908611d2b93f221613f09cfc4dbcd2e2b609233eea5439ad1908a10b20"], ["5830f025f1078d408948f73096af97de1e9e70b3be85890acb21132c34ff961f", "67d451752c2433ffe66e47242e301e56db2b2f8203553cab9de717e25793d41e"], ["6a0c8b194571e874b82d904da36d43096bbe36d512e24ff8dcb2b00b57ffd3ec", "5f85adb7749cc735ec838bcccfe7d4b52902c6132998d7ac8e032cad031c42b8"], ["53b3f967bff8760948dec5e9282f35d1434a5503790b9012e17faefbe7c4d699", "404462283c8664a17daa5b4059dcd10e2699fd86d0140de9f3e8ad0566098ae5"]]
};
var ed25519 = {
  naf: naf,
  doubles: doubles
};

var ed25519$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  naf: naf,
  doubles: doubles,
  'default': ed25519
});

var pre = getCjsExportFromNamespace(ed25519$1);

/*
 * Expose
 */


var ed25519$2 = new eddsa('ED25519', 'X25519', sha512Browser, pre);

var ed25519Browser = ed25519$2;

/*
 * Expose
 */


var x25519 = new mont('X25519', 253, 32, '2b656e', ed25519Browser);

/*
 * Box
 */
// In the future, could be implemented as:
//
// function seal(msg, pub, priv = null) {
//   return ecies.encrypt(x25519, null, msg, pub, priv);
// }
//
// function open(msg, priv) {
//   return ecies.decrypt(x25519, null, msg, priv);
// }


function seal$1(msg, pub) {
  var priv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (priv == null) priv = x25519.privateKeyGenerate();
  var ourPub = x25519.publicKeyCreate(priv);
  var secret = x25519.derive(pub, priv);
  var key = secretbox.derive(secret);
  var nonce = randomBrowser.randomBytes(24);
  var sealed = secretbox.seal(msg, key, nonce);
  return Buffer.concat([ourPub, nonce, sealed]);
}

function open$1(msg, priv) {
  assert(Buffer.isBuffer(msg));
  if (msg.length < 32 + 24) throw new Error('Invalid secret box size.');
  var theirPub = msg.slice(0, 32);
  var nonce = msg.slice(32, 32 + 24);
  var sealed = msg.slice(32 + 24);
  var secret = x25519.derive(theirPub, priv);
  var key = secretbox.derive(secret);
  return secretbox.open(sealed, key, nonce);
}
/*
 * Expose
 */


var native_1$4 = 0;
var seal_1$1 = seal$1;
var open_1$1 = open$1;
var box_1 = {
  native: native_1$4,
  seal: seal_1$1,
  open: open_1$1
};

var chacha20Browser = chacha20;

/*
 * Constants
 */


var ciphers = {
  'AES-128': [16, 16],
  'AES-192': [16, 24],
  'AES-256': [16, 32],
  'BF': [8, 16],
  // 4 - 56/72 bytes, pgp default is 16
  'CAMELLIA-128': [16, 16],
  'CAMELLIA-192': [16, 24],
  'CAMELLIA-256': [16, 32],
  'CAST5': [8, 16],
  'DES': [8, 8],
  'DES-EDE': [8, 16],
  'DES-EDE3': [8, 24],
  'IDEA': [8, 16],
  'RC2-64': [8, 8],
  // 1 - 128 bytes, default is 8
  'TWOFISH-128': [16, 16],
  'TWOFISH-192': [16, 24],
  'TWOFISH-256': [16, 32]
};
/**
 * CipherInfo
 */

class CipherInfo {
  constructor(name, algorithm, mode, blockSize, keySize, ivSize) {
    this.name = name;
    this.algorithm = algorithm;
    this.mode = mode;
    this.blockSize = blockSize;
    this.keySize = keySize;
    this.ivSize = ivSize;
  }

}
/*
 * Ciphers
 */


function parse(name) {
  assert_1(typeof name === 'string');
  var len = name.length;
  if (len < 1 || len > 64) throw new Error('Invalid cipher name.');
  var suffix = null;
  var mode = null;
  var algorithm = null;
  if (len >= 6) suffix = name.substring(len - 4);

  switch (suffix) {
    case '-ECB':
      mode = 'ECB';
      break;

    case '-CBC':
      mode = 'CBC';
      break;

    case '-CTR':
      mode = 'CTR';
      break;

    case '-CFB':
      mode = 'CFB';
      break;

    case '-OFB':
      mode = 'OFB';
      break;

    case '-GCM':
      mode = 'GCM';
      break;

    default:
      suffix = null;
      break;
  }

  if (suffix) algorithm = name.substring(0, len - 4);else algorithm = name;
  if (!ciphers.hasOwnProperty(algorithm)) throw new Error("Unknown cipher: ".concat(name, "."));

  if (mode === 'GCM') {
    var size = ciphers[algorithm][0];
    if (size !== 16) throw new Error("Unsupported mode: ".concat(mode, "-").concat(size * 8, "."));
  }

  return [name, algorithm, mode];
}

function info(cipher) {
  var [name, algorithm, mode] = parse(cipher);
  var [blockSize, keySize] = ciphers[algorithm];
  var ivSize = blockSize;
  if (!mode || mode === 'ECB') ivSize = 0;
  return new CipherInfo(name, algorithm, mode, blockSize, keySize, ivSize);
}

function get$1(cipher) {
  var c = info(cipher);
  if (!c.mode) throw new Error('No mode provided for cipher name.');
  return c;
}

function has(cipher) {
  assert_1(typeof cipher === 'string');

  try {
    var mode = parse(cipher)[2];
    return mode != null;
  } catch (e) {
    return false;
  }
}
/*
 * Expose
 */


var info_1 = info;
var get_1$1 = get$1;
var has_1 = has;
var ciphers_1 = {
  info: info_1,
  get: get_1$1,
  has: has_1
};

/*
 * Constants
 */


var SIGMA$2 = new Uint32Array([0xa09e667f, 0x3bcc908b, 0xb67ae858, 0x4caa73b2, 0xc6ef372f, 0xe94f82be, 0x54ff53a5, 0xf1d36f1c, 0x10e527fa, 0xde682d1d, 0xb05688c2, 0xb3e6c1fd]);
var S1$1 = new Uint32Array([0x70707000, 0x82828200, 0x2c2c2c00, 0xececec00, 0xb3b3b300, 0x27272700, 0xc0c0c000, 0xe5e5e500, 0xe4e4e400, 0x85858500, 0x57575700, 0x35353500, 0xeaeaea00, 0x0c0c0c00, 0xaeaeae00, 0x41414100, 0x23232300, 0xefefef00, 0x6b6b6b00, 0x93939300, 0x45454500, 0x19191900, 0xa5a5a500, 0x21212100, 0xededed00, 0x0e0e0e00, 0x4f4f4f00, 0x4e4e4e00, 0x1d1d1d00, 0x65656500, 0x92929200, 0xbdbdbd00, 0x86868600, 0xb8b8b800, 0xafafaf00, 0x8f8f8f00, 0x7c7c7c00, 0xebebeb00, 0x1f1f1f00, 0xcecece00, 0x3e3e3e00, 0x30303000, 0xdcdcdc00, 0x5f5f5f00, 0x5e5e5e00, 0xc5c5c500, 0x0b0b0b00, 0x1a1a1a00, 0xa6a6a600, 0xe1e1e100, 0x39393900, 0xcacaca00, 0xd5d5d500, 0x47474700, 0x5d5d5d00, 0x3d3d3d00, 0xd9d9d900, 0x01010100, 0x5a5a5a00, 0xd6d6d600, 0x51515100, 0x56565600, 0x6c6c6c00, 0x4d4d4d00, 0x8b8b8b00, 0x0d0d0d00, 0x9a9a9a00, 0x66666600, 0xfbfbfb00, 0xcccccc00, 0xb0b0b000, 0x2d2d2d00, 0x74747400, 0x12121200, 0x2b2b2b00, 0x20202000, 0xf0f0f000, 0xb1b1b100, 0x84848400, 0x99999900, 0xdfdfdf00, 0x4c4c4c00, 0xcbcbcb00, 0xc2c2c200, 0x34343400, 0x7e7e7e00, 0x76767600, 0x05050500, 0x6d6d6d00, 0xb7b7b700, 0xa9a9a900, 0x31313100, 0xd1d1d100, 0x17171700, 0x04040400, 0xd7d7d700, 0x14141400, 0x58585800, 0x3a3a3a00, 0x61616100, 0xdedede00, 0x1b1b1b00, 0x11111100, 0x1c1c1c00, 0x32323200, 0x0f0f0f00, 0x9c9c9c00, 0x16161600, 0x53535300, 0x18181800, 0xf2f2f200, 0x22222200, 0xfefefe00, 0x44444400, 0xcfcfcf00, 0xb2b2b200, 0xc3c3c300, 0xb5b5b500, 0x7a7a7a00, 0x91919100, 0x24242400, 0x08080800, 0xe8e8e800, 0xa8a8a800, 0x60606000, 0xfcfcfc00, 0x69696900, 0x50505000, 0xaaaaaa00, 0xd0d0d000, 0xa0a0a000, 0x7d7d7d00, 0xa1a1a100, 0x89898900, 0x62626200, 0x97979700, 0x54545400, 0x5b5b5b00, 0x1e1e1e00, 0x95959500, 0xe0e0e000, 0xffffff00, 0x64646400, 0xd2d2d200, 0x10101000, 0xc4c4c400, 0x00000000, 0x48484800, 0xa3a3a300, 0xf7f7f700, 0x75757500, 0xdbdbdb00, 0x8a8a8a00, 0x03030300, 0xe6e6e600, 0xdadada00, 0x09090900, 0x3f3f3f00, 0xdddddd00, 0x94949400, 0x87878700, 0x5c5c5c00, 0x83838300, 0x02020200, 0xcdcdcd00, 0x4a4a4a00, 0x90909000, 0x33333300, 0x73737300, 0x67676700, 0xf6f6f600, 0xf3f3f300, 0x9d9d9d00, 0x7f7f7f00, 0xbfbfbf00, 0xe2e2e200, 0x52525200, 0x9b9b9b00, 0xd8d8d800, 0x26262600, 0xc8c8c800, 0x37373700, 0xc6c6c600, 0x3b3b3b00, 0x81818100, 0x96969600, 0x6f6f6f00, 0x4b4b4b00, 0x13131300, 0xbebebe00, 0x63636300, 0x2e2e2e00, 0xe9e9e900, 0x79797900, 0xa7a7a700, 0x8c8c8c00, 0x9f9f9f00, 0x6e6e6e00, 0xbcbcbc00, 0x8e8e8e00, 0x29292900, 0xf5f5f500, 0xf9f9f900, 0xb6b6b600, 0x2f2f2f00, 0xfdfdfd00, 0xb4b4b400, 0x59595900, 0x78787800, 0x98989800, 0x06060600, 0x6a6a6a00, 0xe7e7e700, 0x46464600, 0x71717100, 0xbababa00, 0xd4d4d400, 0x25252500, 0xababab00, 0x42424200, 0x88888800, 0xa2a2a200, 0x8d8d8d00, 0xfafafa00, 0x72727200, 0x07070700, 0xb9b9b900, 0x55555500, 0xf8f8f800, 0xeeeeee00, 0xacacac00, 0x0a0a0a00, 0x36363600, 0x49494900, 0x2a2a2a00, 0x68686800, 0x3c3c3c00, 0x38383800, 0xf1f1f100, 0xa4a4a400, 0x40404000, 0x28282800, 0xd3d3d300, 0x7b7b7b00, 0xbbbbbb00, 0xc9c9c900, 0x43434300, 0xc1c1c100, 0x15151500, 0xe3e3e300, 0xadadad00, 0xf4f4f400, 0x77777700, 0xc7c7c700, 0x80808000, 0x9e9e9e00]);
var S2$1 = new Uint32Array([0x00e0e0e0, 0x00050505, 0x00585858, 0x00d9d9d9, 0x00676767, 0x004e4e4e, 0x00818181, 0x00cbcbcb, 0x00c9c9c9, 0x000b0b0b, 0x00aeaeae, 0x006a6a6a, 0x00d5d5d5, 0x00181818, 0x005d5d5d, 0x00828282, 0x00464646, 0x00dfdfdf, 0x00d6d6d6, 0x00272727, 0x008a8a8a, 0x00323232, 0x004b4b4b, 0x00424242, 0x00dbdbdb, 0x001c1c1c, 0x009e9e9e, 0x009c9c9c, 0x003a3a3a, 0x00cacaca, 0x00252525, 0x007b7b7b, 0x000d0d0d, 0x00717171, 0x005f5f5f, 0x001f1f1f, 0x00f8f8f8, 0x00d7d7d7, 0x003e3e3e, 0x009d9d9d, 0x007c7c7c, 0x00606060, 0x00b9b9b9, 0x00bebebe, 0x00bcbcbc, 0x008b8b8b, 0x00161616, 0x00343434, 0x004d4d4d, 0x00c3c3c3, 0x00727272, 0x00959595, 0x00ababab, 0x008e8e8e, 0x00bababa, 0x007a7a7a, 0x00b3b3b3, 0x00020202, 0x00b4b4b4, 0x00adadad, 0x00a2a2a2, 0x00acacac, 0x00d8d8d8, 0x009a9a9a, 0x00171717, 0x001a1a1a, 0x00353535, 0x00cccccc, 0x00f7f7f7, 0x00999999, 0x00616161, 0x005a5a5a, 0x00e8e8e8, 0x00242424, 0x00565656, 0x00404040, 0x00e1e1e1, 0x00636363, 0x00090909, 0x00333333, 0x00bfbfbf, 0x00989898, 0x00979797, 0x00858585, 0x00686868, 0x00fcfcfc, 0x00ececec, 0x000a0a0a, 0x00dadada, 0x006f6f6f, 0x00535353, 0x00626262, 0x00a3a3a3, 0x002e2e2e, 0x00080808, 0x00afafaf, 0x00282828, 0x00b0b0b0, 0x00747474, 0x00c2c2c2, 0x00bdbdbd, 0x00363636, 0x00222222, 0x00383838, 0x00646464, 0x001e1e1e, 0x00393939, 0x002c2c2c, 0x00a6a6a6, 0x00303030, 0x00e5e5e5, 0x00444444, 0x00fdfdfd, 0x00888888, 0x009f9f9f, 0x00656565, 0x00878787, 0x006b6b6b, 0x00f4f4f4, 0x00232323, 0x00484848, 0x00101010, 0x00d1d1d1, 0x00515151, 0x00c0c0c0, 0x00f9f9f9, 0x00d2d2d2, 0x00a0a0a0, 0x00555555, 0x00a1a1a1, 0x00414141, 0x00fafafa, 0x00434343, 0x00131313, 0x00c4c4c4, 0x002f2f2f, 0x00a8a8a8, 0x00b6b6b6, 0x003c3c3c, 0x002b2b2b, 0x00c1c1c1, 0x00ffffff, 0x00c8c8c8, 0x00a5a5a5, 0x00202020, 0x00898989, 0x00000000, 0x00909090, 0x00474747, 0x00efefef, 0x00eaeaea, 0x00b7b7b7, 0x00151515, 0x00060606, 0x00cdcdcd, 0x00b5b5b5, 0x00121212, 0x007e7e7e, 0x00bbbbbb, 0x00292929, 0x000f0f0f, 0x00b8b8b8, 0x00070707, 0x00040404, 0x009b9b9b, 0x00949494, 0x00212121, 0x00666666, 0x00e6e6e6, 0x00cecece, 0x00ededed, 0x00e7e7e7, 0x003b3b3b, 0x00fefefe, 0x007f7f7f, 0x00c5c5c5, 0x00a4a4a4, 0x00373737, 0x00b1b1b1, 0x004c4c4c, 0x00919191, 0x006e6e6e, 0x008d8d8d, 0x00767676, 0x00030303, 0x002d2d2d, 0x00dedede, 0x00969696, 0x00262626, 0x007d7d7d, 0x00c6c6c6, 0x005c5c5c, 0x00d3d3d3, 0x00f2f2f2, 0x004f4f4f, 0x00191919, 0x003f3f3f, 0x00dcdcdc, 0x00797979, 0x001d1d1d, 0x00525252, 0x00ebebeb, 0x00f3f3f3, 0x006d6d6d, 0x005e5e5e, 0x00fbfbfb, 0x00696969, 0x00b2b2b2, 0x00f0f0f0, 0x00313131, 0x000c0c0c, 0x00d4d4d4, 0x00cfcfcf, 0x008c8c8c, 0x00e2e2e2, 0x00757575, 0x00a9a9a9, 0x004a4a4a, 0x00575757, 0x00848484, 0x00111111, 0x00454545, 0x001b1b1b, 0x00f5f5f5, 0x00e4e4e4, 0x000e0e0e, 0x00737373, 0x00aaaaaa, 0x00f1f1f1, 0x00dddddd, 0x00595959, 0x00141414, 0x006c6c6c, 0x00929292, 0x00545454, 0x00d0d0d0, 0x00787878, 0x00707070, 0x00e3e3e3, 0x00494949, 0x00808080, 0x00505050, 0x00a7a7a7, 0x00f6f6f6, 0x00777777, 0x00939393, 0x00868686, 0x00838383, 0x002a2a2a, 0x00c7c7c7, 0x005b5b5b, 0x00e9e9e9, 0x00eeeeee, 0x008f8f8f, 0x00010101, 0x003d3d3d]);
var S3$1 = new Uint32Array([0x38003838, 0x41004141, 0x16001616, 0x76007676, 0xd900d9d9, 0x93009393, 0x60006060, 0xf200f2f2, 0x72007272, 0xc200c2c2, 0xab00abab, 0x9a009a9a, 0x75007575, 0x06000606, 0x57005757, 0xa000a0a0, 0x91009191, 0xf700f7f7, 0xb500b5b5, 0xc900c9c9, 0xa200a2a2, 0x8c008c8c, 0xd200d2d2, 0x90009090, 0xf600f6f6, 0x07000707, 0xa700a7a7, 0x27002727, 0x8e008e8e, 0xb200b2b2, 0x49004949, 0xde00dede, 0x43004343, 0x5c005c5c, 0xd700d7d7, 0xc700c7c7, 0x3e003e3e, 0xf500f5f5, 0x8f008f8f, 0x67006767, 0x1f001f1f, 0x18001818, 0x6e006e6e, 0xaf00afaf, 0x2f002f2f, 0xe200e2e2, 0x85008585, 0x0d000d0d, 0x53005353, 0xf000f0f0, 0x9c009c9c, 0x65006565, 0xea00eaea, 0xa300a3a3, 0xae00aeae, 0x9e009e9e, 0xec00ecec, 0x80008080, 0x2d002d2d, 0x6b006b6b, 0xa800a8a8, 0x2b002b2b, 0x36003636, 0xa600a6a6, 0xc500c5c5, 0x86008686, 0x4d004d4d, 0x33003333, 0xfd00fdfd, 0x66006666, 0x58005858, 0x96009696, 0x3a003a3a, 0x09000909, 0x95009595, 0x10001010, 0x78007878, 0xd800d8d8, 0x42004242, 0xcc00cccc, 0xef00efef, 0x26002626, 0xe500e5e5, 0x61006161, 0x1a001a1a, 0x3f003f3f, 0x3b003b3b, 0x82008282, 0xb600b6b6, 0xdb00dbdb, 0xd400d4d4, 0x98009898, 0xe800e8e8, 0x8b008b8b, 0x02000202, 0xeb00ebeb, 0x0a000a0a, 0x2c002c2c, 0x1d001d1d, 0xb000b0b0, 0x6f006f6f, 0x8d008d8d, 0x88008888, 0x0e000e0e, 0x19001919, 0x87008787, 0x4e004e4e, 0x0b000b0b, 0xa900a9a9, 0x0c000c0c, 0x79007979, 0x11001111, 0x7f007f7f, 0x22002222, 0xe700e7e7, 0x59005959, 0xe100e1e1, 0xda00dada, 0x3d003d3d, 0xc800c8c8, 0x12001212, 0x04000404, 0x74007474, 0x54005454, 0x30003030, 0x7e007e7e, 0xb400b4b4, 0x28002828, 0x55005555, 0x68006868, 0x50005050, 0xbe00bebe, 0xd000d0d0, 0xc400c4c4, 0x31003131, 0xcb00cbcb, 0x2a002a2a, 0xad00adad, 0x0f000f0f, 0xca00caca, 0x70007070, 0xff00ffff, 0x32003232, 0x69006969, 0x08000808, 0x62006262, 0x00000000, 0x24002424, 0xd100d1d1, 0xfb00fbfb, 0xba00baba, 0xed00eded, 0x45004545, 0x81008181, 0x73007373, 0x6d006d6d, 0x84008484, 0x9f009f9f, 0xee00eeee, 0x4a004a4a, 0xc300c3c3, 0x2e002e2e, 0xc100c1c1, 0x01000101, 0xe600e6e6, 0x25002525, 0x48004848, 0x99009999, 0xb900b9b9, 0xb300b3b3, 0x7b007b7b, 0xf900f9f9, 0xce00cece, 0xbf00bfbf, 0xdf00dfdf, 0x71007171, 0x29002929, 0xcd00cdcd, 0x6c006c6c, 0x13001313, 0x64006464, 0x9b009b9b, 0x63006363, 0x9d009d9d, 0xc000c0c0, 0x4b004b4b, 0xb700b7b7, 0xa500a5a5, 0x89008989, 0x5f005f5f, 0xb100b1b1, 0x17001717, 0xf400f4f4, 0xbc00bcbc, 0xd300d3d3, 0x46004646, 0xcf00cfcf, 0x37003737, 0x5e005e5e, 0x47004747, 0x94009494, 0xfa00fafa, 0xfc00fcfc, 0x5b005b5b, 0x97009797, 0xfe00fefe, 0x5a005a5a, 0xac00acac, 0x3c003c3c, 0x4c004c4c, 0x03000303, 0x35003535, 0xf300f3f3, 0x23002323, 0xb800b8b8, 0x5d005d5d, 0x6a006a6a, 0x92009292, 0xd500d5d5, 0x21002121, 0x44004444, 0x51005151, 0xc600c6c6, 0x7d007d7d, 0x39003939, 0x83008383, 0xdc00dcdc, 0xaa00aaaa, 0x7c007c7c, 0x77007777, 0x56005656, 0x05000505, 0x1b001b1b, 0xa400a4a4, 0x15001515, 0x34003434, 0x1e001e1e, 0x1c001c1c, 0xf800f8f8, 0x52005252, 0x20002020, 0x14001414, 0xe900e9e9, 0xbd00bdbd, 0xdd00dddd, 0xe400e4e4, 0xa100a1a1, 0xe000e0e0, 0x8a008a8a, 0xf100f1f1, 0xd600d6d6, 0x7a007a7a, 0xbb00bbbb, 0xe300e3e3, 0x40004040, 0x4f004f4f]);
var S4 = new Uint32Array([0x70700070, 0x2c2c002c, 0xb3b300b3, 0xc0c000c0, 0xe4e400e4, 0x57570057, 0xeaea00ea, 0xaeae00ae, 0x23230023, 0x6b6b006b, 0x45450045, 0xa5a500a5, 0xeded00ed, 0x4f4f004f, 0x1d1d001d, 0x92920092, 0x86860086, 0xafaf00af, 0x7c7c007c, 0x1f1f001f, 0x3e3e003e, 0xdcdc00dc, 0x5e5e005e, 0x0b0b000b, 0xa6a600a6, 0x39390039, 0xd5d500d5, 0x5d5d005d, 0xd9d900d9, 0x5a5a005a, 0x51510051, 0x6c6c006c, 0x8b8b008b, 0x9a9a009a, 0xfbfb00fb, 0xb0b000b0, 0x74740074, 0x2b2b002b, 0xf0f000f0, 0x84840084, 0xdfdf00df, 0xcbcb00cb, 0x34340034, 0x76760076, 0x6d6d006d, 0xa9a900a9, 0xd1d100d1, 0x04040004, 0x14140014, 0x3a3a003a, 0xdede00de, 0x11110011, 0x32320032, 0x9c9c009c, 0x53530053, 0xf2f200f2, 0xfefe00fe, 0xcfcf00cf, 0xc3c300c3, 0x7a7a007a, 0x24240024, 0xe8e800e8, 0x60600060, 0x69690069, 0xaaaa00aa, 0xa0a000a0, 0xa1a100a1, 0x62620062, 0x54540054, 0x1e1e001e, 0xe0e000e0, 0x64640064, 0x10100010, 0x00000000, 0xa3a300a3, 0x75750075, 0x8a8a008a, 0xe6e600e6, 0x09090009, 0xdddd00dd, 0x87870087, 0x83830083, 0xcdcd00cd, 0x90900090, 0x73730073, 0xf6f600f6, 0x9d9d009d, 0xbfbf00bf, 0x52520052, 0xd8d800d8, 0xc8c800c8, 0xc6c600c6, 0x81810081, 0x6f6f006f, 0x13130013, 0x63630063, 0xe9e900e9, 0xa7a700a7, 0x9f9f009f, 0xbcbc00bc, 0x29290029, 0xf9f900f9, 0x2f2f002f, 0xb4b400b4, 0x78780078, 0x06060006, 0xe7e700e7, 0x71710071, 0xd4d400d4, 0xabab00ab, 0x88880088, 0x8d8d008d, 0x72720072, 0xb9b900b9, 0xf8f800f8, 0xacac00ac, 0x36360036, 0x2a2a002a, 0x3c3c003c, 0xf1f100f1, 0x40400040, 0xd3d300d3, 0xbbbb00bb, 0x43430043, 0x15150015, 0xadad00ad, 0x77770077, 0x80800080, 0x82820082, 0xecec00ec, 0x27270027, 0xe5e500e5, 0x85850085, 0x35350035, 0x0c0c000c, 0x41410041, 0xefef00ef, 0x93930093, 0x19190019, 0x21210021, 0x0e0e000e, 0x4e4e004e, 0x65650065, 0xbdbd00bd, 0xb8b800b8, 0x8f8f008f, 0xebeb00eb, 0xcece00ce, 0x30300030, 0x5f5f005f, 0xc5c500c5, 0x1a1a001a, 0xe1e100e1, 0xcaca00ca, 0x47470047, 0x3d3d003d, 0x01010001, 0xd6d600d6, 0x56560056, 0x4d4d004d, 0x0d0d000d, 0x66660066, 0xcccc00cc, 0x2d2d002d, 0x12120012, 0x20200020, 0xb1b100b1, 0x99990099, 0x4c4c004c, 0xc2c200c2, 0x7e7e007e, 0x05050005, 0xb7b700b7, 0x31310031, 0x17170017, 0xd7d700d7, 0x58580058, 0x61610061, 0x1b1b001b, 0x1c1c001c, 0x0f0f000f, 0x16160016, 0x18180018, 0x22220022, 0x44440044, 0xb2b200b2, 0xb5b500b5, 0x91910091, 0x08080008, 0xa8a800a8, 0xfcfc00fc, 0x50500050, 0xd0d000d0, 0x7d7d007d, 0x89890089, 0x97970097, 0x5b5b005b, 0x95950095, 0xffff00ff, 0xd2d200d2, 0xc4c400c4, 0x48480048, 0xf7f700f7, 0xdbdb00db, 0x03030003, 0xdada00da, 0x3f3f003f, 0x94940094, 0x5c5c005c, 0x02020002, 0x4a4a004a, 0x33330033, 0x67670067, 0xf3f300f3, 0x7f7f007f, 0xe2e200e2, 0x9b9b009b, 0x26260026, 0x37370037, 0x3b3b003b, 0x96960096, 0x4b4b004b, 0xbebe00be, 0x2e2e002e, 0x79790079, 0x8c8c008c, 0x6e6e006e, 0x8e8e008e, 0xf5f500f5, 0xb6b600b6, 0xfdfd00fd, 0x59590059, 0x98980098, 0x6a6a006a, 0x46460046, 0xbaba00ba, 0x25250025, 0x42420042, 0xa2a200a2, 0xfafa00fa, 0x07070007, 0x55550055, 0xeeee00ee, 0x0a0a000a, 0x49490049, 0x68680068, 0x38380038, 0xa4a400a4, 0x28280028, 0x7b7b007b, 0xc9c900c9, 0xc1c100c1, 0xe3e300e3, 0xf4f400f4, 0xc7c700c7, 0x9e9e009e]);
/**
 * Camellia128
 */

class Camellia128 {
  constructor() {
    this.key = new Uint32Array(52);
    this.block = new Uint32Array(4);
  }

  get blockSize() {
    return 16;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 16);
    this.keySchedule(key);
    return this;
  }

  keySchedule(key) {
    var s = this.block;
    var k = this.key;
    s[0] = readU32$9(key, 0);
    s[1] = readU32$9(key, 4);
    s[2] = readU32$9(key, 8);
    s[3] = readU32$9(key, 12);
    set4(k, 0, 1, 2, 3, s, 0, 1, 2, 3);
    feis(s, 0, 1, 2, 3, SIGMA$2[0], SIGMA$2[1]);
    feis(s, 2, 3, 0, 1, SIGMA$2[2], SIGMA$2[3]);
    xor4(s, 0, 1, 2, 3, k, 0, 1, 2, 3);
    feis(s, 0, 1, 2, 3, SIGMA$2[4], SIGMA$2[5]);
    feis(s, 2, 3, 0, 1, SIGMA$2[6], SIGMA$2[7]);
    set4(k, 4, 5, 6, 7, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 15); // KA << 15

    set4(k, 12, 13, 14, 15, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 15); // KA << 30

    set4(k, 16, 17, 18, 19, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 15); // KA << 45

    set2(k, 24, 25, s, 0, 1);
    rotl(s, 0, 1, 2, 3, 15); // KA << 60

    set4(k, 28, 29, 30, 31, s, 0, 1, 2, 3);
    rotl(s, 1, 2, 3, 0, 2); // KA << 94

    set4(k, 40, 41, 42, 43, s, 1, 2, 3, 0);
    rotl(s, 1, 2, 3, 0, 17); // KA << 111

    set4(k, 48, 49, 50, 51, s, 1, 2, 3, 0);
    set4(s, 0, 1, 2, 3, k, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 15); // KL << 15

    set4(k, 8, 9, 10, 11, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 30); // KL << 45

    set4(k, 20, 21, 22, 23, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 15); // KL << 60

    set2(k, 26, 27, s, 2, 3);
    rotl(s, 0, 1, 2, 3, 17); // KL << 77

    set4(k, 32, 33, 34, 35, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 17); // KL << 94

    set4(k, 36, 37, 38, 39, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 17); // KL << 111

    set4(k, 44, 45, 46, 47, s, 0, 1, 2, 3);
    return this;
  }

  encrypt(input, ipos, output, opos) {
    var r = this.block;
    var k = this.key;
    r[0] = readU32$9(input, ipos + 0);
    r[1] = readU32$9(input, ipos + 4);
    r[2] = readU32$9(input, ipos + 8);
    r[3] = readU32$9(input, ipos + 12);
    xor4(r, 0, 1, 2, 3, k, 0, 1, 2, 3);
    feis(r, 0, 1, 2, 3, k[4], k[5]);
    feis(r, 2, 3, 0, 1, k[6], k[7]);
    feis(r, 0, 1, 2, 3, k[8], k[9]);
    feis(r, 2, 3, 0, 1, k[10], k[11]);
    feis(r, 0, 1, 2, 3, k[12], k[13]);
    feis(r, 2, 3, 0, 1, k[14], k[15]);
    var t = r[0] & k[16];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[19];
    r[0] ^= r[1] | k[17];
    t = r[2] & k[18];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[20], k[21]);
    feis(r, 2, 3, 0, 1, k[22], k[23]);
    feis(r, 0, 1, 2, 3, k[24], k[25]);
    feis(r, 2, 3, 0, 1, k[26], k[27]);
    feis(r, 0, 1, 2, 3, k[28], k[29]);
    feis(r, 2, 3, 0, 1, k[30], k[31]);
    t = r[0] & k[32];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[35];
    r[0] ^= r[1] | k[33];
    t = r[2] & k[34];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[36], k[37]);
    feis(r, 2, 3, 0, 1, k[38], k[39]);
    feis(r, 0, 1, 2, 3, k[40], k[41]);
    feis(r, 2, 3, 0, 1, k[42], k[43]);
    feis(r, 0, 1, 2, 3, k[44], k[45]);
    feis(r, 2, 3, 0, 1, k[46], k[47]);
    xor4(r, 2, 3, 0, 1, k, 48, 49, 50, 51);
    writeU32$8(output, r[2], opos + 0);
    writeU32$8(output, r[3], opos + 4);
    writeU32$8(output, r[0], opos + 8);
    writeU32$8(output, r[1], opos + 12);
  }

  decrypt(input, ipos, output, opos) {
    var r = this.block;
    var k = this.key;
    r[0] = readU32$9(input, ipos + 0);
    r[1] = readU32$9(input, ipos + 4);
    r[2] = readU32$9(input, ipos + 8);
    r[3] = readU32$9(input, ipos + 12);
    xor4(r, 3, 2, 1, 0, k, 51, 50, 49, 48);
    feis(r, 0, 1, 2, 3, k[46], k[47]);
    feis(r, 2, 3, 0, 1, k[44], k[45]);
    feis(r, 0, 1, 2, 3, k[42], k[43]);
    feis(r, 2, 3, 0, 1, k[40], k[41]);
    feis(r, 0, 1, 2, 3, k[38], k[39]);
    feis(r, 2, 3, 0, 1, k[36], k[37]);
    var t = r[0] & k[34];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[33];
    r[0] ^= r[1] | k[35];
    t = r[2] & k[32];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[30], k[31]);
    feis(r, 2, 3, 0, 1, k[28], k[29]);
    feis(r, 0, 1, 2, 3, k[26], k[27]);
    feis(r, 2, 3, 0, 1, k[24], k[25]);
    feis(r, 0, 1, 2, 3, k[22], k[23]);
    feis(r, 2, 3, 0, 1, k[20], k[21]);
    t = r[0] & k[18];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[17];
    r[0] ^= r[1] | k[19];
    t = r[2] & k[16];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[14], k[15]);
    feis(r, 2, 3, 0, 1, k[12], k[13]);
    feis(r, 0, 1, 2, 3, k[10], k[11]);
    feis(r, 2, 3, 0, 1, k[8], k[9]);
    feis(r, 0, 1, 2, 3, k[6], k[7]);
    feis(r, 2, 3, 0, 1, k[4], k[5]);
    xor4(r, 1, 0, 3, 2, k, 3, 2, 1, 0);
    writeU32$8(output, r[2], opos + 0);
    writeU32$8(output, r[3], opos + 4);
    writeU32$8(output, r[0], opos + 8);
    writeU32$8(output, r[1], opos + 12);
    return this;
  }

  destroy() {
    for (var i = 0; i < 52; i++) {
      this.key[i] = 0;
    }

    for (var _i = 0; _i < 4; _i++) {
      this.block[_i] = 0;
    }

    return this;
  }

}
/**
 * Camellia256
 */


class Camellia256 {
  constructor() {
    this.key = new Uint32Array(68);
    this.block = new Uint32Array(4);
  }

  get blockSize() {
    return 16;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 24 || key.length === 32);
    this.keySchedule(key);
    return this;
  }

  keySchedule(key) {
    var s = this.block;
    var k = this.key;
    k[0] = readU32$9(key, 0);
    k[1] = readU32$9(key, 4);
    k[2] = readU32$9(key, 8);
    k[3] = readU32$9(key, 12);
    k[8] = readU32$9(key, 16);
    k[9] = readU32$9(key, 20);

    if (key.length === 24) {
      k[10] = ~k[8];
      k[11] = ~k[9];
    } else {
      k[10] = readU32$9(key, 24);
      k[11] = readU32$9(key, 28);
    }

    s[0] = k[8] ^ k[0];
    s[1] = k[9] ^ k[1];
    s[2] = k[10] ^ k[2];
    s[3] = k[11] ^ k[3];
    feis(s, 0, 1, 2, 3, SIGMA$2[0], SIGMA$2[1]);
    feis(s, 2, 3, 0, 1, SIGMA$2[2], SIGMA$2[3]);
    xor4(s, 0, 1, 2, 3, k, 0, 1, 2, 3);
    feis(s, 0, 1, 2, 3, SIGMA$2[4], SIGMA$2[5]);
    feis(s, 2, 3, 0, 1, SIGMA$2[6], SIGMA$2[7]);
    set4(k, 12, 13, 14, 15, s, 0, 1, 2, 3);
    xor4(s, 0, 1, 2, 3, k, 8, 9, 10, 11);
    feis(s, 0, 1, 2, 3, SIGMA$2[8], SIGMA$2[9]);
    feis(s, 2, 3, 0, 1, SIGMA$2[10], SIGMA$2[11]);
    set4(k, 4, 5, 6, 7, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 30); // KB << 30

    set4(k, 20, 21, 22, 23, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 30); // KB << 60

    set4(k, 40, 41, 42, 43, s, 0, 1, 2, 3);
    rotl(s, 1, 2, 3, 0, 19); // KB << 111

    set4(k, 64, 65, 66, 67, s, 1, 2, 3, 0);
    set4(s, 0, 1, 2, 3, k, 8, 9, 10, 11);
    rotl(s, 0, 1, 2, 3, 15); // KR << 15

    set4(k, 8, 9, 10, 11, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 15); // KR << 30

    set4(k, 16, 17, 18, 19, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 30); // KR << 60

    set4(k, 36, 37, 38, 39, s, 0, 1, 2, 3);
    rotl(s, 1, 2, 3, 0, 2); // KR << 94

    set4(k, 52, 53, 54, 55, s, 1, 2, 3, 0);
    set4(s, 0, 1, 2, 3, k, 12, 13, 14, 15);
    rotl(s, 0, 1, 2, 3, 15); // KA << 15

    set4(k, 12, 13, 14, 15, s, 0, 1, 2, 3);
    rotl(s, 0, 1, 2, 3, 30); // KA << 45

    set4(k, 28, 29, 30, 31, s, 0, 1, 2, 3); // KA << 77

    set4(k, 48, 49, 50, 51, s, 1, 2, 3, 0);
    rotl(s, 1, 2, 3, 0, 17); // KA << 94

    set4(k, 56, 57, 58, 59, s, 1, 2, 3, 0);
    set4(s, 0, 1, 2, 3, k, 0, 1, 2, 3);
    rotl(s, 1, 2, 3, 0, 13); // KL << 45

    set4(k, 24, 25, 26, 27, s, 1, 2, 3, 0);
    rotl(s, 1, 2, 3, 0, 15); // KL << 60

    set4(k, 32, 33, 34, 35, s, 1, 2, 3, 0);
    rotl(s, 1, 2, 3, 0, 17); // KL << 77

    set4(k, 44, 45, 46, 47, s, 1, 2, 3, 0);
    rotl(s, 2, 3, 0, 1, 2); // KL << 111

    set4(k, 60, 61, 62, 63, s, 2, 3, 0, 1);
    return this;
  }

  encrypt(input, ipos, output, opos) {
    var r = this.block;
    var k = this.key;
    r[0] = readU32$9(input, ipos + 0);
    r[1] = readU32$9(input, ipos + 4);
    r[2] = readU32$9(input, ipos + 8);
    r[3] = readU32$9(input, ipos + 12);
    xor4(r, 0, 1, 2, 3, k, 0, 1, 2, 3);
    feis(r, 0, 1, 2, 3, k[4], k[5]);
    feis(r, 2, 3, 0, 1, k[6], k[7]);
    feis(r, 0, 1, 2, 3, k[8], k[9]);
    feis(r, 2, 3, 0, 1, k[10], k[11]);
    feis(r, 0, 1, 2, 3, k[12], k[13]);
    feis(r, 2, 3, 0, 1, k[14], k[15]);
    var t = r[0] & k[16];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[19];
    r[0] ^= r[1] | k[17];
    t = r[2] & k[18];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[20], k[21]);
    feis(r, 2, 3, 0, 1, k[22], k[23]);
    feis(r, 0, 1, 2, 3, k[24], k[25]);
    feis(r, 2, 3, 0, 1, k[26], k[27]);
    feis(r, 0, 1, 2, 3, k[28], k[29]);
    feis(r, 2, 3, 0, 1, k[30], k[31]);
    t = r[0] & k[32];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[35];
    r[0] ^= r[1] | k[33];
    t = r[2] & k[34];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[36], k[37]);
    feis(r, 2, 3, 0, 1, k[38], k[39]);
    feis(r, 0, 1, 2, 3, k[40], k[41]);
    feis(r, 2, 3, 0, 1, k[42], k[43]);
    feis(r, 0, 1, 2, 3, k[44], k[45]);
    feis(r, 2, 3, 0, 1, k[46], k[47]);
    t = r[0] & k[48];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[51];
    r[0] ^= r[1] | k[49];
    t = r[2] & k[50];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[52], k[53]);
    feis(r, 2, 3, 0, 1, k[54], k[55]);
    feis(r, 0, 1, 2, 3, k[56], k[57]);
    feis(r, 2, 3, 0, 1, k[58], k[59]);
    feis(r, 0, 1, 2, 3, k[60], k[61]);
    feis(r, 2, 3, 0, 1, k[62], k[63]);
    xor4(r, 2, 3, 0, 1, k, 64, 65, 66, 67);
    writeU32$8(output, r[2], opos + 0);
    writeU32$8(output, r[3], opos + 4);
    writeU32$8(output, r[0], opos + 8);
    writeU32$8(output, r[1], opos + 12);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    var r = this.block;
    var k = this.key;
    r[0] = readU32$9(input, ipos + 0);
    r[1] = readU32$9(input, ipos + 4);
    r[2] = readU32$9(input, ipos + 8);
    r[3] = readU32$9(input, ipos + 12);
    xor4(r, 3, 2, 1, 0, k, 67, 66, 65, 64);
    feis(r, 0, 1, 2, 3, k[62], k[63]);
    feis(r, 2, 3, 0, 1, k[60], k[61]);
    feis(r, 0, 1, 2, 3, k[58], k[59]);
    feis(r, 2, 3, 0, 1, k[56], k[57]);
    feis(r, 0, 1, 2, 3, k[54], k[55]);
    feis(r, 2, 3, 0, 1, k[52], k[53]);
    var t = r[0] & k[50];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[49];
    r[0] ^= r[1] | k[51];
    t = r[2] & k[48];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[46], k[47]);
    feis(r, 2, 3, 0, 1, k[44], k[45]);
    feis(r, 0, 1, 2, 3, k[42], k[43]);
    feis(r, 2, 3, 0, 1, k[40], k[41]);
    feis(r, 0, 1, 2, 3, k[38], k[39]);
    feis(r, 2, 3, 0, 1, k[36], k[37]);
    t = r[0] & k[34];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[33];
    r[0] ^= r[1] | k[35];
    t = r[2] & k[32];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[30], k[31]);
    feis(r, 2, 3, 0, 1, k[28], k[29]);
    feis(r, 0, 1, 2, 3, k[26], k[27]);
    feis(r, 2, 3, 0, 1, k[24], k[25]);
    feis(r, 0, 1, 2, 3, k[22], k[23]);
    feis(r, 2, 3, 0, 1, k[20], k[21]);
    t = r[0] & k[18];
    r[1] ^= t << 1 | t >>> 32 - 1;
    r[2] ^= r[3] | k[17];
    r[0] ^= r[1] | k[19];
    t = r[2] & k[16];
    r[3] ^= t << 1 | t >>> 32 - 1;
    feis(r, 0, 1, 2, 3, k[14], k[15]);
    feis(r, 2, 3, 0, 1, k[12], k[13]);
    feis(r, 0, 1, 2, 3, k[10], k[11]);
    feis(r, 2, 3, 0, 1, k[8], k[9]);
    feis(r, 0, 1, 2, 3, k[6], k[7]);
    feis(r, 2, 3, 0, 1, k[4], k[5]);
    xor4(r, 1, 0, 3, 2, k, 3, 2, 1, 0);
    writeU32$8(output, r[2], opos + 0);
    writeU32$8(output, r[3], opos + 4);
    writeU32$8(output, r[0], opos + 8);
    writeU32$8(output, r[1], opos + 12);
    return this;
  }

  destroy() {
    for (var i = 0; i < 68; i++) {
      this.key[i] = 0;
    }

    for (var _i2 = 0; _i2 < 4; _i2++) {
      this.block[_i2] = 0;
    }

    return this;
  }

}
/**
 * Camellia
 */


class Camellia {
  constructor(bits) {
    assert_1(bits >>> 0 === bits);
    this.bits = bits;
    this.ctx = null;

    switch (bits) {
      case 128:
        this.ctx = new Camellia128();
        break;

      case 192:
      case 256:
        this.ctx = new Camellia256();
        break;

      default:
        throw new Error('Invalid key size.');
    }
  }

  get blockSize() {
    return this.ctx.blockSize;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === this.bits >>> 3);
    this.ctx.init(key);
    return this;
  }

  encrypt(input, ipos, output, opos) {
    this.ctx.encrypt(input, ipos, output, opos);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    this.ctx.decrypt(input, ipos, output, opos);
    return this;
  }

  destroy() {
    this.ctx.destroy();
    return this;
  }

}
/*
 * Helpers
 */


function feis(r, i0, i1, i2, i3, k0, k1) {
  k0 ^= r[i0];
  k1 ^= r[i1];
  var t = 0;
  t = S4[k0 & 0xff];
  t ^= S3$1[k0 >>> 8 & 0xff];
  t ^= S2$1[k0 >>> 16 & 0xff];
  t ^= S1$1[k0 >>> 24 & 0xff];
  r[i3] ^= t >>> 8 | t << 32 - 8;
  k0 = t;
  k0 ^= S1$1[k1 & 0xff];
  k0 ^= S4[k1 >>> 8 & 0xff];
  k0 ^= S3$1[k1 >>> 16 & 0xff];
  k0 ^= S2$1[k1 >>> 24 & 0xff];
  r[i2] ^= k0;
  r[i3] ^= k0;
}

function rotl(r, i0, i1, i2, i3, n) {
  var t = r[i0] >>> 32 - n;
  r[i0] = r[i0] << n | r[i1] >>> 32 - n;
  r[i1] = r[i1] << n | r[i2] >>> 32 - n;
  r[i2] = r[i2] << n | r[i3] >>> 32 - n;
  r[i3] = r[i3] << n | t;
}

function set2(x, x0, x1, y, y0, y1) {
  x[x0] = y[y0];
  x[x1] = y[y1];
}

function set4(x, x0, x1, x2, x3, y, y0, y1, y2, y3) {
  x[x0] = y[y0];
  x[x1] = y[y1];
  x[x2] = y[y2];
  x[x3] = y[y3];
}

function xor4(x, x0, x1, x2, x3, y, y0, y1, y2, y3) {
  x[x0] ^= y[y0];
  x[x1] ^= y[y1];
  x[x2] ^= y[y2];
  x[x3] ^= y[y3];
}

function readU32$9(data, pos) {
  return data[pos++] * 0x1000000 + data[pos++] * 0x10000 + data[pos++] * 0x100 + data[pos];
}

function writeU32$8(data, value, pos) {
  data[pos++] = value >>> 24;
  data[pos++] = value >>> 16;
  data[pos++] = value >>> 8;
  data[pos++] = value >>> 0;
  return pos;
}
/*
 * Expose
 */


var camellia = Camellia;

/*
 * Constants
 */


var S = [new Uint32Array([0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f, 0x3f258c7a, 0x1e213f2f, 0x9c004dd3, 0x6003e540, 0xcf9fc949, 0xbfd4af27, 0x88bbbdb5, 0xe2034090, 0x98d09675, 0x6e63a0e0, 0x15c361d2, 0xc2e7661d, 0x22d4ff8e, 0x28683b6f, 0xc07fd059, 0xff2379c8, 0x775f50e2, 0x43c340d3, 0xdf2f8656, 0x887ca41a, 0xa2d2bd2d, 0xa1c9e0d6, 0x346c4819, 0x61b76d87, 0x22540f2f, 0x2abe32e1, 0xaa54166b, 0x22568e3a, 0xa2d341d0, 0x66db40c8, 0xa784392f, 0x004dff2f, 0x2db9d2de, 0x97943fac, 0x4a97c1d8, 0x527644b7, 0xb5f437a7, 0xb82cbaef, 0xd751d159, 0x6ff7f0ed, 0x5a097a1f, 0x827b68d0, 0x90ecf52e, 0x22b0c054, 0xbc8e5935, 0x4b6d2f7f, 0x50bb64a2, 0xd2664910, 0xbee5812d, 0xb7332290, 0xe93b159f, 0xb48ee411, 0x4bff345d, 0xfd45c240, 0xad31973f, 0xc4f6d02e, 0x55fc8165, 0xd5b1caad, 0xa1ac2dae, 0xa2d4b76d, 0xc19b0c50, 0x882240f2, 0x0c6e4f38, 0xa4e4bfd7, 0x4f5ba272, 0x564c1d2f, 0xc59c5319, 0xb949e354, 0xb04669fe, 0xb1b6ab8a, 0xc71358dd, 0x6385c545, 0x110f935d, 0x57538ad5, 0x6a390493, 0xe63d37e0, 0x2a54f6b3, 0x3a787d5f, 0x6276a0b5, 0x19a6fcdf, 0x7a42206a, 0x29f9d4d5, 0xf61b1891, 0xbb72275e, 0xaa508167, 0x38901091, 0xc6b505eb, 0x84c7cb8c, 0x2ad75a0f, 0x874a1427, 0xa2d1936b, 0x2ad286af, 0xaa56d291, 0xd7894360, 0x425c750d, 0x93b39e26, 0x187184c9, 0x6c00b32d, 0x73e2bb14, 0xa0bebc3c, 0x54623779, 0x64459eab, 0x3f328b82, 0x7718cf82, 0x59a2cea6, 0x04ee002e, 0x89fe78e6, 0x3fab0950, 0x325ff6c2, 0x81383f05, 0x6963c5c8, 0x76cb5ad6, 0xd49974c9, 0xca180dcf, 0x380782d5, 0xc7fa5cf6, 0x8ac31511, 0x35e79e13, 0x47da91d0, 0xf40f9086, 0xa7e2419e, 0x31366241, 0x051ef495, 0xaa573b04, 0x4a805d8d, 0x548300d0, 0x00322a3c, 0xbf64cddf, 0xba57a68e, 0x75c6372b, 0x50afd341, 0xa7c13275, 0x915a0bf5, 0x6b54bfab, 0x2b0b1426, 0xab4cc9d7, 0x449ccd82, 0xf7fbf265, 0xab85c5f3, 0x1b55db94, 0xaad4e324, 0xcfa4bd3f, 0x2deaa3e2, 0x9e204d02, 0xc8bd25ac, 0xeadf55b3, 0xd5bd9e98, 0xe31231b2, 0x2ad5ad6c, 0x954329de, 0xadbe4528, 0xd8710f69, 0xaa51c90f, 0xaa786bf6, 0x22513f1e, 0xaa51a79b, 0x2ad344cc, 0x7b5a41f0, 0xd37cfbad, 0x1b069505, 0x41ece491, 0xb4c332e6, 0x032268d4, 0xc9600acc, 0xce387e6d, 0xbf6bb16c, 0x6a70fb78, 0x0d03d9c9, 0xd4df39de, 0xe01063da, 0x4736f464, 0x5ad328d8, 0xb347cc96, 0x75bb0fc3, 0x98511bfb, 0x4ffbcc35, 0xb58bcf6a, 0xe11f0abc, 0xbfc5fe4a, 0xa70aec10, 0xac39570a, 0x3f04442f, 0x6188b153, 0xe0397a2e, 0x5727cb79, 0x9ceb418f, 0x1cacd68d, 0x2ad37c96, 0x0175cb9d, 0xc69dff09, 0xc75b65f0, 0xd9db40d8, 0xec0e7779, 0x4744ead4, 0xb11c3274, 0xdd24cb9e, 0x7e1c54bd, 0xf01144f9, 0xd2240eb1, 0x9675b3fd, 0xa3ac3755, 0xd47c27af, 0x51c85f4d, 0x56907596, 0xa5bb15e6, 0x580304f0, 0xca042cf1, 0x011a37ea, 0x8dbfaadb, 0x35ba3e4a, 0x3526ffa0, 0xc37b4d09, 0xbc306ed9, 0x98a52666, 0x5648f725, 0xff5e569d, 0x0ced63d0, 0x7c63b2cf, 0x700b45e1, 0xd5ea50f1, 0x85a92872, 0xaf1fbda7, 0xd4234870, 0xa7870bf3, 0x2d3b4d79, 0x42e04198, 0x0cd0ede7, 0x26470db8, 0xf881814c, 0x474d6ad7, 0x7c0c5e5c, 0xd1231959, 0x381b7298, 0xf5d2f4db, 0xab838653, 0x6e2f1e23, 0x83719c9e, 0xbd91e046, 0x9a56456e, 0xdc39200c, 0x20c8c571, 0x962bda1c, 0xe1e696ff, 0xb141ab08, 0x7cca89b9, 0x1a69e783, 0x02cc4843, 0xa2f7c579, 0x429ef47d, 0x427b169c, 0x5ac9f049, 0xdd8f0f00, 0x5c8165bf]), new Uint32Array([0x1f201094, 0xef0ba75b, 0x69e3cf7e, 0x393f4380, 0xfe61cf7a, 0xeec5207a, 0x55889c94, 0x72fc0651, 0xada7ef79, 0x4e1d7235, 0xd55a63ce, 0xde0436ba, 0x99c430ef, 0x5f0c0794, 0x18dcdb7d, 0xa1d6eff3, 0xa0b52f7b, 0x59e83605, 0xee15b094, 0xe9ffd909, 0xdc440086, 0xef944459, 0xba83ccb3, 0xe0c3cdfb, 0xd1da4181, 0x3b092ab1, 0xf997f1c1, 0xa5e6cf7b, 0x01420ddb, 0xe4e7ef5b, 0x25a1ff41, 0xe180f806, 0x1fc41080, 0x179bee7a, 0xd37ac6a9, 0xfe5830a4, 0x98de8b7f, 0x77e83f4e, 0x79929269, 0x24fa9f7b, 0xe113c85b, 0xacc40083, 0xd7503525, 0xf7ea615f, 0x62143154, 0x0d554b63, 0x5d681121, 0xc866c359, 0x3d63cf73, 0xcee234c0, 0xd4d87e87, 0x5c672b21, 0x071f6181, 0x39f7627f, 0x361e3084, 0xe4eb573b, 0x602f64a4, 0xd63acd9c, 0x1bbc4635, 0x9e81032d, 0x2701f50c, 0x99847ab4, 0xa0e3df79, 0xba6cf38c, 0x10843094, 0x2537a95e, 0xf46f6ffe, 0xa1ff3b1f, 0x208cfb6a, 0x8f458c74, 0xd9e0a227, 0x4ec73a34, 0xfc884f69, 0x3e4de8df, 0xef0e0088, 0x3559648d, 0x8a45388c, 0x1d804366, 0x721d9bfd, 0xa58684bb, 0xe8256333, 0x844e8212, 0x128d8098, 0xfed33fb4, 0xce280ae1, 0x27e19ba5, 0xd5a6c252, 0xe49754bd, 0xc5d655dd, 0xeb667064, 0x77840b4d, 0xa1b6a801, 0x84db26a9, 0xe0b56714, 0x21f043b7, 0xe5d05860, 0x54f03084, 0x066ff472, 0xa31aa153, 0xdadc4755, 0xb5625dbf, 0x68561be6, 0x83ca6b94, 0x2d6ed23b, 0xeccf01db, 0xa6d3d0ba, 0xb6803d5c, 0xaf77a709, 0x33b4a34c, 0x397bc8d6, 0x5ee22b95, 0x5f0e5304, 0x81ed6f61, 0x20e74364, 0xb45e1378, 0xde18639b, 0x881ca122, 0xb96726d1, 0x8049a7e8, 0x22b7da7b, 0x5e552d25, 0x5272d237, 0x79d2951c, 0xc60d894c, 0x488cb402, 0x1ba4fe5b, 0xa4b09f6b, 0x1ca815cf, 0xa20c3005, 0x8871df63, 0xb9de2fcb, 0x0cc6c9e9, 0x0beeff53, 0xe3214517, 0xb4542835, 0x9f63293c, 0xee41e729, 0x6e1d2d7c, 0x50045286, 0x1e6685f3, 0xf33401c6, 0x30a22c95, 0x31a70850, 0x60930f13, 0x73f98417, 0xa1269859, 0xec645c44, 0x52c877a9, 0xcdff33a6, 0xa02b1741, 0x7cbad9a2, 0x2180036f, 0x50d99c08, 0xcb3f4861, 0xc26bd765, 0x64a3f6ab, 0x80342676, 0x25a75e7b, 0xe4e6d1fc, 0x20c710e6, 0xcdf0b680, 0x17844d3b, 0x31eef84d, 0x7e0824e4, 0x2ccb49eb, 0x846a3bae, 0x8ff77888, 0xee5d60f6, 0x7af75673, 0x2fdd5cdb, 0xa11631c1, 0x30f66f43, 0xb3faec54, 0x157fd7fa, 0xef8579cc, 0xd152de58, 0xdb2ffd5e, 0x8f32ce19, 0x306af97a, 0x02f03ef8, 0x99319ad5, 0xc242fa0f, 0xa7e3ebb0, 0xc68e4906, 0xb8da230c, 0x80823028, 0xdcdef3c8, 0xd35fb171, 0x088a1bc8, 0xbec0c560, 0x61a3c9e8, 0xbca8f54d, 0xc72feffa, 0x22822e99, 0x82c570b4, 0xd8d94e89, 0x8b1c34bc, 0x301e16e6, 0x273be979, 0xb0ffeaa6, 0x61d9b8c6, 0x00b24869, 0xb7ffce3f, 0x08dc283b, 0x43daf65a, 0xf7e19798, 0x7619b72f, 0x8f1c9ba4, 0xdc8637a0, 0x16a7d3b1, 0x9fc393b7, 0xa7136eeb, 0xc6bcc63e, 0x1a513742, 0xef6828bc, 0x520365d6, 0x2d6a77ab, 0x3527ed4b, 0x821fd216, 0x095c6e2e, 0xdb92f2fb, 0x5eea29cb, 0x145892f5, 0x91584f7f, 0x5483697b, 0x2667a8cc, 0x85196048, 0x8c4bacea, 0x833860d4, 0x0d23e0f9, 0x6c387e8a, 0x0ae6d249, 0xb284600c, 0xd835731d, 0xdcb1c647, 0xac4c56ea, 0x3ebd81b3, 0x230eabb0, 0x6438bc87, 0xf0b5b1fa, 0x8f5ea2b3, 0xfc184642, 0x0a036b7a, 0x4fb089bd, 0x649da589, 0xa345415e, 0x5c038323, 0x3e5d3bb9, 0x43d79572, 0x7e6dd07c, 0x06dfdf1e, 0x6c6cc4ef, 0x7160a539, 0x73bfbe70, 0x83877605, 0x4523ecf1]), new Uint32Array([0x8defc240, 0x25fa5d9f, 0xeb903dbf, 0xe810c907, 0x47607fff, 0x369fe44b, 0x8c1fc644, 0xaececa90, 0xbeb1f9bf, 0xeefbcaea, 0xe8cf1950, 0x51df07ae, 0x920e8806, 0xf0ad0548, 0xe13c8d83, 0x927010d5, 0x11107d9f, 0x07647db9, 0xb2e3e4d4, 0x3d4f285e, 0xb9afa820, 0xfade82e0, 0xa067268b, 0x8272792e, 0x553fb2c0, 0x489ae22b, 0xd4ef9794, 0x125e3fbc, 0x21fffcee, 0x825b1bfd, 0x9255c5ed, 0x1257a240, 0x4e1a8302, 0xbae07fff, 0x528246e7, 0x8e57140e, 0x3373f7bf, 0x8c9f8188, 0xa6fc4ee8, 0xc982b5a5, 0xa8c01db7, 0x579fc264, 0x67094f31, 0xf2bd3f5f, 0x40fff7c1, 0x1fb78dfc, 0x8e6bd2c1, 0x437be59b, 0x99b03dbf, 0xb5dbc64b, 0x638dc0e6, 0x55819d99, 0xa197c81c, 0x4a012d6e, 0xc5884a28, 0xccc36f71, 0xb843c213, 0x6c0743f1, 0x8309893c, 0x0feddd5f, 0x2f7fe850, 0xd7c07f7e, 0x02507fbf, 0x5afb9a04, 0xa747d2d0, 0x1651192e, 0xaf70bf3e, 0x58c31380, 0x5f98302e, 0x727cc3c4, 0x0a0fb402, 0x0f7fef82, 0x8c96fdad, 0x5d2c2aae, 0x8ee99a49, 0x50da88b8, 0x8427f4a0, 0x1eac5790, 0x796fb449, 0x8252dc15, 0xefbd7d9b, 0xa672597d, 0xada840d8, 0x45f54504, 0xfa5d7403, 0xe83ec305, 0x4f91751a, 0x925669c2, 0x23efe941, 0xa903f12e, 0x60270df2, 0x0276e4b6, 0x94fd6574, 0x927985b2, 0x8276dbcb, 0x02778176, 0xf8af918d, 0x4e48f79e, 0x8f616ddf, 0xe29d840e, 0x842f7d83, 0x340ce5c8, 0x96bbb682, 0x93b4b148, 0xef303cab, 0x984faf28, 0x779faf9b, 0x92dc560d, 0x224d1e20, 0x8437aa88, 0x7d29dc96, 0x2756d3dc, 0x8b907cee, 0xb51fd240, 0xe7c07ce3, 0xe566b4a1, 0xc3e9615e, 0x3cf8209d, 0x6094d1e3, 0xcd9ca341, 0x5c76460e, 0x00ea983b, 0xd4d67881, 0xfd47572c, 0xf76cedd9, 0xbda8229c, 0x127dadaa, 0x438a074e, 0x1f97c090, 0x081bdb8a, 0x93a07ebe, 0xb938ca15, 0x97b03cff, 0x3dc2c0f8, 0x8d1ab2ec, 0x64380e51, 0x68cc7bfb, 0xd90f2788, 0x12490181, 0x5de5ffd4, 0xdd7ef86a, 0x76a2e214, 0xb9a40368, 0x925d958f, 0x4b39fffa, 0xba39aee9, 0xa4ffd30b, 0xfaf7933b, 0x6d498623, 0x193cbcfa, 0x27627545, 0x825cf47a, 0x61bd8ba0, 0xd11e42d1, 0xcead04f4, 0x127ea392, 0x10428db7, 0x8272a972, 0x9270c4a8, 0x127de50b, 0x285ba1c8, 0x3c62f44f, 0x35c0eaa5, 0xe805d231, 0x428929fb, 0xb4fcdf82, 0x4fb66a53, 0x0e7dc15b, 0x1f081fab, 0x108618ae, 0xfcfd086d, 0xf9ff2889, 0x694bcc11, 0x236a5cae, 0x12deca4d, 0x2c3f8cc5, 0xd2d02dfe, 0xf8ef5896, 0xe4cf52da, 0x95155b67, 0x494a488c, 0xb9b6a80c, 0x5c8f82bc, 0x89d36b45, 0x3a609437, 0xec00c9a9, 0x44715253, 0x0a874b49, 0xd773bc40, 0x7c34671c, 0x02717ef6, 0x4feb5536, 0xa2d02fff, 0xd2bf60c4, 0xd43f03c0, 0x50b4ef6d, 0x07478cd1, 0x006e1888, 0xa2e53f55, 0xb9e6d4bc, 0xa2048016, 0x97573833, 0xd7207d67, 0xde0f8f3d, 0x72f87b33, 0xabcc4f33, 0x7688c55d, 0x7b00a6b0, 0x947b0001, 0x570075d2, 0xf9bb88f8, 0x8942019e, 0x4264a5ff, 0x856302e0, 0x72dbd92b, 0xee971b69, 0x6ea22fde, 0x5f08ae2b, 0xaf7a616d, 0xe5c98767, 0xcf1febd2, 0x61efc8c2, 0xf1ac2571, 0xcc8239c2, 0x67214cb8, 0xb1e583d1, 0xb7dc3e62, 0x7f10bdce, 0xf90a5c38, 0x0ff0443d, 0x606e6dc6, 0x60543a49, 0x5727c148, 0x2be98a1d, 0x8ab41738, 0x20e1be24, 0xaf96da0f, 0x68458425, 0x99833be5, 0x600d457d, 0x282f9350, 0x8334b362, 0xd91d1120, 0x2b6d8da0, 0x642b1e31, 0x9c305a00, 0x52bce688, 0x1b03588a, 0xf7baefd5, 0x4142ed9c, 0xa4315c11, 0x83323ec5, 0xdfef4636, 0xa133c501, 0xe9d3531c, 0xee353783]), new Uint32Array([0x9db30420, 0x1fb6e9de, 0xa7be7bef, 0xd273a298, 0x4a4f7bdb, 0x64ad8c57, 0x85510443, 0xfa020ed1, 0x7e287aff, 0xe60fb663, 0x095f35a1, 0x79ebf120, 0xfd059d43, 0x6497b7b1, 0xf3641f63, 0x241e4adf, 0x28147f5f, 0x4fa2b8cd, 0xc9430040, 0x0cc32220, 0xfdd30b30, 0xc0a5374f, 0x1d2d00d9, 0x24147b15, 0xee4d111a, 0x0fca5167, 0x71ff904c, 0x2d195ffe, 0x1a05645f, 0x0c13fefe, 0x081b08ca, 0x05170121, 0x80530100, 0xe83e5efe, 0xac9af4f8, 0x7fe72701, 0xd2b8ee5f, 0x06df4261, 0xbb9e9b8a, 0x7293ea25, 0xce84ffdf, 0xf5718801, 0x3dd64b04, 0xa26f263b, 0x7ed48400, 0x547eebe6, 0x446d4ca0, 0x6cf3d6f5, 0x2649abdf, 0xaea0c7f5, 0x36338cc1, 0x503f7e93, 0xd3772061, 0x11b638e1, 0x72500e03, 0xf80eb2bb, 0xabe0502e, 0xec8d77de, 0x57971e81, 0xe14f6746, 0xc9335400, 0x6920318f, 0x081dbb99, 0xffc304a5, 0x4d351805, 0x7f3d5ce3, 0xa6c866c6, 0x5d5bcca9, 0xdaec6fea, 0x9f926f91, 0x9f46222f, 0x3991467d, 0xa5bf6d8e, 0x1143c44f, 0x43958302, 0xd0214eeb, 0x022083b8, 0x3fb6180c, 0x18f8931e, 0x281658e6, 0x26486e3e, 0x8bd78a70, 0x7477e4c1, 0xb506e07c, 0xf32d0a25, 0x79098b02, 0xe4eabb81, 0x28123b23, 0x69dead38, 0x1574ca16, 0xdf871b62, 0x211c40b7, 0xa51a9ef9, 0x0014377b, 0x041e8ac8, 0x09114003, 0xbd59e4d2, 0xe3d156d5, 0x4fe876d5, 0x2f91a340, 0x557be8de, 0x00eae4a7, 0x0ce5c2ec, 0x4db4bba6, 0xe756bdff, 0xdd3369ac, 0xec17b035, 0x06572327, 0x99afc8b0, 0x56c8c391, 0x6b65811c, 0x5e146119, 0x6e85cb75, 0xbe07c002, 0xc2325577, 0x893ff4ec, 0x5bbfc92d, 0xd0ec3b25, 0xb7801ab7, 0x8d6d3b24, 0x20c763ef, 0xc366a5fc, 0x9c382880, 0x0ace3205, 0xaac9548a, 0xeca1d7c7, 0x041afa32, 0x1d16625a, 0x6701902c, 0x9b757a54, 0x31d477f7, 0x9126b031, 0x36cc6fdb, 0xc70b8b46, 0xd9e66a48, 0x56e55a79, 0x026a4ceb, 0x52437eff, 0x2f8f76b4, 0x0df980a5, 0x8674cde3, 0xedda04eb, 0x17a9be04, 0x2c18f4df, 0xb7747f9d, 0xab2af7b4, 0xefc34d20, 0x2e096b7c, 0x1741a254, 0xe5b6a035, 0x213d42f6, 0x2c1c7c26, 0x61c2f50f, 0x6552daf9, 0xd2c231f8, 0x25130f69, 0xd8167fa2, 0x0418f2c8, 0x001a96a6, 0x0d1526ab, 0x63315c21, 0x5e0a72ec, 0x49bafefd, 0x187908d9, 0x8d0dbd86, 0x311170a7, 0x3e9b640c, 0xcc3e10d7, 0xd5cad3b6, 0x0caec388, 0xf73001e1, 0x6c728aff, 0x71eae2a1, 0x1f9af36e, 0xcfcbd12f, 0xc1de8417, 0xac07be6b, 0xcb44a1d8, 0x8b9b0f56, 0x013988c3, 0xb1c52fca, 0xb4be31cd, 0xd8782806, 0x12a3a4e2, 0x6f7de532, 0x58fd7eb6, 0xd01ee900, 0x24adffc2, 0xf4990fc5, 0x9711aac5, 0x001d7b95, 0x82e5e7d2, 0x109873f6, 0x00613096, 0xc32d9521, 0xada121ff, 0x29908415, 0x7fbb977f, 0xaf9eb3db, 0x29c9ed2a, 0x5ce2a465, 0xa730f32c, 0xd0aa3fe8, 0x8a5cc091, 0xd49e2ce7, 0x0ce454a9, 0xd60acd86, 0x015f1919, 0x77079103, 0xdea03af6, 0x78a8565e, 0xdee356df, 0x21f05cbe, 0x8b75e387, 0xb3c50651, 0xb8a5c3ef, 0xd8eeb6d2, 0xe523be77, 0xc2154529, 0x2f69efdf, 0xafe67afb, 0xf470c4b2, 0xf3e0eb5b, 0xd6cc9876, 0x39e4460c, 0x1fda8538, 0x1987832f, 0xca007367, 0xa99144f8, 0x296b299e, 0x492fc295, 0x9266beab, 0xb5676e69, 0x9bd3ddda, 0xdf7e052f, 0xdb25701c, 0x1b5e51ee, 0xf65324e6, 0x6afce36c, 0x0316cc04, 0x8644213e, 0xb7dc59d0, 0x7965291f, 0xccd6fd43, 0x41823979, 0x932bcdf6, 0xb657c34d, 0x4edfd282, 0x7ae5290c, 0x3cb9536b, 0x851e20fe, 0x9833557e, 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1, 0x0aef7ed2]), new Uint32Array([0x7ec90c04, 0x2c6e74b9, 0x9b0e66df, 0xa6337911, 0xb86a7fff, 0x1dd358f5, 0x44dd9d44, 0x1731167f, 0x08fbf1fa, 0xe7f511cc, 0xd2051b00, 0x735aba00, 0x2ab722d8, 0x386381cb, 0xacf6243a, 0x69befd7a, 0xe6a2e77f, 0xf0c720cd, 0xc4494816, 0xccf5c180, 0x38851640, 0x15b0a848, 0xe68b18cb, 0x4caadeff, 0x5f480a01, 0x0412b2aa, 0x259814fc, 0x41d0efe2, 0x4e40b48d, 0x248eb6fb, 0x8dba1cfe, 0x41a99b02, 0x1a550a04, 0xba8f65cb, 0x7251f4e7, 0x95a51725, 0xc106ecd7, 0x97a5980a, 0xc539b9aa, 0x4d79fe6a, 0xf2f3f763, 0x68af8040, 0xed0c9e56, 0x11b4958b, 0xe1eb5a88, 0x8709e6b0, 0xd7e07156, 0x4e29fea7, 0x6366e52d, 0x02d1c000, 0xc4ac8e05, 0x9377f571, 0x0c05372a, 0x578535f2, 0x2261be02, 0xd642a0c9, 0xdf13a280, 0x74b55bd2, 0x682199c0, 0xd421e5ec, 0x53fb3ce8, 0xc8adedb3, 0x28a87fc9, 0x3d959981, 0x5c1ff900, 0xfe38d399, 0x0c4eff0b, 0x062407ea, 0xaa2f4fb1, 0x4fb96976, 0x90c79505, 0xb0a8a774, 0xef55a1ff, 0xe59ca2c2, 0xa6b62d27, 0xe66a4263, 0xdf65001f, 0x0ec50966, 0xdfdd55bc, 0x29de0655, 0x911e739a, 0x17af8975, 0x32c7911c, 0x89f89468, 0x0d01e980, 0x524755f4, 0x03b63cc9, 0x0cc844b2, 0xbcf3f0aa, 0x87ac36e9, 0xe53a7426, 0x01b3d82b, 0x1a9e7449, 0x64ee2d7e, 0xcddbb1da, 0x01c94910, 0xb868bf80, 0x0d26f3fd, 0x9342ede7, 0x04a5c284, 0x636737b6, 0x50f5b616, 0xf24766e3, 0x8eca36c1, 0x136e05db, 0xfef18391, 0xfb887a37, 0xd6e7f7d4, 0xc7fb7dc9, 0x3063fcdf, 0xb6f589de, 0xec2941da, 0x26e46695, 0xb7566419, 0xf654efc5, 0xd08d58b7, 0x48925401, 0xc1bacb7f, 0xe5ff550f, 0xb6083049, 0x5bb5d0e8, 0x87d72e5a, 0xab6a6ee1, 0x223a66ce, 0xc62bf3cd, 0x9e0885f9, 0x68cb3e47, 0x086c010f, 0xa21de820, 0xd18b69de, 0xf3f65777, 0xfa02c3f6, 0x407edac3, 0xcbb3d550, 0x1793084d, 0xb0d70eba, 0x0ab378d5, 0xd951fb0c, 0xded7da56, 0x4124bbe4, 0x94ca0b56, 0x0f5755d1, 0xe0e1e56e, 0x6184b5be, 0x580a249f, 0x94f74bc0, 0xe327888e, 0x9f7b5561, 0xc3dc0280, 0x05687715, 0x646c6bd7, 0x44904db3, 0x66b4f0a3, 0xc0f1648a, 0x697ed5af, 0x49e92ff6, 0x309e374f, 0x2cb6356a, 0x85808573, 0x4991f840, 0x76f0ae02, 0x083be84d, 0x28421c9a, 0x44489406, 0x736e4cb8, 0xc1092910, 0x8bc95fc6, 0x7d869cf4, 0x134f616f, 0x2e77118d, 0xb31b2be1, 0xaa90b472, 0x3ca5d717, 0x7d161bba, 0x9cad9010, 0xaf462ba2, 0x9fe459d2, 0x45d34559, 0xd9f2da13, 0xdbc65487, 0xf3e4f94e, 0x176d486f, 0x097c13ea, 0x631da5c7, 0x445f7382, 0x175683f4, 0xcdc66a97, 0x70be0288, 0xb3cdcf72, 0x6e5dd2f3, 0x20936079, 0x459b80a5, 0xbe60e2db, 0xa9c23101, 0xeba5315c, 0x224e42f2, 0x1c5c1572, 0xf6721b2c, 0x1ad2fff3, 0x8c25404e, 0x324ed72f, 0x4067b7fd, 0x0523138e, 0x5ca3bc78, 0xdc0fd66e, 0x75922283, 0x784d6b17, 0x58ebb16e, 0x44094f85, 0x3f481d87, 0xfcfeae7b, 0x77b5ff76, 0x8c2302bf, 0xaaf47556, 0x5f46b02a, 0x2b092801, 0x3d38f5f7, 0x0ca81f36, 0x52af4a8a, 0x66d5e7c0, 0xdf3b0874, 0x95055110, 0x1b5ad7a8, 0xf61ed5ad, 0x6cf6e479, 0x20758184, 0xd0cefa65, 0x88f7be58, 0x4a046826, 0x0ff6f8f3, 0xa09c7f70, 0x5346aba0, 0x5ce96c28, 0xe176eda3, 0x6bac307f, 0x376829d2, 0x85360fa9, 0x17e3fe2a, 0x24b79767, 0xf5a96b20, 0xd6cd2595, 0x68ff1ebf, 0x7555442c, 0xf19f06be, 0xf9e0659a, 0xeeb9491d, 0x34010718, 0xbb30cab8, 0xe822fe15, 0x88570983, 0x750e6249, 0xda627e55, 0x5e76ffa8, 0xb1534546, 0x6d47de08, 0xefe9e7d4]), new Uint32Array([0xf6fa8f9d, 0x2cac6ce1, 0x4ca34867, 0xe2337f7c, 0x95db08e7, 0x016843b4, 0xeced5cbc, 0x325553ac, 0xbf9f0960, 0xdfa1e2ed, 0x83f0579d, 0x63ed86b9, 0x1ab6a6b8, 0xde5ebe39, 0xf38ff732, 0x8989b138, 0x33f14961, 0xc01937bd, 0xf506c6da, 0xe4625e7e, 0xa308ea99, 0x4e23e33c, 0x79cbd7cc, 0x48a14367, 0xa3149619, 0xfec94bd5, 0xa114174a, 0xeaa01866, 0xa084db2d, 0x09a8486f, 0xa888614a, 0x2900af98, 0x01665991, 0xe1992863, 0xc8f30c60, 0x2e78ef3c, 0xd0d51932, 0xcf0fec14, 0xf7ca07d2, 0xd0a82072, 0xfd41197e, 0x9305a6b0, 0xe86be3da, 0x74bed3cd, 0x372da53c, 0x4c7f4448, 0xdab5d440, 0x6dba0ec3, 0x083919a7, 0x9fbaeed9, 0x49dbcfb0, 0x4e670c53, 0x5c3d9c01, 0x64bdb941, 0x2c0e636a, 0xba7dd9cd, 0xea6f7388, 0xe70bc762, 0x35f29adb, 0x5c4cdd8d, 0xf0d48d8c, 0xb88153e2, 0x08a19866, 0x1ae2eac8, 0x284caf89, 0xaa928223, 0x9334be53, 0x3b3a21bf, 0x16434be3, 0x9aea3906, 0xefe8c36e, 0xf890cdd9, 0x80226dae, 0xc340a4a3, 0xdf7e9c09, 0xa694a807, 0x5b7c5ecc, 0x221db3a6, 0x9a69a02f, 0x68818a54, 0xceb2296f, 0x53c0843a, 0xfe893655, 0x25bfe68a, 0xb4628abc, 0xcf222ebf, 0x25ac6f48, 0xa9a99387, 0x53bddb65, 0xe76ffbe7, 0xe967fd78, 0x0ba93563, 0x8e342bc1, 0xe8a11be9, 0x4980740d, 0xc8087dfc, 0x8de4bf99, 0xa11101a0, 0x7fd37975, 0xda5a26c0, 0xe81f994f, 0x9528cd89, 0xfd339fed, 0xb87834bf, 0x5f04456d, 0x22258698, 0xc9c4c83b, 0x2dc156be, 0x4f628daa, 0x57f55ec5, 0xe2220abe, 0xd2916ebf, 0x4ec75b95, 0x24f2c3c0, 0x42d15d99, 0xcd0d7fa0, 0x7b6e27ff, 0xa8dc8af0, 0x7345c106, 0xf41e232f, 0x35162386, 0xe6ea8926, 0x3333b094, 0x157ec6f2, 0x372b74af, 0x692573e4, 0xe9a9d848, 0xf3160289, 0x3a62ef1d, 0xa787e238, 0xf3a5f676, 0x74364853, 0x20951063, 0x4576698d, 0xb6fad407, 0x592af950, 0x36f73523, 0x4cfb6e87, 0x7da4cec0, 0x6c152daa, 0xcb0396a8, 0xc50dfe5d, 0xfcd707ab, 0x0921c42f, 0x89dff0bb, 0x5fe2be78, 0x448f4f33, 0x754613c9, 0x2b05d08d, 0x48b9d585, 0xdc049441, 0xc8098f9b, 0x7dede786, 0xc39a3373, 0x42410005, 0x6a091751, 0x0ef3c8a6, 0x890072d6, 0x28207682, 0xa9a9f7be, 0xbf32679d, 0xd45b5b75, 0xb353fd00, 0xcbb0e358, 0x830f220a, 0x1f8fb214, 0xd372cf08, 0xcc3c4a13, 0x8cf63166, 0x061c87be, 0x88c98f88, 0x6062e397, 0x47cf8e7a, 0xb6c85283, 0x3cc2acfb, 0x3fc06976, 0x4e8f0252, 0x64d8314d, 0xda3870e3, 0x1e665459, 0xc10908f0, 0x513021a5, 0x6c5b68b7, 0x822f8aa0, 0x3007cd3e, 0x74719eef, 0xdc872681, 0x073340d4, 0x7e432fd9, 0x0c5ec241, 0x8809286c, 0xf592d891, 0x08a930f6, 0x957ef305, 0xb7fbffbd, 0xc266e96f, 0x6fe4ac98, 0xb173ecc0, 0xbc60b42a, 0x953498da, 0xfba1ae12, 0x2d4bd736, 0x0f25faab, 0xa4f3fceb, 0xe2969123, 0x257f0c3d, 0x9348af49, 0x361400bc, 0xe8816f4a, 0x3814f200, 0xa3f94043, 0x9c7a54c2, 0xbc704f57, 0xda41e7f9, 0xc25ad33a, 0x54f4a084, 0xb17f5505, 0x59357cbe, 0xedbd15c8, 0x7f97c5ab, 0xba5ac7b5, 0xb6f6deaf, 0x3a479c3a, 0x5302da25, 0x653d7e6a, 0x54268d49, 0x51a477ea, 0x5017d55b, 0xd7d25d88, 0x44136c76, 0x0404a8c8, 0xb8e5a121, 0xb81a928a, 0x60ed5869, 0x97c55b96, 0xeaec991b, 0x29935913, 0x01fdb7f1, 0x088e8dfa, 0x9ab6f6f5, 0x3b4cbf9f, 0x4a5de3ab, 0xe6051d35, 0xa0e1d855, 0xd36b4cf1, 0xf544edeb, 0xb0e93524, 0xbebb8fbd, 0xa2d762cf, 0x49c92f54, 0x38b5f331, 0x7128a454, 0x48392905, 0xa65b1db8, 0x851c97bd, 0xd675cf2f]), new Uint32Array([0x85e04019, 0x332bf567, 0x662dbfff, 0xcfc65693, 0x2a8d7f6f, 0xab9bc912, 0xde6008a1, 0x2028da1f, 0x0227bce7, 0x4d642916, 0x18fac300, 0x50f18b82, 0x2cb2cb11, 0xb232e75c, 0x4b3695f2, 0xb28707de, 0xa05fbcf6, 0xcd4181e9, 0xe150210c, 0xe24ef1bd, 0xb168c381, 0xfde4e789, 0x5c79b0d8, 0x1e8bfd43, 0x4d495001, 0x38be4341, 0x913cee1d, 0x92a79c3f, 0x089766be, 0xbaeeadf4, 0x1286becf, 0xb6eacb19, 0x2660c200, 0x7565bde4, 0x64241f7a, 0x8248dca9, 0xc3b3ad66, 0x28136086, 0x0bd8dfa8, 0x356d1cf2, 0x107789be, 0xb3b2e9ce, 0x0502aa8f, 0x0bc0351e, 0x166bf52a, 0xeb12ff82, 0xe3486911, 0xd34d7516, 0x4e7b3aff, 0x5f43671b, 0x9cf6e037, 0x4981ac83, 0x334266ce, 0x8c9341b7, 0xd0d854c0, 0xcb3a6c88, 0x47bc2829, 0x4725ba37, 0xa66ad22b, 0x7ad61f1e, 0x0c5cbafa, 0x4437f107, 0xb6e79962, 0x42d2d816, 0x0a961288, 0xe1a5c06e, 0x13749e67, 0x72fc081a, 0xb1d139f7, 0xf9583745, 0xcf19df58, 0xbec3f756, 0xc06eba30, 0x07211b24, 0x45c28829, 0xc95e317f, 0xbc8ec511, 0x38bc46e9, 0xc6e6fa14, 0xbae8584a, 0xad4ebc46, 0x468f508b, 0x7829435f, 0xf124183b, 0x821dba9f, 0xaff60ff4, 0xea2c4e6d, 0x16e39264, 0x92544a8b, 0x009b4fc3, 0xaba68ced, 0x9ac96f78, 0x06a5b79a, 0xb2856e6e, 0x1aec3ca9, 0xbe838688, 0x0e0804e9, 0x55f1be56, 0xe7e5363b, 0xb3a1f25d, 0xf7debb85, 0x61fe033c, 0x16746233, 0x3c034c28, 0xda6d0c74, 0x79aac56c, 0x3ce4e1ad, 0x51f0c802, 0x98f8f35a, 0x1626a49f, 0xeed82b29, 0x1d382fe3, 0x0c4fb99a, 0xbb325778, 0x3ec6d97b, 0x6e77a6a9, 0xcb658b5c, 0xd45230c7, 0x2bd1408b, 0x60c03eb7, 0xb9068d78, 0xa33754f4, 0xf430c87d, 0xc8a71302, 0xb96d8c32, 0xebd4e7be, 0xbe8b9d2d, 0x7979fb06, 0xe7225308, 0x8b75cf77, 0x11ef8da4, 0xe083c858, 0x8d6b786f, 0x5a6317a6, 0xfa5cf7a0, 0x5dda0033, 0xf28ebfb0, 0xf5b9c310, 0xa0eac280, 0x08b9767a, 0xa3d9d2b0, 0x79d34217, 0x021a718d, 0x9ac6336a, 0x2711fd60, 0x438050e3, 0x069908a8, 0x3d7fedc4, 0x826d2bef, 0x4eeb8476, 0x488dcf25, 0x36c9d566, 0x28e74e41, 0xc2610aca, 0x3d49a9cf, 0xbae3b9df, 0xb65f8de6, 0x92aeaf64, 0x3ac7d5e6, 0x9ea80509, 0xf22b017d, 0xa4173f70, 0xdd1e16c3, 0x15e0d7f9, 0x50b1b887, 0x2b9f4fd5, 0x625aba82, 0x6a017962, 0x2ec01b9c, 0x15488aa9, 0xd716e740, 0x40055a2c, 0x93d29a22, 0xe32dbf9a, 0x058745b9, 0x3453dc1e, 0xd699296e, 0x496cff6f, 0x1c9f4986, 0xdfe2ed07, 0xb87242d1, 0x19de7eae, 0x053e561a, 0x15ad6f8c, 0x66626c1c, 0x7154c24c, 0xea082b2a, 0x93eb2939, 0x17dcb0f0, 0x58d4f2ae, 0x9ea294fb, 0x52cf564c, 0x9883fe66, 0x2ec40581, 0x763953c3, 0x01d6692e, 0xd3a0c108, 0xa1e7160e, 0xe4f2dfa6, 0x693ed285, 0x74904698, 0x4c2b0edd, 0x4f757656, 0x5d393378, 0xa132234f, 0x3d321c5d, 0xc3f5e194, 0x4b269301, 0xc79f022f, 0x3c997e7e, 0x5e4f9504, 0x3ffafbbd, 0x76f7ad0e, 0x296693f4, 0x3d1fce6f, 0xc61e45be, 0xd3b5ab34, 0xf72bf9b7, 0x1b0434c0, 0x4e72b567, 0x5592a33d, 0xb5229301, 0xcfd2a87f, 0x60aeb767, 0x1814386b, 0x30bcc33d, 0x38a0c07d, 0xfd1606f2, 0xc363519b, 0x589dd390, 0x5479f8e6, 0x1cb8d647, 0x97fd61a9, 0xea7759f4, 0x2d57539d, 0x569a58cf, 0xe84e63ad, 0x462e1b78, 0x6580f87e, 0xf3817914, 0x91da55f4, 0x40a230f3, 0xd1988f35, 0xb6e318d2, 0x3ffa50bc, 0x3d40f021, 0xc3c0bdae, 0x4958c24c, 0x518f36b2, 0x84b1d370, 0x0fedce83, 0x878ddada, 0xf2a279c7, 0x94e01be8, 0x90716f4b, 0x954b8aa3]), new Uint32Array([0xe216300d, 0xbbddfffc, 0xa7ebdabd, 0x35648095, 0x7789f8b7, 0xe6c1121b, 0x0e241600, 0x052ce8b5, 0x11a9cfb0, 0xe5952f11, 0xece7990a, 0x9386d174, 0x2a42931c, 0x76e38111, 0xb12def3a, 0x37ddddfc, 0xde9adeb1, 0x0a0cc32c, 0xbe197029, 0x84a00940, 0xbb243a0f, 0xb4d137cf, 0xb44e79f0, 0x049eedfd, 0x0b15a15d, 0x480d3168, 0x8bbbde5a, 0x669ded42, 0xc7ece831, 0x3f8f95e7, 0x72df191b, 0x7580330d, 0x94074251, 0x5c7dcdfa, 0xabbe6d63, 0xaa402164, 0xb301d40a, 0x02e7d1ca, 0x53571dae, 0x7a3182a2, 0x12a8ddec, 0xfdaa335d, 0x176f43e8, 0x71fb46d4, 0x38129022, 0xce949ad4, 0xb84769ad, 0x965bd862, 0x82f3d055, 0x66fb9767, 0x15b80b4e, 0x1d5b47a0, 0x4cfde06f, 0xc28ec4b8, 0x57e8726e, 0x647a78fc, 0x99865d44, 0x608bd593, 0x6c200e03, 0x39dc5ff6, 0x5d0b00a3, 0xae63aff2, 0x7e8bd632, 0x70108c0c, 0xbbd35049, 0x2998df04, 0x980cf42a, 0x9b6df491, 0x9e7edd53, 0x06918548, 0x58cb7e07, 0x3b74ef2e, 0x522fffb1, 0xd24708cc, 0x1c7e27cd, 0xa4eb215b, 0x3cf1d2e2, 0x19b47a38, 0x424f7618, 0x35856039, 0x9d17dee7, 0x27eb35e6, 0xc9aff67b, 0x36baf5b8, 0x09c467cd, 0xc18910b1, 0xe11dbf7b, 0x06cd1af8, 0x7170c608, 0x2d5e3354, 0xd4de495a, 0x64c6d006, 0xbcc0c62c, 0x3dd00db3, 0x708f8f34, 0x77d51b42, 0x264f620f, 0x24b8d2bf, 0x15c1b79e, 0x46a52564, 0xf8d7e54e, 0x3e378160, 0x7895cda5, 0x859c15a5, 0xe6459788, 0xc37bc75f, 0xdb07ba0c, 0x0676a3ab, 0x7f229b1e, 0x31842e7b, 0x24259fd7, 0xf8bef472, 0x835ffcb8, 0x6df4c1f2, 0x96f5b195, 0xfd0af0fc, 0xb0fe134c, 0xe2506d3d, 0x4f9b12ea, 0xf215f225, 0xa223736f, 0x9fb4c428, 0x25d04979, 0x34c713f8, 0xc4618187, 0xea7a6e98, 0x7cd16efc, 0x1436876c, 0xf1544107, 0xbedeee14, 0x56e9af27, 0xa04aa441, 0x3cf7c899, 0x92ecbae6, 0xdd67016d, 0x151682eb, 0xa842eedf, 0xfdba60b4, 0xf1907b75, 0x20e3030f, 0x24d8c29e, 0xe139673b, 0xefa63fb8, 0x71873054, 0xb6f2cf3b, 0x9f326442, 0xcb15a4cc, 0xb01a4504, 0xf1e47d8d, 0x844a1be5, 0xbae7dfdc, 0x42cbda70, 0xcd7dae0a, 0x57e85b7a, 0xd53f5af6, 0x20cf4d8c, 0xcea4d428, 0x79d130a4, 0x3486ebfb, 0x33d3cddc, 0x77853b53, 0x37effcb5, 0xc5068778, 0xe580b3e6, 0x4e68b8f4, 0xc5c8b37e, 0x0d809ea2, 0x398feb7c, 0x132a4f94, 0x43b7950e, 0x2fee7d1c, 0x223613bd, 0xdd06caa2, 0x37df932b, 0xc4248289, 0xacf3ebc3, 0x5715f6b7, 0xef3478dd, 0xf267616f, 0xc148cbe4, 0x9052815e, 0x5e410fab, 0xb48a2465, 0x2eda7fa4, 0xe87b40e4, 0xe98ea084, 0x5889e9e1, 0xefd390fc, 0xdd07d35b, 0xdb485694, 0x38d7e5b2, 0x57720101, 0x730edebc, 0x5b643113, 0x94917e4f, 0x503c2fba, 0x646f1282, 0x7523d24a, 0xe0779695, 0xf9c17a8f, 0x7a5b2121, 0xd187b896, 0x29263a4d, 0xba510cdf, 0x81f47c9f, 0xad1163ed, 0xea7b5965, 0x1a00726e, 0x11403092, 0x00da6d77, 0x4a0cdd61, 0xad1f4603, 0x605bdfb0, 0x9eedc364, 0x22ebe6a8, 0xcee7d28a, 0xa0e736a0, 0x5564a6b9, 0x10853209, 0xc7eb8f37, 0x2de705ca, 0x8951570f, 0xdf09822b, 0xbd691a6c, 0xaa12e4f2, 0x87451c0f, 0xe0f6a27a, 0x3ada4819, 0x4cf1764f, 0x0d771c2b, 0x67cdb156, 0x350d8384, 0x5938fa0f, 0x42399ef3, 0x36997b07, 0x0e84093d, 0x4aa93e61, 0x8360d87b, 0x1fa98b0c, 0x1149382c, 0xe97625a5, 0x0614d1b7, 0x0e25244b, 0x0c768347, 0x589e8d82, 0x0d2059d1, 0xa466bb1e, 0xf8da0a82, 0x04f19130, 0xba6e4ec0, 0x99265164, 0x1ee7230d, 0x50b2ad80, 0xeaee6801, 0x8db2a283, 0xea8bf59e])];
var schedule = [{
  a: [new Uint8Array([4, 0, 0xd, 0xf, 0xc, 0xe, 0x8]), new Uint8Array([5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa]), new Uint8Array([6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9]), new Uint8Array([7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb])],
  b: [new Uint8Array([16 + 8, 16 + 9, 16 + 7, 16 + 6, 16 + 2]), new Uint8Array([16 + 0xa, 16 + 0xb, 16 + 5, 16 + 4, 16 + 6]), new Uint8Array([16 + 0xc, 16 + 0xd, 16 + 3, 16 + 2, 16 + 9]), new Uint8Array([16 + 0xe, 16 + 0xf, 16 + 1, 16 + 0, 16 + 0xc])]
}, {
  a: [new Uint8Array([0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0]), new Uint8Array([1, 4, 0, 2, 1, 3, 16 + 2]), new Uint8Array([2, 5, 7, 6, 5, 4, 16 + 1]), new Uint8Array([3, 7, 0xa, 9, 0xb, 8, 16 + 3])],
  b: [new Uint8Array([3, 2, 0xc, 0xd, 8]), new Uint8Array([1, 0, 0xe, 0xf, 0xd]), new Uint8Array([7, 6, 8, 9, 3]), new Uint8Array([5, 4, 0xa, 0xb, 7])]
}, {
  a: [new Uint8Array([4, 0, 0xd, 0xf, 0xc, 0xe, 8]), new Uint8Array([5, 2, 16 + 0, 16 + 2, 16 + 1, 16 + 3, 0xa]), new Uint8Array([6, 3, 16 + 7, 16 + 6, 16 + 5, 16 + 4, 9]), new Uint8Array([7, 1, 16 + 0xa, 16 + 9, 16 + 0xb, 16 + 8, 0xb])],
  b: [new Uint8Array([16 + 3, 16 + 2, 16 + 0xc, 16 + 0xd, 16 + 9]), new Uint8Array([16 + 1, 16 + 0, 16 + 0xe, 16 + 0xf, 16 + 0xc]), new Uint8Array([16 + 7, 16 + 6, 16 + 8, 16 + 9, 16 + 2]), new Uint8Array([16 + 5, 16 + 4, 16 + 0xa, 16 + 0xb, 16 + 6])]
}, {
  a: [new Uint8Array([0, 6, 16 + 5, 16 + 7, 16 + 4, 16 + 6, 16 + 0]), new Uint8Array([1, 4, 0, 2, 1, 3, 16 + 2]), new Uint8Array([2, 5, 7, 6, 5, 4, 16 + 1]), new Uint8Array([3, 7, 0xa, 9, 0xb, 8, 16 + 3])],
  b: [new Uint8Array([8, 9, 7, 6, 3]), new Uint8Array([0xa, 0xb, 5, 4, 7]), new Uint8Array([0xc, 0xd, 3, 2, 8]), new Uint8Array([0xe, 0xf, 1, 0, 0xd])]
}];
var X = new Uint8Array([6, 7, 4, 5]);
/**
 * CAST5
 */

class CAST5 {
  constructor() {
    this.masking = new Uint32Array(16);
    this.rotate = new Uint8Array(16);
  }

  get blockSize() {
    return 8;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 16);
    this.keySchedule(key);
    return this;
  }

  destroy() {
    for (var i = 0; i < 16; i++) {
      this.masking[i] = 0;
    }

    for (var _i = 0; _i < 16; _i++) {
      this.rotate[_i] = 0;
    }

    return this;
  }

  keySchedule(input) {
    var t = new Uint32Array(8);
    var k = new Uint32Array(32);

    for (var i = 0; i < 4; i++) {
      t[i] = readU32$a(input, i * 4);
    }

    var ki = 0;
    var w;

    for (var half = 0; half < 2; half++) {
      for (var round of schedule) {
        for (var j = 0; j < 4; j++) {
          var a = round.a[j];
          w = t[a[1]];
          w ^= S[4][t[a[2] >>> 2] >>> 24 - 8 * (a[2] & 3) & 0xff];
          w ^= S[5][t[a[3] >>> 2] >>> 24 - 8 * (a[3] & 3) & 0xff];
          w ^= S[6][t[a[4] >>> 2] >>> 24 - 8 * (a[4] & 3) & 0xff];
          w ^= S[7][t[a[5] >>> 2] >>> 24 - 8 * (a[5] & 3) & 0xff];
          w ^= S[X[j]][t[a[6] >>> 2] >>> 24 - 8 * (a[6] & 3) & 0xff];
          t[a[0]] = w;
        }

        for (var _j = 0; _j < 4; _j++) {
          var b = round.b[_j];
          w = S[4][t[b[0] >>> 2] >>> 24 - 8 * (b[0] & 3) & 0xff];
          w ^= S[5][t[b[1] >>> 2] >>> 24 - 8 * (b[1] & 3) & 0xff];
          w ^= S[6][t[b[2] >>> 2] >>> 24 - 8 * (b[2] & 3) & 0xff];
          w ^= S[7][t[b[3] >>> 2] >>> 24 - 8 * (b[3] & 3) & 0xff];
          w ^= S[4 + _j][t[b[4] >>> 2] >>> 24 - 8 * (b[4] & 3) & 0xff];
          k[ki] = w;
          ki += 1;
        }
      }
    }

    for (var _i2 = 0; _i2 < 16; _i2++) {
      this.masking[_i2] = k[_i2];
      this.rotate[_i2] = k[16 + _i2] & 0x1f;
    }

    return this;
  }

  encrypt(input, ipos, output, opos) {
    var l = readU32$a(input, ipos);
    var r = readU32$a(input, ipos + 4);
    [l, r] = [r, l ^ f1(r, this.masking[0], this.rotate[0])];
    [l, r] = [r, l ^ f2(r, this.masking[1], this.rotate[1])];
    [l, r] = [r, l ^ f3(r, this.masking[2], this.rotate[2])];
    [l, r] = [r, l ^ f1(r, this.masking[3], this.rotate[3])];
    [l, r] = [r, l ^ f2(r, this.masking[4], this.rotate[4])];
    [l, r] = [r, l ^ f3(r, this.masking[5], this.rotate[5])];
    [l, r] = [r, l ^ f1(r, this.masking[6], this.rotate[6])];
    [l, r] = [r, l ^ f2(r, this.masking[7], this.rotate[7])];
    [l, r] = [r, l ^ f3(r, this.masking[8], this.rotate[8])];
    [l, r] = [r, l ^ f1(r, this.masking[9], this.rotate[9])];
    [l, r] = [r, l ^ f2(r, this.masking[10], this.rotate[10])];
    [l, r] = [r, l ^ f3(r, this.masking[11], this.rotate[11])];
    [l, r] = [r, l ^ f1(r, this.masking[12], this.rotate[12])];
    [l, r] = [r, l ^ f2(r, this.masking[13], this.rotate[13])];
    [l, r] = [r, l ^ f3(r, this.masking[14], this.rotate[14])];
    [l, r] = [r, l ^ f1(r, this.masking[15], this.rotate[15])];
    writeU32$9(output, r, opos);
    writeU32$9(output, l, opos + 4);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    var l = readU32$a(input, ipos);
    var r = readU32$a(input, ipos + 4);
    [l, r] = [r, l ^ f1(r, this.masking[15], this.rotate[15])];
    [l, r] = [r, l ^ f3(r, this.masking[14], this.rotate[14])];
    [l, r] = [r, l ^ f2(r, this.masking[13], this.rotate[13])];
    [l, r] = [r, l ^ f1(r, this.masking[12], this.rotate[12])];
    [l, r] = [r, l ^ f3(r, this.masking[11], this.rotate[11])];
    [l, r] = [r, l ^ f2(r, this.masking[10], this.rotate[10])];
    [l, r] = [r, l ^ f1(r, this.masking[9], this.rotate[9])];
    [l, r] = [r, l ^ f3(r, this.masking[8], this.rotate[8])];
    [l, r] = [r, l ^ f2(r, this.masking[7], this.rotate[7])];
    [l, r] = [r, l ^ f1(r, this.masking[6], this.rotate[6])];
    [l, r] = [r, l ^ f3(r, this.masking[5], this.rotate[5])];
    [l, r] = [r, l ^ f2(r, this.masking[4], this.rotate[4])];
    [l, r] = [r, l ^ f1(r, this.masking[3], this.rotate[3])];
    [l, r] = [r, l ^ f3(r, this.masking[2], this.rotate[2])];
    [l, r] = [r, l ^ f2(r, this.masking[1], this.rotate[1])];
    [l, r] = [r, l ^ f1(r, this.masking[0], this.rotate[0])];
    writeU32$9(output, r, opos);
    writeU32$9(output, l, opos + 4);
    return this;
  }

}
/*
 * Helpers
 */


function f1(d, m, r) {
  var t = m + d;
  var I = t << r | t >>> 32 - r;
  return (S[0][I >>> 24] ^ S[1][I >>> 16 & 0xff]) - S[2][I >>> 8 & 0xff] + S[3][I & 0xff];
}

function f2(d, m, r) {
  var t = m ^ d;
  var I = t << r | t >>> 32 - r;
  return S[0][I >>> 24] - S[1][I >>> 16 & 0xff] + S[2][I >>> 8 & 0xff] ^ S[3][I & 0xff];
}

function f3(d, m, r) {
  var t = m - d;
  var I = t << r | t >>> 32 - r;
  return (S[0][I >>> 24] + S[1][I >>> 16 & 0xff] ^ S[2][I >>> 8 & 0xff]) - S[3][I & 0xff];
}

function readU32$a(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$9(dst, num, off) {
  dst[off++] = num >>> 24;
  dst[off++] = num >>> 16;
  dst[off++] = num >>> 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var cast5 = CAST5;

/*
 * Constants
 */


var PC2 = new Uint8Array([// inL => outL
0x0e, 0x0b, 0x11, 0x04, 0x1b, 0x17, 0x19, 0x00, 0x0d, 0x16, 0x07, 0x12, 0x05, 0x09, 0x10, 0x18, 0x02, 0x14, 0x0c, 0x15, 0x01, 0x08, 0x0f, 0x1a, // inR => outR
0x0f, 0x04, 0x19, 0x13, 0x09, 0x01, 0x1a, 0x10, 0x05, 0x0b, 0x17, 0x08, 0x0c, 0x07, 0x11, 0x00, 0x16, 0x03, 0x0a, 0x0e, 0x06, 0x14, 0x1b, 0x18]);
var S$1 = new Uint8Array([0x0e, 0x00, 0x04, 0x0f, 0x0d, 0x07, 0x01, 0x04, 0x02, 0x0e, 0x0f, 0x02, 0x0b, 0x0d, 0x08, 0x01, 0x03, 0x0a, 0x0a, 0x06, 0x06, 0x0c, 0x0c, 0x0b, 0x05, 0x09, 0x09, 0x05, 0x00, 0x03, 0x07, 0x08, 0x04, 0x0f, 0x01, 0x0c, 0x0e, 0x08, 0x08, 0x02, 0x0d, 0x04, 0x06, 0x09, 0x02, 0x01, 0x0b, 0x07, 0x0f, 0x05, 0x0c, 0x0b, 0x09, 0x03, 0x07, 0x0e, 0x03, 0x0a, 0x0a, 0x00, 0x05, 0x06, 0x00, 0x0d, 0x0f, 0x03, 0x01, 0x0d, 0x08, 0x04, 0x0e, 0x07, 0x06, 0x0f, 0x0b, 0x02, 0x03, 0x08, 0x04, 0x0e, 0x09, 0x0c, 0x07, 0x00, 0x02, 0x01, 0x0d, 0x0a, 0x0c, 0x06, 0x00, 0x09, 0x05, 0x0b, 0x0a, 0x05, 0x00, 0x0d, 0x0e, 0x08, 0x07, 0x0a, 0x0b, 0x01, 0x0a, 0x03, 0x04, 0x0f, 0x0d, 0x04, 0x01, 0x02, 0x05, 0x0b, 0x08, 0x06, 0x0c, 0x07, 0x06, 0x0c, 0x09, 0x00, 0x03, 0x05, 0x02, 0x0e, 0x0f, 0x09, 0x0a, 0x0d, 0x00, 0x07, 0x09, 0x00, 0x0e, 0x09, 0x06, 0x03, 0x03, 0x04, 0x0f, 0x06, 0x05, 0x0a, 0x01, 0x02, 0x0d, 0x08, 0x0c, 0x05, 0x07, 0x0e, 0x0b, 0x0c, 0x04, 0x0b, 0x02, 0x0f, 0x08, 0x01, 0x0d, 0x01, 0x06, 0x0a, 0x04, 0x0d, 0x09, 0x00, 0x08, 0x06, 0x0f, 0x09, 0x03, 0x08, 0x00, 0x07, 0x0b, 0x04, 0x01, 0x0f, 0x02, 0x0e, 0x0c, 0x03, 0x05, 0x0b, 0x0a, 0x05, 0x0e, 0x02, 0x07, 0x0c, 0x07, 0x0d, 0x0d, 0x08, 0x0e, 0x0b, 0x03, 0x05, 0x00, 0x06, 0x06, 0x0f, 0x09, 0x00, 0x0a, 0x03, 0x01, 0x04, 0x02, 0x07, 0x08, 0x02, 0x05, 0x0c, 0x0b, 0x01, 0x0c, 0x0a, 0x04, 0x0e, 0x0f, 0x09, 0x0a, 0x03, 0x06, 0x0f, 0x09, 0x00, 0x00, 0x06, 0x0c, 0x0a, 0x0b, 0x01, 0x07, 0x0d, 0x0d, 0x08, 0x0f, 0x09, 0x01, 0x04, 0x03, 0x05, 0x0e, 0x0b, 0x05, 0x0c, 0x02, 0x07, 0x08, 0x02, 0x04, 0x0e, 0x02, 0x0e, 0x0c, 0x0b, 0x04, 0x02, 0x01, 0x0c, 0x07, 0x04, 0x0a, 0x07, 0x0b, 0x0d, 0x06, 0x01, 0x08, 0x05, 0x05, 0x00, 0x03, 0x0f, 0x0f, 0x0a, 0x0d, 0x03, 0x00, 0x09, 0x0e, 0x08, 0x09, 0x06, 0x04, 0x0b, 0x02, 0x08, 0x01, 0x0c, 0x0b, 0x07, 0x0a, 0x01, 0x0d, 0x0e, 0x07, 0x02, 0x08, 0x0d, 0x0f, 0x06, 0x09, 0x0f, 0x0c, 0x00, 0x05, 0x09, 0x06, 0x0a, 0x03, 0x04, 0x00, 0x05, 0x0e, 0x03, 0x0c, 0x0a, 0x01, 0x0f, 0x0a, 0x04, 0x0f, 0x02, 0x09, 0x07, 0x02, 0x0c, 0x06, 0x09, 0x08, 0x05, 0x00, 0x06, 0x0d, 0x01, 0x03, 0x0d, 0x04, 0x0e, 0x0e, 0x00, 0x07, 0x0b, 0x05, 0x03, 0x0b, 0x08, 0x09, 0x04, 0x0e, 0x03, 0x0f, 0x02, 0x05, 0x0c, 0x02, 0x09, 0x08, 0x05, 0x0c, 0x0f, 0x03, 0x0a, 0x07, 0x0b, 0x00, 0x0e, 0x04, 0x01, 0x0a, 0x07, 0x01, 0x06, 0x0d, 0x00, 0x0b, 0x08, 0x06, 0x0d, 0x04, 0x0d, 0x0b, 0x00, 0x02, 0x0b, 0x0e, 0x07, 0x0f, 0x04, 0x00, 0x09, 0x08, 0x01, 0x0d, 0x0a, 0x03, 0x0e, 0x0c, 0x03, 0x09, 0x05, 0x07, 0x0c, 0x05, 0x02, 0x0a, 0x0f, 0x06, 0x08, 0x01, 0x06, 0x01, 0x06, 0x04, 0x0b, 0x0b, 0x0d, 0x0d, 0x08, 0x0c, 0x01, 0x03, 0x04, 0x07, 0x0a, 0x0e, 0x07, 0x0a, 0x09, 0x0f, 0x05, 0x06, 0x00, 0x08, 0x0f, 0x00, 0x0e, 0x05, 0x02, 0x09, 0x03, 0x02, 0x0c, 0x0d, 0x01, 0x02, 0x0f, 0x08, 0x0d, 0x04, 0x08, 0x06, 0x0a, 0x0f, 0x03, 0x0b, 0x07, 0x01, 0x04, 0x0a, 0x0c, 0x09, 0x05, 0x03, 0x06, 0x0e, 0x0b, 0x05, 0x00, 0x00, 0x0e, 0x0c, 0x09, 0x07, 0x02, 0x07, 0x02, 0x0b, 0x01, 0x04, 0x0e, 0x01, 0x07, 0x09, 0x04, 0x0c, 0x0a, 0x0e, 0x08, 0x02, 0x0d, 0x00, 0x0f, 0x06, 0x0c, 0x0a, 0x09, 0x0d, 0x00, 0x0f, 0x03, 0x03, 0x05, 0x05, 0x06, 0x08, 0x0b]);
var PERMUTE = new Uint8Array([0x10, 0x19, 0x0c, 0x0b, 0x03, 0x14, 0x04, 0x0f, 0x1f, 0x11, 0x09, 0x06, 0x1b, 0x0e, 0x01, 0x16, 0x1e, 0x18, 0x08, 0x12, 0x00, 0x05, 0x1d, 0x17, 0x0d, 0x13, 0x02, 0x1a, 0x0a, 0x15, 0x1c, 0x07]);
var SHIFT = new Uint8Array([0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01]);
/**
 * DES
 */

class DES {
  constructor() {
    this.block = new Uint32Array(2);
    this.keys = new Uint32Array(16 * 2);
  }

  get blockSize() {
    return 8;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 8);
    return this.derive(key);
  }

  encrypt(input, ipos, output, opos) {
    return this.crypt(input, ipos, output, opos, true);
  }

  decrypt(input, ipos, output, opos) {
    return this.crypt(input, ipos, output, opos, false);
  }

  destroy() {
    for (var i = 0; i < 2; i++) {
      this.block[i] = 0;
    }

    for (var _i = 0; _i < 32; _i++) {
      this.keys[_i] = 0;
    }

    return this;
  }

  derive(key) {
    var kL = readU32$b(key, 0);
    var kR = readU32$b(key, 4);
    pc1(kL, kR, this.block, 0);
    kL = this.block[0];
    kR = this.block[1];

    for (var i = 0; i < this.keys.length; i += 2) {
      var shift = SHIFT[i >>> 1];
      kL = r28shl(kL, shift);
      kR = r28shl(kR, shift);
      pc2(kL, kR, this.keys, i);
    }

    return this;
  }

  crypt(input, ipos, output, opos, encrypt) {
    var l = readU32$b(input, ipos);
    var r = readU32$b(input, ipos + 4); // Initial Permutation

    ip(l, r, this.block, 0);
    l = this.block[0];
    r = this.block[1];
    if (encrypt) this.encipher(l, r, this.block, 0);else this.decipher(l, r, this.block, 0);
    l = this.block[0];
    r = this.block[1];
    writeU32$a(output, l, opos);
    writeU32$a(output, r, opos + 4);
    return this;
  }

  encipher(lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart; // Apply f() x16 times

    for (var i = 0; i < this.keys.length; i += 2) {
      var keyL = this.keys[i];
      var keyR = this.keys[i + 1]; // f(r, k)

      expand(r, this.block, 0);
      keyL ^= this.block[0];
      keyR ^= this.block[1];
      var s = substitute(keyL, keyR);
      var f = permute(s);
      var t = r;
      r = (l ^ f) >>> 0;
      l = t;
    } // Reverse Initial Permutation


    rip(r, l, out, off);
    return this;
  }

  decipher(lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart; // Apply f() x16 times

    for (var i = this.keys.length - 2; i >= 0; i -= 2) {
      var keyL = this.keys[i];
      var keyR = this.keys[i + 1]; // f(r, k)

      expand(l, this.block, 0);
      keyL ^= this.block[0];
      keyR ^= this.block[1];
      var s = substitute(keyL, keyR);
      var f = permute(s);
      var t = l;
      l = (r ^ f) >>> 0;
      r = t;
    } // Reverse Initial Permutation


    rip(l, r, out, off);
    return this;
  }

}
/**
 * EDE
 */


class EDE {
  constructor() {
    this.x = new DES();
    this.y = new DES();
  }

  get blockSize() {
    return 8;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 16);
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    this.x.init(k1);
    this.y.init(k2);
    return this;
  }

  encrypt(input, ipos, output, opos) {
    this.x.encrypt(input, ipos, output, opos);
    this.y.decrypt(output, opos, output, opos);
    this.x.encrypt(output, opos, output, opos);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    this.x.decrypt(input, ipos, output, opos);
    this.y.encrypt(output, opos, output, opos);
    this.x.decrypt(output, opos, output, opos);
    return this;
  }

  destroy() {
    this.x.destroy();
    this.y.destroy();
    return this;
  }

}
/**
 * EDE3
 */


class EDE3 {
  constructor() {
    this.x = new DES();
    this.y = new DES();
    this.z = new DES();
  }

  get blockSize() {
    return 8;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 24);
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    this.x.init(k1);
    this.y.init(k2);
    this.z.init(k3);
    return this;
  }

  encrypt(input, ipos, output, opos) {
    this.x.encrypt(input, ipos, output, opos);
    this.y.decrypt(output, opos, output, opos);
    this.z.encrypt(output, opos, output, opos);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    this.z.decrypt(input, ipos, output, opos);
    this.y.encrypt(output, opos, output, opos);
    this.x.decrypt(output, opos, output, opos);
    return this;
  }

  destroy() {
    this.x.destroy();
    this.y.destroy();
    this.z.destroy();
    return this;
  }

}
/*
 * Helpers
 */


function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
    }

    for (var _j = 0; _j <= 24; _j += 8) {
      outL <<= 1;
      outL |= inL >>> _j + i & 1;
    }
  }

  for (var _i2 = 6; _i2 >= 0; _i2 -= 2) {
    for (var _j2 = 1; _j2 <= 25; _j2 += 8) {
      outR <<= 1;
      outR |= inR >>> _j2 + _i2 & 1;
    }

    for (var _j3 = 1; _j3 <= 25; _j3 += 8) {
      outR <<= 1;
      outR |= inL >>> _j3 + _i2 & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
}

function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var _i3 = 4; _i3 < 8; _i3++) {
    for (var _j4 = 24; _j4 >= 0; _j4 -= 8) {
      outR <<= 1;
      outR |= inR >>> _j4 + _i3 & 1;
      outR <<= 1;
      outR |= inL >>> _j4 + _i3 & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
}

function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0; // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28

  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >> j + i & 1;
    }

    for (var _j5 = 0; _j5 <= 24; _j5 += 8) {
      outL <<= 1;
      outL |= inL >> _j5 + i & 1;
    }
  }

  for (var _j6 = 0; _j6 <= 24; _j6 += 8) {
    outL <<= 1;
    outL |= inR >> _j6 + 4 & 1;
  } // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60


  for (var _i4 = 1; _i4 <= 3; _i4++) {
    for (var _j7 = 0; _j7 <= 24; _j7 += 8) {
      outR <<= 1;
      outR |= inR >> _j7 + _i4 & 1;
    }

    for (var _j8 = 0; _j8 <= 24; _j8 += 8) {
      outR <<= 1;
      outR |= inL >> _j8 + _i4 & 1;
    }
  }

  for (var _j9 = 0; _j9 <= 24; _j9 += 8) {
    outR <<= 1;
    outR |= inL >> _j9 + 4 & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
}

function r28shl(num, shift) {
  return num << shift & 0xfffffff | num >>> 28 - shift;
}

function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;
  var len = PC2.length >>> 1;

  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= inL >>> PC2[i] & 1;
  }

  for (var _i5 = len; _i5 < PC2.length; _i5++) {
    outR <<= 1;
    outR |= inR >>> PC2[_i5] & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
}

function expand(r, out, off) {
  var outL = 0;
  var outR = 0;
  outL = (r & 1) << 5 | r >>> 27;

  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= r >>> i & 0x3f;
  }

  for (var _i6 = 11; _i6 >= 3; _i6 -= 4) {
    outR |= r >>> _i6 & 0x3f;
    outR <<= 6;
  }

  outR |= (r & 0x1f) << 1 | r >>> 31;
  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
}

function substitute(inL, inR) {
  var out = 0;

  for (var i = 0; i < 4; i++) {
    var b = inL >>> 18 - i * 6 & 0x3f;
    var sb = S$1[i * 0x40 + b];
    out <<= 4;
    out |= sb;
  }

  for (var _i7 = 0; _i7 < 4; _i7++) {
    var _b = inR >>> 18 - _i7 * 6 & 0x3f;

    var _sb = S$1[4 * 0x40 + _i7 * 0x40 + _b];
    out <<= 4;
    out |= _sb;
  }

  return out >>> 0;
}

function permute(num) {
  var out = 0;

  for (var i = 0; i < PERMUTE.length; i++) {
    out <<= 1;
    out |= num >>> PERMUTE[i] & 1;
  }

  return out >>> 0;
}

function readU32$b(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$a(dst, num, off) {
  dst[off++] = num >>> 24;
  dst[off++] = num >>> 16;
  dst[off++] = num >>> 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var DES_1 = DES;
var EDE_1 = EDE;
var EDE3_1 = EDE3;
var des = {
  DES: DES_1,
  EDE: EDE_1,
  EDE3: EDE3_1
};

/*
 * Constants
 */


var ROUNDS = 8;
var KEYLEN = 6 * ROUNDS + 4;
var ZERO16$2 = Buffer.alloc(16, 0x00);
/**
 * IDEA
 */

class IDEA {
  constructor() {
    this.key = ZERO16$2;
    this.encryptKey = null;
    this.decryptKey = null;
  }

  get blockSize() {
    return 8;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length === 16);
    this.destroy();
    this.key = Buffer.from(key);
    return this;
  }

  getEncryptKey() {
    if (!this.encryptKey) this.encryptKey = this.expandKey(this.key);
    return this.encryptKey;
  }

  getDecryptKey() {
    if (!this.decryptKey) this.decryptKey = this.invertKey(this.getEncryptKey());
    return this.decryptKey;
  }

  encrypt(input, ipos, output, opos) {
    var key = this.getEncryptKey();
    return this.crypt(input, ipos, output, opos, key);
  }

  decrypt(input, ipos, output, opos) {
    var key = this.getDecryptKey();
    return this.crypt(input, ipos, output, opos, key);
  }

  destroy() {
    for (var i = 0; i < 16; i++) {
      this.key[i] = 0;
    }

    if (this.encryptKey) {
      for (var _i = 0; _i < KEYLEN; _i++) {
        this.encryptKey[_i] = 0;
      }
    }

    if (this.decryptKey) {
      for (var _i2 = 0; _i2 < KEYLEN; _i2++) {
        this.decryptKey[_i2] = 0;
      }
    }

    this.key = ZERO16$2;
    this.encryptKey = null;
    this.decryptKey = null;
    return this;
  }

  expandKey(key) {
    var ek = new Uint16Array(KEYLEN);
    var p = 0;
    var j = 0;
    var i = 0;

    for (; j < 8; j++) {
      ek[j] = readU16$3(key, p);
      p += 2;
    }

    p = 0;

    for (; j < KEYLEN; j++) {
      i += 1;
      ek[p + (i + 7)] = ek[p + (i & 7)] << 9 | ek[p + (i + 1 & 7)] >>> 7;
      p += i & 8;
      i &= 7;
    }

    return ek;
  }

  invertKey(ek) {
    var dk = new Uint16Array(KEYLEN);
    var t1, t2, t3;
    var dki = KEYLEN;
    var eki = 0;
    t1 = invm(ek[eki]);
    eki += 1;
    t2 = -ek[eki];
    eki += 1;
    t3 = -ek[eki];
    eki += 1;
    dki -= 1;
    dk[dki] = invm(ek[eki]);
    eki += 1;
    dki -= 1;
    dk[dki] = t3;
    dki -= 1;
    dk[dki] = t2;
    dki -= 1;
    dk[dki] = t1;

    for (var i = 0; i < ROUNDS - 1; i++) {
      t1 = ek[eki];
      eki += 1;
      dki -= 1;
      dk[dki] = ek[eki];
      eki += 1;
      dki -= 1;
      dk[dki] = t1;
      t1 = invm(ek[eki]);
      eki += 1;
      t2 = -ek[eki];
      eki += 1;
      t3 = -ek[eki];
      eki += 1;
      dki -= 1;
      dk[dki] = invm(ek[eki]);
      eki += 1;
      dki -= 1;
      dk[dki] = t2;
      dki -= 1;
      dk[dki] = t3;
      dki -= 1;
      dk[dki] = t1;
    }

    t1 = ek[eki];
    eki += 1;
    dki -= 1;
    dk[dki] = ek[eki];
    eki += 1;
    dki -= 1;
    dk[dki] = t1;
    t1 = invm(ek[eki]);
    eki += 1;
    t2 = -ek[eki];
    eki += 1;
    t3 = -ek[eki];
    eki += 1;
    dki -= 1;
    dk[dki] = invm(ek[eki]);
    dki -= 1;
    dk[dki] = t3;
    dki -= 1;
    dk[dki] = t2;
    dki -= 1;
    dk[dki] = t1;
    return dk;
  }

  crypt(input, ipos, output, opos, key) {
    var x1 = readU16$3(input, ipos + 0);
    var x2 = readU16$3(input, ipos + 2);
    var x3 = readU16$3(input, ipos + 4);
    var x4 = readU16$3(input, ipos + 6);
    var s2 = 0;
    var s3 = 0;
    var p = 0;

    for (var r = ROUNDS; r > 0; r--) {
      x1 = mul(x1, key[p]);
      p += 1;
      x2 += key[p];
      p += 1;
      x3 += key[p];
      p += 1;
      x4 = mul(x4, key[p]);
      p += 1;
      s3 = x3;
      x3 ^= x1;
      x3 = mul(x3, key[p]);
      p += 1;
      s2 = x2;
      x2 ^= x4;
      x2 += x3;
      x2 = mul(x2, key[p]);
      p += 1;
      x3 += x2;
      x1 ^= x2;
      x4 ^= x3;
      x2 ^= s3;
      x3 ^= s2;
    }

    x1 = mul(x1, key[p]);
    p += 1;
    x3 += key[p];
    p += 1;
    x2 += key[p];
    p += 1;
    x4 = mul(x4, key[p]);
    writeU16$3(output, x1, opos + 0);
    writeU16$3(output, x3, opos + 2);
    writeU16$3(output, x2, opos + 4);
    writeU16$3(output, x4, opos + 6);
  }

}
/*
 * Helpers
 */


function invm(x) {
  x &= 0xffff;
  if (x <= 1) return x;
  var t1 = 0x10001 / x & 0xffff;
  var y = 0x10001 % x;
  if (y === 1) return 1 - t1 & 0xffff;
  var t0 = 1;
  var q = 0;

  while (y !== 1) {
    q = x / y & 0xffff;
    x %= y;
    t0 += q * t1;
    t0 &= 0xffff;
    if (x === 1) return t0;
    q = y / x & 0xffff;
    y %= x;
    t1 += q * t0;
    t1 &= 0xffff;
  }

  return 1 - t1 & 0xffff;
}

function mul(x, y) {
  x &= 0xffff;
  y &= 0xffff;
  if (y === 0) return 1 - x & 0xffff;
  if (x === 0) return 1 - y & 0xffff;
  var t32 = x * y >>> 0;
  x = t32 & 0xffff;
  y = t32 >>> 16;
  if (x < y) return x - y + 1 & 0xffff;
  return x - y & 0xffff;
}

function readU16$3(data, pos) {
  return data[pos++] * 0x100 + data[pos];
}

function writeU16$3(data, value, pos) {
  data[pos++] = value >>> 8;
  data[pos++] = value;
  return pos;
}
/*
 * Expose
 */


var idea = IDEA;

/*
 * Constants
 */


var PI = new Uint8Array([0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d, 0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2, 0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32, 0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82, 0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc, 0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26, 0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03, 0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7, 0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a, 0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec, 0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39, 0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31, 0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9, 0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9, 0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e, 0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad]);
/**
 * RC2
 */

class RC2 {
  constructor() {
    this.k = new Uint16Array(64);
    this.r = new Uint16Array(4);
  }

  get blockSize() {
    return 8;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    assert_1(key.length >= 1 && key.length <= 128);
    this.expandKey(key, key.length * 8);
    return this;
  }

  expandKey(key, bits) {
    var L = Buffer.alloc(128, 0x00);
    key.copy(L, 0);
    var t = key.length;
    var t1 = bits;
    var t8 = t1 + 7 >>> 3;
    var tm = 255 % (1 << 8 + t1 - 8 * t8);

    for (var i = key.length; i < 128; i++) {
      L[i] = PI[L[i - 1] + L[i - t & 0xff] & 0xff];
    }

    L[128 - t8] = PI[L[128 - t8] & tm];

    for (var _i = 127 - t8; _i >= 0; _i--) {
      L[_i] = PI[L[_i + 1] ^ L[_i + t8]];
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.k[_i2] = L[2 * _i2] + L[2 * _i2 + 1] * 256;
    }

    return this;
  }

  encrypt(input, ipos, output, opos) {
    var r = this.r;
    r[0] = readU16$4(input, ipos + 0);
    r[1] = readU16$4(input, ipos + 2);
    r[2] = readU16$4(input, ipos + 4);
    r[3] = readU16$4(input, ipos + 6);
    var j = 0;

    while (j <= 16) {
      // mix r[0]
      r[0] += this.k[j];
      r[0] += r[3] & r[2];
      r[0] += ~r[3] & r[1];
      r[0] = rotl16(r[0], 1);
      j += 1; // mix r[1]

      r[1] += this.k[j];
      r[1] += r[0] & r[3];
      r[1] += ~r[0] & r[2];
      r[1] = rotl16(r[1], 2);
      j += 1; // mix r[2]

      r[2] += this.k[j];
      r[2] += r[1] & r[0];
      r[2] += ~r[1] & r[3];
      r[2] = rotl16(r[2], 3);
      j += 1; // mix r[3]

      r[3] += this.k[j];
      r[3] += r[2] & r[1];
      r[3] += ~r[2] & r[0];
      r[3] = rotl16(r[3], 5);
      j += 1;
    }
    r[0] += this.k[r[3] & 63];
    r[1] += this.k[r[0] & 63];
    r[2] += this.k[r[1] & 63];
    r[3] += this.k[r[2] & 63];

    while (j <= 40) {
      // mix r[0]
      r[0] += this.k[j];
      r[0] += r[3] & r[2];
      r[0] += ~r[3] & r[1];
      r[0] = rotl16(r[0], 1);
      j += 1; // mix r[1]

      r[1] += this.k[j];
      r[1] += r[0] & r[3];
      r[1] += ~r[0] & r[2];
      r[1] = rotl16(r[1], 2);
      j += 1; // mix r[2]

      r[2] += this.k[j];
      r[2] += r[1] & r[0];
      r[2] += ~r[1] & r[3];
      r[2] = rotl16(r[2], 3);
      j += 1; // mix r[3]

      r[3] += this.k[j];
      r[3] += r[2] & r[1];
      r[3] += ~r[2] & r[0];
      r[3] = rotl16(r[3], 5);
      j += 1;
    }

    r[0] += this.k[r[3] & 63];
    r[1] += this.k[r[0] & 63];
    r[2] += this.k[r[1] & 63];
    r[3] += this.k[r[2] & 63];

    while (j <= 60) {
      // mix r[0]
      r[0] += this.k[j];
      r[0] += r[3] & r[2];
      r[0] += ~r[3] & r[1];
      r[0] = rotl16(r[0], 1);
      j += 1; // mix r[1]

      r[1] += this.k[j];
      r[1] += r[0] & r[3];
      r[1] += ~r[0] & r[2];
      r[1] = rotl16(r[1], 2);
      j += 1; // mix r[2]

      r[2] += this.k[j];
      r[2] += r[1] & r[0];
      r[2] += ~r[1] & r[3];
      r[2] = rotl16(r[2], 3);
      j += 1; // mix r[3]

      r[3] += this.k[j];
      r[3] += r[2] & r[1];
      r[3] += ~r[2] & r[0];
      r[3] = rotl16(r[3], 5);
      j += 1;
    }

    writeU16$4(output, r[0], opos + 0);
    writeU16$4(output, r[1], opos + 2);
    writeU16$4(output, r[2], opos + 4);
    writeU16$4(output, r[3], opos + 6);
  }

  decrypt(input, ipos, output, opos) {
    var r = this.r;
    r[0] = readU16$4(input, ipos + 0);
    r[1] = readU16$4(input, ipos + 2);
    r[2] = readU16$4(input, ipos + 4);
    r[3] = readU16$4(input, ipos + 6);
    var j = 63;

    while (j >= 44) {
      // unmix r[3]
      r[3] = rotl16(r[3], 16 - 5);
      r[3] -= this.k[j];
      r[3] -= r[2] & r[1];
      r[3] -= ~r[2] & r[0];
      j -= 1; // unmix r[2]

      r[2] = rotl16(r[2], 16 - 3);
      r[2] -= this.k[j];
      r[2] -= r[1] & r[0];
      r[2] -= ~r[1] & r[3];
      j -= 1; // unmix r[1]

      r[1] = rotl16(r[1], 16 - 2);
      r[1] -= this.k[j];
      r[1] -= r[0] & r[3];
      r[1] -= ~r[0] & r[2];
      j -= 1; // unmix r[0]

      r[0] = rotl16(r[0], 16 - 1);
      r[0] -= this.k[j];
      r[0] -= r[3] & r[2];
      r[0] -= ~r[3] & r[1];
      j -= 1;
    }

    r[3] -= this.k[r[2] & 63];
    r[2] -= this.k[r[1] & 63];
    r[1] -= this.k[r[0] & 63];
    r[0] -= this.k[r[3] & 63];

    while (j >= 20) {
      // unmix r[3]
      r[3] = rotl16(r[3], 16 - 5);
      r[3] -= this.k[j];
      r[3] -= r[2] & r[1];
      r[3] -= ~r[2] & r[0];
      j -= 1; // unmix r[2]

      r[2] = rotl16(r[2], 16 - 3);
      r[2] -= this.k[j];
      r[2] -= r[1] & r[0];
      r[2] -= ~r[1] & r[3];
      j -= 1; // unmix r[1]

      r[1] = rotl16(r[1], 16 - 2);
      r[1] -= this.k[j];
      r[1] -= r[0] & r[3];
      r[1] -= ~r[0] & r[2];
      j -= 1; // unmix r[0]

      r[0] = rotl16(r[0], 16 - 1);
      r[0] -= this.k[j];
      r[0] -= r[3] & r[2];
      r[0] -= ~r[3] & r[1];
      j -= 1;
    }

    r[3] -= this.k[r[2] & 63];
    r[2] -= this.k[r[1] & 63];
    r[1] -= this.k[r[0] & 63];
    r[0] -= this.k[r[3] & 63];

    while (j >= 0) {
      // unmix r[3]
      r[3] = rotl16(r[3], 16 - 5);
      r[3] -= this.k[j];
      r[3] -= r[2] & r[1];
      r[3] -= ~r[2] & r[0];
      j -= 1; // unmix r[2]

      r[2] = rotl16(r[2], 16 - 3);
      r[2] -= this.k[j];
      r[2] -= r[1] & r[0];
      r[2] -= ~r[1] & r[3];
      j -= 1; // unmix r[1]

      r[1] = rotl16(r[1], 16 - 2);
      r[1] -= this.k[j];
      r[1] -= r[0] & r[3];
      r[1] -= ~r[0] & r[2];
      j -= 1; // unmix r[0]

      r[0] = rotl16(r[0], 16 - 1);
      r[0] -= this.k[j];
      r[0] -= r[3] & r[2];
      r[0] -= ~r[3] & r[1];
      j -= 1;
    }

    writeU16$4(output, r[0], opos + 0);
    writeU16$4(output, r[1], opos + 2);
    writeU16$4(output, r[2], opos + 4);
    writeU16$4(output, r[3], opos + 6);
  }

  destroy() {
    for (var i = 0; i < 64; i++) {
      this.k[i] = 0;
    }

    for (var _i3 = 0; _i3 < 4; _i3++) {
      this.r[_i3] = 0;
    }

    return this;
  }

}
/*
 * Helpers
 */


function rotl16(x, b) {
  return x >>> 16 - b | x << b;
}

function readU16$4(data, pos) {
  return data[pos++] + data[pos] * 0x100;
}

function writeU16$4(data, value, pos) {
  data[pos++] = value;
  data[pos++] = value >>> 8;
  return pos;
}
/*
 * Expose
 */


var rc2 = RC2;

/*
 * Constants
 */


var BLOCK_SIZE = 16;
var MDS_POLY = 0x169; // x^8 + x^6 + x^5 + x^3 + 1

var RS_POLY = 0x14d; // x^8 + x^6 + x^3 + x^2 + 1

var RS = [new Uint8Array([0x01, 0xa4, 0x55, 0x87, 0x5a, 0x58, 0xdb, 0x9e]), new Uint8Array([0xa4, 0x56, 0x82, 0xf3, 0x1e, 0xc6, 0x68, 0xe5]), new Uint8Array([0x02, 0xa1, 0xfc, 0xc1, 0x47, 0xae, 0x3d, 0x19]), new Uint8Array([0xa4, 0x55, 0x87, 0x5a, 0x58, 0xdb, 0x9e, 0x03])];
var S0$1 = new Uint8Array([0xa9, 0x67, 0xb3, 0xe8, 0x04, 0xfd, 0xa3, 0x76, 0x9a, 0x92, 0x80, 0x78, 0xe4, 0xdd, 0xd1, 0x38, 0x0d, 0xc6, 0x35, 0x98, 0x18, 0xf7, 0xec, 0x6c, 0x43, 0x75, 0x37, 0x26, 0xfa, 0x13, 0x94, 0x48, 0xf2, 0xd0, 0x8b, 0x30, 0x84, 0x54, 0xdf, 0x23, 0x19, 0x5b, 0x3d, 0x59, 0xf3, 0xae, 0xa2, 0x82, 0x63, 0x01, 0x83, 0x2e, 0xd9, 0x51, 0x9b, 0x7c, 0xa6, 0xeb, 0xa5, 0xbe, 0x16, 0x0c, 0xe3, 0x61, 0xc0, 0x8c, 0x3a, 0xf5, 0x73, 0x2c, 0x25, 0x0b, 0xbb, 0x4e, 0x89, 0x6b, 0x53, 0x6a, 0xb4, 0xf1, 0xe1, 0xe6, 0xbd, 0x45, 0xe2, 0xf4, 0xb6, 0x66, 0xcc, 0x95, 0x03, 0x56, 0xd4, 0x1c, 0x1e, 0xd7, 0xfb, 0xc3, 0x8e, 0xb5, 0xe9, 0xcf, 0xbf, 0xba, 0xea, 0x77, 0x39, 0xaf, 0x33, 0xc9, 0x62, 0x71, 0x81, 0x79, 0x09, 0xad, 0x24, 0xcd, 0xf9, 0xd8, 0xe5, 0xc5, 0xb9, 0x4d, 0x44, 0x08, 0x86, 0xe7, 0xa1, 0x1d, 0xaa, 0xed, 0x06, 0x70, 0xb2, 0xd2, 0x41, 0x7b, 0xa0, 0x11, 0x31, 0xc2, 0x27, 0x90, 0x20, 0xf6, 0x60, 0xff, 0x96, 0x5c, 0xb1, 0xab, 0x9e, 0x9c, 0x52, 0x1b, 0x5f, 0x93, 0x0a, 0xef, 0x91, 0x85, 0x49, 0xee, 0x2d, 0x4f, 0x8f, 0x3b, 0x47, 0x87, 0x6d, 0x46, 0xd6, 0x3e, 0x69, 0x64, 0x2a, 0xce, 0xcb, 0x2f, 0xfc, 0x97, 0x05, 0x7a, 0xac, 0x7f, 0xd5, 0x1a, 0x4b, 0x0e, 0xa7, 0x5a, 0x28, 0x14, 0x3f, 0x29, 0x88, 0x3c, 0x4c, 0x02, 0xb8, 0xda, 0xb0, 0x17, 0x55, 0x1f, 0x8a, 0x7d, 0x57, 0xc7, 0x8d, 0x74, 0xb7, 0xc4, 0x9f, 0x72, 0x7e, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34, 0x6e, 0x50, 0xde, 0x68, 0x65, 0xbc, 0xdb, 0xf8, 0xc8, 0xa8, 0x2b, 0x40, 0xdc, 0xfe, 0x32, 0xa4, 0xca, 0x10, 0x21, 0xf0, 0xd3, 0x5d, 0x0f, 0x00, 0x6f, 0x9d, 0x36, 0x42, 0x4a, 0x5e, 0xc1, 0xe0]);
var S1$2 = new Uint8Array([0x75, 0xf3, 0xc6, 0xf4, 0xdb, 0x7b, 0xfb, 0xc8, 0x4a, 0xd3, 0xe6, 0x6b, 0x45, 0x7d, 0xe8, 0x4b, 0xd6, 0x32, 0xd8, 0xfd, 0x37, 0x71, 0xf1, 0xe1, 0x30, 0x0f, 0xf8, 0x1b, 0x87, 0xfa, 0x06, 0x3f, 0x5e, 0xba, 0xae, 0x5b, 0x8a, 0x00, 0xbc, 0x9d, 0x6d, 0xc1, 0xb1, 0x0e, 0x80, 0x5d, 0xd2, 0xd5, 0xa0, 0x84, 0x07, 0x14, 0xb5, 0x90, 0x2c, 0xa3, 0xb2, 0x73, 0x4c, 0x54, 0x92, 0x74, 0x36, 0x51, 0x38, 0xb0, 0xbd, 0x5a, 0xfc, 0x60, 0x62, 0x96, 0x6c, 0x42, 0xf7, 0x10, 0x7c, 0x28, 0x27, 0x8c, 0x13, 0x95, 0x9c, 0xc7, 0x24, 0x46, 0x3b, 0x70, 0xca, 0xe3, 0x85, 0xcb, 0x11, 0xd0, 0x93, 0xb8, 0xa6, 0x83, 0x20, 0xff, 0x9f, 0x77, 0xc3, 0xcc, 0x03, 0x6f, 0x08, 0xbf, 0x40, 0xe7, 0x2b, 0xe2, 0x79, 0x0c, 0xaa, 0x82, 0x41, 0x3a, 0xea, 0xb9, 0xe4, 0x9a, 0xa4, 0x97, 0x7e, 0xda, 0x7a, 0x17, 0x66, 0x94, 0xa1, 0x1d, 0x3d, 0xf0, 0xde, 0xb3, 0x0b, 0x72, 0xa7, 0x1c, 0xef, 0xd1, 0x53, 0x3e, 0x8f, 0x33, 0x26, 0x5f, 0xec, 0x76, 0x2a, 0x49, 0x81, 0x88, 0xee, 0x21, 0xc4, 0x1a, 0xeb, 0xd9, 0xc5, 0x39, 0x99, 0xcd, 0xad, 0x31, 0x8b, 0x01, 0x18, 0x23, 0xdd, 0x1f, 0x4e, 0x2d, 0xf9, 0x48, 0x4f, 0xf2, 0x65, 0x8e, 0x78, 0x5c, 0x58, 0x19, 0x8d, 0xe5, 0x98, 0x57, 0x67, 0x7f, 0x05, 0x64, 0xaf, 0x63, 0xb6, 0xfe, 0xf5, 0xb7, 0x3c, 0xa5, 0xce, 0xe9, 0x68, 0x44, 0xe0, 0x4d, 0x43, 0x69, 0x29, 0x2e, 0xac, 0x15, 0x59, 0xa8, 0x0a, 0x9e, 0x6e, 0x47, 0xdf, 0x34, 0x35, 0x6a, 0xcf, 0xdc, 0x22, 0xc9, 0xc0, 0x9b, 0x89, 0xd4, 0xed, 0xab, 0x12, 0xa2, 0x0d, 0x52, 0xbb, 0x02, 0x2f, 0xa9, 0xd7, 0x61, 0x1e, 0xb4, 0x50, 0x04, 0xf6, 0xc2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xbe, 0x91]);
/**
 * Twofish
 */

class Twofish {
  constructor() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    assert_1(bits >>> 0 === bits);
    assert_1(bits === 128 || bits === 192 || bits === 256);
    this.bits = bits;
    this.S = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
    this.k = new Uint32Array(40);
  }

  get blockSize() {
    return BLOCK_SIZE;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    var keylen = key.length;
    if (keylen !== 16 && keylen !== 24 && keylen !== 32) throw new Error('Invalid key size.');
    if (keylen !== this.bits >>> 3) throw new Error('Invalid key size.'); // k is the number of 64 bit words in key.

    var k = keylen >>> 3; // Create the S[..] words.

    var W = new Uint8Array(4 * 4);

    for (var i = 0; i < k; i++) {
      // Computes [y0 y1 y2 y3] = rs . [x0 x1 x2 x3 x4 x5 x6 x7].
      for (var j = 0; j < 4; j++) {
        var row = RS[j];

        for (var _k = 0; _k < 8; _k++) {
          W[4 * i + j] ^= gf(key[8 * i + _k], row[_k], RS_POLY);
        }
      }
    } // Calculate subkeys.


    var tmp = new Uint8Array(4);

    for (var _i = 0; _i < 20; _i++) {
      // A = h(p * 2x, Me)
      for (var _j = 0; _j < 4; _j++) {
        tmp[_j] = 2 * _i;
      }

      var A = h(tmp, key, 0); // B = rolc(h(p * (2x + 1), Mo), 8)

      for (var _j2 = 0; _j2 < 4; _j2++) {
        tmp[_j2] = 2 * _i + 1;
      }

      var B = rol32(h(tmp, key, 1), 8);
      this.k[2 * _i] = A + B; // K[2i+1] = (A + 2B) <<< 9

      this.k[2 * _i + 1] = rol32(2 * B + A, 9);
    } // Calculate sboxes.


    switch (k) {
      case 2:
        for (var _i2 = 0; _i2 < 256; _i2++) {
          this.S[0][_i2] = mds(S1$2[S0$1[S0$1[_i2] ^ W[0]] ^ W[4]], 0);
          this.S[1][_i2] = mds(S0$1[S0$1[S1$2[_i2] ^ W[1]] ^ W[5]], 1);
          this.S[2][_i2] = mds(S1$2[S1$2[S0$1[_i2] ^ W[2]] ^ W[6]], 2);
          this.S[3][_i2] = mds(S0$1[S1$2[S1$2[_i2] ^ W[3]] ^ W[7]], 3);
        }

        break;

      case 3:
        for (var _i3 = 0; _i3 < 256; _i3++) {
          this.S[0][_i3] = mds(S1$2[S0$1[S0$1[S1$2[_i3] ^ W[0]] ^ W[4]] ^ W[8]], 0);
          this.S[1][_i3] = mds(S0$1[S0$1[S1$2[S1$2[_i3] ^ W[1]] ^ W[5]] ^ W[9]], 1);
          this.S[2][_i3] = mds(S1$2[S1$2[S0$1[S0$1[_i3] ^ W[2]] ^ W[6]] ^ W[10]], 2);
          this.S[3][_i3] = mds(S0$1[S1$2[S1$2[S0$1[_i3] ^ W[3]] ^ W[7]] ^ W[11]], 3);
        }

        break;

      case 4:
        for (var _i4 = 0; _i4 < 256; _i4++) {
          this.S[0][_i4] = mds(S1$2[S0$1[S0$1[S1$2[S1$2[_i4] ^ W[0]] ^ W[4]] ^ W[8]] ^ W[12]], 0);
          this.S[1][_i4] = mds(S0$1[S0$1[S1$2[S1$2[S0$1[_i4] ^ W[1]] ^ W[5]] ^ W[9]] ^ W[13]], 1);
          this.S[2][_i4] = mds(S1$2[S1$2[S0$1[S0$1[S0$1[_i4] ^ W[2]] ^ W[6]] ^ W[10]] ^ W[14]], 2);
          this.S[3][_i4] = mds(S0$1[S1$2[S1$2[S0$1[S1$2[_i4] ^ W[3]] ^ W[7]] ^ W[11]] ^ W[15]], 3);
        }

        break;

      default:
        throw new Error('unreachable');
    }

    return this;
  }

  encrypt(input, ipos, output, opos) {
    var S0 = this.S[0];
    var S1 = this.S[1];
    var S2 = this.S[2];
    var S3 = this.S[3]; // Load input.

    var ia = readU32$c(input, ipos + 0);
    var ib = readU32$c(input, ipos + 4);
    var ic = readU32$c(input, ipos + 8);
    var id = readU32$c(input, ipos + 12);
    var t1, t2; // Pre-whitening.

    ia ^= this.k[0];
    ib ^= this.k[1];
    ic ^= this.k[2];
    id ^= this.k[3];

    for (var i = 0; i < 8; i++) {
      var k = this.k.subarray(8 + i * 4, 12 + i * 4);
      t2 = S1[ib & 0xff] ^ S2[ib >>> 8 & 0xff] ^ S3[ib >>> 16 & 0xff] ^ S0[ib >>> 24 & 0xff];
      t1 = (S0[ia & 0xff] ^ S1[ia >>> 8 & 0xff] ^ S2[ia >>> 16 & 0xff] ^ S3[ia >>> 24 & 0xff]) + t2;
      ic = ror32(ic ^ t1 + k[0], 1);
      id = rol32(id, 1) ^ t2 + t1 + k[1];
      t2 = S1[id & 0xff] ^ S2[id >>> 8 & 0xff] ^ S3[id >>> 16 & 0xff] ^ S0[id >>> 24 & 0xff];
      t1 = (S0[ic & 0xff] ^ S1[ic >>> 8 & 0xff] ^ S2[ic >>> 16 & 0xff] ^ S3[ic >>> 24 & 0xff]) + t2;
      ia = ror32(ia ^ t1 + k[2], 1);
      ib = rol32(ib, 1) ^ t2 + t1 + k[3];
    } // Output with "undo last swap".


    var ta = ic ^ this.k[4];
    var tb = id ^ this.k[5];
    var tc = ia ^ this.k[6];
    var td = ib ^ this.k[7];
    writeU32$b(output, ta, opos + 0);
    writeU32$b(output, tb, opos + 4);
    writeU32$b(output, tc, opos + 8);
    writeU32$b(output, td, opos + 12);
    return this;
  }

  decrypt(input, ipos, output, opos) {
    var S0 = this.S[0];
    var S1 = this.S[1];
    var S2 = this.S[2];
    var S3 = this.S[3]; // Load input.

    var ta = readU32$c(input, ipos + 0);
    var tb = readU32$c(input, ipos + 4);
    var tc = readU32$c(input, ipos + 8);
    var td = readU32$c(input, ipos + 12); // Undo undo final swap.

    var ia = tc ^ this.k[6];
    var ib = td ^ this.k[7];
    var ic = ta ^ this.k[4];
    var id = tb ^ this.k[5];
    var t1, t2;

    for (var i = 8; i > 0; i--) {
      var k = this.k.subarray(4 + i * 4, 8 + i * 4);
      t2 = S1[id & 0xff] ^ S2[id >>> 8 & 0xff] ^ S3[id >>> 16 & 0xff] ^ S0[id >>> 24 & 0xff];
      t1 = (S0[ic & 0xff] ^ S1[ic >>> 8 & 0xff] ^ S2[ic >>> 16 & 0xff] ^ S3[ic >>> 24 & 0xff]) + t2;
      ia = rol32(ia, 1) ^ t1 + k[2];
      ib = ror32(ib ^ t2 + t1 + k[3], 1);
      t2 = S1[ib & 0xff] ^ S2[ib >>> 8 & 0xff] ^ S3[ib >>> 16 & 0xff] ^ S0[ib >>> 24 & 0xff];
      t1 = (S0[ia & 0xff] ^ S1[ia >>> 8 & 0xff] ^ S2[ia >>> 16 & 0xff] ^ S3[ia >>> 24 & 0xff]) + t2;
      ic = rol32(ic, 1) ^ t1 + k[0];
      id = ror32(id ^ t2 + t1 + k[1], 1);
    } // Undo pre-whitening.


    ia ^= this.k[0];
    ib ^= this.k[1];
    ic ^= this.k[2];
    id ^= this.k[3];
    writeU32$b(output, ia, opos + 0);
    writeU32$b(output, ib, opos + 4);
    writeU32$b(output, ic, opos + 8);
    writeU32$b(output, id, opos + 12);
    return this;
  }

  destroy() {
    cleanse$1(this.S[0]);
    cleanse$1(this.S[1]);
    cleanse$1(this.S[2]);
    cleanse$1(this.S[3]);
    cleanse$1(this.k);
    return this;
  }

}
/*
 * Helpers
 */


function gf(a, b, p) {
  // gfMult = a*b in GF(2^8)/p
  var B = new Uint32Array([0, b & 0xff]);
  var P = new Uint32Array([0, p >>> 0]);
  var res = 0; // Branchless GF multiplier.

  for (var i = 0; i < 7; i++) {
    res ^= B[a & 1];
    a >>>= 1;
    B[1] = P[B[1] >>> 7] ^ B[1] << 1;
  }

  res ^= B[a & 1];
  return res & 0xff;
}

function mds(v, col) {
  // mdsColumnMult = y{col} where [y0 y1 y2 y3] = MDS * [x0]
  var x = v & 0xff;
  var y = gf(v, 0x5b, MDS_POLY);
  var z = gf(v, 0xef, MDS_POLY);

  switch (col) {
    case 0:
      return x | y << 8 | z << 16 | z << 24;

    case 1:
      return z | z << 8 | y << 16 | x << 24;

    case 2:
      return y | z << 8 | x << 16 | z << 24;

    case 3:
      return y | x << 8 | z << 16 | y << 24;
  }

  throw new Error('unreachable');
}

function h(v, key, off) {
  var y = new Uint8Array(4);

  for (var i = 0; i < 4; i++) {
    y[i] = v[i];
  }

  var k = key.length >>> 3;

  switch (k) {
    case 4:
      y[0] = S1$2[y[0]] ^ key[4 * (6 + off) + 0];
      y[1] = S0$1[y[1]] ^ key[4 * (6 + off) + 1];
      y[2] = S0$1[y[2]] ^ key[4 * (6 + off) + 2];
      y[3] = S1$2[y[3]] ^ key[4 * (6 + off) + 3];
    // fallthrough

    case 3:
      y[0] = S1$2[y[0]] ^ key[4 * (4 + off) + 0];
      y[1] = S1$2[y[1]] ^ key[4 * (4 + off) + 1];
      y[2] = S0$1[y[2]] ^ key[4 * (4 + off) + 2];
      y[3] = S0$1[y[3]] ^ key[4 * (4 + off) + 3];
    // fallthrough

    case 2:
      y[0] = S1$2[S0$1[S0$1[y[0]] ^ key[4 * (2 + off) + 0]] ^ key[4 * (0 + off) + 0]];
      y[1] = S0$1[S0$1[S1$2[y[1]] ^ key[4 * (2 + off) + 1]] ^ key[4 * (0 + off) + 1]];
      y[2] = S1$2[S1$2[S0$1[y[2]] ^ key[4 * (2 + off) + 2]] ^ key[4 * (0 + off) + 2]];
      y[3] = S0$1[S1$2[S1$2[y[3]] ^ key[4 * (2 + off) + 3]] ^ key[4 * (0 + off) + 3]];
      break;

    default:
      throw new Error('Invalid key size.');
  }

  var mult = 0; // [y0 y1 y2 y3] = MDS . [x0 x1 x2 x3]

  for (var _i5 = 0; _i5 < 4; _i5++) {
    mult ^= mds(y[_i5], _i5);
  }

  return mult >>> 0;
}

function rol32(x, y) {
  return x << (y & 31) | x >>> 32 - (y & 31);
}

function ror32(x, y) {
  return x >>> (y & 31) | x << 32 - (y & 31);
}

function cleanse$1(arr) {
  for (var i = 0; i < arr.length; i++) {
    arr[i] = 0;
  }
}

function readU32$c(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off++] * 0x1000000;
}

function writeU32$b(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var twofish = Twofish;

var {
  DES: DES$1,
  EDE: EDE$1,
  EDE3: EDE3$1
} = des;
/**
 * CipherBase
 */

class CipherBase {
  constructor(name, encrypt) {
    assert_1(typeof name === 'string');
    assert_1(typeof encrypt === 'boolean');
    this.encrypt = encrypt;
    this.ctx = null;

    this._init(name);
  }

  _init(name) {
    assert_1(typeof name === 'string');
    var info = ciphers_1.get(name);
    var Mode = modes.get(info.mode, this.encrypt);

    switch (info.algorithm) {
      case 'AES-128':
      case 'AES-192':
      case 'AES-256':
        {
          var bits = info.keySize * 8;
          this.ctx = new Mode(new aes(bits));
          break;
        }

      case 'BF':
        {
          this.ctx = new Mode(new blowfish());
          break;
        }

      case 'CAMELLIA-128':
      case 'CAMELLIA-192':
      case 'CAMELLIA-256':
        {
          var _bits = info.keySize * 8;

          this.ctx = new Mode(new camellia(_bits));
          break;
        }

      case 'CAST5':
        {
          this.ctx = new Mode(new cast5());
          break;
        }

      case 'DES':
        {
          this.ctx = new Mode(new DES$1());
          break;
        }

      case 'DES-EDE':
        {
          this.ctx = new Mode(new EDE$1());
          break;
        }

      case 'DES-EDE3':
        {
          this.ctx = new Mode(new EDE3$1());
          break;
        }

      case 'IDEA':
        {
          this.ctx = new Mode(new idea());
          break;
        }

      case 'RC2-64':
        {
          this.ctx = new Mode(new rc2());
          break;
        }

      case 'TWOFISH-128':
      case 'TWOFISH-192':
      case 'TWOFISH-256':
        {
          var _bits2 = info.keySize * 8;

          this.ctx = new Mode(new twofish(_bits2));
          break;
        }

      default:
        {
          throw new Error("Unsupported cipher: ".concat(info.name, "."));
        }
    }

    return this;
  }

  init(key, iv) {
    this.ctx.init(key, iv);
    return this;
  }

  update(data) {
    return this.ctx.update(data);
  }

  final() {
    return this.ctx.final();
  }

  setAAD(data) {
    assert_1(this.ctx);
    this.ctx.setAAD(data);
    return this;
  }

  getAuthTag() {
    assert_1(this.ctx);
    assert_1(this.encrypt);
    return this.ctx.getAuthTag();
  }

  setAuthTag(tag) {
    assert_1(this.ctx);
    assert_1(!this.encrypt);
    this.ctx.setAuthTag(tag);
    return this;
  }

}
/**
 * Cipher
 * @extends CipherBase
 */


class Cipher$1 extends CipherBase {
  constructor(name) {
    super(name, true);
  }

}
/**
 * Decipher
 * @extends CipherBase
 */


class Decipher extends CipherBase {
  constructor(name) {
    super(name, false);
  }

}
/*
 * API
 */


function encrypt(name, key, iv, data) {
  var ctx = new Cipher$1(name);
  ctx.init(key, iv);
  return Buffer.concat([ctx.update(data), ctx.final()]);
}

function decrypt(name, key, iv, data) {
  var ctx = new Decipher(name);
  ctx.init(key, iv);
  return Buffer.concat([ctx.update(data), ctx.final()]);
}
/*
 * Expose
 */


var native_1$5 = 0;
var _CipherBase = CipherBase;
var Cipher_1$1 = Cipher$1;
var Decipher_1 = Decipher;
var info$1 = ciphers_1.info;
var get$2 = ciphers_1.get;
var has$1 = ciphers_1.has;
var encrypt_1 = encrypt;
var decrypt_1 = decrypt;
var cipher = {
  native: native_1$5,
  _CipherBase: _CipherBase,
  Cipher: Cipher_1$1,
  Decipher: Decipher_1,
  info: info$1,
  get: get$2,
  has: has$1,
  encrypt: encrypt_1,
  decrypt: decrypt_1
};

var cipherBrowser = cipher;

/*
 * State
 */


var counter = 0;
/**
 * A maybe-secure memzero.
 * @param {Buffer} data
 */

function cleanse$2(data) {
  assert_1(Buffer.isBuffer(data));
  var ctr = counter;

  for (var i = 0; i < data.length; i++) {
    data[i] = ctr & 0xff;
    ctr += i;
  }

  counter = ctr >>> 0;
}
/*
 * Static
 */


cleanse$2.native = 0;
/*
 * Expose
 */

var cleanse_1 = cleanse$2;

var cleanseBrowser = cleanse_1;

/*
 * Constants
 */


var FINALIZED$4 = 0x80000000;
var ROUND_CONST = new Uint32Array([0x00000001, 0x00000000, 0x00008082, 0x00000000, 0x0000808a, 0x80000000, 0x80008000, 0x80000000, 0x0000808b, 0x00000000, 0x80000001, 0x00000000, 0x80008081, 0x80000000, 0x00008009, 0x80000000, 0x0000008a, 0x00000000, 0x00000088, 0x00000000, 0x80008009, 0x00000000, 0x8000000a, 0x00000000, 0x8000808b, 0x00000000, 0x0000008b, 0x80000000, 0x00008089, 0x80000000, 0x00008003, 0x80000000, 0x00008002, 0x80000000, 0x00000080, 0x80000000, 0x0000800a, 0x00000000, 0x8000000a, 0x80000000, 0x80008081, 0x80000000, 0x00008080, 0x80000000, 0x80000001, 0x00000000, 0x80008008, 0x80000000]);
/**
 * Keccak
 */

class Keccak {
  /**
   * Create a Keccak Context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(50);
    this.block = Buffer.allocUnsafe(168);
    this.bs = 136;
    this.pos = FINALIZED$4;
  }

  init() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    assert_1((bits & 0xffff) === bits);
    assert_1(bits >= 128);
    assert_1(bits <= 512);
    var rate = 1600 - bits * 2;
    assert_1(rate >= 0 && (rate & 63) === 0);
    this.bs = rate / 8;
    this.pos = 0;
    return this;
  }

  update(data) {
    assert_1(Buffer.isBuffer(data));
    assert_1(!(this.pos & FINALIZED$4), 'Context already finalized.');
    var len = data.length;
    var pos = this.pos;
    var off = 0;
    this.pos = (this.pos + len) % this.bs;

    if (pos > 0) {
      var want = this.bs - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < this.bs) return this;
      this.transform(this.block, 0);
    }

    while (len >= this.bs) {
      this.transform(data, off);
      off += this.bs;
      len -= this.bs;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
    return this;
  }

  final() {
    var pad = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0x01;
    var len = arguments.length > 1 ? arguments[1] : undefined;
    if (len == null) len = 0;
    if (len === 0) len = 100 - this.bs / 2;
    assert_1((pad & 0xff) === pad);
    assert_1(len >>> 0 === len);
    assert_1(!(this.pos & FINALIZED$4), 'Context already finalized.');
    this.block.fill(0, this.pos, this.bs);
    this.block[this.pos] |= pad;
    this.block[this.bs - 1] |= 0x80;
    this.transform(this.block, 0);
    this.pos = FINALIZED$4;
    assert_1(len < this.bs);
    var out = Buffer.allocUnsafe(len);

    for (var i = 0; i < len; i++) {
      out[i] = this.state[i >>> 2] >>> 8 * (i & 3);
    }

    for (var _i = 0; _i < 50; _i++) {
      this.state[_i] = 0;
    }

    for (var _i2 = 0; _i2 < this.bs; _i2++) {
      this.block[_i2] = 0;
    }

    return out;
  }

  transform(block, off) {
    var count = this.bs / 4;
    var s = this.state;

    for (var i = 0; i < count; i++) {
      s[i] ^= readU32$d(block, off + i * 4);
    }

    for (var n = 0; n < 48; n += 2) {
      var c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      var c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      var c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      var c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      var c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      var c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      var c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      var c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      var c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      var c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
      var h = void 0,
          l = void 0;
      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;
      var b0 = s[0];
      var b1 = s[1];
      var b32 = s[11] << 4 | s[10] >>> 28;
      var b33 = s[10] << 4 | s[11] >>> 28;
      var b14 = s[20] << 3 | s[21] >>> 29;
      var b15 = s[21] << 3 | s[20] >>> 29;
      var b46 = s[31] << 9 | s[30] >>> 23;
      var b47 = s[30] << 9 | s[31] >>> 23;
      var b28 = s[40] << 18 | s[41] >>> 14;
      var b29 = s[41] << 18 | s[40] >>> 14;
      var b20 = s[2] << 1 | s[3] >>> 31;
      var b21 = s[3] << 1 | s[2] >>> 31;
      var b2 = s[13] << 12 | s[12] >>> 20;
      var b3 = s[12] << 12 | s[13] >>> 20;
      var b34 = s[22] << 10 | s[23] >>> 22;
      var b35 = s[23] << 10 | s[22] >>> 22;
      var b16 = s[33] << 13 | s[32] >>> 19;
      var b17 = s[32] << 13 | s[33] >>> 19;
      var b48 = s[42] << 2 | s[43] >>> 30;
      var b49 = s[43] << 2 | s[42] >>> 30;
      var b40 = s[5] << 30 | s[4] >>> 2;
      var b41 = s[4] << 30 | s[5] >>> 2;
      var b22 = s[14] << 6 | s[15] >>> 26;
      var b23 = s[15] << 6 | s[14] >>> 26;
      var b4 = s[25] << 11 | s[24] >>> 21;
      var b5 = s[24] << 11 | s[25] >>> 21;
      var b36 = s[34] << 15 | s[35] >>> 17;
      var b37 = s[35] << 15 | s[34] >>> 17;
      var b18 = s[45] << 29 | s[44] >>> 3;
      var b19 = s[44] << 29 | s[45] >>> 3;
      var b10 = s[6] << 28 | s[7] >>> 4;
      var b11 = s[7] << 28 | s[6] >>> 4;
      var b42 = s[17] << 23 | s[16] >>> 9;
      var b43 = s[16] << 23 | s[17] >>> 9;
      var b24 = s[26] << 25 | s[27] >>> 7;
      var b25 = s[27] << 25 | s[26] >>> 7;
      var b6 = s[36] << 21 | s[37] >>> 11;
      var b7 = s[37] << 21 | s[36] >>> 11;
      var b38 = s[47] << 24 | s[46] >>> 8;
      var b39 = s[46] << 24 | s[47] >>> 8;
      var b30 = s[8] << 27 | s[9] >>> 5;
      var b31 = s[9] << 27 | s[8] >>> 5;
      var b12 = s[18] << 20 | s[19] >>> 12;
      var b13 = s[19] << 20 | s[18] >>> 12;
      var b44 = s[29] << 7 | s[28] >>> 25;
      var b45 = s[28] << 7 | s[29] >>> 25;
      var b26 = s[38] << 8 | s[39] >>> 24;
      var b27 = s[39] << 8 | s[38] >>> 24;
      var b8 = s[48] << 14 | s[49] >>> 18;
      var b9 = s[49] << 14 | s[48] >>> 18;
      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;
      s[0] ^= ROUND_CONST[n];
      s[1] ^= ROUND_CONST[n + 1];
    }
  }

  static hash() {
    return new Keccak();
  }

  static hmac() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0x01;
    var len = arguments.length > 2 ? arguments[2] : undefined;
    assert_1(bits >>> 0 === bits);
    var bs = (1600 - bits * 2) / 8;
    return new hmac(Keccak, bs, [bits], [pad, len]);
  }

  static digest(data) {
    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
    var pad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0x01;
    var len = arguments.length > 3 ? arguments[3] : undefined;
    return Keccak.ctx.init(bits).update(data).final(pad, len);
  }

  static root(left, right) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var pad = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0x01;
    var len = arguments.length > 4 ? arguments[4] : undefined;
    if (len == null) len = 0;

    if (len === 0) {
      assert_1(bits >>> 0 === bits);
      len = bits >>> 3;
    }

    assert_1(len >>> 0 === len);
    assert_1(Buffer.isBuffer(left) && left.length === len);
    assert_1(Buffer.isBuffer(right) && right.length === len);
    return Keccak.ctx.init(bits).update(left).update(right).final(pad, len);
  }

  static multi(x, y, z) {
    var bits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;
    var pad = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0x01;
    var len = arguments.length > 5 ? arguments[5] : undefined;
    var ctx = Keccak.ctx;
    ctx.init(bits);
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final(pad, len);
  }

  static mac(data, key) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var pad = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0x01;
    var len = arguments.length > 4 ? arguments[4] : undefined;
    return Keccak.hmac(bits, pad, len).init(key).update(data).final();
  }

}
/*
 * Static
 */


Keccak.native = 0;
Keccak.id = 'KECCAK256';
Keccak.size = 32;
Keccak.bits = 256;
Keccak.blockSize = 136;
Keccak.zero = Buffer.alloc(32, 0x00);
Keccak.ctx = new Keccak();
/*
 * Helpers
 */

function readU32$d(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}
/*
 * Expose
 */


var keccak = Keccak;

var keccakBrowser = keccak;

/*
 * Constants
 */


var EMPTY$6 = Buffer.alloc(0);
var ZEROES = Buffer.alloc(200, 0x00);
/*
 * CSHAKE
 */

class CSHAKE extends keccakBrowser {
  constructor() {
    super();
    this.pad = 0x04;
    this.rate = 1088;
  }

  init() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var pers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (name == null) name = EMPTY$6;
    if (pers == null) pers = EMPTY$6;
    assert_1(bits >>> 0 === bits);
    assert_1(bits === 128 || bits === 256);
    assert_1(Buffer.isBuffer(name));
    assert_1(Buffer.isBuffer(pers));
    super.init(bits);

    if (name.length === 0 && pers.length === 0) {
      this.pad = 0x1f;
    } else {
      var rate = 1600 - bits * 2;
      var size = rate / 8;
      this.bytePad([name, pers], size);
      this.rate = rate;
      this.pad = 0x04;
    }

    return this;
  }

  final(len) {
    return super.final(this.pad, len);
  }

  bytePad(items, w) {
    assert_1(Array.isArray(items));
    assert_1(w >>> 0 === w);
    assert_1(w > 0);
    var z = this.leftEncode(w);

    for (var x of items) {
      z += this.encodeString(x);
    }

    var left = w - z % w;
    if (left === w) return z;
    z += this.zeroPad(left);
    return z;
  }

  encodeString(s) {
    assert_1(Buffer.isBuffer(s));
    var n = this.leftEncode(s.length * 8);
    this.update(s);
    return n + s.length;
  }

  zeroPad(size) {
    assert_1(size >>> 0 === size);
    assert_1(size <= 200);
    var buf = ZEROES.slice(0, size);
    this.update(buf);
    return buf.length;
  }

  leftEncode(x) {
    assert_1(x >>> 0 === x);
    assert_1(x >= 0 && x < 22040);
    var v = x;
    var n = 0;

    while (v && n < 4) {
      n += 1;
      v >>>= 8;
    }

    if (n === 0) n = 1;
    var buf = Buffer.allocUnsafe(n + 1);

    for (var i = 1; i <= n; i++) {
      buf[i] = x >>> 8 * (n - i);
    }

    buf[0] = n;
    this.update(buf);
    return buf.length;
  }

  rightEncode(x) {
    assert_1(x >>> 0 === x);
    assert_1(x >= 0 && x < 22040);
    var v = x;
    var n = 0;

    while (v && n < 4) {
      n += 1;
      v >>>= 8;
    }

    if (n === 0) n = 1;
    var buf = Buffer.allocUnsafe(n + 1);

    for (var i = 1; i <= n; i++) {
      buf[i - 1] = x >>> 8 * (n - i);
    }

    buf[n] = n;
    this.update(buf);
    return buf.length;
  }

  static hash() {
    return new CSHAKE();
  }

  static hmac() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    var name = arguments.length > 1 ? arguments[1] : undefined;
    var pers = arguments.length > 2 ? arguments[2] : undefined;
    var len = arguments.length > 3 ? arguments[3] : undefined;
    assert_1(bits >>> 0 === bits);
    assert_1(bits === 128 || bits === 256);
    var bs = (1600 - bits * 2) / 8;
    return new hmac(CSHAKE, bs, [bits, name, pers], [len]);
  }

  static digest(data) {
    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
    var name = arguments.length > 2 ? arguments[2] : undefined;
    var pers = arguments.length > 3 ? arguments[3] : undefined;
    var len = arguments.length > 4 ? arguments[4] : undefined;
    return CSHAKE.ctx.init(bits, name, pers).update(data).final(len);
  }

  static root(left, right) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var name = arguments.length > 3 ? arguments[3] : undefined;
    var pers = arguments.length > 4 ? arguments[4] : undefined;
    var len = arguments.length > 5 ? arguments[5] : undefined;
    if (len == null) len = 0;

    if (len === 0) {
      assert_1(bits >>> 0 === bits);
      len = bits >>> 3;
    }

    assert_1(len >>> 0 === len);
    assert_1(Buffer.isBuffer(left) && left.length === len);
    assert_1(Buffer.isBuffer(right) && right.length === len);
    var ctx = CSHAKE.ctx;
    ctx.init(bits, name, pers);
    ctx.update(left);
    ctx.update(right);
    return ctx.final(len);
  }

  static multi(x, y, z) {
    var bits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;
    var name = arguments.length > 4 ? arguments[4] : undefined;
    var pers = arguments.length > 5 ? arguments[5] : undefined;
    var len = arguments.length > 6 ? arguments[6] : undefined;
    var ctx = CSHAKE.ctx;
    ctx.init(bits, name, pers);
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final(len);
  }

  static mac(data, key) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var name = arguments.length > 3 ? arguments[3] : undefined;
    var pers = arguments.length > 4 ? arguments[4] : undefined;
    var len = arguments.length > 5 ? arguments[5] : undefined;
    return CSHAKE.hmac(bits, name, pers, len).init(key).update(data).final();
  }

}
/*
 * Static
 */


CSHAKE.native = keccakBrowser.native;
CSHAKE.id = 'CSHAKE256';
CSHAKE.size = 32;
CSHAKE.bits = 256;
CSHAKE.blockSize = 136;
CSHAKE.zero = Buffer.alloc(32, 0x00);
CSHAKE.ctx = new CSHAKE();
/*
 * Expose
 */

var cshake = CSHAKE;

/**
 * CSHAKE128
 */


class CSHAKE128 extends cshake {
  /**
   * Create a CSHAKE128 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  init(name, pers) {
    return super.init(128, name, pers);
  }

  static hash() {
    return new CSHAKE128();
  }

  static hmac(name, pers, len) {
    return super.hmac(128, name, pers, len);
  }

  static digest(data, name, pers, len) {
    return super.digest(data, 128, name, pers, len);
  }

  static root(left, right, name, pers, len) {
    return super.root(left, right, 128, name, pers, len);
  }

  static multi(x, y, z, name, pers, len) {
    return super.multi(x, y, z, 128, name, pers, len);
  }

  static mac(data, key, name, pers, len) {
    return super.mac(data, key, 128, name, pers, len);
  }

}
/*
 * Static
 */


CSHAKE128.native = cshake.native;
CSHAKE128.id = 'CSHAKE128';
CSHAKE128.size = 16;
CSHAKE128.bits = 128;
CSHAKE128.blockSize = 168;
CSHAKE128.zero = Buffer.alloc(16, 0x00);
CSHAKE128.ctx = new CSHAKE128();
/*
 * Expose
 */

var cshake128 = CSHAKE128;

/**
 * CSHAKE256
 */


class CSHAKE256 extends cshake {
  /**
   * Create a CSHAKE256 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  init(name, pers) {
    return super.init(256, name, pers);
  }

  static hash() {
    return new CSHAKE256();
  }

  static hmac(name, pers, len) {
    return super.hmac(256, name, pers, len);
  }

  static digest(data, name, pers, len) {
    return super.digest(data, 256, name, pers, len);
  }

  static root(left, right, name, pers, len) {
    return super.root(left, right, 256, name, pers, len);
  }

  static multi(x, y, z, name, pers, len) {
    return super.multi(x, y, z, 256, name, pers, len);
  }

  static mac(data, key, name, pers, len) {
    return super.mac(data, key, 256, name, pers, len);
  }

}
/*
 * Static
 */


CSHAKE256.native = cshake.native;
CSHAKE256.id = 'CSHAKE256';
CSHAKE256.size = 32;
CSHAKE256.bits = 256;
CSHAKE256.blockSize = 136;
CSHAKE256.zero = Buffer.alloc(32, 0x00);
CSHAKE256.ctx = new CSHAKE256();
/*
 * Expose
 */

var cshake256 = CSHAKE256;

var {
  Cipher: Cipher$2
} = cipherBrowser;
/*
 * Constants
 */

var MAX_GENERATE_LENGTH = 65536;
var RESEED_INTERVAL = 0x1000000000000;
/**
 * CtrDRBG
 */

class CtrDRBG {
  constructor(name, entropy, nonce, pers) {
    var derivation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    assert_1(derivation == null || typeof derivation === 'boolean');
    var [id, keySize, blkSize] = get$3(name);
    this.id = id;
    this.ctr = new CTR$2(id);
    this.keySize = keySize;
    this.blkSize = blkSize;
    this.entSize = keySize + blkSize;
    this.slab = Buffer.alloc(this.entSize);
    this.K = this.slab.slice(0, this.keySize);
    this.V = this.slab.slice(this.keySize);
    this.derivation = Boolean(derivation);
    this.rounds = 0;
    if (entropy) this.init(entropy, nonce, pers);
  }

  init(entropy) {
    var nonce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var pers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    if (nonce == null) nonce = Buffer.alloc(0);
    if (pers == null) pers = Buffer.alloc(0);
    assert_1(Buffer.isBuffer(entropy));
    assert_1(Buffer.isBuffer(nonce));
    assert_1(Buffer.isBuffer(pers));
    var seed;

    if (this.derivation) {
      seed = this.derive(entropy, nonce, pers);
    } else {
      if (entropy.length + nonce.length > this.entSize) throw new Error('Entropy is too long.');
      if (pers.length > this.entSize) throw new Error('Personalization string is too long.');
      seed = Buffer.alloc(this.entSize, 0x00);
      entropy.copy(seed, 0);
      nonce.copy(seed, entropy.length);

      for (var i = 0; i < pers.length; i++) {
        seed[i] ^= pers[i];
      }
    }

    this.slab.fill(0x00);
    this.ctr.init(this.K, this.V);
    this.update(seed);
    this.rounds = 1;
    return this;
  }

  reseed(entropy) {
    var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (add == null) add = Buffer.alloc(0);
    assert_1(Buffer.isBuffer(entropy));
    assert_1(Buffer.isBuffer(add));
    if (this.rounds === 0) throw new Error('DRBG not initialized.');
    var seed;

    if (this.derivation) {
      seed = this.derive(entropy, add);
    } else {
      if (add.length > this.entSize) throw new Error('Additional data is too long.');
      seed = Buffer.alloc(this.entSize, 0x00);
      entropy.copy(seed, 0);

      for (var i = 0; i < add.length; i++) {
        seed[i] ^= add[i];
      }
    }

    this.update(seed);
    this.rounds = 1;
    return this;
  }

  generate(len) {
    var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(len >>> 0 === len);
    assert_1(!add || Buffer.isBuffer(add));
    if (this.rounds === 0) throw new Error('DRBG not initialized.');
    if (this.rounds > RESEED_INTERVAL) throw new Error('Reseed is required.');
    if (len > MAX_GENERATE_LENGTH) throw new Error('Requested length is too long.');

    if (add && add.length !== 0) {
      if (this.derivation) add = this.derive(add);
      this.update(add);
    }

    var blocks = Math.ceil(len / this.blkSize);
    var out = Buffer.allocUnsafe(blocks * this.blkSize);

    for (var i = 0; i < blocks; i++) {
      this.ctr.encrypt(out, i * this.blkSize);
    }

    this.update(add);
    this.rounds += 1;
    return out.slice(0, len);
  }

  randomBytes(size) {
    return this.generate(size);
  }
  /*
   * Helpers
   */


  update() {
    var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (seed == null) seed = Buffer.alloc(0);
    assert_1(Buffer.isBuffer(seed));
    if (seed.length > this.entSize) throw new Error('Seed is too long.');
    this.slab.fill(0x00);

    for (var i = 0; i < this.entSize; i += this.blkSize) {
      this.ctr.encrypt(this.slab, i);
    }

    for (var _i = 0; _i < seed.length; _i++) {
      this.slab[_i] ^= seed[_i];
    }

    this.ctr.init(this.K, this.V);
    return this;
  }

  serialize() {
    var N = this.entSize;
    var L = 0;

    for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
      input[_key] = arguments[_key];
    }

    for (var item of input) {
      L += item.length;
    }

    var size = this.blkSize + 4 + 4 + L + 1;
    if (size % this.blkSize) size += this.blkSize - size % this.blkSize;
    assert_1(size % this.blkSize === 0); // S = IV || (L || N || input || 0x80 || 0x00...)

    var S = Buffer.alloc(size, 0x00);
    var pos = this.blkSize;
    S[pos++] = L >>> 24;
    S[pos++] = L >>> 16;
    S[pos++] = L >>> 8;
    S[pos++] = L;
    S[pos++] = N >>> 24;
    S[pos++] = N >>> 16;
    S[pos++] = N >>> 8;
    S[pos++] = N;

    for (var _item of input) {
      pos += _item.copy(S, pos);
    }

    S[pos++] = 0x80;
    assert_1(pos === this.blkSize + 4 + 4 + L + 1);
    return S;
  }

  derive() {
    var S = this.serialize(...arguments);
    var N = S.length / this.blkSize;
    var K = Buffer.alloc(this.keySize);
    var blocks = Math.ceil(this.entSize / this.blkSize);
    var slab = Buffer.alloc(blocks * this.blkSize);

    for (var i = 0; i < K.length; i++) {
      K[i] = i;
    }

    var ctx = new Cipher$2(this.id).init(K);

    for (var _i2 = 0; _i2 < blocks; _i2++) {
      var chain = Buffer.alloc(this.blkSize, 0x00);
      S[0] = _i2 >>> 24;
      S[1] = _i2 >>> 16;
      S[2] = _i2 >>> 8;
      S[3] = _i2; // chain = BCC(K, IV || S)

      for (var j = 0; j < N; j++) {
        for (var _k = 0; _k < chain.length; _k++) {
          chain[_k] ^= S[j * this.blkSize + _k];
        }

        chain = ctx.update(chain);
      }

      chain.copy(slab, _i2 * this.blkSize);
    }

    var k = slab.slice(0, this.keySize);
    ctx.init(k);
    var x = slab.slice(this.keySize, this.entSize);

    for (var _i3 = 0; _i3 < blocks; _i3++) {
      x = ctx.update(x);
      x.copy(slab, _i3 * this.blkSize);
    }

    return slab.slice(0, this.entSize);
  }

}
/*
 * Static
 */


CtrDRBG.native = 0;
/*
 * CTR
 */

class CTR$2 {
  constructor(name) {
    this.ctx = new Cipher$2(name);
    this.ctr = null;
  }

  init(key, iv) {
    this.ctx.init(key);
    this.ctr = Buffer.from(iv);
    return this;
  }

  increment() {
    for (var i = this.ctr.length - 1; i >= 0; i--) {
      this.ctr[i] += 1;
      if (this.ctr[i] !== 0x00) break;
    }
  }

  encrypt(output, opos) {
    this.increment();
    this.ctx.update(this.ctr).copy(output, opos);
    return this;
  }

}
/*
 * Helpers
 */


function get$3(name) {
  assert_1(typeof name === 'string');

  switch (name) {
    case 'AES-128':
      return ['AES-128-ECB', 16, 16];

    case 'AES-192':
      return ['AES-192-ECB', 24, 16];

    case 'AES-256':
      return ['AES-256-ECB', 32, 16];

    default:
      throw new Error("Unsupported cipher: ".concat(name, "."));
  }
}
/*
 * Expose
 */


var ctrDrbg = CtrDRBG;

/*
 * Constants
 */


var RESEED_INTERVAL$1 = 0x1000000000000;
var ZERO$3 = Buffer.from([0x00]);
var ONE = Buffer.from([0x01]);
/**
 * HmacDRBG
 */

class HmacDRBG {
  constructor(hash, entropy, nonce, pers) {
    assert_1(hash && typeof hash.id === 'string');
    this.hash = hash;
    this.minEntropy = hash.id === 'SHA1' ? 10 : 24;
    this.K = Buffer.allocUnsafe(hash.size);
    this.V = Buffer.allocUnsafe(hash.size);
    this.rounds = 0;
    if (entropy) this.init(entropy, nonce, pers);
  }

  init(entropy) {
    var nonce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var pers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    assert_1(Buffer.isBuffer(entropy));
    assert_1(!nonce || Buffer.isBuffer(nonce));
    assert_1(!pers || Buffer.isBuffer(pers));

    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    var seed = concat$3(entropy, nonce, pers);
    if (seed.length < this.minEntropy) throw new Error('Not enough entropy.');
    this.update(seed);
    this.rounds = 1;
    return this;
  }

  reseed(entropy) {
    var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(Buffer.isBuffer(entropy));
    assert_1(!add || Buffer.isBuffer(add));
    if (this.rounds === 0) throw new Error('DRBG not initialized.');
    var seed = concat$3(entropy, add);
    if (seed.length < this.minEntropy) throw new Error('Not enough entropy.');
    this.update(seed);
    this.rounds = 1;
    return this;
  }

  generate(len) {
    var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(len >>> 0 === len);
    assert_1(!add || Buffer.isBuffer(add));
    if (this.rounds === 0) throw new Error('DRBG not initialized.');
    if (this.rounds > RESEED_INTERVAL$1) throw new Error('Reseed is required.');
    if (add && add.length === 0) add = null;
    if (add) this.update(add);
    var blocks = Math.ceil(len / this.hash.size);
    var out = Buffer.allocUnsafe(blocks * this.hash.size);

    for (var i = 0; i < blocks; i++) {
      this.V = this.mac(this.V);
      this.V.copy(out, i * this.hash.size);
    }

    this.update(add);
    this.rounds += 1;
    return out.slice(0, len);
  }

  randomBytes(size) {
    return this.generate(size);
  }
  /*
   * Helpers
   */


  mac(data) {
    return this.hash.mac(data, this.K);
  }

  hmac() {
    return this.hash.hmac().init(this.K);
  }

  update() {
    var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    assert_1(!seed || Buffer.isBuffer(seed));
    var kmac = this.hmac();
    kmac.update(this.V);
    kmac.update(ZERO$3);
    if (seed) kmac.update(seed);
    this.K = kmac.final();
    this.V = this.mac(this.V);

    if (seed) {
      var _kmac = this.hmac();

      _kmac.update(this.V);

      _kmac.update(ONE);

      _kmac.update(seed);

      this.K = _kmac.final();
      this.V = this.mac(this.V);
    }

    return this;
  }

}
/*
 * Static
 */


HmacDRBG.native = 0;
/*
 * Helpers
 */

function concat$3(a) {
  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (!b && !c) return a;
  var s = a.length;
  var p = 0;
  if (b) s += b.length;
  if (c) s += c.length;
  var d = Buffer.allocUnsafe(s);
  p += a.copy(d, p);
  if (b) p += b.copy(d, p);
  if (c) c.copy(d, p);
  return d;
}
/*
 * Expose
 */


var hmacDrbg = HmacDRBG;

/*
 * Constants
 */


var FINALIZED$5 = -1;
var DESC$1 = Buffer.alloc(8, 0x00);
var PADDING$2 = Buffer.alloc(64, 0x00);
PADDING$2[0] = 0x80;
var K$1 = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
/**
 * SHA256
 */

class SHA256 {
  /**
   * Create a SHA256 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(8);
    this.msg = new Uint32Array(64);
    this.block = Buffer.allocUnsafe(64);
    this.size = FINALIZED$5;
  }
  /**
   * Initialize SHA256 context.
   */


  init() {
    this.state[0] = 0x6a09e667;
    this.state[1] = 0xbb67ae85;
    this.state[2] = 0x3c6ef372;
    this.state[3] = 0xa54ff53a;
    this.state[4] = 0x510e527f;
    this.state[5] = 0x9b05688c;
    this.state[6] = 0x1f83d9ab;
    this.state[7] = 0x5be0cd19;
    this.size = 0;
    return this;
  }
  /**
   * Update SHA256 context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize SHA256 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(32));
  }
  /**
   * Update SHA256 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$5, 'Context already finalized.');
    var pos = this.size & 0x3f;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 64 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 64) return;
      this.transform(this.block, 0);
    }

    while (len >= 64) {
      this.transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize SHA256 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$5, 'Context already finalized.');
    var pos = this.size % 64;
    var len = this.size * 8;
    writeU32$c(DESC$1, len * (1 / 0x100000000), 0);
    writeU32$c(DESC$1, len, 4);

    this._update(PADDING$2, 1 + (119 - pos) % 64);

    this._update(DESC$1, 8);

    for (var i = 0; i < 8; i++) {
      writeU32$c(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 64; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$5;
    return out;
  }
  /**
   * Transform SHA256 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var W = this.msg;
    var a = this.state[0];
    var b = this.state[1];
    var c = this.state[2];
    var d = this.state[3];
    var e = this.state[4];
    var f = this.state[5];
    var g = this.state[6];
    var h = this.state[7];
    var i = 0;

    for (; i < 16; i++) {
      W[i] = readU32$e(chunk, pos + i * 4);
    }

    for (; i < 64; i++) {
      W[i] = sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];
    }

    for (i = 0; i < 64; i++) {
      var t1 = h + Sigma1(e);
      t1 += Ch(e, f, g);
      t1 += K$1[i] + W[i];
      var t2 = Sigma0(a);
      t2 += Maj(a, b, c);
      h = g;
      g = f;
      f = e;
      e = d + t1;
      d = c;
      c = b;
      b = a;
      a = t1 + t2;
    }

    this.state[0] += a;
    this.state[1] += b;
    this.state[2] += c;
    this.state[3] += d;
    this.state[4] += e;
    this.state[5] += f;
    this.state[6] += g;
    this.state[7] += h;
  }

  static hash() {
    return new SHA256();
  }

  static hmac() {
    return new hmac(SHA256, 64);
  }

  static digest(data) {
    return SHA256.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 32);
    assert_1(Buffer.isBuffer(right) && right.length === 32);
    return SHA256.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = SHA256.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return SHA256.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


SHA256.native = 0;
SHA256.id = 'SHA256';
SHA256.size = 32;
SHA256.bits = 256;
SHA256.blockSize = 64;
SHA256.zero = Buffer.alloc(32, 0x00);
SHA256.ctx = new SHA256();
/*
 * Helpers
 */

function Sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function Sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function sigma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function sigma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

function Ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function Maj(x, y, z) {
  return x & y | z & (x | y);
}

function readU32$e(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$c(data, num, off) {
  data[off++] = num >>> 24;
  data[off++] = num >>> 16;
  data[off++] = num >>> 8;
  data[off++] = num;
  return off;
}
/*
 * Expose
 */


var sha256 = SHA256;

var sha256Browser = sha256;

/*
 * Constants
 */


var smallPrimes = new Uint8Array([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]);
var smallPrimesProduct = new bnBrowser('16294579238595022365', 10);
var primeBitMaskLo = 0 | 1 << 2 | 1 << 3 | 1 << 5 | 1 << 7 | 1 << 11 | 1 << 13 | 1 << 17 | 1 << 19 | 1 << 23 | 1 << 29 | 1 << 31;
var primeBitMaskHi = 0 | 1 << 37 - 32 | 1 << 41 - 32 | 1 << 43 - 32 | 1 << 47 - 32 | 1 << 53 - 32 | 1 << 59 - 32 | 1 << 61 - 32;
var primesA = new bnBrowser(3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 37);
var primesB = new bnBrowser(29 * 31 * 41 * 43 * 47 * 53); // https://github.com/golang/go/blob/aadaec5/src/crypto/rand/util.go#L31

function randomPrime(bits) {
  var reps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
  var rng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : randomBrowser;
  assert_1(bits >>> 0 === bits);
  assert_1(reps >>> 0 === reps);
  assert_1(bits >= 2);
  assert_1(rng && typeof rng.randomBytes === 'function');
  var b = bits % 8;
  if (b === 0) b = 8;
  var len = bits + 7 >>> 3;

  for (;;) {
    var bytes = rng.randomBytes(len);
    bytes[0] &= (1 << b) - 1;

    if (b >= 2) {
      bytes[0] |= 3 << b - 2;
    } else {
      bytes[0] |= 1;
      if (bytes.length > 1) bytes[1] |= 0x80;
    }

    bytes[bytes.length - 1] |= 1;
    var p = new bnBrowser(bytes);
    var mod = p.mod(smallPrimesProduct);

    next: for (var delta = 0; delta < 1 << 20; delta += 2) {
      var m = mod.addn(delta);

      for (var i = 0; i < smallPrimes.length; i++) {
        var prime = smallPrimes[i];
        if (m.modrn(prime) === 0 && (bits > 6 || m.cmpn(prime) !== 0)) continue next;
      }

      if (delta > 0) p.iaddn(delta);
      break;
    }

    if (p.bitLength() !== bits) continue;
    if (!probablyPrime(p, reps, rng)) continue;
    return p;
  }
} // https://github.com/golang/go/blob/aadaec5/src/math/big/prime.go#L26


function probablyPrime(x, reps) {
  var rng = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : randomBrowser;
  assert_1(x instanceof bnBrowser);
  if (x.isNeg() || x.isZero()) return false;

  if (x.cmpn(64) < 0) {
    var w = x.andln(0xff);
    if (w > 31) return (primeBitMaskHi & 1 << w - 32) !== 0;
    return (primeBitMaskLo & 1 << w) !== 0;
  }

  if (!x.isOdd()) return false;
  var ra = x.mod(primesA).toNumber();
  var rb = x.mod(primesB).toNumber();

  if (ra % 3 === 0 || ra % 5 === 0 || ra % 7 === 0 || ra % 11 === 0 || ra % 13 === 0 || ra % 17 === 0 || ra % 19 === 0 || ra % 23 === 0 || ra % 37 === 0 || rb % 29 === 0 || rb % 31 === 0 || rb % 41 === 0 || rb % 43 === 0 || rb % 47 === 0 || rb % 53 === 0) {
    return false;
  }

  if (!x.isPrime(rng, reps)) return false;
  return true;
}
/*
 * Expose
 */


var randomPrime_1 = randomPrime;
var probablyPrime_1 = probablyPrime;
var primes$1 = {
  randomPrime: randomPrime_1,
  probablyPrime: probablyPrime_1
};

var {
  countLeft: countLeft$1,
  trimLeft: trimLeft$2
} = util$1;
var {
  custom: custom$5
} = customBrowser;
/*
 * Constants
 */

var DEFAULT_BITS = 2048;
var MIN_BITS = 512;
var MAX_BITS = 10000;
/**
 * DSA Params
 */

class DSAParams {
  constructor(p, q, g) {
    this.p = trimLeft$2(p);
    this.q = trimLeft$2(q);
    this.g = trimLeft$2(g);
  }

  setP(p) {
    this.p = trimLeft$2(p);
    return this;
  }

  setQ(q) {
    this.q = trimLeft$2(q);
    return this;
  }

  setG(g) {
    this.g = trimLeft$2(g);
    return this;
  }

  L() {
    return countLeft$1(this.p);
  }

  N() {
    return countLeft$1(this.q);
  }

  bits() {
    return this.L();
  }

  size() {
    return this.N() + 7 >>> 3;
  }

  toParams() {
    return this;
  }

  toJSON() {
    return {
      kty: 'DSA',
      p: base64.encodeURL(this.p),
      q: base64.encodeURL(this.q),
      g: base64.encodeURL(this.g),
      ext: true
    };
  }

  fromJSON(json) {
    assert_1(json && typeof json === 'object');
    assert_1(json.kty === 'DSA');
    this.p = base64.decodeURL(json.p);
    this.q = base64.decodeURL(json.q);
    this.g = base64.decodeURL(json.g);
    return this;
  }

  [custom$5]() {
    return this.format();
  }

  format() {
    return {
      bits: this.bits(),
      size: this.size(),
      pbits: countLeft$1(this.p),
      qbits: countLeft$1(this.q),
      gbits: countLeft$1(this.g),
      p: this.p.toString('hex'),
      q: this.q.toString('hex'),
      g: this.g.toString('hex')
    };
  }

  static fromJSON(json) {
    return new this().fromJSON(json);
  }

}
/**
 * DSA Key
 */


class DSAKey extends DSAParams {
  constructor(p, q, g, y) {
    super(p, q, g);
    this.y = trimLeft$2(y);
  }

  setParams(params) {
    return this.fromParams(params);
  }

  setY(y) {
    this.y = trimLeft$2(y);
    return this;
  }

  toParams() {
    return new DSAParams(this.p, this.q, this.g);
  }

  fromParams(params) {
    assert_1(params instanceof DSAParams);
    this.p = params.p;
    this.q = params.q;
    this.g = params.g;
    return this;
  }

  toPublic() {
    return this;
  }

  toJSON() {
    return {
      kty: 'DSA',
      p: base64.encodeURL(this.p),
      q: base64.encodeURL(this.q),
      g: base64.encodeURL(this.g),
      y: base64.encodeURL(this.y),
      ext: true
    };
  }

  fromJSON(json) {
    assert_1(json && typeof json === 'object');
    assert_1(json.kty === 'DSA');
    this.p = base64.decodeURL(json.p);
    this.q = base64.decodeURL(json.q);
    this.g = base64.decodeURL(json.g);
    this.y = base64.decodeURL(json.y);
    return this;
  }

  static fromParams(params) {
    return new this().fromParams(params);
  }

}
/**
 * DSA Public Key
 */


class DSAPublicKey extends DSAKey {
  constructor(p, q, g, y) {
    super(p, q, g, y);
  }

  format() {
    return {
      bits: this.bits(),
      size: this.size(),
      pbits: countLeft$1(this.p),
      qbits: countLeft$1(this.q),
      gbits: countLeft$1(this.g),
      ybits: countLeft$1(this.y),
      p: this.p.toString('hex'),
      q: this.q.toString('hex'),
      g: this.g.toString('hex'),
      y: this.y.toString('hex')
    };
  }

}
/**
 * DSA Public Key
 */


class DSAPrivateKey extends DSAKey {
  constructor(p, q, g, y, x) {
    super(p, q, g, y);
    this.x = trimLeft$2(x);
  }

  setX(x) {
    this.x = trimLeft$2(x);
    return this;
  }

  toPublic() {
    var key = new DSAPublicKey();
    key.p = this.p;
    key.q = this.q;
    key.g = this.g;
    key.y = this.y;
    return key;
  }

  toJSON() {
    return {
      kty: 'DSA',
      p: base64.encodeURL(this.p),
      q: base64.encodeURL(this.q),
      g: base64.encodeURL(this.g),
      y: base64.encodeURL(this.y),
      x: base64.encodeURL(this.x),
      ext: true
    };
  }

  fromJSON(json) {
    assert_1(json && typeof json === 'object');
    assert_1(json.kty === 'DSA');
    this.p = base64.decodeURL(json.p);
    this.q = base64.decodeURL(json.q);
    this.g = base64.decodeURL(json.g);
    if (json.y != null) this.y = base64.decodeURL(json.y);
    this.x = base64.decodeURL(json.x);
    return this;
  }

  format() {
    return {
      bits: this.bits(),
      size: this.size(),
      pbits: countLeft$1(this.p),
      qbits: countLeft$1(this.q),
      gbits: countLeft$1(this.g),
      ybits: countLeft$1(this.y),
      xbits: countLeft$1(this.x),
      p: this.p.toString('hex'),
      q: this.q.toString('hex'),
      g: this.g.toString('hex'),
      y: this.y.toString('hex'),
      x: this.x.toString('hex')
    };
  }

}
/*
 * Expose
 */


var DEFAULT_BITS_1 = DEFAULT_BITS;
var MIN_BITS_1 = MIN_BITS;
var MAX_BITS_1 = MAX_BITS;
var DSAKey_1 = DSAKey;
var DSAParams_1 = DSAParams;
var DSAPublicKey_1 = DSAPublicKey;
var DSAPrivateKey_1 = DSAPrivateKey;
var dsakey = {
  DEFAULT_BITS: DEFAULT_BITS_1,
  MIN_BITS: MIN_BITS_1,
  MAX_BITS: MAX_BITS_1,
  DSAKey: DSAKey_1,
  DSAParams: DSAParams_1,
  DSAPublicKey: DSAPublicKey_1,
  DSAPrivateKey: DSAPrivateKey_1
};

var {
  trimLeft: trimLeft$3,
  padLeft: padLeft$2
} = util$1;
/**
 * Signature
 */

class Signature {
  constructor() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var r = arguments.length > 1 ? arguments[1] : undefined;
    var s = arguments.length > 2 ? arguments[2] : undefined;
    this.r = padLeft$2(r, size);
    this.s = padLeft$2(s, size);
    this.param = 0;
  }

  setR(r, size) {
    this.r = padLeft$2(r, size);
    return this;
  }

  setS(s, size) {
    this.s = padLeft$2(s, size);
    return this;
  }

  encode(size) {
    assert_1(size >>> 0 === size);
    assert_1(size < 0x7d);
    assert_1(this.r.length === size);
    assert_1(this.s.length === size);
    var raw = Buffer.allocUnsafe(size * 2);
    this.r.copy(raw, 0);
    this.s.copy(raw, size);
    return raw;
  }

  decode(data, size) {
    assert_1(Buffer.isBuffer(data));
    assert_1(size >>> 0 === size);
    assert_1(data.length === size * 2);
    this.r = data.slice(0, size);
    this.s = data.slice(size, size * 2);
    return this;
  }

  toDER(size) {
    assert_1(size >>> 0 === size);
    assert_1(size < 0x7d);
    assert_1(this.r.length === size);
    assert_1(this.s.length === size);
    var r = encodeInt$1(this.r);
    var s = encodeInt$1(this.s);
    var seq = 2 + r.length + 2 + s.length;
    var wide = seq >= 0x80 ? 1 : 0;
    var len = 2 + wide + seq;
    var buf = Buffer.allocUnsafe(len);
    var p = 0;
    buf[p++] = 0x30;
    if (wide) buf[p++] = 0x81;
    buf[p++] = seq;
    buf[p++] = 0x02;
    buf[p++] = r.length;
    p += r.copy(buf, p);
    buf[p++] = 0x02;
    buf[p++] = s.length;
    p += s.copy(buf, p);
    assert_1(p === len);
    return buf;
  }

  fromDER(data, size) {
    assert_1(Buffer.isBuffer(data));
    assert_1(size >>> 0 === size);
    var len = 0;
    var pos = 0;
    var rlen = 0;
    var slen = 0;
    var r = null;
    var s = null; // Sequence tag byte.

    assert_1(pos + 1 <= data.length);
    assert_1(data[pos] === 0x30);
    pos += 1; // Sequence length bytes.

    assert_1(pos + 1 <= data.length);
    len = data[pos];
    pos += 1;

    if (len & 0x80) {
      len -= 0x80;
      assert_1(pos + len <= data.length);
      pos += len;
    } // Integer tag byte for R.


    assert_1(pos + 1 <= data.length);
    assert_1(data[pos] === 0x02);
    pos += 1; // Integer length for R.

    assert_1(pos + 1 <= data.length);
    len = data[pos];
    pos += 1;

    if (len & 0x80) {
      len -= 0x80;
      assert_1(pos + len <= data.length);

      while (len > 0 && data[pos] === 0x00) {
        len -= 1;
        pos += 1;
      }

      assert_1(len <= 6);

      while (len > 0) {
        rlen *= 0x100;
        rlen += data[pos];
        len -= 1;
        pos += 1;
      }
    } else {
      rlen = len;
    } // Ignore leading zeroes in R.


    assert_1(pos + rlen <= data.length);

    while (rlen > 0 && data[pos] === 0x00) {
      rlen -= 1;
      pos += 1;
    }

    if (rlen > size) r = Buffer.alloc(size, 0x00);else r = data.slice(pos, pos + rlen);
    pos += rlen; // Integer tag byte for S.

    assert_1(pos + 1 <= data.length);
    assert_1(data[pos] === 0x02);
    pos += 1; // Integer length for S.

    assert_1(pos + 1 <= data.length);
    len = data[pos];
    pos += 1;

    if (len & 0x80) {
      len -= 0x80;
      assert_1(pos + len <= data.length);

      while (len > 0 && data[pos] === 0x00) {
        len -= 1;
        pos += 1;
      }

      assert_1(len <= 6);

      while (len > 0) {
        slen *= 0x100;
        slen += data[pos];
        len -= 1;
        pos += 1;
      }
    } else {
      slen = len;
    } // Ignore leading zeroes in S.


    assert_1(pos + slen <= data.length);

    while (slen > 0 && data[pos] === 0x00) {
      slen -= 1;
      pos += 1;
    }

    if (slen > size) s = Buffer.alloc(size, 0x00);else s = data.slice(pos, pos + slen);
    pos += slen;
    this.r = padLeft$2(r, size);
    this.s = padLeft$2(s, size);
    return this;
  }

  static decode(data, size) {
    return new this().decode(data, size);
  }

  static fromDER(data, size) {
    return new this().fromDER(data, size);
  }

  static toRS(raw, size) {
    var sig = Signature.fromDER(raw, size);
    return sig.encode(size);
  }

  static toDER(raw, size) {
    var sig = Signature.decode(raw, size);
    return sig.toDER(size);
  }

}
/*
 * Helpers
 */


function encodeInt$1(buf) {
  var val = trimLeft$3(buf);

  if (val[0] & 0x80) {
    var out = Buffer.allocUnsafe(1 + val.length);
    out[0] = 0x00;
    val.copy(out, 1);
    return out;
  }

  return val;
}
/*
 * Expose
 */


var signature = Signature;

/**
 * DSAParams
 */
// DSSParams_OpenSSL ::= SEQUENCE {
//   p INTEGER,
//   q INTEGER,
//   g INTEGER
// }


class DSAParams$1 extends asn1.Sequence {
  constructor(p, q, g) {
    super();
    this.p = new asn1.Unsigned(p);
    this.q = new asn1.Unsigned(q);
    this.g = new asn1.Unsigned(g);
  }

  getBodySize() {
    var size = 0;
    size += this.p.getSize();
    size += this.q.getSize();
    size += this.g.getSize();
    return size;
  }

  writeBody(bw) {
    this.p.write(bw);
    this.q.write(bw);
    this.g.write(bw);
    return bw;
  }

  readBody(br) {
    this.p.read(br);
    this.q.read(br);
    this.g.read(br);
    return this;
  }

  clean() {
    return this.p.clean() && this.q.clean() && this.g.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'DSA PARAMETERS');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'DSA PARAMETERS');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      p: this.p,
      q: this.q,
      g: this.g
    };
  }

}
/**
 * DSAPublicKey
 */
// DSSPublicKey_OpenSSL ::= SEQUENCE {
//   y INTEGER,
//   p INTEGER,
//   q INTEGER,
//   g INTEGER
// }


class DSAPublicKey$1 extends asn1.Sequence {
  constructor(y, p, q, g) {
    super();
    this.y = new asn1.Unsigned(y);
    this.p = new asn1.Unsigned(p);
    this.q = new asn1.Unsigned(q);
    this.g = new asn1.Unsigned(g);
  }

  getBodySize() {
    var size = 0;
    size += this.y.getSize();
    size += this.p.getSize();
    size += this.q.getSize();
    size += this.g.getSize();
    return size;
  }

  writeBody(bw) {
    this.y.write(bw);
    this.p.write(bw);
    this.q.write(bw);
    this.g.write(bw);
    return bw;
  }

  readBody(br) {
    this.y.read(br);
    this.p.read(br);
    this.q.read(br);
    this.g.read(br);
    return this;
  }

  clean() {
    return this.y.clean() && this.p.clean() && this.q.clean() && this.g.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'DSA PUBLIC KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'DSA PUBLIC KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      y: this.y,
      p: this.p,
      q: this.q,
      g: this.g
    };
  }

}
/**
 * DSAPrivateKey
 */
// DSSPrivatKey_OpenSSL ::= SEQUENCE {
//   version INTEGER,
//   p INTEGER,
//   q INTEGER,
//   g INTEGER,
//   y INTEGER,
//   x INTEGER
// }


class DSAPrivateKey$1 extends asn1.Sequence {
  constructor(version, p, q, g, y, x) {
    super();
    this.version = new asn1.Unsigned(version);
    this.p = new asn1.Unsigned(p);
    this.q = new asn1.Unsigned(q);
    this.g = new asn1.Unsigned(g);
    this.y = new asn1.Unsigned(y);
    this.x = new asn1.Unsigned(x);
  }

  getBodySize() {
    var size = 0;
    size += this.version.getSize();
    size += this.p.getSize();
    size += this.q.getSize();
    size += this.g.getSize();
    size += this.y.getSize();
    size += this.x.getSize();
    return size;
  }

  writeBody(bw) {
    this.version.write(bw);
    this.p.write(bw);
    this.q.write(bw);
    this.g.write(bw);
    this.y.write(bw);
    this.x.write(bw);
    return bw;
  }

  readBody(br) {
    this.version.read(br);
    this.p.read(br);
    this.q.read(br);
    this.g.read(br);
    this.y.read(br);
    this.x.read(br);
    return this;
  }

  clean() {
    return this.p.clean() && this.q.clean() && this.g.clean() && this.y.clean() && this.x.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'DSA PRIVATE KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'DSA PRIVATE KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      version: this.version,
      p: this.p,
      q: this.q,
      g: this.g,
      y: this.y,
      x: this.x
    };
  }

}
/*
 * Expose
 */


var DSAParams_1$1 = DSAParams$1;
var DSAPublicKey_1$1 = DSAPublicKey$1;
var DSAPrivateKey_1$1 = DSAPrivateKey$1;
var openssl = {
  DSAParams: DSAParams_1$1,
  DSAPublicKey: DSAPublicKey_1$1,
  DSAPrivateKey: DSAPrivateKey_1$1
};

/**
 * DSA Parms
 */
// Dss-Parms  ::=  SEQUENCE  {
//     p             INTEGER,
//     q             INTEGER,
//     g             INTEGER  }


class DSAParams$2 extends asn1.Sequence {
  constructor(p, q, g) {
    super();
    this.p = new asn1.Unsigned(p);
    this.q = new asn1.Unsigned(q);
    this.g = new asn1.Unsigned(g);
  }

  getBodySize() {
    var size = 0;
    size += this.p.getSize();
    size += this.q.getSize();
    size += this.g.getSize();
    return size;
  }

  writeBody(bw) {
    this.p.write(bw);
    this.q.write(bw);
    this.g.write(bw);
    return bw;
  }

  readBody(br) {
    this.p.read(br);
    this.q.read(br);
    this.g.read(br);
    return this;
  }

  clean() {
    return this.p.clean() && this.q.clean() && this.g.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'DSA PARAMETERS');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'DSA PARAMETERS');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      p: this.p,
      q: this.q,
      g: this.g
    };
  }

}
/**
 * DSA Public Key
 */
// DSAPublicKey ::= INTEGER -- public key, Y


class DSAPublicKey$2 extends asn1.Unsigned {
  constructor(y) {
    super(y);
  }

  get y() {
    return this.value;
  }

  set y(value) {
    this.value = value;
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'DSA PUBLIC KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'DSA PUBLIC KEY');
    return this.decode(data);
  }

}
/**
 * DSA Signature
 */


class DSASignature extends asn1.Sequence {
  constructor(r, s) {
    super();
    this.r = new asn1.Unsigned(r);
    this.s = new asn1.Unsigned(s);
  }

  getBodySize() {
    var size = 0;
    size += this.r.getSize();
    size += this.s.getSize();
    return size;
  }

  writeBody(bw) {
    this.r.write(bw);
    this.s.write(bw);
    return bw;
  }

  readBody(br) {
    this.r.read(br);
    this.s.read(br);
    return this;
  }

  clean() {
    return this.r.clean() && this.s.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'DSA SIGNATURE');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'DSA SIGNATURE');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      r: this.r,
      s: this.s
    };
  }

}
/*
 * Expose
 */


var DSAParams_1$2 = DSAParams$2;
var DSAPublicKey_1$2 = DSAPublicKey$2;
var DSASignature_1 = DSASignature;
var rfc3279 = {
  DSAParams: DSAParams_1$2,
  DSAPublicKey: DSAPublicKey_1$2,
  DSASignature: DSASignature_1
};

var {
  countLeft: countLeft$2,
  compareLeft: compareLeft$1
} = util$1;
var {
  probablyPrime: probablyPrime$1
} = primes$1;
var {
  DEFAULT_BITS: DEFAULT_BITS$1,
  MIN_BITS: MIN_BITS$1,
  MAX_BITS: MAX_BITS$1,
  DSAKey: DSAKey$1,
  DSAParams: DSAParams$3,
  DSAPublicKey: DSAPublicKey$3,
  DSAPrivateKey: DSAPrivateKey$2
} = dsakey;
/**
 * Generate params.
 * @param {Number} [bits=2048]
 * @returns {DSAParams}
 */

function paramsGenerate(bits) {
  if (bits == null) bits = DEFAULT_BITS$1;
  assert_1(bits >>> 0 === bits);
  if (bits < MIN_BITS$1 || bits > MAX_BITS$1) throw new RangeError("\"bits\" ranges from ".concat(MIN_BITS$1, " to ").concat(MAX_BITS$1, ".")); // OpenSSL behavior.

  var L = bits;
  var N = bits < 2048 ? 160 : 256;
  return generateParams(L, N);
}
/**
 * Generate params.
 * @param {Number} [bits=2048]
 * @returns {DSAParams}
 */


function paramsGenerateAsync(_x) {
  return _paramsGenerateAsync.apply(this, arguments);
}
/**
 * Verify params.
 * @param {DSAParams} params
 * @returns {Boolean}
 */


function _paramsGenerateAsync() {
  _paramsGenerateAsync = _asyncToGenerator(function* (bits) {
    return paramsGenerate(bits);
  });
  return _paramsGenerateAsync.apply(this, arguments);
}

function paramsVerify(params) {
  assert_1(params instanceof DSAParams$3);
  if (!isSaneParams(params)) return false;
  var p = bnBrowser.decode(params.p);
  var q = bnBrowser.decode(params.q);
  var g = bnBrowser.decode(params.g);
  return g.powm(q, p).cmpn(1) === 0;
}
/**
 * Export params in OpenSSL ASN.1 format.
 * @param {DSAParams} params
 * @returns {Buffer}
 */


function paramsExport(params) {
  assert_1(params instanceof DSAParams$3);
  if (!isSaneParams(params)) throw new Error('Invalid DSA parameters.');
  return new openssl.DSAParams(params.p, params.q, params.g).encode();
}
/**
 * Import params in OpenSSL ASN.1 format.
 * @param {Buffer} raw
 * @returns {DSAParams}
 */


function paramsImport(raw) {
  var params = openssl.DSAParams.decode(raw);
  return new DSAPrivateKey$2(params.p.value, params.q.value, params.g.value);
}
/**
 * Export a public key to JWK JSON format.
 * @param {DSAParams} key
 * @returns {Object}
 */


function paramsExportJWK(key) {
  assert_1(key instanceof DSAParams$3);
  return key.toParams().toJSON();
}
/**
 * Import a public key from JWK JSON format.
 * @param {Object} json
 * @returns {DSAPublicKey}
 */


function paramsImportJWK(json) {
  return DSAParams$3.fromJSON(json);
}
/**
 * Generate private key from params.
 * @param {DSAParams} params
 * @returns {DSAPrivateKey}
 */


function privateKeyCreate(params) {
  assert_1(params instanceof DSAParams$3);
  if (!isSaneParams(params)) throw new Error('Invalid DSA parameters.');
  var q = bnBrowser.decode(params.q);
  var p = bnBrowser.decode(params.p);
  var g = bnBrowser.decode(params.g);
  var x = bnBrowser.random(randomBrowser, 1, q);
  var y = powBlind(g, x, p, q);
  var key = new DSAPrivateKey$2();
  key.setParams(params);
  key.x = x.encode();
  key.y = y.encode();
  return key;
}
/**
 * Generate private key.
 * @param {Number} [bits=2048]
 * @returns {DSAPrivateKey}
 */


function privateKeyGenerate(bits) {
  var params = paramsGenerate(bits);
  return privateKeyCreate(params);
}
/**
 * Generate private key.
 * @param {Number} [bits=2048]
 * @returns {DSAPrivateKey}
 */


function privateKeyGenerateAsync(_x2) {
  return _privateKeyGenerateAsync.apply(this, arguments);
}
/**
 * Pre-compute a private key.
 * @param {DSAPrivateKey}
 * @returns {DSAPrivateKey}
 */


function _privateKeyGenerateAsync() {
  _privateKeyGenerateAsync = _asyncToGenerator(function* (bits) {
    var params = yield paramsGenerateAsync(bits);
    return privateKeyCreate(params);
  });
  return _privateKeyGenerateAsync.apply(this, arguments);
}

function privateKeyCompute(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  if (!isSaneCompute(key)) throw new Error('Invalid DSA private key.');
  if (!needsCompute(key)) return key;
  var p = bnBrowser.decode(key.p);
  var q = bnBrowser.decode(key.q);
  var g = bnBrowser.decode(key.g);
  var x = bnBrowser.decode(key.x);
  var y = powBlind(g, x, p, q);
  key.y = y.encode();
  return key;
}
/**
 * Verify a private key.
 * @param {DSAPrivateKey} key
 * @returns {Boolean}
 */


function privateKeyVerify(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  if (!isSanePrivateKey(key)) return false;
  if (!publicKeyVerify(key)) return false;
  var p = bnBrowser.decode(key.p);
  var q = bnBrowser.decode(key.q);
  var g = bnBrowser.decode(key.g);
  var x = bnBrowser.decode(key.x);
  var y = powBlind(g, x, p, q);
  return bnBrowser.decode(key.y).eq(y);
}
/**
 * Export a private key in OpenSSL ASN.1 format.
 * @param {DSAPrivateKey} key
 * @returns {Buffer}
 */


function privateKeyExport(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  if (!isSanePrivateKey(key)) throw new Error('Invalid DSA private key.');
  return new openssl.DSAPrivateKey(0, key.p, key.q, key.g, key.y, key.x).encode();
}
/**
 * Import a private key in OpenSSL ASN.1 format.
 * @param {Buffer} raw
 * @returns {DSAPrivateKey}
 */


function privateKeyImport(raw) {
  var key = openssl.DSAPrivateKey.decode(raw);
  assert_1(key.version.toNumber() === 0);
  return new DSAPrivateKey$2(key.p.value, key.q.value, key.g.value, key.y.value, key.x.value);
}
/**
 * Export a private key in PKCS8 ASN.1 format.
 * @param {DSAPrivateKey} key
 * @returns {Buffer}
 */


function privateKeyExportPKCS8(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  if (!isSanePrivateKey(key)) throw new Error('Invalid DSA private key.');
  return new pkcs8.PrivateKeyInfo(0, asn1.objects.keyAlgs.DSA, new rfc3279.DSAParams(key.p, key.q, key.g), new asn1.Unsigned(key.x).encode()).encode();
}
/**
 * Import a private key in PKCS8 ASN.1 format.
 * @param {Buffer} key
 * @returns {DSAPrivateKey}
 */


function privateKeyImportPKCS8(raw) {
  var pki = pkcs8.PrivateKeyInfo.decode(raw);
  var {
    algorithm,
    parameters
  } = pki.algorithm;
  assert_1(pki.version.toNumber() === 0);
  assert_1(algorithm.toString() === asn1.objects.keyAlgs.DSA);
  assert_1(parameters.node.type === asn1.types.SEQUENCE);
  var {
    p,
    q,
    g
  } = rfc3279.DSAParams.decodeBody(parameters.node.value);
  var x = asn1.Unsigned.decode(pki.privateKey.value);
  var key = new DSAPrivateKey$2(p.value, q.value, g.value, null, x.value);
  privateKeyCompute(key);
  return key;
}
/**
 * Export a private key to JWK JSON format.
 * @param {DSAPrivateKey} key
 * @returns {Object}
 */


function privateKeyExportJWK$1(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  return key.toJSON();
}
/**
 * Import a private key from JWK JSON format.
 * @param {Object} json
 * @returns {DSAPrivateKey}
 */


function privateKeyImportJWK$1(json) {
  var key = DSAPrivateKey$2.fromJSON(json);
  privateKeyCompute(key);
  return key;
}
/**
 * Create a public key from a private key.
 * @param {DSAPrivateKey} key
 * @returns {DSAPublicKey}
 */


function publicKeyCreate(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  var pub = new DSAPublicKey$3();
  pub.p = key.p;
  pub.q = key.q;
  pub.g = key.g;
  pub.y = key.y;
  return pub;
}
/**
 * Verify a public key.
 * @param {DSAKey} key
 * @returns {Boolean}
 */


function publicKeyVerify(key) {
  assert_1(key instanceof DSAKey$1);
  if (!paramsVerify(key)) return false;
  if (!isSanePublicKey(key)) return false;
  var p = bnBrowser.decode(key.p);
  var q = bnBrowser.decode(key.q);
  var y = bnBrowser.decode(key.y);
  return y.powm(q, p).cmpn(1) === 0;
}
/**
 * Export a public key to OpenSSL ASN.1 format.
 * @param {DSAKey} key
 * @returns {Buffer}
 */


function publicKeyExport(key) {
  assert_1(key instanceof DSAKey$1);
  if (!isSanePublicKey(key)) throw new Error('Invalid DSA public key.');
  return new openssl.DSAPublicKey(key.y, key.p, key.q, key.g).encode();
}
/**
 * Import a public key from OpenSSL ASN.1 format.
 * @param {Buffer} raw
 * @returns {DSAPublicKey}
 */


function publicKeyImport(raw) {
  var key = openssl.DSAPublicKey.decode(raw);
  return new DSAPublicKey$3(key.p.value, key.q.value, key.g.value, key.y.value);
}
/**
 * Export a public key to SubjectPublicKeyInfo ASN.1 format.
 * @param {DSAKey} key
 * @returns {Buffer}
 */


function publicKeyExportSPKI(key) {
  assert_1(key instanceof DSAKey$1);
  if (!isSanePublicKey(key)) throw new Error('Invalid DSA public key.'); // https://tools.ietf.org/html/rfc3279#section-2.3.2

  return new x509.SubjectPublicKeyInfo(asn1.objects.keyAlgs.DSA, new rfc3279.DSAParams(key.p, key.q, key.g), new asn1.Unsigned(key.y).encode()).encode();
}
/**
 * Import a public key from SubjectPublicKeyInfo ASN.1 format.
 * @param {Buffer} raw
 * @returns {DSAPublicKey}
 */


function publicKeyImportSPKI(raw) {
  var spki = x509.SubjectPublicKeyInfo.decode(raw);
  var {
    algorithm,
    parameters
  } = spki.algorithm;
  assert_1(algorithm.toString() === asn1.objects.keyAlgs.DSA);
  assert_1(parameters.node.type === asn1.types.SEQUENCE);
  var {
    p,
    q,
    g
  } = rfc3279.DSAParams.decodeBody(parameters.node.value);
  var y = asn1.Unsigned.decode(spki.publicKey.rightAlign());
  return new DSAPublicKey$3(p.value, q.value, g.value, y.value);
}
/**
 * Export a public key to JWK JSON format.
 * @param {DSAKey} key
 * @returns {Object}
 */


function publicKeyExportJWK$1(key) {
  assert_1(key instanceof DSAKey$1);
  return key.toPublic().toJSON();
}
/**
 * Import a public key from JWK JSON format.
 * @param {Object} json
 * @returns {DSAPublicKey}
 */


function publicKeyImportJWK$1(json) {
  return DSAPublicKey$3.fromJSON(json);
}
/**
 * Convert R/S signature to DER.
 * @param {Buffer} sig
 * @param {Number} size
 * @returns {Buffer} DER-formatted signature.
 */


function signatureExport(sig, size) {
  if (size == null) {
    assert_1(Buffer.isBuffer(sig));
    assert_1((sig.length & 1) === 0);
    size = sig.length >>> 1;
  }

  return signature.toDER(sig, size);
}
/**
 * Convert DER signature to R/S.
 * @param {Buffer} sig
 * @param {Number} size
 * @returns {Buffer} R/S-formatted signature.
 */


function signatureImport(sig, size) {
  return signature.toRS(sig, size);
}
/**
 * Sign a message (R/S).
 * @param {Buffer} msg
 * @param {DSAPrivateKey} key - Private key.
 * @returns {Buffer} R/S-formatted signature.
 */


function sign(msg, key) {
  var sig = _sign(msg, key);

  return sig.encode(key.size());
}
/**
 * Sign a message (DER).
 * @param {Buffer} msg
 * @param {DSAPrivateKey} key - Private key.
 * @returns {Buffer} DER-formatted signature.
 */


function signDER(msg, key) {
  var sig = _sign(msg, key);

  return sig.toDER(key.size());
}
/**
 * Sign a message.
 * @private
 * @param {Buffer} msg
 * @param {DSAPrivateKey} key
 * @returns {Signature}
 */


function _sign(msg, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof DSAPrivateKey$2);
  if (!isSanePrivateKey(key)) throw new Error('Invalid DSA private key.');
  var p = bnBrowser.decode(key.p);
  var q = bnBrowser.decode(key.q);
  var g = bnBrowser.decode(key.g);
  var x = bnBrowser.decode(key.x);
  var bytes = q.byteLength(); // https://tools.ietf.org/html/rfc6979#section-3.2

  var m = reduce(msg, q);
  var keyX = x.encode('be', bytes);
  var nonce = m.encode('be', bytes);
  var drbg = new hmacDrbg(sha256Browser, keyX, nonce);

  for (;;) {
    var k = truncate$1(drbg.generate(bytes), q);
    if (k.isZero() || k.cmp(q) >= 0) continue; // r := (g^k mod p) mod q
    // Note: we could in theory cache the
    // blinding factor on the key object.
    // This would prevent an attacker from
    // gaining information from the initial
    // modular exponentiation.

    var r = powBlind(g, k, p, q).imod(q);
    if (r.isZero()) continue; // Reasoning: fermat's little theorem
    // has better constant-time properties
    // than an EGCD.

    var ki = k.fermat(q); // Scalar blinding factor.

    var [blind, unblind] = getBlinding(q); // Blind.

    var bx = x.mul(blind).imod(q);
    var bm = m.mul(blind).imod(q); // s := ((r * x + m) * k^-1) mod q

    var s = r.mul(bx).imod(q).iadd(bm).imod(q).imul(ki).imod(q); // Unblind.

    s.imul(unblind).imod(q);
    if (s.isZero()) continue;
    var sig = new signature();
    sig.r = r.encode('be', bytes);
    sig.s = s.encode('be', bytes);
    return sig;
  }
}
/**
 * Verify a signature (R/S).
 * @private
 * @param {Buffer} msg
 * @param {Buffer} sig - R/S-formatted.
 * @param {DSAKey} key
 * @returns {Boolean}
 */


function verify$1(msg, sig, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(sig));
  assert_1(key instanceof DSAKey$1);
  if (sig.length !== key.size() * 2) return false;
  var s = signature.decode(sig, key.size());

  try {
    return _verify(msg, s, key);
  } catch (e) {
    return false;
  }
}
/**
 * Verify a signature.
 * @private
 * @param {Buffer} msg
 * @param {Signature} sig
 * @param {DSAKey} key
 * @returns {Boolean}
 */


function _verify(msg, sig, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(sig instanceof signature);
  assert_1(key instanceof DSAKey$1);
  var k = key.size();
  if (sig.r.length !== k) return false;
  if (sig.s.length !== k) return false;
  if (!isSanePublicKey(key)) return false;
  var p = bnBrowser.decode(key.p);
  var q = bnBrowser.decode(key.q);
  var g = bnBrowser.decode(key.g);
  var y = bnBrowser.decode(key.y);
  var r = bnBrowser.decode(sig.r);
  var s = bnBrowser.decode(sig.s);
  if (r.isZero() || r.cmp(q) >= 0) return false;
  if (s.isZero() || s.cmp(q) >= 0) return false;
  var m = reduce(msg, q);
  var si = s.invert(q);
  var u1 = m.imul(si).imod(q);
  var u2 = r.mul(si).imod(q);
  var re = g.powm(u1, p).imul(y.powm(u2, p)).imod(p).imod(q);
  return re.cmp(r) === 0;
}
/**
 * Verify a signature (DER).
 * @param {Buffer} msg
 * @param {Buffer} sig - DER-formatted.
 * @param {DSAKey} key
 * @returns {Boolean}
 */


function verifyDER(msg, sig, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(sig));
  assert_1(key instanceof DSAKey$1);
  var s;

  try {
    s = signature.fromDER(sig, key.size());
  } catch (e) {
    return false;
  }

  return _verify(msg, s, key);
}
/**
 * Perform a diffie-hellman.
 * @param {DSAKey} pub
 * @param {DSAPrivateKey} priv
 * @returns {Buffer}
 */


function derive$2(pub, priv) {
  assert_1(pub instanceof DSAKey$1);
  assert_1(priv instanceof DSAPrivateKey$2);
  if (!isSanePublicKey(pub)) throw new Error('Invalid DSA public key.');
  if (!isSanePrivateKey(priv)) throw new Error('Invalid DSA private key.');
  var pp = bnBrowser.decode(pub.p);
  var pq = bnBrowser.decode(pub.q);
  var pg = bnBrowser.decode(pub.g);
  var p = bnBrowser.decode(priv.p);
  var q = bnBrowser.decode(priv.q);
  var g = bnBrowser.decode(priv.g);
  if (!pp.eq(p) || !pq.eq(q) || !pg.eq(g)) throw new Error('Incompatible DSA parameters.');
  var x = bnBrowser.decode(priv.x);
  var y = bnBrowser.decode(pub.y); // s := y^x mod p

  var s = powBlind(y, x, p, q);
  if (s.isZero()) throw new Error('Invalid secret.');
  return s.encode('be', p.byteLength());
}
/**
 * Generate params from L and N.
 * @private
 * @param {Number} L
 * @param {Number} N
 * @returns {DSAParams}
 */


function generateParams(L, N) {
  assert_1(L >>> 0 === L);
  assert_1(N >>> 0 === N);

  if (!(L === 1024 && N === 160) && !(L === 2048 && N === 224) && !(L === 2048 && N === 256) && !(L === 3072 && N === 256)) {
    throw new Error('Invalid parameter sizes.');
  }

  if (L < MIN_BITS$1 || L > MAX_BITS$1 || (N & 7) !== 0) throw new Error('Invalid parameter sizes.');
  var qb = Buffer.alloc(N >>> 3);
  var pb = Buffer.alloc(L + 7 >>> 3);
  var q = null;
  var p = null;

  generate: for (;;) {
    randomBrowser.randomFill(qb, 0, qb.length);
    qb[0] |= 0x80;
    qb[qb.length - 1] |= 1;
    q = bnBrowser.decode(qb);
    if (!probablyPrime$1(q, 64)) continue;

    for (var i = 0; i < 4 * L; i++) {
      randomBrowser.randomFill(pb, 0, pb.length);
      pb[0] |= 0x80;
      pb[pb.length - 1] |= 1;
      p = bnBrowser.decode(pb);
      var rem = p.mod(q);
      rem.isubn(1);
      p.isub(rem);
      var bits = p.bitLength();
      if (bits < L || bits > MAX_BITS$1) continue;
      if (!probablyPrime$1(p, 64)) continue;
      break generate;
    }
  }

  var h = new bnBrowser(2);
  var pm1 = p.subn(1);
  var e = pm1.div(q);

  for (;;) {
    var g = h.powm(e, p);

    if (g.cmpn(1) === 0) {
      h.iaddn(1);
      continue;
    }

    var params = new DSAParams$3();
    params.p = p.encode();
    params.q = q.encode();
    params.g = g.encode();
    return params;
  }
}
/*
 * Sanity Checking
 */


function isSaneParams(params) {
  assert_1(params instanceof DSAParams$3);
  var pb = countLeft$2(params.p);
  var qb = countLeft$2(params.q);
  var gb = countLeft$2(params.g);
  if (pb < MIN_BITS$1 || pb > MAX_BITS$1) return false;
  if (qb !== 160 && qb !== 224 && qb !== 256) return false;
  if (gb < 2 || gb > pb) return false;
  if ((params.p[params.p.length - 1] & 1) === 0) return false;
  if ((params.q[params.q.length - 1] & 1) === 0) return false;
  if (compareLeft$1(params.g, params.p) >= 0) return false;
  return true;
}

function isSanePublicKey(key) {
  assert_1(key instanceof DSAKey$1);
  if (!isSaneParams(key)) return false;
  var pb = countLeft$2(key.p);
  var yb = countLeft$2(key.y);
  if (yb === 0 || yb > pb) return false;
  if (compareLeft$1(key.y, key.p) >= 0) return false;
  return true;
}

function isSanePrivateKey(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  if (!isSanePublicKey(key)) return false;
  var qb = countLeft$2(key.q);
  var xb = countLeft$2(key.x);
  if (xb === 0 || xb > qb) return false;
  if (compareLeft$1(key.x, key.q) >= 0) return false;
  return true;
}

function isSaneCompute(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  var pb = countLeft$2(key.p);
  var qb = countLeft$2(key.q);
  var gb = countLeft$2(key.g);
  var yb = countLeft$2(key.y);
  var xb = countLeft$2(key.x);
  if (pb < MIN_BITS$1 || pb > MAX_BITS$1) return false;
  if (qb !== 160 && qb !== 224 && qb !== 256) return false;
  if (gb < 2 || gb > pb) return false;
  if ((key.p[key.p.length - 1] & 1) === 0) return false;
  if ((key.q[key.q.length - 1] & 1) === 0) return false;
  if (yb > pb) return false;
  if (xb === 0 || xb > qb) return false;
  if (compareLeft$1(key.g, key.p) >= 0) return false;
  if (compareLeft$1(key.y, key.p) >= 0) return false;
  if (compareLeft$1(key.x, key.q) >= 0) return false;
  return true;
}

function needsCompute(key) {
  assert_1(key instanceof DSAPrivateKey$2);
  return countLeft$2(key.y) === 0;
}
/*
 * Helpers
 */


function truncate$1(msg, q) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(q instanceof bnBrowser);
  var bits = q.bitLength();
  assert_1((bits & 7) === 0);
  var bytes = bits >>> 3;
  if (msg.length > bytes) msg = msg.slice(0, bytes);
  return bnBrowser.decode(msg);
}

function reduce(msg, q) {
  return truncate$1(msg, q).imod(q);
}

function powBlind(y, x, p, q) {
  assert_1(y instanceof bnBrowser);
  assert_1(x instanceof bnBrowser);
  assert_1(p instanceof bnBrowser);
  assert_1(q instanceof bnBrowser); // Idea: exponentiate by scalar with a
  // blinding factor, similar to how we
  // blind multiplications in EC. Note
  // that it would be safer if we had the
  // blinding factor pregenerated for each
  // key:
  //   blind := rand(1..q-1)
  //   unblind := y^(-blind mod q) mod p
  //   scalar := (x + blind) mod q
  //   blinded := y^scalar mod p
  //   secret := (blinded * unblind) mod p

  var blind = bnBrowser.random(randomBrowser, 1, q);
  var unblind = y.powm(blind.neg().imod(q), p);
  var scalar = x.add(blind).imod(q);
  var blinded = y.powm(scalar, p);
  return blinded.imul(unblind).imod(p);
}

function getBlinding(q) {
  assert_1(q instanceof bnBrowser); // Scalar blinding factor.

  var blind = bnBrowser.random(randomBrowser, 1, q);
  var unblind = blind.fermat(q);
  return [blind, unblind];
}
/*
 * Expose
 */


var native_1$6 = 0;
var DSAParams_1$3 = DSAParams$3;
var DSAKey_1$1 = DSAKey$1;
var DSAPublicKey_1$3 = DSAPublicKey$3;
var DSAPrivateKey_1$2 = DSAPrivateKey$2;
var paramsGenerate_1 = paramsGenerate;
var paramsGenerateAsync_1 = paramsGenerateAsync;
var paramsVerify_1 = paramsVerify;
var paramsExport_1 = paramsExport;
var paramsImport_1 = paramsImport;
var paramsExportJWK_1 = paramsExportJWK;
var paramsImportJWK_1 = paramsImportJWK;
var privateKeyCreate_1 = privateKeyCreate;
var privateKeyGenerate_1 = privateKeyGenerate;
var privateKeyGenerateAsync_1 = privateKeyGenerateAsync;
var privateKeyCompute_1 = privateKeyCompute;
var privateKeyVerify_1 = privateKeyVerify;
var privateKeyExport_1 = privateKeyExport;
var privateKeyImport_1 = privateKeyImport;
var privateKeyExportPKCS8_1 = privateKeyExportPKCS8;
var privateKeyImportPKCS8_1 = privateKeyImportPKCS8;
var privateKeyExportJWK_1$1 = privateKeyExportJWK$1;
var privateKeyImportJWK_1$1 = privateKeyImportJWK$1;
var publicKeyCreate_1 = publicKeyCreate;
var publicKeyVerify_1 = publicKeyVerify;
var publicKeyExport_1 = publicKeyExport;
var publicKeyImport_1 = publicKeyImport;
var publicKeyExportSPKI_1 = publicKeyExportSPKI;
var publicKeyImportSPKI_1 = publicKeyImportSPKI;
var publicKeyExportJWK_1$1 = publicKeyExportJWK$1;
var publicKeyImportJWK_1$1 = publicKeyImportJWK$1;
var signatureExport_1 = signatureExport;
var signatureImport_1 = signatureImport;
var sign_1 = sign;
var signDER_1 = signDER;
var verify_1$1 = verify$1;
var verifyDER_1 = verifyDER;
var derive_1$2 = derive$2;
var dsa = {
  native: native_1$6,
  DSAParams: DSAParams_1$3,
  DSAKey: DSAKey_1$1,
  DSAPublicKey: DSAPublicKey_1$3,
  DSAPrivateKey: DSAPrivateKey_1$2,
  paramsGenerate: paramsGenerate_1,
  paramsGenerateAsync: paramsGenerateAsync_1,
  paramsVerify: paramsVerify_1,
  paramsExport: paramsExport_1,
  paramsImport: paramsImport_1,
  paramsExportJWK: paramsExportJWK_1,
  paramsImportJWK: paramsImportJWK_1,
  privateKeyCreate: privateKeyCreate_1,
  privateKeyGenerate: privateKeyGenerate_1,
  privateKeyGenerateAsync: privateKeyGenerateAsync_1,
  privateKeyCompute: privateKeyCompute_1,
  privateKeyVerify: privateKeyVerify_1,
  privateKeyExport: privateKeyExport_1,
  privateKeyImport: privateKeyImport_1,
  privateKeyExportPKCS8: privateKeyExportPKCS8_1,
  privateKeyImportPKCS8: privateKeyImportPKCS8_1,
  privateKeyExportJWK: privateKeyExportJWK_1$1,
  privateKeyImportJWK: privateKeyImportJWK_1$1,
  publicKeyCreate: publicKeyCreate_1,
  publicKeyVerify: publicKeyVerify_1,
  publicKeyExport: publicKeyExport_1,
  publicKeyImport: publicKeyImport_1,
  publicKeyExportSPKI: publicKeyExportSPKI_1,
  publicKeyImportSPKI: publicKeyImportSPKI_1,
  publicKeyExportJWK: publicKeyExportJWK_1$1,
  publicKeyImportJWK: publicKeyImportJWK_1$1,
  signatureExport: signatureExport_1,
  signatureImport: signatureImport_1,
  sign: sign_1,
  signDER: signDER_1,
  verify: verify_1$1,
  verifyDER: verifyDER_1,
  derive: derive_1$2
};

var dsaBrowser = dsa;

var {
  padLeft: padLeft$3
} = util$1;
/*
 * DSAIES
 */

var DSAIES = {
  encrypt(kdf, msg, pub) {
    var priv = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    assert_1(kdf != null);
    assert_1(Buffer.isBuffer(msg));
    assert_1(pub instanceof dsaBrowser.DSAKey);
    assert_1(priv == null || priv instanceof dsaBrowser.DSAPrivateKey);
    if (priv == null) priv = dsaBrowser.privateKeyCreate(pub);
    var klen = pub.bits() + 7 >>> 3;
    var ourPub = dsaBrowser.publicKeyCreate(priv);
    var secret = dsaBrowser.derive(pub, priv);
    var key = secretbox.derive(secret, kdf);
    var nonce = randomBrowser.randomBytes(24);
    var ourY = padLeft$3(ourPub.y, klen);
    var sealed = secretbox.seal(msg, key, nonce);
    return Buffer.concat([ourY, nonce, sealed]);
  },

  decrypt(kdf, msg, priv) {
    assert_1(kdf != null);
    assert_1(Buffer.isBuffer(msg));
    assert_1(priv instanceof dsaBrowser.DSAPrivateKey);
    var klen = priv.bits() + 7 >>> 3;
    if (msg.length < klen + 24) throw new Error('Invalid ciphertext.');
    var theirY = msg.slice(0, klen);
    var theirPub = new dsaBrowser.DSAPublicKey(priv.p, priv.q, priv.g, theirY);
    var nonce = msg.slice(klen, klen + 24);
    var sealed = msg.slice(klen + 24);
    var secret = dsaBrowser.derive(theirPub, priv);
    var key = secretbox.derive(secret, kdf);
    return secretbox.open(sealed, key, nonce);
  }

};
/*
 * Expose
 */

var dsaies = DSAIES;

/*
 * Constants
 */


var FINALIZED$6 = -1;
var DESC$2 = Buffer.alloc(8, 0x00);
var PADDING$3 = Buffer.alloc(64, 0x00);
PADDING$3[0] = 0x80;
var K$2 = new Uint32Array([0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821, 0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8, 0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665, 0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391]);
var S$2 = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);
/**
 * MD5
 */

class MD5 {
  /**
   * Create a MD5 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(4);
    this.msg = new Uint32Array(16);
    this.block = Buffer.allocUnsafe(64);
    this.size = FINALIZED$6;
  }
  /**
   * Initialize MD5 context.
   */


  init() {
    this.state[0] = 0x67452301;
    this.state[1] = 0xefcdab89;
    this.state[2] = 0x98badcfe;
    this.state[3] = 0x10325476;
    this.size = 0;
    return this;
  }
  /**
   * Update MD5 context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize MD5 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(16));
  }
  /**
   * Update MD5 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$6, 'Context already finalized.');
    var pos = this.size & 0x3f;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 64 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 64) return;
      this.transform(this.block, 0);
    }

    while (len >= 64) {
      this.transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize MD5 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$6, 'Context already finalized.');
    var pos = this.size % 64;
    var len = this.size * 8;
    writeU32$d(DESC$2, len, 0);
    writeU32$d(DESC$2, len * (1 / 0x100000000), 4);

    this._update(PADDING$3, 1 + (119 - pos) % 64);

    this._update(DESC$2, 8);

    for (var i = 0; i < 4; i++) {
      writeU32$d(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 16; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$6;
    return out;
  }
  /**
   * Transform MD5 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var W = this.msg;
    var a = this.state[0];
    var b = this.state[1];
    var c = this.state[2];
    var d = this.state[3];
    var i = 0;

    for (; i < 16; i++) {
      W[i] = readU32$f(chunk, pos + i * 4);
    }

    for (i = 0; i < 64; i++) {
      var f = void 0,
          g = void 0;

      if (i < 16) {
        f = b & c | ~b & d;
        g = i;
      } else if (i < 32) {
        f = d & b | ~d & c;
        g = 5 * i + 1 & 15;
      } else if (i < 48) {
        f = b ^ c ^ d;
        g = 3 * i + 5 & 15;
      } else {
        f = c ^ (b | ~d);
        g = 7 * i & 15;
      }

      f >>>= 0;
      f = f + a + K$2[i] + W[g];
      f >>>= 0;
      a = d;
      d = c;
      c = b;
      b = b + rotl32$2(f, S$2[i]);
      b >>>= 0;
    }

    this.state[0] += a;
    this.state[1] += b;
    this.state[2] += c;
    this.state[3] += d;
  }

  static hash() {
    return new MD5();
  }

  static hmac() {
    return new hmac(MD5, 64);
  }

  static digest(data) {
    return MD5.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 16);
    assert_1(Buffer.isBuffer(right) && right.length === 16);
    return MD5.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = MD5.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return MD5.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


MD5.native = 0;
MD5.id = 'MD5';
MD5.size = 16;
MD5.bits = 128;
MD5.blockSize = 64;
MD5.zero = Buffer.alloc(16, 0x00);
MD5.ctx = new MD5();
/*
 * Helpers
 */

function rotl32$2(w, b) {
  return w << b | w >>> 32 - b;
}

function readU32$f(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32$d(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var md5 = MD5;

var md5Browser = md5;

/*
 * EB2K
 */


function derive$3(passwd, salt, keyLen, ivLen) {
  if (typeof passwd === 'string') passwd = Buffer.from(passwd, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  if (salt == null) salt = Buffer.alloc(0);
  if (ivLen == null) ivLen = 0;
  assert_1(Buffer.isBuffer(passwd));
  assert_1(Buffer.isBuffer(salt));
  assert_1(keyLen >>> 0 === keyLen);
  assert_1(ivLen >>> 0 === ivLen);
  if (salt.length > 8) salt = salt.slice(0, 8);
  if (salt.length !== 0 && salt.length !== 8) throw new RangeError('Salt must be at least 8 bytes.');
  var key = Buffer.alloc(keyLen);
  var iv = Buffer.alloc(ivLen);
  var prev = Buffer.alloc(0);

  while (keyLen > 0 || ivLen > 0) {
    var used = 0;
    prev = md5Browser.multi(prev, passwd, salt);

    if (keyLen > 0) {
      var keyStart = key.length - keyLen;
      used = Math.min(keyLen, prev.length);
      prev.copy(key, keyStart, 0, used);
      keyLen -= used;
    }

    if (used < prev.length && ivLen > 0) {
      var ivStart = iv.length - ivLen;
      var length = Math.min(ivLen, prev.length - used);
      prev.copy(iv, ivStart, used, used + length);
      ivLen -= length;
    }
  }

  prev.fill(0x00);
  return [key, iv];
}
/*
 * Expose
 */


var native_1$7 = 0;
var derive_1$3 = derive$3;
var eb2k = {
  native: native_1$7,
  derive: derive_1$3
};

/*
 * ECIES
 */


var ECIES = {
  encrypt(curve, kdf, msg, pub) {
    var priv = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    assert_1(curve && typeof curve.id === 'string');
    if (priv == null) priv = curve.privateKeyGenerate();
    var ourPub = curve.publicKeyCreate(priv);
    var secret = curve.derive(pub, priv);
    var key = secretbox.derive(secret, kdf);
    var nonce = randomBrowser.randomBytes(24);
    var sealed = secretbox.seal(msg, key, nonce);
    return Buffer.concat([ourPub, nonce, sealed]);
  },

  decrypt(curve, kdf, msg, priv) {
    assert_1(curve && typeof curve.id === 'string');
    assert_1(Buffer.isBuffer(msg));
    var klen = curve.type === 'short' ? 1 + curve.size : curve.size;
    if (msg.length < klen + 24) throw new Error('Invalid ciphertext.');
    var theirPub = msg.slice(0, klen);
    var nonce = msg.slice(klen, klen + 24);
    var sealed = msg.slice(klen + 24);
    var secret = curve.derive(theirPub, priv);
    var key = secretbox.derive(secret, kdf);
    return secretbox.open(sealed, key, nonce);
  }

};
/*
 * Expose
 */

var ecies = ECIES;

/**
 * SHAKE
 */


class SHAKE extends keccakBrowser {
  /**
   * Create a SHAKE Context.
   * @constructor
   */
  constructor() {
    super();
  }

  final(len) {
    return super.final(0x1f, len);
  }

  static hash() {
    return new SHAKE();
  }

  static hmac() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    var len = arguments.length > 1 ? arguments[1] : undefined;
    return super.hmac(bits, 0x1f, len);
  }

  static digest(data) {
    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
    var len = arguments.length > 2 ? arguments[2] : undefined;
    return super.digest(data, bits, 0x1f, len);
  }

  static root(left, right) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var len = arguments.length > 3 ? arguments[3] : undefined;
    return super.root(left, right, bits, 0x1f, len);
  }

  static multi(x, y, z) {
    var bits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;
    var len = arguments.length > 4 ? arguments[4] : undefined;
    return super.multi(x, y, z, bits, 0x1f, len);
  }

  static mac(data, key) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var len = arguments.length > 3 ? arguments[3] : undefined;
    return super.mac(data, key, bits, 0x1f, len);
  }

}
/*
 * Static
 */


SHAKE.native = keccakBrowser.native;
SHAKE.id = 'SHAKE256';
SHAKE.size = 32;
SHAKE.bits = 256;
SHAKE.blockSize = 136;
SHAKE.zero = Buffer.alloc(32, 0x00);
SHAKE.ctx = new SHAKE();
/*
 * Expose
 */

var shake = SHAKE;

/**
 * SHAKE256
 */


class SHAKE256 extends shake {
  /**
   * Create a SHAKE256 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(256);
  }

  static hash() {
    return new SHAKE256();
  }

  static hmac(len) {
    return super.hmac(256, len);
  }

  static digest(data, len) {
    return super.digest(data, 256, len);
  }

  static root(left, right, len) {
    return super.root(left, right, 256, len);
  }

  static multi(x, y, z, len) {
    return super.multi(x, y, z, 256, len);
  }

  static mac(data, key, len) {
    return super.mac(data, key, 256, len);
  }

}
/*
 * Static
 */


SHAKE256.native = shake.native;
SHAKE256.id = 'SHAKE256';
SHAKE256.size = 32;
SHAKE256.bits = 256;
SHAKE256.blockSize = 136;
SHAKE256.zero = Buffer.alloc(32, 0x00);
SHAKE256.ctx = new SHAKE256();
/*
 * Expose
 */

var shake256 = SHAKE256;

/*
 * Expose
 */


var ed448 = new eddsa('ED448', 'X448', shake256);

var ed448Browser = ed448;

var isBrowser = Buffer.alloc(0)._isBuffer;
/*
 * Base16
 */


function encode$3(data, size) {
  assert_1(Buffer.isBuffer(data));
  assert_1(size == null || size >>> 0 === size);
  var str = data.toString('hex');

  if (size != null) {
    size *= 2;
    if (str.length > size) throw new RangeError('Data length exceeds requested size.');

    while (str.length < size) {
      str = '00' + str;
    }
  }

  return str;
}

function encodeLE(data, size) {
  var str = encode$3(data, size);
  var out = '';

  for (var i = str.length - 2; i >= 0; i -= 2) {
    out += str[i] + str[i + 1];
  }

  return out;
}

function decode$3(str, size) {
  assert_1(typeof str === 'string');
  assert_1(size == null || size >>> 0 === size);
  if (str.length & 1) throw new Error('Invalid hex string.');
  if (size != null && str.length !== size * 2) throw new RangeError('String length differs from expected size.');
  var data = Buffer.from(str, 'hex');
  if (str.length !== data.length * 2) throw new Error('Invalid hex string.');

  if (isBrowser && data.length > 0) {
    // Browserify may parse hex as:
    //
    //   parseInt(str.substring(i, i + 2), 16)
    //
    // This causes problems with error cases.
    //
    // For example:
    //
    //   parseInt('6x', 16) === 6
    //
    // This means our final byte with an
    // invalid character will be `06` and
    // it does not affect the length of
    // the buffer. We can check for this
    // below.
    //
    // This differs from node. Node will
    // discard the entire byte regardless
    // of which character is invalid.
    //
    // https://github.com/nodejs/node/blob/524dd46/src/string_bytes.cc#L247
    // https://github.com/feross/buffer/blob/b651e3a/index.js#L806
    if (data[data.length - 1] >>> 4 === 0) {
      if (!/[0-9a-f]$/i.test(str)) throw new Error('Invalid hex string.');
    }
  }

  return data;
}

function decodeLE(str, size) {
  var data = decode$3(str, size);

  for (var i = data.length - 1, j = 0; i > j; i--, j++) {
    [data[i], data[j]] = [data[j], data[i]];
  }

  return data;
}

function test$1(str, size) {
  assert_1(typeof str === 'string');
  assert_1(size == null || size >>> 0 === size); // Note: We cannot use byteLength to validate since the
  // calculation is a simple division by 2 without parsing.
  //
  // https://github.com/nodejs/node/blob/524dd46/lib/buffer.js#L540
  // https://github.com/feross/buffer/blob/b651e3a/index.js#L415

  if (str.length & 1) return false;
  if (size != null && str.length !== size * 2) return false;
  return /^[0-9a-f]*$/i.test(str);
}
/*
 * Expose
 */


var encode_1$2 = encode$3;
var encodeLE_1 = encodeLE;
var decode_1$2 = decode$3;
var decodeLE_1 = decodeLE;
var test_1$1 = test$1;
var base16 = {
  encode: encode_1$2,
  encodeLE: encodeLE_1,
  decode: decode_1$2,
  decodeLE: decodeLE_1,
  test: test_1$1
};

/*
 * Constants
 */


var CHARSET$1 = 'abcdefghijklmnopqrstuvwxyz234567';
var TABLE$1 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1];
var CHARSET_HEX = '0123456789abcdefghijklmnopqrstuv';
var TABLE_HEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1];
var PADDING$4 = [0, 6, 4, 3, 1];
/**
 * Encode a base32 string.
 * @param {Buffer} data
 * @param {Boolean} [pad=false]
 * @returns {String}
 */

function encode$4(data) {
  var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _encode(data, CHARSET$1, pad);
}
/**
 * Encode a base32hex string.
 * @param {Buffer} data
 * @param {Boolean} [pad=false]
 * @returns {String}
 */


function encodeHex(data) {
  var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _encode(data, CHARSET_HEX, pad);
}
/**
 * Encode a base32 string.
 * @private
 * @param {Buffer} data
 * @param {String} charset
 * @param {Boolean} [pad=false]
 * @returns {String}
 */


function _encode(data, charset, pad) {
  assert_1(Buffer.isBuffer(data));
  assert_1(typeof pad === 'boolean');
  var str = '';
  var mode = 0;
  var left = 0;

  for (var i = 0; i < data.length; i++) {
    var ch = data[i];

    switch (mode) {
      case 0:
        str += charset[ch >>> 3];
        left = (ch & 7) << 2;
        mode = 1;
        break;

      case 1:
        str += charset[left | ch >>> 6];
        str += charset[ch >>> 1 & 31];
        left = (ch & 1) << 4;
        mode = 2;
        break;

      case 2:
        str += charset[left | ch >>> 4];
        left = (ch & 15) << 1;
        mode = 3;
        break;

      case 3:
        str += charset[left | ch >>> 7];
        str += charset[ch >>> 2 & 31];
        left = (ch & 3) << 3;
        mode = 4;
        break;

      case 4:
        str += charset[left | ch >>> 5];
        str += charset[ch & 31];
        mode = 0;
        break;
    }
  }

  if (mode > 0) {
    str += charset[left];

    if (pad) {
      for (var _i = 0; _i < PADDING$4[mode]; _i++) {
        str += '=';
      }
    }
  }

  return str;
}
/**
 * Decode a base32 string.
 * @param {String} str
 * @param {Boolean} [unpad=false]
 * @returns {Buffer}
 */


function decode$4(str) {
  var unpad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _decode(str, TABLE$1, unpad);
}
/**
 * Decode a base32hex string.
 * @param {String} str
 * @param {Boolean} [unpad=false]
 * @returns {Buffer}
 */


function decodeHex(str) {
  var unpad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return _decode(str, TABLE_HEX, unpad);
}
/**
 * Decode a base32 string.
 * @private
 * @param {String} str
 * @param {Array} table
 * @param {Boolean} [unpad=false]
 * @returns {Buffer}
 */


function _decode(str, table, unpad) {
  assert_1(typeof str === 'string');
  assert_1(typeof unpad === 'boolean');
  var data = Buffer.allocUnsafe((str.length * 5 + 7) / 8 | 0);
  var mode = 0;
  var left = 0;
  var j = 0;
  var i = 0;

  for (; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    var v = ch & 0xff80 ? -1 : table[ch];
    if (v === -1) break;

    switch (mode) {
      case 0:
        left = v;
        mode = 1;
        break;

      case 1:
        data[j++] = left << 3 | v >>> 2;
        left = v & 3;
        mode = 2;
        break;

      case 2:
        left = left << 5 | v;
        mode = 3;
        break;

      case 3:
        data[j++] = left << 1 | v >>> 4;
        left = v & 15;
        mode = 4;
        break;

      case 4:
        data[j++] = left << 4 | v >>> 1;
        left = v & 1;
        mode = 5;
        break;

      case 5:
        left = left << 5 | v;
        mode = 6;
        break;

      case 6:
        data[j++] = left << 2 | v >>> 3;
        left = v & 7;
        mode = 7;
        break;

      case 7:
        data[j++] = left << 5 | v;
        left = 0;
        mode = 0;
        break;
    }
  }

  if (mode === 1 || mode === 3 || mode === 6) throw new Error('Invalid base32 string.');
  if (left > 0) throw new Error('Invalid base32 string.');
  if (str.length !== i + (-mode & 7) * unpad) throw new Error('Invalid base32 string.');

  for (; i < str.length; i++) {
    var _ch = str.charCodeAt(i);

    if (_ch !== 0x3d) throw new Error('Invalid base32 string.');
  }

  return data.slice(0, j);
}
/**
 * Test a base32 string.
 * @param {String} str
 * @param {Boolean} [unpad=false]
 * @returns {Buffer}
 */


function test$2(str) {
  var unpad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  assert_1(typeof str === 'string');
  assert_1(typeof unpad === 'boolean');

  try {
    decode$4(str, unpad);
    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Test a base32 hex string.
 * @param {String} str
 * @param {Boolean} [unpad=false]
 * @returns {Buffer}
 */


function testHex(str) {
  var unpad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  assert_1(typeof str === 'string');
  assert_1(typeof unpad === 'boolean');

  try {
    decodeHex(str, unpad);
    return true;
  } catch (e) {
    return false;
  }
}
/*
 * Expose
 */


var encode_1$3 = encode$4;
var encodeHex_1 = encodeHex;
var decode_1$3 = decode$4;
var decodeHex_1 = decodeHex;
var test_1$2 = test$2;
var testHex_1 = testHex;
var base32 = {
  encode: encode_1$3,
  encodeHex: encodeHex_1,
  decode: decode_1$3,
  decodeHex: decodeHex_1,
  test: test_1$2,
  testHex: testHex_1
};

/*
 * Constants
 */


var CHARSET$2 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var TABLE$2 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18, 19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, -1, -1, -1, -1, -1];
/**
 * Encode a base58 string.
 * @param {Buffer} data
 * @returns {String}
 */

function encode$5(data) {
  assert_1(Buffer.isBuffer(data));
  var zeroes = 0;
  var i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0) break;
    zeroes += 1;
  }

  var b58 = Buffer.allocUnsafe((data.length * 138 / 100 | 0) + 1);
  b58.fill(0);
  var length = 0;

  for (; i < data.length; i++) {
    var carry = data[i];
    var j = 0;

    for (var k = b58.length - 1; k >= 0; k--, j++) {
      if (carry === 0 && j >= length) break;
      carry += 256 * b58[k];
      b58[k] = carry % 58;
      carry = carry / 58 | 0;
    }

    assert_1(carry === 0);
    length = j;
  }

  i = b58.length - length;

  while (i < b58.length && b58[i] === 0) {
    i += 1;
  }

  var str = '';

  for (var _j = 0; _j < zeroes; _j++) {
    str += '1';
  }

  for (; i < b58.length; i++) {
    str += CHARSET$2[b58[i]];
  }

  return str;
}
/**
 * Decode a base58 string.
 * @param {String} str
 * @returns {Buffer}
 * @throws on non-base58 character.
 */


function decode$5(str) {
  assert_1(typeof str === 'string');
  var zeroes = 0;
  var i = 0;

  for (; i < str.length; i++) {
    if (str[i] !== '1') break;
    zeroes += 1;
  }

  var b256 = Buffer.allocUnsafe((str.length * 733 / 1000 | 0) + 1);
  b256.fill(0);
  var length = 0;

  for (; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    var v = ch & 0xff80 ? -1 : TABLE$2[ch];
    if (v === -1) throw new Error('Non-base58 character.');
    var carry = v;
    var _j2 = 0;

    for (var k = b256.length - 1; k >= 0; k--, _j2++) {
      if (carry === 0 && _j2 >= length) break;
      carry += 58 * b256[k];
      b256[k] = carry & 0xff;
      carry >>>= 8;
    }

    assert_1(carry === 0);
    length = _j2;
  }

  i = 0;

  while (i < b256.length && b256[i] === 0) {
    i += 1;
  }

  var out = Buffer.allocUnsafe(zeroes + (b256.length - i));
  var j;

  for (j = 0; j < zeroes; j++) {
    out[j] = 0;
  }

  while (i < b256.length) {
    out[j++] = b256[i++];
  }

  return out;
}
/**
 * Test whether the string is a base58 string.
 * @param {String} str
 * @returns {Buffer}
 */


function test$3(str) {
  assert_1(typeof str === 'string');

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    if (ch & 0xff80) return false;
    if (TABLE$2[ch] === -1) return false;
  }

  return true;
}
/*
 * Expose
 */


var native_1$8 = 0;
var encode_1$4 = encode$5;
var decode_1$4 = decode$5;
var test_1$3 = test$3;
var base58 = {
  native: native_1$8,
  encode: encode_1$4,
  decode: decode_1$4,
  test: test_1$3
};

var base58Browser = base58;

/**
 * Constants
 */


var POOL66 = Buffer.allocUnsafe(66);
var CHARSET$3 = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
var TABLE$3 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 10, 17, 21, 20, 26, 30, 7, 5, -1, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4, 2, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4, 2, -1, -1, -1, -1, -1];
/**
 * Update checksum.
 * @ignore
 * @param {Number} chk
 * @returns {Number}
 */

function polymod(pre) {
  var b = pre >>> 25;
  return (pre & 0x1ffffff) << 5 ^ -(b >>> 0 & 1) & 0x3b6a57b2 ^ -(b >>> 1 & 1) & 0x26508e6d ^ -(b >>> 2 & 1) & 0x1ea119fa ^ -(b >>> 3 & 1) & 0x3d4233dd ^ -(b >>> 4 & 1) & 0x2a1462b3;
}
/**
 * Encode hrp and data as a bech32 string.
 * @param {String} hrp
 * @param {Buffer} data
 * @returns {String}
 */


function serialize(hrp, data) {
  assert_1(typeof hrp === 'string');
  assert_1(Buffer.isBuffer(data));
  var chk = 1;
  var i;

  for (i = 0; i < hrp.length; i++) {
    var ch = hrp.charCodeAt(i);
    if (ch & 0xff00 || ch >>> 5 === 0) throw new Error('Invalid bech32 character.');
    chk = polymod(chk) ^ ch >>> 5;
  }

  if (i + 7 + data.length > 90) throw new Error('Invalid bech32 data length.');
  chk = polymod(chk);
  var str = '';

  for (var _i = 0; _i < hrp.length; _i++) {
    var _ch = hrp.charCodeAt(_i);

    chk = polymod(chk) ^ _ch & 0x1f;
    str += hrp[_i];
  }

  str += '1';

  for (var _i2 = 0; _i2 < data.length; _i2++) {
    var _ch2 = data[_i2];
    if (_ch2 >>> 5 !== 0) throw new Error('Invalid bech32 value.');
    chk = polymod(chk) ^ _ch2;
    str += CHARSET$3[_ch2];
  }

  for (var _i3 = 0; _i3 < 6; _i3++) {
    chk = polymod(chk);
  }

  chk ^= 1;

  for (var _i4 = 0; _i4 < 6; _i4++) {
    str += CHARSET$3[chk >>> (5 - _i4) * 5 & 0x1f];
  }

  return str;
}
/**
 * Decode a bech32 string.
 * @param {String} str
 * @returns {Array} [hrp, data]
 */


function deserialize(str) {
  assert_1(typeof str === 'string');
  if (str.length < 8 || str.length > 90) throw new Error('Invalid bech32 string length.');
  var dlen = 0;

  while (dlen < str.length && str[str.length - 1 - dlen] !== '1') {
    dlen += 1;
  }

  var hlen = str.length - (1 + dlen);
  if (1 + dlen >= str.length || dlen < 6) throw new Error('Invalid bech32 data length.');
  dlen -= 6;
  var data = Buffer.allocUnsafe(dlen);
  var chk = 1;
  var lower = false;
  var upper = false;
  var hrp = '';

  for (var _i5 = 0; _i5 < hlen; _i5++) {
    var ch = str.charCodeAt(_i5);
    if (ch < 0x21 || ch > 0x7e) throw new Error('Invalid bech32 character.');

    if (ch >= 0x61 && ch <= 0x7a) {
      lower = true;
    } else if (ch >= 0x41 && ch <= 0x5a) {
      upper = true;
      ch = ch - 0x41 + 0x61;
    }

    hrp += String.fromCharCode(ch);
    chk = polymod(chk) ^ ch >>> 5;
  }

  chk = polymod(chk);
  var i;

  for (i = 0; i < hlen; i++) {
    chk = polymod(chk) ^ str.charCodeAt(i) & 0x1f;
  }

  i += 1;

  while (i < str.length) {
    var _ch3 = str.charCodeAt(i);

    var v = _ch3 & 0xff80 ? -1 : TABLE$3[_ch3];
    if (v === -1) throw new Error('Invalid bech32 character.');
    if (_ch3 >= 0x61 && _ch3 <= 0x7a) lower = true;else if (_ch3 >= 0x41 && _ch3 <= 0x5a) upper = true;
    chk = polymod(chk) ^ v;
    if (i + 6 < str.length) data[i - (1 + hlen)] = v;
    i += 1;
  }

  if (lower && upper) throw new Error('Invalid bech32 casing.');
  if (chk !== 1) throw new Error('Invalid bech32 checksum.');
  return [hrp, data.slice(0, dlen)];
}
/**
 * Test whether a string is a bech32 string.
 * @param {String} str
 * @returns {Boolean}
 */


function is(str) {
  assert_1(typeof str === 'string');

  try {
    deserialize(str);
  } catch (e) {
    return false;
  }

  return true;
}
/**
 * Convert serialized data to another base.
 * @param {Buffer} input
 * @param {Number} i
 * @param {Buffer} output
 * @param {Number} j
 * @param {Number} frombits
 * @param {Number} tobits
 * @param {Boolean} pad
 * @returns {Buffer}
 */


function convert(input, i, output, j, frombits, tobits, pad) {
  assert_1(Buffer.isBuffer(input));
  assert_1(i >>> 0 === i);
  assert_1(Buffer.isBuffer(output));
  assert_1(j >>> 0 === j);
  assert_1((frombits & 0xff) === frombits);
  assert_1((tobits & 0xff) === tobits);
  assert_1(typeof pad === 'boolean');
  assert_1(frombits !== 0);
  assert_1(tobits !== 0);
  var maxv = (1 << tobits) - 1;
  var acc = 0;
  var bits = 0;

  for (; i < input.length; i++) {
    var value = input[i];
    if (value >>> frombits !== 0) throw new Error('Invalid bits.');
    acc = acc << frombits | value;
    bits += frombits;

    while (bits >= tobits) {
      bits -= tobits;
      output[j++] = acc >>> bits & maxv;
    }
  }

  if (pad) {
    if (bits) output[j++] = acc << tobits - bits & maxv;
  } else {
    if (bits >= frombits || acc << tobits - bits & maxv) throw new Error('Invalid bits.');
  }

  assert_1(j <= output.length);
  return output.slice(0, j);
}
/**
 * Calculate size required for bit conversion.
 * @param {Number} len
 * @param {Number} frombits
 * @param {Number} tobits
 * @param {Boolean} pad
 * @returns {Number}
 */


function convertSize(len, frombits, tobits, pad) {
  assert_1(len >>> 0 === len);
  assert_1((frombits & 0xff) === frombits);
  assert_1((tobits & 0xff) === tobits);
  assert_1(typeof pad === 'boolean');
  assert_1(frombits !== 0);
  assert_1(tobits !== 0);
  var size = (len * frombits + (tobits - 1)) / tobits;
  size >>>= 0;
  if (pad) size += 1;
  return size;
}
/**
 * Convert serialized data to another base.
 * @param {Buffer} data
 * @param {Number} frombits
 * @param {Number} tobits
 * @param {Boolean} pad
 * @returns {Buffer}
 */


function convertBits(data, frombits, tobits, pad) {
  assert_1(Buffer.isBuffer(data));
  var size = convertSize(data.length, frombits, tobits, pad);
  var out = Buffer.allocUnsafe(size);
  return convert(data, 0, out, 0, frombits, tobits, pad);
}
/**
 * Serialize data to bech32 address.
 * @param {String} hrp
 * @param {Number} version
 * @param {Buffer} hash
 * @returns {String}
 */


function encode$6(hrp, version, hash) {
  assert_1(typeof hrp === 'string');
  assert_1((version & 0xff) === version);
  assert_1(Buffer.isBuffer(hash));
  if (version < 0 || version > 31) throw new Error('Invalid bech32 version.');
  if (hash.length < 2 || hash.length > 40) throw new Error('Invalid bech32 data length.');
  var out = POOL66;
  out[0] = version;
  var data = convert(hash, 0, out, 1, 8, 5, true);
  return serialize(hrp, data);
}
/**
 * Deserialize data from bech32 address.
 * @param {String} str
 * @returns {Array}
 */


function decode$6(str) {
  var [hrp, data] = deserialize(str);
  if (data.length === 0 || data.length > 65) throw new Error('Invalid bech32 data length.');
  var version = data[0];
  if (version > 31) throw new Error('Invalid bech32 version.');
  var hash = convert(data, 1, data, 0, 5, 8, false);
  if (hash.length < 2 || hash.length > 40) throw new Error('Invalid bech32 data length.');
  return [hrp, version, hash];
}
/**
 * Test whether a string is a bech32 string.
 * @param {String} str
 * @returns {Boolean}
 */


function test$4(str) {
  assert_1(typeof str === 'string');
  var data;

  try {
    [, data] = deserialize(str);
  } catch (e) {
    return false;
  }

  if (data.length === 0 || data.length > 65) return false;
  var version = data[0];
  if (version > 31) return false;
  return true;
}
/*
 * Expose
 */


var native_1$9 = 0;
var serialize_1 = serialize;
var deserialize_1 = deserialize;
var is_1 = is;
var convertBits_1 = convertBits;
var encode_1$5 = encode$6;
var decode_1$5 = decode$6;
var test_1$4 = test$4;
var bech32 = {
  native: native_1$9,
  serialize: serialize_1,
  deserialize: deserialize_1,
  is: is_1,
  convertBits: convertBits_1,
  encode: encode_1$5,
  decode: decode_1$5,
  test: test_1$4
};

var bech32Browser = bech32;

/**
 * Constants
 */


var POOL105 = Buffer.allocUnsafe(105);
var CHARSET$4 = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
var TABLE$4 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 10, 17, 21, 20, 26, 30, 7, 5, -1, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4, 2, -1, -1, -1, -1, -1, -1, 29, -1, 24, 13, 25, 9, 8, 23, -1, 18, 22, 31, 27, 19, -1, 1, 0, 3, 16, 11, 28, 12, 14, 6, 4, 2, -1, -1, -1, -1, -1];
var CHECKSUM_MASK = [0x00000007, 0xffffffff];
var GENERATOR = [0x00000098, 0xf2bc8e61, 0x00000079, 0xb76d99e2, 0x000000f3, 0x3e5fb3c4, 0x000000ae, 0x2eabe2a8, 0x0000001e, 0x4f43e470];
/**
 * Update checksum
 * @ignore
 * @param {Number[]} chk
 * @param {Number} x
 * @returns {Number[]} -- new checksum
 */

function polymod$1(pre, x) {
  var c = pre; // b = c >> 35

  var b = c[0] >>> 3; // c = (c & CHECKSUM_MASK) << 5

  c[0] &= CHECKSUM_MASK[0];
  c[1] &= CHECKSUM_MASK[1];
  c[0] <<= 5;
  c[0] |= c[1] >>> 27;
  c[1] <<= 5;

  for (var i = 0; i < 5; i++) {
    if (b >>> i & 1) {
      // c ^= GENERATOR[i]
      c[0] ^= GENERATOR[i * 2 + 0];
      c[1] ^= GENERATOR[i * 2 + 1];
    }
  } // c ^= x


  c[1] ^= x;
  return c;
}
/**
 * Serialize data to cash32.
 * @param {String} prefix
 * @param {Buffer} data - 5bit serialized
 * @returns {String}
 */


function serialize$1(prefix, data) {
  assert_1(typeof prefix === 'string');
  assert_1(Buffer.isBuffer(data));
  var chk = [0, 1];
  var upper = false;
  var lower = false;
  var str = '';

  for (var i = 0; i < prefix.length; i++) {
    var ch = prefix.charCodeAt(i);
    if (ch & 0xff00 || ch >>> 5 === 0) throw new Error('Invalid cash32 character.');

    if (ch >= 0x61 && ch <= 0x7a) {
      lower = true;
    } else if (ch >= 0x41 && ch <= 0x5a) {
      upper = true;
      ch = ch - 0x41 + 0x61;
    } else if (ch >= 0x30 && ch <= 0x39) {
      throw new Error('Invalid cash32 prefix.');
    }

    polymod$1(chk, ch & 0x1f);
    str += String.fromCharCode(ch);
  }

  if (lower && upper) throw new Error('Invalid cash32 prefix.');
  polymod$1(chk, 0);
  str += ':';

  for (var _i = 0; _i < data.length; _i++) {
    var _ch = data[_i];
    if (_ch >>> 5 !== 0) throw new Error('Invalid cash32 value.');
    polymod$1(chk, _ch);
    str += CHARSET$4[_ch];
  }

  for (var _i2 = 0; _i2 < 8; _i2++) {
    polymod$1(chk, 0);
  }

  chk[1] ^= 1; // i = 0, shift = 35

  str += CHARSET$4[chk[0] >>> 3 & 0x1f];

  for (var _i3 = 1; _i3 < 7; _i3++) {
    var shift = (7 - _i3) * 5;
    var v = chk[1] >>> shift | chk[0] << 32 - shift;
    str += CHARSET$4[v & 0x1f];
  } // i = 7, shift = 0


  str += CHARSET$4[chk[1] & 0x1f];
  return str;
}
/**
 * Decode cash32 string.
 * @param {String} str
 * @param {String} defaultPrefix (lowercase and w/o numbers)
 * @returns {Array} [prefix, data]
 */


function deserialize$1(str, defaultPrefix) {
  assert_1(typeof str === 'string');
  assert_1(typeof defaultPrefix === 'string');
  if (str.length < 8 || str.length > 196) // 83 + 1 + 112
    throw new Error('Invalid cash32 data length.');
  var lower = false;
  var upper = false;
  var number = false;
  var plen = 0; // Process lower/upper, make sure we have prefix.

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i);

    if (ch >= 0x61 && ch <= 0x7a) {
      lower = true;
      continue;
    }

    if (ch >= 0x41 && ch <= 0x5a) {
      upper = true;
      continue;
    }

    if (ch >= 0x30 && ch <= 0x39) {
      number = true;
      continue;
    }

    if (ch === 0x3a) {
      // :
      if (number || i === 0 || i > 83) throw new Error('Invalid cash32 prefix.');
      if (plen !== 0) throw new Error('Invalid cash32 separators.');
      plen = i;
      continue;
    }

    throw new Error('Invalid cash32 character.');
  }

  if (upper && lower) throw new Error('Invalid cash32 casing.'); // Process checksum.

  var chk = [0, 1];
  var prefix;

  if (plen === 0) {
    prefix = defaultPrefix.toLowerCase();
  } else {
    prefix = str.substring(0, plen).toLowerCase();
    plen += 1;
  } // Process prefix.


  for (var _i4 = 0; _i4 < prefix.length; _i4++) {
    var _ch2 = prefix.charCodeAt(_i4);

    polymod$1(chk, (_ch2 | 0x20) & 0x1f);
  }

  polymod$1(chk, 0);
  var dlen = str.length - plen;
  if (dlen <= 8 || dlen > 112) throw new Error('Invalid cash32 data length.');
  var data = Buffer.allocUnsafe(dlen);

  for (var _i5 = plen; _i5 < str.length; _i5++) {
    var _ch3 = str.charCodeAt(_i5);

    var v = _ch3 & 0xff80 ? -1 : TABLE$4[_ch3];
    if (v === -1) throw new Error('Invalid cash32 character.');
    polymod$1(chk, v);
    if (_i5 + 8 < str.length) data[_i5 - plen] = v;
  }

  var valid = chk[0] === 0 && chk[1] === 1 && prefix === defaultPrefix;
  if (!valid) throw new Error('Invalid cash32 checksum.');
  return [prefix, data.slice(0, -8)];
}
/**
 * Test whether a string is a cash32 string.
 * @param {String} str
 * @returns {Boolean}
 */


function is$1(str, defaultPrefix) {
  assert_1(typeof str === 'string');
  assert_1(typeof defaultPrefix === 'string');

  try {
    deserialize$1(str, defaultPrefix);
  } catch (e) {
    return false;
  }

  return true;
}
/**
 * Convert serialized data to another base.
 * @param {Buffer} input
 * @param {Number} i
 * @param {Buffer} output
 * @param {Number} j
 * @param {Number} frombits
 * @param {Number} tobits
 * @param {Boolean} pad
 * @returns {Buffer}
 */


function convert$1(input, i, output, j, frombits, tobits, pad) {
  assert_1(Buffer.isBuffer(input));
  assert_1(i >>> 0 === i);
  assert_1(Buffer.isBuffer(output));
  assert_1(j >>> 0 === j);
  assert_1((frombits & 0xff) === frombits);
  assert_1((tobits & 0xff) === tobits);
  assert_1(typeof pad === 'boolean');
  assert_1(frombits !== 0);
  assert_1(tobits !== 0);
  var maxv = (1 << tobits) - 1;
  var acc = 0;
  var bits = 0;

  for (; i < input.length; i++) {
    var value = input[i];
    if (value >>> frombits !== 0) throw new Error('Invalid bits.');
    acc = acc << frombits | value;
    bits += frombits;

    while (bits >= tobits) {
      bits -= tobits;
      output[j++] = acc >>> bits & maxv;
    }
  }

  if (pad) {
    if (bits) output[j++] = acc << tobits - bits & maxv;
  } else {
    if (bits >= frombits || acc << tobits - bits & maxv) throw new Error('Invalid bits.');
  }

  assert_1(j <= output.length);
  return output.slice(0, j);
}
/**
 * Calculate size required for bit conversion.
 * @param {Number} len
 * @param {Number} frombits
 * @param {Number} tobits
 * @param {Boolean} pad
 * @returns {Number}
 */


function convertSize$1(len, frombits, tobits, pad) {
  assert_1(len >>> 0 === len);
  assert_1((frombits & 0xff) === frombits);
  assert_1((tobits & 0xff) === tobits);
  assert_1(typeof pad === 'boolean');
  assert_1(frombits !== 0);
  assert_1(tobits !== 0);
  var size = (len * frombits + (tobits - 1)) / tobits;
  size >>>= 0;
  if (pad) size += 1;
  return size;
}
/**
 * Convert serialized data to another base.
 * @param {Buffer} data
 * @param {Number} frombits
 * @param {Number} tobits
 * @param {Boolean} pad
 * @returns {Buffer}
 */


function convertBits$1(data, frombits, tobits, pad) {
  assert_1(Buffer.isBuffer(data));
  var size = convertSize$1(data.length, frombits, tobits, pad);
  var out = Buffer.allocUnsafe(size);
  return convert$1(data, 0, out, 0, frombits, tobits, pad);
}
/**
 * Get cash32 encoded size.
 * @param {Number} size
 * @returns {Number}
 */


function encodedSize(size) {
  assert_1(size >>> 0 === size);

  switch (size) {
    case 20:
      return 0;

    case 24:
      return 1;

    case 28:
      return 2;

    case 32:
      return 3;

    case 40:
      return 4;

    case 48:
      return 5;

    case 56:
      return 6;

    case 64:
      return 7;

    default:
      throw new Error('Non standard length.');
  }
}
/**
 * Serialize data to cash32
 * @param {String} prefix
 * @param {Number} type - (0 = P2PKH, 1 = P2SH)
 * @param {Buffer} hash
 * @returns {String}
 */


function encode$7(prefix, type, hash) {
  assert_1(typeof prefix === 'string'); // There are 4 bits available for the version (2 ^ 4 = 16)

  assert_1((type & 0x0f) === type, 'Invalid cash32 type.');
  assert_1(Buffer.isBuffer(hash));
  if (prefix.length === 0 || prefix.length > 83) throw new Error('Invalid cash32 prefix.');
  var size = encodedSize(hash.length);
  var data = Buffer.allocUnsafe(hash.length + 1);
  data[0] = type << 3 | size;
  hash.copy(data, 1);
  var output = POOL105;
  var converted = convert$1(data, 0, output, 0, 8, 5, true);
  return serialize$1(prefix, converted);
}
/**
 * Deserialize data from cash32 address.
 * @param {String} str
 * @param {String} defaultPrefix (lowercase and w/o numbers)
 * @returns {Array}
 */


function decode$7(str) {
  var defaultPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'bitcoincash';
  var [prefix, data] = deserialize$1(str, defaultPrefix);
  var extrabits = data.length * 5 & 7;
  if (extrabits >= 5) throw new Error('Invalid padding in data.');
  var last = data[data.length - 1];
  var mask = (1 << extrabits) - 1;
  if (last & mask) throw new Error('Non zero padding.');
  var output = data;
  var converted = convert$1(data, 0, output, 0, 5, 8, false);
  var type = converted[0] >>> 3 & 0x1f;
  var hash = converted.slice(1);
  var size = 20 + 4 * (converted[0] & 0x03);
  if (converted[0] & 0x04) size *= 2;
  if (size !== hash.length) throw new Error('Invalid cash32 data length.');
  return [prefix, type, hash];
}
/**
 * Test whether a string is a cash32 string.
 * @param {String} str
 * @param {String} defaultPrefix (lowercase and w/o numbers)
 * @returns {Boolean}
 */


function test$5(str) {
  var defaultPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'bitcoincash';
  assert_1(typeof str === 'string');
  assert_1(typeof defaultPrefix === 'string');

  try {
    decode$7(str, defaultPrefix);
  } catch (e) {
    return false;
  }

  return true;
}
/*
 * Expose
 */


var native_1$a = 0;
var serialize_1$1 = serialize$1;
var deserialize_1$1 = deserialize$1;
var is_1$1 = is$1;
var convertBits_1$1 = convertBits$1;
var encode_1$6 = encode$7;
var decode_1$6 = decode$7;
var test_1$5 = test$5;
var cash32 = {
  native: native_1$a,
  serialize: serialize_1$1,
  deserialize: deserialize_1$1,
  is: is_1$1,
  convertBits: convertBits_1$1,
  encode: encode_1$6,
  decode: decode_1$6,
  test: test_1$5
};

var cash32Browser = cash32;

var {
  PEMBlock: PEMBlock$1
} = pem;
/**
 * Encrypt a block.
 * @param {PEMBlock} block
 * @param {String} name
 * @param {String} passwd
 * @returns {PEMBlock}
 */

function encrypt$1(block, name, passwd) {
  assert_1(block instanceof PEMBlock$1);
  assert_1(typeof name === 'string');
  assert_1(typeof passwd === 'string');
  if (block.isEncrypted()) throw new Error('PEM block is already encrypted.');
  var {
    keySize,
    ivSize
  } = cipherBrowser.get(name);
  var iv = randomBrowser.randomBytes(ivSize);
  var [key] = eb2k.derive(passwd, iv, keySize, ivSize);
  block.data = cipherBrowser.encrypt(name, key, iv, block.data);
  block.setProcType(4, 'ENCRYPTED');
  block.setDEKInfo(name, iv);
  return block;
}
/**
 * Decrypt a block.
 * @param {PEMBlock} block
 * @param {String} passwd
 * @returns {PEMBlock}
 */


function decrypt$1(block, passwd) {
  assert_1(block instanceof PEMBlock$1);
  assert_1(typeof passwd === 'string');
  if (!block.isEncrypted()) throw new Error('PEM block is not encrypted.');
  var info = block.getDEKInfo();
  if (!info) throw new Error('DEK-Info not found.');
  var {
    keySize,
    ivSize
  } = cipherBrowser.get(info.name);
  var [key] = eb2k.derive(passwd, info.iv, keySize, ivSize);
  block.data = cipherBrowser.decrypt(info.name, key, info.iv, block.data);
  block.unsetProcType();
  block.unsetDEKInfo();
  return block;
}
/*
 * Expose
 */


var encrypt_1$1 = encrypt$1;
var decrypt_1$1 = decrypt$1;
var pemcrypt = {
  encrypt: encrypt_1$1,
  decrypt: decrypt_1$1
};

/**
 * RSAPublicKey
 */
// RSAPublicKey ::= SEQUENCE {
//     modulus           INTEGER,  -- n
//     publicExponent    INTEGER   -- e
// }


class RSAPublicKey extends asn1.Sequence {
  constructor(n, e) {
    super();
    this.n = new asn1.Unsigned(n);
    this.e = new asn1.Unsigned(e);
  }

  getBodySize() {
    var size = 0;
    size += this.n.getSize();
    size += this.e.getSize();
    return size;
  }

  writeBody(bw) {
    this.n.write(bw);
    this.e.write(bw);
    return bw;
  }

  readBody(br) {
    this.n.read(br);
    this.e.read(br);
    return this;
  }

  clean() {
    return this.n.clean() && this.e.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'RSA PUBLIC KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'RSA PUBLIC KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      n: this.n,
      e: this.e
    };
  }

}
/**
 * RSAPrivateKey
 */
// RSAPrivateKey ::= SEQUENCE {
//   version           Version,
//   modulus           INTEGER,  -- n
//   publicExponent    INTEGER,  -- e
//   privateExponent   INTEGER,  -- d
//   prime1            INTEGER,  -- p
//   prime2            INTEGER,  -- q
//   exponent1         INTEGER,  -- d mod (p-1)
//   exponent2         INTEGER,  -- d mod (q-1)
//   coefficient       INTEGER,  -- (inverse of q) mod p
//   otherPrimeInfos   OtherPrimeInfos OPTIONAL
// }


class RSAPrivateKey extends asn1.Sequence {
  constructor(version, n, e, d, p, q, dp, dq, qi) {
    super();
    this.version = new asn1.Unsigned(version);
    this.n = new asn1.Unsigned(n);
    this.e = new asn1.Unsigned(e);
    this.d = new asn1.Unsigned(d);
    this.p = new asn1.Unsigned(p);
    this.q = new asn1.Unsigned(q);
    this.dp = new asn1.Unsigned(dp);
    this.dq = new asn1.Unsigned(dq);
    this.qi = new asn1.Unsigned(qi);
  }

  getBodySize() {
    var size = 0;
    size += this.version.getSize();
    size += this.n.getSize();
    size += this.e.getSize();
    size += this.d.getSize();
    size += this.p.getSize();
    size += this.q.getSize();
    size += this.dp.getSize();
    size += this.dq.getSize();
    size += this.qi.getSize();
    return size;
  }

  writeBody(bw) {
    this.version.write(bw);
    this.n.write(bw);
    this.e.write(bw);
    this.d.write(bw);
    this.p.write(bw);
    this.q.write(bw);
    this.dp.write(bw);
    this.dq.write(bw);
    this.qi.write(bw);
    return bw;
  }

  readBody(br) {
    this.version.read(br);
    this.n.read(br);
    this.e.read(br);
    this.d.read(br);
    this.p.read(br);
    this.q.read(br);
    this.dp.read(br);
    this.dq.read(br);
    this.qi.read(br);
    return this;
  }

  clean() {
    return this.n.clean() && this.e.clean() && this.d.clean() && this.p.clean() && this.q.clean() && this.dp.clean() && this.dq.clean() && this.qi.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'RSA PRIVATE KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'RSA PRIVATE KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      version: this.version,
      n: this.n,
      e: this.e,
      d: this.d,
      p: this.p,
      q: this.q,
      dp: this.dp,
      dq: this.dq,
      qi: this.qi
    };
  }

}
/*
 * Expose
 */


var RSAPublicKey_1 = RSAPublicKey;
var RSAPrivateKey_1 = RSAPrivateKey;
var pkcs1 = {
  RSAPublicKey: RSAPublicKey_1,
  RSAPrivateKey: RSAPrivateKey_1
};

/*
 * PKCS5
 */


var pkcs5 = {
  pad(pt, size) {
    assert_1(Buffer.isBuffer(pt));
    assert_1(size >>> 0 === size);
    assert_1(size > 0 && size < 256);
    var left = size - pt.length % size;
    var out = Buffer.allocUnsafe(pt.length + left);
    pt.copy(out, 0);

    for (var i = pt.length; i < out.length; i++) {
      out[i] = left;
    }

    return out;
  },

  unpad(pt, size) {
    assert_1(Buffer.isBuffer(pt));
    assert_1(size >>> 0 === size);
    assert_1(size > 0 && size < 256);
    if (pt.length < size || pt.length % size !== 0) throw new Error('Invalid padding.');
    var left = pt[pt.length - 1];
    if (left === 0 || left > size) throw new Error('Invalid padding.');

    for (var i = pt.length - left; i < pt.length; i++) {
      if (pt[i] !== left) throw new Error('Invalid padding.');
    }

    return pt.slice(0, -left);
  }

};
/*
 * Expose
 */

var pkcs5_1 = pkcs5;

/**
 * ECPrivateKey
 */
// ECPrivateKey ::= SEQUENCE {
//   version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
//   privateKey OCTET STRING,
//   parameters [0] ECDomainParameters {{ SECGCurveNames }} OPTIONAL,
//   publicKey [1] BIT STRING OPTIONAL
// }
// ECDomainParameters{ECDOMAIN:IOSet} ::= CHOICE {
//   specified SpecifiedECDomain,
//   named ECDOMAIN.&id({IOSet}),
//   implicitCA NULL
// }
// ECDOMAIN ::= CLASS {
//   &id OBJECT IDENTIFIER UNIQUE
// }
// Golang seems to be using this instead:
// ECPrivateKey ::= SEQUENCE {
//   version       INTEGER { ecPrivkeyVer1(1) },
//   privateKey    OCTET STRING,
//   parameters    [0] EXPLICIT ECDomainParameters OPTIONAL,
//   publicKey     [1] EXPLICIT BIT STRING OPTIONAL
// }


class ECPrivateKey extends asn1.Sequence {
  constructor(version, privateKey, namedCurveOID, publicKey) {
    super();
    this.version = new asn1.Unsigned(version);
    this.privateKey = new asn1.OctString(privateKey);
    this.namedCurveOID = new asn1.OID(namedCurveOID).explicit(0).optional();
    this.publicKey = new asn1.BitString(publicKey).explicit(1).optional();
  }

  getBodySize() {
    var size = 0;
    size += this.version.getSize();
    size += this.privateKey.getSize();
    size += this.namedCurveOID.getSize();
    size += this.publicKey.getSize();
    return size;
  }

  writeBody(bw) {
    this.version.write(bw);
    this.privateKey.write(bw);
    this.namedCurveOID.write(bw);
    this.publicKey.write(bw);
    return bw;
  }

  readBody(br) {
    this.version.read(br);
    this.privateKey.read(br);
    this.namedCurveOID.read(br);
    this.publicKey.read(br);
    return this;
  }

  clean() {
    return this.version.clean() && this.privateKey.clean() && this.namedCurveOID.clean() && this.publicKey.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'EC PRIVATE KEY');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'EC PRIVATE KEY');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      version: this.version,
      privateKey: this.privateKey,
      namedCurveOID: this.namedCurveOID,
      publicKey: this.publicKey
    };
  }

}
/**
 * ECDSA Signature
 */
// ECDSA-Signature ::= CHOICE {
//   two-ints-plus ECDSA-Sig-Value,
//   point-int [0] ECDSA-Full-R,
//   ... -- Future representations may be added
// }
// ECDSA-Full-R ::= SEQUENCE {
//   r ECPoint,
//   s INTEGER
// }
// ECPoint ::= OCTET STRING
// ECDSA-Sig-Value ::= SEQUENCE {
//   r INTEGER,
//   s INTEGER,
//   a INTEGER OPTIONAL,
//   y CHOICE { b BOOLEAN, f FieldElement } OPTIONAL
// }


class ECDSASignature extends asn1.Sequence {
  constructor(r, s) {
    super();
    this.r = new asn1.Unsigned(r);
    this.s = new asn1.Unsigned(s);
  }

  getBodySize() {
    var size = 0;
    size += this.r.getSize();
    size += this.s.getSize();
    return size;
  }

  writeBody(bw) {
    this.r.write(bw);
    this.s.write(bw);
    return bw;
  }

  readBody(br) {
    this.r.read(br);
    this.s.read(br);
    return this;
  }

  clean() {
    return this.r.clean() && this.s.clean();
  }

  toPEM() {
    return pem.toPEM(this.encode(), 'EC SIGNATURE');
  }

  fromPEM(str) {
    var data = pem.fromPEM(str, 'EC SIGNATURE');
    return this.decode(data);
  }

  format() {
    return {
      type: this.constructor.name,
      r: this.r,
      s: this.s
    };
  }

}
/*
 * Expose
 */


var ECPrivateKey_1 = ECPrivateKey;
var ECDSASignature_1 = ECDSASignature;
var sec1 = {
  ECPrivateKey: ECPrivateKey_1,
  ECDSASignature: ECDSASignature_1
};

var asn1$1 = asn1;
var base16$1 = base16;
var base32$1 = base32;
var base58$1 = base58Browser;
var base64$1 = base64;
var bech32$1 = bech32Browser;
var cash32$1 = cash32Browser;
var lines$1 = lines_1;
var openssl$1 = openssl;
var pem$1 = pem;
var pemcrypt$1 = pemcrypt;
var pkcs1$1 = pkcs1;
var pkcs5$1 = pkcs5_1;
var pkcs8$1 = pkcs8;
var rfc3279$1 = rfc3279;
var sec1$1 = sec1;
var util$2 = util$1;
var x509$1 = x509;
var encoding$1 = {
  asn1: asn1$1,
  base16: base16$1,
  base32: base32$1,
  base58: base58$1,
  base64: base64$1,
  bech32: bech32$1,
  cash32: cash32$1,
  lines: lines$1,
  openssl: openssl$1,
  pem: pem$1,
  pemcrypt: pemcrypt$1,
  pkcs1: pkcs1$1,
  pkcs5: pkcs5$1,
  pkcs8: pkcs8$1,
  rfc3279: rfc3279$1,
  sec1: sec1$1,
  util: util$2,
  x509: x509$1
};

/*
 * Constants
 */


var FINALIZED$7 = -1;
var PADDING$5 = Buffer.alloc(32, 0x00);
var DESC$3 = Buffer.alloc(32, 0x00);
var C = Buffer.from([0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff]);
var S_CRYPTOPRO = [Buffer.from([10, 4, 5, 6, 8, 1, 3, 7, 13, 12, 14, 0, 9, 2, 11, 15]), Buffer.from([5, 15, 4, 0, 2, 13, 11, 9, 1, 7, 6, 3, 12, 14, 10, 8]), Buffer.from([7, 15, 12, 14, 9, 4, 1, 0, 3, 11, 5, 2, 6, 10, 8, 13]), Buffer.from([4, 10, 7, 12, 0, 15, 2, 8, 14, 1, 6, 5, 13, 11, 9, 3]), Buffer.from([7, 6, 4, 11, 9, 12, 2, 10, 1, 8, 0, 14, 15, 13, 3, 5]), Buffer.from([7, 6, 2, 4, 13, 9, 15, 0, 10, 1, 5, 11, 8, 14, 12, 3]), Buffer.from([13, 14, 4, 1, 7, 0, 5, 10, 3, 12, 8, 15, 6, 2, 9, 11]), Buffer.from([1, 3, 10, 9, 5, 11, 4, 15, 8, 6, 7, 14, 13, 0, 2, 12])];
var S_TEST = [Buffer.from([4, 10, 9, 2, 13, 8, 0, 14, 6, 11, 1, 12, 7, 15, 5, 3]), Buffer.from([14, 11, 4, 12, 6, 13, 15, 10, 2, 3, 8, 1, 0, 7, 5, 9]), Buffer.from([5, 8, 1, 13, 10, 3, 4, 2, 14, 15, 12, 7, 6, 0, 9, 11]), Buffer.from([7, 13, 10, 1, 0, 8, 9, 15, 14, 4, 6, 12, 11, 2, 5, 3]), Buffer.from([6, 12, 7, 1, 5, 15, 13, 8, 4, 10, 9, 14, 0, 3, 11, 2]), Buffer.from([4, 11, 10, 0, 7, 2, 1, 13, 3, 6, 8, 5, 9, 12, 15, 14]), Buffer.from([13, 11, 4, 1, 3, 15, 5, 9, 0, 10, 14, 7, 6, 8, 2, 12]), Buffer.from([1, 15, 13, 0, 5, 7, 10, 4, 9, 2, 3, 14, 6, 11, 8, 12])];
var S_S2015 = [Buffer.from([12, 4, 6, 2, 10, 5, 11, 9, 14, 8, 13, 7, 0, 3, 15, 1]), Buffer.from([6, 8, 2, 3, 9, 10, 5, 12, 1, 14, 4, 7, 11, 13, 0, 15]), Buffer.from([11, 3, 5, 8, 2, 15, 10, 13, 14, 1, 7, 4, 12, 9, 6, 0]), Buffer.from([12, 8, 2, 1, 13, 4, 15, 6, 7, 0, 10, 5, 3, 14, 9, 11]), Buffer.from([7, 15, 5, 10, 8, 1, 6, 13, 0, 9, 3, 14, 11, 4, 2, 12]), Buffer.from([5, 13, 15, 6, 9, 2, 12, 10, 11, 7, 8, 1, 4, 3, 14, 0]), Buffer.from([8, 14, 2, 5, 6, 9, 1, 12, 15, 4, 11, 0, 13, 10, 3, 7]), Buffer.from([1, 7, 14, 13, 0, 5, 8, 3, 4, 15, 10, 6, 9, 12, 11, 2])];
/**
 * GOST94
 */

class GOST94 {
  constructor() {
    this.S = S_CRYPTOPRO;
    this.state = Buffer.allocUnsafe(32);
    this.sigma = Buffer.allocUnsafe(32);
    this.block = Buffer.allocUnsafe(32);
    this.size = FINALIZED$7;
  }

  init(box) {
    if (box == null) box = S_CRYPTOPRO;
    assert_1(Array.isArray(box) && box.length === 8);
    this.S = box;
    this.state.fill(0x00);
    this.sigma.fill(0x00);
    this.size = 0;
    return this;
  }

  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }

  final() {
    return this._final(Buffer.allocUnsafe(32));
  }

  _update(data, len) {
    assert_1(this.size !== FINALIZED$7, 'Context already finalized.');
    var pos = this.size & 31;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 32 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 32) return;
      this.transform(this.block, 0);
    }

    while (len >= 32) {
      this.transform(data, off);
      off += 32;
      len -= 32;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }

  _final(out) {
    assert_1(this.size !== FINALIZED$7, 'Context already finalized.');
    var bits = this.size * 8;
    var pos = this.size & 31;
    if (pos !== 0) this._update(PADDING$5, 32 - pos);
    var hi = bits * (1 / 0x100000000) >>> 0;
    var lo = bits >>> 0;
    writeU32$e(DESC$3, lo, 0);
    writeU32$e(DESC$3, hi, 4);
    this.F(DESC$3);
    this.F(this.sigma);
    this.state.copy(out, 0);
    this.state.fill(0x00);
    this.sigma.fill(0x00);
    this.block.fill(0x00);
    DESC$3.fill(0x00, 0, 8);
    this.size = FINALIZED$7;
    return out;
  }

  transform(chunk, pos) {
    var m = chunk.slice(pos, pos + 32);
    this.F(m);
    this.sum(m);
  }

  shuffle(m, s) {
    var res = Buffer.allocUnsafe(32);
    s.copy(res, 0);

    for (var i = 0; i < 12; i++) {
      psi(res);
    }

    XM(res, m);
    psi(res);
    XM(this.state, res);

    for (var _i = 0; _i < 61; _i++) {
      psi(this.state);
    }
  }

  F(m) {
    var s = Buffer.allocUnsafe(32);
    this.state.copy(s, 0);
    var k, u, v;
    k = P$1(X$1(this.state, m));
    encrypt$2(s, 0, k, this.S);
    u = A(this.state);
    v = A(A(m));
    k = P$1(X$1(u, v));
    encrypt$2(s, 8, k, this.S);
    u = A(u);
    XM(u, C);
    v = A(A(v));
    k = P$1(X$1(u, v));
    encrypt$2(s, 16, k, this.S);
    u = A(u);
    v = A(A(v));
    k = P$1(X$1(u, v));
    encrypt$2(s, 24, k, this.S);
    this.shuffle(m, s);
  }

  sum(m) {
    var c = 0;

    for (var i = 0; i < 32; i++) {
      c += this.sigma[i] + m[i];
      this.sigma[i] = c;
      c >>>= 8;
    }
  }

  static hash() {
    return new GOST94();
  }

  static hmac(box) {
    return new hmac(GOST94, 32, [box]);
  }

  static digest(data, box) {
    return GOST94.ctx.init(box).update(data).final();
  }

  static root(left, right, box) {
    assert_1(Buffer.isBuffer(left) && left.length === 32);
    assert_1(Buffer.isBuffer(right) && right.length === 32);
    return GOST94.ctx.init(box).update(left).update(right).final();
  }

  static multi(x, y, z, box) {
    var ctx = GOST94.ctx;
    ctx.init(box);
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key, box) {
    return GOST94.hmac(box).init(key).update(data).final();
  }

}
/*
 * Static
 */


GOST94.native = 0;
GOST94.id = 'GOST94';
GOST94.size = 32;
GOST94.bits = 256;
GOST94.blockSize = 32;
GOST94.zero = Buffer.alloc(32, 0x00);
GOST94.ctx = new GOST94();
GOST94.CRYPTOPRO = S_CRYPTOPRO;
GOST94.TEST = S_TEST;
GOST94.S2015 = S_S2015;
/*
 * Helpers
 */

function sbox(a, S) {
  var v = 0;

  for (var i = 0; i < 8; i++) {
    var shft = 4 * i;
    var k = (a & 15 << shft) >>> shft;
    v += S[i][k] << shft;
  }

  return v >>> 0;
}

function G$2(a, k, S) {
  return rotl32$3(sbox(a + k >>> 0, S), 11);
}

function encrypt$2(msg, pos, key, sbox) {
  var k = new Uint32Array(8);
  var a = readU32$g(msg, pos + 0);
  var b = readU32$g(msg, pos + 4);

  for (var i = 0; i < 8; i++) {
    k[i] = readU32$g(key, i * 4);
  }

  for (var x = 0; x < 3; x++) {
    for (var _i2 = 0; _i2 < 8; _i2++) {
      var t = b ^ G$2(a, k[_i2], sbox);
      b = a;
      a = t;
    }
  }

  for (var _i3 = 7; _i3 >= 0; _i3--) {
    var _t = b ^ G$2(a, k[_i3], sbox);

    b = a;
    a = _t;
  }

  writeU32$e(msg, b, pos + 0);
  writeU32$e(msg, a, pos + 4);
}

function X$1(a, b) {
  var out = Buffer.allocUnsafe(32);

  for (var i = 0; i < 32; i++) {
    out[i] = a[i] ^ b[i];
  }

  return out;
}

function XM(a, b) {
  for (var i = 0; i < 32; i++) {
    a[i] ^= b[i];
  }
}

function A(x) {
  var out = Buffer.allocUnsafe(32);
  x.copy(out, 0, 8, 32);

  for (var i = 0; i < 8; i++) {
    out[24 + i] = x[i] ^ x[i + 8];
  }

  return out;
}

function P$1(y) {
  var out = Buffer.allocUnsafe(32);

  for (var i = 0; i < 4; i++) {
    for (var k = 0; k < 8; k++) {
      out[i + 4 * k] = y[8 * i + k];
    }
  }

  return out;
}

function psi(block) {
  var out = Buffer.allocUnsafe(32);
  block.copy(out, 0, 2, 32);
  block.copy(out, 30, 0, 2);
  out[30] ^= block[2];
  out[31] ^= block[3];
  out[30] ^= block[4];
  out[31] ^= block[5];
  out[30] ^= block[6];
  out[31] ^= block[7];
  out[30] ^= block[24];
  out[31] ^= block[25];
  out[30] ^= block[30];
  out[31] ^= block[31];
  out.copy(block, 0);
}

function rotl32$3(w, b) {
  return w << b | w >>> 32 - b;
}

function readU32$g(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32$e(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var gost94 = GOST94;

/*
 * Constants
 */


var FINALIZED$8 = -1;
var DESC$4 = Buffer.alloc(8, 0x00);
var PADDING$6 = Buffer.alloc(64, 0x00);
PADDING$6[0] = 0x80;
var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
/**
 * RIPEMD160
 */

class RIPEMD160 {
  /**
   * Create a RIPEMD160 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(5);
    this.msg = new Uint32Array(16);
    this.block = Buffer.allocUnsafe(64);
    this.size = FINALIZED$8;
  }
  /**
   * Initialize RIPEMD160 context.
   * @returns {RIPEMD160}
   */


  init() {
    this.state[0] = 0x67452301;
    this.state[1] = 0xefcdab89;
    this.state[2] = 0x98badcfe;
    this.state[3] = 0x10325476;
    this.state[4] = 0xc3d2e1f0;
    this.size = 0;
    return this;
  }
  /**
   * Update RIPEMD160 context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize RIPEMD160 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(20));
  }
  /**
   * Update RIPEMD160 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$8, 'Context already finalized.');
    var pos = this.size & 0x3f;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 64 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 64) return;
      this.transform(this.block, 0);
    }

    while (len >= 64) {
      this.transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize RIPEMD160 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$8, 'Context already finalized.');
    var pos = this.size % 64;
    var len = this.size * 8;
    writeU32$f(DESC$4, len, 0);
    writeU32$f(DESC$4, len * (1 / 0x100000000), 4);

    this._update(PADDING$6, 1 + (119 - pos) % 64);

    this._update(DESC$4, 8);

    for (var i = 0; i < 5; i++) {
      writeU32$f(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 16; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$8;
    return out;
  }
  /**
   * Transform RIPEMD160 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var W = this.msg;
    var A = this.state[0];
    var B = this.state[1];
    var C = this.state[2];
    var D = this.state[3];
    var E = this.state[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;

    for (var i = 0; i < 16; i++) {
      W[i] = readU32$h(chunk, pos + i * 4);
    }

    for (var j = 0; j < 80; j++) {
      var a = A + f(j, B, C, D) + W[r[j]] + K$3(j);
      var b = rotl32$4(a, s[j]);

      var _T = b + E;

      A = E;
      E = D;
      D = rotl32$4(C, 10);
      C = B;
      B = _T;
      a = Ah + f(79 - j, Bh, Ch, Dh) + W[rh[j]] + Kh(j);
      b = rotl32$4(a, sh[j]);
      _T = b + Eh;
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32$4(Ch, 10);
      Ch = Bh;
      Bh = _T;
    }

    var T = this.state[1] + C + Dh;
    this.state[1] = this.state[2] + D + Eh;
    this.state[2] = this.state[3] + E + Ah;
    this.state[3] = this.state[4] + A + Bh;
    this.state[4] = this.state[0] + B + Ch;
    this.state[0] = T;
  }

  static hash() {
    return new RIPEMD160();
  }

  static hmac() {
    return new hmac(RIPEMD160, 64);
  }

  static digest(data) {
    return RIPEMD160.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 20);
    assert_1(Buffer.isBuffer(right) && right.length === 20);
    return RIPEMD160.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = RIPEMD160.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return RIPEMD160.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


RIPEMD160.native = 0;
RIPEMD160.id = 'RIPEMD160';
RIPEMD160.size = 20;
RIPEMD160.bits = 160;
RIPEMD160.blockSize = 64;
RIPEMD160.zero = Buffer.alloc(20, 0x00);
RIPEMD160.ctx = new RIPEMD160();
/*
 * Helpers
 */

function rotl32$4(w, b) {
  return w << b | w >>> 32 - b;
}

function f(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;
  if (j <= 31) return x & y | ~x & z;
  if (j <= 47) return (x | ~y) ^ z;
  if (j <= 63) return x & z | y & ~z;
  return x ^ (y | ~z);
}

function K$3(j) {
  if (j <= 15) return 0x00000000;
  if (j <= 31) return 0x5a827999;
  if (j <= 47) return 0x6ed9eba1;
  if (j <= 63) return 0x8f1bbcdc;
  return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15) return 0x50a28be6;
  if (j <= 31) return 0x5c4dd124;
  if (j <= 47) return 0x6d703ef3;
  if (j <= 63) return 0x7a6d76e9;
  return 0x00000000;
}

function readU32$h(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32$f(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var ripemd160 = RIPEMD160;

var rmd = new ripemd160();
/**
 * Hash160
 */

class Hash160 {
  constructor() {
    this.ctx = new sha256();
  }

  init() {
    this.ctx.init();
    return this;
  }

  update(data) {
    this.ctx.update(data);
    return this;
  }

  final() {
    var out = Buffer.allocUnsafe(32);

    this.ctx._final(out);

    rmd.init();
    rmd.update(out);

    rmd._final(out);

    return out.slice(0, 20);
  }

  static hash() {
    return new Hash160();
  }

  static hmac() {
    return new hmac(Hash160, 64);
  }

  static digest(data) {
    return Hash160.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 20);
    assert_1(Buffer.isBuffer(right) && right.length === 20);
    return Hash160.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = Hash160.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return Hash160.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


Hash160.native = 0;
Hash160.id = 'HASH160';
Hash160.size = 20;
Hash160.bits = 160;
Hash160.blockSize = 64;
Hash160.zero = Buffer.alloc(20, 0x00);
Hash160.ctx = new Hash160();
/*
 * Expose
 */

var hash160 = Hash160;

var hash160Browser = hash160;

/**
 * Hash256
 */


class Hash256 {
  constructor() {
    this.ctx = new sha256();
  }

  init() {
    this.ctx.init();
    return this;
  }

  update(data) {
    this.ctx.update(data);
    return this;
  }

  final() {
    var out = Buffer.allocUnsafe(32);

    this.ctx._final(out);

    this.ctx.init();
    this.ctx.update(out);

    this.ctx._final(out);

    return out;
  }

  static hash() {
    return new Hash256();
  }

  static hmac() {
    return new hmac(Hash256, 64);
  }

  static digest(data) {
    return Hash256.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 32);
    assert_1(Buffer.isBuffer(right) && right.length === 32);
    return Hash256.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = Hash256.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return Hash256.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


Hash256.native = 0;
Hash256.id = 'HASH256';
Hash256.size = 32;
Hash256.bits = 256;
Hash256.blockSize = 64;
Hash256.zero = Buffer.alloc(32, 0x00);
Hash256.ctx = new Hash256();
/*
 * Expose
 */

var hash256$1 = Hash256;

var hash256Browser = hash256$1;

/*
 * Constants
 */


var RESEED_INTERVAL$2 = 0x1000000000000;
var ONE$1 = Buffer.from([0x01]);
var TWO = Buffer.from([0x02]);
var THREE = Buffer.from([0x03]);
/**
 * HashDRBG
 */

class HashDRBG {
  constructor(hash, entropy, nonce, pers) {
    assert_1(hash && typeof hash.id === 'string');
    this.hash = hash;
    this.minEntropy = hash.id === 'SHA1' ? 10 : 24;
    this.seedLen = hash.size <= 32 ? 55 : 111;
    this.V = Buffer.allocUnsafe(this.seedLen);
    this.C = Buffer.allocUnsafe(this.seedLen);
    this.len = Buffer.allocUnsafe(8);
    this.rounds = 0;
    if (entropy) this.init(entropy, nonce, pers);
  }

  init(entropy) {
    var nonce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var pers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    assert_1(Buffer.isBuffer(entropy));
    assert_1(!nonce || Buffer.isBuffer(nonce));
    assert_1(!pers || Buffer.isBuffer(pers));
    var seed = concat$4(entropy, nonce, pers);
    if (seed.length < this.minEntropy) throw new Error('Not enough entropy.');
    this.V = this.derive(seed, this.seedLen, null);
    this.C = this.derive(this.V, this.seedLen, 0x00);
    this.rounds = 1;
    return this;
  }

  reseed(entropy) {
    var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(Buffer.isBuffer(entropy));
    assert_1(!add || Buffer.isBuffer(add));
    if (this.rounds === 0) throw new Error('DRBG not initialized.');
    var seed = concat$4(this.V, entropy, add);
    if (seed.length < this.minEntropy) throw new Error('Not enough entropy.');
    this.V = this.derive(seed, this.seedLen, 0x01);
    this.C = this.derive(this.V, this.seedLen, 0x00);
    this.rounds = 1;
    return this;
  }

  generate(len) {
    var add = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    assert_1(len >>> 0 === len);
    assert_1(!add || Buffer.isBuffer(add));
    if (this.rounds === 0) throw new Error('DRBG not initialized.');
    if (this.rounds > RESEED_INTERVAL$2) throw new Error('Reseed is required.');
    if (add && add.length !== 0) this.sum(this.V, this.hash.multi(TWO, this.V, add));
    var data = Buffer.from(this.V);
    var blocks = Math.ceil(len / this.hash.size);
    var out = Buffer.allocUnsafe(blocks * this.hash.size);

    for (var i = 0; i < blocks; i++) {
      this.hash.digest(data).copy(out, i * this.hash.size);
      this.sum(data, ONE$1);
    }

    this.update();
    this.rounds += 1;
    return out.slice(0, len);
  }

  randomBytes(size) {
    return this.generate(size);
  }
  /*
   * Helpers
   */


  update() {
    var H = this.hash.multi(THREE, this.V);
    var hi = this.rounds / 0x100000000 >>> 0;
    var lo = this.rounds >>> 0;
    this.len[0] = hi >>> 24;
    this.len[1] = hi >>> 16;
    this.len[2] = hi >>> 8;
    this.len[3] = hi;
    this.len[4] = lo >>> 24;
    this.len[5] = lo >>> 16;
    this.len[6] = lo >>> 8;
    this.len[7] = lo;
    this.sum(this.V, H, this.C, this.len);
    return this;
  }

  derive(input, len) {
    var prepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    assert_1(Buffer.isBuffer(input));
    assert_1(len >>> 0 === len);
    var p = prepend != null ? 1 : 0;
    var data = Buffer.allocUnsafe(5 + p + input.length);
    data[0] = 0x01;
    data[1] = len >>> 21;
    data[2] = len >>> 13;
    data[3] = len >>> 5;
    data[4] = (len & 0x1f) << 3;
    if (p) data[5] = prepend;
    input.copy(data, 5 + p);
    var blocks = Math.ceil(len / this.hash.size);
    var out = Buffer.allocUnsafe(blocks * this.hash.size);

    for (var i = 0; i < blocks; i++) {
      this.hash.digest(data).copy(out, i * this.hash.size);
      data[0] += 1;
    }

    return out.slice(0, len);
  }

  sum(dst) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (var buf of args) {
      var i = buf.length - 1;
      var j = dst.length - 1;
      var carry = 0;

      while (i >= 0) {
        carry += buf[i] + dst[j];
        dst[j] = carry & 0xff;
        carry >>>= 8;
        i -= 1;
        j -= 1;
      }

      while (carry > 0 && j >= 0) {
        carry += dst[j];
        dst[j] = carry & 0xff;
        carry >>>= 8;
        j -= 1;
      }
    }

    return dst;
  }

}
/*
 * Static
 */


HashDRBG.native = 0;
/*
 * Helpers
 */

function concat$4(a) {
  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (!b && !c) return a;
  var s = a.length;
  var p = 0;
  if (b) s += b.length;
  if (c) s += c.length;
  var d = Buffer.allocUnsafe(s);
  p += a.copy(d, p);
  if (b) p += b.copy(d, p);
  if (c) c.copy(d, p);
  return d;
}
/*
 * Expose
 */


var hashDrbg = HashDRBG;

/**
 * HKDF
 */


class HKDF {
  constructor(hash, ikm, salt, info) {
    assert_1(hash && typeof hash.id === 'string');
    this.hash = hash;
    this.size = hash.size;
    this.prk = null;
    this.state = null;
    this.slab = null;
    this.save = 0;
    if (ikm || salt || info) this.init(ikm, salt, info);
  }

  init(ikm, salt, info) {
    if (ikm == null) ikm = Buffer.alloc(0);
    if (salt == null) salt = Buffer.alloc(this.size, 0x00);
    this.prk = this.hash.mac(ikm, salt);
    this.reset(info);
    return this;
  }

  set(prk, info) {
    assert_1(Buffer.isBuffer(prk));
    assert_1(prk.length === this.size);
    this.prk = prk;
    this.reset(info);
    return this;
  }

  reset(info) {
    if (info == null) info = Buffer.alloc(0);
    assert_1(Buffer.isBuffer(info)); // state = prev || info || counter

    var state = Buffer.allocUnsafe(this.size + info.length + 1);
    state.fill(0x00, 0, this.size);
    info.copy(state, this.size);
    state[state.length - 1] = 0;
    this.state = state;
    this.slab = Buffer.allocUnsafe(this.size);
    this.save = 0;
    return this;
  }

  generate(len) {
    assert_1(len >>> 0 === len);
    if (!this.prk || !this.state || !this.slab) throw new Error('HKDF is not initialized.');
    var left = (255 - this.state[this.state.length - 1]) * this.size;
    if (len > this.save + left) throw new Error('Too many bytes requested.');
    var blocks = Math.ceil(Math.max(0, len - this.save) / this.size);
    var okm = Buffer.allocUnsafe(this.save + blocks * this.size);
    this.slab.copy(okm, 0, 0, this.save);

    for (var i = 0; i < blocks; i++) {
      var state = this.state;
      if (state[state.length - 1] === 0) state = state.slice(this.size);
      assert_1(state[state.length - 1] !== 255);
      state[state.length - 1] += 1;
      var mac = this.hash.mac(state, this.prk);
      mac.copy(this.state, 0);
      mac.copy(okm, this.save + i * this.size);
    }

    this.save = okm.copy(this.slab, 0, len);
    return okm.slice(0, len);
  }

  randomBytes(size) {
    return this.generate(size);
  }

  static extract(hash, ikm, salt) {
    assert_1(hash && typeof hash.id === 'string');
    if (ikm == null) ikm = Buffer.alloc(0);
    if (salt == null) salt = Buffer.alloc(hash.size, 0x00);
    return hash.mac(ikm, salt);
  }

  static expand(hash, prk, info, len) {
    var hkdf = new HKDF(hash);
    return hkdf.set(prk, info).generate(len);
  }

  static derive(hash, ikm, salt, info, len) {
    var hkdf = new HKDF(hash);
    return hkdf.init(ikm, salt, info).generate(len);
  }

}
/*
 * Static
 */


HKDF.native = 0;
/*
 * Expose
 */

var hkdf = HKDF;

/**
 * Keccak224
 */


class Keccak224 extends keccakBrowser {
  /**
   * Create a Keccak224 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(224);
  }

  final() {
    return super.final(0x01, null);
  }

  static hash() {
    return new Keccak224();
  }

  static hmac() {
    return super.hmac(224, 0x01, null);
  }

  static digest(data) {
    return super.digest(data, 224, 0x01, null);
  }

  static root(left, right) {
    return super.root(left, right, 224, 0x01, null);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 224, 0x01, null);
  }

  static mac(data, key) {
    return super.mac(data, key, 224, 0x01, null);
  }

}

Keccak224.native = keccakBrowser.native;
Keccak224.id = 'KECCAK224';
Keccak224.size = 28;
Keccak224.bits = 224;
Keccak224.blockSize = 144;
Keccak224.zero = Buffer.alloc(28, 0x00);
Keccak224.ctx = new Keccak224();
/*
 * Expose
 */

var keccak224 = Keccak224;

/**
 * Keccak256
 */


class Keccak256 extends keccakBrowser {
  /**
   * Create a Keccak256 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(256);
  }

  final() {
    return super.final(0x01, null);
  }

  static hash() {
    return new Keccak256();
  }

  static hmac() {
    return super.hmac(256, 0x01, null);
  }

  static digest(data) {
    return super.digest(data, 256, 0x01, null);
  }

  static root(left, right) {
    return super.root(left, right, 256, 0x01, null);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 256, 0x01, null);
  }

  static mac(data, key) {
    return super.mac(data, key, 256, 0x01, null);
  }

}

Keccak256.native = keccakBrowser.native;
Keccak256.id = 'KECCAK256';
Keccak256.size = 32;
Keccak256.bits = 256;
Keccak256.blockSize = 136;
Keccak256.zero = Buffer.alloc(32, 0x00);
Keccak256.ctx = new Keccak256();
/*
 * Expose
 */

var keccak256 = Keccak256;

/**
 * Keccak384
 */


class Keccak384 extends keccakBrowser {
  /**
   * Create a Keccak384 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(384);
  }

  final() {
    return super.final(0x01, null);
  }

  static hash() {
    return new Keccak384();
  }

  static hmac() {
    return super.hmac(384, 0x01, null);
  }

  static digest(data) {
    return super.digest(data, 384, 0x01, null);
  }

  static root(left, right) {
    return super.root(left, right, 384, 0x01, null);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 384, 0x01, null);
  }

  static mac(data, key) {
    return super.mac(data, key, 384, 0x01, null);
  }

}

Keccak384.native = keccakBrowser.native;
Keccak384.id = 'KECCAK384';
Keccak384.size = 48;
Keccak384.bits = 384;
Keccak384.blockSize = 104;
Keccak384.zero = Buffer.alloc(48, 0x00);
Keccak384.ctx = new Keccak384();
/*
 * Expose
 */

var keccak384 = Keccak384;

/**
 * Keccak512
 */


class Keccak512 extends keccakBrowser {
  /**
   * Create a Keccak512 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(512);
  }

  final() {
    return super.final(0x01, null);
  }

  static hash() {
    return new Keccak512();
  }

  static hmac() {
    return super.hmac(512, 0x01, null);
  }

  static digest(data) {
    return super.digest(data, 512, 0x01, null);
  }

  static root(left, right) {
    return super.root(left, right, 512, 0x01, null);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 512, 0x01, null);
  }

  static mac(data, key) {
    return super.mac(data, key, 512, 0x01, null);
  }

}

Keccak512.native = keccakBrowser.native;
Keccak512.id = 'KECCAK512';
Keccak512.size = 32;
Keccak512.bits = 512;
Keccak512.blockSize = 72;
Keccak512.zero = Buffer.alloc(32, 0x00);
Keccak512.ctx = new Keccak512();
/*
 * Expose
 */

var keccak512 = Keccak512;

/*
 * Constants
 */


var PREFIX = Buffer.from('KMAC', 'binary');
var EMPTY$7 = Buffer.alloc(0);
/*
 * KMAC
 */

class KMAC extends cshake {
  constructor() {
    super();
  }

  init(bits, key, pers) {
    if (key == null) key = EMPTY$7;
    assert_1(Buffer.isBuffer(key));
    super.init(bits, PREFIX, pers);
    super.bytePad([key], this.rate / 8);
    return this;
  }

  final(len) {
    if (len == null) {
      var size = this.rate / 8;
      len = 100 - size / 2;
    }

    super.rightEncode(len * 8);
    return super.final(len);
  }

  static hash() {
    return new KMAC();
  }

  static hmac() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    var key = arguments.length > 1 ? arguments[1] : undefined;
    var pers = arguments.length > 2 ? arguments[2] : undefined;
    var len = arguments.length > 3 ? arguments[3] : undefined;
    assert_1(bits >>> 0 === bits);
    assert_1(bits === 128 || bits === 256);
    var bs = (1600 - bits * 2) / 8;
    return new hmac(KMAC, bs, [bits, key, pers], [len]);
  }

  static digest(data) {
    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
    var key = arguments.length > 2 ? arguments[2] : undefined;
    var pers = arguments.length > 3 ? arguments[3] : undefined;
    var len = arguments.length > 4 ? arguments[4] : undefined;
    return KMAC.ctx.init(bits, key, pers).update(data).final(len);
  }

  static root(left, right) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var key = arguments.length > 3 ? arguments[3] : undefined;
    var pers = arguments.length > 4 ? arguments[4] : undefined;
    var len = arguments.length > 5 ? arguments[5] : undefined;
    if (len == null) len = 0;

    if (len === 0) {
      assert_1(bits >>> 0 === bits);
      len = bits >>> 3;
    }

    assert_1(len >>> 0 === len);
    assert_1(Buffer.isBuffer(left) && left.length === len);
    assert_1(Buffer.isBuffer(right) && right.length === len);
    var ctx = KMAC.ctx;
    ctx.init(bits, key, pers);
    ctx.update(left);
    ctx.update(right);
    return ctx.final(len);
  }

  static multi(x, y, z) {
    var bits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;
    var key = arguments.length > 4 ? arguments[4] : undefined;
    var pers = arguments.length > 5 ? arguments[5] : undefined;
    var len = arguments.length > 6 ? arguments[6] : undefined;
    var ctx = KMAC.ctx;
    ctx.init(bits, key, pers);
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final(len);
  }

  static mac(data, salt) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    var key = arguments.length > 3 ? arguments[3] : undefined;
    var pers = arguments.length > 4 ? arguments[4] : undefined;
    var len = arguments.length > 5 ? arguments[5] : undefined;
    return KMAC.hmac(bits, key, pers, len).init(salt).update(data).final();
  }

}
/*
 * Static
 */


KMAC.native = cshake.native;
KMAC.id = 'KMAC256';
KMAC.size = 32;
KMAC.bits = 256;
KMAC.blockSize = 136;
KMAC.zero = Buffer.alloc(32, 0x00);
KMAC.ctx = new KMAC();
/*
 * Expose
 */

var kmac = KMAC;

/**
 * KMAC128
 */


class KMAC128 extends kmac {
  /**
   * Create a KMAC128 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  init(key, pers) {
    return super.init(128, key, pers);
  }

  static hash() {
    return new KMAC128();
  }

  static hmac(key, pers, len) {
    return super.hmac(128, key, pers, len);
  }

  static digest(data, key, pers, len) {
    return super.digest(data, 128, key, pers, len);
  }

  static root(left, right, key, pers, len) {
    return super.root(left, right, 128, key, pers, len);
  }

  static multi(x, y, z, key, pers, len) {
    return super.multi(x, y, z, 128, key, pers, len);
  }

  static mac(data, salt, key, pers, len) {
    return super.mac(data, salt, 128, key, pers, len);
  }

}

KMAC128.native = kmac.native;
KMAC128.id = 'KMAC128';
KMAC128.size = 16;
KMAC128.bits = 128;
KMAC128.blockSize = 168;
KMAC128.zero = Buffer.alloc(16, 0x00);
KMAC128.ctx = new KMAC128();
/*
 * Expose
 */

var kmac128 = KMAC128;

/**
 * KMAC256
 */


class KMAC256 extends kmac {
  /**
   * Create a KMAC256 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  init(key, pers) {
    return super.init(256, key, pers);
  }

  static hash() {
    return new KMAC256();
  }

  static hmac(key, pers, len) {
    return super.hmac(256, key, pers, len);
  }

  static digest(data, key, pers, len) {
    return super.digest(data, 256, key, pers, len);
  }

  static root(left, right, key, pers, len) {
    return super.root(left, right, 256, key, pers, len);
  }

  static multi(x, y, z, key, pers, len) {
    return super.multi(x, y, z, 256, key, pers, len);
  }

  static mac(data, salt, key, pers, len) {
    return super.mac(data, salt, 256, key, pers, len);
  }

}

KMAC256.native = kmac.native;
KMAC256.id = 'KMAC256';
KMAC256.size = 32;
KMAC256.bits = 256;
KMAC256.blockSize = 136;
KMAC256.zero = Buffer.alloc(32, 0x00);
KMAC256.ctx = new KMAC256();
/*
 * Expose
 */

var kmac256 = KMAC256;

/*
 * Constants
 */


var FINALIZED$9 = -1;
var S$3 = new Uint8Array([41, 46, 67, 201, 162, 216, 124, 1, 61, 54, 84, 161, 236, 240, 6, 19, 98, 167, 5, 243, 192, 199, 115, 140, 152, 147, 43, 217, 188, 76, 130, 202, 30, 155, 87, 60, 253, 212, 224, 22, 103, 66, 111, 24, 138, 23, 229, 18, 190, 78, 196, 214, 218, 158, 222, 73, 160, 251, 245, 142, 187, 47, 238, 122, 169, 104, 121, 145, 21, 178, 7, 63, 148, 194, 16, 137, 11, 34, 95, 33, 128, 127, 93, 154, 90, 144, 50, 39, 53, 62, 204, 231, 191, 247, 151, 3, 255, 25, 48, 179, 72, 165, 181, 209, 215, 94, 146, 42, 172, 86, 170, 198, 79, 184, 56, 210, 150, 164, 125, 182, 118, 252, 107, 226, 156, 116, 4, 241, 69, 157, 112, 89, 100, 113, 135, 32, 134, 91, 207, 101, 230, 45, 168, 2, 27, 96, 37, 173, 174, 176, 185, 246, 28, 70, 97, 105, 52, 64, 126, 15, 85, 71, 163, 35, 221, 81, 175, 58, 195, 92, 249, 206, 186, 197, 234, 38, 44, 83, 13, 110, 133, 40, 132, 9, 211, 223, 205, 244, 65, 129, 77, 82, 106, 220, 55, 200, 108, 193, 171, 250, 36, 225, 123, 8, 12, 189, 177, 74, 120, 136, 149, 139, 227, 99, 232, 109, 233, 203, 213, 254, 59, 0, 29, 57, 242, 239, 183, 14, 102, 88, 208, 228, 166, 119, 114, 248, 235, 117, 75, 10, 49, 68, 80, 180, 143, 237, 31, 26, 219, 153, 141, 51, 159, 17, 131, 20]);
/**
 * MD2
 */

class MD2 {
  /**
   * Create a MD2 context.
   * @constructor
   */
  constructor() {
    this.state = Buffer.allocUnsafe(48);
    this.checksum = Buffer.allocUnsafe(16);
    this.block = Buffer.allocUnsafe(16);
    this.size = FINALIZED$9;
  }
  /**
   * Initialize MD2 context.
   */


  init() {
    this.state.fill(0x00);
    this.checksum.fill(0x00);
    this.size = 0;
    return this;
  }
  /**
   * Update MD2 context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize MD2 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(16));
  }
  /**
   * Update MD2 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$9, 'Context already finalized.');
    var pos = this.size & 15;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 16 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 16) return;
      this.transform(this.block, 0);
    }

    while (len >= 16) {
      this.transform(data, off);
      off += 16;
      len -= 16;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize MD2 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$9, 'Context already finalized.');
    var pos = this.size & 15;
    var left = 16 - pos;
    var pad = Buffer.allocUnsafe(left);

    for (var i = 0; i < pad.length; i++) {
      pad[i] = left;
    }

    this._update(pad, left);

    this._update(this.checksum, 16);

    this.state.copy(out, 0, 0, 16);
    this.state.fill(0x00);
    this.checksum.fill(0x00);
    this.block.fill(0x00);
    this.size = FINALIZED$9;
    return out;
  }
  /**
   * Transform MD2 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    for (var j = 0; j < 16; j++) {
      this.state[16 + j] = chunk[pos + j];
      this.state[32 + j] = this.state[16 + j] ^ this.state[j];
    }

    var t = 0;

    for (var _j = 0; _j < 18; _j++) {
      for (var k = 0; k < 48; k++) {
        this.state[k] ^= S$3[t];
        t = this.state[k];
      }

      t = t + _j & 0xff;
    }

    var l = this.checksum[15];

    for (var _j2 = 0; _j2 < 16; _j2++) {
      this.checksum[_j2] ^= S$3[chunk[pos + _j2] ^ l];
      l = this.checksum[_j2];
    }
  }

  static hash() {
    return new MD2();
  }

  static hmac() {
    return new hmac(MD2, 16);
  }

  static digest(data) {
    return MD2.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 16);
    assert_1(Buffer.isBuffer(right) && right.length === 16);
    return MD2.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = MD2.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return MD2.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


MD2.native = 0;
MD2.id = 'MD2';
MD2.size = 16;
MD2.bits = 128;
MD2.blockSize = 16;
MD2.zero = Buffer.alloc(16, 0x00);
MD2.ctx = new MD2();
/*
 * Expose
 */

var md2 = MD2;

/*
 * Constants
 */


var FINALIZED$a = -1;
var DESC$5 = Buffer.alloc(8, 0x00);
var PADDING$7 = Buffer.alloc(64, 0x00);
PADDING$7[0] = 0x80;
var K$4 = new Uint32Array([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
/**
 * MD4
 */

class MD4 {
  /**
   * Create a MD4 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(4);
    this.msg = new Uint32Array(16);
    this.block = Buffer.allocUnsafe(64);
    this.size = FINALIZED$a;
  }
  /**
   * Initialize MD4 context.
   */


  init() {
    this.state[0] = K$4[0];
    this.state[1] = K$4[1];
    this.state[2] = K$4[2];
    this.state[3] = K$4[3];
    this.size = 0;
    return this;
  }
  /**
   * Update MD4 context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize MD4 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(16));
  }
  /**
   * Update MD4 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$a, 'Context already finalized.');
    var pos = this.size & 63;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 64 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 64) return;
      this.transform(this.block, 0);
    }

    while (len >= 64) {
      this.transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize MD4 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$a, 'Context already finalized.');
    var pos = this.size & 63;
    var len = this.size * 8;
    writeU32$g(DESC$5, len, 0);
    writeU32$g(DESC$5, len * (1 / 0x100000000), 4);

    this._update(PADDING$7, 1 + (119 - pos & 63));

    this._update(DESC$5, 8);

    for (var i = 0; i < 4; i++) {
      writeU32$g(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 16; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$a;
    return out;
  }
  /**
   * Transform MD4 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var W = this.msg;
    var a = this.state[0];
    var b = this.state[1];
    var c = this.state[2];
    var d = this.state[3];

    for (var i = 0; i < 16; i++) {
      W[i] = readU32$i(chunk, pos + i * 4);
    } // round 1


    for (var _i3 of [0, 4, 8, 12]) {
      a = op1(a, b, c, d, W[_i3], 3);
      d = op1(d, a, b, c, W[_i3 + 1], 7);
      c = op1(c, d, a, b, W[_i3 + 2], 11);
      b = op1(b, c, d, a, W[_i3 + 3], 19);
    } // round 2


    for (var _i4 = 0; _i4 < 4; _i4++) {
      a = op2(a, b, c, d, W[_i4], 3);
      d = op2(d, a, b, c, W[_i4 + 4], 5);
      c = op2(c, d, a, b, W[_i4 + 8], 9);
      b = op2(b, c, d, a, W[_i4 + 12], 13);
    } // round 3


    for (var _i5 of [0, 2, 1, 3]) {
      a = op3(a, b, c, d, W[_i5], 3);
      d = op3(d, a, b, c, W[_i5 + 8], 9);
      c = op3(c, d, a, b, W[_i5 + 4], 11);
      b = op3(b, c, d, a, W[_i5 + 12], 15);
    }

    this.state[0] += a;
    this.state[1] += b;
    this.state[2] += c;
    this.state[3] += d;
  }

  static hash() {
    return new MD4();
  }

  static hmac() {
    return new hmac(MD4, 64);
  }

  static digest(data) {
    return MD4.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 16);
    assert_1(Buffer.isBuffer(right) && right.length === 16);
    return MD4.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = MD4.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return MD4.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


MD4.native = 0;
MD4.id = 'MD4';
MD4.size = 16;
MD4.bits = 128;
MD4.blockSize = 64;
MD4.zero = Buffer.alloc(16, 0x00);
MD4.ctx = new MD4();
/*
 * Helpers
 */

function f$1(x, y, z) {
  return x & y | ~x & z;
}

function g(x, y, z) {
  return x & y | x & z | y & z;
}

function h$1(x, y, z) {
  return x ^ y ^ z;
}

function op1(a, b, c, d, k, s) {
  return rotl32$5(a + f$1(b, c, d) + k, s);
}

function op2(a, b, c, d, k, s) {
  return rotl32$5(a + g(b, c, d) + k + 0x5a827999, s);
}

function op3(a, b, c, d, k, s) {
  return rotl32$5(a + h$1(b, c, d) + k + 0x6ed9eba1, s);
}

function rotl32$5(w, b) {
  return w << b | w >>> 32 - b;
}

function readU32$i(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32$g(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var md4 = MD4;

var md4Browser = md4;

/*
 * Constants
 */


var FINALIZED$b = -1;
var DESC$6 = Buffer.alloc(8, 0x00);
var PADDING$8 = Buffer.alloc(64, 0x00);
PADDING$8[0] = 0x80;
var K$5 = new Uint32Array([0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6]);
/**
 * SHA1
 */

class SHA1 {
  /**
   * Create a SHA1 context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(5);
    this.msg = new Uint32Array(80);
    this.block = Buffer.allocUnsafe(64);
    this.size = FINALIZED$b;
  }
  /**
   * Initialize SHA1 context.
   * @returns {SHA1}
   */


  init() {
    this.state[0] = 0x67452301;
    this.state[1] = 0xefcdab89;
    this.state[2] = 0x98badcfe;
    this.state[3] = 0x10325476;
    this.state[4] = 0xc3d2e1f0;
    this.size = 0;
    return this;
  }
  /**
   * Update SHA1 context.
   * @param {Buffer} data
   * @returns {SHA1}
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize SHA1 context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(20));
  }
  /**
   * Update SHA1 context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$b, 'Context already finalized.');
    var pos = this.size & 0x3f;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 64 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 64) return;
      this.transform(this.block, 0);
    }

    while (len >= 64) {
      this.transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize SHA1 context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$b, 'Context already finalized.');
    var pos = this.size % 64;
    var len = this.size * 8;
    writeU32$h(DESC$6, len * (1 / 0x100000000), 0);
    writeU32$h(DESC$6, len, 4);

    this._update(PADDING$8, 1 + (119 - pos) % 64);

    this._update(DESC$6, 8);

    for (var i = 0; i < 5; i++) {
      writeU32$h(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 80; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$b;
    return out;
  }
  /**
   * Transform SHA1 block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var W = this.msg;
    var a = this.state[0];
    var b = this.state[1];
    var c = this.state[2];
    var d = this.state[3];
    var e = this.state[4];
    var i = 0;

    for (; i < 16; i++) {
      W[i] = readU32$j(chunk, pos + i * 4);
    }

    for (; i < 80; i++) {
      W[i] = rotl32$6(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    }

    for (i = 0; i < 80; i++) {
      var s = i / 20 | 0;
      var t = rotl32$6(a, 5);
      t += ft_1(s, b, c, d);
      t += e;
      t += W[i];
      t += K$5[s];
      e = d;
      d = c;
      c = rotl32$6(b, 30);
      b = a;
      a = t;
    }

    this.state[0] += a;
    this.state[1] += b;
    this.state[2] += c;
    this.state[3] += d;
    this.state[4] += e;
  }

  static hash() {
    return new SHA1();
  }

  static hmac() {
    return new hmac(SHA1, 64);
  }

  static digest(data) {
    return SHA1.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 20);
    assert_1(Buffer.isBuffer(right) && right.length === 20);
    return SHA1.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = SHA1.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return SHA1.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


SHA1.native = 0;
SHA1.id = 'SHA1';
SHA1.size = 20;
SHA1.bits = 160;
SHA1.blockSize = 64;
SHA1.zero = Buffer.alloc(20, 0x00);
SHA1.ctx = new SHA1();
/*
 * Helpers
 */

function rotl32$6(w, b) {
  return w << b | w >>> 32 - b;
}

function ft_1(s, x, y, z) {
  if (s === 0) return ch32(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32(x, y, z);
  return 0;
}

function ch32(x, y, z) {
  return x & y ^ ~x & z;
}

function maj32(x, y, z) {
  return x & y ^ x & z ^ y & z;
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function readU32$j(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$h(data, num, off) {
  data[off++] = num >>> 24;
  data[off++] = num >>> 16;
  data[off++] = num >>> 8;
  data[off++] = num;
  return off;
}
/*
 * Expose
 */


var sha1 = SHA1;

var sha1Browser = sha1;

/**
 * MD5SHA1
 */


class MD5SHA1 {
  constructor() {
    this.md5 = new md5Browser();
    this.sha1 = new sha1Browser();
  }

  init() {
    this.md5.init();
    this.sha1.init();
    return this;
  }

  update(data) {
    this.md5.update(data);
    this.sha1.update(data);
    return this;
  }

  final() {
    var md = Buffer.allocUnsafe(36);
    this.md5.final().copy(md, 0);
    this.sha1.final().copy(md, 16);
    return md;
  }

  static hash() {
    return new MD5SHA1();
  }

  static hmac() {
    return new hmac(MD5SHA1, 64);
  }

  static digest(data) {
    return MD5SHA1.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 36);
    assert_1(Buffer.isBuffer(right) && right.length === 36);
    return MD5SHA1.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = MD5SHA1.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return MD5SHA1.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


MD5SHA1.native = md5Browser.native;
MD5SHA1.id = 'MD5SHA1';
MD5SHA1.size = 36;
MD5SHA1.bits = 288;
MD5SHA1.blockSize = 64;
MD5SHA1.zero = Buffer.alloc(36, 0x00);
MD5SHA1.ctx = new MD5SHA1();
/*
 * Expose
 */

var md5sha1 = MD5SHA1;

//
// Bitcoin hashes odd nodes with themselves,
// allowing an attacker to add a duplicate
// TXID, creating an even number of leaves
// and computing the same root (CVE-2012-2459).
// In contrast, RFC 6962 simply propagates
// odd nodes up.
//
// RFC 6962:
//
//              R
//             / \
//            /   \
//           /     \
//          /       \
//         /         \
//        k           j <-- same as below
//       / \          |
//      /   \         |
//     /     \        |
//    h       i       j
//   / \     / \     / \
//  a   b   c   d   e   f
//
// Bitcoin Behavior:
//
//              R
//             / \
//            /   \
//           /     \
//          /       \
//         /         \
//        k           l <-- HASH(j || j)
//       / \          |
//      /   \         |
//     /     \        |
//    h       i       j
//   / \     / \     / \
//  a   b   c   d   e   f
//
// This creates a situation where these leaves:
//
//        R
//       / \
//      /   \
//     /     \
//    d       e <-- HASH(c || c)
//   / \     / \
//  a   b   c   c
//
// Compute the same root as:
//
//       R
//      / \
//     /   \
//    d     e <-- HASH(c || c)
//   / \    |
//  a   b   c
//
// Why does this matter? Duplicate TXIDs are
// invalid right? They're spending the same
// inputs! The problem arises in certain
// implementation optimizations which may
// mark a block hash invalid. In other words,
// an invalid block shares the same block
// hash as a valid one!
//
// See:
//   https://tools.ietf.org/html/rfc6962#section-2.1
//   https://nvd.nist.gov/vuln/detail/CVE-2012-2459
//   https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2459
//   https://bitcointalk.org/?topic=81749

/**
 * Build a merkle tree from leaves.
 * Note that this will mutate the `leaves` array!
 * @param {Object} alg
 * @param {Buffer[]} leaves
 * @returns {Array} [nodes, malleated]
 */


function createTree(alg, leaves) {
  assert_1(alg && typeof alg.root === 'function');
  assert_1(Array.isArray(leaves));
  var nodes = leaves;
  var size = leaves.length;
  var malleated = false;
  var i = 0;

  if (size === 0) {
    nodes.push(alg.zero);
    return [nodes, malleated];
  }

  while (size > 1) {
    for (var j = 0; j < size; j += 2) {
      var k = Math.min(j + 1, size - 1);
      var left = nodes[i + j];
      var right = nodes[i + k];

      if (k === j + 1 && k + 1 === size && left.equals(right)) {
        malleated = true;
      }

      var hash = alg.root(left, right);
      nodes.push(hash);
    }

    i += size;
    size = size + 1 >>> 1;
  }

  return [nodes, malleated];
}
/**
 * Calculate merkle root from leaves.
 * @param {Object} alg
 * @param {Buffer[]} leaves
 * @returns {Array} [root, malleated]
 */


function createRoot(alg, leaves) {
  assert_1(alg && typeof alg.root === 'function');
  assert_1(Array.isArray(leaves));
  var [nodes, malleated] = createTree(alg, leaves);
  var root = nodes[nodes.length - 1];
  return [root, malleated];
}
/**
 * Collect a merkle branch from vector index.
 * @param {Object} alg
 * @param {Number} index
 * @param {Buffer[]} leaves
 * @returns {Buffer[]} branch
 */


function createBranch(alg, index, leaves) {
  assert_1(alg && typeof alg.root === 'function');
  assert_1(index >>> 0 === index);
  assert_1(Array.isArray(leaves));
  assert_1(index < leaves.length);
  var size = leaves.length;
  var [nodes] = createTree(alg, leaves);
  var branch = [];
  var i = 0;

  while (size > 1) {
    var j = Math.min(index ^ 1, size - 1);
    branch.push(nodes[i + j]);
    index >>>= 1;
    i += size;
    size = size + 1 >>> 1;
  }

  return branch;
}
/**
 * Derive merkle root from branch.
 * @param {Object} alg
 * @param {Buffer} hash
 * @param {Buffer[]} branch
 * @param {Number} index
 * @returns {Buffer} root
 */


function deriveRoot(alg, hash, branch, index) {
  assert_1(alg && typeof alg.root === 'function');
  assert_1(Buffer.isBuffer(hash));
  assert_1(Array.isArray(branch));
  assert_1(index >>> 0 === index);
  var root = hash;

  for (var _hash of branch) {
    if (index & 1) root = alg.root(_hash, root);else root = alg.root(root, _hash);
    index >>>= 1;
  }

  return root;
}
/*
 * Expose
 */


var createTree_1 = createTree;
var createRoot_1 = createRoot;
var createBranch_1 = createBranch;
var deriveRoot_1 = deriveRoot;
var merkle = {
  createTree: createTree_1,
  createRoot: createRoot_1,
  createBranch: createBranch_1,
  deriveRoot: deriveRoot_1
};

/*
 * Constants
 */


var EMPTY$8 = Buffer.alloc(0);
var INTERNAL = Buffer.from([0x01]);
var LEAF = Buffer.from([0x00]);
/**
 * Build a merkle tree from leaves.
 * @param {Object} alg
 * @param {Buffer[]} leaves
 * @returns {Buffer[]} nodes
 */

function createTree$1(alg, leaves) {
  assert_1(alg && typeof alg.multi === 'function');
  assert_1(Array.isArray(leaves));
  var nodes = [];
  var sentinel = hashEmpty(alg);

  for (var data of leaves) {
    var leaf = hashLeaf(alg, data);
    nodes.push(leaf);
  }

  var size = nodes.length;
  var i = 0;

  if (size === 0) {
    nodes.push(sentinel);
    return nodes;
  }

  while (size > 1) {
    for (var j = 0; j < size; j += 2) {
      var l = j;
      var r = j + 1;
      var left = nodes[i + l];
      var right = void 0;
      if (r < size) right = nodes[i + r];else right = sentinel;
      var hash = hashInternal(alg, left, right);
      nodes.push(hash);
    }

    i += size;
    size = size + 1 >>> 1;
  }

  return nodes;
}
/**
 * Calculate merkle root from leaves.
 * @param {Object} alg
 * @param {Buffer[]} leaves
 * @returns {Buffer} root
 */


function createRoot$1(alg, leaves) {
  var nodes = createTree$1(alg, leaves);
  var root = nodes[nodes.length - 1];
  return root;
}
/**
 * Collect a merkle branch from vector index.
 * @param {Object} alg
 * @param {Number} index
 * @param {Buffer[]} leaves
 * @returns {Buffer[]} branch
 */


function createBranch$1(alg, index, leaves) {
  assert_1(index >>> 0 === index);
  var nodes = createTree$1(alg, leaves);
  var sentinel = hashEmpty(alg);
  var branch = [];
  var size = leaves.length;
  var i = 0;
  assert_1(index < leaves.length);

  while (size > 1) {
    var j = index ^ 1;
    if (j < size) branch.push(nodes[i + j]);else branch.push(sentinel);
    index >>>= 1;
    i += size;
    size = size + 1 >>> 1;
  }

  return branch;
}
/**
 * Derive merkle root from branch.
 * @param {Object} alg
 * @param {Buffer} leaf
 * @param {Buffer[]} branch
 * @param {Number} index
 * @returns {Buffer} root
 */


function deriveRoot$1(alg, leaf, branch, index) {
  assert_1(alg && typeof alg.multi === 'function');
  assert_1(Buffer.isBuffer(leaf));
  assert_1(Array.isArray(branch));
  assert_1(index >>> 0 === index);
  var root = hashLeaf(alg, leaf);

  for (var hash of branch) {
    if (index & 1) root = hashInternal(alg, hash, root);else root = hashInternal(alg, root, hash);
    index >>>= 1;
  }

  return root;
}
/**
 * Get sentinel hash.
 * @param {Object} alg
 * @returns {Buffer}
 */


function hashEmpty(alg) {
  return alg.digest(EMPTY$8);
}
/**
 * Hash a leaf node.
 * @param {Object} alg
 * @param {Buffer} data
 * @returns {Buffer}
 */


function hashLeaf(alg, data) {
  return alg.multi(LEAF, data);
}
/**
 * Hash an internal node.
 * @param {Object} alg
 * @param {Buffer} left
 * @param {Buffer} right
 * @returns {Buffer}
 */


function hashInternal(alg, left, right) {
  assert_1(right != null);
  return alg.multi(INTERNAL, left, right);
}
/*
 * Expose
 */


var createTree_1$1 = createTree$1;
var createRoot_1$1 = createRoot$1;
var createBranch_1$1 = createBranch$1;
var deriveRoot_1$1 = deriveRoot$1;
var hashEmpty_1 = hashEmpty;
var hashLeaf_1 = hashLeaf;
var hashInternal_1 = hashInternal;
var mrkl = {
  createTree: createTree_1$1,
  createRoot: createRoot_1$1,
  createBranch: createBranch_1$1,
  deriveRoot: deriveRoot_1$1,
  hashEmpty: hashEmpty_1,
  hashLeaf: hashLeaf_1,
  hashInternal: hashInternal_1
};

/**
 * Murmur3 hash.
 * @param {Buffer} data
 * @param {Number} seed
 * @returns {Number}
 */


function sum(data, seed) {
  assert_1(Buffer.isBuffer(data));
  assert_1(typeof seed === 'number');
  var tail = data.length - data.length % 4;
  var c1 = 0xcc9e2d51;
  var c2 = 0x1b873593;
  var h1 = seed | 0;

  for (var i = 0; i < tail; i += 4) {
    var _k = readU32$k(data, i);

    _k = mul32(_k, c1);
    _k = rotl32$7(_k, 15);
    _k = mul32(_k, c2);
    h1 ^= _k;
    h1 = rotl32$7(h1, 13);
    h1 = mul32(h1, 5) + 0xe6546b64 | 0;
  }

  var k1 = 0;

  switch (data.length & 3) {
    case 3:
      k1 ^= data[tail + 2] << 16;

    case 2:
      k1 ^= data[tail + 1] << 8;

    case 1:
      k1 ^= data[tail + 0];
      k1 = mul32(k1, c1);
      k1 = rotl32$7(k1, 15);
      k1 = mul32(k1, c2);
      h1 ^= k1;
  }

  h1 ^= data.length;
  h1 ^= h1 >>> 16;
  h1 = mul32(h1, 0x85ebca6b);
  h1 ^= h1 >>> 13;
  h1 = mul32(h1, 0xc2b2ae35);
  h1 ^= h1 >>> 16;
  return h1 >>> 0;
}
/**
 * Murmur3 hash.
 * @param {Buffer} data
 * @param {Number} n
 * @param {Number} tweak
 * @returns {Number}
 */


function tweak(data, n, tweak) {
  assert_1(typeof n === 'number');
  assert_1(typeof tweak === 'number');
  var seed = mul32(n, 0xfba4c795) + (tweak | 0);
  return sum(data, seed);
}
/*
 * Helpers
 */


function mul32(a, b) {
  var alo = a & 0xffff;
  var blo = b & 0xffff;
  var ahi = a >>> 16;
  var bhi = b >>> 16;
  var lo = alo * blo;
  var hi = ahi * blo + bhi * alo + (lo >>> 16);
  return hi << 16 | lo & 0xffff;
}

function rotl32$7(w, b) {
  return w << b | w >>> 32 - b;
}

function readU32$k(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}
/**
 * Expose
 */


var native_1$b = 0;
var sum_1 = sum;
var tweak_1 = tweak;
var murmur3 = {
  native: native_1$b,
  sum: sum_1,
  tweak: tweak_1
};

var murmur3Browser = murmur3;

/**
 * Schnorr
 */


class Schnorr {
  constructor(curve, hash) {
    this.curve = curve;
    this.hash = hash;
    this.msgSize = 32;
    this.sigSize = this.curve.fieldSize + this.curve.scalarSize;
    this.supported = this.support();
    this.rng = new RNG(this);
  }

  support() {
    // In order for BIP-Schnorr's quadratic residue trick to work,
    // `-1 mod p` must _not_ be a quadratic residue itself. In
    // other words, the curve must satisfy `jacobi(-1, p) != 1`
    // (or `jacobi(-1, p) == -1` for that matter).
    //
    // For more information, see the bip-schnorr citations:
    //   https://github.com/sipa/bips/blob/bip-schnorr/bip-schnorr.mediawiki#cite_note-4
    return this.curve.one.redNeg().redJacobi() === -1;
  }

  check() {
    if (!this.supported) throw new Error("Schnorr is not supported for ".concat(this.curve.id, "."));
  }

  encode(key) {
    assert_1(Buffer.isBuffer(key)); // Extra speedy key reserialization.
    // This function assumes the key
    // has already been validated.

    var {
      fieldSize
    } = this.curve;
    if (key.length === 1 + fieldSize) return key;
    if (key.length !== 1 + fieldSize * 2) throw new Error('Invalid point.');
    var out = Buffer.allocUnsafe(1 + fieldSize);
    out[0] = 0x02 | key[key.length - 1] & 1;
    key.copy(out, 1, 1, 1 + fieldSize);
    return out;
  }

  hashInt(x, y, z) {
    var hash = this.hash.multi(x, y, z);
    var num = bnBrowser.decode(hash, this.curve.endian);
    return num.imod(this.curve.n);
  }

  sign(msg, key) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(msg.length === this.msgSize);
    this.check();
    var N = this.curve.n;
    var G = this.curve.g; // The secret key d: an integer in the range 1..n-1.

    var a = this.curve.decodeScalar(key);
    if (a.isZero() || a.cmp(N) >= 0) throw new Error('Invalid private key.'); // Let k' = int(hash(bytes(d) || m)) mod n

    var k = this.hashInt(key, msg); // Fail if k' = 0.

    if (k.isZero()) throw new Error('Signing failed (k\' = 0).'); // Let R = k'*G.

    var R = G.mulBlind(k); // Encode x(R).

    var Rraw = this.curve.encodeField(R.getX()); // Encode d*G.

    var Araw = G.mulBlind(a).encode(); // Let e = int(hash(bytes(x(R)) || bytes(d*G) || m)) mod n.

    var e = this.hashInt(Rraw, Araw, msg); // Scalar blinding factor.

    var [blind, unblind] = this.curve.getBlinding(); // Blind.

    a.imul(blind).imod(N);
    k.imul(blind).imod(N); // Let k = k' if jacobi(y(R)) = 1, otherwise let k = n - k'.

    if (R.y.redJacobi() !== 1) k.ineg().imod(N); // Let S = k + e*d mod n.

    var S = k.iadd(e.imul(a)).imod(N); // Unblind.

    S.imul(unblind).imod(N); // The signature is bytes(x(R)) || bytes(k + e*d mod n).

    return Buffer.concat([Rraw, this.curve.encodeScalar(S)]);
  }

  verify(msg, sig, key) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(Buffer.isBuffer(key));
    this.check();
    if (msg.length !== this.msgSize) return false;
    if (sig.length !== this.sigSize) return false;

    try {
      return this._verify(msg, sig, key);
    } catch (e) {
      return false;
    }
  }

  _verify(msg, sig, key) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(Buffer.isBuffer(key));
    var P = this.curve.p;
    var N = this.curve.n;
    var G = this.curve.g; // Let r = int(sig[0:32]); fail if r >= p.
    // Let s = int(sig[32:64]); fail if s >= n.
    // Let P = point(pk); fail if point(pk) fails.

    var Rraw = sig.slice(0, this.curve.fieldSize);
    var Sraw = sig.slice(this.curve.fieldSize);
    var Rx = this.curve.decodeField(Rraw);
    var S = this.curve.decodeScalar(Sraw);
    var A = this.curve.decodePoint(key);
    if (Rx.cmp(P) >= 0 || S.cmp(N) >= 0) return false; // Let e = int(hash(bytes(r) || bytes(P) || m)) mod n.

    var e = this.hashInt(Rraw, this.encode(key), msg); // In concept, a schnorr sig can be validated with:
    //
    //   s*G == R + e*P
    //
    // But bip-schnorr optimizes for shamir's trick with:
    //
    //   r == x(s*G - e*P)
    //
    // This is even more necessary perf-wise since we only
    // encode the X coordinate as the R value (it avoids us
    // having to recalculate the Y coordinate).
    //
    // Note that we stay in the jacobian space here. This
    // avoids any unnecessary divisions by the Z coordinate.
    // Let R = s*G - e*P.
    // Fail if infinite(R) or jacobi(y(R)) != 1 or x(R) != r.

    var R = G.jmulAdd(S, A, e.ineg().imod(N)); // Check for point at infinity.

    if (R.isInfinity()) return false; // Check for quadratic residue in the jacobian space.
    // Optimized as `jacobi(y(R) * z(R)) == 1`.

    if (!R.hasQuadY()) return false; // Check `x(R) == r` in the jacobian space.
    // Optimized as `x(R) == r * z(R)^2 mod p`.

    if (!R.eqX(Rx)) return false;
    return true;
  }

  verifyBatch(batch) {
    assert_1(Array.isArray(batch));
    this.check();

    for (var item of batch) {
      assert_1(Array.isArray(item) && item.length === 3);
      var [msg, sig, key] = item;
      assert_1(Buffer.isBuffer(msg));
      assert_1(Buffer.isBuffer(sig));
      assert_1(Buffer.isBuffer(key));
      if (msg.length !== this.msgSize) return false;
      if (sig.length !== this.sigSize) return false;
    }

    try {
      return this._verifyBatch(batch);
    } catch (e) {
      return false;
    }
  }

  _verifyBatch(batch) {
    var P = this.curve.p;
    var N = this.curve.n;
    var G = this.curve.g;
    var points = new Array(1 + batch.length * 2);
    var coeffs = new Array(1 + batch.length * 2);
    var sum = new bnBrowser(0); // Seed the RNG with our batch. This
    // code assumes the signers do not
    // have complete knowledge of the
    // other signatures in the set.

    this.rng.init(batch); // Setup multiplication for lhs*G.

    points[0] = G;
    coeffs[0] = sum; // Verify all signatures.

    for (var i = 0; i < batch.length; i++) {
      var [msg, sig, key] = batch[i]; // Let r = int(sigi[0:32]); fail if r >= p.
      // Let si = int(sigi[32:64]); fail if si >= n.
      // Let Pi = point(pki); fail if point(pki) fails.

      var Rraw = sig.slice(0, this.curve.fieldSize);
      var Sraw = sig.slice(this.curve.fieldSize);
      var Rx = this.curve.decodeField(Rraw);
      var S = this.curve.decodeScalar(Sraw);
      var A = this.curve.decodePoint(key);
      if (Rx.cmp(P) >= 0 || S.cmp(N) >= 0) return false; // Let ei = int(hash(bytes(r) || bytes(Pi) || mi)) mod n.

      var e = this.hashInt(Rraw, this.encode(key), msg); // Let Ri = lift_x(r); fail if lift_x(r) fails.

      var R = this.curve.pointFromR(Rx); // Generate u-1 random integers a2...u in the range 1...n-1.

      var a = this.rng.generate(i);
      var ea = e.imul(a).imod(N); // Let lhs = s1 + a2*s2 + ... + au*su.

      sum.iadd(S.imul(a)).imod(N); // Let rhs = R1 + a2*R2 + ... + au*Ru
      //         + e1*P1 + (a2*e2)P2 + ... + (au*eu)Pu.

      points[1 + i * 2 + 0] = R;
      coeffs[1 + i * 2 + 0] = a;
      points[1 + i * 2 + 1] = A;
      coeffs[1 + i * 2 + 1] = ea;
    } // To avoid affinization, we optimize the final check as:
    //
    //   (-lhs * G) + rhs == infinity
    //
    // This trick is borrowed from libsecp256k1-zkp.


    sum.ineg().imod(N);
    return this.curve.jmulAll(points, coeffs).isInfinity();
  }

}
/**
 * RNG (designed to mimic the libsecp256k1-zkp CSPRNG)
 * @see https://github.com/ElementsProject/secp256k1-zkp/blob/d5e22a5/src/modules/schnorrsig/main_impl.h#L166
 * @see https://github.com/ElementsProject/secp256k1-zkp/blob/d5e22a5/src/scalar_4x64_impl.h#L974
 * @see https://github.com/ElementsProject/secp256k1-zkp/blob/d5e22a5/src/scalar_8x32_impl.h#L749
 */


class RNG {
  constructor(schnorr) {
    this.curve = schnorr.curve;
    this.hash = schnorr.hash;
    this.encode = schnorr.encode.bind(schnorr);
    this.chacha = new chacha20Browser();
    this.key = Buffer.alloc(32, 0x00);
    this.iv = Buffer.alloc(8, 0x00);
    this.cache = [new bnBrowser(1), new bnBrowser(1)];
  }

  init(batch) {
    assert_1(Array.isArray(batch)); // eslint-disable-next-line

    var h = new this.hash();
    h.init();

    for (var [msg, sig, _key] of batch) {
      h.update(sig);
      h.update(msg);
      h.update(this.encode(_key));
    }

    var key = h.final();
    if (key.length > 32) key = key.slice(0, 32);
    assert_1(key.length === 32);
    this.key = key;
    this.cache[0] = new bnBrowser(1);
    this.cache[1] = new bnBrowser(1);
    return this;
  }

  encrypt(counter) {
    assert_1(counter >>> 0 === counter);
    var size = this.curve.scalarSize * 2 + 3 & -4;
    var data = Buffer.alloc(size, 0x00);
    var left = data.slice(0, this.curve.scalarSize);
    var right = data.slice(this.curve.scalarSize);
    this.chacha.init(this.key, this.iv, counter);
    this.chacha.encrypt(data); // Swap endianness of each 32 bit int. This should
    // match the behavior of libsecp256k1-zkp exactly.
    // ChaCha20 writes its internal state as a series
    // of little-endian u32s, but libsecp256k1 skips
    // the serialization step and accesses the u32s
    // directly, mapping the first int to the highest
    // word of the scalar and so on (in effect, reading
    // the state as big-endian in terms of 32 bit words
    // rather than 8 bit words). Swapping the endianness
    // of each word to big-endian and reading the whole
    // thing as big-endian should give us the exact same
    // behavior.

    for (var i = 0; i < size; i += 4) {
      [data[i + 0], data[i + 3]] = [data[i + 3], data[i + 0]];
      [data[i + 1], data[i + 2]] = [data[i + 2], data[i + 1]];
    }

    return [this.curve.decodeScalar(left), this.curve.decodeScalar(right)];
  }

  refresh(counter) {
    var overflow = 0;

    for (;;) {
      // First word is always zero.
      this.iv[4] = overflow;
      this.iv[5] = overflow >>> 8;
      this.iv[6] = overflow >>> 16;
      this.iv[7] = overflow >>> 24;
      overflow += 1;
      var [s1, s2] = this.encrypt(counter);
      if (s1.isZero() || s1.cmp(this.curve.n) >= 0) continue;
      if (s2.isZero() || s2.cmp(this.curve.n) >= 0) continue;
      this.cache[0] = s1;
      this.cache[1] = s2;
      break;
    }
  }

  generate(index) {
    assert_1(index >>> 0 === index);
    if (index & 1) this.refresh(index >>> 1);
    return this.cache[index & 1];
  }

}
/*
 * Expose
 */


var schnorr = Schnorr;

/**
 * ECDSA
 */


class ECDSA {
  constructor(name, hash, pre) {
    assert_1(typeof name === 'string');
    assert_1(hash);
    this.id = name;
    this.type = 'short';
    this.hash = hash;
    this.native = 0;
    this._pre = pre || null;
    this._curve = null;
    this._schnorr = null;
  }

  get curve() {
    if (!this._curve) {
      this._curve = new curves[this.id](this._pre);

      this._curve.precompute(randomBrowser);

      this._pre = null;
    }

    return this._curve;
  }

  get schnorr() {
    if (!this._schnorr) this._schnorr = new schnorr(this.curve, this.hash);
    return this._schnorr;
  }

  get size() {
    return this.curve.fieldSize;
  }

  get bits() {
    return this.curve.fieldBits;
  }

  privateKeyGenerate() {
    var a = bnBrowser.random(randomBrowser, 1, this.curve.n);
    return this.curve.encodeScalar(a);
  }

  privateKeyVerify(key) {
    assert_1(Buffer.isBuffer(key));
    var a = null;

    try {
      a = this.curve.decodeScalar(key);
    } catch (e) {
      return false;
    }

    if (a.isZero() || a.cmp(this.curve.n) >= 0) return false;
    return true;
  }

  privateKeyExport(key, compress) {
    var pub = this.publicKeyCreate(key, compress);
    return new sec1.ECPrivateKey(1, key, this.id, pub).encode();
  }

  privateKeyImport(raw) {
    var key = sec1.ECPrivateKey.decode(raw);
    var curve = key.namedCurveOID.toString();
    assert_1(key.version.toNumber() === 1);
    assert_1(curve === asn1.objects.curves[this.id] || curve === asn1.objects.NONE);
    var {
      value
    } = key.privateKey;
    if (value.length > this.curve.scalarSize) throw new Error('Invalid private key.');
    var a = bnBrowser.decode(value, this.curve.endian);
    if (a.isZero() || a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    return this.curve.encodeScalar(a);
  }

  privateKeyExportPKCS8(key, compress) {
    var pub = this.publicKeyCreate(key, compress);
    var curve = asn1.objects.NONE; // https://tools.ietf.org/html/rfc5915

    return new pkcs8.PrivateKeyInfo(0, asn1.objects.keyAlgs.ECDSA, new asn1.OID(asn1.objects.curves[this.id]), new sec1.ECPrivateKey(1, key, curve, pub).encode()).encode();
  }

  privateKeyImportPKCS8(raw) {
    var pki = pkcs8.PrivateKeyInfo.decode(raw);
    var {
      algorithm,
      parameters
    } = pki.algorithm;
    assert_1(pki.version.toNumber() === 0);
    assert_1(algorithm.toString() === asn1.objects.keyAlgs.ECDSA);
    assert_1(parameters.node.type === asn1.types.OID);
    assert_1(parameters.node.toString() === asn1.objects.curves[this.id]);
    return this.privateKeyImport(pki.privateKey.value);
  }

  privateKeyExportJWK(key) {
    return eckey.privateKeyExportJWK(this, key);
  }

  privateKeyImportJWK(json) {
    return eckey.privateKeyImportJWK(this, json);
  }

  privateKeyTweakAdd(key, tweak) {
    var t = this.curve.decodeScalar(tweak);
    if (t.cmp(this.curve.n) >= 0) throw new Error('Invalid scalar.');
    var a = this.curve.decodeScalar(key);
    if (a.isZero() || a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    var T = a.iadd(t).imod(this.curve.n);
    if (T.isZero()) throw new Error('Invalid private key.');
    return this.curve.encodeScalar(T);
  }

  privateKeyTweakMul(key, tweak) {
    var t = this.curve.decodeScalar(tweak);
    if (t.isZero() || t.cmp(this.curve.n) >= 0) throw new Error('Invalid scalar.');
    var a = this.curve.decodeScalar(key);
    if (a.isZero() || a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    var T = a.imul(t).imod(this.curve.n);
    if (T.isZero()) throw new Error('Invalid private key.');
    return this.curve.encodeScalar(T);
  }

  privateKeyReduce(key) {
    assert_1(Buffer.isBuffer(key));
    if (key.length > this.curve.scalarSize) key = key.slice(0, this.curve.scalarSize);
    var a = bnBrowser.decode(key, this.curve.endian).imod(this.curve.n);
    return this.curve.encodeScalar(a);
  }

  privateKeyNegate(key) {
    var a = this.curve.decodeScalar(key);
    if (a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    var T = a.ineg().imod(this.curve.n);
    return this.curve.encodeScalar(T);
  }

  privateKeyInvert(key) {
    var a = this.curve.decodeScalar(key);
    if (a.isZero() || a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    var T = a.invert(this.curve.n);
    if (T.isZero()) throw new Error('Invalid private key.');
    return this.curve.encodeScalar(T);
  }

  publicKeyCreate(key, compress) {
    var a = this.curve.decodeScalar(key);
    if (a.isZero() || a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    var A = this.curve.g.mulBlind(a);
    return A.encode(compress);
  }

  publicKeyConvert(key, compress) {
    var A = this.curve.decodePoint(key);
    return A.encode(compress);
  }

  publicKeyVerify(key) {
    assert_1(Buffer.isBuffer(key));

    try {
      this.curve.decodePoint(key);
    } catch (e) {
      return false;
    }

    return true;
  }

  publicKeyExport(key) {
    return this.publicKeyConvert(key, false).slice(1);
  }

  publicKeyImport(raw, compress) {
    assert_1(Buffer.isBuffer(raw));
    assert_1(raw.length === this.curve.fieldSize * 2);
    var key = Buffer.allocUnsafe(1 + raw.length);
    key[0] = 0x04;
    raw.copy(key, 1);
    return this.publicKeyConvert(key, compress);
  }

  publicKeyExportSPKI(key, compress) {
    // https://tools.ietf.org/html/rfc5480
    return new x509.SubjectPublicKeyInfo(asn1.objects.keyAlgs.ECDSA, new asn1.OID(asn1.objects.curves[this.id]), this.publicKeyConvert(key, compress)).encode();
  }

  publicKeyImportSPKI(raw, compress) {
    var spki = x509.SubjectPublicKeyInfo.decode(raw);
    var {
      algorithm,
      parameters
    } = spki.algorithm;
    assert_1(algorithm.toString() === asn1.objects.keyAlgs.ECDSA);
    assert_1(parameters.node.type === asn1.types.OID);
    assert_1(parameters.node.toString() === asn1.objects.curves[this.id]);
    return this.publicKeyConvert(spki.publicKey.rightAlign(), compress);
  }

  publicKeyExportJWK(key) {
    return eckey.publicKeyExportJWK(this, key);
  }

  publicKeyImportJWK(json, compress) {
    return eckey.publicKeyImportJWK(this, json, compress);
  }

  publicKeyTweakAdd(key, tweak, compress) {
    var t = this.curve.decodeScalar(tweak);
    if (t.cmp(this.curve.n) >= 0) throw new Error('Invalid scalar.');
    var A = this.curve.decodePoint(key);
    var T = this.curve.g.mul(t).add(A);
    return T.encode(compress);
  }

  publicKeyTweakMul(key, tweak, compress) {
    var t = this.curve.decodeScalar(tweak);
    if (t.isZero() || t.cmp(this.curve.n) >= 0) throw new Error('Invalid scalar.');
    var A = this.curve.decodePoint(key);
    var T = A.mul(t);
    return T.encode(compress);
  }

  publicKeyAdd(key1, key2, compress) {
    var A1 = this.curve.decodePoint(key1);
    var A2 = this.curve.decodePoint(key2);
    var T = A1.add(A2);
    return T.encode(compress);
  }

  publicKeyCombine(keys, compress) {
    assert_1(Array.isArray(keys));
    var acc = this.curve.jpoint();

    for (var key of keys) {
      var point = this.curve.decodePoint(key);
      acc = acc.mixedAdd(point);
    }

    return acc.encode(compress);
  }

  publicKeyNegate(key, compress) {
    var A = this.curve.decodePoint(key);
    var T = A.neg();
    return T.encode(compress);
  }

  _signatureNormalize(sig) {
    var r = this.curve.decodeScalar(sig.r);
    var s = this.curve.decodeScalar(sig.s);
    if (r.isZero() || r.cmp(this.curve.n) >= 0) throw new Error('Invalid R value.');
    if (s.isZero() || s.cmp(this.curve.n) >= 0) throw new Error('Invalid S value.');
    if (s.cmp(this.curve.nh) > 0) sig.s = this.curve.encodeScalar(s.ineg().imod(this.curve.n));
    return sig;
  }

  signatureNormalize(raw) {
    var sig = signature.decode(raw, this.curve.scalarSize);

    this._signatureNormalize(sig);

    return sig.encode(this.curve.scalarSize);
  }

  signatureNormalizeDER(raw) {
    var sig = signature.fromDER(raw, this.curve.scalarSize);

    this._signatureNormalize(sig);

    return sig.toDER(this.curve.scalarSize);
  }

  signatureExport(sig) {
    return signature.toDER(sig, this.curve.scalarSize);
  }

  signatureImport(sig) {
    return signature.toRS(sig, this.curve.scalarSize);
  }

  _isLowS(sig) {
    var r = this.curve.decodeScalar(sig.r);
    var s = this.curve.decodeScalar(sig.s);
    if (r.isZero() || r.cmp(this.curve.n) >= 0) return false;
    if (s.isZero() || s.cmp(this.curve.n) >= 0) return false;
    return s.cmp(this.curve.nh) <= 0;
  }

  isLowS(sig) {
    assert_1(Buffer.isBuffer(sig));
    if (sig.length !== this.curve.scalarSize * 2) return false;
    var s = signature.decode(sig, this.curve.scalarSize);
    return this._isLowS(s);
  }

  isLowDER(sig) {
    assert_1(Buffer.isBuffer(sig));
    var s;

    try {
      s = signature.fromDER(sig, this.curve.scalarSize);
    } catch (e) {
      return false;
    }

    return this._isLowS(s);
  }

  _sign(msg, key) {
    assert_1(Buffer.isBuffer(msg));
    var N = this.curve.n;
    var Nh = this.curve.nh;
    var G = this.curve.g;
    var a = this.curve.decodeScalar(key);
    if (a.isZero() || a.cmp(N) >= 0) throw new Error('Invalid private key.'); // https://tools.ietf.org/html/rfc6979#section-3.2

    var m = this._reduce(msg);

    var nonce = this.curve.encodeScalar(m);
    var drbg = new hmacDrbg(this.hash, key, nonce);

    for (;;) {
      var bytes = drbg.generate(this.curve.scalarSize);

      var k = this._truncate(bytes);

      if (k.isZero() || k.cmp(N) >= 0) continue;
      var kp = G.mulBlind(k);
      if (kp.isInfinity()) continue;
      var x = kp.getX();
      var r = x.mod(N);
      if (r.isZero()) continue; // Reasoning: fermat's little theorem
      // has better constant-time properties
      // than an EGCD.

      var ki = k.fermat(N); // Scalar blinding factor.

      var [blind, unblind] = this.curve.getBlinding(); // Blind.

      var ba = a.mul(blind).imod(N);
      var bm = m.mul(blind).imod(N); // s := ((r * a + m) * k^-1) mod n

      var s = r.mul(ba).imod(N).iadd(bm).imod(N).imul(ki).imod(N); // Unblind.

      s.imul(unblind).imod(N);
      if (s.isZero()) continue;
      var param = (kp.getY().isOdd() ? 1 : 0) | (x.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`.

      if (s.cmp(Nh) > 0) {
        s.ineg().imod(N);
        param ^= 1;
      }

      var sig = new signature();
      sig.r = this.curve.encodeScalar(r);
      sig.s = this.curve.encodeScalar(s);
      sig.param = param;
      return sig;
    }
  }

  sign(msg, key) {
    var sig = this._sign(msg, key);

    return sig.encode(this.curve.scalarSize);
  }

  signRecoverable(msg, key) {
    var sig = this._sign(msg, key);

    return [sig.encode(this.curve.scalarSize), sig.param];
  }

  signDER(msg, key) {
    var sig = this._sign(msg, key);

    return sig.toDER(this.curve.scalarSize);
  }

  signRecoverableDER(msg, key) {
    var sig = this._sign(msg, key);

    return [sig.toDER(this.curve.scalarSize), sig.param];
  }

  _verify(msg, sig, key) {
    var N = this.curve.n;
    var G = this.curve.g;

    var m = this._reduce(msg);

    var A = this.curve.decodePoint(key);
    var r = this.curve.decodeScalar(sig.r);
    var s = this.curve.decodeScalar(sig.s);
    if (r.isZero() || r.cmp(N) >= 0) return false;
    if (s.isZero() || s.cmp(N) >= 0) return false;
    var si = s.invert(N);
    var u1 = m.imul(si).imod(N);
    var u2 = r.mul(si).imod(N);

    if (this.curve.maxwellTrick) {
      // Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K
      var _p = G.jmulAdd(u1, A, u2);

      if (_p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead
      // of multiplying `p.x` by the inverse of
      // `p.z^2`.

      return _p.eqXToP(r);
    }

    var p = G.mulAdd(u1, A, u2);
    if (p.isInfinity()) return false;
    return p.getX().mod(N).cmp(r) === 0;
  }

  verify(msg, sig, key) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(Buffer.isBuffer(key));
    if (sig.length !== this.curve.scalarSize * 2) return false;
    var s = signature.decode(sig, this.curve.scalarSize);

    try {
      return this._verify(msg, s, key);
    } catch (e) {
      return false;
    }
  }

  verifyDER(msg, sig, key) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(Buffer.isBuffer(key));
    var s;

    try {
      s = signature.fromDER(sig, this.curve.scalarSize);
    } catch (e) {
      return false;
    }

    try {
      return this._verify(msg, s, key);
    } catch (e) {
      return false;
    }
  }

  _recover(msg, sig, param) {
    var P = this.curve.p;
    var N = this.curve.n;
    var G = this.curve.g;

    var m = this._reduce(msg);

    var r = this.curve.decodeScalar(sig.r);
    var s = this.curve.decodeScalar(sig.s);
    if (r.isZero() || r.cmp(N) >= 0) throw new Error('Invalid R value.');
    if (s.isZero() || s.cmp(N) >= 0) throw new Error('Invalid S value.');
    var sign = param & 1;
    var high = param >>> 1;
    var x = r;

    if (high) {
      if (x.cmp(P.mod(N)) >= 0) throw new Error('Invalid R value.');
      x = x.add(N);
    }

    var kp = this.curve.pointFromX(x, sign);
    var ri = r.invert(N);
    var s1 = m.imul(ri).ineg().imod(N);
    var s2 = s.imul(ri).imod(N);
    var A = G.mulAdd(s1, kp, s2);
    if (A.isInfinity()) throw new Error('Invalid point.');
    return A;
  }

  recover(msg, sig, param, compress) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(param >>> 0 === param);
    assert_1((param & 3) === param, 'The recovery param is more than two bits.');
    if (sig.length !== this.curve.scalarSize * 2) return null;
    var s = signature.decode(sig, this.curve.scalarSize);
    var point;

    try {
      point = this._recover(msg, s, param);
    } catch (e) {
      return null;
    }

    return point.encode(compress);
  }

  recoverDER(msg, sig, param, compress) {
    assert_1(Buffer.isBuffer(msg));
    assert_1(Buffer.isBuffer(sig));
    assert_1(param >>> 0 === param);
    assert_1((param & 3) === param, 'The recovery param is more than two bits.');
    var s;

    try {
      s = signature.fromDER(sig, this.curve.scalarSize);
    } catch (e) {
      return null;
    }

    var point;

    try {
      point = this._recover(msg, s, param);
    } catch (e) {
      return null;
    }

    return point.encode(compress);
  }

  derive(pub, priv, compress) {
    var a = this.curve.decodeScalar(priv);
    if (a.isZero() || a.cmp(this.curve.n) >= 0) throw new Error('Invalid private key.');
    var A = this.curve.decodePoint(pub);
    var point = A.mulBlind(a, randomBrowser);
    return point.encode(compress);
  }
  /*
   * Schnorr
   */


  schnorrSign(msg, key) {
    return this.schnorr.sign(msg, key);
  }

  schnorrVerify(msg, sig, key) {
    return this.schnorr.verify(msg, sig, key);
  }

  schnorrVerifyBatch(batch) {
    return this.schnorr.verifyBatch(batch);
  }
  /*
   * Helpers
   */


  _truncate(msg) {
    assert_1(Buffer.isBuffer(msg));
    var bits = this.curve.n.bitLength();
    var bytes = bits + 7 >>> 3;
    if (msg.length > bytes) msg = msg.slice(0, bytes);
    var m = bnBrowser.decode(msg, this.curve.endian);
    var d = msg.length * 8 - bits;
    if (d > 0) m.iushrn(d);
    return m;
  }

  _reduce(msg) {
    return this._truncate(msg).imod(this.curve.n);
  }

}
/*
 * Expose
 */


var ecdsa = ECDSA;

/*
 * Expose
 */


var p192 = new ecdsa('P192', sha256Browser);

var p192Browser = p192;

/*
 * Expose
 */


var p224 = new ecdsa('P224', sha256Browser);

var p224Browser = p224;

/*
 * Expose
 */


var p256 = new ecdsa('P256', sha256Browser);

var p256Browser = p256;

/**
 * SHA384
 */


class SHA384 extends sha512 {
  /**
   * Create a SHA384 context.
   * @constructor
   */
  constructor() {
    super();
  }
  /**
   * Initialize SHA384 context.
   */


  init() {
    this.state[0] = 0xcbbb9d5d;
    this.state[1] = 0xc1059ed8;
    this.state[2] = 0x629a292a;
    this.state[3] = 0x367cd507;
    this.state[4] = 0x9159015a;
    this.state[5] = 0x3070dd17;
    this.state[6] = 0x152fecd8;
    this.state[7] = 0xf70e5939;
    this.state[8] = 0x67332667;
    this.state[9] = 0xffc00b31;
    this.state[10] = 0x8eb44a87;
    this.state[11] = 0x68581511;
    this.state[12] = 0xdb0c2e0d;
    this.state[13] = 0x64f98fa7;
    this.state[14] = 0x47b5481d;
    this.state[15] = 0xbefa4fa4;
    this.size = 0;
    return this;
  }
  /**
   * Finalize SHA384 context.
   * @returns {Buffer}
   */


  final() {
    return super.final().slice(0, 48);
  }

  static hash() {
    return new SHA384();
  }

  static hmac() {
    return new hmac(SHA384, 128);
  }

  static digest(data) {
    return SHA384.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 48);
    assert_1(Buffer.isBuffer(right) && right.length === 48);
    return SHA384.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = SHA384.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return SHA384.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


SHA384.native = 0;
SHA384.id = 'SHA384';
SHA384.size = 48;
SHA384.bits = 384;
SHA384.blockSize = 128;
SHA384.zero = Buffer.alloc(48, 0x00);
SHA384.ctx = new SHA384();
/*
 * Expose
 */

var sha384 = SHA384;

var sha384Browser = sha384;

/*
 * Expose
 */


var p384 = new ecdsa('P384', sha384Browser);

var p384Browser = p384;

/*
 * Expose
 */


var p521 = new ecdsa('P521', sha512Browser);

var p521Browser = p521;

var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto || {};
var subtle = crypto.subtle || {};
/**
 * Perform key derivation using PBKDF2.
 * @param {Function} hash
 * @param {Buffer} pass
 * @param {Buffer} salt
 * @param {Number} iter
 * @param {Number} len
 * @returns {Buffer}
 */

function derive$4(hash, pass, salt, iter, len) {
  if (typeof pass === 'string') pass = Buffer.from(pass, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  if (salt == null) salt = Buffer.alloc(0);
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(pass));
  assert_1(Buffer.isBuffer(salt));
  assert_1(iter >>> 0 === iter);
  assert_1(len >>> 0 === len);
  var size = hash.size;
  var blocks = Math.ceil(len / size);
  var out = Buffer.allocUnsafe(blocks * size);
  var state = Buffer.allocUnsafe(salt.length + 4);
  salt.copy(state, 0); // Preemptively shorten key.

  if (pass.length > hash.blockSize) {
    pass = hash.digest(pass);
    assert_1(pass.length <= hash.blockSize);
  }

  for (var i = 0; i < blocks; i++) {
    var round = i + 1;
    state[salt.length + 0] = round >>> 24;
    state[salt.length + 1] = round >>> 16;
    state[salt.length + 2] = round >>> 8;
    state[salt.length + 3] = round;
    var block = hash.mac(state, pass);
    var mac = block;

    for (var j = 1; j < iter; j++) {
      mac = hash.mac(mac, pass);

      for (var k = 0; k < size; k++) {
        block[k] ^= mac[k];
      }
    }

    block.copy(out, i * size);
  }

  return out.slice(0, len);
}
/**
 * Execute pbkdf2 asynchronously.
 * @param {Function} hash
 * @param {Buffer} pass
 * @param {Buffer} salt
 * @param {Number} iter
 * @param {Number} len
 * @returns {Promise}
 */


function deriveAsync(_x, _x2, _x3, _x4, _x5) {
  return _deriveAsync.apply(this, arguments);
}
/*
 * Helpers
 */


function _deriveAsync() {
  _deriveAsync = _asyncToGenerator(function* (hash, pass, salt, iter, len) {
    if (typeof pass === 'string') pass = Buffer.from(pass, 'utf8');
    if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
    if (salt == null) salt = Buffer.alloc(0);
    assert_1(hash && typeof hash.id === 'string');
    assert_1(Buffer.isBuffer(pass));
    assert_1(Buffer.isBuffer(salt));
    assert_1(iter >>> 0 === iter);
    assert_1(len >>> 0 === len);
    var name = getHash(hash);
    if (!subtle.importKey || !subtle.deriveBits || !name) return derive$4(hash, pass, salt, iter, len);
    var algo = {
      name: 'PBKDF2'
    };
    var use = ['deriveBits'];
    var options = {
      name: 'PBKDF2',
      salt: salt,
      iterations: iter,
      hash: name
    };
    var key = yield subtle.importKey('raw', pass, algo, false, use);
    var out = yield subtle.deriveBits(options, key, len * 8);
    return Buffer.from(out);
  });
  return _deriveAsync.apply(this, arguments);
}

function getHash(hash) {
  switch (hash.id) {
    case 'SHA1':
      return 'SHA-1';

    case 'SHA256':
      return 'SHA-256';

    case 'SHA384':
      return 'SHA-384';

    case 'SHA512':
      return 'SHA-512';

    default:
      return null;
  }
}
/*
 * Expose
 */


var native_1$c = 0;
var derive_1$4 = derive$4;
var deriveAsync_1 = deriveAsync;
var pbkdf2 = {
  native: native_1$c,
  derive: derive_1$4,
  deriveAsync: deriveAsync_1
};

var pbkdf2Browser = pbkdf2;

var ripemd160Browser = ripemd160;

/**
 * SHA224
 */


class SHA224 extends sha256 {
  /**
   * Create a SHA256 context.
   * @constructor
   */
  constructor() {
    super();
  }
  /**
   * Initialize SHA224 context.
   */


  init() {
    this.state[0] = 0xc1059ed8;
    this.state[1] = 0x367cd507;
    this.state[2] = 0x3070dd17;
    this.state[3] = 0xf70e5939;
    this.state[4] = 0xffc00b31;
    this.state[5] = 0x68581511;
    this.state[6] = 0x64f98fa7;
    this.state[7] = 0xbefa4fa4;
    this.size = 0;
    return this;
  }
  /**
   * Finalize SHA224 context.
   * @returns {Buffer}
   */


  final() {
    return super.final().slice(0, 28);
  }

  static hash() {
    return new SHA224();
  }

  static hmac() {
    return new hmac(SHA224, 64);
  }

  static digest(data) {
    return SHA224.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 28);
    assert_1(Buffer.isBuffer(right) && right.length === 28);
    return SHA224.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = SHA224.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return SHA224.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


SHA224.native = 0;
SHA224.id = 'SHA224';
SHA224.size = 28;
SHA224.bits = 224;
SHA224.blockSize = 64;
SHA224.zero = Buffer.alloc(28, 0x00);
SHA224.ctx = new SHA224();
/*
 * Expose
 */

var sha224 = SHA224;

var sha224Browser = sha224;

var {
  PEMBlock: PEMBlock$2
} = pem;
var {
  countLeft: countLeft$3
} = util$1;
/*
 * Constants
 */

var packetTypes = {
  NONE: 0,
  PUBKEY_ENC: 1,
  SIGNATURE: 2,
  SYMKEY_ENC: 3,
  ONEPASS_SIG: 4,
  PRIVATE_KEY: 5,
  PUBLIC_KEY: 6,
  PRIVATE_SUBKEY: 7,
  COMPRESSED: 8,
  ENCRYPTED: 9,
  MARKER: 10,
  PLAINTEXT: 11,
  RING_TRUST: 12,
  USER_ID: 13,
  PUBLIC_SUBKEY: 14,
  OLD_COMMENT: 16,
  ATTRIBUTE: 17,
  ENCRYPTED_MDC: 18,
  MDC: 19,
  ENCRYPTED_AEAD: 20
};
var packetTypesByVal = {
  0: 'NONE',
  1: 'PUBKEY_ENC',
  2: 'SIGNATURE',
  3: 'SYMKEY_ENC',
  4: 'ONEPASS_SIG',
  5: 'PRIVATE_KEY',
  6: 'PUBLIC_KEY',
  7: 'PRIVATE_SUBKEY',
  8: 'COMPRESSED',
  9: 'ENCRYPTED',
  10: 'MARKER',
  11: 'PLAINTEXT',
  12: 'RING_TRUST',
  13: 'USER_ID',
  14: 'PUBLIC_SUBKEY',
  16: 'OLD_COMMENT',
  17: 'ATTRIBUTE',
  18: 'ENCRYPTED_MDC',
  19: 'MDC',
  20: 'ENCRYPTED_AEAD'
};
var sigTypes = {
  BINARY: 0x00,
  TEXT: 0x01,
  GENERIC_CERT: 0x10,
  PERSONA_CERT: 0x11,
  CASUAL_CERT: 0x12,
  POSITIVE_CERT: 0x13,
  SUBKEY_BINDING: 0x18,
  PRIMARY_KEY_BINDING: 0x19,
  DIRECT_SIGNATURE: 0x1f,
  KEY_REVOCATION: 0x20,
  SUBKEY_REVOCATION: 0x28
};
var sigTypesByVal = {
  0x00: 'BINARY',
  0x01: 'TEXT',
  0x10: 'GENERIC_CERT',
  0x11: 'PERSONA_CERT',
  0x12: 'CASUAL_CERT',
  0x13: 'POSITIVE_CERT',
  0x18: 'SUBKEY_BINDING',
  0x19: 'PRIMARY_KEY_BINDING',
  0x1f: 'DIRECT_SIGNATURE',
  0x20: 'KEY_REVOCATION',
  0x28: 'SUBKEY_REVOCATION'
};
var keyTypes = {
  RSA: 1,
  RSA_ENCRYPT_ONLY: 2,
  RSA_SIGN_ONLY: 3,
  ELGAMAL: 16,
  DSA: 17,
  ECDH: 18,
  ECDSA: 19,
  ELGAMAL_LEGACY: 20,
  EDDSA: 22
};
var keyTypesByVal = {
  1: 'RSA',
  2: 'RSA_ENCRYPT_ONLY',
  3: 'RSA_SIGN_ONLY',
  16: 'ELGAMAL',
  17: 'DSA',
  18: 'ECDH',
  19: 'ECDSA',
  20: 'ELGAMAL_LEGACY',
  22: 'EDDSA'
};
var cipherTypes = {
  NONE: 0,
  IDEA: 1,
  DES3: 2,
  CAST5: 3,
  BLOWFISH: 4,
  AES128: 7,
  AES192: 8,
  AES256: 9,
  TWOFISH: 10,
  CAMELLIA128: 11,
  CAMELLIA192: 12,
  CAMELLIA256: 13
};
var cipherTypesByVal = {
  0: 'NONE',
  1: 'IDEA',
  2: 'DES3',
  3: 'CAST5',
  4: 'BLOWFISH',
  7: 'AES128',
  8: 'AES192',
  9: 'AES256',
  10: 'TWOFISH',
  11: 'CAMELLIA128',
  12: 'CAMELLIA192',
  13: 'CAMELLIA256'
};
var hashTypes = {
  MD5: 1,
  SHA1: 2,
  RIPEMD160: 3,
  SHA256: 8,
  SHA384: 9,
  SHA512: 10,
  SHA224: 11
};
var hashTypesByVal = {
  1: 'MD5',
  2: 'SHA1',
  3: 'RIPEMD160',
  8: 'SHA256',
  9: 'SHA384',
  10: 'SHA512',
  11: 'SHA224'
};
var hashToHash = {
  1: md5Browser,
  2: sha1Browser,
  3: ripemd160Browser,
  8: sha256Browser,
  9: sha384Browser,
  10: sha512Browser,
  11: sha224Browser
};
var compressTypes = {
  NONE: 0,
  ZIP: 1,
  ZLIB: 2,
  BZIP2: 3
};
var compressTypesByVal = {
  0: 'NONE',
  1: 'ZIP',
  2: 'ZLIB',
  3: 'BZIP2'
};
var curveTypes = {
  NONE: 0,
  P256: 1,
  P384: 2,
  P521: 3,
  SECP256K1: 4,
  X25519: 5,
  BRAINPOOLP256: 6,
  BRAINPOOLP384: 7,
  BRAINPOOLP521: 8,
  ED25519: 9
};
var curveTypesByVal = {
  0: 'NONE',
  1: 'P256',
  2: 'P384',
  3: 'P521',
  4: 'SECP256K1',
  5: 'X25519',
  6: 'BRAINPOOLP256',
  7: 'BRAINPOOLP384',
  8: 'BRAINPOOLP521',
  9: 'ED25519'
};
var oids = {
  P256: Buffer.from('2a8648ce3d030107', 'hex'),
  P384: Buffer.from('2b81040022', 'hex'),
  P521: Buffer.from('2b81040023', 'hex'),
  SECP256K1: Buffer.from('2b8104000a', 'hex'),
  X25519: Buffer.from('2b060104019755010501', 'hex'),
  BRAINPOOLP256: Buffer.from('2b2403030208010107', 'hex'),
  BRAINPOOLP384: Buffer.from('2b240303020801010b', 'hex'),
  BRAINPOOLP521: Buffer.from('2b240303020801010d', 'hex'),
  ED25519: Buffer.from('2b06010401da470f01', 'hex')
};
var EMPTY$9 = Buffer.alloc(0);
var ZERO$4 = Buffer.alloc(1);
/**
 * PGP Message
 */

class PGPMessage extends bufio.Struct {
  constructor() {
    super();
    this.packets = [];
  }

  getSize() {
    var size = 0;

    for (var pkt of this.packets) {
      size += pkt.getSize();
    }

    return size;
  }

  write(bw) {
    for (var pkt of this.packets) {
      pkt.write(bw);
    }

    return bw;
  }

  read(br) {
    while (br.left()) {
      var pkt = PGPPacket.read(br);
      this.packets.push(pkt);
    }

    return this;
  }

  toString() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PGP MESSAGE';
    assert_1(typeof type === 'string');
    var block = new PEMBlock$2();
    block.type = type;
    block.data = this.encode();
    return block.toString(true);
  }

  fromString(str) {
    var block = PEMBlock$2.fromString(str, true);
    if (block.type.substring(0, 4) !== 'PGP ') throw new Error('PEM type mismatch.');
    return this.decode(block.data);
  }

  format() {
    return {
      packets: this.packets
    };
  }

}
/**
 * PGP Packet
 */


class PGPPacket extends bufio.Struct {
  constructor() {
    super();
    this.type = 0;
    this.body = new PGPUnknown();
  }

  getSize() {
    var len = this.body.getSize();
    var size = 0;
    size += 1;

    if (len < 192) {
      size += 1;
    } else if (len < 8384) {
      size += 2;
    } else {
      size += 5;
    }

    size += len;
    return size;
  }

  write(bw) {
    var len = this.body.getSize();
    bw.writeU8(0x80 | 0x40 | this.type);

    if (len < 192) {
      bw.writeU8(len);
    } else if (len < 8384) {
      len -= 192;
      bw.writeU8(192 + (len >>> 8));
      bw.writeU8(len & 0xff);
    } else {
      bw.writeU8(255);
      bw.writeU32BE(len);
    }

    this.body.write(bw);
    return bw;
  }

  read(br) {
    var ch = br.readU8();
    if ((ch & 0x80) === 0) throw new Error('Hi bit unset in PGP packet header.');
    var type = 0;
    var child = null;

    if ((ch & 0x40) === 0) {
      var t = (ch & 0x3f) >>> 2;
      var s = 1 << (ch & 3);
      var size = 0;

      switch (s) {
        case 1:
          size = br.readU8();
          break;

        case 2:
          size = br.readU16BE();
          break;

        case 4:
          size = br.readU32BE();
          break;

        case 8:
          size = br.left();
          break;
      }

      type = t;
      child = br.readChild(size);
    } else {
      var _t = ch & 0x3f;

      var _s = br.readU8();

      var _size = 0;

      if (_s < 192) {
        _size = _s;
      } else if (_s < 224) {
        _size = (_s - 192) * 0x100;
        _size += br.readU8() + 192;
      } else if (_s < 255) {
        throw new Error('Cannot handle PGP partial length.');
      } else {
        _size = br.readU32BE();
      }

      type = _t;
      child = br.readChild(_size);
    }

    this.type = type;

    switch (this.type) {
      case packetTypes.PUBKEY_ENC:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.SIGNATURE:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.SYMKEY_ENC:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.ONEPASS_SIG:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.PRIVATE_KEY:
        this.body = PGPPrivateKey.read(child);
        break;

      case packetTypes.PUBLIC_KEY:
        this.body = PGPPublicKey.read(child);
        break;

      case packetTypes.PRIVATE_SUBKEY:
        this.body = PGPPrivateKey.read(child);
        break;

      case packetTypes.COMPRESSED:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.ENCRYPTED:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.MARKER:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.PLAINTEXT:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.RING_TRUST:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.USER_ID:
        this.body = PGPUserID.read(child);
        break;

      case packetTypes.PUBLIC_SUBKEY:
        this.body = PGPPublicKey.read(child);
        break;

      case packetTypes.OLD_COMMENT:
        this.body = PGPPublicKey.read(child);
        break;

      case packetTypes.ATTRIBUTE:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.ENCRYPTED_MDC:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.MDC:
        this.body = PGPUnknown.read(child);
        break;

      case packetTypes.ENCRYPTED_AEAD:
        this.body = PGPUnknown.read(child);
        break;

      default:
        this.body = PGPUnknown.read(child);
        break;
    }

    return this;
  }

  format() {
    return {
      type: packetTypesByVal[this.type] || 'UNKNOWN',
      body: this.body
    };
  }

}
/**
 * PGP Body
 */


class PGPBody extends bufio.Struct {
  constructor() {
    super();
  }

}
/**
 * PGP Unknown
 */


class PGPUnknown extends PGPBody {
  constructor() {
    super();
    this.data = EMPTY$9;
  }

  getSize() {
    return this.data.length;
  }

  write(bw) {
    bw.writeBytes(this.data);
    return bw;
  }

  read(br) {
    this.data = br.readBytes(br.left());
    return this;
  }

  format() {
    return {
      data: this.data.toString('hex')
    };
  }

}
/**
 * PGP Public Key
 */


class PGPPublicKey extends PGPBody {
  constructor() {
    super();
    this.version = 4;
    this.algorithm = 0;
    this.expires = 0;
    this.timestamp = 0; // RSA

    this.n = new MPI();
    this.e = new MPI(); // El Gamal

    this.p = new MPI();
    this.g = new MPI();
    this.y = new MPI(); // DSA
    // this.p = new MPI();

    this.q = new MPI(); // this.g = new MPI();
    // this.y = new MPI();
    // ECDH

    this.oid = EMPTY$9;
    this.point = new MPI();
    this.kdfHash = 0;
    this.kdfAlg = 0; // ECDSA
    // this.oid = EMPTY;
    // this.point = new MPI();
    // Unknown

    this.data = EMPTY$9;
  }

  get curve() {
    if (this.oid.equals(oids.P256)) return curveTypes.P256;
    if (this.oid.equals(oids.P384)) return curveTypes.P384;
    if (this.oid.equals(oids.P521)) return curveTypes.P521;
    if (this.oid.equals(oids.SECP256K1)) return curveTypes.SECP256K1;
    if (this.oid.equals(oids.X25519)) return curveTypes.X25519;
    if (this.oid.equals(oids.BRAINPOOLP256)) return curveTypes.BRAINPOOLP256;
    if (this.oid.equals(oids.BRAINPOOLP384)) return curveTypes.BRAINPOOLP384;
    if (this.oid.equals(oids.BRAINPOOLP521)) return curveTypes.BRAINPOOLP521;
    if (this.oid.equals(oids.ED25519)) return curveTypes.ED25519;
    return 0;
  }

  set curve(value) {
    switch (value) {
      case curveTypes.P256:
        this.oid = oids.P256;
        break;

      case curveTypes.P384:
        this.oid = oids.P384;
        break;

      case curveTypes.P521:
        this.oid = oids.P521;
        break;

      case curveTypes.SECP256K1:
        this.oid = oids.SECP256K1;
        break;

      case curveTypes.X25519:
        this.oid = oids.X25519;
        break;

      case curveTypes.BRAINPOOLP256:
        this.oid = oids.BRAINPOOLP256;
        break;

      case curveTypes.BRAINPOOLP384:
        this.oid = oids.BRAINPOOLP384;
        break;

      case curveTypes.BRAINPOOLP521:
        this.oid = oids.BRAINPOOLP521;
        break;

      case curveTypes.ED25519:
        this.oid = oids.ED25519;
        break;
    }
  }

  isRSA() {
    switch (this.algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        return true;
    }

    return false;
  }

  isElgamal() {
    switch (this.algorithm) {
      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        return true;
    }

    return false;
  }

  getSize() {
    var size = 0;
    size += 1;

    switch (this.version) {
      case 2:
      case 3:
        {
          size += 4;
          size += 2;
          size += 1;
          break;
        }

      case 4:
        {
          size += 4;
          size += 1;
          break;
        }

      default:
        {
          throw new Error('Unknown PGP key version.');
        }
    }

    switch (this.algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          size += this.n.getSize();
          size += this.e.getSize();
          break;
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          size += this.p.getSize();
          size += this.g.getSize();
          size += this.y.getSize();
          break;
        }

      case keyTypes.DSA:
        {
          size += this.p.getSize();
          size += this.q.getSize();
          size += this.g.getSize();
          size += this.y.getSize();
          break;
        }

      case keyTypes.ECDH:
        {
          size += 1;
          size += this.oid.length;
          size += this.point.getSize();
          size += 4;
          break;
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          size += 1;
          size += this.oid.length;
          size += this.point.getSize();
          break;
        }

      default:
        {
          size += this.data.length;
          break;
        }
    }

    return size;
  }

  write(bw) {
    bw.writeU8(this.version);

    switch (this.version) {
      case 2:
      case 3:
        {
          if (!this.isRSA()) throw new Error('Unknown PGP key algorithm.');
          bw.writeU32BE(this.timestamp);
          bw.writeU16BE(this.expires);
          bw.writeU8(this.algorithm);
          break;
        }

      case 4:
        {
          bw.writeU32BE(this.timestamp);
          bw.writeU8(this.algorithm);
          break;
        }

      default:
        {
          throw new Error('Unknown PGP key version.');
        }
    }

    switch (this.algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          this.n.write(bw);
          this.e.write(bw);
          break;
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          this.p.write(bw);
          this.g.write(bw);
          this.y.write(bw);
          break;
        }

      case keyTypes.DSA:
        {
          this.p.write(bw);
          this.q.write(bw);
          this.g.write(bw);
          this.y.write(bw);
          break;
        }

      case keyTypes.ECDH:
        {
          bw.writeU8(this.oid.length);
          bw.writeBytes(this.oid);
          this.point.write(bw);
          bw.writeU8(3);
          bw.writeU8(0x01);
          bw.writeU8(this.kdfHash);
          bw.writeU8(this.kdfAlg);
          break;
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          bw.writeU8(this.oid.length);
          bw.writeBytes(this.oid);
          this.point.write(bw);
          break;
        }

      default:
        {
          bw.writeBytes(this.data);
          break;
        }
    }

    return bw;
  }

  read(br) {
    this.version = br.readU8();

    switch (this.version) {
      case 2:
      case 3:
        {
          this.timestamp = br.readU32BE();
          this.expires = br.readU16BE();
          this.algorithm = br.readU8();

          if (!this.isRSA()) {
            if (this.version === 3 && this.isElgamal()) {
              this.expires = 0;
              this.version = 4;
            } else {
              throw new Error('Unknown PGP key algorithm.');
            }
          }

          break;
        }

      case 4:
        {
          this.timestamp = br.readU32BE();
          this.algorithm = br.readU8();
          break;
        }

      default:
        {
          throw new Error('Unknown PGP key version.');
        }
    }

    switch (this.algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          this.n.read(br);
          this.e.read(br);
          break;
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          this.p.read(br);
          this.g.read(br);
          this.y.read(br);
          break;
        }

      case keyTypes.DSA:
        {
          this.p.read(br);
          this.q.read(br);
          this.g.read(br);
          this.y.read(br);
          break;
        }

      case keyTypes.ECDH:
        {
          this.oid = br.readBytes(br.readU8());
          this.point.read(br);
          var size = br.readU8();
          if (size < 3 || size > br.left()) throw new Error('Invalid ECDH params.'); // Reserved.

          if (br.readU8() !== 0x01) throw new Error('Invalid ECDH reserved byte.');
          this.kdfHash = br.readU8();
          this.kdfAlg = br.readU8();
          break;
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          this.oid = br.readBytes(br.readU8());
          this.point.read(br);
          break;
        }

      default:
        {
          this.data = br.readBytes(br.left());
          break;
        }
    }

    return this;
  }

  fingerprint() {
    switch (this.version) {
      case 2:
      case 3:
        {
          if (!this.isRSA()) throw new Error('Unknown PGP key algorithm.');
          var data = bufio.concat(this.n.data, this.e.data);
          return md5Browser.digest(data);
        }

      case 4:
        {
          var size = this.getSize();
          var bw = bufio.write(3 + size);
          bw.writeU8(0x99);
          bw.writeU16BE(size);
          this.write(bw);
          return sha1Browser.digest(bw.render());
        }

      default:
        {
          throw new Error('Unknown PGP key version.');
        }
    }
  }

  id() {
    switch (this.version) {
      case 2:
      case 3:
        {
          if (!this.isRSA()) throw new Error('Unknown PGP key algorithm.');
          if (this.n.data.length < 8) throw new Error('Unknown PGP key algorithm.');
          return this.n.data.slice(this.n.data.length - 8);
        }

      case 4:
        {
          return this.fingerprint().slice(12, 20);
        }

      default:
        {
          throw new Error('Unknown PGP key version.');
        }
    }
  }

  long() {
    return this.id();
  }

  short() {
    return this.id().slice(4, 8);
  }

  matches(id) {
    if (typeof id === 'string') id = decodeID(id);

    switch (id.length) {
      case 4:
        return this.short().equals(id);

      case 8:
        return this.long().equals(id);

      case 16:
      case 20:
        return this.fingerprint().equals(id);

      default:
        return false;
    }
  }

  keyHash() {
    var size = 6;
    if (this.version !== 4) size += 2; // Create a real key hash without any bullshit.

    var raw = this.encode().slice(size - 1);
    raw[0] = this.algorithm;
    return sha256Browser.digest(raw);
  }

  format() {
    var algorithm = keyTypesByVal[this.algorithm] || 'UNKNOWN';
    var version = this.version;
    var timestamp = this.timestamp;
    var expires = this.expires;

    switch (this.algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          return {
            version,
            algorithm,
            timestamp,
            expires,
            n: this.n.data.toString('hex'),
            e: this.e.data.toString('hex')
          };
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          return {
            version,
            algorithm,
            timestamp,
            expires,
            p: this.p.data.toString('hex'),
            g: this.g.data.toString('hex'),
            y: this.y.data.toString('hex')
          };
        }

      case keyTypes.DSA:
        {
          return {
            version,
            algorithm,
            timestamp,
            expires,
            p: this.p.data.toString('hex'),
            q: this.q.data.toString('hex'),
            g: this.g.data.toString('hex'),
            y: this.y.data.toString('hex')
          };
        }

      case keyTypes.ECDH:
        {
          return {
            version,
            algorithm,
            timestamp,
            expires,
            curve: curveTypesByVal[this.curve] || 'UNKNOWN',
            point: this.point.data.toString('hex'),
            kdfHash: this.kdfHash,
            kdfAlg: this.kdfAlg
          };
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          return {
            version,
            algorithm,
            timestamp,
            expires,
            curve: curveTypesByVal[this.curve] || 'UNKNOWN',
            point: this.point.data.toString('hex')
          };
        }

      default:
        {
          return {
            version,
            algorithm,
            timestamp,
            expires,
            data: this.data.toString('hex')
          };
        }
    }
  }

}
/**
 * PGP Private Key
 */


class PGPPrivateKey extends PGPBody {
  constructor() {
    super();
    this.key = new PGPPublicKey();
    this.params = new CipherParams();
    this.data = EMPTY$9;
  }

  secret(passphrase) {
    var data = this.data;

    if (this.params.encrypted) {
      if (passphrase == null) throw new Error('Key requires a passphrase.');
      data = this.params.decrypt(data, passphrase);
    }

    return SecretKey.decode(data, this.key.algorithm);
  }

  getSize() {
    var size = 0;
    size += this.key.getSize();
    size += this.params.getSize();
    size += this.data.length;
    return size;
  }

  write(bw) {
    this.key.write(bw);
    this.params.write(bw);
    bw.writeBytes(this.data);
    return bw;
  }

  read(br) {
    this.key.read(br);
    this.params.read(br);
    this.data = br.readBytes(br.left());
    return this;
  }

  format() {
    var params = null;
    var data = null;

    if (this.params.encrypted) {
      params = this.params;
      data = this.data.toString('hex');
    } else {
      params = null;
      data = this.secret();
    }

    return {
      key: this.key,
      params,
      data
    };
  }

}
/**
 * Cipher Params
 */


class CipherParams extends bufio.Struct {
  constructor() {
    super();
    this.encrypted = false;
    this.checksum = false;
    this.cipher = 0;
    this.s2k = new S2K();
    this.iv = EMPTY$9;
  }

  blockSize() {
    switch (this.cipher) {
      case cipherTypes.IDEA:
      case cipherTypes.DES3:
      case cipherTypes.CAST5:
      case cipherTypes.BLOWFISH:
        return 8;

      case cipherTypes.AES128:
      case cipherTypes.AES192:
      case cipherTypes.AES256:
      case cipherTypes.TWOFISH:
      case cipherTypes.CAMELLIA128:
      case cipherTypes.CAMELLIA192:
      case cipherTypes.CAMELLIA256:
        return 16;

      default:
        throw new Error('Unknown cipher type.');
    }
  }

  keySize() {
    switch (this.cipher) {
      case cipherTypes.IDEA:
        return 16;

      case cipherTypes.DES3:
        return 24;

      case cipherTypes.CAST5:
        return 16;

      case cipherTypes.BLOWFISH:
        return 16;

      case cipherTypes.AES128:
        return 16;

      case cipherTypes.AES192:
        return 24;

      case cipherTypes.AES256:
        return 32;

      case cipherTypes.TWOFISH:
        return 32;

      case cipherTypes.CAMELLIA128:
        return 16;

      case cipherTypes.CAMELLIA192:
        return 24;

      case cipherTypes.CAMELLIA256:
        return 32;

      default:
        throw new Error('Unknown cipher type.');
    }
  }

  algName() {
    switch (this.cipher) {
      case cipherTypes.IDEA:
        return 'IDEA-CFB';

      case cipherTypes.DES3:
        return 'DES-EDE3-CFB';

      case cipherTypes.CAST5:
        return 'CAST5-CFB';

      case cipherTypes.BLOWFISH:
        return 'BF-CFB';

      case cipherTypes.AES128:
        return 'AES-128-CFB';

      case cipherTypes.AES192:
        return 'AES-192-CFB';

      case cipherTypes.AES256:
        return 'AES-256-CFB';

      case cipherTypes.TWOFISH:
        return 'TWOFISH-256-CFB';

      case cipherTypes.CAMELLIA128:
        return 'CAMELLIA-128-CFB';

      case cipherTypes.CAMELLIA192:
        return 'CAMELLIA-192-CFB';

      case cipherTypes.CAMELLIA256:
        return 'CAMELLIA-256-CFB';

      default:
        throw new Error('Unknown cipher type.');
    }
  }

  derive(passphrase) {
    if (!this.encrypted) throw new Error('Cannot derive passphrase.');
    return this.s2k.derive(passphrase, this.keySize());
  }

  encipher(pt, key) {
    assert_1(Buffer.isBuffer(pt));
    var name = this.algName();
    var add = this.checksum ? 20 : 2;
    var padded = Buffer.allocUnsafe(pt.length + add);
    pt.copy(padded, 0);

    if (this.checksum) {
      sha1Browser.digest(pt).copy(padded, pt.length);
    } else {
      var sum = 0;

      for (var i = 0; i < pt.length; i++) {
        sum += pt[i];
        sum &= 0xffff;
      }

      bufio.writeU16BE(padded, sum, pt.length);
    }

    return cipherBrowser.encrypt(name, key, this.iv, padded);
  }

  decipher(ct, key) {
    var name = this.algName();
    var padded = cipherBrowser.decrypt(name, key, this.iv, ct);

    if (this.checksum) {
      if (padded.length < 20) throw new Error('Truncated data.');

      var _pt = padded.slice(0, -20);

      var _chk = padded.slice(-20);

      var _sum = sha1Browser.digest(_pt);

      if (!_sum.equals(_chk)) throw new Error('Invalid checksum.');
      return _pt;
    }

    if (padded.length < 2) throw new Error('Truncated data.');
    var pt = padded.slice(0, -2);
    var chk = bufio.readU16BE(padded, padded.length - 2);
    var sum = 0;

    for (var i = 0; i < pt.length; i++) {
      sum += pt[i];
      sum &= 0xffff;
    }

    if (sum !== chk) throw new Error('Invalid checksum.');
    return pt;
  }

  encrypt(data, passphrase) {
    var key = this.derive(passphrase);
    return this.encipher(data, key);
  }

  decrypt(data, passphrase) {
    var key = this.derive(passphrase);
    return this.decipher(data, key);
  }

  getSize() {
    var size = 0;

    if (this.encrypted) {
      size += 1;
      size += 1;
      size += this.s2k.getSize();
      size += this.iv.length;
    } else {
      size += 1;
    }

    return size;
  }

  write(bw) {
    if (this.encrypted) {
      assert_1(this.iv.length === this.blockSize());
      bw.writeU8(this.checksum ? 0xfe : 0xff);
      bw.writeU8(this.cipher);
      this.s2k.write(bw);
      bw.writeBytes(this.iv);
    } else {
      bw.writeU8(0x00);
    }

    return bw;
  }

  read(br) {
    var type = br.readU8();

    switch (type) {
      case 0x00:
        break;

      case 0xfe:
      case 0xff:
        this.encrypted = true;
        this.checksum = type === 0xfe;
        this.cipher = br.readU8();
        this.s2k.read(br);
        this.iv = br.readBytes(this.blockSize());
        break;

      default:
        throw new Error('Unknown S2K type.');
    }

    return this;
  }

  format() {
    return {
      encrypted: this.encrypted,
      checksum: this.checksum,
      cipher: cipherTypesByVal[this.cipher] || 'UNKNOWN',
      s2k: this.s2k,
      iv: this.iv.toString('hex')
    };
  }

}
/**
 * S2K
 */


class S2K extends bufio.Struct {
  constructor() {
    super();
    this.mode = 0;
    this.hash = 0;
    this.count = 0;
    this.salt = EMPTY$9;
  }

  derive(passphrase, size) {
    assert_1(typeof passphrase === 'string');
    assert_1(size >>> 0 === size);
    var input = Buffer.from(passphrase, 'binary');
    var hash = hashToHash[this.hash];
    if (!hash) throw new Error('Unknown hash.');

    switch (this.mode) {
      case 0:
        return this._simple(hash, input, size);

      case 1:
        return this._salted(hash, input, size);

      case 3:
        return this._iterated(hash, input, size);

      default:
        throw new Error('Unknown S2K mode.');
    }
  }

  _simple(hash, input, size) {
    return this._hash(hash, input, EMPTY$9, size);
  }

  _salted(hash, input, size) {
    return this._hash(hash, input, this.salt, size);
  }

  _hash(hash, input, salt, size) {
    assert_1(hash && typeof hash.id === 'string');
    assert_1(Buffer.isBuffer(input));
    assert_1(Buffer.isBuffer(salt));
    assert_1(size >>> 0 === size);
    var ctx = hash.ctx;
    var out = Buffer.alloc(size);
    var i = 0;
    var pos = 0;

    while (pos < size) {
      ctx.init();

      for (var j = 0; j < i; j++) {
        ctx.update(ZERO$4);
      }

      ctx.update(salt);
      ctx.update(input);
      pos += ctx.final().copy(out, pos);
      i += 1;
    }

    return out;
  }

  _iterated(hash, input, size) {
    assert_1(hash && typeof hash.id === 'string');
    assert_1(Buffer.isBuffer(input));
    assert_1(size >>> 0 === size);
    var salt = this.salt;
    var ctx = hash.ctx;
    var out = Buffer.alloc(size);
    var combined = bufio.concat(salt, input);
    var count = this.count;
    if (count < combined.length) count = combined.length;
    var i = 0;
    var pos = 0;

    while (pos < size) {
      ctx.init();

      for (var j = 0; j < i; j++) {
        ctx.update(ZERO$4);
      }

      var w = 0;

      while (w < count) {
        if (w + combined.length > count) {
          var todo = count - w;
          ctx.update(combined.slice(0, todo));
          w = count;
        } else {
          ctx.update(combined);
          w += combined.length;
        }
      }

      pos += ctx.final().copy(out, pos);
      i += 1;
    }

    return out;
  }

  getSize() {
    var size = 2;

    switch (this.mode) {
      case 0:
        break;

      case 1:
        size += 8;
        break;

      case 3:
        size += 8;
        size += 1;
        break;

      default:
        throw new Error('Unknown S2K function.');
    }

    return size;
  }

  write(bw) {
    bw.writeU8(this.mode);
    bw.writeU8(this.hash);

    switch (this.mode) {
      case 0:
        break;

      case 1:
        bw.writeBytes(this.salt);
        break;

      case 3:
        bw.writeBytes(this.salt);
        bw.writeU8(encodeCount(this.count));
        break;

      default:
        throw new Error('Unknown S2K function.');
    }

    return bw;
  }

  read(br) {
    this.mode = br.readU8();
    this.hash = br.readU8();

    switch (this.mode) {
      case 0:
        break;

      case 1:
        this.salt = br.readBytes(8);
        break;

      case 3:
        this.salt = br.readBytes(8);
        this.count = decodeCount(br.readU8());
        break;

      default:
        throw new Error('Unknown S2K function.');
    }

    return this;
  }

  format() {
    return {
      mode: this.mode,
      hash: hashTypesByVal[this.hash] || 'UNKNOWN',
      count: this.count,
      salt: this.salt.toString('hex')
    };
  }

}
/**
 * Secret Key
 */


class SecretKey extends bufio.Struct {
  constructor() {
    super(); // RSA

    this.d = new MPI();
    this.q = new MPI();
    this.p = new MPI();
    this.qi = new MPI(); // DSA

    this.x = new MPI(); // El Gamal
    // this.x = new MPI();
    // ECDSA
    // this.d = new MPI();
  }

  getSize(algorithm) {
    assert_1((algorithm & 0xff) === algorithm);
    var size = 0;

    switch (algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          size += this.d.getSize();
          size += this.q.getSize();
          size += this.p.getSize();
          size += this.qi.getSize();
          break;
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          size += this.x.getSize();
          break;
        }

      case keyTypes.DSA:
        {
          size += this.x.getSize();
          break;
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          size += this.d.getSize();
          break;
        }

      default:
        {
          throw new Error('Unknown key type.');
        }
    }

    return size;
  }

  write(bw, algorithm) {
    assert_1((algorithm & 0xff) === algorithm);

    switch (algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          this.d.write(bw);
          this.q.write(bw);
          this.p.write(bw);
          this.qi.write(bw);
          break;
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          this.x.write(bw);
          break;
        }

      case keyTypes.DSA:
        {
          this.x.write(bw);
          break;
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          this.d.write(bw);
          break;
        }

      default:
        {
          throw new Error('Unknown key type.');
        }
    }

    return bw;
  }

  read(br, algorithm) {
    assert_1((algorithm & 0xff) === algorithm);

    switch (algorithm) {
      case keyTypes.RSA:
      case keyTypes.RSA_ENCRYPT_ONLY:
      case keyTypes.RSA_SIGN_ONLY:
        {
          this.d.read(br);
          this.q.read(br);
          this.p.read(br);
          this.qi.read(br);
          break;
        }

      case keyTypes.ELGAMAL:
      case keyTypes.ELGAMAL_LEGACY:
        {
          this.x.read(br);
          break;
        }

      case keyTypes.DSA:
        {
          this.x.read(br);
          break;
        }

      case keyTypes.ECDSA:
      case keyTypes.EDDSA:
        {
          this.d.read(br);
          break;
        }

      default:
        {
          throw new Error('Unknown key type.');
        }
    }

    return this;
  }

  format() {
    if (this.p.data.length > 0) {
      return {
        d: this.d.data.toString('hex'),
        q: this.q.data.toString('hex'),
        p: this.p.data.toString('hex'),
        qi: this.qi.data.toString('hex')
      };
    }

    if (this.x.data.length > 0) {
      return {
        x: this.x.data.toString('hex')
      };
    }

    if (this.d.data.length > 0) {
      return {
        d: this.d.data.toString('hex')
      };
    }

    return {
      d: this.d.data.toString('hex'),
      q: this.q.data.toString('hex'),
      p: this.p.data.toString('hex'),
      qi: this.qi.data.toString('hex'),
      x: this.x.data.toString('hex')
    };
  }

}
/**
 * PGP User ID
 */


class PGPUserID extends PGPBody {
  constructor() {
    super();
    this.id = '';
  }

  getSize() {
    return Buffer.byteLength(this.id, 'utf8');
  }

  write(bw) {
    bw.writeString(this.id, 'utf8');
    return bw;
  }

  read(br) {
    this.id = br.readString(br.left(), 'utf8');
    return this;
  }

  format() {
    return {
      id: this.id
    };
  }

}
/**
 * MPI
 */


class MPI extends bufio.Struct {
  constructor(data) {
    super();
    this.bits = 0;
    this.data = EMPTY$9;
    if (data != null) this.fromOptions(data);
  }

  get() {
    return this.data;
  }

  set(data) {
    return this.fromOptions(data);
  }

  fromOptions(data) {
    assert_1(Buffer.isBuffer(data));
    this.bits = countLeft$3(data);
    this.data = data;
    return this;
  }

  getSize() {
    return 2 + this.data.length;
  }

  write(bw) {
    bw.writeU16BE(this.bits);
    bw.writeBytes(this.data);
    return bw;
  }

  read(br) {
    if (br.left() === 0) return this;
    var bits = br.readU16BE();
    var size = bits + 7 >>> 3;
    var s = Math.min(size, br.left());
    var data = br.readBytes(s);
    this.bits = bits;
    this.data = data;
    return this;
  }

}
/*
 * ID Parsing
 */


function encodeID(raw) {
  assert_1(Buffer.isBuffer(raw));

  switch (raw.length) {
    case 4:
    case 8:
    case 16:
    case 20:
      break;

    default:
      throw new Error('Invalid PGP key id/fingerprint.');
  }

  var id = raw.toString('hex');
  return "0x".concat(id.toUpperCase());
}

function decodeID(id) {
  assert_1(typeof id === 'string');
  id = id.replace(/[\t ]/g, '');

  if (id.length >= 2 && id.charCodeAt(0) === 0x30 && (id.charCodeAt(1) | 0x20) === 0x78) {
    id = id.substring(2);
  }

  if (id.length > 40) throw new Error('Invalid PGP key id/fingerprint.');
  var raw = Buffer.from(id, 'hex');
  if (raw.length !== id.length >>> 1) throw new Error('Invalid PGP key id/fingerprint.');

  switch (raw.length) {
    case 4:
    case 8:
    case 16:
    case 20:
      break;

    default:
      throw new Error('Invalid PGP key id/fingerprint.');
  }

  return raw;
}
/*
 * Helpers
 */


function encodeCount(i) {
  assert_1(i >>> 0 === i);
  if (i < 1024 || i > 65011712) throw new RangeError('Invalid iteration count.');

  for (var j = 0; j < 256; j++) {
    var c = decodeCount(j);
    if (c >= i) return j;
  }

  return 255;
}

function decodeCount(c) {
  assert_1((c & 0xff) === c);
  return 16 + (c & 15) << (c >>> 4) + 6;
}
/*
 * Expose
 */


var packetTypes_1 = packetTypes;
var packetTypesByVal_1 = packetTypesByVal;
var sigTypes_1 = sigTypes;
var sigTypesByVal_1 = sigTypesByVal;
var keyTypes_1 = keyTypes;
var keyTypesByVal_1 = keyTypesByVal;
var cipherTypes_1 = cipherTypes;
var cipherTypesByVal_1 = cipherTypesByVal;
var hashTypes_1 = hashTypes;
var hashTypesByVal_1 = hashTypesByVal;
var compressTypes_1 = compressTypes;
var compressTypesByVal_1 = compressTypesByVal;
var curveTypes_1 = curveTypes;
var curveTypesByVal_1 = curveTypesByVal;
var oids_1 = oids;
var PGPMessage_1 = PGPMessage;
var PGPPacket_1 = PGPPacket;
var PGPBody_1 = PGPBody;
var PGPUnknown_1 = PGPUnknown;
var PGPPublicKey_1 = PGPPublicKey;
var PGPPrivateKey_1 = PGPPrivateKey;
var CipherParams_1 = CipherParams;
var S2K_1 = S2K;
var SecretKey_1 = SecretKey;
var PGPUserID_1 = PGPUserID;
var MPI_1 = MPI;
var encodeID_1 = encodeID;
var decodeID_1 = decodeID;
var pgp = {
  packetTypes: packetTypes_1,
  packetTypesByVal: packetTypesByVal_1,
  sigTypes: sigTypes_1,
  sigTypesByVal: sigTypesByVal_1,
  keyTypes: keyTypes_1,
  keyTypesByVal: keyTypesByVal_1,
  cipherTypes: cipherTypes_1,
  cipherTypesByVal: cipherTypesByVal_1,
  hashTypes: hashTypes_1,
  hashTypesByVal: hashTypesByVal_1,
  compressTypes: compressTypes_1,
  compressTypesByVal: compressTypesByVal_1,
  curveTypes: curveTypes_1,
  curveTypesByVal: curveTypesByVal_1,
  oids: oids_1,
  PGPMessage: PGPMessage_1,
  PGPPacket: PGPPacket_1,
  PGPBody: PGPBody_1,
  PGPUnknown: PGPUnknown_1,
  PGPPublicKey: PGPPublicKey_1,
  PGPPrivateKey: PGPPrivateKey_1,
  CipherParams: CipherParams_1,
  S2K: S2K_1,
  SecretKey: SecretKey_1,
  PGPUserID: PGPUserID_1,
  MPI: MPI_1,
  encodeID: encodeID_1,
  decodeID: decodeID_1
};

/**
 * RC4
 */


class RC4 {
  constructor() {
    this.s = new Uint32Array(256);
    this.i = 0;
    this.j = 0;
  }

  init(key) {
    assert_1(Buffer.isBuffer(key));
    var k = key.length;
    if (k < 1 || k > 256) throw new Error('Invalid key size.');
    var s = this.s;

    for (var i = 0; i < 256; i++) {
      s[i] = i;
    }

    var j = 0;

    for (var _i = 0; _i < 256; _i++) {
      j += s[_i] + key[_i % k];
      j &= 0xff;
      [s[_i], s[j]] = [s[j], s[_i]];
    }

    return this;
  }

  encrypt(data) {
    return this.crypt(data, data);
  }

  crypt(input, output) {
    assert_1(Buffer.isBuffer(input));
    assert_1(Buffer.isBuffer(output));
    if (output.length < input.length) throw new Error('Invalid output size.');
    var s = this.s;
    var {
      i,
      j
    } = this;
    var x, y;

    for (var k = 0; k < input.length; k++) {
      i += 1;
      i &= 0xff;
      x = s[i];
      j += x;
      j &= 0xff;
      y = s[j];
      s[i] = y;
      s[j] = x;
      output[k] = input[k] ^ s[x + y & 0xff];
    }

    this.i = i;
    this.j = j;
    return output;
  }

  destroy() {
    for (var i = 0; i < 256; i++) {
      this.s[i] = 0;
    }

    return this;
  }

}
/*
 * Static
 */


RC4.native = 0;
/*
 * Expose
 */

var rc4 = RC4;

var {
  countLeft: countLeft$4,
  trimLeft: trimLeft$4
} = util$1;
var {
  custom: custom$6
} = customBrowser;
/*
 * Constants
 */

var DEFAULT_BITS$2 = 2048;
var DEFAULT_EXP = 65537;
var MIN_BITS$2 = 512;
var MAX_BITS$2 = 16384;
var MIN_EXP = 3;
var MAX_EXP = 2 ** 33 - 1;
var MIN_EXP_BITS = 2;
var MAX_EXP_BITS = 33;
var ZERO$5 = Buffer.alloc(1, 0x00);
/**
 * RSAKey
 */

class RSAKey {
  constructor() {
    this.n = ZERO$5; // modulus

    this.e = ZERO$5; // public exponent
  }

  setN(n) {
    this.n = trimLeft$4(n);
    return this;
  }

  setE(e) {
    if (typeof e === 'number') e = toU64(e);
    this.e = trimLeft$4(e);
    return this;
  }

  bits() {
    return countLeft$4(this.n);
  }

  size() {
    return this.bits() + 7 >>> 3;
  }

  pad(sig) {
    assert_1(Buffer.isBuffer(sig));
    var bits = this.bits();
    if (bits < MIN_BITS$2 || bits > MAX_BITS$2) return sig;
    var size = bits + 7 >>> 3;
    if (sig.length >= size) return sig;
    var out = Buffer.allocUnsafe(size);
    var pos = size - sig.length;
    out.fill(0x00, 0, pos);
    sig.copy(out, pos);
    return out;
  }

  toPublic() {
    return this;
  }

  toJSON() {
    return {
      kty: 'RSA',
      n: base64.encodeURL(this.n),
      e: base64.encodeURL(this.e),
      ext: true
    };
  }

  fromJSON(json) {
    assert_1(json && typeof json === 'object');
    assert_1(json.kty === 'RSA');
    this.n = base64.decodeURL(json.n);
    this.e = base64.decodeURL(json.e);
    return this;
  }

  [custom$6]() {
    return this.format();
  }

  format() {
    return {
      bits: this.bits(),
      n: this.n.toString('hex'),
      e: this.e.toString('hex')
    };
  }

  static fromJSON(json) {
    return new this().fromJSON(json);
  }

}
/**
 * RSAPublicKey
 */


class RSAPublicKey$1 extends RSAKey {
  constructor(n, e) {
    super();
    this.n = trimLeft$4(n); // modulus

    this.e = trimLeft$4(e); // public exponent
  }

}
/**
 * RSAPrivateKey
 */


class RSAPrivateKey$1 extends RSAKey {
  constructor(n, e, d, p, q, dp, dq, qi) {
    super();
    this.n = trimLeft$4(n); // modulus

    this.e = trimLeft$4(e); // public exponent

    this.d = trimLeft$4(d); // private exponent

    this.p = trimLeft$4(p); // prime1

    this.q = trimLeft$4(q); // prime2

    this.dp = trimLeft$4(dp); // exponent1

    this.dq = trimLeft$4(dq); // exponent2

    this.qi = trimLeft$4(qi); // coefficient
  }

  setD(d) {
    this.d = trimLeft$4(d);
    return this;
  }

  setP(p) {
    this.p = trimLeft$4(p);
    return this;
  }

  setQ(q) {
    this.q = trimLeft$4(q);
    return this;
  }

  setDP(dp) {
    this.dp = trimLeft$4(dp);
    return this;
  }

  setDQ(dq) {
    this.dq = trimLeft$4(dq);
    return this;
  }

  setQI(qi) {
    this.qi = trimLeft$4(qi);
    return this;
  }

  toPublic() {
    var key = new RSAPublicKey$1();
    key.n = this.n;
    key.e = this.e;
    return key;
  }

  toJSON() {
    return {
      kty: 'RSA',
      n: base64.encodeURL(this.n),
      e: base64.encodeURL(this.e),
      d: base64.encodeURL(this.d),
      p: base64.encodeURL(this.p),
      q: base64.encodeURL(this.q),
      dp: base64.encodeURL(this.dp),
      dq: base64.encodeURL(this.dq),
      qi: base64.encodeURL(this.qi),
      ext: true
    };
  }

  fromJSON(json) {
    assert_1(json && typeof json === 'object');
    assert_1(json.kty === 'RSA');
    if (json.n != null) this.n = base64.decodeURL(json.n);
    if (json.e != null) this.e = base64.decodeURL(json.e);
    if (json.d != null) this.d = base64.decodeURL(json.d);
    if (json.p != null) this.p = base64.decodeURL(json.p);
    if (json.q != null) this.q = base64.decodeURL(json.q);
    if (json.dp != null) this.dp = base64.decodeURL(json.dp);
    if (json.dq != null) this.dq = base64.decodeURL(json.dq);
    if (json.qi != null) this.qi = base64.decodeURL(json.qi);
    return this;
  }

  format() {
    return {
      bits: this.bits(),
      n: this.n.toString('hex'),
      e: this.e.toString('hex'),
      d: this.d.toString('hex'),
      p: this.p.toString('hex'),
      q: this.q.toString('hex'),
      dp: this.dp.toString('hex'),
      dq: this.dq.toString('hex'),
      qi: this.qi.toString('hex')
    };
  }

}
/*
 * Helpers
 */


function toU64(n) {
  assert_1(Number.isSafeInteger(n) && n >= 0);
  var hi = n * (1 / 0x100000000) >>> 0;
  var lo = n >>> 0;
  var b = Buffer.allocUnsafe(8);
  b[0] = 0;
  b[1] = 0;
  b[2] = hi >>> 8;
  b[3] = hi;
  b[4] = lo >>> 24;
  b[5] = lo >>> 16;
  b[6] = lo >>> 8;
  b[7] = lo;
  return b;
}
/*
 * Expose
 */


var DEFAULT_BITS_1$1 = DEFAULT_BITS$2;
var DEFAULT_EXP_1 = DEFAULT_EXP;
var MIN_BITS_1$1 = MIN_BITS$2;
var MAX_BITS_1$1 = MAX_BITS$2;
var MIN_EXP_1 = MIN_EXP;
var MAX_EXP_1 = MAX_EXP;
var MIN_EXP_BITS_1 = MIN_EXP_BITS;
var MAX_EXP_BITS_1 = MAX_EXP_BITS;
var RSAKey_1 = RSAKey;
var RSAPublicKey_1$1 = RSAPublicKey$1;
var RSAPrivateKey_1$1 = RSAPrivateKey$1;
var rsakey = {
  DEFAULT_BITS: DEFAULT_BITS_1$1,
  DEFAULT_EXP: DEFAULT_EXP_1,
  MIN_BITS: MIN_BITS_1$1,
  MAX_BITS: MAX_BITS_1$1,
  MIN_EXP: MIN_EXP_1,
  MAX_EXP: MAX_EXP_1,
  MIN_EXP_BITS: MIN_EXP_BITS_1,
  MAX_EXP_BITS: MAX_EXP_BITS_1,
  RSAKey: RSAKey_1,
  RSAPublicKey: RSAPublicKey_1$1,
  RSAPrivateKey: RSAPrivateKey_1$1
};

/*
 * Safe
 */


function safeCompare(x, y) {
  assert_1(Buffer.isBuffer(x));
  assert_1(Buffer.isBuffer(y));
  if (safeEqualInt(y.length, 0)) return safeEqualInt(x.length, 0);
  var v = x.length ^ y.length;

  for (var i = 0; i < x.length; i++) {
    v |= x[i] ^ y[i % y.length];
  }

  return safeEqualByte(v, 0);
}

function safeEqual(x, y) {
  assert_1(Buffer.isBuffer(x));
  assert_1(Buffer.isBuffer(y)); // Assumes the lengths of both
  // `x` and `y` are not secret.

  if (x.length !== y.length) return 0;
  var v = 0;

  for (var i = 0; i < x.length; i++) {
    v |= x[i] ^ y[i];
  }

  return safeEqualByte(v, 0);
}

function safeEqualByte(x, y) {
  return safeEqualInt(x & 0xff, y & 0xff);
}

function safeEqualInt(x, y) {
  return (x ^ y) - 1 >>> 31;
}

function safeSelect(v, x, y) {
  return ~(v - 1) & x | v - 1 & y;
}

function safeLTE(x, y) {
  return x - y - 1 >>> 31 & 1;
}

function safeCopy(v, x, y) {
  assert_1(Number.isSafeInteger(v));
  assert_1(Buffer.isBuffer(x));
  assert_1(Buffer.isBuffer(y));
  assert_1(x.length === y.length);
  var xmask = v - 1 & 0xff;
  var ymask = ~(v - 1) & 0xff;

  for (var i = 0; i < x.length; i++) {
    x[i] = x[i] & xmask | y[i] & ymask;
  }
}
/*
 * Expose
 */


var safeCompare_1 = safeCompare;
var safeEqual_1 = safeEqual;
var safeEqualByte_1 = safeEqualByte;
var safeEqualInt_1 = safeEqualInt;
var safeSelect_1 = safeSelect;
var safeLTE_1 = safeLTE;
var safeCopy_1 = safeCopy;
var safe = {
  safeCompare: safeCompare_1,
  safeEqual: safeEqual_1,
  safeEqualByte: safeEqualByte_1,
  safeEqualInt: safeEqualInt_1,
  safeSelect: safeSelect_1,
  safeLTE: safeLTE_1,
  safeCopy: safeCopy_1
};

var {
  randomPrime: randomPrime$1
} = primes$1;
var {
  countLeft: countLeft$5
} = util$1;
var {
  DEFAULT_BITS: DEFAULT_BITS$3,
  DEFAULT_EXP: DEFAULT_EXP$1,
  MIN_BITS: MIN_BITS$3,
  MAX_BITS: MAX_BITS$3,
  MIN_EXP: MIN_EXP$1,
  MAX_EXP: MAX_EXP$1,
  MIN_EXP_BITS: MIN_EXP_BITS$1,
  MAX_EXP_BITS: MAX_EXP_BITS$1,
  RSAKey: RSAKey$1,
  RSAPrivateKey: RSAPrivateKey$2,
  RSAPublicKey: RSAPublicKey$2
} = rsakey;
var {
  safeEqual: safeEqual$1,
  safeEqualByte: safeEqualByte$1,
  safeSelect: safeSelect$1,
  safeLTE: safeLTE$1
} = safe;
/*
 * Constants
 */

var EMPTY$a = Buffer.alloc(0);
var PREFIX$1 = Buffer.alloc(8, 0x00);
/**
 * PKCS1v1.5+ASN.1 DigestInfo prefixes.
 * @see https://www.ietf.org/rfc/rfc3447.txt - Section 9.2
 * @const {Object}
 */

var digestInfo = {
  BLAKE2B160: Buffer.from('3027300f060b2b060104018d3a0c02010505000414', 'hex'),
  BLAKE2B256: Buffer.from('3033300f060b2b060104018d3a0c02010805000420', 'hex'),
  BLAKE2B384: Buffer.from('3043300f060b2b060104018d3a0c02010c05000430', 'hex'),
  BLAKE2B512: Buffer.from('3053300f060b2b060104018d3a0c02011005000440', 'hex'),
  BLAKE2S128: Buffer.from('3023300f060b2b060104018d3a0c02020405000410', 'hex'),
  BLAKE2S160: Buffer.from('3027300f060b2b060104018d3a0c02020505000414', 'hex'),
  BLAKE2S224: Buffer.from('302f300f060b2b060104018d3a0c0202070500041c', 'hex'),
  BLAKE2S256: Buffer.from('3033300f060b2b060104018d3a0c02020805000420', 'hex'),
  GOST94: Buffer.from('302e300a06062a850302021405000420', 'hex'),
  KECCAK224: Buffer.from('302d300d06096086480165030402070500041c', 'hex'),
  KECCAK256: Buffer.from('3031300d060960864801650304020805000420', 'hex'),
  KECCAK384: Buffer.from('3041300d060960864801650304020905000430', 'hex'),
  KECCAK512: Buffer.from('3051300d060960864801650304020a05000440', 'hex'),
  MD2: Buffer.from('3020300c06082a864886f70d020205000410', 'hex'),
  MD4: Buffer.from('3020300c06082a864886f70d020405000410', 'hex'),
  MD5: Buffer.from('3020300c06082a864886f70d020505000410', 'hex'),
  MD5SHA1: Buffer.alloc(0),
  RIPEMD160: Buffer.from('3022300a060628cf0603003105000414', 'hex'),
  SHA1: Buffer.from('3021300906052b0e03021a05000414', 'hex'),
  SHA224: Buffer.from('302d300d06096086480165030402040500041c', 'hex'),
  SHA256: Buffer.from('3031300d060960864801650304020105000420', 'hex'),
  SHA384: Buffer.from('3041300d060960864801650304020205000430', 'hex'),
  SHA512: Buffer.from('3051300d060960864801650304020305000440', 'hex'),
  SHA3_224: Buffer.from('302d300d06096086480165030402070500041c', 'hex'),
  SHA3_256: Buffer.from('3031300d060960864801650304020805000420', 'hex'),
  SHA3_384: Buffer.from('3041300d060960864801650304020905000430', 'hex'),
  SHA3_512: Buffer.from('3051300d060960864801650304020a05000440', 'hex'),
  SHAKE128: Buffer.from('3021300d060960864801650304020b05000410', 'hex'),
  SHAKE256: Buffer.from('3031300d060960864801650304020c05000420', 'hex'),
  WHIRLPOOL: Buffer.from('304e300a060628cf0603003705000440', 'hex')
};
/**
 * Generate a private key.
 * @param {Number} [bits=2048]
 * @param {Number} [exponent=65537]
 * @returns {RSAPrivateKey} Private key.
 */

function privateKeyGenerate$1(bits, exponent) {
  if (bits == null) bits = DEFAULT_BITS$3;
  if (exponent == null) exponent = DEFAULT_EXP$1;
  assert_1(bits >>> 0 === bits);
  assert_1(Number.isSafeInteger(exponent) && exponent >= 0);
  if (bits < MIN_BITS$3 || bits > MAX_BITS$3) throw new RangeError("\"bits\" ranges from ".concat(MIN_BITS$3, " to ").concat(MAX_BITS$3, "."));
  if (exponent < MIN_EXP$1 || exponent > MAX_EXP$1) throw new RangeError("\"exponent\" ranges from ".concat(MIN_EXP$1, " to ").concat(MAX_EXP$1, "."));
  if (exponent === 1 || exponent % 2 === 0) throw new RangeError('"exponent" must be odd.');
  var [key] = generateKey(2, bits, exponent);
  return key;
}
/**
 * Generate a private key.
 * @param {Number} [bits=2048]
 * @param {Number} [exponent=65537]
 * @returns {RSAPrivateKey} Private key.
 */


function privateKeyGenerateAsync$1(_x, _x2) {
  return _privateKeyGenerateAsync$1.apply(this, arguments);
}
/**
 * Pre-compute a private key.
 * @param {RSAPrivateKey}
 * @returns {RSAPrivateKey}
 */


function _privateKeyGenerateAsync$1() {
  _privateKeyGenerateAsync$1 = _asyncToGenerator(function* (bits, exponent) {
    if (bits == null) bits = DEFAULT_BITS$3;
    if (exponent == null) exponent = DEFAULT_EXP$1;
    assert_1(bits >>> 0 === bits);
    assert_1(Number.isSafeInteger(exponent) && exponent >= 0);
    if (bits < MIN_BITS$3 || bits > MAX_BITS$3) throw new RangeError("\"bits\" ranges from ".concat(MIN_BITS$3, " to ").concat(MAX_BITS$3, "."));
    if (exponent < MIN_EXP$1 || exponent > MAX_EXP$1) throw new RangeError("\"exponent\" ranges from ".concat(MIN_EXP$1, " to ").concat(MAX_EXP$1, "."));
    if (exponent === 1 || exponent % 2 === 0) throw new RangeError('"exponent" must be odd.');

    try {
      return yield generateSubtle(bits, exponent);
    } catch (e) {
      return privateKeyGenerate$1(bits, exponent);
    }
  });
  return _privateKeyGenerateAsync$1.apply(this, arguments);
}

function privateKeyCompute$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  if (!isSaneCompute$1(key)) throw new Error('Invalid RSA private key.');
  if (!needsCompute$1(key)) return key;
  var p = bnBrowser.decode(key.p);
  var q = bnBrowser.decode(key.q);
  var n = bnBrowser.decode(key.n);
  var e = bnBrowser.decode(key.e);
  var d = bnBrowser.decode(key.d);
  var dp = bnBrowser.decode(key.dp);
  var dq = bnBrowser.decode(key.dq);
  var qi = bnBrowser.decode(key.qi);

  if (n.bitLength() === 0) {
    n = p.mul(q);
    key.n = n.encode();
  }

  if (e.bitLength() === 0) {
    var t = p.subn(1).imul(q.subn(1));
    e = d.invert(t);
    key.e = e.encode();
  }

  if (d.bitLength() === 0) {
    var _t = p.subn(1).imul(q.subn(1));

    d = e.invert(_t);
    key.d = d.encode();
  }

  if (dp.bitLength() === 0) {
    dp = d.mod(p.subn(1));
    key.dp = dp.encode();
  }

  if (dq.bitLength() === 0) {
    dq = d.mod(q.subn(1));
    key.dq = dq.encode();
  }

  if (qi.bitLength() === 0) {
    qi = q.invert(p);
    key.qi = qi.encode();
  }

  return key;
}
/**
 * Verify a private key.
 * @param {RSAPrivateKey} key
 * @returns {Boolean}
 */


function privateKeyVerify$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  if (!isSanePrivateKey$1(key)) return false; // https://github.com/golang/go/blob/aadaec5/src/crypto/rsa/rsa.go#L169

  var mod = new bnBrowser(1);
  var primes = [bnBrowser.decode(key.p), bnBrowser.decode(key.q)];

  for (var prime of primes) {
    if (prime.cmpn(1) <= 0) return false;
    mod.imul(prime);
  }

  var n = bnBrowser.decode(key.n);
  if (mod.cmp(n) !== 0) return false;
  var d = bnBrowser.decode(key.d);
  var e = bnBrowser.decode(key.e);
  var de = e.imul(d);

  for (var _prime of primes) {
    var cg = de.mod(_prime.subn(1));
    if (cg.cmpn(1) !== 0) return false;
  }

  return true;
}
/**
 * Export a private key to PKCS1 ASN.1 format.
 * @param {RSAPrivateKey} key
 * @returns {Buffer}
 */


function privateKeyExport$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  if (!isSanePrivateKey$1(key)) throw new Error('Invalid RSA private key.');
  return new pkcs1.RSAPrivateKey(0, key.n, key.e, key.d, key.p, key.q, key.dp, key.dq, key.qi).encode();
}
/**
 * Import a private key from PKCS1 ASN.1 format.
 * @param {Buffer} raw
 * @returns {RSAPrivateKey}
 */


function privateKeyImport$1(raw) {
  var key = pkcs1.RSAPrivateKey.decode(raw);
  assert_1(key.version.toNumber() === 0);
  return new RSAPrivateKey$2(key.n.value, key.e.value, key.d.value, key.p.value, key.q.value, key.dp.value, key.dq.value, key.qi.value);
}
/**
 * Export a private key to PKCS8 ASN.1 format.
 * @param {RSAPrivateKey} key
 * @returns {Buffer}
 */


function privateKeyExportPKCS8$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  return new pkcs8.PrivateKeyInfo(0, asn1.objects.keyAlgs.RSA, new asn1.Null(), privateKeyExport$1(key)).encode();
}
/**
 * Import a private key from PKCS8 ASN.1 format.
 * @param {Buffer} raw
 * @returns {RSAPrivateKey}
 */


function privateKeyImportPKCS8$1(raw) {
  var pki = pkcs8.PrivateKeyInfo.decode(raw);
  var {
    algorithm,
    parameters
  } = pki.algorithm;
  assert_1(pki.version.toNumber() === 0);
  assert_1(algorithm.toString() === asn1.objects.keyAlgs.RSA);
  assert_1(parameters.node.type === asn1.types.NULL);
  return privateKeyImport$1(pki.privateKey.value);
}
/**
 * Export a private key to JWK JSON format.
 * @param {RSAPrivateKey} key
 * @returns {Object}
 */


function privateKeyExportJWK$2(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  return key.toJSON();
}
/**
 * Import a private key from JWK JSON format.
 * @param {Object} json
 * @returns {RSAPrivateKey}
 */


function privateKeyImportJWK$2(json) {
  var key = RSAPrivateKey$2.fromJSON(json);
  privateKeyCompute$1(key);
  return key;
}
/**
 * Create a public key from a private key.
 * @param {RSAPrivateKey} key
 * @returns {RSAPublicKey}
 */


function publicKeyCreate$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  var pub = new RSAPublicKey$2();
  pub.n = key.n;
  pub.e = key.e;
  return pub;
}
/**
 * Verify a public key.
 * @param {RSAKey} key
 * @returns {Boolean}
 */


function publicKeyVerify$1(key) {
  assert_1(key instanceof RSAKey$1);
  return isSanePublicKey$1(key);
}
/**
 * Export a public key to PKCS1 ASN.1 format.
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function publicKeyExport$1(key) {
  assert_1(key instanceof RSAKey$1);
  if (!isSanePublicKey$1(key)) throw new Error('Invalid RSA public key.');
  return new pkcs1.RSAPublicKey(key.n, key.e).encode();
}
/**
 * Import a public key from PKCS1 ASN.1 format.
 * @param {Buffer} raw
 * @returns {RSAPublicKey}
 */


function publicKeyImport$1(raw) {
  var key = pkcs1.RSAPublicKey.decode(raw);
  return new RSAPublicKey$2(key.n.value, key.e.value);
}
/**
 * Export a public key to SubjectPublicKeyInfo ASN.1 format.
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function publicKeyExportSPKI$1(key) {
  // https://tools.ietf.org/html/rfc3279#section-2.3.1
  return new x509.SubjectPublicKeyInfo(asn1.objects.keyAlgs.RSA, new asn1.Null(), publicKeyExport$1(key)).encode();
}
/**
 * Import a public key from SubjectPublicKeyInfo ASN.1 format.
 * @param {Buffer} raw
 * @returns {RSAPublicKey}
 */


function publicKeyImportSPKI$1(raw) {
  var spki = x509.SubjectPublicKeyInfo.decode(raw);
  var {
    algorithm,
    parameters
  } = spki.algorithm;
  assert_1(algorithm.toString() === asn1.objects.keyAlgs.RSA);
  assert_1(parameters.node.type === asn1.types.NULL);
  return publicKeyImport$1(spki.publicKey.rightAlign());
}
/**
 * Export a public key to JWK JSON format.
 * @param {RSAKey} key
 * @returns {Object}
 */


function publicKeyExportJWK$2(key) {
  assert_1(key instanceof RSAKey$1);
  return key.toPublic().toJSON();
}
/**
 * Import a public key from JWK JSON format.
 * @param {Object} json
 * @returns {RSAPublicKey}
 */


function publicKeyImportJWK$2(json) {
  return RSAPublicKey$2.fromJSON(json);
}
/**
 * Sign a message (PKCS1v1.5).
 * @param {Object|String|null} hash
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key - Private key.
 * @returns {Buffer} PKCS#1v1.5-formatted signature.
 */


function sign$1(hash, msg, key) {
  var decipher = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : decryptRaw;
  if (hash && typeof hash.id === 'string') hash = hash.id;
  assert_1(hash == null || typeof hash === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof RSAPrivateKey$2);
  assert_1(typeof decipher === 'function');
  var [prefix, hlen] = getDigestInfo(hash, msg);
  if (!prefix) throw new Error('Unknown RSA hash function.');
  if (msg.length !== hlen) throw new Error('Invalid RSA message size.');
  if (!isSanePrivateKey$1(key)) throw new Error('Invalid RSA private key.');
  var tlen = prefix.length + hlen;
  var klen = key.size();
  if (klen < tlen + 11) throw new Error('Message too long.'); // EM = 0x00 || 0x01 || PS || 0x00 || T

  var em = Buffer.allocUnsafe(klen);
  em[0] = 0x00;
  em[1] = 0x01;

  for (var i = 2; i < klen - tlen - 1; i++) {
    em[i] = 0xff;
  }

  em[klen - tlen - 1] = 0x00;
  prefix.copy(em, klen - tlen);
  msg.copy(em, klen - hlen);
  return decipher(em, key);
}
/**
 * Verify a signature (PKCS1v1.5).
 * @param {Object|String|null} hash
 * @param {Buffer} msg
 * @param {Buffer} sig - PKCS#1v1.5-formatted.
 * @param {RSAKey} key
 * @returns {Boolean}
 */


function verify$2(hash, msg, sig, key) {
  var encipher = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : encryptRaw;
  if (hash && typeof hash.id === 'string') hash = hash.id;
  assert_1(hash == null || typeof hash === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(sig));
  assert_1(key instanceof RSAKey$1);
  assert_1(typeof encipher === 'function');

  try {
    return _verify$1(hash, msg, sig, key, encipher);
  } catch (e) {
    return false;
  }
}
/**
 * Verify a signature (PKCS1v1.5).
 * @private
 * @param {Object|String|null} hash
 * @param {Buffer} msg
 * @param {Buffer} sig - PKCS#1v1.5-formatted.
 * @param {RSAKey} key
 * @returns {Boolean}
 */


function _verify$1(hash, msg, sig, key, encipher) {
  if (hash && typeof hash.id === 'string') hash = hash.id;
  assert_1(hash == null || typeof hash === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(sig));
  assert_1(key instanceof RSAKey$1);
  assert_1(typeof encipher === 'function');
  var [prefix, hlen] = getDigestInfo(hash, msg);
  if (!prefix) return false;
  if (msg.length !== hlen) return false;
  var klen = key.size();
  if (sig.length !== klen) return false;
  if (!isSanePublicKey$1(key)) return false;
  var tlen = prefix.length + hlen;
  if (klen < tlen + 11) return false;
  var em = encipher(sig, key); // EM = 0x00 || 0x01 || PS || 0x00 || T

  var ok = 1;
  ok &= safeEqualByte$1(em[0], 0x00);
  ok &= safeEqualByte$1(em[1], 0x01);

  for (var i = 2; i < klen - tlen - 1; i++) {
    ok &= safeEqualByte$1(em[i], 0xff);
  }

  ok &= safeEqualByte$1(em[klen - tlen - 1], 0x00);
  ok &= safeEqual$1(em.slice(klen - tlen, klen - hlen), prefix);
  ok &= safeEqual$1(em.slice(klen - hlen, klen), msg);
  return ok === 1;
}
/**
 * Verify a signature (PKCS1v1.5).
 * @param {Object|String|null} hash
 * @param {Buffer} msg
 * @param {Buffer} sig - PKCS#1v1.5-formatted.
 * @param {RSAKey} key
 * @returns {Boolean}
 */


function verifyLax(hash, msg, sig, key, encipher) {
  assert_1(key instanceof RSAKey$1);
  return verify$2(hash, msg, key.pad(sig), key, encipher);
}
/**
 * Encrypt a message with public key (PKCS1v1.5).
 * @param {Buffer} msg
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function encrypt$3(msg, key) {
  var encipher = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : encryptRaw;
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof RSAKey$1);
  assert_1(typeof encipher === 'function');
  if (!isSanePublicKey$1(key)) throw new Error('Invalid RSA public key.');
  var klen = key.size();
  if (msg.length > klen - 11) throw new Error('Invalid RSA message size.'); // EM = 0x00 || 0x02 || PS || 0x00 || M

  var em = Buffer.allocUnsafe(klen);
  var mlen = msg.length;
  var plen = klen - mlen - 3;
  em[0] = 0x00;
  em[1] = 0x02;
  randomNonzero(em, 2, plen);
  em[klen - mlen - 1] = 0x00;
  msg.copy(em, klen - mlen);
  return encipher(em, key);
}
/**
 * Decrypt a message with private key (PKCS1v1.5).
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key
 * @returns {Buffer}
 */


function decrypt$2(msg, key) {
  var decipher = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : decryptRaw;
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof RSAPrivateKey$2);
  assert_1(typeof decipher === 'function');
  var klen = key.size();
  if (msg.length !== klen) throw new Error('Invalid RSA message size.');
  if (!isSanePrivateKey$1(key)) throw new Error('Invalid RSA private key.');
  if (klen < 11) throw new Error('Invalid RSA private key.'); // EM = 0x00 || 0x02 || PS || 0x00 || M

  var em = decipher(msg, key);
  var fbiz = safeEqualByte$1(em[0], 0x00);
  var sbit = safeEqualByte$1(em[1], 0x02);
  var index = 0;
  var looking = 1;

  for (var i = 2; i < em.length; i++) {
    var equals0 = safeEqualByte$1(em[i], 0x00);
    index = safeSelect$1(looking & equals0, i, index);
    looking = safeSelect$1(equals0, 0, looking);
  }

  var validPS = safeLTE$1(2 + 8, index);
  var valid = fbiz & sbit & (~looking & 1) & validPS;
  index = safeSelect$1(valid, index + 1, 0); // Note: this line leaks timing information.
  // Nothing we can do about it (PKCS1v1.5 is broken).

  if (valid === 0) throw new Error('Invalid ciphertext.');
  return em.slice(index);
}
/**
 * Decrypt a message with private key (PKCS1v1.5).
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key
 * @returns {Buffer}
 */


function decryptLax(msg, key, decipher) {
  assert_1(key instanceof RSAKey$1);
  return decrypt$2(key.pad(msg), key, decipher);
}
/**
 * Encrypt a message with public key (OAEP).
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {RSAKey} key
 * @param {Buffer?} label
 * @returns {Buffer}
 */


function encryptOAEP(hash, msg, key, label) {
  var encipher = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : encryptRaw;
  if (label == null) label = EMPTY$a;
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(label));
  assert_1(key instanceof RSAKey$1);
  assert_1(typeof encipher === 'function');
  if (!isSanePublicKey$1(key)) throw new Error('Invalid RSA public key.');
  var klen = key.size();
  var mlen = msg.length;
  var hlen = hash.size;
  if (mlen > klen - 2 * hlen - 2) throw new Error('Invalid RSA message size.'); // EM = 0x00 || mgf1(SEED) || mgf1(DB)

  var em = Buffer.allocUnsafe(klen);
  var seed = em.slice(1, 1 + hlen);
  var db = em.slice(1 + hlen);
  var dlen = db.length;
  em[0] = 0x00; // SEED = Random Bytes

  randomBrowser.randomFill(seed, 0, seed.length); // DB = HASH(LABEL) || PS || 0x01 || M

  hash.digest(label).copy(db, 0);
  db.fill(0x00, hlen, dlen - mlen - 1);
  db[dlen - mlen - 1] = 0x01;
  msg.copy(db, dlen - mlen);
  mgf1XOR(hash, seed, db);
  mgf1XOR(hash, db, seed);
  return encipher(em, key);
}
/**
 * Decrypt a message with private key (OAEP).
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key
 * @param {Buffer?} label
 * @returns {Buffer}
 */


function decryptOAEP(hash, msg, key, label) {
  var decipher = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : decryptRaw;
  if (label == null) label = EMPTY$a;
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(label));
  assert_1(key instanceof RSAPrivateKey$2);
  assert_1(typeof decipher === 'function');
  var klen = key.size();
  var mlen = msg.length;
  var hlen = hash.size;
  if (mlen !== klen) throw new Error('Invalid RSA message size.');
  if (!isSanePrivateKey$1(key)) throw new Error('Invalid RSA private key.');
  if (klen < hlen * 2 + 2) throw new Error('Invalid RSA private key size.');
  var em = decipher(msg, key);
  var expect = hash.digest(label);
  var fbiz = safeEqualByte$1(em[0], 0x00);
  var seed = em.slice(1, hlen + 1);
  var db = em.slice(hlen + 1);
  mgf1XOR(hash, db, seed);
  mgf1XOR(hash, seed, db);
  var lhash = db.slice(0, hlen);
  var lvalid = safeEqual$1(lhash, expect);
  var looking = 1;
  var index = 0;
  var invalid = 0;
  var rest = db.slice(hlen);

  for (var i = 0; i < rest.length; i++) {
    var equals0 = safeEqualByte$1(rest[i], 0x00);
    var equals1 = safeEqualByte$1(rest[i], 0x01);
    index = safeSelect$1(looking & equals1, i, index);
    looking = safeSelect$1(equals1, 0, looking);
    invalid = safeSelect$1(looking & ~equals0, 1, invalid);
  }

  if ((fbiz & lvalid & ~invalid & ~looking) !== 1) throw new Error('Invalid RSA ciphertext.');
  return rest.slice(index + 1);
}
/**
 * Decrypt a message with private key (OAEP).
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key
 * @param {Buffer?} label
 * @returns {Buffer}
 */


function decryptOAEPLax(hash, msg, key, label, decipher) {
  assert_1(key instanceof RSAKey$1);
  return decryptOAEP(hash, key.pad(msg), key, label, decipher);
}
/**
 * Sign a message (PSS).
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key - Private key.
 * @param {Number} [saltLen=-1]
 * @returns {Buffer} PSS-formatted signature.
 */


function signPSS(hash, msg, key) {
  var saltLen = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
  var decipher = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : decryptRaw;
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof RSAPrivateKey$2);
  assert_1(saltLen === -1 || saltLen >>> 0 === saltLen);
  assert_1(typeof decipher === 'function');
  if (msg.length !== hash.size) throw new Error('Invalid RSA message size.');
  if (!isSanePrivateKey$1(key)) throw new Error('Invalid RSA private key.');
  if (saltLen === 0) // Auto
    saltLen = key.size() - 2 - hash.size;else if (saltLen === -1) // Equals
    saltLen = hash.size;
  var salt = randomBrowser.randomBytes(saltLen);
  var bits = key.bits();
  var em = pssEncode(hash, msg, bits - 1, salt);
  return decipher(em, key);
}
/**
 * Verify a signature (PSS).
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {Buffer} sig - PSS-formatted.
 * @param {RSAKey} key
 * @param {Number} [saltLen=-1]
 * @returns {Boolean}
 */


function verifyPSS(hash, msg, sig, key) {
  var saltLen = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
  var encipher = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : encryptRaw;
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(sig));
  assert_1(key instanceof RSAKey$1);
  assert_1(saltLen === -1 || saltLen >>> 0 === saltLen);
  assert_1(typeof encipher === 'function');

  try {
    return _verifyPSS(hash, msg, sig, key, saltLen, encipher);
  } catch (e) {
    return false;
  }
}
/**
 * Verify a signature (PSS).
 * @private
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {Buffer} sig - PSS-formatted.
 * @param {RSAKey} key
 * @param {Number} [saltLen=-1]
 * @returns {Boolean}
 */


function _verifyPSS(hash, msg, sig, key) {
  var saltLen = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
  var encipher = arguments.length > 5 ? arguments[5] : undefined;
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(sig));
  assert_1(key instanceof RSAKey$1);
  assert_1(saltLen === -1 || saltLen >>> 0 === saltLen);
  assert_1(typeof encipher === 'function');
  if (msg.length !== hash.size) return false;
  if (sig.length !== key.size()) return false;
  if (!isSanePublicKey$1(key)) return false;
  var em = encipher(sig, key);
  var bits = key.bits();
  if (saltLen === -1) // Equals
    saltLen = hash.size;
  return pssVerify(hash, msg, em, bits - 1, saltLen);
}
/**
 * Verify a signature (PSS).
 * @param {Object} hash
 * @param {Buffer} msg
 * @param {Buffer} sig - PSS-formatted.
 * @param {RSAKey} key
 * @param {Number} [saltLen=-1]
 * @returns {Boolean}
 */


function verifyPSSLax(hash, msg, sig, key, saltLen, encipher) {
  assert_1(key instanceof RSAKey$1);
  return verifyPSS(hash, msg, key.pad(sig), key, saltLen, encipher);
}
/**
 * Raw encryption.
 * @private
 * @param {Buffer} msg
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function encryptRaw(msg, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof RSAKey$1); // OpenSSL behavior for public encryption.

  if (msg.length !== key.size()) throw new Error('Invalid RSA message size.');
  var n = bnBrowser.decode(key.n);
  var e = bnBrowser.decode(key.e);
  if (n.isZero() || e.isZero()) throw new Error('Invalid RSA public key.');
  var m = bnBrowser.decode(msg); // c := m^e mod n

  var c = m.powm(e, n);
  return c.encode('be', n.byteLength());
}
/**
 * Raw decryption.
 * @private
 * @param {Buffer} msg
 * @param {RSAPrivateKey} key
 * @returns {Buffer}
 */


function decryptRaw(msg, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(key instanceof RSAPrivateKey$2);
  var n = bnBrowser.decode(key.n);
  var e = bnBrowser.decode(key.e); // Recompute modulus.

  if (n.isZero()) {
    var p = bnBrowser.decode(key.p);
    var q = bnBrowser.decode(key.q);
    if (p.isZero() || q.isZero()) throw new Error('Invalid RSA private key.'); // n := p * q

    n = p.imul(q);
  } // Recompute public exponent.


  if (e.isZero()) {
    var d = bnBrowser.decode(key.d);

    var _p = bnBrowser.decode(key.p);

    var _q = bnBrowser.decode(key.q);

    if (d.isZero() || _p.isZero() || _q.isZero()) throw new Error('Invalid RSA private key.'); // t := (p - 1) * (q - 1)

    var t = _p.isubn(1).imul(_q.isubn(1)); // e := d^-1 mod t


    try {
      e = d.invert(t);
    } catch (e) {
      throw new Error('Invalid RSA private key.');
    }
  } // Decode message.


  var c = bnBrowser.decode(msg); // Validate params.

  if (c.cmp(n) > 0 || n.isZero()) throw new Error('Invalid RSA message size.'); // Generate blinding factor.

  var [blind, unblind] = getBlinding$1(n, e); // Blind.

  c.imul(blind).imod(n); // Decrypt.

  var m = null; // Potentially use precomputed values.

  if (needsCompute$1(key)) {
    // Decrypt with private exponent.
    var _d = bnBrowser.decode(key.d); // Recompute private exponent.


    if (_d.isZero()) {
      var _p2 = bnBrowser.decode(key.p);

      var _q2 = bnBrowser.decode(key.q);

      if (_p2.isZero() || _q2.isZero()) throw new Error('Invalid RSA private key.'); // t := (p - 1) * (q - 1)

      var _t2 = _p2.isubn(1).imul(_q2.isubn(1)); // d := e^-1 mod t


      try {
        _d = e.invert(_t2);
      } catch (e) {
        throw new Error('Invalid RSA private key.');
      }
    } // m := c^d mod n


    m = c.powm(_d, n);
  } else {
    // Decrypt with precomputed values.
    // We can use montgomery reduction
    // here since our moduli are prime.
    var _p3 = bnBrowser.decode(key.p);

    var _q3 = bnBrowser.decode(key.q);

    var dp = bnBrowser.decode(key.dp);
    var dq = bnBrowser.decode(key.dq);
    var qi = bnBrowser.decode(key.qi); // mp := c^(d mod p-1) mod p
    // mq := c^(d mod q-1) mod q
    // md := ((mp - mq) / q) mod p

    var mp = c.powm(dp, _p3, true);
    var mq = c.powm(dq, _q3, true);
    var md = mp.isub(mq).imul(qi).imod(_p3); // m := (md * q + mq) mod n

    m = md.imul(_q3).iadd(mq).imod(n); // Check for congruency.
    // (m^e - c) mod n == 0

    var v = m.powm(e, n).isub(c).imod(n); // In reality we would want to
    // error here, but OpenSSL
    // swallows the error and does
    // a slower exponentation (wtf?).

    if (!v.isZero()) {
      var _d2 = bnBrowser.decode(key.d); // m := c^d mod n


      m = c.powm(_d2, n);
    }
  } // Unblind.


  m.imul(unblind).imod(n);
  return m.encode('be', n.byteLength());
}
/**
 * "Veil" an RSA ciphertext to hide the key size.
 * @param {Buffer} msg
 * @param {Number} bits
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function veil(msg, bits, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(bits >>> 0 === bits);
  assert_1(key instanceof RSAKey$1);
  if (!isSanePublicKey$1(key)) throw new Error('Invalid RSA public key.');
  if (msg.length !== key.size()) throw new Error('Invalid RSA ciphertext.');
  if (bits < key.bits()) throw new Error('Cannot make ciphertext smaller.');
  var c0 = bnBrowser.decode(msg);
  var n = bnBrowser.decode(key.n);
  if (c0.cmp(n) >= 0) throw new Error('Invalid ciphertext.');
  var ctlim = new bnBrowser(1).iushln(bits);
  var rlim = ctlim.sub(c0).iadd(n).isubn(1).div(n);
  var c1 = ctlim;

  while (c1.cmp(ctlim) >= 0) {
    var cr = bnBrowser.random(randomBrowser, 0, rlim);
    if (rlim.cmpn(1) > 0 && cr.isZero()) continue;
    c1 = c0.add(cr.imul(n));
  }

  assert_1(c1.mod(n).cmp(c0) === 0);
  assert_1(c1.bitLength() <= bits);
  return c1.encode('be', bits + 7 >>> 3);
}
/**
 * "Veil" an RSA ciphertext to hide the key size.
 * @param {Buffer} msg
 * @param {Number} bits
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function veilLax(msg, bits, key) {
  assert_1(key instanceof RSAKey$1);
  return veil(key.pad(msg), bits, key);
}
/**
 * "Unveil" a veiled RSA ciphertext.
 * @param {Buffer} msg
 * @param {Number} bits
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function unveil(msg, bits, key) {
  assert_1(Buffer.isBuffer(msg));
  assert_1(bits >>> 0 === bits);
  assert_1(key instanceof RSAKey$1);
  if (!isSanePublicKey$1(key)) throw new Error('Invalid RSA public key.');
  var klen = key.size();
  if (msg.length < klen) throw new Error('Invalid RSA ciphertext.');
  if (countLeft$5(msg) > bits) throw new Error('Invalid RSA ciphertext.');
  var c1 = bnBrowser.decode(msg);
  var n = bnBrowser.decode(key.n);
  var c0 = c1.imod(n);
  return c0.encode('be', klen);
}
/**
 * "Unveil" a veiled RSA ciphertext.
 * @param {Buffer} msg
 * @param {Number} bits
 * @param {RSAKey} key
 * @returns {Buffer}
 */


function unveilLax(msg, bits, key) {
  assert_1(key instanceof RSAKey$1);
  return unveil(key.pad(msg), bits, key);
}
/**
 * Generate multi-prime key.
 * @private
 * @param {Number} total
 * @param {Number} bits
 * @param {Number} exponent
 * @returns {Array}
 */


function generateKey(total, bits, exponent) {
  assert_1(total >>> 0 === total);
  assert_1(bits >>> 0 === bits);
  assert_1(Number.isSafeInteger(exponent) && exponent >= 0);
  assert_1(bits >= 4);
  assert_1(exponent >= 3 && exponent % 2 !== 0); // https://github.com/golang/go/blob/aadaec5/src/crypto/rsa/rsa.go#L220
  // https://github.com/golang/go/blob/aadaec5/src/crypto/rsa/rsa.go#L429

  if (total < 2) throw new Error('RSA key requires at least 2 primes.');

  if (bits < 64) {
    var pi = 2 ** Math.floor(bits / total);
    pi /= Math.log(pi) - 1;
    pi /= 4;
    pi /= 2;
    if (pi <= total) throw new Error('Too few primes for RSA key.');
  }

  next: for (;;) {
    var primes = [];
    var todo = bits;
    if (total >= 7) todo += Math.floor((total - 2) / 5);

    for (var i = 0; i < total; i++) {
      var size = Math.floor(todo / (total - i));
      var prime = randomPrime$1(size);
      primes.push(prime);
      todo -= prime.bitLength();
    }

    for (var _i = 0; _i < total; _i++) {
      var _prime2 = primes[_i];

      for (var j = 0; j < _i; j++) {
        if (_prime2.cmp(primes[j]) === 0) continue next;
      }
    }

    var n = new bnBrowser(1);
    var t = new bnBrowser(1);

    for (var _prime3 of primes) {
      n.imul(_prime3);
      t.imul(_prime3.subn(1));
    }

    if (n.bitLength() !== bits) continue;
    var e = new bnBrowser(exponent);
    var d = null;

    try {
      d = e.invert(t);
    } catch (e) {
      continue;
    }

    var [p, q] = primes;
    var dp = d.mod(p.subn(1));
    var dq = d.mod(q.subn(1));
    var qi = q.invert(p);
    var key = new RSAPrivateKey$2();
    key.n = n.encode();
    key.e = e.encode();
    key.d = d.encode();
    key.p = p.encode();
    key.q = q.encode();
    key.dp = dp.encode();
    key.dq = dq.encode();
    key.qi = qi.encode();
    var extra = [];

    for (var _i2 = 2; _i2 < primes.length; _i2++) {
      var _prime4 = primes[_i2].encode();

      extra.push(_prime4);
    }

    return [key, extra];
  }
}
/*
 * Subtle
 */


function generateSubtle(_x3, _x4) {
  return _generateSubtle.apply(this, arguments);
}
/*
 * Randomization
 */


function _generateSubtle() {
  _generateSubtle = _asyncToGenerator(function* (bits, exponent) {
    assert_1(bits >>> 0 === bits);
    assert_1(Number.isSafeInteger(exponent) && exponent >= 0);
    assert_1(bits >= 4);
    assert_1(exponent >= 3 && exponent % 2 !== 0);
    var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
    if (!crypto) throw new Error('Crypto API not available.');
    var subtle = crypto.subtle;
    if (!subtle) throw new Error('Subtle API not available.');
    if (!subtle.generateKey || !subtle.exportKey) throw new Error('Subtle key generation not available.');
    var hi = exponent * (1 / 0x100000000) >>> 0;
    var lo = exponent >>> 0;
    var exp = new Uint8Array(8);
    exp[0] = 0;
    exp[1] = 0;
    exp[2] = hi >>> 8;
    exp[3] = hi;
    exp[4] = lo >>> 24;
    exp[5] = lo >>> 16;
    exp[6] = lo >>> 8;
    exp[7] = lo;
    var algo = {
      name: 'RSASSA-PKCS1-v1_5',
      modulusLength: bits,
      publicExponent: exp,
      hash: {
        name: 'SHA-256'
      }
    };
    var ck = yield subtle.generateKey(algo, true, ['sign']);
    var jwk = yield subtle.exportKey('jwk', ck.privateKey);
    var key = new RSAPrivateKey$2();
    key.n = base64.decodeURL(jwk.n);
    key.e = base64.decodeURL(jwk.e);
    key.d = base64.decodeURL(jwk.d);
    key.p = base64.decodeURL(jwk.p);
    key.q = base64.decodeURL(jwk.q);
    key.dp = base64.decodeURL(jwk.dp);
    key.dq = base64.decodeURL(jwk.dq);
    key.qi = base64.decodeURL(jwk.qi);
    return key;
  });
  return _generateSubtle.apply(this, arguments);
}

function getBlinding$1(n, e) {
  assert_1(n instanceof bnBrowser);
  assert_1(e instanceof bnBrowser); // Generate blinding factor.

  var blind = null;
  var unblind = null;

  for (;;) {
    // s := rand(1..n)
    var s = bnBrowser.random(randomBrowser, 1, n); // unblind := s^-1 mod n

    try {
      unblind = s.invert(n);
    } catch (e) {
      continue;
    } // blind := s^e mod n


    blind = s.powm(e, n);
    break;
  }

  return [blind, unblind];
}
/*
 * PSS
 */


function pssEncode(hash, msg, embits, salt) {
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(embits >>> 0 === embits);
  assert_1(Buffer.isBuffer(salt));
  var hlen = hash.size;
  var slen = salt.length;
  var emlen = embits + 7 >>> 3;
  if (msg.length !== hlen) throw new Error('RSA input must be hashed message.');
  if (emlen < hlen + slen + 2) throw new Error('RSA key size too small for PSS signature.');
  var em = Buffer.allocUnsafe(emlen);
  em.fill(0x00);
  var db = em.slice(0, emlen - slen - hlen - 2 + 1 + slen);
  var h = em.slice(emlen - slen - hlen - 2 + 1 + slen, emlen - 1);
  var h0 = hash.multi(PREFIX$1, msg, salt);
  h0.copy(h, 0);
  db[emlen - slen - hlen - 2] = 0x01;
  salt.copy(db, emlen - slen - hlen - 1);
  mgf1XOR(hash, h, db);
  db[0] &= 0xff >>> 8 * emlen - embits;
  em[emlen - 1] = 0xbc;
  return em;
}

function pssVerify(hash, msg, em, embits, slen) {
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(msg));
  assert_1(Buffer.isBuffer(em));
  assert_1(embits >>> 0 === embits);
  assert_1(slen >>> 0 === slen);
  var hlen = hash.size;
  if (msg.length !== hlen) return false;
  var emlen = embits + 7 >>> 3;
  if (emlen < hlen + slen + 2) return false;
  if (em[em.length - 1] !== 0xbc) return false;
  var db = em.slice(0, emlen - hlen - 1);
  var h = em.slice(emlen - hlen - 1, em.length - 1);
  var bit = 0xff << 8 - (8 * emlen - embits) & 0xff;
  if ((em[0] & bit) !== 0) return false;
  mgf1XOR(hash, h, db);
  db[0] &= 0xff >>> 8 * emlen - embits;

  if (slen === 0) {
    // Auto
    slen = emlen - (hlen + 2);

    outer: for (; slen >= 0; slen--) {
      var e = db[emlen - hlen - slen - 2];

      switch (e) {
        case 0x01:
          break outer;

        case 0x00:
          continue;

        default:
          return false;
      }
    }

    if (slen < 0) return false;
  } else {
    var len = emlen - hlen - slen - 2;

    for (var i = 0; i < len; i++) {
      if (db[i] !== 0x00) return false;
    }

    if (db[len] !== 0x01) return false;
  }

  var salt = db.slice(db.length - slen);
  var h0 = hash.multi(PREFIX$1, msg, salt);
  return h0.equals(h);
}
/*
 * Sanity Checking
 */


function isSanePublicKey$1(key) {
  assert_1(key instanceof RSAKey$1);
  var nb = countLeft$5(key.n);
  if (nb < MIN_BITS$3 || nb > MAX_BITS$3) return false;
  var eb = countLeft$5(key.e);
  if (eb < MIN_EXP_BITS$1 || eb > MAX_EXP_BITS$1) return false;
  if ((key.e[key.e.length - 1] & 1) === 0) return false;
  return true;
}

function isSanePrivateKey$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  if (!isSanePublicKey$1(key)) return false;
  var nb = countLeft$5(key.n);
  var db = countLeft$5(key.d);
  if (db === 0 || db > nb) return false;
  var pb = countLeft$5(key.p);
  var qb = countLeft$5(key.q);
  if (nb > pb + qb) return false;
  var dpb = countLeft$5(key.dp);
  if (dpb === 0 || dpb > pb) return false;
  var dqb = countLeft$5(key.dq);
  if (dqb === 0 || dqb > qb) return false;
  var qib = countLeft$5(key.qi);
  if (qib === 0 || qib > pb) return false;
  return true;
}

function isSaneCompute$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  var nb = countLeft$5(key.n);
  var eb = countLeft$5(key.e);
  var db = countLeft$5(key.d);
  var pb = countLeft$5(key.p);
  var qb = countLeft$5(key.q);
  var dpb = countLeft$5(key.dp);
  var dqb = countLeft$5(key.dq);
  var qib = countLeft$5(key.qi);
  if (pb === 0 || qb === 0) return false;
  if (eb === 0 && db === 0) return false;

  if (nb !== 0) {
    if (nb < MIN_BITS$3 || nb > MAX_BITS$3) return false;
    if (nb > pb + qb) return false;
  }

  if (eb !== 0) {
    if (eb < MIN_EXP_BITS$1 || eb > MAX_EXP_BITS$1) return false;
    if ((key.e[key.e.length - 1] & 1) === 0) return false;
  }

  if (db !== 0) {
    if (db > pb + qb) return false;
  }

  if (dpb !== 0) {
    if (dpb > pb) return false;
  }

  if (dqb !== 0) {
    if (dqb > qb) return false;
  }

  if (qib !== 0) {
    if (qib > pb) return false;
  }

  return true;
}

function needsCompute$1(key) {
  assert_1(key instanceof RSAPrivateKey$2);
  return countLeft$5(key.n) === 0 || countLeft$5(key.e) === 0 || countLeft$5(key.d) === 0 || countLeft$5(key.dp) === 0 || countLeft$5(key.dq) === 0 || countLeft$5(key.qi) === 0;
}
/*
 * Helpers
 */


function randomNonzero(buf, offset, size) {
  assert_1(Buffer.isBuffer(buf));
  assert_1(offset >>> 0 === offset);
  assert_1(size >>> 0 === size);
  randomBrowser.randomFill(buf, offset, size);
  var len = offset + size;

  for (var i = offset; i < len; i++) {
    while (buf[i] === 0x00) {
      randomBrowser.randomFill(buf, i, 1);
    }
  }
}

function mgf1XOR(hash, seed, out) {
  assert_1(hash && typeof hash.id === 'string');
  assert_1(Buffer.isBuffer(seed));
  assert_1(Buffer.isBuffer(out));
  var counter = Buffer.allocUnsafe(4);
  counter.fill(0x00);
  var done = 0;

  while (done < out.length) {
    var digest = hash.multi(seed, counter);

    for (var i = 0; i < digest.length && done < out.length; i++) {
      out[done] ^= digest[i];
      done += 1;
    }

    for (var _i3 = 3; _i3 >= 0; _i3--) {
      if (counter[_i3] !== 0xff) {
        counter[_i3] += 1;
        break;
      }

      counter[_i3] = 0x00;
    }
  }
}

function getDigestInfo(name, msg) {
  assert_1(name == null || typeof name === 'string');
  assert_1(Buffer.isBuffer(msg));
  if (name == null) return [EMPTY$a, msg.length];
  var prefix = digestInfo[name];
  if (!Buffer.isBuffer(prefix)) return [null, 0];
  return [prefix, prefix.length > 0 ? prefix[prefix.length - 1] : 36];
}
/*
 * Expose
 */


var native_1$d = 0;
var RSAKey_1$1 = RSAKey$1;
var RSAPublicKey_1$2 = RSAPublicKey$2;
var RSAPrivateKey_1$2 = RSAPrivateKey$2;
var privateKeyGenerate_1$1 = privateKeyGenerate$1;
var privateKeyGenerateAsync_1$1 = privateKeyGenerateAsync$1;
var privateKeyCompute_1$1 = privateKeyCompute$1;
var privateKeyVerify_1$1 = privateKeyVerify$1;
var privateKeyExport_1$1 = privateKeyExport$1;
var privateKeyImport_1$1 = privateKeyImport$1;
var privateKeyExportPKCS8_1$1 = privateKeyExportPKCS8$1;
var privateKeyImportPKCS8_1$1 = privateKeyImportPKCS8$1;
var privateKeyExportJWK_1$2 = privateKeyExportJWK$2;
var privateKeyImportJWK_1$2 = privateKeyImportJWK$2;
var publicKeyCreate_1$1 = publicKeyCreate$1;
var publicKeyVerify_1$1 = publicKeyVerify$1;
var publicKeyExport_1$1 = publicKeyExport$1;
var publicKeyImport_1$1 = publicKeyImport$1;
var publicKeyExportSPKI_1$1 = publicKeyExportSPKI$1;
var publicKeyImportSPKI_1$1 = publicKeyImportSPKI$1;
var publicKeyExportJWK_1$2 = publicKeyExportJWK$2;
var publicKeyImportJWK_1$2 = publicKeyImportJWK$2;
var sign_1$1 = sign$1;
var verify_1$2 = verify$2;
var verifyLax_1 = verifyLax;
var encrypt_1$2 = encrypt$3;
var decrypt_1$2 = decrypt$2;
var decryptLax_1 = decryptLax;
var encryptOAEP_1 = encryptOAEP;
var decryptOAEP_1 = decryptOAEP;
var decryptOAEPLax_1 = decryptOAEPLax;
var signPSS_1 = signPSS;
var verifyPSS_1 = verifyPSS;
var verifyPSSLax_1 = verifyPSSLax;
var encryptRaw_1 = encryptRaw;
var decryptRaw_1 = decryptRaw;
var veil_1 = veil;
var veilLax_1 = veilLax;
var unveil_1 = unveil;
var unveilLax_1 = unveilLax;
var rsa = {
  native: native_1$d,
  RSAKey: RSAKey_1$1,
  RSAPublicKey: RSAPublicKey_1$2,
  RSAPrivateKey: RSAPrivateKey_1$2,
  privateKeyGenerate: privateKeyGenerate_1$1,
  privateKeyGenerateAsync: privateKeyGenerateAsync_1$1,
  privateKeyCompute: privateKeyCompute_1$1,
  privateKeyVerify: privateKeyVerify_1$1,
  privateKeyExport: privateKeyExport_1$1,
  privateKeyImport: privateKeyImport_1$1,
  privateKeyExportPKCS8: privateKeyExportPKCS8_1$1,
  privateKeyImportPKCS8: privateKeyImportPKCS8_1$1,
  privateKeyExportJWK: privateKeyExportJWK_1$2,
  privateKeyImportJWK: privateKeyImportJWK_1$2,
  publicKeyCreate: publicKeyCreate_1$1,
  publicKeyVerify: publicKeyVerify_1$1,
  publicKeyExport: publicKeyExport_1$1,
  publicKeyImport: publicKeyImport_1$1,
  publicKeyExportSPKI: publicKeyExportSPKI_1$1,
  publicKeyImportSPKI: publicKeyImportSPKI_1$1,
  publicKeyExportJWK: publicKeyExportJWK_1$2,
  publicKeyImportJWK: publicKeyImportJWK_1$2,
  sign: sign_1$1,
  verify: verify_1$2,
  verifyLax: verifyLax_1,
  encrypt: encrypt_1$2,
  decrypt: decrypt_1$2,
  decryptLax: decryptLax_1,
  encryptOAEP: encryptOAEP_1,
  decryptOAEP: decryptOAEP_1,
  decryptOAEPLax: decryptOAEPLax_1,
  signPSS: signPSS_1,
  verifyPSS: verifyPSS_1,
  verifyPSSLax: verifyPSSLax_1,
  encryptRaw: encryptRaw_1,
  decryptRaw: decryptRaw_1,
  veil: veil_1,
  veilLax: veilLax_1,
  unveil: unveil_1,
  unveilLax: unveilLax_1
};

var rsaBrowser = rsa;

/*
 * RSAIES
 */


var RSAIES = {
  encrypt(hash, msg, pub) {
    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    assert_1(hash && typeof hash.id === 'string');
    assert_1(Buffer.isBuffer(msg));
    var key = randomBrowser.randomBytes(32);
    var ct = rsaBrowser.encryptOAEP(hash, key, pub, label);
    if (size != null) ct = rsaBrowser.veil(ct, size, pub);
    var nonce = randomBrowser.randomBytes(24);
    var sealed = secretbox.seal(msg, key, nonce);
    return Buffer.concat([ct, nonce, sealed]);
  },

  decrypt(hash, msg, priv) {
    var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var label = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    assert_1(hash && typeof hash.id === 'string');
    assert_1(Buffer.isBuffer(msg));
    assert_1(priv instanceof rsaBrowser.RSAPrivateKey);
    if (size == null) size = priv.bits();
    assert_1(size >>> 0 === size);
    var bytes = size + 7 >>> 3;
    if (msg.length < bytes + 24) throw new Error('Invalid ciphertext.');
    var ct = rsaBrowser.unveil(msg.slice(0, bytes), size, priv);
    var key = rsaBrowser.decryptOAEP(hash, ct, priv, label);
    var nonce = msg.slice(bytes, bytes + 24);
    var sealed = msg.slice(bytes + 24);
    return secretbox.open(sealed, key, nonce);
  }

};
/*
 * Expose
 */

var rsaies = RSAIES;

/*
 * Constants
 */


var B32 = new Uint32Array(16);
var X$2 = new Uint32Array(16);
/**
 * Perform scrypt key derivation.
 * @param {Buffer} passwd
 * @param {Buffer} salt
 * @param {Number} N
 * @param {Number} r
 * @param {Number} p
 * @param {Number} len
 * @returns {Buffer}
 */

function derive$5(passwd, salt, N, r, p, len) {
  if (typeof passwd === 'string') passwd = Buffer.from(passwd, 'utf8');
  if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
  if (salt == null) salt = Buffer.alloc(0);
  assert_1(Buffer.isBuffer(passwd));
  assert_1(Buffer.isBuffer(salt));
  assert_1(N >>> 0 === N);
  assert_1(r >>> 0 === r);
  assert_1(p >>> 0 === p);
  assert_1(len >>> 0 === len);
  if (r * p >= 1 << 30) throw new Error('EFBIG');
  if ((N & N - 1) !== 0 || N === 0) throw new Error('EINVAL');
  if (N > 0xffffffff) throw new Error('EINVAL');
  var XY = Buffer.allocUnsafe(256 * r);
  var V = Buffer.allocUnsafe(128 * r * N);
  var B = pbkdf2Browser.derive(sha256Browser, passwd, salt, 1, p * 128 * r);

  for (var i = 0; i < p; i++) {
    smix(B, i * 128 * r, r, N, V, XY);
  }

  return pbkdf2Browser.derive(sha256Browser, passwd, B, 1, len);
}
/**
 * Perform scrypt key derivation (async).
 * @param {Buffer} passwd
 * @param {Buffer} salt
 * @param {Number} N
 * @param {Number} r
 * @param {Number} p
 * @param {Number} len
 * @returns {Promise}
 */


function deriveAsync$1(_x, _x2, _x3, _x4, _x5, _x6) {
  return _deriveAsync$1.apply(this, arguments);
}
/*
 * Helpers
 */


function _deriveAsync$1() {
  _deriveAsync$1 = _asyncToGenerator(function* (passwd, salt, N, r, p, len) {
    if (typeof passwd === 'string') passwd = Buffer.from(passwd, 'utf8');
    if (typeof salt === 'string') salt = Buffer.from(salt, 'utf8');
    if (salt == null) salt = Buffer.alloc(0);
    assert_1(Buffer.isBuffer(passwd));
    assert_1(Buffer.isBuffer(salt));
    assert_1(N >>> 0 === N);
    assert_1(r >>> 0 === r);
    assert_1(p >>> 0 === p);
    assert_1(len >>> 0 === len);
    if (r * p >= 1 << 30) throw new Error('EFBIG');
    if ((N & N - 1) !== 0 || N === 0) throw new Error('EINVAL');
    if (N > 0xffffffff) throw new Error('EINVAL');
    var XY = Buffer.allocUnsafe(256 * r);
    var V = Buffer.allocUnsafe(128 * r * N);
    var B = yield pbkdf2Browser.deriveAsync(sha256Browser, passwd, salt, 1, p * 128 * r);

    for (var i = 0; i < p; i++) {
      yield smixAsync(B, i * 128 * r, r, N, V, XY);
    }

    return pbkdf2Browser.deriveAsync(sha256Browser, passwd, B, 1, len);
  });
  return _deriveAsync$1.apply(this, arguments);
}

function salsa20_8(B) {
  for (var i = 0; i < 16; i++) {
    B32[i] = readU32$l(B, i * 4);
  }

  for (var _i = 0; _i < 16; _i++) {
    X$2[_i] = B32[_i];
  }

  for (var _i2 = 0; _i2 < 8; _i2 += 2) {
    X$2[4] ^= R(X$2[0] + X$2[12], 7);
    X$2[8] ^= R(X$2[4] + X$2[0], 9);
    X$2[12] ^= R(X$2[8] + X$2[4], 13);
    X$2[0] ^= R(X$2[12] + X$2[8], 18);
    X$2[9] ^= R(X$2[5] + X$2[1], 7);
    X$2[13] ^= R(X$2[9] + X$2[5], 9);
    X$2[1] ^= R(X$2[13] + X$2[9], 13);
    X$2[5] ^= R(X$2[1] + X$2[13], 18);
    X$2[14] ^= R(X$2[10] + X$2[6], 7);
    X$2[2] ^= R(X$2[14] + X$2[10], 9);
    X$2[6] ^= R(X$2[2] + X$2[14], 13);
    X$2[10] ^= R(X$2[6] + X$2[2], 18);
    X$2[3] ^= R(X$2[15] + X$2[11], 7);
    X$2[7] ^= R(X$2[3] + X$2[15], 9);
    X$2[11] ^= R(X$2[7] + X$2[3], 13);
    X$2[15] ^= R(X$2[11] + X$2[7], 18);
    X$2[1] ^= R(X$2[0] + X$2[3], 7);
    X$2[2] ^= R(X$2[1] + X$2[0], 9);
    X$2[3] ^= R(X$2[2] + X$2[1], 13);
    X$2[0] ^= R(X$2[3] + X$2[2], 18);
    X$2[6] ^= R(X$2[5] + X$2[4], 7);
    X$2[7] ^= R(X$2[6] + X$2[5], 9);
    X$2[4] ^= R(X$2[7] + X$2[6], 13);
    X$2[5] ^= R(X$2[4] + X$2[7], 18);
    X$2[11] ^= R(X$2[10] + X$2[9], 7);
    X$2[8] ^= R(X$2[11] + X$2[10], 9);
    X$2[9] ^= R(X$2[8] + X$2[11], 13);
    X$2[10] ^= R(X$2[9] + X$2[8], 18);
    X$2[12] ^= R(X$2[15] + X$2[14], 7);
    X$2[13] ^= R(X$2[12] + X$2[15], 9);
    X$2[14] ^= R(X$2[13] + X$2[12], 13);
    X$2[15] ^= R(X$2[14] + X$2[13], 18);
  }

  for (var _i3 = 0; _i3 < 16; _i3++) {
    B32[_i3] += X$2[_i3];
  }

  for (var _i4 = 0; _i4 < 16; _i4++) {
    writeU32$i(B, B32[_i4], 4 * _i4);
  }
}

function R(a, b) {
  return a << b | a >>> 32 - b;
}

function blockmix_salsa8(B, Y, Yo, r) {
  var X = Buffer.allocUnsafe(64);
  blkcpy(X, B, 0, (2 * r - 1) * 64, 64);

  for (var i = 0; i < 2 * r; i++) {
    blkxor(X, B, 0, i * 64, 64);
    salsa20_8(X);
    blkcpy(Y, X, Yo + i * 64, 0, 64);
  }

  for (var _i5 = 0; _i5 < r; _i5++) {
    blkcpy(B, Y, _i5 * 64, Yo + _i5 * 2 * 64, 64);
  }

  for (var _i6 = 0; _i6 < r; _i6++) {
    blkcpy(B, Y, (_i6 + r) * 64, Yo + (_i6 * 2 + 1) * 64, 64);
  }
}

function integerify(B, r) {
  return readU32$l(B, (2 * r - 1) * 64);
}

function smix(B, Bo, r, N, V, XY) {
  var X = XY;
  var Y = XY;
  blkcpy(X, B, 0, Bo, 128 * r);

  for (var i = 0; i < N; i++) {
    blkcpy(V, X, i * (128 * r), 0, 128 * r);
    blockmix_salsa8(X, Y, 128 * r, r);
  }

  for (var _i7 = 0; _i7 < N; _i7++) {
    var j = integerify(X, r) & N - 1;
    blkxor(X, V, 0, j * (128 * r), 128 * r);
    blockmix_salsa8(X, Y, 128 * r, r);
  }

  blkcpy(B, X, Bo, 0, 128 * r);
}

function smixAsync(_x7, _x8, _x9, _x10, _x11, _x12) {
  return _smixAsync.apply(this, arguments);
}

function _smixAsync() {
  _smixAsync = _asyncToGenerator(function* (B, Bo, r, N, V, XY) {
    var X = XY;
    var Y = XY;
    blkcpy(X, B, 0, Bo, 128 * r);

    for (var i = 0; i < N; i++) {
      blkcpy(V, X, i * (128 * r), 0, 128 * r);
      blockmix_salsa8(X, Y, 128 * r, r);
      yield wait();
    }

    for (var _i8 = 0; _i8 < N; _i8++) {
      var j = integerify(X, r) & N - 1;
      blkxor(X, V, 0, j * (128 * r), 128 * r);
      blockmix_salsa8(X, Y, 128 * r, r);
      yield wait();
    }

    blkcpy(B, X, Bo, 0, 128 * r);
  });
  return _smixAsync.apply(this, arguments);
}

function blkcpy(dest, src, s1, s2, len) {
  src.copy(dest, s1, s2, s2 + len);
}

function blkxor(dest, src, s1, s2, len) {
  for (var i = 0; i < len; i++) {
    dest[s1 + i] ^= src[s2 + i];
  }
}

function wait() {
  return new Promise(r => setImmediate(r));
}

function readU32$l(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}

function writeU32$i(dst, num, off) {
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  num >>>= 8;
  dst[off++] = num;
  return off;
}
/*
 * Expose
 */


var native_1$e = 0;
var derive_1$5 = derive$5;
var deriveAsync_1$1 = deriveAsync$1;
var scrypt = {
  native: native_1$e,
  derive: derive_1$5,
  deriveAsync: deriveAsync_1$1
};

var scryptBrowser = scrypt;

var naf$1 = {
  wnd: 8,
  points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "0ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "02de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "02972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "0d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["049370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "091b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "0673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "0a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "09414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["078c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "04f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "073867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["0336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "060660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "0b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["04e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["0c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "021ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "0c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "09731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "0cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "0712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"], ["90a80db6eb294b9eab0b4e8ddfa3efe7263458ce2d07566df4e6c58868feef23", "753c8b9f9754f18d87f21145d9e2936b5ee050b27bbd9681442c76e92fcf91e6"], ["c2c80f844b70599812d625460f60340e3e6f36054a14546e6dc25d47376bea9b", "86ca160d68f4d4e718b495b891d3b1b573b871a702b4cf6123abd4483aa79c64"], ["9cf606744cf4b5f3fdf989d3f19fb2652d00cfe1d5fcd692a323ce11a28e7553", "8147cbf7b973fcc15b57b6a3cfad6863edd0f30e3c45b85dc300c513c247759d"], ["57488fa28742c6b25a493fd6060d936ea6280b0c742005abce98f5855ad82208", "31b3ca455073bea558adbe56c27b470baf949ae650213921dc287844f1a29574"], ["f1133cbe6be8bbc8dc8df2b8d75963c2d40ed616c758cdc84edbc5eb4899447d", "57fc24472225b23f5714626d8d67d56110bd3a60dd7a16870cbbb893f652f50f"], ["95083e753301bd787f8989c79065bb813f3d69bff3e425050f4e04175bbe89c0", "844adb5ce7d10de94617c73ca77040e4ee4e92e0156b3c70cc593fa494b33482"], ["1a908355cbb756755e576ed29c99af638668c7b363c8d97362100443bc5c75c6", "d765466c6e556e352f77872225627d80a73538074b44ff27057ad22e2f2454a2"], ["c5922f740bd343d5aa867308fad97f9f8a2d1f63c5f31db4f04df3bef349b648", "77b1f0687cfcdbe8812605e50d8b752cda811844236a4c4377f53c946e7bd648"], ["64e1b1969f9102977691a40431b0b672055dcf31163897d996434420e6c95dc9", "c16f60c7c11fc3c9eb27fa26a9035b669bfb77d21cef371ddce94e329222550c"], ["033b2e76687744ed6c521bad3333dd37c602f8a7549e9ce7808fb7ea07ce08de", "e1bcfe7fc8ed8ae95cf6c2437fdd94bfd742e8caa6de78114c25112a86988efd"], ["20f18f4c866d8a1cc2a3103317b4ac3189fbf30ff294a75c951473be45e4f294", "8d6857c9d08ef7b4fd8883363d37bee70fe8529f7173f58943fcae81d2d0ea0e"], ["4d1623c944c9c716a0eb4c685e2a8b9d2df3465354643befd1444176d7b69a8b", "ddf1b9fe8744ad03f996bf6b96ec34962b601bd5ed952f7854f583888917be80"], ["a901b0dbe8ab292d280d6b36858947854faad0a4dd0da7e2d4ad0ff53db079e0", "3f27e7e1834f1a61af6f04dc61e7ae64716bc5e0a6b063b301d0e60e47298a9d"], ["7e0af07130218ffd50bd66f4484645b12f42a24f7c80889b3031c9a6ebfc9a70", "50bc23f3926cd0c49f53fbb235eb1e890d579517f5bdc3ab2416db785aaedb3f"], ["7ba8187e1a7b25a2c185d335440a9038b47f0528546e9da4ef82aab05aebf20d", "6e6aee6c9625370af866c25c7ca5dd780527efbce7d8b3a39ab249309a185187"], ["8c050fc34d83b279b6000816e18fca389767b7960e92677255b84a39d93a6807", "986314ef75b68fb2827c2965041981395d699fcd81cf23ce7019bc4135174870"], ["53b7849a78e4df8625860583a52499489d7201a2cbf506202a7b8b1bc99c2ec9", "4e31ea12ac607d075de4b22de1be2c52e0a44d254728d2c544d2ddf9e3e469c0"], ["9bdf9e67a5d0c9956a075a010fe762beb633500431dee78efebc527e53313b33", "94264621a5960e0ee24c27926f16cad2907f2636762e8d5a17e94afd8e9d2bb0"], ["7caa72b37a8ab3bd0bac031a47606f8917d9f42c6ec2d2fb429fd9904a381f34", "5b5853ab7ee5de8d34e3d6beb201094fff8fbd1e0682f7f1ef87ddd65d7303c9"], ["2ef29b9f0982797579c0295fc3f48db7925d62c75532493dde16b97e3993d81a", "496c944dd9875ba60a537ef96bf4c714a0afff24387d95e89b42337a33110753"], ["df157cad95b07875573c1860ae5d02c64029e952ec354e6a9e5c34be97317ff8", "f2eccac775922b50899c979a02b3cc30b629e62e85693ba470f6ee381284c162"], ["dd55c150a29ca526b6182e643b9eb544e651d236b71920e7b15a987016454b1d", "44c757a542f4ea2eb39605d4268c2510ac685aabd77a8f5c4d95e23f4c2e9368"], ["16886cf46ed42c7919147763063d3256c4d5d39387f0172325b9e4b898227f27", "7421a2207ee73299d46192fc93ca03dec824ed8de2f48367ec5383170a17fffb"], ["6ff180fcdaa3061808e8b306d6f0acff27968c22484ff45e56aeaa7b2b60732f", "7d16d654f0c2aff0fc254dad063761a26c8d4022ea85b8cc22f3ea1ef69961a9"], ["03ea4511a00dc2a03eb4f51f40ee677caa912b5539f685c4f8bcc8eadc395e36", "6c9ed1f1528b021593a39839340ddb530a2f2e365290c49824b035c673c9259d"], ["0b82cd70dc3de9eab38742d8f32dfb8d53e4150a835e54b63c7cca20f253081d", "0e8bcbfe1f7f6e75d32e20499329765f02effc56a922f26860d4bc0aadd0e24d"], ["fe2fc3e00074874584ee23bf105a69a606d056f017327d49b7b38b57a196c77f", "3e18941cc3c6d297cc9a32f695807b1c7da8561de4fde71d4f9bbdb6e9bf3916"], ["04b90176cdaa369347e8778b12db9d6ee8b0011446ea35ec845dbf574bb7858b", "f60547ab6e9c5fd3eca6e349b85880c61fdad0fc2f7ab155295caaecb973c154"], ["35f382511d34600b4b8c86a9f0dbc9eddefc4272f59528a0cd3ec10a5944c6d2", "29a835f6ef7fa1e5f6f37a80cf96ca9843762bb1b12a0daeae83234bd0b5ccd5"], ["1d74b2970311b7ffa1027e26587d3f5be1d0e9ac3f0111cdf3cc2371722cb94a", "5c7bcf8b57f114e0b73bcfb810f5c60d35dc99ae9dc7f0e2606cc1f728c2071e"], ["50a094f309c6f9560b020737b9ec722e4f75d1b7c41593e6f934a68a98450428", "a286e222dfe10cfd9689eaba6a81f04489c86db6869aa1b554a90f1e83778eee"], ["9b65bb812129157cdfecf12e275ec38c282dbcd914b4810599b0a6d627c63db7", "c582db1a3f0f22421913b2e951e98a78660b4c40ad08fd65528593bc18223188"], ["8b4544fc1fdfa06e456c1115a1dc831c85e7f1c5e620eca51c20802d36a4bc6b", "e3e77c41288f2602e722af7f4b70e64de4116fb9955b03b06ea8b19f7a20350d"], ["6c709880b959eb7c5179b29cc5578fdc6cb2ae13ddcede29d5f81d95de0ab4aa", "c9e33faebd8eba426736c0c76f3deabaee2b59c50953fb43c2dcc5139e7c4bdc"], ["77760b5137ba6a7195d891f794a087a076fc9d67802b81e7085b56773d537806", "f5202cf5aaeea58bf4f58c7edf4417be1b87ffdee68e77f0d7e81abe158e3a25"], ["1a8bd7836a0b0c82e9a904a8a8c91a67e23cd4f8efd625d0df4c426e7e163102", "61fe64cab0952cae3c574f282f74a87dc2a96316b7009f2e4e9c5fcc12285844"], ["fe217db659079913fb1e453ed24d91d6a3fb3099e69471d753db5390864abc30", "5dcf9abba9625ed680b0f20fb1f047d593a0c61c539692538cdf6b034d730b58"], ["2504d63754afd5ebc38f58b65ead696d07e3abd748cb6c5f212aed49f5b33b91", "79a6bf4375f1469c4f5321c6c72fbbf4ba7cec105675f437b5e013ad7b5d75d4"], ["0b06f702f47b22d789a9bd3f687105c36160abbf5cc8976b7fbddcafdb197b5c", "7669bbd419a4d491f592a35b6aa3dfe45bd2fe7fd179c7781cd5f918d732f63d"], ["803b203bb31f9cf94034eeb931b54480a6f3f99ebd23d0acbc2128a60d044e23", "308abc8df271f75959b20c5c7fa62bafbfc9ccbf49b946a954e5381c1728d1c7"], ["266a9cb4c5f5ceadbb50e5bda03a7312e52de1de8e95a8dcd57289fe0302749a", "9eea970ba856b2faa3e82877cc84ed4f3dc0efba1e7c3baa8b386ffc46e0ae7e"], ["fd8a9d95d80c7ad52599a7ab98163df364c4c141e9abea355d7360bcf84eba94", "a9fb1702100953b359b2e2688ae7fd33a30377da47bfda713e2d7d73dfb1030c"], ["a7322df309f28f2359fc339a8b2c80be6e84acc5b7b0b8f8f2cb6f26f9db0a7d", "22f6fe9d217495017fdb7f5b2f12fa57095f40e131714885c12a2ea16edb6be6"], ["82a8c10f336a664963a104ddbf7f0f18bd4c461aea569ffc82c3c7e4cb052d36", "737ceca2c0ef72278b90501ccb71b6715e5c31d4cd0478c118fe128795f1dd0c"], ["9b50d1b68e3bf795007cd12f05a60c266c4ef2b75ba5c516c54784a94f15d6df", "2afc8d09b79176d8d003fd2a4f18d526403fff272d47e7787376feb7cbddd8fd"], ["3f9083ddc8b423fe7de3a82281d3056ab8dcb9d7ee82cb806718595fbae08d32", "cb13c152fd511d91a9e0ed90afa021a081f77f6d20cc1376e2195ffcf28fa758"], ["c75c85c1ee17c1a256eff6bd592666cbc923170659d50bfadbd1074ef2167faf", "1ab4eabe5e09409d75cca8922647f48dbd698a16d4f7cc8596daf16940023a52"], ["c5341feaf8a0f5d3b4d0cf0d2f7aad7c60ea8e2b3d4b7fb95c68d57698656045", "95f9f4e9007e5b9fa48fa422a26ab982dc48a4d54d7123986e6d3ab974e88915"], ["83acda3e2a8997e0d52bd4c68705dd22220852b7752d67fd8967a03260c2d89b", "dce1bae1d655ba517f5b5580997117570a77cd3bdd4b8e8e330e97791bc31df0"], ["5b8191468b2990745b9c4164e29d594cf1c0d5716c5d39625bd279b30025237b", "cc3636a03fddddfabed88daab081f3591c48d2ca71ba34fcf6989f4af7625d8e"], ["64778122214e38eff8041796166104e732f5f664d38d77219b89045e2c3b0e6c", "329cf0497e15eec7b8eafc4a0b8a7d1cd8b632038d4aef81974cf9844611a32d"], ["ed4d826afe5762f4795099099aee86642b475a9d6da1017c43d0cb9f1af12323", "8c6f81be3fafa5eec8296f928ac7919dc4d88c9a59442274d0531b7bf7e48e78"], ["38b42924419aecc3acd6f551346fd61a4d82ac2b55f7afe97a06eb40cd109c4a", "7f42c0962feb2f73b2b0965a1f359a6ade49d768a2ce6b07b5acb92b73e05583"], ["c3cad4a8d8bb94a7b434cf70183e8615bb2a8f6224f216e3446ac2e982138911", "f649be278cad976420742ce382dce3a1420e372ef1b25b2759a8ed387282765e"], ["2d408ff4d3d236fd54fae40dce3ea9ecd9212e5736591a9e55588e4a54bd6538", "d596adf0e8692a06bc6284bf0299bef685e2a171585aa1324b9a05b50ce815b7"], ["ee7adf6d247f25fb76e90cf813f888ebd67423a3a3c6fdaebafb7eaa7a33c854", "e077184b4ae8f7056c10dd9ef541689d143f6871789e1801deaefc1d527a8fb4"], ["2f9457c8a9ffaca13d91151dc4c5e89ddd5d37a37c9a864b7c811f3e01144b34", "eb4c98489093d573a295407e1d6fc48a787120ceb3d3dcfbb40634e0e75e221d"], ["d3f332b8a0f115821ce3478cefe18de360120483ef531c277b30c46eb7fec294", "ea75b9b25d717861d1af1c019c372941c8968b90ef134f9f323215e1bb0b2155"], ["183408d338b05aad3521fcd86ef36dd75f3ddb8666b52f7e9a4cdf1f8e152b91", "669985206edf4ac6f39be21f20c98824210e204ce44998095de355371641218c"], ["283fec5db1145e53ba8f1f0ff9cf89a721faffd6c25346863d3956095f40374e", "70b0123774af550e68e68e5f65ca6e9808846e03cf39af778511be82bc32fefe"], ["0ce7570a4f943cfa413bd249d8e7dbfcebc73579770fd6daf54a0dfbdd52fa62", "e115b14bef4695cffb85bdf98ba3985cbd5e5b8983e053907c36f9ce8b75d41d"], ["7e9c4f19c8f4ec3f1269f648cd919525df79031574cbeb1537794a4c838fd470", "e9d9dbfe8cf5f5cca855d6ccbd11f48060fafa8dad6bd3e9c86df5ceb0fa5270"], ["e2a9bbe60d5d5bfea7c7f919df2309f90ba04f4c722a3ec23bf451b464cb001b", "e4177ce1c3cd6ac778925bd67e72cb77d1925b91d06a7f1698411a4786393fb0"], ["504512a43e17ef50e43bf37d42a94990f55e641b1558c265e709900275271012", "954a5fd857ba3acf2d4b1f41e8e1f2cd1f21c4b96899781b742a49d2e61ed18b"], ["81d1f013a6bb325f4b2d1d51ba72c721859945d8a17b3411cd5cbe87285f850d", "2d5d2fb1f0c308553b1fe249298b2059259d3d49d4d7071adce4bcc5dc937193"], ["5b66c2dfc1d2826618a872767e66c33dd90dd51414a3b87ca733383d1d895022", "9bd0178e381895692217267b7407e98727fcaeda12d8cf5449eb5472d554e0ff"], ["aeb5f70e98ec5e38dbd2d544bdbff8ab99b583d9af58c597afaf868820381186", "618bd6b0d25ca70df08b76929336e421691b09730f2f5a052e7adc173584427b"], ["0b289effe841943b84761e3c67a9c02a557679ca76ad753a707a98212505052e", "07a981f0c21862a853b4f895dc62482c530ed7385e5d1e330cfb9d0fe879992c"], ["abae39458b12199e6b0c8360cfd282883f585917e44e1200f81bd356f619291c", "adb23bcdb3d069c5e83be30b2469b0680b2a81b7b667e934233b75efb5753f28"], ["4a9583a6485b5a5a81ac224a518eb29d1e0f658c8d91b0139419c80955fbacaa", "d8003c9ee3c842f5ede375a8a7768db4803ecf119b7b37decea15631b4e8dbca"], ["d52f630edba6f7cb65fcf46544ab0d9eea236ac1460f17ae3a21010210ebc169", "211557489fa93b883e5bea50da005c5368e21a0c41bc83d9145c13e1370d26d0"], ["0bdc523782c75858f5c50fc052e4c1e9c74a2a6335bca9bf8d10e1209add6a4d", "abb1d9f874637668e214efbafbf529d312ff023bc1d5723e585404366834f189"], ["44770a338bf0aab83bb64e476eb6167a88156d168f13ce8626ee0912e59ad087", "5b5930f12e9c40bcb3393a895c2d64576a3abd23b7291b99c965c33def60a55c"], ["b15e7b322e404aee319ac20323e366726503108d8ee8e1c83e32d924515e1679", "5246a8190bbfb2915f82ed5650796f505ced5c2587347d57a873ceaf3d997e7a"], ["a1ed755705225cd0f2c50f758a1c1df9665ae108d5e0419027bbd9aeddb00f22", "3c83145dad9f87487b97e7464850ed02d71dbd04093281a13d2127766a791ee2"], ["e8aaf3616a1bc60fd9bfc43c2c60580f479e9ec9c23a37a23cf8afb31d918af5", "6ce693b64a37c6727e141041ab9a0d589ab9c303a5ac3d3ec89b6f279e79827c"], ["5dc6f8cd2c855e6352a4a4ef6187a6d60759c04338a3db76c5a3aa37054c20a3", "f602c3428593a9a8d671d1bc7c1d88340fe9f5f52e6a7f0fbb8701464e6f4838"], ["6332731167bed8af68a063ef22aa489cf6563620461af26a5f1a07cb6b42f3a6", "b8f7c3b220701320f20ca036761d3e56bf94a7009a919f1a3ea0cb81b74424a6"], ["8a40d9259a393b382305c2017e8654dbad66e50ad798a0d3535230f948080263", "afb6a74d9849454edd7f703a5c6616d143f9cbcc9a9a5d6f6a7b5d1f9d9fcaff"], ["e714710727c7420af517fd3f9a05b7dea6a02c8bcc20b17dcdfdeaf82078645a", "da7d67cbc1ede9d4fedd5dcdc96b04f9a3561ba02581b055eaa144eb4217daca"], ["6131291cd95fb87801e42a68553952c29922bce891c026c0cae1f69c9661c82d", "160e1c1c13342fd459d4f9898ae632b842b8947913733b89384fc1042d30bf01"], ["4bc4f845b6764692d0a9bfa81788809efc5e2aa9da5003bfb782bcf1d1ca4951", "87092dcbb9c3d254e3b055ff3a76ec0564c4a7c57fb1783cefdc40fc10b751f0"], ["45a880a27bbee9df29f9bff5c985f36452865b5d582a201f698e6ecaa2be67df", "fe49a6a8b5e46bf1ef679714dabd590ea831d46b8ee94eb613132ba37855fabb"], ["6a826a38317c0c8664d6847a220145d1877e5495b21500d3f21f1a0d4af4f2a4", "4521954efcc98263df2f14e0e6e6b47af6b83f0bbc20722c15445f87e05f4513"], ["15356506f255f7e96cc8aa1b09dce5728bd860de7c6cc75f613e8a34366a23a9", "cd15abbcd744d4850d5e401f1f89a5df122f37b4e362b4cee3e53b1c00110bf3"], ["f3bc12aef53d9f5f6b86517802dac2eccacff3a5cca6443a2b5e1ca0f2b89b91", "cfd4d36beb2e11f241fd0f367a0737ad303e915ff247f131368ca50918e00957"], ["7e3c8c6dfa04a536f7a26ef18b38764922320bef584533736f728297335c0fd4", "72ea16b532a7336d3332400b303c0236b6a1294d88ce7fe915571284d1f7c189"], ["198cbfcfa0575fc2c161c696d85155fe6943ab9bd6e17223d8844608ad0369d8", "d5e6268b30952422be59fe0efe7ba2e703215994827a46c2f2972b26153cf7ae"], ["1e056e89b68cf35a22183c089089b90d5a147caa780b1fd63aeb1350afb0e5e8", "b8241453abc44c57ddad6ff386d416f43e258a390c6f88379f80472b943f32b9"], ["dc7ff9748d827e7ea6173b2f1a646d47d8108144ce7f98fb3fac729e72faaa21", "c1fdac5aef4c6f0ffcb8e1c5c4417c713e3d5f07146daa1aaaf2e7fee70c4914"], ["71b95efcc4981e0705354bc11cdfbc4836b2eff0bf8f8ec29a99da1b2fd28e79", "fd5a31976fad6aeec304752cc3ebbc511f3695b09a737fa30af42cc6efd684cc"], ["43854caf29dc2bd6c9f3e8ffa25bba83f6b96121897044ae6876883ade542b3a", "563651760897632f8dde31677a24f55834c5c9a55c1cbf36fd8b44803c9c6c81"], ["02adfe17090e9f9c708c9b730d5fd084b6eff990fb87796145c2ecf2d427b222", "b5ce31605d6dd9c622cae425ccd28912c4439820c06950cd4c86d9b453abd7ed"], ["a123452c2b7eaf3115b3a5343b3ff31a09f70c54ae33c620471e3e8227a9d6f9", "933d348378a71f443788194aafc545e7f53e37a6f779f96e8fa14ccdede3b4eb"], ["9b89a3c2ca995a8186c1521761348737aab166ae7decca603d06e32ccec0a6ab", "2a7d3701a8724b12bd7c4830224ac083cbea83d0543b541480ba8c8ae7731232"], ["64dd7457e7d9d73908e2b9a0dc45272b384b04339ed8b2edc907964611e9e9b2", "ea90f8aae214ee16ed608a72366998994e311dc7780ef885b29290c3823c470e"], ["59227431be607c6bd327fd714eb71c8720abba421c7f550a6b35767d6fa2176c", "cb7571c4071c552765bd289ea3cf3f38796da2b12c953d0b8705125c4861d598"], ["53d765cdadb26e9e1c80ddf199374363843b7d08a7237bdc8c5106ef795fe2c2", "7bbbb198eb39973b76d87f8194d45150a66d4f3b128a40bec989a405ad7c287b"], ["e507de9ec16b3bf3523a989c0f5ff6c10452ee909b66ffc16d7b519a57bb66af", "a2f2f02a8272de6e3dc8b39508959ad251b6d3d004c8195259a501e28ff7892a"], ["016f48c60eb84fb281903b8cb9f60b7a65601d76e2a579835569c98339b4a6f2", "8613bb848398681d66f1e75d5b6ef44fd827b6290f4956a441d8f503dd32b289"], ["650471ae774265e3270b513233d12d850bb98e382a3b3af90cab6339e1446056", "838e779334aa6fe6cae90a62d359c339187b403215d97cda4e62724aa5a50306"], ["15dea416fa34584fcc90e19d69825fae348d1ba1fd7ac821559aac2abc21dda8", "01fcabf21e19ce68ee12a3d284bd1304010fa5f5d45f9c15d4070243a8433047"], ["b42b24954f1f70ed3db900878357ba46ee9d6a07b4f7c751dc5cba07b05b46e2", "e15723eb0e0bdbe6d6f28d6da0443c634851f5b4c551bec69f9196a00969ed71"], ["08e9e4f5c6aeac311dab1125dec9b4606ab10b7e8e250960a17fc57fc0230f83", "ffb0e211c79fbb7978bd4e53a05a267ff1e32c34d6287dee64576d31ab959ab2"], ["87be732373bd4b738627fb63bd4d50bfd6f2bb81f804b52829549fe93fe1ac2e", "f6a9186ff147b9b5ffc844b2ec0e255a1ae5537d75624288ce8421f87e94e1a4"], ["43601d61c836387485e9514ab5c8924dd2cfd466af34ac95002727e1659d60f7", "8791c0007c09c94db328034b88c5bbbc113335366679eb099a5e75b583bc2c2a"], ["341b1580f83071c5365f0bcbba66af966902e3942a2560aca0daafa32ab49d0d", "4b985b13c54990267ff564d2d4649c6f7e8fdbe1ba101d941c034e1464877b20"], ["175e7cb3ce4a3a437c7181e2c79fb15433ac1aa8e56492eb57627171f14dad95", "31ce61a87834f52efcf8703f93696f425813015563ca5d9ce92d8fc281135b0d"], ["5ad430cc64e61c61e3b3c8482ca3ecac89c1e4954c80ba98249e45c1307165ad", "bea2a060505c13bc317ca083c5a8b85c9ead5f6e1ac23fbeac7cecea9251c791"], ["41dce0d96dace318988602df07fa84c1080f0ce3dd7d09f28aefefa60db8b837", "74962c3fed9a6e9c896635ea855323b608850091f84dee333cdff8d0d2827928"], ["a5ef449887104dda103c1dc2520676439aed2d5e0432fe5ba23cc14239961bcc", "1cbcf83ea363e0d93e6ecc328653ba7aa165c526765b09f0696b0d61f122db3a"], ["4da26ece9ad4600338bdf68b852a2cbe18225f2e2d6d5e626db57235fb3a9d45", "d10b5a637ab546bfcc610e2d1c3d61f461b0a806e7ba29c73d3de909e9fae659"], ["6e621e6f53d2408e488d8eb16a19a4f7e9d9558511e6911129dedc69f98f4763", "7b148ef273e1b131341ad4779342c7bc7b945a2cb52c448e4bb5fd503cea1a19"], ["ebaf57645bed74699b57ea758a395a9066bae20a8f082ab6da4554d5278be83b", "5847f4e06c6530335e29ea94389ee3e6d916314a60126028650ab9e0bfcfbba7"], ["c0f88a71711b632d24b55dbf052b15d2faa38ca11438c17a6a6ff6353310182f", "2cbfad4d16c0702186611eec408082fbfb2e9898141a52481c59e44ecd0676ff"], ["5d9b6c1884b79498c6244fbf262922c6dc1cddb73cf70ae01b5287b05b5c6350", "328e831d2f2b162c4abe1644bb54cc8518db178c5b6ae97e5e85110c7d7fdf1d"], ["d1d1360f37ed6e69d4f214c6323a53b7e57d759555904016654c49f04e02e21c", "627eea93c6c9b53f9455941440a8b1006eba68d46c922b6a1521f3946dd15e4e"], ["efc987cbf1023af558acfa1897b1b2b2ace29a8365674703e4969ccbee411731", "195a6a65d3790bec716429863bcef432e38242fc9f565dbbe159bc42f5740c69"], ["f3026b97163df3bd61b88b7873864480968d1d7b83ef6b0131090faa18284ff0", "177c3a61682363abbf281615d59f06ff5f87644c84d670e9a6c56ac1b611509b"], ["5d34ff5f123b5b6992ac92c68c9cff460deeecf968ff830b5622090d682c5873", "2d1a0b9c8eaba06543204df148eb161825443efa80f8aff3d49b6626c5955ac8"], ["cbf9ba1794a95247c39da06584308cc8e0ee591d31a9b0bbdac67280468447f4", "549b18c310feaea10225fade934112d34058101d74f005381b82796ad0461736"], ["920975ba09e2261bbf5982a6b57a73448e7747b8368d7a5379acacd4c7dcd31f", "e95e050881af550d09221f5ae95410316367d24bd545bdcb434e7638acb46dbd"], ["815b2ae46fdcb55d926cdce82b4f25d0391323123bc180ff33fcf13207eeca64", "62f637c67d8863748f1e2e26865118b999285b8755f25512c968b4fe49b8c971"], ["1bb9a6c28e28d4ba30ea86397a4d387e27ca8025da2319260de3c454f7e0b16e", "a0cbc0165e32171c8184265eac7e0147206349d541035a94f56efc49dcd7ab93"], ["6f0153fedffd83eab099d29ddde278f19c05a4ba78eb4c3d34d337c6da68bc22", "a532d00d35013f859f4041d3aa231f2b9fc499670e0e2f824d5051f9e7f0c626"], ["3454f73b3bee77a40d00d38471bf555aed23e5e6c6dae8552e9cb7a91b20258a", "92c20846cfdf1e8f3fe5bcaa06bdedc39926833a3f40d28f23a8f952d8d18dde"], ["367807c9a3606b4e1b8c2616ad5280301dfcf68640eddf02fc59317c230e9a86", "1f023f2fa2bbece703dba14c124095cbfdc4f92f00281a148304a412c16ecae6"]]
};
var doubles$1 = {
  step: 4,
  points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "04e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["06f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["0948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "0e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "067c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["0928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "0d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["08ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]
};
var secp256k1 = {
  naf: naf$1,
  doubles: doubles$1
};

var secp256k1$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  naf: naf$1,
  doubles: doubles$1,
  'default': secp256k1
});

var pre$1 = getCjsExportFromNamespace(secp256k1$1);

/*
 * Expose
 */


var secp256k1$2 = new ecdsa('SECP256K1', sha256Browser, pre$1);

var secp256k1Browser = secp256k1$2;

var {
  padLeft: padLeft$4,
  padRight: padRight$2
} = util$1;
var {
  PEMBlock: PEMBlock$3
} = pem;
/*
 * Constants
 */

var keyTypes$1 = {
  DSA: 'ssh-dss',
  RSA: 'ssh-rsa',
  P256: 'ecdsa-sha2-nistp256',
  P384: 'ecdsa-sha2-nistp384',
  P521: 'ecdsa-sha2-nistp521',
  ED25519: 'ssh-ed25519'
};
var keyTypesByVal$1 = {
  [keyTypes$1.DSA]: 'DSA',
  [keyTypes$1.RSA]: 'RSA',
  [keyTypes$1.P256]: 'P256',
  [keyTypes$1.P384]: 'P384',
  [keyTypes$1.P521]: 'P521',
  [keyTypes$1.ED25519]: 'ED25519'
};
var typeToCurve = {
  [keyTypes$1.P256]: 'nistp256',
  [keyTypes$1.P384]: 'nistp384',
  [keyTypes$1.P521]: 'nistp521'
};
var cipherToName = {
  '3des-cbc': 'DES-EDE3-CBC',
  'aes128-cbc': 'AES-128-CBC',
  'aes192-cbc': 'AES-192-CBC',
  'aes256-cbc': 'AES-256-CBC',
  'rijndael-cbc@lysator.liu.se': 'AES-256-CBC',
  'aes128-ctr': 'AES-128-CTR',
  'aes192-ctr': 'AES-192-CTR',
  'aes256-ctr': 'AES-256-CTR'
};
var AUTH_MAGIC = 'openssh-key-v1';
var EMPTY$b = Buffer.alloc(0);
var ZERO32 = Buffer.alloc(32, 0x00);
/**
 * SSHPublicKey
 */

class SSHPublicKey extends bufio.Struct {
  constructor() {
    super();
    this.type = keyTypes$1.ED25519; // DSA

    this.p = EMPTY$b;
    this.q = EMPTY$b;
    this.g = EMPTY$b;
    this.y = EMPTY$b; // RSA

    this.n = EMPTY$b;
    this.e = EMPTY$b; // ECDSA / EDDSA

    this.point = ZERO32; // Comment

    this.comment = '';
  }

  getCurve() {
    if (!typeToCurve.hasOwnProperty(this.type)) throw new Error('No curve available.');
    return typeToCurve[this.type];
  }

  getSize() {
    var size = 0;
    size += sizeString(this.type);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          size += sizeBytes(this.p);
          size += sizeBytes(this.q);
          size += sizeBytes(this.g);
          size += sizeBytes(this.y);
          break;
        }

      case keyTypes$1.RSA:
        {
          size += sizeBytes(this.e);
          size += sizeBytes(this.n);
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          size += sizeBytes(this.getCurve());
          size += sizeBytes(this.point);
          break;
        }

      case keyTypes$1.ED25519:
        {
          size += sizeBytes(this.point);
          break;
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid key.');
        }
    }

    return size;
  }

  write(bw) {
    writeString$2(bw, this.type);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          writeBytes$2(bw, this.p);
          writeBytes$2(bw, this.q);
          writeBytes$2(bw, this.g);
          writeBytes$2(bw, this.y);
          break;
        }

      case keyTypes$1.RSA:
        {
          writeBytes$2(bw, this.e);
          writeBytes$2(bw, this.n);
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          writeString$2(bw, this.getCurve());
          writeBytes$2(bw, this.point);
          break;
        }

      case keyTypes$1.ED25519:
        {
          writeBytes$2(bw, this.point);
          break;
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid key.');
        }
    }

    return bw;
  }

  read(br) {
    this.type = readString$2(br);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          this.p = readBytes$2(br);
          this.q = readBytes$2(br);
          this.g = readBytes$2(br);
          this.y = readBytes$2(br);
          break;
        }

      case keyTypes$1.RSA:
        {
          this.e = readBytes$2(br);
          this.n = readBytes$2(br);
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          if (readString$2(br) !== this.getCurve()) throw new Error('Invalid curve prefix.');
          this.point = readBytes$2(br);
          break;
        }

      case keyTypes$1.ED25519:
        {
          this.point = readBytes$2(br);
          break;
        }

      default:
        {
          throw new Error('Invalid key type.');
        }
    }

    return this;
  }

  toString() {
    var raw = this.encode();
    var comment = this.comment;
    if (comment.length > 0) comment = ' ' + comment;
    return "".concat(this.type, " ").concat(base64.encode(raw)).concat(comment);
  }

  fromString(str) {
    assert_1(typeof str === 'string');
    var parts = str.split(' ', 3);
    if (parts.length < 2) throw new Error('Invalid SSH key text.');
    var [type, rest] = parts;
    if (!keyTypesByVal$1.hasOwnProperty(type)) throw new Error("Unknown SSH public key type: ".concat(type, "."));
    var data = base64.decode(rest);
    this.decode(data);
    if (this.type !== type) throw new Error('Key type mismatch.');
    if (parts.length > 2) this.comment = parts[2].trim();
    return this;
  }

  format() {
    switch (this.type) {
      case keyTypes$1.DSA:
        {
          return {
            type: this.type,
            p: this.p.toString('hex'),
            q: this.q.toString('hex'),
            g: this.g.toString('hex'),
            y: this.y.toString('hex'),
            comment: this.comment
          };
        }

      case keyTypes$1.RSA:
        {
          return {
            type: this.type,
            n: this.n.toString('hex'),
            e: this.e.toString('hex'),
            comment: this.comment
          };
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
      case keyTypes$1.ED25519:
        {
          return {
            type: this.type,
            point: this.point.toString('hex'),
            comment: this.comment
          };
        }

      default:
        {
          return this;
        }
    }
  }

}
/**
 * SSHPrivateKey
 */


class SSHPrivateKey extends bufio.Struct {
  constructor() {
    super();
    this.type = keyTypes$1.ED25519; // DSA

    this.p = EMPTY$b;
    this.q = EMPTY$b;
    this.g = EMPTY$b;
    this.y = EMPTY$b;
    this.x = EMPTY$b; // RSA

    this.n = EMPTY$b;
    this.e = EMPTY$b;
    this.d = EMPTY$b;
    this.p = EMPTY$b;
    this.q = EMPTY$b;
    this.dp = EMPTY$b;
    this.dq = EMPTY$b;
    this.qi = EMPTY$b; // ECDSA / EDDSA

    this.key = ZERO32; // Comment

    this.comment = '';
    this.modern = false;
  }

  getCurve() {
    if (!typeToCurve.hasOwnProperty(this.type)) throw new Error('No curve available.');
    return typeToCurve[this.type];
  }

  encodeSSH(passwd) {
    assert_1(passwd == null || typeof passwd === 'string');
    var kdf = new KDFOptions();
    var pub = new SSHPublicKey();
    var priv = new RawPrivateKey();
    var bw = bufio.write(8192);
    bw.writeString(AUTH_MAGIC);
    bw.writeU8(0);

    if (passwd != null) {
      kdf.name = 'bcrypt';
      kdf.salt = randomBrowser.randomBytes(16);
      kdf.rounds = 16;
      writeString$2(bw, 'aes256-ctr');
    } else {
      writeString$2(bw, 'none');
    }

    kdf.write(bw);
    writeInt(bw, 1);
    pub.type = this.type;
    writeBytes$2(bw, pub.encode());
    priv.type = this.type;

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          priv.p = this.p;
          priv.q = this.q;
          priv.g = this.g;
          priv.y = this.y;
          priv.x = this.x;
          break;
        }

      case keyTypes$1.RSA:
        {
          priv.n = this.n;
          priv.e = this.e;
          priv.d = this.d;
          priv.p = this.p;
          priv.q = this.q;
          priv.qi = this.qi;
          break;
        }

      case keyTypes$1.P256:
        {
          priv.point = p256Browser.publicKeyCreate(this.key, false);
          priv.key = this.key;
          break;
        }

      case keyTypes$1.P384:
        {
          priv.point = p384Browser.publicKeyCreate(this.key, false);
          priv.key = this.key;
          break;
        }

      case keyTypes$1.P521:
        {
          priv.point = p521Browser.publicKeyCreate(this.key, false);
          priv.key = this.key;
          break;
        }

      case keyTypes$1.ED25519:
        {
          priv.point = ed25519Browser.publicKeyCreate(this.key);
          priv.key = this.key;
          break;
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid key.');
        }
    }

    priv.comment = this.comment;
    var raw = priv.encode(passwd != null);
    if (passwd != null) raw = encrypt$4(raw, 'aes256-ctr', passwd, kdf.salt, kdf.rounds);
    writeBytes$2(bw, raw);
    return bw.slice();
  }

  decodeSSH(data, passwd) {
    var br = bufio.read(data);
    var magic = br.readString(14, 'binary');
    if (magic !== AUTH_MAGIC || br.readU8() !== 0) throw new Error('Invalid magic prefix for SSH key.');
    var cipher = readString$2(br);
    var kdf = KDFOptions.read(br);
    if (readInt$1(br) !== 1) throw new Error('Too many SSH keys.');
    var pubRaw = readBytes$2(br);
    var publicKey = SSHPublicKey.decode(pubRaw);
    var privRaw = readBytes$2(br);

    if (cipher !== 'none') {
      if (passwd == null) throw new Error('Cannot decrypt without passphrase.');
      if (kdf.name !== 'bcrypt') throw new Error('Invalid KDF.');
      privRaw = decrypt$3(privRaw, cipher, passwd, kdf.salt, kdf.rounds);
    }

    var priv = RawPrivateKey.decode(privRaw);
    if (priv.type !== publicKey.type) throw new Error('Public/private mismatch.');
    this.type = publicKey.type;

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          this.p = priv.p;
          this.q = priv.q;
          this.g = priv.g;
          this.y = priv.y;
          this.x = priv.x;
          break;
        }

      case keyTypes$1.RSA:
        {
          this.n = priv.n;
          this.e = priv.e;
          this.d = priv.d;
          this.p = priv.p;
          this.q = priv.q;
          this.qi = priv.qi;
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
      case keyTypes$1.ED25519:
        {
          this.key = priv.key;
          break;
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid key.');
        }
    } // Recompute dp and dq.


    if (this.type === keyTypes$1.RSA) {
      var key = new rsaBrowser.RSAPrivateKey(this.n, this.e, this.d, this.p, this.q, null, null, this.qi);
      rsaBrowser.privateKeyCompute(key);
      if (!rsaBrowser.privateKeyVerify(key)) throw new Error('Invalid RSA private key.');
      this.dp = key.dp;
      this.dq = key.dq;
    }

    this.comment = priv.comment;
    this.modern = true;
    return this;
  }

  encode(passwd) {
    // Ed25519 can _only_ use the new school encoding.
    if (this.modern || this.type === keyTypes$1.ED25519) return this.encodeSSH(passwd);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          var key = new openssl.DSAPrivateKey(0, this.p, this.q, this.g, this.y, this.x);
          return key.encode();
        }

      case keyTypes$1.RSA:
        {
          var _key = new pkcs1.RSAPrivateKey(0, this.n, this.e, this.d, this.p, this.q, this.dp, this.dq, this.qi);

          return _key.encode();
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          var curve = null;
          var pub = null;

          switch (this.type) {
            case keyTypes$1.P256:
              curve = 'P256';
              pub = p256Browser.publicKeyCreate(this.key, false);
              break;

            case keyTypes$1.P384:
              curve = 'P384';
              pub = p384Browser.publicKeyCreate(this.key, false);
              break;

            case keyTypes$1.P521:
              curve = 'P521';
              pub = p521Browser.publicKeyCreate(this.key, false);
              break;
          }

          var _key2 = new sec1.ECPrivateKey(1, this.key, curve, pub);

          return _key2.encode();
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid key.');
        }
    }
  }

  toString(passwd) {
    var block = new PEMBlock$3(); // Ed25519 can _only_ use the new school encoding.

    if (this.modern || this.type === keyTypes$1.ED25519) {
      block.type = 'OPENSSH PRIVATE KEY';
      block.data = this.encode(passwd);
      return block.toString();
    }

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          block.type = 'DSA PRIVATE KEY';
          break;
        }

      case keyTypes$1.RSA:
        {
          block.type = 'RSA PRIVATE KEY';
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          block.type = 'EC PRIVATE KEY';
          break;
        }

      default:
        {
          throw new assert_1.AssertionError('Invalid key.');
        }
    }

    block.data = this.encode(null);
    if (passwd != null) pemcrypt.encrypt(block, 'AES-128-CBC', passwd);
    return block.toString();
  }

  fromString(str, passwd) {
    var block = PEMBlock$3.fromString(str);

    if (block.isEncrypted()) {
      if (passwd == null) throw new Error('Private key requires a passphrase.');
      pemcrypt.decrypt(block, passwd);
    }

    switch (block.type) {
      case 'DSA PRIVATE KEY':
        {
          // OpenSSL PKCS1-like format
          var key = openssl.DSAPrivateKey.decode(block.data);
          this.type = keyTypes$1.DSA;
          this.p = key.p.value;
          this.q = key.q.value;
          this.g = key.g.value;
          this.y = key.y.value;
          this.x = key.x.value;
          return this;
        }

      case 'RSA PRIVATE KEY':
        {
          // PKCS1
          var _key3 = pkcs1.RSAPrivateKey.decode(block.data);

          this.type = keyTypes$1.RSA;
          this.n = _key3.n.value;
          this.e = _key3.e.value;
          this.d = _key3.d.value;
          this.p = _key3.p.value;
          this.q = _key3.q.value;
          this.dp = _key3.dp.value;
          this.dq = _key3.dq.value;
          this.qi = _key3.qi.value;
          return this;
        }

      case 'EC PRIVATE KEY':
        {
          // SEC1
          var _key4 = sec1.ECPrivateKey.decode(block.data);

          var curve = _key4.namedCurveOID.getCurveName();

          if (!curve) throw new Error("Unknown curve: ".concat(_key4.namedCurveOID.toString(), "."));
          var type = null;
          var size = 0;

          switch (curve) {
            case 'P256':
              type = keyTypes$1.P256;
              size = 32;
              break;

            case 'P384':
              type = keyTypes$1.P384;
              size = 48;
              break;

            case 'P521':
              type = keyTypes$1.P521;
              size = 66;
              break;

            case 'ED25519':
              type = keyTypes$1.ED25519;
              size = 32;
              break;

            default:
              throw new Error("Unsupported curve: ".concat(curve, "."));
          }

          this.type = type;
          this.key = curve === 'ED25519' ? padRight$2(_key4.privateKey.value, size) : padLeft$4(_key4.privateKey.value, size);
          return this;
        }

      case 'OPENSSH PRIVATE KEY':
        {
          // OpenSSH format
          return this.decodeSSH(block.data, passwd);
        }

      default:
        {
          throw new Error("Unknown private key type: ".concat(block.type, "."));
        }
    }
  }

  format() {
    switch (this.type) {
      case keyTypes$1.DSA:
        {
          return {
            type: this.type,
            p: this.p.toString('hex'),
            q: this.q.toString('hex'),
            g: this.g.toString('hex'),
            y: this.y.toString('hex'),
            x: this.x.toString('hex'),
            comment: this.comment,
            modern: this.modern
          };
        }

      case keyTypes$1.RSA:
        {
          return {
            type: this.type,
            n: this.n.toString('hex'),
            e: this.q.toString('hex'),
            d: this.d.toString('hex'),
            p: this.p.toString('hex'),
            q: this.q.toString('hex'),
            dp: this.dp.toString('hex'),
            dq: this.dq.toString('hex'),
            qi: this.qi.toString('hex'),
            comment: this.comment,
            modern: this.modern
          };
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
      case keyTypes$1.ED25519:
        {
          return {
            type: this.type,
            key: this.key.toString('hex'),
            comment: this.comment,
            modern: this.modern
          };
        }

      default:
        {
          return this;
        }
    }
  }

}
/**
 * KDFOptions
 */


class KDFOptions extends bufio.Struct {
  constructor() {
    super();
    this.name = 'none';
    this.salt = EMPTY$b;
    this.rounds = 0;
  }

  getBodySize() {
    var size = 0;

    switch (this.name) {
      case 'none':
        break;

      case 'bcrypt':
        size += sizeBytes(this.salt);
        size += sizeInt(this.rounds);
        break;

      default:
        throw new Error("Unknown KDF: ".concat(this.name, "."));
    }

    return size;
  }

  getSize() {
    var size = 0;
    size += sizeString(this.name);
    size += sizeInt();
    size += this.getBodySize();
    return size;
  }

  write(bw) {
    writeString$2(bw, this.name);
    writeInt(bw, this.getBodySize());

    switch (this.name) {
      case 'none':
        break;

      case 'bcrypt':
        writeBytes$2(bw, this.salt);
        writeInt(bw, this.rounds);
        break;

      default:
        throw new Error("Unknown KDF: ".concat(this.name, "."));
    }

    return bw;
  }

  read(br) {
    this.name = readString$2(br);
    var child = readChild(br);

    switch (this.name) {
      case 'none':
        break;

      case 'bcrypt':
        this.salt = readBytes$2(child);
        this.rounds = readInt$1(child);
        break;

      default:
        throw new Error("Unknown KDF: ".concat(this.name, "."));
    }

    return this;
  }

}
/**
 * RawPrivateKey
 */


class RawPrivateKey extends bufio.Struct {
  constructor() {
    super();
    this.type = keyTypes$1.ED25519; // DSA

    this.p = EMPTY$b;
    this.q = EMPTY$b;
    this.g = EMPTY$b;
    this.y = EMPTY$b;
    this.x = EMPTY$b; // RSA

    this.n = EMPTY$b;
    this.e = EMPTY$b;
    this.d = EMPTY$b;
    this.p = EMPTY$b;
    this.q = EMPTY$b;
    this.qi = EMPTY$b; // ECDSA / EDDSA

    this.point = ZERO32;
    this.key = ZERO32;
    this.comment = '';
  }

  getSize(useNonce) {
    var size = 0;
    size += sizeInt();
    size += sizeInt();
    size += sizeString(this.type);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          size += sizeBytes(this.p);
          size += sizeBytes(this.q);
          size += sizeBytes(this.g);
          size += sizeBytes(this.y);
          size += sizeBytes(this.x);
          break;
        }

      case keyTypes$1.RSA:
        {
          size += sizeBytes(this.n);
          size += sizeBytes(this.e);
          size += sizeBytes(this.d);
          size += sizeBytes(this.qi);
          size += sizeBytes(this.p);
          size += sizeBytes(this.q);
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          size += sizeString(typeToCurve[this.type]);
          size += sizeBytes(this.point);
          size += sizeBytes(this.key);
          break;
        }

      case keyTypes$1.ED25519:
        {
          size += sizeBytes(this.point);
          size += sizeInt();
          size += this.key.length;
          size += this.point.length;
          break;
        }

      default:
        {
          throw new Error('Invalid key.');
        }
    }

    size += sizeString(this.comment);
    size += 8 - (size & 7);
    return size;
  }

  write(bw, useNonce) {
    var offset = bw.offset;
    var n = 0;
    if (useNonce) n = Math.random() * 0x100000000 >>> 0;
    writeInt(bw, n);
    writeInt(bw, n);
    writeString$2(bw, this.type);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          writeBytes$2(bw, this.p);
          writeBytes$2(bw, this.q);
          writeBytes$2(bw, this.g);
          writeBytes$2(bw, this.y);
          writeBytes$2(bw, this.x);
          break;
        }

      case keyTypes$1.RSA:
        {
          writeBytes$2(bw, this.n);
          writeBytes$2(bw, this.e);
          writeBytes$2(bw, this.d);
          writeBytes$2(bw, this.qi);
          writeBytes$2(bw, this.p);
          writeBytes$2(bw, this.q);
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          writeString$2(bw, typeToCurve[this.type]);
          writeBytes$2(bw, this.point);
          writeBytes$2(bw, this.key);
          break;
        }

      case keyTypes$1.ED25519:
        {
          writeBytes$2(bw, this.point);
          writeBytes$2(bw, bufio.concat(this.key, this.point));
          break;
        }

      default:
        {
          throw new Error('Invalid key.');
        }
    }

    writeString$2(bw, this.comment);
    var size = bw.offset - offset;
    var i = 1;

    while (size & 7) {
      bw.writeU8(i);
      size += 1;
      i += 1;
    }

    return bw;
  }

  read(br) {
    if ((br.left() & 7) !== 0) throw new Error('Invalid padding.');
    if (readInt$1(br) !== readInt$1(br)) throw new Error('Decryption failed.');
    this.type = readString$2(br);

    switch (this.type) {
      case keyTypes$1.DSA:
        {
          this.p = readBytes$2(br);
          this.q = readBytes$2(br);
          this.g = readBytes$2(br);
          this.y = readBytes$2(br);
          this.x = readBytes$2(br);
          break;
        }

      case keyTypes$1.RSA:
        {
          this.n = readBytes$2(br);
          this.e = readBytes$2(br);
          this.d = readBytes$2(br);
          this.qi = readBytes$2(br);
          this.p = readBytes$2(br);
          this.q = readBytes$2(br);
          break;
        }

      case keyTypes$1.P256:
      case keyTypes$1.P384:
      case keyTypes$1.P521:
        {
          var curve = readString$2(br);
          if (curve !== typeToCurve[this.type]) throw new Error('Invalid curve.');
          this.point = readBytes$2(br);
          this.key = readBytes$2(br);
          if (this.type === keyTypes$1.P256) this.key = padLeft$4(this.key, 32);else if (this.type === keyTypes$1.P384) this.key = padLeft$4(this.key, 48);else this.key = padLeft$4(this.key, 66);
          break;
        }

      case keyTypes$1.ED25519:
        {
          var point = readBytes$2(br);
          var blob = readBytes$2(br);
          if (blob.length !== 64) throw new Error('Invalid key pair.');
          var key = blob.slice(0, 32);
          var pub = blob.slice(32, 64);
          if (!point.equals(pub)) throw new Error('Public key mismatch.');
          this.point = point;
          this.key = key;
          break;
        }

      default:
        {
          throw new Error('Invalid key.');
        }
    }

    this.comment = readString$2(br);
    var padding = br.readBytes(br.left(), true);

    for (var i = 0; i < padding.length; i++) {
      if (padding[i] !== i + 1) throw new Error('Invalid padding.');
    }

    return this;
  }

}
/*
 * Encryption
 */


function derive$6(sname, passwd, salt, rounds) {
  assert_1(typeof sname === 'string');
  assert_1(typeof passwd === 'string');
  assert_1(Buffer.isBuffer(salt));
  assert_1(rounds >>> 0 === rounds);
  if (!cipherToName.hasOwnProperty(sname)) throw new Error("Unknown cipher: ".concat(sname, "."));
  var name = cipherToName[sname];
  var {
    keySize,
    ivSize
  } = cipherBrowser.get(name);
  var size = keySize + ivSize;
  var secret = bcrypt.pbkdf(passwd, salt, rounds, size);
  var key = secret.slice(0, keySize);
  var iv = secret.slice(keySize, keySize + ivSize);
  return [name, key, iv];
}

function encrypt$4(data, sname, passwd, salt, rounds) {
  var [name, key, iv] = derive$6(sname, passwd, salt, rounds);
  return cipherBrowser.encrypt(name, key, iv, data);
}

function decrypt$3(data, sname, passwd, salt, rounds) {
  var [name, key, iv] = derive$6(sname, passwd, salt, rounds);
  return cipherBrowser.decrypt(name, key, iv, data);
}
/*
 * Encoding
 */


function readString$2(br) {
  return br.readString(br.readU32BE(), 'binary');
}

function readBytes$2(br) {
  return br.readBytes(br.readU32BE());
}

function readChild(br) {
  return br.readChild(br.readU32BE());
}

function readInt$1(br) {
  return br.readU32BE();
}

function sizeString(str) {
  return 4 + str.length;
}

function writeString$2(bw, str) {
  bw.writeU32BE(str.length);
  bw.writeString(str, 'binary');
  return bw;
}

function sizeBytes(data) {
  return 4 + data.length;
}

function writeBytes$2(bw, data) {
  bw.writeU32BE(data.length);
  bw.writeBytes(data);
  return bw;
}

function sizeInt(num) {
  return 4;
}

function writeInt(bw, num) {
  bw.writeU32BE(num);
  return bw;
}
/*
 * Expose
 */


var keyTypes_1$1 = keyTypes$1;
var keyTypesByVal_1$1 = keyTypesByVal$1;
var SSHPublicKey_1 = SSHPublicKey;
var SSHPrivateKey_1 = SSHPrivateKey;
var KDFOptions_1 = KDFOptions;
var RawPrivateKey_1 = RawPrivateKey;
var ssh = {
  keyTypes: keyTypes_1$1,
  keyTypesByVal: keyTypesByVal_1$1,
  SSHPublicKey: SSHPublicKey_1,
  SSHPrivateKey: SSHPrivateKey_1,
  KDFOptions: KDFOptions_1,
  RawPrivateKey: RawPrivateKey_1
};

/**
 * SHA3
 */


class SHA3 extends keccak {
  /**
   * Create a SHA3 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  final() {
    return super.final(0x06, null);
  }

  static hash() {
    return new SHA3();
  }

  static hmac() {
    var bits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;
    return super.hmac(bits, 0x06, null);
  }

  static digest(data) {
    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;
    return super.digest(data, bits, 0x06, null);
  }

  static root(left, right) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    return super.root(left, right, bits, 0x06, null);
  }

  static multi(x, y, z) {
    var bits = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;
    return super.multi(x, y, z, bits, 0x06, null);
  }

  static mac(data, key) {
    var bits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 256;
    return super.mac(data, key, bits, 0x06, null);
  }

}
/*
 * Static
 */


SHA3.native = 0;
SHA3.id = 'SHA3_256';
SHA3.size = 32;
SHA3.bits = 256;
SHA3.blockSize = 136;
SHA3.zero = Buffer.alloc(32, 0x00);
SHA3.ctx = new SHA3();
/*
 * Expose
 */

var sha3 = SHA3;

var sha3Browser = sha3;

/**
 * SHA3-224
 */


class SHA3_224 extends sha3Browser {
  /**
   * Create a SHA3-224 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(224);
  }

  static hash() {
    return new SHA3_224();
  }

  static hmac() {
    return super.hmac(224);
  }

  static digest(data) {
    return super.digest(data, 224);
  }

  static root(left, right) {
    return super.root(left, right, 224);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 224);
  }

  static mac(data, key) {
    return super.mac(data, key, 224);
  }

}
/*
 * Static
 */


SHA3_224.native = sha3Browser.native;
SHA3_224.id = 'SHA3_224';
SHA3_224.size = 28;
SHA3_224.bits = 224;
SHA3_224.blockSize = 144;
SHA3_224.zero = Buffer.alloc(28, 0x00);
SHA3_224.ctx = new SHA3_224();
/*
 * Expose
 */

var sha3224 = SHA3_224;

/**
 * SHA3-256
 */


class SHA3_256 extends sha3Browser {
  /**
   * Create a SHA3-256 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(256);
  }

  static hash() {
    return new SHA3_256();
  }

  static hmac() {
    return super.hmac(256);
  }

  static digest(data) {
    return super.digest(data, 256);
  }

  static root(left, right) {
    return super.root(left, right, 256);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 256);
  }

  static mac(data, key) {
    return super.mac(data, key, 256);
  }

}
/*
 * Static
 */


SHA3_256.native = sha3Browser.native;
SHA3_256.id = 'SHA3_256';
SHA3_256.size = 32;
SHA3_256.bits = 256;
SHA3_256.blockSize = 136;
SHA3_256.zero = Buffer.alloc(32, 0x00);
SHA3_256.ctx = new SHA3_256();
/*
 * Expose
 */

var sha3256 = SHA3_256;

/**
 * SHA3-384
 */


class SHA3_384 extends sha3Browser {
  /**
   * Create a SHA3-384 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(384);
  }

  static hash() {
    return new SHA3_384();
  }

  static hmac() {
    return super.hmac(384);
  }

  static digest(data) {
    return super.digest(data, 384);
  }

  static root(left, right) {
    return super.root(left, right, 384);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 384);
  }

  static mac(data, key) {
    return super.mac(data, key, 384);
  }

}
/*
 * Static
 */


SHA3_384.native = sha3Browser.native;
SHA3_384.id = 'SHA3_384';
SHA3_384.size = 48;
SHA3_384.bits = 384;
SHA3_384.blockSize = 104;
SHA3_384.zero = Buffer.alloc(48, 0x00);
SHA3_384.ctx = new SHA3_384();
/*
 * Expose
 */

var sha3384 = SHA3_384;

/**
 * SHA3-512
 */


class SHA3_512 extends sha3Browser {
  /**
   * Create a SHA3-512 context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(512);
  }

  static hash() {
    return new SHA3_512();
  }

  static hmac() {
    return super.hmac(512);
  }

  static digest(data) {
    return super.digest(data, 512);
  }

  static root(left, right) {
    return super.root(left, right, 512);
  }

  static multi(x, y, z) {
    return super.multi(x, y, z, 512);
  }

  static mac(data, key) {
    return super.mac(data, key, 512);
  }

}
/*
 * Static
 */


SHA3_512.native = sha3Browser.native;
SHA3_512.id = 'SHA3_512';
SHA3_512.size = 64;
SHA3_512.bits = 512;
SHA3_512.blockSize = 72;
SHA3_512.zero = Buffer.alloc(64, 0x00);
SHA3_512.ctx = new SHA3_512();
/*
 * Expose
 */

var sha3512 = SHA3_512;

/**
 * SHAKE128
 */


class SHAKE128 extends shake {
  /**
   * Create a SHAKE128 Context.
   * @constructor
   */
  constructor() {
    super();
  }

  init() {
    return super.init(128);
  }

  static hash() {
    return new SHAKE128();
  }

  static hmac(len) {
    return super.hmac(128, len);
  }

  static digest(data, len) {
    return super.digest(data, 128, len);
  }

  static root(left, right, len) {
    return super.root(left, right, 128, len);
  }

  static multi(x, y, z, len) {
    return super.multi(x, y, z, 128, len);
  }

  static mac(data, key, len) {
    return super.mac(data, key, 128, len);
  }

}
/*
 * Static
 */


SHAKE128.native = shake.native;
SHAKE128.id = 'SHAKE128';
SHAKE128.size = 16;
SHAKE128.bits = 128;
SHAKE128.blockSize = 168;
SHAKE128.zero = Buffer.alloc(16, 0x00);
SHAKE128.ctx = new SHAKE128();
/*
 * Expose
 */

var shake128 = SHAKE128;

/*
 * Constants
 */


var HI$1 = 1 / 0x100000000;
/**
 * Javascript siphash 2-4 implementation.
 * @private
 * @param {Buffer} data
 * @param {Buffer} key - 128 bit key.
 * @returns {Array} [hi, lo]
 */

function _siphash(data, key) {
  assert_1(Buffer.isBuffer(data));
  assert_1(Buffer.isBuffer(key) && key.length >= 16);
  var blocks = data.length >>> 3;
  var c0 = new U64$1(0x736f6d65, 0x70736575);
  var c1 = new U64$1(0x646f7261, 0x6e646f6d);
  var c2 = new U64$1(0x6c796765, 0x6e657261);
  var c3 = new U64$1(0x74656462, 0x79746573);
  var f0 = new U64$1(data.length << 24, 0);
  var f1 = new U64$1(0, 0xff);
  var k0 = U64$1.decode(key, 0);
  var k1 = U64$1.decode(key, 8); // Init.

  var v0 = c0.ixor(k0);
  var v1 = c1.ixor(k1);
  var v2 = c2.ixor(k0);
  var v3 = c3.ixor(k1); // Blocks.

  var p = 0;

  for (var i = 0; i < blocks; i++) {
    var d = U64$1.decode(data, p);
    v3.ixor(d);
    sipround(v0, v1, v2, v3);
    sipround(v0, v1, v2, v3);
    v0.ixor(d);
    p += 8;
  } // Trailing.


  switch (data.length & 7) {
    case 7:
      f0.hi |= data[p + 6] << 16;

    case 6:
      f0.hi |= data[p + 5] << 8;

    case 5:
      f0.hi |= data[p + 4];

    case 4:
      f0.lo |= data[p + 3] << 24;

    case 3:
      f0.lo |= data[p + 2] << 16;

    case 2:
      f0.lo |= data[p + 1] << 8;

    case 1:
      f0.lo |= data[p];
  } // Finalization.


  v3.ixor(f0);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  v0.ixor(f0);
  v2.ixor(f1);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  v0.ixor(v1);
  v0.ixor(v2);
  v0.ixor(v3);
  return [v0.hi, v0.lo];
}
/**
 * Javascript siphash 2-4 implementation (64 bit ints).
 * @private
 * @param {Number} hi
 * @param {Number} lo
 * @param {Buffer} key - 128 bit key.
 * @returns {Array} [hi, lo]
 */


function _siphash64(hi, lo, key) {
  assert_1(typeof hi === 'number');
  assert_1(typeof lo === 'number');
  assert_1(Buffer.isBuffer(key) && key.length >= 16);
  var c0 = new U64$1(0x736f6d65, 0x70736575);
  var c1 = new U64$1(0x646f7261, 0x6e646f6d);
  var c2 = new U64$1(0x6c796765, 0x6e657261);
  var c3 = new U64$1(0x74656462, 0x79746573);
  var f0 = new U64$1(hi, lo);
  var f1 = new U64$1(0, 0xff);
  var k0 = U64$1.decode(key, 0);
  var k1 = U64$1.decode(key, 8); // Init.

  var v0 = c0.ixor(k0);
  var v1 = c1.ixor(k1);
  var v2 = c2.ixor(k0);
  var v3 = c3.ixor(k1); // Finalization.

  v3.ixor(f0);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  v0.ixor(f0);
  v2.ixor(f1);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  v0.ixor(v1);
  v0.ixor(v2);
  v0.ixor(v3);
  return [v0.hi, v0.lo];
}
/**
 * Javascript siphash 2-4 implementation
 * (64 bit ints with a 256 bit key).
 * @private
 * @param {Number} hi
 * @param {Number} lo
 * @param {Buffer} key - 128 bit key.
 * @returns {Array} [hi, lo]
 */


function _siphash64k256(hi, lo, key) {
  assert_1(typeof hi === 'number');
  assert_1(typeof lo === 'number');
  assert_1(Buffer.isBuffer(key) && key.length >= 32);
  var f0 = new U64$1(hi, lo);
  var f1 = new U64$1(0, 0xff);
  var k0 = U64$1.decode(key, 0);
  var k1 = U64$1.decode(key, 8);
  var k2 = U64$1.decode(key, 16);
  var k3 = U64$1.decode(key, 24); // Init.

  var v0 = k0;
  var v1 = k1;
  var v2 = k2;
  var v3 = k3; // Finalization.

  v3.ixor(f0);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  v0.ixor(f0);
  v2.ixor(f1);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  sipround(v0, v1, v2, v3);
  v0.ixor(v1);
  v0.ixor(v2);
  v0.ixor(v3);
  return [v0.hi, v0.lo];
}
/**
 * Javascript siphash 2-4 implementation.
 * Used by bitcoin for compact block relay.
 * @param {Buffer} data
 * @param {Buffer} key - 128 bit key.
 * @returns {Array} [hi, lo]
 */


function siphash(data, key) {
  return _siphash(data, key);
}
/**
 * Javascript siphash 2-4 implementation (32 bit ints).
 * Used by legacy cuckoo cycle.
 * @param {Number} num
 * @param {Buffer} key - 128 bit key.
 * @returns {Number}
 */


function siphash32(num, key) {
  return _siphash64(0, num, key)[1];
}
/**
 * Javascript siphash 2-4 implementation (64 bit ints).
 * Used by legacy cuckoo cycle.
 * @param {Number} hi
 * @param {Number} lo
 * @param {Buffer} key - 128 bit key.
 * @returns {Array} [hi, lo]
 */


function siphash64(hi, lo, key) {
  return _siphash64(hi, lo, key);
}
/**
 * Javascript siphash 2-4 implementation
 * (32 bit ints with a 256 bit key).
 * Used by cuckoo cycle.
 * @param {Number} num
 * @param {Buffer} key - 256 bit key.
 * @returns {Number}
 */


function siphash32k256(num, key) {
  return _siphash64k256(0, num, key)[1];
}
/**
 * Javascript siphash 2-4 implementation
 * (64 bit ints with a 256 bit key).
 * Used by cuckoo cycle.
 * @param {Number} hi
 * @param {Number} lo
 * @param {Buffer} key - 256 bit key.
 * @returns {Array} [hi, lo]
 */


function siphash64k256(hi, lo, key) {
  return _siphash64k256(hi, lo, key);
}
/**
 * Javascript siphash 2-4 implementation
 * plus 128 bit reduction by a modulus.
 * Used by the neutrino protocol.
 * @param {Buffer} data
 * @param {Buffer} key - 128 bit key.
 * @param {Number} mhi - Modulus hi bits.
 * @param {Number} mlo - Modulus lo bits.
 * @returns {Array} [hi, lo]
 */


function sipmod(data, key, mhi, mlo) {
  var [hi, lo] = _siphash(data, key);

  return reduce64(hi, lo, mhi, mlo);
}
/**
 * U64
 * @ignore
 */


class U64$1 {
  constructor(hi, lo) {
    this.hi = hi | 0;
    this.lo = lo | 0;
  }

  isum(bhi, blo) {
    // Credit to @indutny for this method.
    var a = this;
    var lo = a.lo + blo | 0;
    var s = lo >> 31;
    var as = a.lo >> 31;
    var bs = blo >> 31;
    var c = (as & bs | ~s & (as ^ bs)) & 1;
    var hi = (a.hi + bhi | 0) + c;
    a.hi = hi | 0;
    a.lo = lo;
    return a;
  }

  iadd(b) {
    return this.isum(b.hi, b.lo);
  }

  ixor(b) {
    this.hi ^= b.hi;
    this.lo ^= b.lo;
    return this;
  }

  irotl(bits) {
    var ahi = this.hi;
    var alo = this.lo;
    var bhi = this.hi;
    var blo = this.lo; // a = x << b

    if (bits < 32) {
      ahi <<= bits;
      ahi |= alo >>> 32 - bits;
      alo <<= bits;
    } else {
      ahi = alo << bits - 32;
      alo = 0;
    }

    bits = 64 - bits; // b = x >> (64 - b)

    if (bits < 32) {
      blo >>>= bits;
      blo |= bhi << 32 - bits;
      bhi >>>= bits;
    } else {
      blo = bhi >>> bits - 32;
      bhi = 0;
    } // a | b


    this.hi = ahi | bhi;
    this.lo = alo | blo;
    return this;
  }

  static mul(alo, blo) {
    // u32 * u32 = u64
    var a16 = alo >>> 16;
    var a00 = alo & 0xffff;
    var b16 = blo >>> 16;
    var b00 = blo & 0xffff;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xffff;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xffff;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xffff;
    c48 += c32 >>> 16;
    c48 &= 0xffff;
    var hi = c48 << 16 | c32;
    var lo = c16 << 16 | c00;
    return new U64$1(hi, lo);
  }

  static decode(data, off) {
    var lo = readU32$m(data, off);
    var hi = readU32$m(data, off + 4);
    return new U64$1(hi, lo);
  }

}
/*
 * Helpers
 */


function sipround(v0, v1, v2, v3) {
  v0.iadd(v1);
  v1.irotl(13);
  v1.ixor(v0);
  v0.irotl(32);
  v2.iadd(v3);
  v3.irotl(16);
  v3.ixor(v2);
  v0.iadd(v3);
  v3.irotl(21);
  v3.ixor(v0);
  v2.iadd(v1);
  v1.irotl(17);
  v1.ixor(v2);
  v2.irotl(32);
}

function reduce64(ahi, alo, bhi, blo) {
  // Compute `((uint128_t)a * b) >> 64`.
  // Start with 4 32->64 bit multiplications.
  var axbhi = U64$1.mul(ahi, bhi);
  var axbmid = U64$1.mul(ahi, blo);
  var bxamid = U64$1.mul(bhi, alo);
  var axblo = U64$1.mul(alo, blo); // We can safely overflow in these next steps.
  // c = (axbmid & 0xffffffff) + (bxamid & 0xffffffff) + (axblo >> 32)

  var c = (axbmid.lo >>> 0) + (bxamid.lo >>> 0) + (axblo.hi >>> 0); // m = (axbmid >> 32) + (bxamid >> 32) + (c >> 32)

  var m = (axbmid.hi >>> 0) + (bxamid.hi >>> 0) + (c * HI$1 >>> 0); // axbhi + m

  var {
    hi,
    lo
  } = axbhi.isum(m * HI$1 | 0, m | 0);
  return [hi, lo];
}

function readU32$m(data, off) {
  return data[off++] + data[off++] * 0x100 + data[off++] * 0x10000 + data[off] * 0x1000000;
}
/*
 * Expose
 */


var native_1$f = 0;
var siphash_2 = siphash;
var siphash32_1 = siphash32;
var siphash64_1 = siphash64;
var siphash32k256_1 = siphash32k256;
var siphash64k256_1 = siphash64k256;
var sipmod_1 = sipmod;
var siphash_1 = {
  native: native_1$f,
  siphash: siphash_2,
  siphash32: siphash32_1,
  siphash64: siphash64_1,
  siphash32k256: siphash32k256_1,
  siphash64k256: siphash64k256_1,
  sipmod: sipmod_1
};

var siphashBrowser = siphash_1;

/*
 * Constants
 */


var FINALIZED$c = -1;
var DESC$7 = Buffer.alloc(32, 0x00);
var PADDING$9 = Buffer.alloc(64, 0x00);
PADDING$9[0] = 0x80;
var RC = new Uint32Array([0x00000000, 0x00000000, 0x1823c6e8, 0x87b8014f, 0x36a6d2f5, 0x796f9152, 0x60bc9b8e, 0xa30c7b35, 0x1de0d7c2, 0x2e4bfe57, 0x157737e5, 0x9ff04ada, 0x58c9290a, 0xb1a06b85, 0xbd5d10f4, 0xcb3e0567, 0xe427418b, 0xa77d95d8, 0xfbee7c66, 0xdd17479e, 0xca2dbf07, 0xad5a8333]);
var C0 = new Uint32Array([0x18186018, 0xc07830d8, 0x23238c23, 0x05af4626, 0xc6c63fc6, 0x7ef991b8, 0xe8e887e8, 0x136fcdfb, 0x87872687, 0x4ca113cb, 0xb8b8dab8, 0xa9626d11, 0x01010401, 0x08050209, 0x4f4f214f, 0x426e9e0d, 0x3636d836, 0xadee6c9b, 0xa6a6a2a6, 0x590451ff, 0xd2d26fd2, 0xdebdb90c, 0xf5f5f3f5, 0xfb06f70e, 0x7979f979, 0xef80f296, 0x6f6fa16f, 0x5fcede30, 0x91917e91, 0xfcef3f6d, 0x52525552, 0xaa07a4f8, 0x60609d60, 0x27fdc047, 0xbcbccabc, 0x89766535, 0x9b9b569b, 0xaccd2b37, 0x8e8e028e, 0x048c018a, 0xa3a3b6a3, 0x71155bd2, 0x0c0c300c, 0x603c186c, 0x7b7bf17b, 0xff8af684, 0x3535d435, 0xb5e16a80, 0x1d1d741d, 0xe8693af5, 0xe0e0a7e0, 0x5347ddb3, 0xd7d77bd7, 0xf6acb321, 0xc2c22fc2, 0x5eed999c, 0x2e2eb82e, 0x6d965c43, 0x4b4b314b, 0x627a9629, 0xfefedffe, 0xa321e15d, 0x57574157, 0x8216aed5, 0x15155415, 0xa8412abd, 0x7777c177, 0x9fb6eee8, 0x3737dc37, 0xa5eb6e92, 0xe5e5b3e5, 0x7b56d79e, 0x9f9f469f, 0x8cd92313, 0xf0f0e7f0, 0xd317fd23, 0x4a4a354a, 0x6a7f9420, 0xdada4fda, 0x9e95a944, 0x58587d58, 0xfa25b0a2, 0xc9c903c9, 0x06ca8fcf, 0x2929a429, 0x558d527c, 0x0a0a280a, 0x5022145a, 0xb1b1feb1, 0xe14f7f50, 0xa0a0baa0, 0x691a5dc9, 0x6b6bb16b, 0x7fdad614, 0x85852e85, 0x5cab17d9, 0xbdbdcebd, 0x8173673c, 0x5d5d695d, 0xd234ba8f, 0x10104010, 0x80502090, 0xf4f4f7f4, 0xf303f507, 0xcbcb0bcb, 0x16c08bdd, 0x3e3ef83e, 0xedc67cd3, 0x05051405, 0x28110a2d, 0x67678167, 0x1fe6ce78, 0xe4e4b7e4, 0x7353d597, 0x27279c27, 0x25bb4e02, 0x41411941, 0x32588273, 0x8b8b168b, 0x2c9d0ba7, 0xa7a7a6a7, 0x510153f6, 0x7d7de97d, 0xcf94fab2, 0x95956e95, 0xdcfb3749, 0xd8d847d8, 0x8e9fad56, 0xfbfbcbfb, 0x8b30eb70, 0xeeee9fee, 0x2371c1cd, 0x7c7ced7c, 0xc791f8bb, 0x66668566, 0x17e3cc71, 0xdddd53dd, 0xa68ea77b, 0x17175c17, 0xb84b2eaf, 0x47470147, 0x02468e45, 0x9e9e429e, 0x84dc211a, 0xcaca0fca, 0x1ec589d4, 0x2d2db42d, 0x75995a58, 0xbfbfc6bf, 0x9179632e, 0x07071c07, 0x381b0e3f, 0xadad8ead, 0x012347ac, 0x5a5a755a, 0xea2fb4b0, 0x83833683, 0x6cb51bef, 0x3333cc33, 0x85ff66b6, 0x63639163, 0x3ff2c65c, 0x02020802, 0x100a0412, 0xaaaa92aa, 0x39384993, 0x7171d971, 0xafa8e2de, 0xc8c807c8, 0x0ecf8dc6, 0x19196419, 0xc87d32d1, 0x49493949, 0x7270923b, 0xd9d943d9, 0x869aaf5f, 0xf2f2eff2, 0xc31df931, 0xe3e3abe3, 0x4b48dba8, 0x5b5b715b, 0xe22ab6b9, 0x88881a88, 0x34920dbc, 0x9a9a529a, 0xa4c8293e, 0x26269826, 0x2dbe4c0b, 0x3232c832, 0x8dfa64bf, 0xb0b0fab0, 0xe94a7d59, 0xe9e983e9, 0x1b6acff2, 0x0f0f3c0f, 0x78331e77, 0xd5d573d5, 0xe6a6b733, 0x80803a80, 0x74ba1df4, 0xbebec2be, 0x997c6127, 0xcdcd13cd, 0x26de87eb, 0x3434d034, 0xbde46889, 0x48483d48, 0x7a759032, 0xffffdbff, 0xab24e354, 0x7a7af57a, 0xf78ff48d, 0x90907a90, 0xf4ea3d64, 0x5f5f615f, 0xc23ebe9d, 0x20208020, 0x1da0403d, 0x6868bd68, 0x67d5d00f, 0x1a1a681a, 0xd07234ca, 0xaeae82ae, 0x192c41b7, 0xb4b4eab4, 0xc95e757d, 0x54544d54, 0x9a19a8ce, 0x93937693, 0xece53b7f, 0x22228822, 0x0daa442f, 0x64648d64, 0x07e9c863, 0xf1f1e3f1, 0xdb12ff2a, 0x7373d173, 0xbfa2e6cc, 0x12124812, 0x905a2482, 0x40401d40, 0x3a5d807a, 0x08082008, 0x40281048, 0xc3c32bc3, 0x56e89b95, 0xecec97ec, 0x337bc5df, 0xdbdb4bdb, 0x9690ab4d, 0xa1a1bea1, 0x611f5fc0, 0x8d8d0e8d, 0x1c830791, 0x3d3df43d, 0xf5c97ac8, 0x97976697, 0xccf1335b, 0x00000000, 0x00000000, 0xcfcf1bcf, 0x36d483f9, 0x2b2bac2b, 0x4587566e, 0x7676c576, 0x97b3ece1, 0x82823282, 0x64b019e6, 0xd6d67fd6, 0xfea9b128, 0x1b1b6c1b, 0xd87736c3, 0xb5b5eeb5, 0xc15b7774, 0xafaf86af, 0x112943be, 0x6a6ab56a, 0x77dfd41d, 0x50505d50, 0xba0da0ea, 0x45450945, 0x124c8a57, 0xf3f3ebf3, 0xcb18fb38, 0x3030c030, 0x9df060ad, 0xefef9bef, 0x2b74c3c4, 0x3f3ffc3f, 0xe5c37eda, 0x55554955, 0x921caac7, 0xa2a2b2a2, 0x791059db, 0xeaea8fea, 0x0365c9e9, 0x65658965, 0x0fecca6a, 0xbabad2ba, 0xb9686903, 0x2f2fbc2f, 0x65935e4a, 0xc0c027c0, 0x4ee79d8e, 0xdede5fde, 0xbe81a160, 0x1c1c701c, 0xe06c38fc, 0xfdfdd3fd, 0xbb2ee746, 0x4d4d294d, 0x52649a1f, 0x92927292, 0xe4e03976, 0x7575c975, 0x8fbceafa, 0x06061806, 0x301e0c36, 0x8a8a128a, 0x249809ae, 0xb2b2f2b2, 0xf940794b, 0xe6e6bfe6, 0x6359d185, 0x0e0e380e, 0x70361c7e, 0x1f1f7c1f, 0xf8633ee7, 0x62629562, 0x37f7c455, 0xd4d477d4, 0xeea3b53a, 0xa8a89aa8, 0x29324d81, 0x96966296, 0xc4f43152, 0xf9f9c3f9, 0x9b3aef62, 0xc5c533c5, 0x66f697a3, 0x25259425, 0x35b14a10, 0x59597959, 0xf220b2ab, 0x84842a84, 0x54ae15d0, 0x7272d572, 0xb7a7e4c5, 0x3939e439, 0xd5dd72ec, 0x4c4c2d4c, 0x5a619816, 0x5e5e655e, 0xca3bbc94, 0x7878fd78, 0xe785f09f, 0x3838e038, 0xddd870e5, 0x8c8c0a8c, 0x14860598, 0xd1d163d1, 0xc6b2bf17, 0xa5a5aea5, 0x410b57e4, 0xe2e2afe2, 0x434dd9a1, 0x61619961, 0x2ff8c24e, 0xb3b3f6b3, 0xf1457b42, 0x21218421, 0x15a54234, 0x9c9c4a9c, 0x94d62508, 0x1e1e781e, 0xf0663cee, 0x43431143, 0x22528661, 0xc7c73bc7, 0x76fc93b1, 0xfcfcd7fc, 0xb32be54f, 0x04041004, 0x20140824, 0x51515951, 0xb208a2e3, 0x99995e99, 0xbcc72f25, 0x6d6da96d, 0x4fc4da22, 0x0d0d340d, 0x68391a65, 0xfafacffa, 0x8335e979, 0xdfdf5bdf, 0xb684a369, 0x7e7ee57e, 0xd79bfca9, 0x24249024, 0x3db44819, 0x3b3bec3b, 0xc5d776fe, 0xabab96ab, 0x313d4b9a, 0xcece1fce, 0x3ed181f0, 0x11114411, 0x88552299, 0x8f8f068f, 0x0c890383, 0x4e4e254e, 0x4a6b9c04, 0xb7b7e6b7, 0xd1517366, 0xebeb8beb, 0x0b60cbe0, 0x3c3cf03c, 0xfdcc78c1, 0x81813e81, 0x7cbf1ffd, 0x94946a94, 0xd4fe3540, 0xf7f7fbf7, 0xeb0cf31c, 0xb9b9deb9, 0xa1676f18, 0x13134c13, 0x985f268b, 0x2c2cb02c, 0x7d9c5851, 0xd3d36bd3, 0xd6b8bb05, 0xe7e7bbe7, 0x6b5cd38c, 0x6e6ea56e, 0x57cbdc39, 0xc4c437c4, 0x6ef395aa, 0x03030c03, 0x180f061b, 0x56564556, 0x8a13acdc, 0x44440d44, 0x1a49885e, 0x7f7fe17f, 0xdf9efea0, 0xa9a99ea9, 0x21374f88, 0x2a2aa82a, 0x4d825467, 0xbbbbd6bb, 0xb16d6b0a, 0xc1c123c1, 0x46e29f87, 0x53535153, 0xa202a6f1, 0xdcdc57dc, 0xae8ba572, 0x0b0b2c0b, 0x58271653, 0x9d9d4e9d, 0x9cd32701, 0x6c6cad6c, 0x47c1d82b, 0x3131c431, 0x95f562a4, 0x7474cd74, 0x87b9e8f3, 0xf6f6fff6, 0xe309f115, 0x46460546, 0x0a438c4c, 0xacac8aac, 0x092645a5, 0x89891e89, 0x3c970fb5, 0x14145014, 0xa04428b4, 0xe1e1a3e1, 0x5b42dfba, 0x16165816, 0xb04e2ca6, 0x3a3ae83a, 0xcdd274f7, 0x6969b969, 0x6fd0d206, 0x09092409, 0x482d1241, 0x7070dd70, 0xa7ade0d7, 0xb6b6e2b6, 0xd954716f, 0xd0d067d0, 0xceb7bd1e, 0xeded93ed, 0x3b7ec7d6, 0xcccc17cc, 0x2edb85e2, 0x42421542, 0x2a578468, 0x98985a98, 0xb4c22d2c, 0xa4a4aaa4, 0x490e55ed, 0x2828a028, 0x5d885075, 0x5c5c6d5c, 0xda31b886, 0xf8f8c7f8, 0x933fed6b, 0x86862286, 0x44a411c2]);
var C1 = new Uint32Array([0xd8181860, 0x18c07830, 0x2623238c, 0x2305af46, 0xb8c6c63f, 0xc67ef991, 0xfbe8e887, 0xe8136fcd, 0xcb878726, 0x874ca113, 0x11b8b8da, 0xb8a9626d, 0x09010104, 0x01080502, 0x0d4f4f21, 0x4f426e9e, 0x9b3636d8, 0x36adee6c, 0xffa6a6a2, 0xa6590451, 0x0cd2d26f, 0xd2debdb9, 0x0ef5f5f3, 0xf5fb06f7, 0x967979f9, 0x79ef80f2, 0x306f6fa1, 0x6f5fcede, 0x6d91917e, 0x91fcef3f, 0xf8525255, 0x52aa07a4, 0x4760609d, 0x6027fdc0, 0x35bcbcca, 0xbc897665, 0x379b9b56, 0x9baccd2b, 0x8a8e8e02, 0x8e048c01, 0xd2a3a3b6, 0xa371155b, 0x6c0c0c30, 0x0c603c18, 0x847b7bf1, 0x7bff8af6, 0x803535d4, 0x35b5e16a, 0xf51d1d74, 0x1de8693a, 0xb3e0e0a7, 0xe05347dd, 0x21d7d77b, 0xd7f6acb3, 0x9cc2c22f, 0xc25eed99, 0x432e2eb8, 0x2e6d965c, 0x294b4b31, 0x4b627a96, 0x5dfefedf, 0xfea321e1, 0xd5575741, 0x578216ae, 0xbd151554, 0x15a8412a, 0xe87777c1, 0x779fb6ee, 0x923737dc, 0x37a5eb6e, 0x9ee5e5b3, 0xe57b56d7, 0x139f9f46, 0x9f8cd923, 0x23f0f0e7, 0xf0d317fd, 0x204a4a35, 0x4a6a7f94, 0x44dada4f, 0xda9e95a9, 0xa258587d, 0x58fa25b0, 0xcfc9c903, 0xc906ca8f, 0x7c2929a4, 0x29558d52, 0x5a0a0a28, 0x0a502214, 0x50b1b1fe, 0xb1e14f7f, 0xc9a0a0ba, 0xa0691a5d, 0x146b6bb1, 0x6b7fdad6, 0xd985852e, 0x855cab17, 0x3cbdbdce, 0xbd817367, 0x8f5d5d69, 0x5dd234ba, 0x90101040, 0x10805020, 0x07f4f4f7, 0xf4f303f5, 0xddcbcb0b, 0xcb16c08b, 0xd33e3ef8, 0x3eedc67c, 0x2d050514, 0x0528110a, 0x78676781, 0x671fe6ce, 0x97e4e4b7, 0xe47353d5, 0x0227279c, 0x2725bb4e, 0x73414119, 0x41325882, 0xa78b8b16, 0x8b2c9d0b, 0xf6a7a7a6, 0xa7510153, 0xb27d7de9, 0x7dcf94fa, 0x4995956e, 0x95dcfb37, 0x56d8d847, 0xd88e9fad, 0x70fbfbcb, 0xfb8b30eb, 0xcdeeee9f, 0xee2371c1, 0xbb7c7ced, 0x7cc791f8, 0x71666685, 0x6617e3cc, 0x7bdddd53, 0xdda68ea7, 0xaf17175c, 0x17b84b2e, 0x45474701, 0x4702468e, 0x1a9e9e42, 0x9e84dc21, 0xd4caca0f, 0xca1ec589, 0x582d2db4, 0x2d75995a, 0x2ebfbfc6, 0xbf917963, 0x3f07071c, 0x07381b0e, 0xacadad8e, 0xad012347, 0xb05a5a75, 0x5aea2fb4, 0xef838336, 0x836cb51b, 0xb63333cc, 0x3385ff66, 0x5c636391, 0x633ff2c6, 0x12020208, 0x02100a04, 0x93aaaa92, 0xaa393849, 0xde7171d9, 0x71afa8e2, 0xc6c8c807, 0xc80ecf8d, 0xd1191964, 0x19c87d32, 0x3b494939, 0x49727092, 0x5fd9d943, 0xd9869aaf, 0x31f2f2ef, 0xf2c31df9, 0xa8e3e3ab, 0xe34b48db, 0xb95b5b71, 0x5be22ab6, 0xbc88881a, 0x8834920d, 0x3e9a9a52, 0x9aa4c829, 0x0b262698, 0x262dbe4c, 0xbf3232c8, 0x328dfa64, 0x59b0b0fa, 0xb0e94a7d, 0xf2e9e983, 0xe91b6acf, 0x770f0f3c, 0x0f78331e, 0x33d5d573, 0xd5e6a6b7, 0xf480803a, 0x8074ba1d, 0x27bebec2, 0xbe997c61, 0xebcdcd13, 0xcd26de87, 0x893434d0, 0x34bde468, 0x3248483d, 0x487a7590, 0x54ffffdb, 0xffab24e3, 0x8d7a7af5, 0x7af78ff4, 0x6490907a, 0x90f4ea3d, 0x9d5f5f61, 0x5fc23ebe, 0x3d202080, 0x201da040, 0x0f6868bd, 0x6867d5d0, 0xca1a1a68, 0x1ad07234, 0xb7aeae82, 0xae192c41, 0x7db4b4ea, 0xb4c95e75, 0xce54544d, 0x549a19a8, 0x7f939376, 0x93ece53b, 0x2f222288, 0x220daa44, 0x6364648d, 0x6407e9c8, 0x2af1f1e3, 0xf1db12ff, 0xcc7373d1, 0x73bfa2e6, 0x82121248, 0x12905a24, 0x7a40401d, 0x403a5d80, 0x48080820, 0x08402810, 0x95c3c32b, 0xc356e89b, 0xdfecec97, 0xec337bc5, 0x4ddbdb4b, 0xdb9690ab, 0xc0a1a1be, 0xa1611f5f, 0x918d8d0e, 0x8d1c8307, 0xc83d3df4, 0x3df5c97a, 0x5b979766, 0x97ccf133, 0x00000000, 0x00000000, 0xf9cfcf1b, 0xcf36d483, 0x6e2b2bac, 0x2b458756, 0xe17676c5, 0x7697b3ec, 0xe6828232, 0x8264b019, 0x28d6d67f, 0xd6fea9b1, 0xc31b1b6c, 0x1bd87736, 0x74b5b5ee, 0xb5c15b77, 0xbeafaf86, 0xaf112943, 0x1d6a6ab5, 0x6a77dfd4, 0xea50505d, 0x50ba0da0, 0x57454509, 0x45124c8a, 0x38f3f3eb, 0xf3cb18fb, 0xad3030c0, 0x309df060, 0xc4efef9b, 0xef2b74c3, 0xda3f3ffc, 0x3fe5c37e, 0xc7555549, 0x55921caa, 0xdba2a2b2, 0xa2791059, 0xe9eaea8f, 0xea0365c9, 0x6a656589, 0x650fecca, 0x03babad2, 0xbab96869, 0x4a2f2fbc, 0x2f65935e, 0x8ec0c027, 0xc04ee79d, 0x60dede5f, 0xdebe81a1, 0xfc1c1c70, 0x1ce06c38, 0x46fdfdd3, 0xfdbb2ee7, 0x1f4d4d29, 0x4d52649a, 0x76929272, 0x92e4e039, 0xfa7575c9, 0x758fbcea, 0x36060618, 0x06301e0c, 0xae8a8a12, 0x8a249809, 0x4bb2b2f2, 0xb2f94079, 0x85e6e6bf, 0xe66359d1, 0x7e0e0e38, 0x0e70361c, 0xe71f1f7c, 0x1ff8633e, 0x55626295, 0x6237f7c4, 0x3ad4d477, 0xd4eea3b5, 0x81a8a89a, 0xa829324d, 0x52969662, 0x96c4f431, 0x62f9f9c3, 0xf99b3aef, 0xa3c5c533, 0xc566f697, 0x10252594, 0x2535b14a, 0xab595979, 0x59f220b2, 0xd084842a, 0x8454ae15, 0xc57272d5, 0x72b7a7e4, 0xec3939e4, 0x39d5dd72, 0x164c4c2d, 0x4c5a6198, 0x945e5e65, 0x5eca3bbc, 0x9f7878fd, 0x78e785f0, 0xe53838e0, 0x38ddd870, 0x988c8c0a, 0x8c148605, 0x17d1d163, 0xd1c6b2bf, 0xe4a5a5ae, 0xa5410b57, 0xa1e2e2af, 0xe2434dd9, 0x4e616199, 0x612ff8c2, 0x42b3b3f6, 0xb3f1457b, 0x34212184, 0x2115a542, 0x089c9c4a, 0x9c94d625, 0xee1e1e78, 0x1ef0663c, 0x61434311, 0x43225286, 0xb1c7c73b, 0xc776fc93, 0x4ffcfcd7, 0xfcb32be5, 0x24040410, 0x04201408, 0xe3515159, 0x51b208a2, 0x2599995e, 0x99bcc72f, 0x226d6da9, 0x6d4fc4da, 0x650d0d34, 0x0d68391a, 0x79fafacf, 0xfa8335e9, 0x69dfdf5b, 0xdfb684a3, 0xa97e7ee5, 0x7ed79bfc, 0x19242490, 0x243db448, 0xfe3b3bec, 0x3bc5d776, 0x9aabab96, 0xab313d4b, 0xf0cece1f, 0xce3ed181, 0x99111144, 0x11885522, 0x838f8f06, 0x8f0c8903, 0x044e4e25, 0x4e4a6b9c, 0x66b7b7e6, 0xb7d15173, 0xe0ebeb8b, 0xeb0b60cb, 0xc13c3cf0, 0x3cfdcc78, 0xfd81813e, 0x817cbf1f, 0x4094946a, 0x94d4fe35, 0x1cf7f7fb, 0xf7eb0cf3, 0x18b9b9de, 0xb9a1676f, 0x8b13134c, 0x13985f26, 0x512c2cb0, 0x2c7d9c58, 0x05d3d36b, 0xd3d6b8bb, 0x8ce7e7bb, 0xe76b5cd3, 0x396e6ea5, 0x6e57cbdc, 0xaac4c437, 0xc46ef395, 0x1b03030c, 0x03180f06, 0xdc565645, 0x568a13ac, 0x5e44440d, 0x441a4988, 0xa07f7fe1, 0x7fdf9efe, 0x88a9a99e, 0xa921374f, 0x672a2aa8, 0x2a4d8254, 0x0abbbbd6, 0xbbb16d6b, 0x87c1c123, 0xc146e29f, 0xf1535351, 0x53a202a6, 0x72dcdc57, 0xdcae8ba5, 0x530b0b2c, 0x0b582716, 0x019d9d4e, 0x9d9cd327, 0x2b6c6cad, 0x6c47c1d8, 0xa43131c4, 0x3195f562, 0xf37474cd, 0x7487b9e8, 0x15f6f6ff, 0xf6e309f1, 0x4c464605, 0x460a438c, 0xa5acac8a, 0xac092645, 0xb589891e, 0x893c970f, 0xb4141450, 0x14a04428, 0xbae1e1a3, 0xe15b42df, 0xa6161658, 0x16b04e2c, 0xf73a3ae8, 0x3acdd274, 0x066969b9, 0x696fd0d2, 0x41090924, 0x09482d12, 0xd77070dd, 0x70a7ade0, 0x6fb6b6e2, 0xb6d95471, 0x1ed0d067, 0xd0ceb7bd, 0xd6eded93, 0xed3b7ec7, 0xe2cccc17, 0xcc2edb85, 0x68424215, 0x422a5784, 0x2c98985a, 0x98b4c22d, 0xeda4a4aa, 0xa4490e55, 0x752828a0, 0x285d8850, 0x865c5c6d, 0x5cda31b8, 0x6bf8f8c7, 0xf8933fed, 0xc2868622, 0x8644a411]);
var C2 = new Uint32Array([0x30d81818, 0x6018c078, 0x46262323, 0x8c2305af, 0x91b8c6c6, 0x3fc67ef9, 0xcdfbe8e8, 0x87e8136f, 0x13cb8787, 0x26874ca1, 0x6d11b8b8, 0xdab8a962, 0x02090101, 0x04010805, 0x9e0d4f4f, 0x214f426e, 0x6c9b3636, 0xd836adee, 0x51ffa6a6, 0xa2a65904, 0xb90cd2d2, 0x6fd2debd, 0xf70ef5f5, 0xf3f5fb06, 0xf2967979, 0xf979ef80, 0xde306f6f, 0xa16f5fce, 0x3f6d9191, 0x7e91fcef, 0xa4f85252, 0x5552aa07, 0xc0476060, 0x9d6027fd, 0x6535bcbc, 0xcabc8976, 0x2b379b9b, 0x569baccd, 0x018a8e8e, 0x028e048c, 0x5bd2a3a3, 0xb6a37115, 0x186c0c0c, 0x300c603c, 0xf6847b7b, 0xf17bff8a, 0x6a803535, 0xd435b5e1, 0x3af51d1d, 0x741de869, 0xddb3e0e0, 0xa7e05347, 0xb321d7d7, 0x7bd7f6ac, 0x999cc2c2, 0x2fc25eed, 0x5c432e2e, 0xb82e6d96, 0x96294b4b, 0x314b627a, 0xe15dfefe, 0xdffea321, 0xaed55757, 0x41578216, 0x2abd1515, 0x5415a841, 0xeee87777, 0xc1779fb6, 0x6e923737, 0xdc37a5eb, 0xd79ee5e5, 0xb3e57b56, 0x23139f9f, 0x469f8cd9, 0xfd23f0f0, 0xe7f0d317, 0x94204a4a, 0x354a6a7f, 0xa944dada, 0x4fda9e95, 0xb0a25858, 0x7d58fa25, 0x8fcfc9c9, 0x03c906ca, 0x527c2929, 0xa429558d, 0x145a0a0a, 0x280a5022, 0x7f50b1b1, 0xfeb1e14f, 0x5dc9a0a0, 0xbaa0691a, 0xd6146b6b, 0xb16b7fda, 0x17d98585, 0x2e855cab, 0x673cbdbd, 0xcebd8173, 0xba8f5d5d, 0x695dd234, 0x20901010, 0x40108050, 0xf507f4f4, 0xf7f4f303, 0x8bddcbcb, 0x0bcb16c0, 0x7cd33e3e, 0xf83eedc6, 0x0a2d0505, 0x14052811, 0xce786767, 0x81671fe6, 0xd597e4e4, 0xb7e47353, 0x4e022727, 0x9c2725bb, 0x82734141, 0x19413258, 0x0ba78b8b, 0x168b2c9d, 0x53f6a7a7, 0xa6a75101, 0xfab27d7d, 0xe97dcf94, 0x37499595, 0x6e95dcfb, 0xad56d8d8, 0x47d88e9f, 0xeb70fbfb, 0xcbfb8b30, 0xc1cdeeee, 0x9fee2371, 0xf8bb7c7c, 0xed7cc791, 0xcc716666, 0x856617e3, 0xa77bdddd, 0x53dda68e, 0x2eaf1717, 0x5c17b84b, 0x8e454747, 0x01470246, 0x211a9e9e, 0x429e84dc, 0x89d4caca, 0x0fca1ec5, 0x5a582d2d, 0xb42d7599, 0x632ebfbf, 0xc6bf9179, 0x0e3f0707, 0x1c07381b, 0x47acadad, 0x8ead0123, 0xb4b05a5a, 0x755aea2f, 0x1bef8383, 0x36836cb5, 0x66b63333, 0xcc3385ff, 0xc65c6363, 0x91633ff2, 0x04120202, 0x0802100a, 0x4993aaaa, 0x92aa3938, 0xe2de7171, 0xd971afa8, 0x8dc6c8c8, 0x07c80ecf, 0x32d11919, 0x6419c87d, 0x923b4949, 0x39497270, 0xaf5fd9d9, 0x43d9869a, 0xf931f2f2, 0xeff2c31d, 0xdba8e3e3, 0xabe34b48, 0xb6b95b5b, 0x715be22a, 0x0dbc8888, 0x1a883492, 0x293e9a9a, 0x529aa4c8, 0x4c0b2626, 0x98262dbe, 0x64bf3232, 0xc8328dfa, 0x7d59b0b0, 0xfab0e94a, 0xcff2e9e9, 0x83e91b6a, 0x1e770f0f, 0x3c0f7833, 0xb733d5d5, 0x73d5e6a6, 0x1df48080, 0x3a8074ba, 0x6127bebe, 0xc2be997c, 0x87ebcdcd, 0x13cd26de, 0x68893434, 0xd034bde4, 0x90324848, 0x3d487a75, 0xe354ffff, 0xdbffab24, 0xf48d7a7a, 0xf57af78f, 0x3d649090, 0x7a90f4ea, 0xbe9d5f5f, 0x615fc23e, 0x403d2020, 0x80201da0, 0xd00f6868, 0xbd6867d5, 0x34ca1a1a, 0x681ad072, 0x41b7aeae, 0x82ae192c, 0x757db4b4, 0xeab4c95e, 0xa8ce5454, 0x4d549a19, 0x3b7f9393, 0x7693ece5, 0x442f2222, 0x88220daa, 0xc8636464, 0x8d6407e9, 0xff2af1f1, 0xe3f1db12, 0xe6cc7373, 0xd173bfa2, 0x24821212, 0x4812905a, 0x807a4040, 0x1d403a5d, 0x10480808, 0x20084028, 0x9b95c3c3, 0x2bc356e8, 0xc5dfecec, 0x97ec337b, 0xab4ddbdb, 0x4bdb9690, 0x5fc0a1a1, 0xbea1611f, 0x07918d8d, 0x0e8d1c83, 0x7ac83d3d, 0xf43df5c9, 0x335b9797, 0x6697ccf1, 0x00000000, 0x00000000, 0x83f9cfcf, 0x1bcf36d4, 0x566e2b2b, 0xac2b4587, 0xece17676, 0xc57697b3, 0x19e68282, 0x328264b0, 0xb128d6d6, 0x7fd6fea9, 0x36c31b1b, 0x6c1bd877, 0x7774b5b5, 0xeeb5c15b, 0x43beafaf, 0x86af1129, 0xd41d6a6a, 0xb56a77df, 0xa0ea5050, 0x5d50ba0d, 0x8a574545, 0x0945124c, 0xfb38f3f3, 0xebf3cb18, 0x60ad3030, 0xc0309df0, 0xc3c4efef, 0x9bef2b74, 0x7eda3f3f, 0xfc3fe5c3, 0xaac75555, 0x4955921c, 0x59dba2a2, 0xb2a27910, 0xc9e9eaea, 0x8fea0365, 0xca6a6565, 0x89650fec, 0x6903baba, 0xd2bab968, 0x5e4a2f2f, 0xbc2f6593, 0x9d8ec0c0, 0x27c04ee7, 0xa160dede, 0x5fdebe81, 0x38fc1c1c, 0x701ce06c, 0xe746fdfd, 0xd3fdbb2e, 0x9a1f4d4d, 0x294d5264, 0x39769292, 0x7292e4e0, 0xeafa7575, 0xc9758fbc, 0x0c360606, 0x1806301e, 0x09ae8a8a, 0x128a2498, 0x794bb2b2, 0xf2b2f940, 0xd185e6e6, 0xbfe66359, 0x1c7e0e0e, 0x380e7036, 0x3ee71f1f, 0x7c1ff863, 0xc4556262, 0x956237f7, 0xb53ad4d4, 0x77d4eea3, 0x4d81a8a8, 0x9aa82932, 0x31529696, 0x6296c4f4, 0xef62f9f9, 0xc3f99b3a, 0x97a3c5c5, 0x33c566f6, 0x4a102525, 0x942535b1, 0xb2ab5959, 0x7959f220, 0x15d08484, 0x2a8454ae, 0xe4c57272, 0xd572b7a7, 0x72ec3939, 0xe439d5dd, 0x98164c4c, 0x2d4c5a61, 0xbc945e5e, 0x655eca3b, 0xf09f7878, 0xfd78e785, 0x70e53838, 0xe038ddd8, 0x05988c8c, 0x0a8c1486, 0xbf17d1d1, 0x63d1c6b2, 0x57e4a5a5, 0xaea5410b, 0xd9a1e2e2, 0xafe2434d, 0xc24e6161, 0x99612ff8, 0x7b42b3b3, 0xf6b3f145, 0x42342121, 0x842115a5, 0x25089c9c, 0x4a9c94d6, 0x3cee1e1e, 0x781ef066, 0x86614343, 0x11432252, 0x93b1c7c7, 0x3bc776fc, 0xe54ffcfc, 0xd7fcb32b, 0x08240404, 0x10042014, 0xa2e35151, 0x5951b208, 0x2f259999, 0x5e99bcc7, 0xda226d6d, 0xa96d4fc4, 0x1a650d0d, 0x340d6839, 0xe979fafa, 0xcffa8335, 0xa369dfdf, 0x5bdfb684, 0xfca97e7e, 0xe57ed79b, 0x48192424, 0x90243db4, 0x76fe3b3b, 0xec3bc5d7, 0x4b9aabab, 0x96ab313d, 0x81f0cece, 0x1fce3ed1, 0x22991111, 0x44118855, 0x03838f8f, 0x068f0c89, 0x9c044e4e, 0x254e4a6b, 0x7366b7b7, 0xe6b7d151, 0xcbe0ebeb, 0x8beb0b60, 0x78c13c3c, 0xf03cfdcc, 0x1ffd8181, 0x3e817cbf, 0x35409494, 0x6a94d4fe, 0xf31cf7f7, 0xfbf7eb0c, 0x6f18b9b9, 0xdeb9a167, 0x268b1313, 0x4c13985f, 0x58512c2c, 0xb02c7d9c, 0xbb05d3d3, 0x6bd3d6b8, 0xd38ce7e7, 0xbbe76b5c, 0xdc396e6e, 0xa56e57cb, 0x95aac4c4, 0x37c46ef3, 0x061b0303, 0x0c03180f, 0xacdc5656, 0x45568a13, 0x885e4444, 0x0d441a49, 0xfea07f7f, 0xe17fdf9e, 0x4f88a9a9, 0x9ea92137, 0x54672a2a, 0xa82a4d82, 0x6b0abbbb, 0xd6bbb16d, 0x9f87c1c1, 0x23c146e2, 0xa6f15353, 0x5153a202, 0xa572dcdc, 0x57dcae8b, 0x16530b0b, 0x2c0b5827, 0x27019d9d, 0x4e9d9cd3, 0xd82b6c6c, 0xad6c47c1, 0x62a43131, 0xc43195f5, 0xe8f37474, 0xcd7487b9, 0xf115f6f6, 0xfff6e309, 0x8c4c4646, 0x05460a43, 0x45a5acac, 0x8aac0926, 0x0fb58989, 0x1e893c97, 0x28b41414, 0x5014a044, 0xdfbae1e1, 0xa3e15b42, 0x2ca61616, 0x5816b04e, 0x74f73a3a, 0xe83acdd2, 0xd2066969, 0xb9696fd0, 0x12410909, 0x2409482d, 0xe0d77070, 0xdd70a7ad, 0x716fb6b6, 0xe2b6d954, 0xbd1ed0d0, 0x67d0ceb7, 0xc7d6eded, 0x93ed3b7e, 0x85e2cccc, 0x17cc2edb, 0x84684242, 0x15422a57, 0x2d2c9898, 0x5a98b4c2, 0x55eda4a4, 0xaaa4490e, 0x50752828, 0xa0285d88, 0xb8865c5c, 0x6d5cda31, 0xed6bf8f8, 0xc7f8933f, 0x11c28686, 0x228644a4]);
var C3 = new Uint32Array([0x7830d818, 0x186018c0, 0xaf462623, 0x238c2305, 0xf991b8c6, 0xc63fc67e, 0x6fcdfbe8, 0xe887e813, 0xa113cb87, 0x8726874c, 0x626d11b8, 0xb8dab8a9, 0x05020901, 0x01040108, 0x6e9e0d4f, 0x4f214f42, 0xee6c9b36, 0x36d836ad, 0x0451ffa6, 0xa6a2a659, 0xbdb90cd2, 0xd26fd2de, 0x06f70ef5, 0xf5f3f5fb, 0x80f29679, 0x79f979ef, 0xcede306f, 0x6fa16f5f, 0xef3f6d91, 0x917e91fc, 0x07a4f852, 0x525552aa, 0xfdc04760, 0x609d6027, 0x766535bc, 0xbccabc89, 0xcd2b379b, 0x9b569bac, 0x8c018a8e, 0x8e028e04, 0x155bd2a3, 0xa3b6a371, 0x3c186c0c, 0x0c300c60, 0x8af6847b, 0x7bf17bff, 0xe16a8035, 0x35d435b5, 0x693af51d, 0x1d741de8, 0x47ddb3e0, 0xe0a7e053, 0xacb321d7, 0xd77bd7f6, 0xed999cc2, 0xc22fc25e, 0x965c432e, 0x2eb82e6d, 0x7a96294b, 0x4b314b62, 0x21e15dfe, 0xfedffea3, 0x16aed557, 0x57415782, 0x412abd15, 0x155415a8, 0xb6eee877, 0x77c1779f, 0xeb6e9237, 0x37dc37a5, 0x56d79ee5, 0xe5b3e57b, 0xd923139f, 0x9f469f8c, 0x17fd23f0, 0xf0e7f0d3, 0x7f94204a, 0x4a354a6a, 0x95a944da, 0xda4fda9e, 0x25b0a258, 0x587d58fa, 0xca8fcfc9, 0xc903c906, 0x8d527c29, 0x29a42955, 0x22145a0a, 0x0a280a50, 0x4f7f50b1, 0xb1feb1e1, 0x1a5dc9a0, 0xa0baa069, 0xdad6146b, 0x6bb16b7f, 0xab17d985, 0x852e855c, 0x73673cbd, 0xbdcebd81, 0x34ba8f5d, 0x5d695dd2, 0x50209010, 0x10401080, 0x03f507f4, 0xf4f7f4f3, 0xc08bddcb, 0xcb0bcb16, 0xc67cd33e, 0x3ef83eed, 0x110a2d05, 0x05140528, 0xe6ce7867, 0x6781671f, 0x53d597e4, 0xe4b7e473, 0xbb4e0227, 0x279c2725, 0x58827341, 0x41194132, 0x9d0ba78b, 0x8b168b2c, 0x0153f6a7, 0xa7a6a751, 0x94fab27d, 0x7de97dcf, 0xfb374995, 0x956e95dc, 0x9fad56d8, 0xd847d88e, 0x30eb70fb, 0xfbcbfb8b, 0x71c1cdee, 0xee9fee23, 0x91f8bb7c, 0x7ced7cc7, 0xe3cc7166, 0x66856617, 0x8ea77bdd, 0xdd53dda6, 0x4b2eaf17, 0x175c17b8, 0x468e4547, 0x47014702, 0xdc211a9e, 0x9e429e84, 0xc589d4ca, 0xca0fca1e, 0x995a582d, 0x2db42d75, 0x79632ebf, 0xbfc6bf91, 0x1b0e3f07, 0x071c0738, 0x2347acad, 0xad8ead01, 0x2fb4b05a, 0x5a755aea, 0xb51bef83, 0x8336836c, 0xff66b633, 0x33cc3385, 0xf2c65c63, 0x6391633f, 0x0a041202, 0x02080210, 0x384993aa, 0xaa92aa39, 0xa8e2de71, 0x71d971af, 0xcf8dc6c8, 0xc807c80e, 0x7d32d119, 0x196419c8, 0x70923b49, 0x49394972, 0x9aaf5fd9, 0xd943d986, 0x1df931f2, 0xf2eff2c3, 0x48dba8e3, 0xe3abe34b, 0x2ab6b95b, 0x5b715be2, 0x920dbc88, 0x881a8834, 0xc8293e9a, 0x9a529aa4, 0xbe4c0b26, 0x2698262d, 0xfa64bf32, 0x32c8328d, 0x4a7d59b0, 0xb0fab0e9, 0x6acff2e9, 0xe983e91b, 0x331e770f, 0x0f3c0f78, 0xa6b733d5, 0xd573d5e6, 0xba1df480, 0x803a8074, 0x7c6127be, 0xbec2be99, 0xde87ebcd, 0xcd13cd26, 0xe4688934, 0x34d034bd, 0x75903248, 0x483d487a, 0x24e354ff, 0xffdbffab, 0x8ff48d7a, 0x7af57af7, 0xea3d6490, 0x907a90f4, 0x3ebe9d5f, 0x5f615fc2, 0xa0403d20, 0x2080201d, 0xd5d00f68, 0x68bd6867, 0x7234ca1a, 0x1a681ad0, 0x2c41b7ae, 0xae82ae19, 0x5e757db4, 0xb4eab4c9, 0x19a8ce54, 0x544d549a, 0xe53b7f93, 0x937693ec, 0xaa442f22, 0x2288220d, 0xe9c86364, 0x648d6407, 0x12ff2af1, 0xf1e3f1db, 0xa2e6cc73, 0x73d173bf, 0x5a248212, 0x12481290, 0x5d807a40, 0x401d403a, 0x28104808, 0x08200840, 0xe89b95c3, 0xc32bc356, 0x7bc5dfec, 0xec97ec33, 0x90ab4ddb, 0xdb4bdb96, 0x1f5fc0a1, 0xa1bea161, 0x8307918d, 0x8d0e8d1c, 0xc97ac83d, 0x3df43df5, 0xf1335b97, 0x976697cc, 0x00000000, 0x00000000, 0xd483f9cf, 0xcf1bcf36, 0x87566e2b, 0x2bac2b45, 0xb3ece176, 0x76c57697, 0xb019e682, 0x82328264, 0xa9b128d6, 0xd67fd6fe, 0x7736c31b, 0x1b6c1bd8, 0x5b7774b5, 0xb5eeb5c1, 0x2943beaf, 0xaf86af11, 0xdfd41d6a, 0x6ab56a77, 0x0da0ea50, 0x505d50ba, 0x4c8a5745, 0x45094512, 0x18fb38f3, 0xf3ebf3cb, 0xf060ad30, 0x30c0309d, 0x74c3c4ef, 0xef9bef2b, 0xc37eda3f, 0x3ffc3fe5, 0x1caac755, 0x55495592, 0x1059dba2, 0xa2b2a279, 0x65c9e9ea, 0xea8fea03, 0xecca6a65, 0x6589650f, 0x686903ba, 0xbad2bab9, 0x935e4a2f, 0x2fbc2f65, 0xe79d8ec0, 0xc027c04e, 0x81a160de, 0xde5fdebe, 0x6c38fc1c, 0x1c701ce0, 0x2ee746fd, 0xfdd3fdbb, 0x649a1f4d, 0x4d294d52, 0xe0397692, 0x927292e4, 0xbceafa75, 0x75c9758f, 0x1e0c3606, 0x06180630, 0x9809ae8a, 0x8a128a24, 0x40794bb2, 0xb2f2b2f9, 0x59d185e6, 0xe6bfe663, 0x361c7e0e, 0x0e380e70, 0x633ee71f, 0x1f7c1ff8, 0xf7c45562, 0x62956237, 0xa3b53ad4, 0xd477d4ee, 0x324d81a8, 0xa89aa829, 0xf4315296, 0x966296c4, 0x3aef62f9, 0xf9c3f99b, 0xf697a3c5, 0xc533c566, 0xb14a1025, 0x25942535, 0x20b2ab59, 0x597959f2, 0xae15d084, 0x842a8454, 0xa7e4c572, 0x72d572b7, 0xdd72ec39, 0x39e439d5, 0x6198164c, 0x4c2d4c5a, 0x3bbc945e, 0x5e655eca, 0x85f09f78, 0x78fd78e7, 0xd870e538, 0x38e038dd, 0x8605988c, 0x8c0a8c14, 0xb2bf17d1, 0xd163d1c6, 0x0b57e4a5, 0xa5aea541, 0x4dd9a1e2, 0xe2afe243, 0xf8c24e61, 0x6199612f, 0x457b42b3, 0xb3f6b3f1, 0xa5423421, 0x21842115, 0xd625089c, 0x9c4a9c94, 0x663cee1e, 0x1e781ef0, 0x52866143, 0x43114322, 0xfc93b1c7, 0xc73bc776, 0x2be54ffc, 0xfcd7fcb3, 0x14082404, 0x04100420, 0x08a2e351, 0x515951b2, 0xc72f2599, 0x995e99bc, 0xc4da226d, 0x6da96d4f, 0x391a650d, 0x0d340d68, 0x35e979fa, 0xfacffa83, 0x84a369df, 0xdf5bdfb6, 0x9bfca97e, 0x7ee57ed7, 0xb4481924, 0x2490243d, 0xd776fe3b, 0x3bec3bc5, 0x3d4b9aab, 0xab96ab31, 0xd181f0ce, 0xce1fce3e, 0x55229911, 0x11441188, 0x8903838f, 0x8f068f0c, 0x6b9c044e, 0x4e254e4a, 0x517366b7, 0xb7e6b7d1, 0x60cbe0eb, 0xeb8beb0b, 0xcc78c13c, 0x3cf03cfd, 0xbf1ffd81, 0x813e817c, 0xfe354094, 0x946a94d4, 0x0cf31cf7, 0xf7fbf7eb, 0x676f18b9, 0xb9deb9a1, 0x5f268b13, 0x134c1398, 0x9c58512c, 0x2cb02c7d, 0xb8bb05d3, 0xd36bd3d6, 0x5cd38ce7, 0xe7bbe76b, 0xcbdc396e, 0x6ea56e57, 0xf395aac4, 0xc437c46e, 0x0f061b03, 0x030c0318, 0x13acdc56, 0x5645568a, 0x49885e44, 0x440d441a, 0x9efea07f, 0x7fe17fdf, 0x374f88a9, 0xa99ea921, 0x8254672a, 0x2aa82a4d, 0x6d6b0abb, 0xbbd6bbb1, 0xe29f87c1, 0xc123c146, 0x02a6f153, 0x535153a2, 0x8ba572dc, 0xdc57dcae, 0x2716530b, 0x0b2c0b58, 0xd327019d, 0x9d4e9d9c, 0xc1d82b6c, 0x6cad6c47, 0xf562a431, 0x31c43195, 0xb9e8f374, 0x74cd7487, 0x09f115f6, 0xf6fff6e3, 0x438c4c46, 0x4605460a, 0x2645a5ac, 0xac8aac09, 0x970fb589, 0x891e893c, 0x4428b414, 0x145014a0, 0x42dfbae1, 0xe1a3e15b, 0x4e2ca616, 0x165816b0, 0xd274f73a, 0x3ae83acd, 0xd0d20669, 0x69b9696f, 0x2d124109, 0x09240948, 0xade0d770, 0x70dd70a7, 0x54716fb6, 0xb6e2b6d9, 0xb7bd1ed0, 0xd067d0ce, 0x7ec7d6ed, 0xed93ed3b, 0xdb85e2cc, 0xcc17cc2e, 0x57846842, 0x4215422a, 0xc22d2c98, 0x985a98b4, 0x0e55eda4, 0xa4aaa449, 0x88507528, 0x28a0285d, 0x31b8865c, 0x5c6d5cda, 0x3fed6bf8, 0xf8c7f893, 0xa411c286, 0x86228644]);
var C4 = new Uint32Array([0xc07830d8, 0x18186018, 0x05af4626, 0x23238c23, 0x7ef991b8, 0xc6c63fc6, 0x136fcdfb, 0xe8e887e8, 0x4ca113cb, 0x87872687, 0xa9626d11, 0xb8b8dab8, 0x08050209, 0x01010401, 0x426e9e0d, 0x4f4f214f, 0xadee6c9b, 0x3636d836, 0x590451ff, 0xa6a6a2a6, 0xdebdb90c, 0xd2d26fd2, 0xfb06f70e, 0xf5f5f3f5, 0xef80f296, 0x7979f979, 0x5fcede30, 0x6f6fa16f, 0xfcef3f6d, 0x91917e91, 0xaa07a4f8, 0x52525552, 0x27fdc047, 0x60609d60, 0x89766535, 0xbcbccabc, 0xaccd2b37, 0x9b9b569b, 0x048c018a, 0x8e8e028e, 0x71155bd2, 0xa3a3b6a3, 0x603c186c, 0x0c0c300c, 0xff8af684, 0x7b7bf17b, 0xb5e16a80, 0x3535d435, 0xe8693af5, 0x1d1d741d, 0x5347ddb3, 0xe0e0a7e0, 0xf6acb321, 0xd7d77bd7, 0x5eed999c, 0xc2c22fc2, 0x6d965c43, 0x2e2eb82e, 0x627a9629, 0x4b4b314b, 0xa321e15d, 0xfefedffe, 0x8216aed5, 0x57574157, 0xa8412abd, 0x15155415, 0x9fb6eee8, 0x7777c177, 0xa5eb6e92, 0x3737dc37, 0x7b56d79e, 0xe5e5b3e5, 0x8cd92313, 0x9f9f469f, 0xd317fd23, 0xf0f0e7f0, 0x6a7f9420, 0x4a4a354a, 0x9e95a944, 0xdada4fda, 0xfa25b0a2, 0x58587d58, 0x06ca8fcf, 0xc9c903c9, 0x558d527c, 0x2929a429, 0x5022145a, 0x0a0a280a, 0xe14f7f50, 0xb1b1feb1, 0x691a5dc9, 0xa0a0baa0, 0x7fdad614, 0x6b6bb16b, 0x5cab17d9, 0x85852e85, 0x8173673c, 0xbdbdcebd, 0xd234ba8f, 0x5d5d695d, 0x80502090, 0x10104010, 0xf303f507, 0xf4f4f7f4, 0x16c08bdd, 0xcbcb0bcb, 0xedc67cd3, 0x3e3ef83e, 0x28110a2d, 0x05051405, 0x1fe6ce78, 0x67678167, 0x7353d597, 0xe4e4b7e4, 0x25bb4e02, 0x27279c27, 0x32588273, 0x41411941, 0x2c9d0ba7, 0x8b8b168b, 0x510153f6, 0xa7a7a6a7, 0xcf94fab2, 0x7d7de97d, 0xdcfb3749, 0x95956e95, 0x8e9fad56, 0xd8d847d8, 0x8b30eb70, 0xfbfbcbfb, 0x2371c1cd, 0xeeee9fee, 0xc791f8bb, 0x7c7ced7c, 0x17e3cc71, 0x66668566, 0xa68ea77b, 0xdddd53dd, 0xb84b2eaf, 0x17175c17, 0x02468e45, 0x47470147, 0x84dc211a, 0x9e9e429e, 0x1ec589d4, 0xcaca0fca, 0x75995a58, 0x2d2db42d, 0x9179632e, 0xbfbfc6bf, 0x381b0e3f, 0x07071c07, 0x012347ac, 0xadad8ead, 0xea2fb4b0, 0x5a5a755a, 0x6cb51bef, 0x83833683, 0x85ff66b6, 0x3333cc33, 0x3ff2c65c, 0x63639163, 0x100a0412, 0x02020802, 0x39384993, 0xaaaa92aa, 0xafa8e2de, 0x7171d971, 0x0ecf8dc6, 0xc8c807c8, 0xc87d32d1, 0x19196419, 0x7270923b, 0x49493949, 0x869aaf5f, 0xd9d943d9, 0xc31df931, 0xf2f2eff2, 0x4b48dba8, 0xe3e3abe3, 0xe22ab6b9, 0x5b5b715b, 0x34920dbc, 0x88881a88, 0xa4c8293e, 0x9a9a529a, 0x2dbe4c0b, 0x26269826, 0x8dfa64bf, 0x3232c832, 0xe94a7d59, 0xb0b0fab0, 0x1b6acff2, 0xe9e983e9, 0x78331e77, 0x0f0f3c0f, 0xe6a6b733, 0xd5d573d5, 0x74ba1df4, 0x80803a80, 0x997c6127, 0xbebec2be, 0x26de87eb, 0xcdcd13cd, 0xbde46889, 0x3434d034, 0x7a759032, 0x48483d48, 0xab24e354, 0xffffdbff, 0xf78ff48d, 0x7a7af57a, 0xf4ea3d64, 0x90907a90, 0xc23ebe9d, 0x5f5f615f, 0x1da0403d, 0x20208020, 0x67d5d00f, 0x6868bd68, 0xd07234ca, 0x1a1a681a, 0x192c41b7, 0xaeae82ae, 0xc95e757d, 0xb4b4eab4, 0x9a19a8ce, 0x54544d54, 0xece53b7f, 0x93937693, 0x0daa442f, 0x22228822, 0x07e9c863, 0x64648d64, 0xdb12ff2a, 0xf1f1e3f1, 0xbfa2e6cc, 0x7373d173, 0x905a2482, 0x12124812, 0x3a5d807a, 0x40401d40, 0x40281048, 0x08082008, 0x56e89b95, 0xc3c32bc3, 0x337bc5df, 0xecec97ec, 0x9690ab4d, 0xdbdb4bdb, 0x611f5fc0, 0xa1a1bea1, 0x1c830791, 0x8d8d0e8d, 0xf5c97ac8, 0x3d3df43d, 0xccf1335b, 0x97976697, 0x00000000, 0x00000000, 0x36d483f9, 0xcfcf1bcf, 0x4587566e, 0x2b2bac2b, 0x97b3ece1, 0x7676c576, 0x64b019e6, 0x82823282, 0xfea9b128, 0xd6d67fd6, 0xd87736c3, 0x1b1b6c1b, 0xc15b7774, 0xb5b5eeb5, 0x112943be, 0xafaf86af, 0x77dfd41d, 0x6a6ab56a, 0xba0da0ea, 0x50505d50, 0x124c8a57, 0x45450945, 0xcb18fb38, 0xf3f3ebf3, 0x9df060ad, 0x3030c030, 0x2b74c3c4, 0xefef9bef, 0xe5c37eda, 0x3f3ffc3f, 0x921caac7, 0x55554955, 0x791059db, 0xa2a2b2a2, 0x0365c9e9, 0xeaea8fea, 0x0fecca6a, 0x65658965, 0xb9686903, 0xbabad2ba, 0x65935e4a, 0x2f2fbc2f, 0x4ee79d8e, 0xc0c027c0, 0xbe81a160, 0xdede5fde, 0xe06c38fc, 0x1c1c701c, 0xbb2ee746, 0xfdfdd3fd, 0x52649a1f, 0x4d4d294d, 0xe4e03976, 0x92927292, 0x8fbceafa, 0x7575c975, 0x301e0c36, 0x06061806, 0x249809ae, 0x8a8a128a, 0xf940794b, 0xb2b2f2b2, 0x6359d185, 0xe6e6bfe6, 0x70361c7e, 0x0e0e380e, 0xf8633ee7, 0x1f1f7c1f, 0x37f7c455, 0x62629562, 0xeea3b53a, 0xd4d477d4, 0x29324d81, 0xa8a89aa8, 0xc4f43152, 0x96966296, 0x9b3aef62, 0xf9f9c3f9, 0x66f697a3, 0xc5c533c5, 0x35b14a10, 0x25259425, 0xf220b2ab, 0x59597959, 0x54ae15d0, 0x84842a84, 0xb7a7e4c5, 0x7272d572, 0xd5dd72ec, 0x3939e439, 0x5a619816, 0x4c4c2d4c, 0xca3bbc94, 0x5e5e655e, 0xe785f09f, 0x7878fd78, 0xddd870e5, 0x3838e038, 0x14860598, 0x8c8c0a8c, 0xc6b2bf17, 0xd1d163d1, 0x410b57e4, 0xa5a5aea5, 0x434dd9a1, 0xe2e2afe2, 0x2ff8c24e, 0x61619961, 0xf1457b42, 0xb3b3f6b3, 0x15a54234, 0x21218421, 0x94d62508, 0x9c9c4a9c, 0xf0663cee, 0x1e1e781e, 0x22528661, 0x43431143, 0x76fc93b1, 0xc7c73bc7, 0xb32be54f, 0xfcfcd7fc, 0x20140824, 0x04041004, 0xb208a2e3, 0x51515951, 0xbcc72f25, 0x99995e99, 0x4fc4da22, 0x6d6da96d, 0x68391a65, 0x0d0d340d, 0x8335e979, 0xfafacffa, 0xb684a369, 0xdfdf5bdf, 0xd79bfca9, 0x7e7ee57e, 0x3db44819, 0x24249024, 0xc5d776fe, 0x3b3bec3b, 0x313d4b9a, 0xabab96ab, 0x3ed181f0, 0xcece1fce, 0x88552299, 0x11114411, 0x0c890383, 0x8f8f068f, 0x4a6b9c04, 0x4e4e254e, 0xd1517366, 0xb7b7e6b7, 0x0b60cbe0, 0xebeb8beb, 0xfdcc78c1, 0x3c3cf03c, 0x7cbf1ffd, 0x81813e81, 0xd4fe3540, 0x94946a94, 0xeb0cf31c, 0xf7f7fbf7, 0xa1676f18, 0xb9b9deb9, 0x985f268b, 0x13134c13, 0x7d9c5851, 0x2c2cb02c, 0xd6b8bb05, 0xd3d36bd3, 0x6b5cd38c, 0xe7e7bbe7, 0x57cbdc39, 0x6e6ea56e, 0x6ef395aa, 0xc4c437c4, 0x180f061b, 0x03030c03, 0x8a13acdc, 0x56564556, 0x1a49885e, 0x44440d44, 0xdf9efea0, 0x7f7fe17f, 0x21374f88, 0xa9a99ea9, 0x4d825467, 0x2a2aa82a, 0xb16d6b0a, 0xbbbbd6bb, 0x46e29f87, 0xc1c123c1, 0xa202a6f1, 0x53535153, 0xae8ba572, 0xdcdc57dc, 0x58271653, 0x0b0b2c0b, 0x9cd32701, 0x9d9d4e9d, 0x47c1d82b, 0x6c6cad6c, 0x95f562a4, 0x3131c431, 0x87b9e8f3, 0x7474cd74, 0xe309f115, 0xf6f6fff6, 0x0a438c4c, 0x46460546, 0x092645a5, 0xacac8aac, 0x3c970fb5, 0x89891e89, 0xa04428b4, 0x14145014, 0x5b42dfba, 0xe1e1a3e1, 0xb04e2ca6, 0x16165816, 0xcdd274f7, 0x3a3ae83a, 0x6fd0d206, 0x6969b969, 0x482d1241, 0x09092409, 0xa7ade0d7, 0x7070dd70, 0xd954716f, 0xb6b6e2b6, 0xceb7bd1e, 0xd0d067d0, 0x3b7ec7d6, 0xeded93ed, 0x2edb85e2, 0xcccc17cc, 0x2a578468, 0x42421542, 0xb4c22d2c, 0x98985a98, 0x490e55ed, 0xa4a4aaa4, 0x5d885075, 0x2828a028, 0xda31b886, 0x5c5c6d5c, 0x933fed6b, 0xf8f8c7f8, 0x44a411c2, 0x86862286]);
var C5 = new Uint32Array([0x18c07830, 0xd8181860, 0x2305af46, 0x2623238c, 0xc67ef991, 0xb8c6c63f, 0xe8136fcd, 0xfbe8e887, 0x874ca113, 0xcb878726, 0xb8a9626d, 0x11b8b8da, 0x01080502, 0x09010104, 0x4f426e9e, 0x0d4f4f21, 0x36adee6c, 0x9b3636d8, 0xa6590451, 0xffa6a6a2, 0xd2debdb9, 0x0cd2d26f, 0xf5fb06f7, 0x0ef5f5f3, 0x79ef80f2, 0x967979f9, 0x6f5fcede, 0x306f6fa1, 0x91fcef3f, 0x6d91917e, 0x52aa07a4, 0xf8525255, 0x6027fdc0, 0x4760609d, 0xbc897665, 0x35bcbcca, 0x9baccd2b, 0x379b9b56, 0x8e048c01, 0x8a8e8e02, 0xa371155b, 0xd2a3a3b6, 0x0c603c18, 0x6c0c0c30, 0x7bff8af6, 0x847b7bf1, 0x35b5e16a, 0x803535d4, 0x1de8693a, 0xf51d1d74, 0xe05347dd, 0xb3e0e0a7, 0xd7f6acb3, 0x21d7d77b, 0xc25eed99, 0x9cc2c22f, 0x2e6d965c, 0x432e2eb8, 0x4b627a96, 0x294b4b31, 0xfea321e1, 0x5dfefedf, 0x578216ae, 0xd5575741, 0x15a8412a, 0xbd151554, 0x779fb6ee, 0xe87777c1, 0x37a5eb6e, 0x923737dc, 0xe57b56d7, 0x9ee5e5b3, 0x9f8cd923, 0x139f9f46, 0xf0d317fd, 0x23f0f0e7, 0x4a6a7f94, 0x204a4a35, 0xda9e95a9, 0x44dada4f, 0x58fa25b0, 0xa258587d, 0xc906ca8f, 0xcfc9c903, 0x29558d52, 0x7c2929a4, 0x0a502214, 0x5a0a0a28, 0xb1e14f7f, 0x50b1b1fe, 0xa0691a5d, 0xc9a0a0ba, 0x6b7fdad6, 0x146b6bb1, 0x855cab17, 0xd985852e, 0xbd817367, 0x3cbdbdce, 0x5dd234ba, 0x8f5d5d69, 0x10805020, 0x90101040, 0xf4f303f5, 0x07f4f4f7, 0xcb16c08b, 0xddcbcb0b, 0x3eedc67c, 0xd33e3ef8, 0x0528110a, 0x2d050514, 0x671fe6ce, 0x78676781, 0xe47353d5, 0x97e4e4b7, 0x2725bb4e, 0x0227279c, 0x41325882, 0x73414119, 0x8b2c9d0b, 0xa78b8b16, 0xa7510153, 0xf6a7a7a6, 0x7dcf94fa, 0xb27d7de9, 0x95dcfb37, 0x4995956e, 0xd88e9fad, 0x56d8d847, 0xfb8b30eb, 0x70fbfbcb, 0xee2371c1, 0xcdeeee9f, 0x7cc791f8, 0xbb7c7ced, 0x6617e3cc, 0x71666685, 0xdda68ea7, 0x7bdddd53, 0x17b84b2e, 0xaf17175c, 0x4702468e, 0x45474701, 0x9e84dc21, 0x1a9e9e42, 0xca1ec589, 0xd4caca0f, 0x2d75995a, 0x582d2db4, 0xbf917963, 0x2ebfbfc6, 0x07381b0e, 0x3f07071c, 0xad012347, 0xacadad8e, 0x5aea2fb4, 0xb05a5a75, 0x836cb51b, 0xef838336, 0x3385ff66, 0xb63333cc, 0x633ff2c6, 0x5c636391, 0x02100a04, 0x12020208, 0xaa393849, 0x93aaaa92, 0x71afa8e2, 0xde7171d9, 0xc80ecf8d, 0xc6c8c807, 0x19c87d32, 0xd1191964, 0x49727092, 0x3b494939, 0xd9869aaf, 0x5fd9d943, 0xf2c31df9, 0x31f2f2ef, 0xe34b48db, 0xa8e3e3ab, 0x5be22ab6, 0xb95b5b71, 0x8834920d, 0xbc88881a, 0x9aa4c829, 0x3e9a9a52, 0x262dbe4c, 0x0b262698, 0x328dfa64, 0xbf3232c8, 0xb0e94a7d, 0x59b0b0fa, 0xe91b6acf, 0xf2e9e983, 0x0f78331e, 0x770f0f3c, 0xd5e6a6b7, 0x33d5d573, 0x8074ba1d, 0xf480803a, 0xbe997c61, 0x27bebec2, 0xcd26de87, 0xebcdcd13, 0x34bde468, 0x893434d0, 0x487a7590, 0x3248483d, 0xffab24e3, 0x54ffffdb, 0x7af78ff4, 0x8d7a7af5, 0x90f4ea3d, 0x6490907a, 0x5fc23ebe, 0x9d5f5f61, 0x201da040, 0x3d202080, 0x6867d5d0, 0x0f6868bd, 0x1ad07234, 0xca1a1a68, 0xae192c41, 0xb7aeae82, 0xb4c95e75, 0x7db4b4ea, 0x549a19a8, 0xce54544d, 0x93ece53b, 0x7f939376, 0x220daa44, 0x2f222288, 0x6407e9c8, 0x6364648d, 0xf1db12ff, 0x2af1f1e3, 0x73bfa2e6, 0xcc7373d1, 0x12905a24, 0x82121248, 0x403a5d80, 0x7a40401d, 0x08402810, 0x48080820, 0xc356e89b, 0x95c3c32b, 0xec337bc5, 0xdfecec97, 0xdb9690ab, 0x4ddbdb4b, 0xa1611f5f, 0xc0a1a1be, 0x8d1c8307, 0x918d8d0e, 0x3df5c97a, 0xc83d3df4, 0x97ccf133, 0x5b979766, 0x00000000, 0x00000000, 0xcf36d483, 0xf9cfcf1b, 0x2b458756, 0x6e2b2bac, 0x7697b3ec, 0xe17676c5, 0x8264b019, 0xe6828232, 0xd6fea9b1, 0x28d6d67f, 0x1bd87736, 0xc31b1b6c, 0xb5c15b77, 0x74b5b5ee, 0xaf112943, 0xbeafaf86, 0x6a77dfd4, 0x1d6a6ab5, 0x50ba0da0, 0xea50505d, 0x45124c8a, 0x57454509, 0xf3cb18fb, 0x38f3f3eb, 0x309df060, 0xad3030c0, 0xef2b74c3, 0xc4efef9b, 0x3fe5c37e, 0xda3f3ffc, 0x55921caa, 0xc7555549, 0xa2791059, 0xdba2a2b2, 0xea0365c9, 0xe9eaea8f, 0x650fecca, 0x6a656589, 0xbab96869, 0x03babad2, 0x2f65935e, 0x4a2f2fbc, 0xc04ee79d, 0x8ec0c027, 0xdebe81a1, 0x60dede5f, 0x1ce06c38, 0xfc1c1c70, 0xfdbb2ee7, 0x46fdfdd3, 0x4d52649a, 0x1f4d4d29, 0x92e4e039, 0x76929272, 0x758fbcea, 0xfa7575c9, 0x06301e0c, 0x36060618, 0x8a249809, 0xae8a8a12, 0xb2f94079, 0x4bb2b2f2, 0xe66359d1, 0x85e6e6bf, 0x0e70361c, 0x7e0e0e38, 0x1ff8633e, 0xe71f1f7c, 0x6237f7c4, 0x55626295, 0xd4eea3b5, 0x3ad4d477, 0xa829324d, 0x81a8a89a, 0x96c4f431, 0x52969662, 0xf99b3aef, 0x62f9f9c3, 0xc566f697, 0xa3c5c533, 0x2535b14a, 0x10252594, 0x59f220b2, 0xab595979, 0x8454ae15, 0xd084842a, 0x72b7a7e4, 0xc57272d5, 0x39d5dd72, 0xec3939e4, 0x4c5a6198, 0x164c4c2d, 0x5eca3bbc, 0x945e5e65, 0x78e785f0, 0x9f7878fd, 0x38ddd870, 0xe53838e0, 0x8c148605, 0x988c8c0a, 0xd1c6b2bf, 0x17d1d163, 0xa5410b57, 0xe4a5a5ae, 0xe2434dd9, 0xa1e2e2af, 0x612ff8c2, 0x4e616199, 0xb3f1457b, 0x42b3b3f6, 0x2115a542, 0x34212184, 0x9c94d625, 0x089c9c4a, 0x1ef0663c, 0xee1e1e78, 0x43225286, 0x61434311, 0xc776fc93, 0xb1c7c73b, 0xfcb32be5, 0x4ffcfcd7, 0x04201408, 0x24040410, 0x51b208a2, 0xe3515159, 0x99bcc72f, 0x2599995e, 0x6d4fc4da, 0x226d6da9, 0x0d68391a, 0x650d0d34, 0xfa8335e9, 0x79fafacf, 0xdfb684a3, 0x69dfdf5b, 0x7ed79bfc, 0xa97e7ee5, 0x243db448, 0x19242490, 0x3bc5d776, 0xfe3b3bec, 0xab313d4b, 0x9aabab96, 0xce3ed181, 0xf0cece1f, 0x11885522, 0x99111144, 0x8f0c8903, 0x838f8f06, 0x4e4a6b9c, 0x044e4e25, 0xb7d15173, 0x66b7b7e6, 0xeb0b60cb, 0xe0ebeb8b, 0x3cfdcc78, 0xc13c3cf0, 0x817cbf1f, 0xfd81813e, 0x94d4fe35, 0x4094946a, 0xf7eb0cf3, 0x1cf7f7fb, 0xb9a1676f, 0x18b9b9de, 0x13985f26, 0x8b13134c, 0x2c7d9c58, 0x512c2cb0, 0xd3d6b8bb, 0x05d3d36b, 0xe76b5cd3, 0x8ce7e7bb, 0x6e57cbdc, 0x396e6ea5, 0xc46ef395, 0xaac4c437, 0x03180f06, 0x1b03030c, 0x568a13ac, 0xdc565645, 0x441a4988, 0x5e44440d, 0x7fdf9efe, 0xa07f7fe1, 0xa921374f, 0x88a9a99e, 0x2a4d8254, 0x672a2aa8, 0xbbb16d6b, 0x0abbbbd6, 0xc146e29f, 0x87c1c123, 0x53a202a6, 0xf1535351, 0xdcae8ba5, 0x72dcdc57, 0x0b582716, 0x530b0b2c, 0x9d9cd327, 0x019d9d4e, 0x6c47c1d8, 0x2b6c6cad, 0x3195f562, 0xa43131c4, 0x7487b9e8, 0xf37474cd, 0xf6e309f1, 0x15f6f6ff, 0x460a438c, 0x4c464605, 0xac092645, 0xa5acac8a, 0x893c970f, 0xb589891e, 0x14a04428, 0xb4141450, 0xe15b42df, 0xbae1e1a3, 0x16b04e2c, 0xa6161658, 0x3acdd274, 0xf73a3ae8, 0x696fd0d2, 0x066969b9, 0x09482d12, 0x41090924, 0x70a7ade0, 0xd77070dd, 0xb6d95471, 0x6fb6b6e2, 0xd0ceb7bd, 0x1ed0d067, 0xed3b7ec7, 0xd6eded93, 0xcc2edb85, 0xe2cccc17, 0x422a5784, 0x68424215, 0x98b4c22d, 0x2c98985a, 0xa4490e55, 0xeda4a4aa, 0x285d8850, 0x752828a0, 0x5cda31b8, 0x865c5c6d, 0xf8933fed, 0x6bf8f8c7, 0x8644a411, 0xc2868622]);
var C6 = new Uint32Array([0x6018c078, 0x30d81818, 0x8c2305af, 0x46262323, 0x3fc67ef9, 0x91b8c6c6, 0x87e8136f, 0xcdfbe8e8, 0x26874ca1, 0x13cb8787, 0xdab8a962, 0x6d11b8b8, 0x04010805, 0x02090101, 0x214f426e, 0x9e0d4f4f, 0xd836adee, 0x6c9b3636, 0xa2a65904, 0x51ffa6a6, 0x6fd2debd, 0xb90cd2d2, 0xf3f5fb06, 0xf70ef5f5, 0xf979ef80, 0xf2967979, 0xa16f5fce, 0xde306f6f, 0x7e91fcef, 0x3f6d9191, 0x5552aa07, 0xa4f85252, 0x9d6027fd, 0xc0476060, 0xcabc8976, 0x6535bcbc, 0x569baccd, 0x2b379b9b, 0x028e048c, 0x018a8e8e, 0xb6a37115, 0x5bd2a3a3, 0x300c603c, 0x186c0c0c, 0xf17bff8a, 0xf6847b7b, 0xd435b5e1, 0x6a803535, 0x741de869, 0x3af51d1d, 0xa7e05347, 0xddb3e0e0, 0x7bd7f6ac, 0xb321d7d7, 0x2fc25eed, 0x999cc2c2, 0xb82e6d96, 0x5c432e2e, 0x314b627a, 0x96294b4b, 0xdffea321, 0xe15dfefe, 0x41578216, 0xaed55757, 0x5415a841, 0x2abd1515, 0xc1779fb6, 0xeee87777, 0xdc37a5eb, 0x6e923737, 0xb3e57b56, 0xd79ee5e5, 0x469f8cd9, 0x23139f9f, 0xe7f0d317, 0xfd23f0f0, 0x354a6a7f, 0x94204a4a, 0x4fda9e95, 0xa944dada, 0x7d58fa25, 0xb0a25858, 0x03c906ca, 0x8fcfc9c9, 0xa429558d, 0x527c2929, 0x280a5022, 0x145a0a0a, 0xfeb1e14f, 0x7f50b1b1, 0xbaa0691a, 0x5dc9a0a0, 0xb16b7fda, 0xd6146b6b, 0x2e855cab, 0x17d98585, 0xcebd8173, 0x673cbdbd, 0x695dd234, 0xba8f5d5d, 0x40108050, 0x20901010, 0xf7f4f303, 0xf507f4f4, 0x0bcb16c0, 0x8bddcbcb, 0xf83eedc6, 0x7cd33e3e, 0x14052811, 0x0a2d0505, 0x81671fe6, 0xce786767, 0xb7e47353, 0xd597e4e4, 0x9c2725bb, 0x4e022727, 0x19413258, 0x82734141, 0x168b2c9d, 0x0ba78b8b, 0xa6a75101, 0x53f6a7a7, 0xe97dcf94, 0xfab27d7d, 0x6e95dcfb, 0x37499595, 0x47d88e9f, 0xad56d8d8, 0xcbfb8b30, 0xeb70fbfb, 0x9fee2371, 0xc1cdeeee, 0xed7cc791, 0xf8bb7c7c, 0x856617e3, 0xcc716666, 0x53dda68e, 0xa77bdddd, 0x5c17b84b, 0x2eaf1717, 0x01470246, 0x8e454747, 0x429e84dc, 0x211a9e9e, 0x0fca1ec5, 0x89d4caca, 0xb42d7599, 0x5a582d2d, 0xc6bf9179, 0x632ebfbf, 0x1c07381b, 0x0e3f0707, 0x8ead0123, 0x47acadad, 0x755aea2f, 0xb4b05a5a, 0x36836cb5, 0x1bef8383, 0xcc3385ff, 0x66b63333, 0x91633ff2, 0xc65c6363, 0x0802100a, 0x04120202, 0x92aa3938, 0x4993aaaa, 0xd971afa8, 0xe2de7171, 0x07c80ecf, 0x8dc6c8c8, 0x6419c87d, 0x32d11919, 0x39497270, 0x923b4949, 0x43d9869a, 0xaf5fd9d9, 0xeff2c31d, 0xf931f2f2, 0xabe34b48, 0xdba8e3e3, 0x715be22a, 0xb6b95b5b, 0x1a883492, 0x0dbc8888, 0x529aa4c8, 0x293e9a9a, 0x98262dbe, 0x4c0b2626, 0xc8328dfa, 0x64bf3232, 0xfab0e94a, 0x7d59b0b0, 0x83e91b6a, 0xcff2e9e9, 0x3c0f7833, 0x1e770f0f, 0x73d5e6a6, 0xb733d5d5, 0x3a8074ba, 0x1df48080, 0xc2be997c, 0x6127bebe, 0x13cd26de, 0x87ebcdcd, 0xd034bde4, 0x68893434, 0x3d487a75, 0x90324848, 0xdbffab24, 0xe354ffff, 0xf57af78f, 0xf48d7a7a, 0x7a90f4ea, 0x3d649090, 0x615fc23e, 0xbe9d5f5f, 0x80201da0, 0x403d2020, 0xbd6867d5, 0xd00f6868, 0x681ad072, 0x34ca1a1a, 0x82ae192c, 0x41b7aeae, 0xeab4c95e, 0x757db4b4, 0x4d549a19, 0xa8ce5454, 0x7693ece5, 0x3b7f9393, 0x88220daa, 0x442f2222, 0x8d6407e9, 0xc8636464, 0xe3f1db12, 0xff2af1f1, 0xd173bfa2, 0xe6cc7373, 0x4812905a, 0x24821212, 0x1d403a5d, 0x807a4040, 0x20084028, 0x10480808, 0x2bc356e8, 0x9b95c3c3, 0x97ec337b, 0xc5dfecec, 0x4bdb9690, 0xab4ddbdb, 0xbea1611f, 0x5fc0a1a1, 0x0e8d1c83, 0x07918d8d, 0xf43df5c9, 0x7ac83d3d, 0x6697ccf1, 0x335b9797, 0x00000000, 0x00000000, 0x1bcf36d4, 0x83f9cfcf, 0xac2b4587, 0x566e2b2b, 0xc57697b3, 0xece17676, 0x328264b0, 0x19e68282, 0x7fd6fea9, 0xb128d6d6, 0x6c1bd877, 0x36c31b1b, 0xeeb5c15b, 0x7774b5b5, 0x86af1129, 0x43beafaf, 0xb56a77df, 0xd41d6a6a, 0x5d50ba0d, 0xa0ea5050, 0x0945124c, 0x8a574545, 0xebf3cb18, 0xfb38f3f3, 0xc0309df0, 0x60ad3030, 0x9bef2b74, 0xc3c4efef, 0xfc3fe5c3, 0x7eda3f3f, 0x4955921c, 0xaac75555, 0xb2a27910, 0x59dba2a2, 0x8fea0365, 0xc9e9eaea, 0x89650fec, 0xca6a6565, 0xd2bab968, 0x6903baba, 0xbc2f6593, 0x5e4a2f2f, 0x27c04ee7, 0x9d8ec0c0, 0x5fdebe81, 0xa160dede, 0x701ce06c, 0x38fc1c1c, 0xd3fdbb2e, 0xe746fdfd, 0x294d5264, 0x9a1f4d4d, 0x7292e4e0, 0x39769292, 0xc9758fbc, 0xeafa7575, 0x1806301e, 0x0c360606, 0x128a2498, 0x09ae8a8a, 0xf2b2f940, 0x794bb2b2, 0xbfe66359, 0xd185e6e6, 0x380e7036, 0x1c7e0e0e, 0x7c1ff863, 0x3ee71f1f, 0x956237f7, 0xc4556262, 0x77d4eea3, 0xb53ad4d4, 0x9aa82932, 0x4d81a8a8, 0x6296c4f4, 0x31529696, 0xc3f99b3a, 0xef62f9f9, 0x33c566f6, 0x97a3c5c5, 0x942535b1, 0x4a102525, 0x7959f220, 0xb2ab5959, 0x2a8454ae, 0x15d08484, 0xd572b7a7, 0xe4c57272, 0xe439d5dd, 0x72ec3939, 0x2d4c5a61, 0x98164c4c, 0x655eca3b, 0xbc945e5e, 0xfd78e785, 0xf09f7878, 0xe038ddd8, 0x70e53838, 0x0a8c1486, 0x05988c8c, 0x63d1c6b2, 0xbf17d1d1, 0xaea5410b, 0x57e4a5a5, 0xafe2434d, 0xd9a1e2e2, 0x99612ff8, 0xc24e6161, 0xf6b3f145, 0x7b42b3b3, 0x842115a5, 0x42342121, 0x4a9c94d6, 0x25089c9c, 0x781ef066, 0x3cee1e1e, 0x11432252, 0x86614343, 0x3bc776fc, 0x93b1c7c7, 0xd7fcb32b, 0xe54ffcfc, 0x10042014, 0x08240404, 0x5951b208, 0xa2e35151, 0x5e99bcc7, 0x2f259999, 0xa96d4fc4, 0xda226d6d, 0x340d6839, 0x1a650d0d, 0xcffa8335, 0xe979fafa, 0x5bdfb684, 0xa369dfdf, 0xe57ed79b, 0xfca97e7e, 0x90243db4, 0x48192424, 0xec3bc5d7, 0x76fe3b3b, 0x96ab313d, 0x4b9aabab, 0x1fce3ed1, 0x81f0cece, 0x44118855, 0x22991111, 0x068f0c89, 0x03838f8f, 0x254e4a6b, 0x9c044e4e, 0xe6b7d151, 0x7366b7b7, 0x8beb0b60, 0xcbe0ebeb, 0xf03cfdcc, 0x78c13c3c, 0x3e817cbf, 0x1ffd8181, 0x6a94d4fe, 0x35409494, 0xfbf7eb0c, 0xf31cf7f7, 0xdeb9a167, 0x6f18b9b9, 0x4c13985f, 0x268b1313, 0xb02c7d9c, 0x58512c2c, 0x6bd3d6b8, 0xbb05d3d3, 0xbbe76b5c, 0xd38ce7e7, 0xa56e57cb, 0xdc396e6e, 0x37c46ef3, 0x95aac4c4, 0x0c03180f, 0x061b0303, 0x45568a13, 0xacdc5656, 0x0d441a49, 0x885e4444, 0xe17fdf9e, 0xfea07f7f, 0x9ea92137, 0x4f88a9a9, 0xa82a4d82, 0x54672a2a, 0xd6bbb16d, 0x6b0abbbb, 0x23c146e2, 0x9f87c1c1, 0x5153a202, 0xa6f15353, 0x57dcae8b, 0xa572dcdc, 0x2c0b5827, 0x16530b0b, 0x4e9d9cd3, 0x27019d9d, 0xad6c47c1, 0xd82b6c6c, 0xc43195f5, 0x62a43131, 0xcd7487b9, 0xe8f37474, 0xfff6e309, 0xf115f6f6, 0x05460a43, 0x8c4c4646, 0x8aac0926, 0x45a5acac, 0x1e893c97, 0x0fb58989, 0x5014a044, 0x28b41414, 0xa3e15b42, 0xdfbae1e1, 0x5816b04e, 0x2ca61616, 0xe83acdd2, 0x74f73a3a, 0xb9696fd0, 0xd2066969, 0x2409482d, 0x12410909, 0xdd70a7ad, 0xe0d77070, 0xe2b6d954, 0x716fb6b6, 0x67d0ceb7, 0xbd1ed0d0, 0x93ed3b7e, 0xc7d6eded, 0x17cc2edb, 0x85e2cccc, 0x15422a57, 0x84684242, 0x5a98b4c2, 0x2d2c9898, 0xaaa4490e, 0x55eda4a4, 0xa0285d88, 0x50752828, 0x6d5cda31, 0xb8865c5c, 0xc7f8933f, 0xed6bf8f8, 0x228644a4, 0x11c28686]);
var C7 = new Uint32Array([0x186018c0, 0x7830d818, 0x238c2305, 0xaf462623, 0xc63fc67e, 0xf991b8c6, 0xe887e813, 0x6fcdfbe8, 0x8726874c, 0xa113cb87, 0xb8dab8a9, 0x626d11b8, 0x01040108, 0x05020901, 0x4f214f42, 0x6e9e0d4f, 0x36d836ad, 0xee6c9b36, 0xa6a2a659, 0x0451ffa6, 0xd26fd2de, 0xbdb90cd2, 0xf5f3f5fb, 0x06f70ef5, 0x79f979ef, 0x80f29679, 0x6fa16f5f, 0xcede306f, 0x917e91fc, 0xef3f6d91, 0x525552aa, 0x07a4f852, 0x609d6027, 0xfdc04760, 0xbccabc89, 0x766535bc, 0x9b569bac, 0xcd2b379b, 0x8e028e04, 0x8c018a8e, 0xa3b6a371, 0x155bd2a3, 0x0c300c60, 0x3c186c0c, 0x7bf17bff, 0x8af6847b, 0x35d435b5, 0xe16a8035, 0x1d741de8, 0x693af51d, 0xe0a7e053, 0x47ddb3e0, 0xd77bd7f6, 0xacb321d7, 0xc22fc25e, 0xed999cc2, 0x2eb82e6d, 0x965c432e, 0x4b314b62, 0x7a96294b, 0xfedffea3, 0x21e15dfe, 0x57415782, 0x16aed557, 0x155415a8, 0x412abd15, 0x77c1779f, 0xb6eee877, 0x37dc37a5, 0xeb6e9237, 0xe5b3e57b, 0x56d79ee5, 0x9f469f8c, 0xd923139f, 0xf0e7f0d3, 0x17fd23f0, 0x4a354a6a, 0x7f94204a, 0xda4fda9e, 0x95a944da, 0x587d58fa, 0x25b0a258, 0xc903c906, 0xca8fcfc9, 0x29a42955, 0x8d527c29, 0x0a280a50, 0x22145a0a, 0xb1feb1e1, 0x4f7f50b1, 0xa0baa069, 0x1a5dc9a0, 0x6bb16b7f, 0xdad6146b, 0x852e855c, 0xab17d985, 0xbdcebd81, 0x73673cbd, 0x5d695dd2, 0x34ba8f5d, 0x10401080, 0x50209010, 0xf4f7f4f3, 0x03f507f4, 0xcb0bcb16, 0xc08bddcb, 0x3ef83eed, 0xc67cd33e, 0x05140528, 0x110a2d05, 0x6781671f, 0xe6ce7867, 0xe4b7e473, 0x53d597e4, 0x279c2725, 0xbb4e0227, 0x41194132, 0x58827341, 0x8b168b2c, 0x9d0ba78b, 0xa7a6a751, 0x0153f6a7, 0x7de97dcf, 0x94fab27d, 0x956e95dc, 0xfb374995, 0xd847d88e, 0x9fad56d8, 0xfbcbfb8b, 0x30eb70fb, 0xee9fee23, 0x71c1cdee, 0x7ced7cc7, 0x91f8bb7c, 0x66856617, 0xe3cc7166, 0xdd53dda6, 0x8ea77bdd, 0x175c17b8, 0x4b2eaf17, 0x47014702, 0x468e4547, 0x9e429e84, 0xdc211a9e, 0xca0fca1e, 0xc589d4ca, 0x2db42d75, 0x995a582d, 0xbfc6bf91, 0x79632ebf, 0x071c0738, 0x1b0e3f07, 0xad8ead01, 0x2347acad, 0x5a755aea, 0x2fb4b05a, 0x8336836c, 0xb51bef83, 0x33cc3385, 0xff66b633, 0x6391633f, 0xf2c65c63, 0x02080210, 0x0a041202, 0xaa92aa39, 0x384993aa, 0x71d971af, 0xa8e2de71, 0xc807c80e, 0xcf8dc6c8, 0x196419c8, 0x7d32d119, 0x49394972, 0x70923b49, 0xd943d986, 0x9aaf5fd9, 0xf2eff2c3, 0x1df931f2, 0xe3abe34b, 0x48dba8e3, 0x5b715be2, 0x2ab6b95b, 0x881a8834, 0x920dbc88, 0x9a529aa4, 0xc8293e9a, 0x2698262d, 0xbe4c0b26, 0x32c8328d, 0xfa64bf32, 0xb0fab0e9, 0x4a7d59b0, 0xe983e91b, 0x6acff2e9, 0x0f3c0f78, 0x331e770f, 0xd573d5e6, 0xa6b733d5, 0x803a8074, 0xba1df480, 0xbec2be99, 0x7c6127be, 0xcd13cd26, 0xde87ebcd, 0x34d034bd, 0xe4688934, 0x483d487a, 0x75903248, 0xffdbffab, 0x24e354ff, 0x7af57af7, 0x8ff48d7a, 0x907a90f4, 0xea3d6490, 0x5f615fc2, 0x3ebe9d5f, 0x2080201d, 0xa0403d20, 0x68bd6867, 0xd5d00f68, 0x1a681ad0, 0x7234ca1a, 0xae82ae19, 0x2c41b7ae, 0xb4eab4c9, 0x5e757db4, 0x544d549a, 0x19a8ce54, 0x937693ec, 0xe53b7f93, 0x2288220d, 0xaa442f22, 0x648d6407, 0xe9c86364, 0xf1e3f1db, 0x12ff2af1, 0x73d173bf, 0xa2e6cc73, 0x12481290, 0x5a248212, 0x401d403a, 0x5d807a40, 0x08200840, 0x28104808, 0xc32bc356, 0xe89b95c3, 0xec97ec33, 0x7bc5dfec, 0xdb4bdb96, 0x90ab4ddb, 0xa1bea161, 0x1f5fc0a1, 0x8d0e8d1c, 0x8307918d, 0x3df43df5, 0xc97ac83d, 0x976697cc, 0xf1335b97, 0x00000000, 0x00000000, 0xcf1bcf36, 0xd483f9cf, 0x2bac2b45, 0x87566e2b, 0x76c57697, 0xb3ece176, 0x82328264, 0xb019e682, 0xd67fd6fe, 0xa9b128d6, 0x1b6c1bd8, 0x7736c31b, 0xb5eeb5c1, 0x5b7774b5, 0xaf86af11, 0x2943beaf, 0x6ab56a77, 0xdfd41d6a, 0x505d50ba, 0x0da0ea50, 0x45094512, 0x4c8a5745, 0xf3ebf3cb, 0x18fb38f3, 0x30c0309d, 0xf060ad30, 0xef9bef2b, 0x74c3c4ef, 0x3ffc3fe5, 0xc37eda3f, 0x55495592, 0x1caac755, 0xa2b2a279, 0x1059dba2, 0xea8fea03, 0x65c9e9ea, 0x6589650f, 0xecca6a65, 0xbad2bab9, 0x686903ba, 0x2fbc2f65, 0x935e4a2f, 0xc027c04e, 0xe79d8ec0, 0xde5fdebe, 0x81a160de, 0x1c701ce0, 0x6c38fc1c, 0xfdd3fdbb, 0x2ee746fd, 0x4d294d52, 0x649a1f4d, 0x927292e4, 0xe0397692, 0x75c9758f, 0xbceafa75, 0x06180630, 0x1e0c3606, 0x8a128a24, 0x9809ae8a, 0xb2f2b2f9, 0x40794bb2, 0xe6bfe663, 0x59d185e6, 0x0e380e70, 0x361c7e0e, 0x1f7c1ff8, 0x633ee71f, 0x62956237, 0xf7c45562, 0xd477d4ee, 0xa3b53ad4, 0xa89aa829, 0x324d81a8, 0x966296c4, 0xf4315296, 0xf9c3f99b, 0x3aef62f9, 0xc533c566, 0xf697a3c5, 0x25942535, 0xb14a1025, 0x597959f2, 0x20b2ab59, 0x842a8454, 0xae15d084, 0x72d572b7, 0xa7e4c572, 0x39e439d5, 0xdd72ec39, 0x4c2d4c5a, 0x6198164c, 0x5e655eca, 0x3bbc945e, 0x78fd78e7, 0x85f09f78, 0x38e038dd, 0xd870e538, 0x8c0a8c14, 0x8605988c, 0xd163d1c6, 0xb2bf17d1, 0xa5aea541, 0x0b57e4a5, 0xe2afe243, 0x4dd9a1e2, 0x6199612f, 0xf8c24e61, 0xb3f6b3f1, 0x457b42b3, 0x21842115, 0xa5423421, 0x9c4a9c94, 0xd625089c, 0x1e781ef0, 0x663cee1e, 0x43114322, 0x52866143, 0xc73bc776, 0xfc93b1c7, 0xfcd7fcb3, 0x2be54ffc, 0x04100420, 0x14082404, 0x515951b2, 0x08a2e351, 0x995e99bc, 0xc72f2599, 0x6da96d4f, 0xc4da226d, 0x0d340d68, 0x391a650d, 0xfacffa83, 0x35e979fa, 0xdf5bdfb6, 0x84a369df, 0x7ee57ed7, 0x9bfca97e, 0x2490243d, 0xb4481924, 0x3bec3bc5, 0xd776fe3b, 0xab96ab31, 0x3d4b9aab, 0xce1fce3e, 0xd181f0ce, 0x11441188, 0x55229911, 0x8f068f0c, 0x8903838f, 0x4e254e4a, 0x6b9c044e, 0xb7e6b7d1, 0x517366b7, 0xeb8beb0b, 0x60cbe0eb, 0x3cf03cfd, 0xcc78c13c, 0x813e817c, 0xbf1ffd81, 0x946a94d4, 0xfe354094, 0xf7fbf7eb, 0x0cf31cf7, 0xb9deb9a1, 0x676f18b9, 0x134c1398, 0x5f268b13, 0x2cb02c7d, 0x9c58512c, 0xd36bd3d6, 0xb8bb05d3, 0xe7bbe76b, 0x5cd38ce7, 0x6ea56e57, 0xcbdc396e, 0xc437c46e, 0xf395aac4, 0x030c0318, 0x0f061b03, 0x5645568a, 0x13acdc56, 0x440d441a, 0x49885e44, 0x7fe17fdf, 0x9efea07f, 0xa99ea921, 0x374f88a9, 0x2aa82a4d, 0x8254672a, 0xbbd6bbb1, 0x6d6b0abb, 0xc123c146, 0xe29f87c1, 0x535153a2, 0x02a6f153, 0xdc57dcae, 0x8ba572dc, 0x0b2c0b58, 0x2716530b, 0x9d4e9d9c, 0xd327019d, 0x6cad6c47, 0xc1d82b6c, 0x31c43195, 0xf562a431, 0x74cd7487, 0xb9e8f374, 0xf6fff6e3, 0x09f115f6, 0x4605460a, 0x438c4c46, 0xac8aac09, 0x2645a5ac, 0x891e893c, 0x970fb589, 0x145014a0, 0x4428b414, 0xe1a3e15b, 0x42dfbae1, 0x165816b0, 0x4e2ca616, 0x3ae83acd, 0xd274f73a, 0x69b9696f, 0xd0d20669, 0x09240948, 0x2d124109, 0x70dd70a7, 0xade0d770, 0xb6e2b6d9, 0x54716fb6, 0xd067d0ce, 0xb7bd1ed0, 0xed93ed3b, 0x7ec7d6ed, 0xcc17cc2e, 0xdb85e2cc, 0x4215422a, 0x57846842, 0x985a98b4, 0xc22d2c98, 0xa4aaa449, 0x0e55eda4, 0x28a0285d, 0x88507528, 0x5c6d5cda, 0x31b8865c, 0xf8c7f893, 0x3fed6bf8, 0x86228644, 0xa411c286]);
/**
 * Whirlpool
 */

class Whirlpool {
  /**
   * Create a Whirlpool context.
   * @constructor
   */
  constructor() {
    this.state = new Uint32Array(16);
    this.msg = new Uint32Array(16);
    this.block = Buffer.allocUnsafe(64);
    this.size = FINALIZED$c;
  }
  /**
   * Initialize Whirlpool context.
   */


  init() {
    for (var i = 0; i < 16; i++) {
      this.state[i] = 0;
    }

    this.size = 0;
    return this;
  }
  /**
   * Update Whirlpool context.
   * @param {Buffer} data
   */


  update(data) {
    assert_1(Buffer.isBuffer(data));

    this._update(data, data.length);

    return this;
  }
  /**
   * Finalize Whirlpool context.
   * @returns {Buffer}
   */


  final() {
    return this._final(Buffer.allocUnsafe(64));
  }
  /**
   * Update Whirlpool context.
   * @private
   * @param {Buffer} data
   * @param {Number} len
   */


  _update(data, len) {
    assert_1(this.size !== FINALIZED$c, 'Context already finalized.');
    var pos = this.size & 63;
    var off = 0;
    this.size += len;

    if (pos > 0) {
      var want = 64 - pos;
      if (want > len) want = len;
      data.copy(this.block, pos, off, off + want);
      pos += want;
      len -= want;
      off += want;
      if (pos < 64) return;
      this.transform(this.block, 0);
    }

    while (len >= 64) {
      this.transform(data, off);
      off += 64;
      len -= 64;
    }

    if (len > 0) data.copy(this.block, 0, off, off + len);
  }
  /**
   * Finalize Whirlpool context.
   * @private
   * @param {Buffer} out
   * @returns {Buffer}
   */


  _final(out) {
    assert_1(this.size !== FINALIZED$c, 'Context already finalized.');
    var pos = this.size & 63;
    var len = this.size * 8;
    writeU32$j(DESC$7, len * (1 / 0x100000000), 24);
    writeU32$j(DESC$7, len, 28);

    this._update(PADDING$9, 1 + (95 - pos & 63));

    this._update(DESC$7, 32);

    for (var i = 0; i < 16; i++) {
      writeU32$j(out, this.state[i], i * 4);
      this.state[i] = 0;
    }

    for (var _i = 0; _i < 16; _i++) {
      this.msg[_i] = 0;
    }

    for (var _i2 = 0; _i2 < 64; _i2++) {
      this.block[_i2] = 0;
    }

    this.size = FINALIZED$c;
    return out;
  }
  /**
   * Transform Whirlpool block.
   * @param {Buffer} chunk
   * @param {Number} pos
   */


  transform(chunk, pos) {
    var block = this.msg;

    for (var i = 0; i < 16; i++) {
      block[i] = readU32$n(chunk, pos + i * 4);
    }

    var K = new Uint32Array(16);
    var L = new Uint32Array(16);
    var state = new Uint32Array(16);

    for (var _i3 = 0; _i3 < 16; _i3++) {
      K[_i3] = this.state[_i3];
      state[_i3] = block[_i3] ^ K[_i3];
    }

    for (var r = 1; r < 10 + 1; r++) {
      for (var _i4 = 0; _i4 < 8; _i4++) {
        L[_i4 * 2 + 0] = 0 ^ C0[(K[(0 + _i4) % 8 * 2 + 0] >>> 24 & 0xff) * 2 + 0] ^ C1[(K[(7 + _i4) % 8 * 2 + 0] >>> 16 & 0xff) * 2 + 0] ^ C2[(K[(6 + _i4) % 8 * 2 + 0] >>> 8 & 0xff) * 2 + 0] ^ C3[(K[(5 + _i4) % 8 * 2 + 0] >>> 0 & 0xff) * 2 + 0] ^ C4[(K[(4 + _i4) % 8 * 2 + 1] >>> 24 & 0xff) * 2 + 0] ^ C5[(K[(3 + _i4) % 8 * 2 + 1] >>> 16 & 0xff) * 2 + 0] ^ C6[(K[(2 + _i4) % 8 * 2 + 1] >>> 8 & 0xff) * 2 + 0] ^ C7[(K[(1 + _i4) % 8 * 2 + 1] >>> 0 & 0xff) * 2 + 0] ^ (_i4 === 0 ? RC[r * 2 + 0] : 0);
        L[_i4 * 2 + 1] = 0 ^ C0[(K[(0 + _i4) % 8 * 2 + 0] >>> 24 & 0xff) * 2 + 1] ^ C1[(K[(7 + _i4) % 8 * 2 + 0] >>> 16 & 0xff) * 2 + 1] ^ C2[(K[(6 + _i4) % 8 * 2 + 0] >>> 8 & 0xff) * 2 + 1] ^ C3[(K[(5 + _i4) % 8 * 2 + 0] >>> 0 & 0xff) * 2 + 1] ^ C4[(K[(4 + _i4) % 8 * 2 + 1] >>> 24 & 0xff) * 2 + 1] ^ C5[(K[(3 + _i4) % 8 * 2 + 1] >>> 16 & 0xff) * 2 + 1] ^ C6[(K[(2 + _i4) % 8 * 2 + 1] >>> 8 & 0xff) * 2 + 1] ^ C7[(K[(1 + _i4) % 8 * 2 + 1] >>> 0 & 0xff) * 2 + 1] ^ (_i4 === 0 ? RC[r * 2 + 1] : 0);
      }

      for (var _i5 = 0; _i5 < 16; _i5++) {
        K[_i5] = L[_i5];
      }

      for (var _i6 = 0; _i6 < 8; _i6++) {
        L[_i6 * 2 + 0] = 0 ^ C0[(state[(0 + _i6) % 8 * 2 + 0] >>> 24 & 0xff) * 2 + 0] ^ C1[(state[(7 + _i6) % 8 * 2 + 0] >>> 16 & 0xff) * 2 + 0] ^ C2[(state[(6 + _i6) % 8 * 2 + 0] >>> 8 & 0xff) * 2 + 0] ^ C3[(state[(5 + _i6) % 8 * 2 + 0] >>> 0 & 0xff) * 2 + 0] ^ C4[(state[(4 + _i6) % 8 * 2 + 1] >>> 24 & 0xff) * 2 + 0] ^ C5[(state[(3 + _i6) % 8 * 2 + 1] >>> 16 & 0xff) * 2 + 0] ^ C6[(state[(2 + _i6) % 8 * 2 + 1] >>> 8 & 0xff) * 2 + 0] ^ C7[(state[(1 + _i6) % 8 * 2 + 1] >>> 0 & 0xff) * 2 + 0] ^ K[_i6 * 2 + 0];
        L[_i6 * 2 + 1] = 0 ^ C0[(state[(0 + _i6) % 8 * 2 + 0] >>> 24 & 0xff) * 2 + 1] ^ C1[(state[(7 + _i6) % 8 * 2 + 0] >>> 16 & 0xff) * 2 + 1] ^ C2[(state[(6 + _i6) % 8 * 2 + 0] >>> 8 & 0xff) * 2 + 1] ^ C3[(state[(5 + _i6) % 8 * 2 + 0] >>> 0 & 0xff) * 2 + 1] ^ C4[(state[(4 + _i6) % 8 * 2 + 1] >>> 24 & 0xff) * 2 + 1] ^ C5[(state[(3 + _i6) % 8 * 2 + 1] >>> 16 & 0xff) * 2 + 1] ^ C6[(state[(2 + _i6) % 8 * 2 + 1] >>> 8 & 0xff) * 2 + 1] ^ C7[(state[(1 + _i6) % 8 * 2 + 1] >>> 0 & 0xff) * 2 + 1] ^ K[_i6 * 2 + 1];
      }

      for (var _i7 = 0; _i7 < 16; _i7++) {
        state[_i7] = L[_i7];
      }
    }

    for (var _i8 = 0; _i8 < 16; _i8++) {
      this.state[_i8] ^= state[_i8] ^ block[_i8];
    }
  }

  static hash() {
    return new Whirlpool();
  }

  static hmac() {
    return new hmac(Whirlpool, 64);
  }

  static digest(data) {
    return Whirlpool.ctx.init().update(data).final();
  }

  static root(left, right) {
    assert_1(Buffer.isBuffer(left) && left.length === 64);
    assert_1(Buffer.isBuffer(right) && right.length === 64);
    return Whirlpool.ctx.init().update(left).update(right).final();
  }

  static multi(x, y, z) {
    var ctx = Whirlpool.ctx;
    ctx.init();
    ctx.update(x);
    ctx.update(y);
    if (z) ctx.update(z);
    return ctx.final();
  }

  static mac(data, key) {
    return Whirlpool.hmac().init(key).update(data).final();
  }

}
/*
 * Static
 */


Whirlpool.native = 0;
Whirlpool.id = 'WHIRLPOOL';
Whirlpool.size = 64;
Whirlpool.bits = 512;
Whirlpool.blockSize = 64;
Whirlpool.zero = Buffer.alloc(64, 0x00);
Whirlpool.ctx = new Whirlpool();
/*
 * Helpers
 */

function readU32$n(data, off) {
  return data[off++] * 0x1000000 + data[off++] * 0x10000 + data[off++] * 0x100 + data[off];
}

function writeU32$j(data, num, off) {
  data[off++] = num >>> 24;
  data[off++] = num >>> 16;
  data[off++] = num >>> 8;
  data[off++] = num;
  return off;
}
/*
 * Expose
 */


var whirlpool = Whirlpool;

var whirlpoolBrowser = whirlpool;

/*
 * Expose
 */


var x448 = new mont('X448', 446, 56, '2b656f', ed448Browser);

var bcrypto = createCommonjsModule(function (module, exports) {

  exports.AEAD = aeadBrowser;
  exports.aes = aesBrowser;
  exports.bcrypt = bcrypt;
  exports.BLAKE2b = blake2bBrowser;
  exports.BLAKE2b160 = blake2b160;
  exports.BLAKE2b256 = blake2b256;
  exports.BLAKE2b384 = blake2b384;
  exports.BLAKE2b512 = blake2b512;
  exports.BLAKE2s = blake2sBrowser;
  exports.BLAKE2s128 = blake2s128;
  exports.BLAKE2s160 = blake2s160;
  exports.BLAKE2s224 = blake2s224;
  exports.BLAKE2s256 = blake2s256;
  exports.BN = bnBrowser;
  exports.box = box_1;
  exports.ChaCha20 = chacha20Browser;
  exports.cipher = cipherBrowser;
  exports.cleanse = cleanseBrowser;
  exports.CSHAKE = cshake;
  exports.CSHAKE128 = cshake128;
  exports.CSHAKE256 = cshake256;
  exports.CtrDRBG = ctrDrbg;
  exports.dsa = dsaBrowser;
  exports.dsaies = dsaies;
  exports.eb2k = eb2k;
  exports.ecies = ecies;
  exports.ed25519 = ed25519Browser;
  exports.ed448 = ed448Browser;
  exports.encoding = encoding$1;
  exports.GOST94 = gost94;
  exports.Hash160 = hash160Browser;
  exports.Hash256 = hash256Browser;
  exports.HashDRBG = hashDrbg;
  exports.HKDF = hkdf;
  exports.HmacDRBG = hmacDrbg;
  exports.Keccak = keccakBrowser;
  exports.Keccak224 = keccak224;
  exports.Keccak256 = keccak256;
  exports.Keccak384 = keccak384;
  exports.Keccak512 = keccak512;
  exports.KMAC = kmac;
  exports.KMAC128 = kmac128;
  exports.KMAC256 = kmac256;
  exports.MD2 = md2;
  exports.MD4 = md4Browser;
  exports.MD5 = md5Browser;
  exports.MD5SHA1 = md5sha1;
  exports.merkle = merkle;
  exports.mrkl = mrkl;
  exports.murmur3 = murmur3Browser;
  exports.p192 = p192Browser;
  exports.p224 = p224Browser;
  exports.p256 = p256Browser;
  exports.p384 = p384Browser;
  exports.p521 = p521Browser;
  exports.pbkdf2 = pbkdf2Browser;
  exports.pgp = pgp;
  exports.Poly1305 = poly1305Browser;
  exports.random = randomBrowser;
  exports.RC4 = rc4;
  exports.RIPEMD160 = ripemd160Browser;
  exports.rsa = rsaBrowser;
  exports.rsaies = rsaies;
  exports.safe = safe;
  exports.Salsa20 = salsa20Browser;
  exports.scrypt = scryptBrowser;
  exports.secp256k1 = secp256k1Browser;
  exports.secretbox = secretbox;
  exports.ssh = ssh;
  exports.SHA1 = sha1Browser;
  exports.SHA224 = sha224Browser;
  exports.SHA256 = sha256Browser;
  exports.SHA384 = sha384Browser;
  exports.SHA512 = sha512Browser;
  exports.SHA3 = sha3Browser;
  exports.SHA3_224 = sha3224;
  exports.SHA3_256 = sha3256;
  exports.SHA3_384 = sha3384;
  exports.SHA3_512 = sha3512;
  exports.SHAKE = shake;
  exports.SHAKE128 = shake128;
  exports.SHAKE256 = shake256;
  exports.siphash = siphashBrowser;
  exports.Whirlpool = whirlpoolBrowser;
  exports.x25519 = x25519;
  exports.x448 = x448;
  exports.version = '4.1.0';
  exports.native = exports.SHA256.native;
});

var encrypt$5 = function encrypt(self, block) {
  return self._cipher.encryptBlock(block);
};

var decrypt$4 = function decrypt(self, block) {
  return self._cipher.decryptBlock(block);
};

var ecb = {
  encrypt: encrypt$5,
  decrypt: decrypt$4
};

var bufferXor = function xor(a, b) {
  var length = Math.min(a.length, b.length);
  var buffer = new Buffer(length);

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i];
  }

  return buffer;
};

var encrypt$6 = function encrypt(self, block) {
  var data = bufferXor(block, self._prev);
  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};

var decrypt$5 = function decrypt(self, block) {
  var pad = self._prev;
  self._prev = block;

  var out = self._cipher.decryptBlock(block);

  return bufferXor(out, pad);
};

var cbc = {
  encrypt: encrypt$6,
  decrypt: decrypt$5
};

var safeBuffer = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */
  var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }

  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  }

  SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer

  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }

    return Buffer(arg, encodingOrOffset, length);
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    var buf = Buffer(size);

    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }

    return buf;
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return Buffer(size);
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return buffer.SlowBuffer(size);
  };
});

var Buffer$1 = safeBuffer.Buffer;

function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = bufferXor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer$1.concat([self._prev, decrypt ? data : out]);
  return out;
}

var encrypt$7 = function encrypt(self, data, decrypt) {
  var out = Buffer$1.allocUnsafe(0);
  var len;

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = Buffer$1.allocUnsafe(0);
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer$1.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer$1.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }

  return out;
};

var cfb = {
  encrypt: encrypt$7
};

var Buffer$2 = safeBuffer.Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);

  var out = pad[0] ^ byteParam;
  self._prev = Buffer$2.concat([self._prev.slice(1), Buffer$2.from([decrypt ? byteParam : out])]);
  return out;
}

var encrypt$8 = function encrypt(self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer$2.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

var cfb8 = {
  encrypt: encrypt$8
};

var Buffer$3 = safeBuffer.Buffer;

function encryptByte$1(self, byteParam, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;

  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = byteParam & 1 << 7 - i ? 0x80 : 0;
    value = pad[0] ^ bit;
    out += (value & 0x80) >> i % 8;
    self._prev = shiftIn(self._prev, decrypt ? bit : value);
  }

  return out;
}

function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = Buffer$3.allocUnsafe(buffer.length);
  buffer = Buffer$3.concat([buffer, Buffer$3.from([value])]);

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
  }

  return out;
}

var encrypt$9 = function encrypt(self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer$3.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte$1(self, chunk[i], decrypt);
  }

  return out;
};

var cfb1 = {
  encrypt: encrypt$9
};

function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}

var encrypt$a = function encrypt(self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }

  var pad = self._cache.slice(0, chunk.length);

  self._cache = self._cache.slice(chunk.length);
  return bufferXor(chunk, pad);
};

var ofb = {
  encrypt: encrypt$a
};

function incr32(iv) {
  var len = iv.length;
  var item;

  while (len--) {
    item = iv.readUInt8(len);

    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}

var incr32_1 = incr32;

var Buffer$4 = safeBuffer.Buffer;

function getBlock$1(self) {
  var out = self._cipher.encryptBlockRaw(self._prev);

  incr32_1(self._prev);
  return out;
}

var blockSize = 16;

var encrypt$b = function encrypt(self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize);
  var start = self._cache.length;
  self._cache = Buffer$4.concat([self._cache, Buffer$4.allocUnsafe(chunkNum * blockSize)]);

  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock$1(self);
    var offset = start + i * blockSize;

    self._cache.writeUInt32BE(out[0], offset + 0);

    self._cache.writeUInt32BE(out[1], offset + 4);

    self._cache.writeUInt32BE(out[2], offset + 8);

    self._cache.writeUInt32BE(out[3], offset + 12);
  }

  var pad = self._cache.slice(0, chunk.length);

  self._cache = self._cache.slice(chunk.length);
  return bufferXor(chunk, pad);
};

var ctr = {
  encrypt: encrypt$b
};

var aes128 = {
  cipher: "AES",
  key: 128,
  iv: 16,
  mode: "CBC",
  type: "block"
};
var aes192 = {
  cipher: "AES",
  key: 192,
  iv: 16,
  mode: "CBC",
  type: "block"
};
var aes256 = {
  cipher: "AES",
  key: 256,
  iv: 16,
  mode: "CBC",
  type: "block"
};
var list = {
  "aes-128-ecb": {
    cipher: "AES",
    key: 128,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-192-ecb": {
    cipher: "AES",
    key: 192,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-256-ecb": {
    cipher: "AES",
    key: 256,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-128-cbc": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-192-cbc": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-256-cbc": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  aes128: aes128,
  aes192: aes192,
  aes256: aes256,
  "aes-128-cfb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-192-cfb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-256-cfb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-128-cfb8": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-192-cfb8": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-256-cfb8": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-128-cfb1": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-192-cfb1": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-256-cfb1": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-128-ofb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-192-ofb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-256-ofb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-128-ctr": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-192-ctr": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-256-ctr": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-128-gcm": {
    cipher: "AES",
    key: 128,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-192-gcm": {
    cipher: "AES",
    key: 192,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-256-gcm": {
    cipher: "AES",
    key: 256,
    iv: 12,
    mode: "GCM",
    type: "auth"
  }
};

var list$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  aes128: aes128,
  aes192: aes192,
  aes256: aes256,
  'default': list
});

var modes$2 = getCjsExportFromNamespace(list$1);

var modeModules = {
  ECB: ecb,
  CBC: cbc,
  CFB: cfb,
  CFB8: cfb8,
  CFB1: cfb1,
  OFB: ofb,
  CTR: ctr,
  GCM: ctr
};

for (var key in modes$2) {
  modes$2[key].module = modeModules[modes$2[key].mode];
}

var modes_1 = modes$2;

// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer$5 = safeBuffer.Buffer;

function asUInt32Array(buf) {
  if (!Buffer$5.isBuffer(buf)) buf = Buffer$5.from(buf);
  var len = buf.length / 4 | 0;
  var out = new Array(len);

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4);
  }

  return out;
}

function scrubVec(v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0;
  }
}

function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0];
  var SUB_MIX1 = SUB_MIX[1];
  var SUB_MIX2 = SUB_MIX[2];
  var SUB_MIX3 = SUB_MIX[3];
  var s0 = M[0] ^ keySchedule[0];
  var s1 = M[1] ^ keySchedule[1];
  var s2 = M[2] ^ keySchedule[2];
  var s3 = M[3] ^ keySchedule[3];
  var t0, t1, t2, t3;
  var ksRow = 4;

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }

  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  t0 = t0 >>> 0;
  t1 = t1 >>> 0;
  t2 = t2 >>> 0;
  t3 = t3 >>> 0;
  return [t0, t1, t2, t3];
} // AES constants


var RCON$1 = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

var G$3 = function () {
  // Compute double table
  var d = new Array(256);

  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1;
    } else {
      d[j] = j << 1 ^ 0x11b;
    }
  }

  var SBOX = [];
  var INV_SBOX = [];
  var SUB_MIX = [[], [], [], []];
  var INV_SUB_MIX = [[], [], [], []]; // Walk GF(2^8)

  var x = 0;
  var xi = 0;

  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
    SBOX[x] = sx;
    INV_SBOX[sx] = x; // Compute multiplication

    var x2 = d[x];
    var x4 = d[x2];
    var x8 = d[x4]; // Compute sub bytes, mix columns tables

    var t = d[sx] * 0x101 ^ sx * 0x1010100;
    SUB_MIX[0][x] = t << 24 | t >>> 8;
    SUB_MIX[1][x] = t << 16 | t >>> 16;
    SUB_MIX[2][x] = t << 8 | t >>> 24;
    SUB_MIX[3][x] = t; // Compute inv sub bytes, inv mix columns tables

    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
    INV_SUB_MIX[3][sx] = t;

    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  };
}();

function AES$1(key) {
  this._key = asUInt32Array(key);

  this._reset();
}

AES$1.blockSize = 4 * 4;
AES$1.keySize = 256 / 8;
AES$1.prototype.blockSize = AES$1.blockSize;
AES$1.prototype.keySize = AES$1.keySize;

AES$1.prototype._reset = function () {
  var keyWords = this._key;
  var keySize = keyWords.length;
  var nRounds = keySize + 6;
  var ksRows = (nRounds + 1) * 4;
  var keySchedule = [];

  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k];
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1];

    if (k % keySize === 0) {
      t = t << 8 | t >>> 24;
      t = G$3.SBOX[t >>> 24] << 24 | G$3.SBOX[t >>> 16 & 0xff] << 16 | G$3.SBOX[t >>> 8 & 0xff] << 8 | G$3.SBOX[t & 0xff];
      t ^= RCON$1[k / keySize | 0] << 24;
    } else if (keySize > 6 && k % keySize === 4) {
      t = G$3.SBOX[t >>> 24] << 24 | G$3.SBOX[t >>> 16 & 0xff] << 16 | G$3.SBOX[t >>> 8 & 0xff] << 8 | G$3.SBOX[t & 0xff];
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t;
  }

  var invKeySchedule = [];

  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik;
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt;
    } else {
      invKeySchedule[ik] = G$3.INV_SUB_MIX[0][G$3.SBOX[tt >>> 24]] ^ G$3.INV_SUB_MIX[1][G$3.SBOX[tt >>> 16 & 0xff]] ^ G$3.INV_SUB_MIX[2][G$3.SBOX[tt >>> 8 & 0xff]] ^ G$3.INV_SUB_MIX[3][G$3.SBOX[tt & 0xff]];
    }
  }

  this._nRounds = nRounds;
  this._keySchedule = keySchedule;
  this._invKeySchedule = invKeySchedule;
};

AES$1.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M);
  return cryptBlock(M, this._keySchedule, G$3.SUB_MIX, G$3.SBOX, this._nRounds);
};

AES$1.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M);
  var buf = Buffer$5.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES$1.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M); // swap

  var m1 = M[1];
  M[1] = M[3];
  M[3] = m1;
  var out = cryptBlock(M, this._invKeySchedule, G$3.INV_SUB_MIX, G$3.INV_SBOX, this._nRounds);
  var buf = Buffer$5.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES$1.prototype.scrub = function () {
  scrubVec(this._keySchedule);
  scrubVec(this._invKeySchedule);
  scrubVec(this._key);
};

var AES_1 = AES$1;
var aes$2 = {
  AES: AES_1
};

var domain; // This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).

function EventHandlers() {}

EventHandlers.prototype = Object.create(null);

function EventEmitter() {
  EventEmitter.init.call(this);
}
// require('events') === require('events').EventEmitter

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.usingDomains = false;
EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

EventEmitter.defaultMaxListeners = 10;

EventEmitter.init = function () {
  this.domain = null;

  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active ) ;
  }

  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
}; // These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.


function emitNone(handler, isFn, self) {
  if (isFn) handler.call(self);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self);
    }
  }
}

function emitOne(handler, isFn, self, arg1) {
  if (isFn) handler.call(self, arg1);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1);
    }
  }
}

function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn) handler.call(self, arg1, arg2);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1, arg2);
    }
  }
}

function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn) handler.call(self, arg1, arg2, arg3);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1, arg2, arg3);
    }
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn) handler.apply(self, args);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].apply(self, args);
    }
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = type === 'error';
  events = this._events;
  if (events) doError = doError && events.error == null;else if (!doError) return false;
  domain = this.domain; // If there is no 'error' event listener then throw.

  if (doError) {
    er = arguments[1];

    if (domain) {
      if (!er) er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }

    return false;
  }

  handler = events[type];
  if (!handler) return false;
  var isFn = typeof handler === 'function';
  len = arguments.length;

  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;

    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;

    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;

    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower

    default:
      args = new Array(len - 1);

      for (i = 1; i < len; i++) {
        args[i - 1] = arguments[i];
      }

      emitMany(handler, isFn, this, args);
  }
  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = target._events;

  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    } // Check for listener leak


    if (!existing.warned) {
      m = $getMaxListeners(target);

      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }

  return target;
}

function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function _onceWrap(target, type, listener) {
  var fired = false;

  function g() {
    target.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }

  g.listener = listener;
  return g;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // emits a 'removeListener' event iff the listener was removed


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = this._events;
  if (!events) return this;
  list = events[type];
  if (!list) return this;

  if (list === listener || list.listener && list.listener === listener) {
    if (--this._eventsCount === 0) this._events = new EventHandlers();else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list[0] = undefined;

      if (--this._eventsCount === 0) {
        this._events = new EventHandlers();
        return this;
      } else {
        delete events[type];
      }
    } else {
      spliceOne(list, position);
    }

    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events;
  events = this._events;
  if (!events) return this; // not listening for removeListener, no need to emit

  if (!events.removeListener) {
    if (arguments.length === 0) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    } else if (events[type]) {
      if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);

    for (var i = 0, key; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = new EventHandlers();
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    do {
      this.removeListener(type, listeners[listeners.length - 1]);
    } while (listeners[0]);
  }

  return this;
};

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;
  if (!events) ret = [];else {
    evlistener = events[type];
    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
  }
  return ret;
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
}; // About 1.5x faster than the two-arg version of Array#splice().


function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

function arrayClone(arr, i) {
  var copy = new Array(i);

  while (i--) {
    copy[i] = arr[i];
  }

  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js
function defaultSetTimout$1() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout$1() {
  throw new Error('clearTimeout has not been defined');
}

var cachedSetTimeout$1 = defaultSetTimout$1;
var cachedClearTimeout$1 = defaultClearTimeout$1;

if (typeof global$1.setTimeout === 'function') {
  cachedSetTimeout$1 = setTimeout;
}

if (typeof global$1.clearTimeout === 'function') {
  cachedClearTimeout$1 = clearTimeout;
}

function runTimeout$1(fun) {
  if (cachedSetTimeout$1 === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout$1 === defaultSetTimout$1 || !cachedSetTimeout$1) && setTimeout) {
    cachedSetTimeout$1 = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout$1(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout$1.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout$1.call(this, fun, 0);
    }
  }
}

function runClearTimeout$1(marker) {
  if (cachedClearTimeout$1 === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout$1 === defaultClearTimeout$1 || !cachedClearTimeout$1) && clearTimeout) {
    cachedClearTimeout$1 = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout$1(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout$1.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout$1.call(this, marker);
    }
  }
}

var queue$1 = [];
var draining$1 = false;
var currentQueue$1;
var queueIndex$1 = -1;

function cleanUpNextTick$1() {
  if (!draining$1 || !currentQueue$1) {
    return;
  }

  draining$1 = false;

  if (currentQueue$1.length) {
    queue$1 = currentQueue$1.concat(queue$1);
  } else {
    queueIndex$1 = -1;
  }

  if (queue$1.length) {
    drainQueue$1();
  }
}

function drainQueue$1() {
  if (draining$1) {
    return;
  }

  var timeout = runTimeout$1(cleanUpNextTick$1);
  draining$1 = true;
  var len = queue$1.length;

  while (len) {
    currentQueue$1 = queue$1;
    queue$1 = [];

    while (++queueIndex$1 < len) {
      if (currentQueue$1) {
        currentQueue$1[queueIndex$1].run();
      }
    }

    queueIndex$1 = -1;
    len = queue$1.length;
  }

  currentQueue$1 = null;
  draining$1 = false;
  runClearTimeout$1(timeout);
}

function nextTick$1(fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue$1.push(new Item$1(fun, args));

  if (queue$1.length === 1 && !draining$1) {
    runTimeout$1(drainQueue$1);
  }
} // v8 likes predictible objects


function Item$1(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item$1.prototype.run = function () {
  this.fun.apply(null, this.array);
};


var performance$1 = global$1.performance || {};

var performanceNow$1 = performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function () {
  return new Date().getTime();
}; // generate timestamp or delta

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = {
    data: v,
    next: null
  };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = {
    data: v,
    next: this.head
  };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;

  while (p = p.next) {
    ret += s + p.data;
  }

  return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return buffer.Buffer.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = buffer.Buffer.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;

  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }

  return ret;
};

var safeBuffer$1 = createCommonjsModule(function (module, exports) {
  /* eslint-disable node/no-deprecated-api */
  var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }

  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer;
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  } // Copy static methods from Buffer


  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }

    return Buffer(arg, encodingOrOffset, length);
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    var buf = Buffer(size);

    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }

    return buf;
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return Buffer(size);
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }

    return buffer.SlowBuffer(size);
  };
});

/*<replacement>*/


var Buffer$6 = safeBuffer$1.Buffer;
/*</replacement>*/

var isEncoding$1 = Buffer$6.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer$6.isEncoding === isEncoding$1 || !isEncoding$1(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


var StringDecoder_1 = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer$6.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

var string_decoder = {
  StringDecoder: StringDecoder_1
};

Readable.ReadableState = ReadableState;
var debug = util.debuglog('stream');
util.inherits(Readable, EventEmitter);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function listenerCount$1(emitter, type) {
  return emitter.listeners(type).length;
}

function ReadableState(options, stream) {
  options = options || {}; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

  this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.

  this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    this.decoder = new StringDecoder_1(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  if (!(this instanceof Readable)) return new Readable(options);
  this._readableState = new ReadableState(options, this); // legacy

  this.readable = true;
  if (options && typeof options.read === 'function') this._read = options.read;
  EventEmitter.call(this);
} // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.

Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;

    if (encoding !== state.encoding) {
      chunk = Buffer.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);

  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');

      stream.emit('error', _e);
    } else {
      var skipAdd;

      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode

      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
} // if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.


function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
} // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  this._readableState.decoder = new StringDecoder_1(enc);
  this._readableState.encoding = enc;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;

  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true; // emit 'readable' now to make sure it gets picked up.

  emitReadable(stream);
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) nextTick$1(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    nextTick$1(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = !pipeOpts || pipeOpts.end !== false;
  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) nextTick$1(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable) {
    debug('onunpipe');

    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  } // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.


  var increasedAwaitDrain = false;
  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);

    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && src.listeners('data').length) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var _i = 0; _i < len; _i++) {
      dests[_i].emit('unpipe', this);
    }

    return this;
  } // try to find the right one.


  var i = indexOf(state.pipes, dest);
  if (i === -1) return this;
  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = EventEmitter.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;

    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;

      if (!state.reading) {
        nextTick$1(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    nextTick$1(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {}
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;
  var self = this;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = self.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  }); // when we try to consume some more bytes, simply unpause the
  // underlying stream.

  self._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
}; // exposed for testing purposes only.


Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
} // Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function fromListPartial(n, list, hasStrings) {
  var ret;

  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }

  return ret;
} // Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;

  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;

    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
} // Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;

  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;

    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.

  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    nextTick$1(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}

// A bit simpler than readable streams.
Writable.WritableState = WritableState;
util.inherits(Writable, EventEmitter);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Object.defineProperty(this, 'buffer', {
    get: util.deprecate(function () {
      return this.getBuffer();
    }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
  });
  options = options || {}; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

  this.highWaterMark = ~~this.highWaterMark;
  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};
function Writable(options) {
  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
  this._writableState = new WritableState(options, this); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  EventEmitter.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.

Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  nextTick$1(cb, er);
} // If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.


function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false; // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!buffer.Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  if (er) {
    stream.emit('error', er);
    nextTick$1(cb, er);
    valid = false;
  }

  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (buffer.Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = buffer.Buffer.from(chunk, encoding);
  }

  return chunk;
} // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.


function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (buffer.Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) nextTick$1(cb, er);else cb(er);
  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      nextTick$1(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;

    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) nextTick$1(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;

    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }

    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}

util.inherits(Duplex, Readable);
var keys = Object.keys(Writable.prototype);

for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  this.once('end', onend);
} // the no-half-open enforcer

function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  nextTick$1(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

// a transform stream is a readable/writable stream where you do
util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
  ts.writechunk = null;
  ts.writecb = null;
  if (data !== null && data !== undefined) stream.push(data);
  cb(er);
  var rs = stream._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.

  var stream = this; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er) {
      done(stream, er);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('Not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er) {
  if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  var ws = stream._writableState;
  var ts = stream._transformState;
  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
  if (ts.transforming) throw new Error('Calling transform done when still transforming');
  return stream.push(null);
}

util.inherits(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

util.inherits(Stream, EventEmitter);
Stream.Readable = Readable;
Stream.Writable = Writable;
Stream.Duplex = Duplex;
Stream.Transform = Transform;
Stream.PassThrough = PassThrough; // Backwards-compat with node 0.4.x

Stream.Stream = Stream;
// part of this class) is overridden in the Readable class.

function Stream() {
  EventEmitter.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.

  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;

  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  } // don't leave dangling pipes when there are errors.


  function onerror(er) {
    cleanup();

    if (EventEmitter.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror); // remove all the event listeners that were added.

  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

  return dest;
};

var Buffer$7 = safeBuffer.Buffer;
var Transform$1 = Stream.Transform;
var StringDecoder$1 = string_decoder.StringDecoder;

function CipherBase$1(hashMode) {
  Transform$1.call(this);
  this.hashMode = typeof hashMode === 'string';

  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest;
  } else {
    this.final = this._finalOrDigest;
  }

  if (this._final) {
    this.__final = this._final;
    this._final = null;
  }

  this._decoder = null;
  this._encoding = null;
}

inherits_browser(CipherBase$1, Transform$1);

CipherBase$1.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer$7.from(data, inputEnc);
  }

  var outData = this._update(data);

  if (this.hashMode) return this;

  if (outputEnc) {
    outData = this._toString(outData, outputEnc);
  }

  return outData;
};

CipherBase$1.prototype.setAutoPadding = function () {};

CipherBase$1.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state');
};

CipherBase$1.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state');
};

CipherBase$1.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state');
};

CipherBase$1.prototype._transform = function (data, _, next) {
  var err;

  try {
    if (this.hashMode) {
      this._update(data);
    } else {
      this.push(this._update(data));
    }
  } catch (e) {
    err = e;
  } finally {
    next(err);
  }
};

CipherBase$1.prototype._flush = function (done) {
  var err;

  try {
    this.push(this.__final());
  } catch (e) {
    err = e;
  }

  done(err);
};

CipherBase$1.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer$7.alloc(0);

  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true);
  }

  return outData;
};

CipherBase$1.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder$1(enc);
    this._encoding = enc;
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings');

  var out = this._decoder.write(value);

  if (fin) {
    out += this._decoder.end();
  }

  return out;
};

var cipherBase = CipherBase$1;

var Buffer$8 = safeBuffer.Buffer;
var ZEROES$1 = Buffer$8.alloc(16, 0);

function toArray(buf) {
  return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
}

function fromArray(out) {
  var buf = Buffer$8.allocUnsafe(16);
  buf.writeUInt32BE(out[0] >>> 0, 0);
  buf.writeUInt32BE(out[1] >>> 0, 4);
  buf.writeUInt32BE(out[2] >>> 0, 8);
  buf.writeUInt32BE(out[3] >>> 0, 12);
  return buf;
}

function GHASH$1(key) {
  this.h = key;
  this.state = Buffer$8.alloc(16, 0);
  this.cache = Buffer$8.allocUnsafe(0);
} // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua


GHASH$1.prototype.ghash = function (block) {
  var i = -1;

  while (++i < block.length) {
    this.state[i] ^= block[i];
  }

  this._multiply();
};

GHASH$1.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsbVi;
  var i = -1;

  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;

    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0];
      Zi[1] ^= Vi[1];
      Zi[2] ^= Vi[2];
      Zi[3] ^= Vi[3];
    } // Store the value of LSB(V_i)


    lsbVi = (Vi[3] & 1) !== 0; // V_i+1 = V_i >> 1

    for (j = 3; j > 0; j--) {
      Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
    }

    Vi[0] = Vi[0] >>> 1; // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R

    if (lsbVi) {
      Vi[0] = Vi[0] ^ 0xe1 << 24;
    }
  }

  this.state = fromArray(Zi);
};

GHASH$1.prototype.update = function (buf) {
  this.cache = Buffer$8.concat([this.cache, buf]);
  var chunk;

  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};

GHASH$1.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer$8.concat([this.cache, ZEROES$1], 16));
  }

  this.ghash(fromArray([0, abl, 0, bl]));
  return this.state;
};

var ghash = GHASH$1;

var Buffer$9 = safeBuffer.Buffer;

function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) out++;
  var len = Math.min(a.length, b.length);

  for (var i = 0; i < len; ++i) {
    out += a[i] ^ b[i];
  }

  return out;
}

function calcIv(self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer$9.concat([iv, Buffer$9.from([0, 0, 0, 1])]);
    return Buffer$9.concat([iv, Buffer$9.from([0, 0, 0, 2])]);
  }

  var ghash$1 = new ghash(ck);
  var len = iv.length;
  var toPad = len % 16;
  ghash$1.update(iv);

  if (toPad) {
    toPad = 16 - toPad;
    ghash$1.update(Buffer$9.alloc(toPad, 0));
  }

  ghash$1.update(Buffer$9.alloc(8, 0));
  var ivBits = len * 8;
  var tail = Buffer$9.alloc(8);
  tail.writeUIntBE(ivBits, 0, 8);
  ghash$1.update(tail);
  self._finID = ghash$1.state;
  var out = Buffer$9.from(self._finID);
  incr32_1(out);
  return out;
}

function StreamCipher(mode, key, iv, decrypt) {
  cipherBase.call(this);
  var h = Buffer$9.alloc(4, 0);
  this._cipher = new aes$2.AES(key);

  var ck = this._cipher.encryptBlock(h);

  this._ghash = new ghash(ck);
  iv = calcIv(this, iv, ck);
  this._prev = Buffer$9.from(iv);
  this._cache = Buffer$9.allocUnsafe(0);
  this._secCache = Buffer$9.allocUnsafe(0);
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  this._mode = mode;
  this._authTag = null;
  this._called = false;
}

inherits_browser(StreamCipher, cipherBase);

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - this._alen % 16;

    if (rump < 16) {
      rump = Buffer$9.alloc(rump, 0);

      this._ghash.update(rump);
    }
  }

  this._called = true;

  var out = this._mode.encrypt(this, chunk);

  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }

  this._len += chunk.length;
  return out;
};

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
  var tag = bufferXor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
  this._authTag = tag;

  this._cipher.scrub();
};

StreamCipher.prototype.getAuthTag = function getAuthTag() {
  if (this._decrypt || !Buffer$9.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
  return this._authTag;
};

StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
  this._authTag = tag;
};

StreamCipher.prototype.setAAD = function setAAD(buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state');

  this._ghash.update(buf);

  this._alen += buf.length;
};

var authCipher = StreamCipher;

var Buffer$a = safeBuffer.Buffer;

function StreamCipher$1(mode, key, iv, decrypt) {
  cipherBase.call(this);
  this._cipher = new aes$2.AES(key);
  this._prev = Buffer$a.from(iv);
  this._cache = Buffer$a.allocUnsafe(0);
  this._secCache = Buffer$a.allocUnsafe(0);
  this._decrypt = decrypt;
  this._mode = mode;
}

inherits_browser(StreamCipher$1, cipherBase);

StreamCipher$1.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};

StreamCipher$1.prototype._final = function () {
  this._cipher.scrub();
};

var streamCipher = StreamCipher$1;

var Buffer$b = safeBuffer.Buffer;
var Transform$2 = Stream.Transform;

function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer$b.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}

function HashBase(blockSize) {
  Transform$2.call(this);
  this._block = Buffer$b.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];
  this._finalized = false;
}

inherits_browser(HashBase, Transform$2);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;

  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;

  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer$b.isBuffer(data)) data = Buffer$b.from(data, encoding); // consume data

  var block = this._block;
  var offset = 0;

  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) {
      block[i++] = data[offset++];
    }

    this._update();

    this._blockOffset = 0;
  }

  while (offset < data.length) {
    block[this._blockOffset++] = data[offset++];
  } // update length


  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();

  if (encoding !== undefined) digest = digest.toString(encoding); // reset state

  this._block.fill(0);

  this._blockOffset = 0;

  for (var i = 0; i < 4; ++i) {
    this._length[i] = 0;
  }

  return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

var hashBase = HashBase;

var Buffer$c = safeBuffer.Buffer;
var ARRAY16 = new Array(16);

function MD5$1() {
  hashBase.call(this, 64); // state

  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
}

inherits_browser(MD5$1, hashBase);

MD5$1.prototype._update = function () {
  var M = ARRAY16;

  for (var i = 0; i < 16; ++i) {
    M[i] = this._block.readInt32LE(i * 4);
  }

  var a = this._a;
  var b = this._b;
  var c = this._c;
  var d = this._d;
  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
  this._a = this._a + a | 0;
  this._b = this._b + b | 0;
  this._c = this._c + c | 0;
  this._d = this._d + d | 0;
};

MD5$1.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;

  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);

    this._update();

    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);

  this._block.writeUInt32LE(this._length[0], 56);

  this._block.writeUInt32LE(this._length[1], 60);

  this._update(); // produce result


  var buffer = Buffer$c.allocUnsafe(16);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  return buffer;
};

function rotl$1(x, n) {
  return x << n | x >>> 32 - n;
}

function fnF(a, b, c, d, m, k, s) {
  return rotl$1(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}

function fnG(a, b, c, d, m, k, s) {
  return rotl$1(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}

function fnH(a, b, c, d, m, k, s) {
  return rotl$1(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}

function fnI(a, b, c, d, m, k, s) {
  return rotl$1(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}

var md5_js = MD5$1;

var Buffer$d = safeBuffer.Buffer;
/* eslint-disable camelcase */

function EVP_BytesToKey(password, salt, keyBits, ivLen) {
  if (!Buffer$d.isBuffer(password)) password = Buffer$d.from(password, 'binary');

  if (salt) {
    if (!Buffer$d.isBuffer(salt)) salt = Buffer$d.from(salt, 'binary');
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
  }

  var keyLen = keyBits / 8;
  var key = Buffer$d.alloc(keyLen);
  var iv = Buffer$d.alloc(ivLen || 0);
  var tmp = Buffer$d.alloc(0);

  while (keyLen > 0 || ivLen > 0) {
    var hash = new md5_js();
    hash.update(tmp);
    hash.update(password);
    if (salt) hash.update(salt);
    tmp = hash.digest();
    var used = 0;

    if (keyLen > 0) {
      var keyStart = key.length - keyLen;
      used = Math.min(keyLen, tmp.length);
      tmp.copy(key, keyStart, 0, used);
      keyLen -= used;
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen;
      var length = Math.min(ivLen, tmp.length - used);
      tmp.copy(iv, ivStart, used, used + length);
      ivLen -= length;
    }
  }

  tmp.fill(0);
  return {
    key: key,
    iv: iv
  };
}

var evp_bytestokey = EVP_BytesToKey;

var Buffer$e = safeBuffer.Buffer;

function Cipher$3(mode, key, iv) {
  cipherBase.call(this);
  this._cache = new Splitter();
  this._cipher = new aes$2.AES(key);
  this._prev = Buffer$e.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits_browser(Cipher$3, cipherBase);

Cipher$3.prototype._update = function (data) {
  this._cache.add(data);

  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get()) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }

  return Buffer$e.concat(out);
};

var PADDING$a = Buffer$e.alloc(16, 0x10);

Cipher$3.prototype._final = function () {
  var chunk = this._cache.flush();

  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);

    this._cipher.scrub();

    return chunk;
  }

  if (!chunk.equals(PADDING$a)) {
    this._cipher.scrub();

    throw new Error('data not multiple of block length');
  }
};

Cipher$3.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer$e.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer$e.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }

  return null;
};

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = Buffer$e.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }

  return Buffer$e.concat([this.cache, padBuff]);
};

function createCipheriv(suite, password, iv) {
  var config = modes_1[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  if (typeof password === 'string') password = Buffer$e.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
  if (typeof iv === 'string') iv = Buffer$e.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (config.type === 'stream') {
    return new streamCipher(config.module, password, iv);
  } else if (config.type === 'auth') {
    return new authCipher(config.module, password, iv);
  }

  return new Cipher$3(config.module, password, iv);
}

function createCipher(suite, password) {
  var config = modes_1[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  var keys = evp_bytestokey(password, false, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

var createCipheriv_1 = createCipheriv;
var createCipher_1 = createCipher;
var encrypter = {
  createCipheriv: createCipheriv_1,
  createCipher: createCipher_1
};

var Buffer$f = safeBuffer.Buffer;

function Decipher$1(mode, key, iv) {
  cipherBase.call(this);
  this._cache = new Splitter$1();
  this._last = void 0;
  this._cipher = new aes$2.AES(key);
  this._prev = Buffer$f.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits_browser(Decipher$1, cipherBase);

Decipher$1.prototype._update = function (data) {
  this._cache.add(data);

  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get(this._autopadding)) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }

  return Buffer$f.concat(out);
};

Decipher$1.prototype._final = function () {
  var chunk = this._cache.flush();

  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};

Decipher$1.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter$1() {
  this.cache = Buffer$f.allocUnsafe(0);
}

Splitter$1.prototype.add = function (data) {
  this.cache = Buffer$f.concat([this.cache, data]);
};

Splitter$1.prototype.get = function (autoPadding) {
  var out;

  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }

  return null;
};

Splitter$1.prototype.flush = function () {
  if (this.cache.length) return this.cache;
};

function unpad(last) {
  var padded = last[15];

  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data');
  }

  var i = -1;

  while (++i < padded) {
    if (last[i + (16 - padded)] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }

  if (padded === 16) return;
  return last.slice(0, 16 - padded);
}

function createDecipheriv(suite, password, iv) {
  var config = modes_1[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  if (typeof iv === 'string') iv = Buffer$f.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
  if (typeof password === 'string') password = Buffer$f.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (config.type === 'stream') {
    return new streamCipher(config.module, password, iv, true);
  } else if (config.type === 'auth') {
    return new authCipher(config.module, password, iv, true);
  }

  return new Decipher$1(config.module, password, iv);
}

function createDecipher(suite, password) {
  var config = modes_1[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  var keys = evp_bytestokey(password, false, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}

var createDecipher_1 = createDecipher;
var createDecipheriv_1 = createDecipheriv;
var decrypter = {
  createDecipher: createDecipher_1,
  createDecipheriv: createDecipheriv_1
};

var browser$1 = createCommonjsModule(function (module, exports) {
  function getCiphers() {
    return Object.keys(modes$2);
  }

  exports.createCipher = exports.Cipher = encrypter.createCipher;
  exports.createCipheriv = exports.Cipheriv = encrypter.createCipheriv;
  exports.createDecipher = exports.Decipher = decrypter.createDecipher;
  exports.createDecipheriv = exports.Decipheriv = decrypter.createDecipheriv;
  exports.listCiphers = exports.getCiphers = getCiphers;
});

var inplace = function xorInplace(a, b) {
  var length = Math.min(a.length, b.length);

  for (var i = 0; i < length; ++i) {
    a[i] = a[i] ^ b[i];
  }

  return a;
};

var crypto_1 = {};

// tslint:disable:max-classes-per-file
class CryptoError extends Error {
  constructor(message) {
    super(message);
    Object.defineProperty(this, "message", {
      enumerable: false,
      value: message
    });
    Object.defineProperty(this, "name", {
      enumerable: false,
      value: this.constructor.name
    });
    Error.captureStackTrace(this, this.constructor);
  }

}
class Bip38CompressionError extends CryptoError {
  constructor(expected, given) {
    super("Expected flag to be ".concat(expected, ", but got ").concat(given, "."));
  }

}
class Bip38LengthError extends CryptoError {
  constructor(expected, given) {
    super("Expected length to be ".concat(expected, ", but got ").concat(given, "."));
  }

}
class Bip38PrefixError extends CryptoError {
  constructor(expected, given) {
    super("Expected prefix to be ".concat(expected, ", but got ").concat(given, "."));
  }

}
class Bip38TypeError extends CryptoError {
  constructor(expected, given) {
    super("Expected type to be ".concat(expected, ", but got ").concat(given, "."));
  }

}
class NetworkVersionError extends CryptoError {
  constructor(expected, given) {
    super("Expected version to be ".concat(expected, ", but got ").concat(given, "."));
  }

}
class NotImplementedError extends CryptoError {
  constructor() {
    super("Feature is not available.");
  }

}
class PrivateKeyLengthError extends CryptoError {
  constructor(expected, given) {
    super("Expected length to be ".concat(expected, ", but got ").concat(given, "."));
  }

}
class PublicKeyError extends CryptoError {
  constructor(given) {
    super("Expected ".concat(given, " to be a valid public key."));
  }

}
class AddressNetworkError extends CryptoError {
  constructor(what) {
    super(what);
  }

}
class TransactionTypeError extends CryptoError {
  constructor(given) {
    super("Type ".concat(given, " not supported."));
  }

}
class InvalidTransactionBytesError extends CryptoError {
  constructor(message) {
    super("Failed to deserialize transaction, encountered invalid bytes: ".concat(message));
  }

}
class TransactionSchemaError extends CryptoError {
  constructor(what) {
    super(what);
  }

}
class TransactionVersionError extends CryptoError {
  constructor(given) {
    super("Version ".concat(given, " not supported."));
  }

}
class UnkownTransactionError extends CryptoError {
  constructor(given) {
    super("Unknown transaction type: ".concat(given));
  }

}
class TransactionAlreadyRegisteredError extends CryptoError {
  constructor(name) {
    super("Transaction type ".concat(name, " is already registered."));
  }

}
class TransactionKeyAlreadyRegisteredError extends CryptoError {
  constructor(name) {
    super("Transaction key ".concat(name, " is already registered."));
  }

}
class CoreTransactionTypeGroupImmutableError extends CryptoError {
  constructor() {
    super("The Core transaction type group is immutable.");
  }

}
class MissingMilestoneFeeError extends CryptoError {
  constructor(name) {
    super("Missing milestone fee for '".concat(name, "'."));
  }

}
class MaximumPaymentCountExceededError extends CryptoError {
  constructor(limit) {
    super("Number of payments exceeded the allowed maximum of ".concat(limit, "."));
  }

}
class MinimumPaymentCountSubceededError extends CryptoError {
  constructor() {
    super("Number of payments subceeded the required minimum of 2.");
  }

}
class VendorFieldLengthExceededError extends CryptoError {
  constructor(limit) {
    super("Length of vendor field exceeded the allowed maximum ".concat(limit, "."));
  }

}
class MissingTransactionSignatureError extends CryptoError {
  constructor() {
    super("Expected the transaction to be signed.");
  }

}
class BlockSchemaError extends CryptoError {
  constructor(height, what) {
    super("Height (".concat(height, "): ").concat(what));
  }

}
class PreviousBlockIdFormatError extends CryptoError {
  constructor(thisBlockHeight, previousBlockId) {
    super("The config denotes that the block at height ".concat(thisBlockHeight - 1, " ") + "must use full SHA256 block id, but the next block (at ".concat(thisBlockHeight, ") ") + "contains previous block id \"".concat(previousBlockId, "\""));
  }

}
class InvalidMilestoneConfigurationError extends CryptoError {
  constructor(message) {
    super(message);
  }

}
class InvalidMultiSignatureAssetError extends CryptoError {
  constructor() {
    super("The multi signature asset is invalid.");
  }

}
class DuplicateParticipantInMultiSignatureError extends CryptoError {
  constructor() {
    super("Invalid multi signature, because duplicate participant found.");
  }

}

var errors = /*#__PURE__*/Object.freeze({
  __proto__: null,
  CryptoError: CryptoError,
  Bip38CompressionError: Bip38CompressionError,
  Bip38LengthError: Bip38LengthError,
  Bip38PrefixError: Bip38PrefixError,
  Bip38TypeError: Bip38TypeError,
  NetworkVersionError: NetworkVersionError,
  NotImplementedError: NotImplementedError,
  PrivateKeyLengthError: PrivateKeyLengthError,
  PublicKeyError: PublicKeyError,
  AddressNetworkError: AddressNetworkError,
  TransactionTypeError: TransactionTypeError,
  InvalidTransactionBytesError: InvalidTransactionBytesError,
  TransactionSchemaError: TransactionSchemaError,
  TransactionVersionError: TransactionVersionError,
  UnkownTransactionError: UnkownTransactionError,
  TransactionAlreadyRegisteredError: TransactionAlreadyRegisteredError,
  TransactionKeyAlreadyRegisteredError: TransactionKeyAlreadyRegisteredError,
  CoreTransactionTypeGroupImmutableError: CoreTransactionTypeGroupImmutableError,
  MissingMilestoneFeeError: MissingMilestoneFeeError,
  MaximumPaymentCountExceededError: MaximumPaymentCountExceededError,
  MinimumPaymentCountSubceededError: MinimumPaymentCountSubceededError,
  VendorFieldLengthExceededError: VendorFieldLengthExceededError,
  MissingTransactionSignatureError: MissingTransactionSignatureError,
  BlockSchemaError: BlockSchemaError,
  PreviousBlockIdFormatError: PreviousBlockIdFormatError,
  InvalidMilestoneConfigurationError: InvalidMilestoneConfigurationError,
  InvalidMultiSignatureAssetError: InvalidMultiSignatureAssetError,
  DuplicateParticipantInMultiSignatureError: DuplicateParticipantInMultiSignatureError
});

var isMergeableObject = function isMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
};

function isNonNullObject(value) {
  return !!value && typeof value === 'object';
}

function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}

function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}

function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}

function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }

  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepmerge;
}

function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}

function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}

function mergeObject(target, source, options) {
  var destination = {};

  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }

  getKeys(source).forEach(function (key) {
    if (!options.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    } else {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    }
  });
  return destination;
}

function deepmerge(target, source, options) {
  options = Object.assign({
    arrayMerge: defaultArrayMerge,
    isMergeableObject: isMergeableObject
  }, options, {
    cloneUnlessOtherwiseSpecified: cloneUnlessOtherwiseSpecified
  });
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}

deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};

var deepmerge_1 = deepmerge;
var cjs = deepmerge_1;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */

var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used as references for various `Number` constants. */

var INFINITY = 1 / 0;
/** `Object#toString` result references. */

var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';
/** Used to match property names within property paths. */

var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to match backslashes in property paths. */

var reEscapeChar$1 = /\\(\\)?/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Detect free variable `global` from Node.js. */

var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
/** Detect free variable `self`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue(object, key) {
  return object == null ? undefined : object[key];
}
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */


function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;

  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }

  return result;
}
/** Used for built-in method references. */


var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to detect overreaching core-js shims. */

var coreJsData = root['__core-js_shared__'];
/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/** Used to resolve the decompiled source of functions. */


var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString = objectProto.toString;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */

var Symbol$1 = root.Symbol,
    splice = arrayProto.splice;
/* Built-in method references that are verified to be native. */

var Map$1 = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */


function hashSet(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */


function listCacheClear() {
  this.__data__ = [];
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map$1 || ListCache)(),
    'string': new Hash()
  };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */


function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }

  return index && index == length ? object : undefined;
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */


function baseIsNative(value) {
  if (!isObject$1(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */


function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value) {
  return isArray$2(value) ? value : stringToPath$1(value);
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */


function isKey(value, object) {
  if (isArray$2(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */


function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */


var stringToPath$1 = memoize(function (string) {
  string = toString$3(string);
  var result = [];

  if (reLeadingDot.test(string)) {
    result.push('');
  }

  string.replace(rePropName$1, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar$1, '$1') : number || match);
  });
  return result;
});
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */


function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */


function memoize(func, resolver) {
  if (typeof func != 'function' || resolver && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Assign cache to `_.memoize`.


memoize.Cache = MapCache;
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq(value, other) {
  return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */


var isArray$2 = Array.isArray;
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$1(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject$1(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString$3(value) {
  return value == null ? '' : baseToString(value);
}
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */


function get$4(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var lodash_get = get$4;

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */

var FUNC_ERROR_TEXT$1 = 'Expected a function';
/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
/** Used as references for various `Number` constants. */

var INFINITY$1 = 1 / 0,
    MAX_SAFE_INTEGER$1 = 9007199254740991;
/** `Object#toString` result references. */

var funcTag$1 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    symbolTag$1 = '[object Symbol]';
/** Used to match property names within property paths. */

var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp$1 = /^\w*$/,
    reLeadingDot$1 = /^\./,
    rePropName$2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;
/** Used to match backslashes in property paths. */

var reEscapeChar$2 = /\\(\\)?/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
/** Detect free variable `self`. */

var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}
/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */


function isHostObject$1(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;

  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }

  return result;
}
/** Used for built-in method references. */


var arrayProto$1 = Array.prototype,
    funcProto$1 = Function.prototype,
    objectProto$1 = Object.prototype;
/** Used to detect overreaching core-js shims. */

var coreJsData$1 = root$1['__core-js_shared__'];
/** Used to detect methods masquerading as native. */

var maskSrcKey$1 = function () {
  var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/** Used to resolve the decompiled source of functions. */


var funcToString$1 = funcProto$1.toString;
/** Used to check objects for own properties. */

var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var objectToString$1 = objectProto$1.toString;
/** Used to detect if a method is native. */

var reIsNative$1 = RegExp('^' + funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar$1, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/** Built-in value references. */

var Symbol$2 = root$1.Symbol,
    splice$1 = arrayProto$1.splice;
/* Built-in method references that are verified to be native. */

var Map$2 = getNative$1(root$1, 'Map'),
    nativeCreate$1 = getNative$1(Object, 'create');
/** Used to convert symbols to primitives and strings. */

var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function Hash$1(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear$1() {
  this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};
}
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function hashDelete$1(key) {
  return this.has(key) && delete this.__data__[key];
}
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function hashGet$1(key) {
  var data = this.__data__;

  if (nativeCreate$1) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }

  return hasOwnProperty$1.call(data, key) ? data[key] : undefined;
}
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$1.call(data, key);
}
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */


function hashSet$1(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate$1 && value === undefined ? HASH_UNDEFINED$1 : value;
  return this;
} // Add methods to `Hash`.


Hash$1.prototype.clear = hashClear$1;
Hash$1.prototype['delete'] = hashDelete$1;
Hash$1.prototype.get = hashGet$1;
Hash$1.prototype.has = hashHas$1;
Hash$1.prototype.set = hashSet$1;
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function ListCache$1(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */


function listCacheClear$1() {
  this.__data__ = [];
}
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$1(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice$1.call(data, index, 1);
  }

  return true;
}
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$1(data, key);
  return index < 0 ? undefined : data[index][1];
}
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf$1(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
} // Add methods to `ListCache`.


ListCache$1.prototype.clear = listCacheClear$1;
ListCache$1.prototype['delete'] = listCacheDelete$1;
ListCache$1.prototype.get = listCacheGet$1;
ListCache$1.prototype.has = listCacheHas$1;
ListCache$1.prototype.set = listCacheSet$1;
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function MapCache$1(entries) {
  var index = -1,
      length = entries ? entries.length : 0;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear$1() {
  this.__data__ = {
    'hash': new Hash$1(),
    'map': new (Map$2 || ListCache$1)(),
    'string': new Hash$1()
  };
}
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete$1(key) {
  return getMapData$1(this, key)['delete'](key);
}
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet$1(key) {
  return getMapData$1(this, key).get(key);
}
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet$1(key, value) {
  getMapData$1(this, key).set(key, value);
  return this;
} // Add methods to `MapCache`.


MapCache$1.prototype.clear = mapCacheClear$1;
MapCache$1.prototype['delete'] = mapCacheDelete$1;
MapCache$1.prototype.get = mapCacheGet$1;
MapCache$1.prototype.has = mapCacheHas$1;
MapCache$1.prototype.set = mapCacheSet$1;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty$1.call(object, key) && eq$1(objValue, value)) || value === undefined && !(key in object)) {
    object[key] = value;
  }
}
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf$1(array, key) {
  var length = array.length;

  while (length--) {
    if (eq$1(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */


function baseIsNative$1(value) {
  if (!isObject$2(value) || isMasked$1(value)) {
    return false;
  }

  var pattern = isFunction$1(value) || isHostObject$1(value) ? reIsNative$1 : reIsHostCtor$1;
  return pattern.test(toSource$1(value));
}
/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */


function baseSet(object, path, value, customizer) {
  if (!isObject$2(object)) {
    return object;
  }

  path = isKey$1(path, object) ? [path] : castPath$1(path);
  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey$1(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;

      if (newValue === undefined) {
        newValue = isObject$2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }

    assignValue(nested, key, newValue);
    nested = nested[key];
  }

  return object;
}
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */


function baseToString$1(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isSymbol$1(value)) {
    return symbolToString$1 ? symbolToString$1.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
}
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */


function castPath$1(value) {
  return isArray$3(value) ? value : stringToPath$2(value);
}
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData$1(map, key) {
  var data = map.__data__;
  return isKeyable$1(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative$1(object, key) {
  var value = getValue$1(object, key);
  return baseIsNative$1(value) ? value : undefined;
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */


function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */


function isKey$1(value, object) {
  if (isArray$3(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$1(value)) {
    return true;
  }

  return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) || object != null && value in Object(object);
}
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */


function isKeyable$1(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked$1(func) {
  return !!maskSrcKey$1 && maskSrcKey$1 in func;
}
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */


var stringToPath$2 = memoize$1(function (string) {
  string = toString$4(string);
  var result = [];

  if (reLeadingDot$1.test(string)) {
    result.push('');
  }

  string.replace(rePropName$2, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar$2, '$1') : number || match);
  });
  return result;
});
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey$1(value) {
  if (typeof value == 'string' || isSymbol$1(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
}
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */


function toSource$1(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */


function memoize$1(func, resolver) {
  if (typeof func != 'function' || resolver && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }

  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };

  memoized.cache = new (memoize$1.Cache || MapCache$1)();
  return memoized;
} // Assign cache to `_.memoize`.


memoize$1.Cache = MapCache$1;
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$1(value, other) {
  return value === other || value !== value && other !== other;
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */


var isArray$3 = Array.isArray;
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction$1(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$2(value) ? objectToString$1.call(value) : '';
  return tag == funcTag$1 || tag == genTag$1;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */


function isObject$2(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */


function isObjectLike$1(value) {
  return !!value && typeof value == 'object';
}
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */


function isSymbol$1(value) {
  return typeof value == 'symbol' || isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1;
}
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString$4(value) {
  return value == null ? '' : baseToString$1(value);
}
/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */


function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

var lodash_set = set;

var blocks = ["15895730198424359628", "14746174532446639362", "15249141324902969334", "12360802297474246584", "2565729258675312304", "12614646598841308905", "8274406339991077743", "1661383348822169561", "15467742607784975524", "3665174254391236833", "18033869253067308940", "9121030900295704150", "4296553458016414976", "6837659293375391985", "16540521480028827748", "1485997193168364918", "14159698257459587584", "7561147498738550191", "6247200360319694668", "7363268091423233950", "8738693892321921533", "9014317427571908796", "15519361274991733193", "14013227271822852495", "12603272471546364995", "1944108005996955253", "8469356042757089608", "3433946900869474802", "11257633501887013743", "2997965849869498353", "9196430932294555781", "6730395143580220680", "5806654366498055250", "13290912469992409149", "9502002558776276513", "330791153715252718", "12084096509112875921", "7079194814443264009", "15946707936026547597", "1641736062116508620", "5245034769798442586", "4073147595542846301", "11129434526540201266", "15355810214343508168", "834201289153220685", "4785149476172130294", "9808224912335721998", "11229968119222422821", "6766557974469507237", "2066948671330348076", "13308773643111727094", "15649739201370841265", "17287484123727410951", "1739406121453748889", "16969775483726255451", "5174570296595098048", "10957882104586895269", "16222316251056394079", "11019993339496601918", "7648775833276915174", "5947225658884952613", "17256370470460685782", "5681801935518263609", "6853934810393582972", "621694479387726255", "649083198759873217", "4052333663180604671", "5348794590580429562", "7723209448992965570", "15836524583901486981", "12478859533758330380", "13701809340863213986", "17417028847837598792", "14220651316552198137", "13101468344291730322", "6671890826474701031"];
var transactions = ["76bd168e57a4431a64617c4e7864df1e0be89831eabaa230e37643efae2def6f", "90d06cb306dcc33faba59545e03d91ee83b0409e66a45ffe6a9e3b1049a0c521", "0f7a3e8036fbaae7c76f7615b09b8c4f1337e96d87042d86e03cc5ab9b6ed745", "23733214f347970a34ccd772f89396056309744688bd6dbc35129e1f12d46d2f", "e30d7290ca9cab570aa72bf0365dde39b8d75fe65a4e804844e5708a021f8ab4", "03d3902bb30f71c29151f8b85ff478be1dc5264785c8c84550b6b59339dc03c9", "7a00dc347a50186bc0d789a7899f1a4dcbc1e5d5adbb5359df238cd2b9363b41", "bbe266eac2bbc505b40e74ae6d1960d7c76d3ca8d4b942b6046f0c5f750ff9f4", "cb63ee14068a8d2987c90ecb12998653161cd8748af7790c75592647260d3266", "d184752c1546c366866013aa00a2a0f9b40463656072334fc302ff783ff4ee98", "f8122e3d8b7ad31c58ed3254196b16c23249b8372f06de42191c43bfcf39849d", "0529fd0fe210f128b8090685093c8c6d6a1a0809e9f174a2917c8f80c090ec69", "6fa076d2c25f0ab89b71c9cf4694c36202a67efb65ffdfc58624ea80f4009bf6", "3b3099b15dab0cbda88a454ecede7cc24cc8dc08901bc0be7337538feae0e2e9", "e3ec42eae6134e74a1ed858e8f7e2e65aab66dc2561ee6f2affc1f4742ab2970", "d4aa08cefeba30724e2c5e08880585b9912d7fbf383aeab6b7fbee9525bf32f2", "618621ca07903b74a205bee148c34cb1b6384aca0db1fab2bbdd82866cfe2309", "56425c88a7be0ae35a99fd74f7934adc0b7abb00f51eb5a2dadc7bb564f05b9a", "13f331dd16ca3ca8533262b554396ca0e99ff1f68ea6052c9dea7504d8701e4b", "1855d6aea924d93582e92b81208901532928d282f150e496e501d044ecbe7136", "3632a80ff935e14da59baced343f113900d52bdf6070ff19af352332172ced44", "363bfbb7ae14858ab4a0f0049259b72d785657785d52363d6a9aaedd9bfc7488", "4114409365b496d4751a4424dce769125eac6dbd87091287a98f16f85204930d", "4659270deac2c6b0030a2db6a78c681ea629421438c7b73b963504483830e6e2", "523be7376cb099367d805eb1a4ee83b3ae1645ab04c03b3ebd3277ec5b967810", "52441513709b67c68a8a150ee1f54d2e33afe0a34f0197ecf2a616fd98b74b73", "574f3579f2bd2bbf4f60ca1edb96dde23a88827fece9e4098c8e9740d13301e0", "9890ba52dc8ae3386e06dd4a5c98152a249528bbbfb3af5c5a328e9a9a74e0fd", "38fa93e15190fbb648a98b63dca816abf2d9b405f4695ad9b7e5088a4543463a", "e29718a6b12666d2dc52b9cf99295b93cdf4eef057ad9bf4f47fd57654fe9f20", "6bf6a0c115bc062f872828d0310e6826caf20cee6bdc5f4196d00b1b2bb8a745", "6d949f412c183b47fe697600f903a7740d3b44b258a4a5da8af056587bc6eca0", "81440f6f528463fbfb37884f42d8f2bd3ef94ead662eee0e62fae4b063217620", "89f64e9c09b5509f006fbb9239349e97caf5513f591e110e44dd44a18078636f", "8d6ab35a4625c91316e549ebef9085e5e4cbb7be85cf9146500086bac3a0ed8b", "9e6ff0848991e3b88eb28845884e6c79459564e73e835219760592d35dc8a2a3", "bc3f66e88a7bf2682adf54e00d938b93f5631521ea4a0c861e8c9dca38b84e16", "c4f9333bfdbb7d495873ca51de29375b3b9dbf46e700c220b4bb4536ee69f793", "d5b21daf82695a13b6a332c35836c42d167337315dbddf4699c68ef23466c31d", "d8ebd64ad471d91ee2a12fee9c986e43a13cfef836f168515d107ee8dea58d5b", "dd25b474f12cb920b1b1349125d83c0ccfce7dea27f0e4d06baab46ebada458d", "ddcbee2daf18a52177c04473d91d5e63329ab3dccda76ed6eb3b41f640e67694", "de11387163af72a28cbad86960d462887c3fd3285ccac84cec8aaecd1c84c678", "f929ad9669b0020a37a17f6bd334f4649d43755968cdba7ad0d15cd2e4b8d9db", "ff1f8fa07cc528fa68d87f1d4ff6c3ae8df9d7365f5eef077b2146446f71192f", "8809592c1097b679702c2750fbc9307559bc1d554175d807ccce40942c0560d4", "99a6e5c8624fd7642c6128ba287bb0c9ec2da1e0e8dcaed423df13bfcd0522b5", "a9fb683405a8664e1d0fbffa605ffa3b15db99f2913cdd4bfb0408448c22a058", "ace1e3a0de725e8a944611a6bb3dda6c309c26c6f415b4749d084c6421f38d30", "fddfa2b8c797b66f247a7c69245568e5e93c0a6baaac467cf5247d464c803f7a", "5088d9dd9c1aa0cd4fc5682a0db737b8fd81348424f0a796d81fe781dcc20062", "6b5e0f73ebd9677afe42cd83d271e00ef41813e734a9e4d312e07726ce53a4b8", "6c87d87bb867e0419812f832e07c06fe1fdba941a9adca02197c8d61246d61ac", "0cbc773f731a02430ba7feb8b2a3af90e294cb1370f97e06c65a5e343a72986b", "53580b0571bae7fdb77fe2470f38f00f2ae15c6a5ace19d837decbd893f2f6ba", "f7338be76d01ae40f9cc1993390644191da6ec0f84b10c6df6f52026650556c1", "03a740dadd99686b916bf298b90c829eca00d25112fdadaef444ff41d2fabda3", "1b2b43d0a91ab424df5aadec60bac7044c82f5c3c13c9ec588f00a5cd50f3b2e", "c1d1560bf2a44f2a59bfa2244d303ce1ebaa0cc434a409c9c159ec0365eaed4a", "ed9a0a81cfa79e0b5af947780fb249d46c7669c4386c83e2a2ed4cfa9f576c76", "f9c42c2401c69df14bed689c4b42ee3e0ef92b0f20eb2f6777620548b7ab95ad", "2d2b1a34684d56066ef8681b2b520dea3cfca36b70674fa828ed95972a5b6aa0", "3eebeb0d6eb1877c7b9611920b16414e98cfe718ec62294a63c3f70668183354", "1a37cd89a0bc6f257f37431ce93494dc63476102a079b611f05c79f33224ce1e", "e979723514200e6d69663f8cc6ed671fa418fa69c66c53cdf6494e4db8fbd574", "60ec3ff66908b4ee077a22fe00ee276241cec475de576e0fd8c35fd4635eccbd", "24f407b8761b4a0fc54bbcc2e070c811f7dc4c6f9240ed715a8a95924acfa345", "66d2f629bda689e61aa83375d81c7374244c22d203efe8f1fc70a71fb4439487", "97b73c30314f7c5fad0314f34d0d218376186267c67ba636b106dab4b55789b3", "9a2ba4134745d1182e96dfb016385c31f260545bf1d9382e4e757112305e55a7", "734988e30e42d124a7b3dea66d060ab567dcb8b65d806c32d8607fbc67bad292", "e354b6c4891980135cc8201f257d1b052d46fc33d6555b633c59bd33f6b281cb", "3945e67bb5e864d2dd206293f1e778fa2181db5f81c2efc0a89e8fe53e2a2e7c", "15b1f1ffb2394e17d373c8573e39ebc395dfe98ae2b0793e6ad0d80fa2b12d13", "4490ef5d8e4001c8687e7e394fd80e163d63b45fc45f655e8a085eef70102a3a", "c7229a92f4d875112098934900d745a42b37e2888b2c86ee451bcb4cfb5e0c1f", "c6377ddedd7bcf3b0025d3d00f3dd1d44c94e2baca2b1c1381f70a02a5e6e0da", "fdd724dacef7442578efe93e841386c3410f44d7a5eb9bd0aec4c59964386f7d", "ff9956d76b6b1f56cec744bd7f6fa6b408fe846ec278458a2591a43b1b8239fb", "fe7ba0d0713821dfc43ca5024cfa430829eefacae2daf83f08375b552b578bd2", "08b55a8e470a018881e27d65fc56fbdd5d562d0f6e1ae753ee49a6d9e7a02bad", "1472b726972a477b4a20af71a185fe4159012d1c3bf523ca0b3936fa86d7f06a", "3464941177cb161dbebd477abac7598fef15b47dfc1d99ac212b488b86c00bc8", "761ac9b796de81737e3f140f831890a5eb7a86a25ed1a6b5bd48d58959f6baf3", "2fb6f7fdc049f21a14bffa984fcf0e4d6cda6d30d549209e21b4d8ef9ff56e7a", "7afc8b68390e07585d1289da18a4d89e9ed6a91abd21aa365636ab9e054c2089", "9e9f37dd168ddd2fef9783b927e32194ec0e2735c8a42bfab3584030bac47c0b", "0d37689318e83197de4472927d08a651ced33fae48a5595e033db4b7816fccf0", "13cc5a4906bfc47342282eff7c8c5d6e2d824a3ba7b417365f07e473be8d5586", "1d9cad8cfe1c0ccc3c49befcf3dbea1aeeb329b03279f900938ff4574e729d17", "56b78c8935e2bcd301f3be154ea05a3bff9b6fedd59827eb052269d8a052d32f", "ca82c604121d02677f6a2c5aaf7b0387a395955f0a3ca2cc9d4df86ddec51151", "ca8a6575eb9aac88abd838bf76d3859244598f30c4e2ad68383c39d350363944", "c2d9fc71c8e3ee3edbbc4827f7cd4b37e19d21756801ee67c2832f19ef50f403", "89b622c919168b5aa3bc8018459d45aabdd3b4dcda5a867fa9f2a7eb875e2f8e", "69ce928210329b22320d923d756fa61c986b8e710f23d41547bac851c5283b30", "4fc69b18868a8e055421278c04a713d9e249903fbcc888df688b423d3b5de3e2", "7b8a5d8ceb73764400fdb11e7f2e018975f5c8a5c569b5bd7345a01f8a76ac8e", "3b2a22bc2fdc46233d51ad9e92ed15323ad399c1e7f7da20cee4f47c45240881", "d97a0a8f8db3d9c75ded3e0c472d821c106c31548bba90c4f9df3f2b0f8c0db0", "9da6e6f92938b5dde9e1836952dba31c3e501380a38d70c39242e38d82e9acf7", "7175ca33fffa0a5327119d493e67c5185d56649a580aa95366dec2468ae01c32", "9b76f5cf7bb2c248965e9b8608774370ed3fab3124621036368ef142cc5688e1", "e516a8301f254877c65daa491f7cfd995833f528c2c2af7df70c83c41933e35b", "f637c84b6a249181bc010df54d6271ea65996c528885c7ef6ea0198039df3854", "fde663f1c01256855568c80d967ffd73c93a3096db0943ef8801929a0bf3fe7e", "ffc9fa27a918e3bae19aeda9b6e236602a029249701862b3e919642784279e03", "b1df50fcf4eea46c32ac98628d8b8b2a4249c7906b866e5331f6bdaad02af823", "27eb23f7e828cf4b5402fd941ffad69f6b4236fa12831738094070aa812fc632", "340c1207a356b6c00b8d35cca5b5977a322ccbae2cb9c70c7ad8f5c9999ec581", "fb38cb3f4e42da4c948fa13ef1a3ade1ab4830b51eb751432ae8f989a4035df0", "890ad9c2b67cf29acb2a8e0d8495887ccdb681c3828c0d49dfb3da341f810546", "d66d7ca4a3b7ac2eff15bcc98e96b3aefc7ea18c088a13ac1cac97408cd15402", "4bb2dea1d7b44889e369853421293d812b18cc3328dc52d368156b17e8825f54", "23dd658fb3e50fac70af521c50b43f95d5194d0d27dd149d170a4771141d4370", "4f555646ae62f6ac458b00f36d570e935c3b9b83116636e01292ffd4d1761c74", "aa93866398c6a9e065cbafa1db5e12b40510c3da299d97d14c56d12c4f44d42b", "72cea8d4bde0d262747a4627a478ec8afd40ebe5b5c38a3e6ae157c1d73d766b", "c5f9e74cff064b7bcbc9b2b59199b835f5abf0a7d5d1f77cc5e01b29142d9210", "57976122fc03bca4a5438a12e667507b95d543f959b99161146b3851c1591f3d", "ce6e4b199059b9f2b8baaa6475a7e8002f412598be0666943c170d3f48ec3042", "f2d0e7cf9cda469eb510092df957b58287f5b3c46dd596fc0398905eb1bbb1e8", "fd866d74827a4d468f97260e05700f8f4a317ae98d0c1e0c307f707c21960aab", "3a0f3747086ed148b3af107ec5e02fbea4c3036b568b313de45c5d13f9348bd2", "d9ba72dd34f95d003a3b177dc7656244cf2693d72337463dc16eb6ff1d8f679f", "276ef67f4c04365e81d22a55bfcd542eb54d8e178359c7084253de0941de22c9", "591b307b57e1f924ccfda0e44aa626f3055bfc330897b12aca5fc99d004ef377", "2f7f4453bb28befa7e3ad8a241a72455ed16b94f8d65ead817cdf06e5d320542", "b4fa3a85e757e4c07f01380c8a684d380353d9810707699cd59b791f836c6571", "ea23f249ed30ef8d4b12dcb967cb1ab728bf283f7180f13ed2e1a4e392293754", "eccd803527df3ce48f4be72e5e3a6f278d4ea257ab984857c152448bd8e4b3de", "fc9a5dc83e58c3594ebcbccdf76740f41d66329fe89dd5203cc23bf37eff2db4", "487a87fab87abaf2ef38fa802051d107d60bc257b5be62ead2a6e0fe97bbeb95", "9c93a90c3a81891d483b22d5ca132398f6acc6dc1095d3ae70c7cc9ddfd3028a", "d21115e0d477d54e56349c2789914f561a02ef26d25a95ed4041927d9bce6158", "34ce6311cfa5205d452db2b0e7f74717fad33119ebd71071194273dd09e28aa6", "df898fb403c3487776c0afcd93c71755947924d093e55bdcc645cd7736235543", "c5b34b3acb869e509b0bb1634c37c466f05361de269e1cf432a661908de9bb17", "e321699c6d3829309e2052d2fa73facd8285dcbcdaca90503daa6a4e10488649", "d140e1425b21cfacd07ece474784b935f170670ea7d44c07e61b7f1559c33ec1", "02d81bc62bf59e2861aa0e1078a0fa67b44ed10d20c15bf610d2c60ee6d87d30", "f8440d2fe36a2496281192a6f2017c3e0b1143dffc1299c5717f75c30baf8b82", "5f028b575a7f0b0f417e3b3642b8608515cb3e7aa05db77b956a69b4bfbd981e", "605cb7e40c8ef9bfd34f7ece54fc68a915c589691d8e19105d909061643b39fa", "223e866865d9b65a44b6f320dd2f5422ec209c73fb302f2b08bce1d79bd05a6e", "e78e533751d7a5745cd30247ee58392a3811b6546d291727e9887d6d55352864", "088202b75537ba3e7456903780c2c91cf72c58e8e9856e3cc6d5c465fed00724", "cb3dee266d937c04453d6ff7002d9948e5be09bedd480076e73aba4d85a1a39f", "f1e17f743a17d85b1d2567ac748dba7cbe1d5dfa3707e1beb8862a56fcdab821", "f27bc6a1baf3a75b4877f7a1cff333bede90f394195ee9a8b7098ae7e7e38067", "f5ec7a17a63210d7e1ea28ba45168a9a88f6c9f35485d265b4dc98c0a5ad5927", "f5f17b136c8955668fc75c98953b6b903065cdba9e905e6f3b94af225689aeea", "386d6d2933965ffcb33c5f6dcf886e5df8a4bcc79e97c3a85dda83f3b1d5e3df", "42001376bff16d35118fc05a271d0795a6d30b2fd7e9458974a1c2683a87c00a", "64cd978b06ea47ccd4ed727e451e285b148cbc850be89edf2b9b4825c798886a", "9be031bdf2f988e083808d50daed3e86b7c7c7b758e03e45de365cfc5cdad98b", "0efc0a63612582eba21394b53491658d45dc64b230e25ec8f1aab4df6e273006", "3bc7ed0ae39c641e02ab6591e1957a99755db6702724d2824d45491f33dd1a40", "430063c50d13e4b386a8577340b48a9f4e7620b09445420e9b640cdf49feb72a", "6c4578227054d105f28c3b3b622203ae3bf5156e326a3d2cc9b4c4e835ea8112", "7fa78167690601ad2dd159d819aca03dce84cbd4cda1ac4d7ff981ef6f7d69e8", "88d4bb35378e34fc45e3caa8fdeb2205699361f8e2aa488e0e98be5b7ba870ed", "a478e34f5cb0e313d7f70e051bf549e5e3ff7e69ac93d5c4d156ba055fe447b5", "caed90e15dcb174044f519930f10801c073b36f05b3179c75bc7f36160a70079", "ec48a8a8b24e441695b24ba2d4f6cd964d24a6bb7ab6ce037252a0a302ff0f03", "f172d80d6db5e5080abee7718c73a8d61892a96196c3d886aad9cb8644da808d", "ff172882257b8f162f16a9a670b27039e23809b76a80842f70dd1febb00732b9", "9d6926f2649eb3e4157be68fc931a4487b5eb498a61397d8a4bdf81416db8a31", "ac4bc7ba22b020c8ac3bec48dced41361e63fb1604f1848a800ab20c379619f8", "86e6e88147fac70815bb41498becb00ba631c23465838901e4ddc1b5db158ec4", "d5e42d7e6cdee582655901fe187513db6caaa4722c659256a642a5fdbe5061cf", "000f3c8a706ecedb17416431061eb9a15d925a328edd4c0478481673ca385005", "16e1bb38bdbe7128bd85816e4933bce9a356d4b77868b647b17a3b4624263e30", "a06928b3e6493b223524826a54ca70885fdbc65cfd712e756dd8168e523d9519", "dc39a407d04ea4c14b0603d3402b5111d17d90ab18229bf2c8f7395c88d10155", "c73f441649bdbe652fbd05c37e81696e6991c2b129161fd90223c56fa9c7965e", "dd984076dba89d32d5c3a47e3fd53b04d2c4263f20781d2dd3e7c68c0be2d997", "1ab767240d156568db3a836167097c81599514a3e84440081fd2eecdbd3349b8", "c70c8eacd8d1d9da965b2d9836e7b9ed47ee67e9b75ecf20e8b4581aed13a328", "23226558116e9fef05e4d257afa4c6bbf01f73bb0c1589ae7cec2eebd92cc491", "9671f9586b38f1dc1a6b715c2c5e4e4f30e2247b541b4e91f8f716e8a0f6c9e4", "daf91acfb23f6b3a950df087d80774ebb74fe194e01e048e974a643093ae656d", "81a7f9c699cb9b9123eeccd81de1cae1b620033f337b367590c204628f392cdc", "4ee69f95f7eeac9d4c3768905f33172cf7651726b90effa867d16365af440874", "9f99233049815668ef9a20fa14e912f42d6a16dc276b6e5fb560afea1c2406fe", "53572b544b88b1876a15ef324f02ba4a594fb341ee1c88a7d904b2658ba73789", "46f5570912d57c022e7abcd9dbda9478531c4f1539b1eb2603ba009bf2c2fc83", "a341122217619a4c34542a573481087bb07c41125be77af4aa56b6a13d4e43bc", "73df531d66828721c8440b0a008a4de62b331693a01a12706ea624f9d187eace", "37b97b5300332288f518a0e46582a989a88d75ceb3f5795fb70f95a8db88fa64", "fc8248f9d5d054d09961e2c27d9b6dd87dd7461f654f72ddce8547954f7e8761", "0bd5e40ef75d8a76882386eac6569ef4e04488ea1b74f1f3947c0219d25788c4", "a82bd2475912be3aa5f85833e6b2b4973df2eae80447dc70e0f35efb149c7844", "c7778b52f808b29d7f8de036a7686e2e4bf8cbeda360ed432a26c089efbeb31b", "9ec8e3f9b6f097c65e292bc6218e53656cc21bf2b4b27e3b716b921a93f08a0a", "a90ff245459a7066d7132a193b864c40fa4eb2597100847780c8029364a7fcdd", "e299b1783031142cf4f228b844d6c00d3045962d50910b8fa995f15781562e6c", "3c9951cd7cba4ec48eb04d49a2e811798f30d8d5330ffc901ed7d59c712ae87e", "7c20c3e55d771a9603397fcef5c32547fbf99b37aa6030836cd1bc405bc183c4", "65cfe144d953b9141312f294fff70067e2ca27515449e37297c4b87b24956898", "5c34237e466740aa62a6d2f060c839b737094c4c8cfc92343ebb8229ce45f51e", "5835af622801fb643601b350c23966042af115dfe4ab34c6e0b33200bf62b9bb", "9a3a919b2b9dde7ff91c531f928f4141ff22afc1a9185b98c1a8075f57025a29", "1f203b08c54729503b536fa75faa0c127f99befa40e7a73a7c4da7d7f0955f2d", "2b58f2ff1d421bfd063b87d3ebf2118e2e8b4bdcbedc7d888efaff3e13e3c26e", "a1d2d2318a4fcbb3145e3972c1a6165f19914f5829a4f248bc083af5055c5acc", "8854cb9d82913c46d738a829e8ac1271ebb8541973ca72659fbd9dd5c410a18a", "af94b014f96ca01a04df6e22aa256fa3f13fa6eb0f55de536d2e4f226bbcd75c", "e6ef65acaae9650d4b0693595141fd7adac13608fd0f078de4a57d11ca315102", "0c9d308bdc166d94b85d4f2ff700e38545776e2bf933a44fbc7b023c50060298", "0ef6356cd9a36e92847b05121dfea3513f1ba1ee4352ff3d3f700f66808b322b", "9c8c5c2945060938c10c7f866688f384f89b18b42ea92190f4637f5de5d0dc7b", "515c760e0833cafd0c43d3b243cda756cd83a1be6a59785166b911229785c7f0", "e35691e6bbd4f9b79b936110ffa513001fa45bd00442fb7b7cf6b82411ba8ce4", "386b8f59783d9b84370534c62354edc230f49dedf7bce380e43c02f7372eead4", "b89777887c2ffc97076e69c6dada7a26d08e9d69aa56c49ac6b0266efe841622", "76c6f9406d1306bb482d9229bcc523f9c1c5c6388a59565ce3b19e0e1f26e9df", "32aa60577531c190e6a29d28f434367c84c2f0a62eceba5c5483a3983639d51a", "035d32c0eba6e76bc248a202aa23d501d35ea5f1ce113ac4f496f1274e03df54", "fb945ec58fb74f597eab09952cf0a0b54ff35941767571a2edfabffd5545ce2b", "a47427dc0605bc933d989b00cb92b0d036915592d36a7348b3277084e3aa8ec0", "fe5043a086d9b27b45c4d9411013c822e9ecc7a77b6f506a58900e18c6623bd0", "9b7f70815fa01c0b5baa42f96e00a8519562648d06d52ea6e7687291ce17a4a7", "0376a9b2d6a13b69d9084b3312e8370b604931c0890daeba234ebcd40ce0914c", "9c785f4feb5de0380969b4ad82a25049d4e4cbc1e57698c80a4845f0734d928b", "37e1680dad0fd00fe1bd17633a0908699b35ac42928f198c65be812b640fa735", "224d769ac8515e50c1a2a7f62fcd7be60ee54fb7230288c79d35d0c49924efa8", "b43c2940feb8794c95266051e80cdfa5e3f68f9891753a1411b74baef3531bca", "7bdaddc8802d157c747e0021eaedda99aea98f5193db6b8a7d77d13fbebe8582", "f87c7fa28e4420a8395c77d803ab7d46a71fbe6fac3fbd955e483e2e81bf881c", "af41b49f9865fc3f99795557f4a54a35895ea64141146c7b9d569c6455332255", "20b7557aabfa5ae2916ee0c62aa9622436ff91d48de3c05bec3345d018932359", "ec86c0951a797a42b9e86262d705ad22bd6ee9e2ee93e99aa4ee25be2302f0b8", "74e103631915eb8d240e3e49e6cdbb991e90c4e63f5170e3c9d80fcfac83f06b", "60e7fc3094f4d45dbd105d589a5bcc156eda7ce85b412833ad1814c285fcf447", "0b92d7e3e8601cd3e098d9aef3644d6f961a82a309fffe0f35fc55defc234554", "169ae1ec30b70da7312a5c26a20b224298426517ab531fedbac251f0ee0c66a7", "941a5b54b2e0086d972b9c9fbbb7b35b4f09ffff215350db7c7d936106e71592", "9bf591c94088316a7af2723ecf0de948ac5391d2733fa99405090525f271a586", "c8d2b40f5f211fcc6647a5996130a6700a853f57b69b0c0324c9e306e223080d", "cf5f0ebc244eb75f0ab56b53d4726cd216ee5f12b2a43d7526ad02a44f6d21cf", "b84fa937dffbdf326e75bdda06979676aecb52f547bd5bddd292432f8b2235b7", "df8223e5443ed0decb7f8f3bcf7e822b7bbd3bea31f615d99c26909ac6d066f8", "058b5454f29388a8f2ee9938ac49d54978d4f8a85e26fb6eff32a36d687dfd9d", "2a607304fd798c9323110219701ce4093d23948436abf556e19080be5f4471de", "d7422efedbbcf74889a3c156454fd595e4b862a7f8a56a4085d7d42ddf25c7f5", "bbaebd3379fc3855f6dacb437324a680a8237f449734ce6d84e7ee457555d394", "547ff32c8e709b6f2c79bf78b0c39d82cd6b845705be1c4263f0107b8b1f8ec1", "04d772ff7977051c7515e29eeafa283af843cbc0364c109ae6c04884df608d93", "c2d02bd4475c84222bd7eddd13743b319cdd0596cf4fd1f4303ac9a2d158f302", "baa9d3d9ed8d57f1d4b0233ecdf00ef8f12e28ceb764e62cece2afef1c358d60", "11561c1354e6ceaf2c269916bf21e2fed1acb995a609deb340cec867f6bf7005", "a4e312e7ba1376440061f3c3ffe529c16b64489862ffb979b904f491985de1a1", "8697beaf13c28aaa8e28f533aa366b2e36ca86c5bf2f0753326644f758e78383", "2df6365379f581d621ff7f7983e52bb56aa5e94f2d7c223139b2ba5deedb0b72", "c5076ecbdf40c2459d2572d39fbf5df47484d7bdd01cb40028cfe0014841b7be", "4a9cfdc73502ebde2d21e0fd3f7845551b6cda6740761792e6b25b640d79bd63", "9acf9e3003950a7d64c6ada0f09eb271c49d001ea5535873511e14f104d47db9", "eef11efdcf5e93f5092d1c1a3bade943a2d875c6ce6d5df947b79d74059744e2", "f81b769cd4a990a299bbc93dab42db0fe2361e29b1c9a8555ffebfd832a47f54", "1ad3d02bb56a5ff7be48caeeb115b8b60d49f6a75d24c3f7d62f03e52c0b4c79", "34f12737b51bb7d473473c4efe639924ba36eed355d82f49f855e5033cb64a42", "62d85a97676f846f13856534aace7092fad18200984a2073fefc1cbd53e9da40", "b111de9eddd25aba721b3a7072e013e520a056bb4988b43b978e0c3886264315", "d157e85c363ae07d99f5d67a05aca49e514ea3f6c93245b8140df1c59a2d4481", "3c843da29fc311fa067ede4e9ba21ffc4c1d4264852efa4887201a98cb2dd7ca", "6a47e89da6f11462ccec85e17c3f2918f3c01895a98a5ac7175fc23853497d88", "fb79dfe6a0c7e7730181a925d96032a6aeffa05a1dce3573edbcff1ea5a70485", "c1057cfdb742613519b354dbb7f6b4df064f0a6a162a3b8a465648c32361e79c", "276afa2c5639516411b0dce1ed0a3948404449aa1f223b93928930360c9403c2", "ea4bbdfe036cefcc7a980284de2c9a06d8901a7482d6de3131209d5f28fe2d60", "61c1a032870d29d35f9bdbbd424fb32878a0d7305a7b7efb7917aeb61cfeed6f", "195ea0ba5b20b512e2d3d0a95ca929d74978037a3da4e46453429b9e408b8c0e", "7711a69dd44656e0a2d436a7461d522dc32495898d12813d4232b7c841742ace", "e77dd35632a313e96b17e3278f842a5e6713cffe88d03424be572c105152fac3", "271ea28999113e8c5d97e81d515aaef8e8cff9fd56eddcb4d7754cc6ec4e6645", "813b0839dbdb183c9c12117aa05e093ed65f0736a55c4cd90bda41100eda8d07", "4374a594db6fdc41056d7972f16f30ec4ad907f1b610f5309efba3821cc7e84a", "d6d0e48860de861e776a3086f3add27664e1d60059a0819ce6f92ef6505e4ee8", "4f5e4be92b23f5c85f93eaaf05ebd2cd7083505f3781f08cc00f72c6cd81ba42", "706a9d21339f7a46616a7ee2b93bd239d60cab6578bc21ce1689c6198e85269a", "808692f8b8a66766b0e35d51914ba6da05fa8aa4aeb444db185e1739837201b7", "2b4bd21fe18147e75ab4ea256542706ad6208026c366edef82e309288ba99f1d", "cc48a7be63b79875b9af9c918cc3b53c96495c5c7feb19df1ea06515c2371729", "14983cbc30ace1be8b3643c8b1946b4146c66c120787fad6feafda7d57dfa5df", "394b68ff85db452c9a6d959bfc9e6ca1048732b877ff7c1f9ce734c45d440eaf", "18a0d1e1f43545879d288e4414dec8e131dd9b12832033a654195caf8ddf5d8f", "b9d95a8aceb68be75b52af6f1ae957b991c591229ddd65e0eb340ba804999236", "b7ba555945ab63b74d099490d133d939acee148bb107a63b08a4420454b49f2e", "cf7d650a2528d9a10660063bcdc47ac472b036dae40d21614bc3b09e7d9a261c", "58f6e76788003dafb5ffe2e53c833e50834673bee5ea413a199dd693570a5a41", "5e0e8a8c11fd5ecded1de07134b9a771b498983606290ef9307c4ea74b600063", "6d7dda6d6bfeb0eb98c05857ccf65fd4108b3ac4b816106f7bb257acfa627286", "c1c3eca5936e10cf35b0095fdece9c3b89db7bc41ba111a62fe1cdb02b5f0cbd", "b1ed54775944b3adadae917a719816d3c8874919f0ab37140963f398970d137d", "2dc49eba0b1437f6396800fe8497e5a400448bba0f4f026dc89d8c1106bb506b", "21e3cf8bc206b37f14cd9f38e71a0191ead881f9ecc1a97f60ec74df34300695", "fa15d7faf627ad39d75645ee3498b09e49845398d4c6f2a6fe72473dd872b6a4", "2b38c3c25fb9630ab4e2bfcc8e691d6d680da2915ca584bf55e04accf9fa7ffb", "c7c5bc5343bc8c660d448c68633fa22d093d0434d1cbb4831398b580283e33bf", "5f36db4a9ca6d0e55c241e38dbccb767fda7185e0efcb832e7d025b805fe88ac", "31e386a860732f916f2df8437707927501546b4c5ab0c878596adaf8efabf1c2", "19f9275da8cb4e9772cb7c57023773626de7c2628cb08dc16739aabf1178663d", "65661ccd635199980c217cc5b53bbc92043b210f220bb51ee4f87bb755d6f3ff", "fa88ca813525ff16f4d77514d4ea0b46ae575f9e03d2acb7338bdef89b91cbb3", "c338d1447a218d2148a066639aa683fcc8d6b39cc642f93a72d8d6b299cd3a97", "8330c4d23022fbe03cd007d06481479bcea7b5c883a599284f5afc14cbcf69db", "094fde71bc66121025486e133e60361060edf49ba1f950d89694122e93e14cf8", "fa4e8ae801af21c9f6793969c97c0ea40059c1a2d48c75e3f4189770fffc9ffa", "9d3aa1294707ceb8b0535f5ca01be043b876f37822e6e7a9333b769549ecafa8", "e0e52692cb5ee50dbba127d35a269a7f9e6f9cb2c8c877057b7de51d411327ac", "7a581b06430541fb488bb881e5c6726ad1842395cdf79fd1d1193ea928a1dc2c", "2851b3973b4e15cd2cd444e618122e1d2049ff8da05a21c417493055e5069b56", "831fad878ec4bd7ef4aee0f8531bc67cc3fa0738b38f9cd463e20050dccbea90", "94a6beeb766e3b41b374b0c53f41cce5ba069ebeaeb0447538f0789fdbdb68cf", "1265c37ffd7f426ca936267074dee858d97bdd9559dc8d112417c547acb9e2db", "f287fd754cae72b76bbf498f7168d04fed97acf3ddefaaf49a01d8ca9b22a0fd", "f62a6897b7db1da61d5440359591a61e6643a4290aeaaa62809d0d037ddcc339", "e762610a9b2bdba985e67739079e5bccf5b4d7444b28cacb982be252af6cd455", "708443b7cd9e9c852a43a5b531a8d8991d5b9b60bd29beb27226f1675a953755", "fddbad702bed996c336cbcb3d27fd306012599412536241b62441263d129037f", "835b818df775871bb54c288b71b9f92248523293e87995f9f836469a0db920c6", "cd30440cb7a15a63a01c19bbcc49aa949d74e7ca95f32ad47d86755839badd2e", "25f2731f2a92f4415906f8398a13f578f831fbba59b41f7a43a999ec5b7856e3", "dcfb4e9f5ffc53728b0c027dd42723567c66b226231dd95bb6aca7e18870f8b8", "b825d0e4e95aa9a6d024fcff8136065ee28f342de306d365d992911e048359f9", "c735a2c164a8b998598436b78d5b17f42226a23ac2edbfd95c5187ee0fa553bb", "3defe65b0751649af572809d3acacf9b079d1e80c8e60c1be4d78cb5df02ea80", "dfb69b349932772d0b1799214733ec907c7843624012ec3912cb09b46d477ae0", "a1d3bd4a019bf5ba9eea89bf6882e30f198adabcc855a054880edaa981d72ec8", "5d20ae501ff37072d67f8eec50afc6f6e60101184ee29cb639d1b02ec9e8286f", "da78df25f1bb04b14674d0d292ddba0414b68b1a1a5f307733b673d067fcda04", "3eeb688dab5f4edfd45935d5cf671c6b6b96982c8ad08a6345a2ad7bded14e22", "83e4240657f6777fca48791a38567ad0c67ca3a20c040d05fe2eae55e087e872", "b6af2efa8b1b07e003ab44b498ce92701c209d4bf3a65c2db1591eaf55b5dbb1", "ed123f36e0c90914b70e03a409a68fb73561a88fd41b281520ff376043b45975", "4a13f5080fc0db04b9f557dc1ac1e51ad2be00cb93125e6a6558b43b1e6b5423", "5f9ec43a745fe8348ae92afd07da4b4c602bb337dff09222815b69c9fd69720e", "fb754295e5082943ebfd708af125c7f2a7079c8b20e63b03212f18a85a4f092b", "cc59f26aa90f5c7460cac6e8f10763acf0b543f91621eab05d0d68964b127fe2", "500a353fed33c802f667f6d371a7afddadcd8933f73df7e51c29c3b35ed87e1f", "80123648f2ff50f03676f3bbefa3d51f6631382caf2b5c7e10ccd5efb330d854", "966ed8ebe7e45b278191808cbcc8591424f8d74f84338889051a3256bfc7cdee", "79200cb23cec6daa898a606dec8e3f34883b08618bea3a9d72a3f46a277d240c", "e9aa21ebc488bda683bcf6b10882de59537d69d604516871fe3012c3679a4113", "6e3735d0ec75336854aba87839eec401ab43e4c78fc5d552f67ffb2087f87998", "577e39569b81fef51afd288f8680c960375b7107c2a18a863f318d420335500d", "de167cd0333a48c03ab900053b0c2fc14db73fe6fbda467f4a5658699aa4d349", "ddc7f7f898f315329e3ad655f615bf7b354fe37a088760dcab288c6a7feda9d6", "4003ff5a84f5699a37272b8cfdf8af314288c8a1814daaf8470c723b15416919", "92b748d03ef53670e96fd1dd4ba6d808219b01964aea8daa4905c14aecc8e4b6", "d176745fbd8f9f7a228a0646cca6ea19a69eea2287202aa380fdf6effd691d06", "5a7f5e0778a44125e3445e2cfaeae7dbce5ad67a36181941148b52aa52eb511e", "91b479a3c115c3dc3558fec414d5d07e667563572a4e1231ce1d6650dbbed036", "555c57b2b447ab63617f1dbe0ea8146d1e12e4c906187fdaa37b8705a07cbcd7", "fca257881c9ea02228c25d9d52ab50f1e3fd78a897153df6db09888337ecefcc", "4694fa164e428e22ebda2baa70136281c0805cc893ab5c24052cfd641b3ddde3", "edfd1caf92504f51e07c613099c61b96ead81f1f529ea84ef743cd64eecd28a8", "023c979ad49584d0b27adc989ec7f3183de7195932e3ca9c9d945fee044770f3", "bc9c200cc6782a6f21384be27d87944c65cd958170bdac3ebc2769cb93851058", "de2a31d89ddef07c745d249786f1f288e95e452c26908b637e57591988ae7e5a", "d83fdd896f553bf3555f0f5e6abff1ef4d9d904c493dbd3ab1db06404e76fdca", "b4953979df25c8afb092e0b24c6caa0048d52615b5e88ae347defd082bb3f741", "055911f58be42a491c49b1ed0c9c9ae2fef1a43dce3892361927f73d3d479568", "8b7087beda2b312247c7e547856b7f83974324380be948a798a28744838b640a", "c1002e9a14139d6225ec37520a6c2c92624e1213e5209745e27682804648404f", "c9afb36b81e19acaaf502ef027b9dbddd0d38537bc1410558b84f91b5fb2af39", "3df9bfc062c570587fc0ecf288a8e237aa476828eebb3781f80556500b75b545", "f649e4784cbc1924e1365e744addcd58098999fbef1ce178ad00b1203806ce32", "0ca3a9431b52fb1ced8e30577a0c9f067e6585dde9db9d58fe82ee0fcfbacc31", "28d4a15cf872a0558664f77aec78638de10b6c746e47b890ce9954098398bd53", "1c5ce85e8c41ef9fe877d6fa3b99f265cc4d2ec14a003090348181ca16730f0e", "b30ebe2a377e8889040159ba8defdec682d6a5982877ea66813e44acd280c878", "7c6cf00e561e083de10a15fd08f9ef6da49a816033a157f37287664cd6a7a6eb", "f4dc7e3f82f64b565866337f6416fe3365a438455590d27cf863395dcd0f3c2e", "4dd18b5317c5552e6d2e75dca7c20dad47f0e79078c9618141e7b1355da58c71", "d004a2e8a83ea88930032b539036dbef848ab759ae2520fb622cec72ca51e275", "161282c7ffbdd5be11f5ad5bc437fe457f9fda77e21adb313dc6012ab6331b59", "78e42e6e1f3bc0507cf44496e1b1ede66dbadaa7ff9cc2612005753b07d42e49", "d4a692f7828db463157167f0623486ff58ce1f972ccdc5b5846fd1d7ccaff99b", "12c67e2062473b0cb178a236b5d01d9f51d84cdb2a789a5d1103f0aa77a5eea1", "cd08dd0062d42c448fca3efc582c4567f18304a597f5f750589025e0c6dc5296", "39e9b3d48d82cc10ad26739395aaf98324d41f616420bf2409c26f9f3aa9ad49", "70d2b96043fbcd6356cf2d1bc56b6ed69430dfda3b41e862849eb896f2198594", "923539b7f927c0274a94ed82e86727e6d68622a829b38e9f4bc3a72a88eff9ab", "d85db0ed7107b6da291a06568b3cdcce9ddd9f8bc5e47162c03a10a5f29abc3e", "0079169f5a83e8b611dbe72175aca9f94a7aede0e9f18b9374db1a7369de8513", "49ab054343c4d2b304236627a07858b78de7b155cb9aabacb2e35d208afee72d", "027c4b4fe643240dd97648ed6a3a5d85b8f2fe12517370c0616fb890ad5a0b98", "2a4cc59a1acf7ab0a45e98bbf76dc8a1a8ab4d31af5cd3a0dac7c4a3d31c0982", "a6895c95a157efdf3300dcb1053e01e4b038cb50b0662751a0988db763b3787d", "dd3ec8a6c639b1904f75f701ccd2ee21ed426f9afa0304a3a9d48301bf78402b", "fb0d44f2fb58f384fdd33a2e501d06116a6d32132ebe54a576300fd795a314ae", "21c318439215a54fd39e4db47bbab734810f25bc9222efb729b6e81c3dde6db3", "ef3fb706840292fe42e9686dcbcb82a6791e266a9d3fa4033df1c78d63a69604", "a2a31e2a8651e717074fd976d6ad95d62de28a819f2f4e096fd9ff30ee33b06b", "f7336b97f9479937827842f41af222ddf365cfeae9f2877390fc29e7da1bcf5e", "165f8b5a33514db57015ed122c45d2e5f47a3c2fa5c4636c8ccdf20c3680c2e7", "5742054d32d13cbb0761be3f047785f91dfe821ef40696304d0c4dacf93503ad", "6afa6a7f42714bcd1227a63b0171a3847a558c553a83ceda55eaf1dd767c3215", "42db643096b6017d0c06884c317df5af8c6bffb4ce647727656db1d4b707de71", "3a3358141dda3d35f52e32d9a703689245098ae61376d50db344d7ceb2c213fd", "bc1ee3bf60ca23431a3a6a506bd52e52f9c3c822c5205877b4e10412e61d7f76", "e9679511eeb02571592b52a54cec4bd4f15eaca31246804e9ab82e7d2e12a6e9", "79009c93f1c1dd34a50e079376a0b3bee4df6249cdc41b236b96a3be547a6e39", "c5b8c8021a236b8b7f341826c981f1be4aadc072675be33b80d06d5195533426", "678cf2900fe0749230ba096cf8966f1198de386920eaaa3d13abc705c33e1345", "008b0db4d25431b5a1a87b92a30445ecfd75e10e4a9ed54e01bc7724e0e4764f", "f140963ab1be1ce7017220578bcf8aa69664240eaa0ef40d15450be80babf996", "f0c21df14e960b7cb63a106149ea68be9691d1c8f0247e63f0afd039c69b35e3", "b30e726f497cd33119e43f14b05050f78534d9738f872c4ec087ea65d1647795", "6d853dc1feba4c93fd185e90be3aae27a40191f1113102a0310abac6c0da48a6", "acc5a085fc12c91bba07b6ebb651111fdeca1b78a226dc9f7438715ddd6b6754", "86cdb2493926befea4a55f31713378eba1839699f1c66d3fc46c909df38bc912", "06b91270143cdacc94cddf46b99d60463b96c529c75a3c04cf7101c7a44b0bf8"];
var blocksTransactions = {
  "15895730198424359628": [],
  "14746174532446639362": [],
  "15249141324902969334": [],
  "12360802297474246584": [],
  "2565729258675312304": [],
  "12614646598841308905": [],
  "8274406339991077743": [],
  "1661383348822169561": [],
  "15467742607784975524": [],
  "3665174254391236833": [],
  "18033869253067308940": [],
  "9121030900295704150": [],
  "4296553458016414976": [],
  "6837659293375391985": [],
  "16540521480028827748": [],
  "1485997193168364918": [],
  "14159698257459587584": [],
  "7561147498738550191": [],
  "6247200360319694668": [],
  "7363268091423233950": [],
  "8738693892321921533": [],
  "9014317427571908796": [],
  "15519361274991733193": [],
  "14013227271822852495": [],
  "12603272471546364995": [],
  "1944108005996955253": [],
  "8469356042757089608": [],
  "3433946900869474802": [],
  "11257633501887013743": [],
  "2997965849869498353": [],
  "9196430932294555781": [],
  "6730395143580220680": [],
  "5806654366498055250": [],
  "13290912469992409149": [],
  "9502002558776276513": [],
  "330791153715252718": [],
  "12084096509112875921": [],
  "7079194814443264009": [],
  "15946707936026547597": [],
  "1641736062116508620": [],
  "5245034769798442586": [],
  "4073147595542846301": [],
  "11129434526540201266": [],
  "15355810214343508168": [],
  "834201289153220685": [],
  "4785149476172130294": [],
  "9808224912335721998": [],
  "11229968119222422821": [],
  "6766557974469507237": [],
  "2066948671330348076": [],
  "13308773643111727094": [],
  "15649739201370841265": [],
  "17287484123727410951": [],
  "1739406121453748889": [],
  "16969775483726255451": [],
  "5174570296595098048": [],
  "10957882104586895269": [],
  "16222316251056394079": [],
  "11019993339496601918": [],
  "7648775833276915174": [],
  "5947225658884952613": [],
  "17256370470460685782": [],
  "5681801935518263609": [],
  "6853934810393582972": [],
  "621694479387726255": [],
  "649083198759873217": [],
  "4052333663180604671": [],
  "5348794590580429562": [],
  "7723209448992965570": [],
  "15836524583901486981": [],
  "12478859533758330380": [],
  "13701809340863213986": [],
  "17417028847837598792": [],
  "14220651316552198137": [],
  "13101468344291730322": [],
  "6671890826474701031": []
};
var exceptions = {
  blocks: blocks,
  transactions: transactions,
  blocksTransactions: blocksTransactions
};

var version$1 = 0;
var totalAmount = "12500000000000000";
var totalFee = "0";
var reward = "0";
var payloadHash = "2a44f340d76ffc3df204c5f38cd355b7496c9065a1ade2ef92071436bd72e867";
var timestamp = 0;
var numberOfTransactions = 52;
var payloadLength = 11395;
var previousBlock = null;
var generatorPublicKey = "03d3fdad9c5b25bf8880e6b519eb3611a5c0b31adebc8455f0e096175b28321aff";
var transactions$1 = [{
  type: 0,
  amount: "12500000000000000",
  fee: "0",
  recipientId: "D6Z26L69gdk9qYmTv5uzk3uGepigtHY4ax",
  timestamp: 0,
  asset: {},
  senderPublicKey: "0208e6835a8f020cfad439c059b89addc1ce21f8cab0af6e6957e22d3720bff8a4",
  signature: "304402203a3f0f80aad4e0561ae975f241f72a074245f1205d676d290d6e5630ed4c027502207b31fee68e64007c380a4b6baccd4db9b496daef5f7894676586e1347ac30a3b",
  id: "3e3817fd0c35bc36674f3874c2953fa3e35877cbcdb44a08bdc6083dbd39d572"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02511f16ffb7b7e9afc12f04f317a11d9644e4be9eb5a5f64673946ad0f6336f34",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_1",
      publicKey: "02511f16ffb7b7e9afc12f04f317a11d9644e4be9eb5a5f64673946ad0f6336f34"
    }
  },
  signature: "304402205f6acbc1b91787b97a02ce8dd2f511ec8ab8786a9e3ba058173a94e80a1b4d49022044ec8f8e7a14dbb661a3d9803484d220a5038488b99befb43b6a22a5b7c499d4",
  id: "cbff39a30fea596d0cea50c78cfbb23a6d8546ef1487abe7d5023ae949357832"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03697abb61ee85e020a35a1d2701112e7e16477ac9d2eb2e8900a27995edc917a2",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_3",
      publicKey: "03697abb61ee85e020a35a1d2701112e7e16477ac9d2eb2e8900a27995edc917a2"
    }
  },
  signature: "304402204cff61e3c4f0aa15a31f4a84611b7ab555a2b15ebe7012b6cfc99f711842277e022040dd69a0e6ba7e1b8be9d7dc7df64f0f23bf119f01e9babedba3851d65ba3263",
  id: "bebaa71c139fb53d5453833ac9c8f1491bcbf96be4d10ce5ea1bcf5e7f86e07d"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "027e2269d8a770343223bedc49bab31b3c52fb4c1df6627153e6374ac23e2d878b",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_4",
      publicKey: "027e2269d8a770343223bedc49bab31b3c52fb4c1df6627153e6374ac23e2d878b"
    }
  },
  signature: "304402200f86542051d29cf0c9a2dcaffa1729b7d59e85c9c01a19d00b5cf2d8193c160a02201841255da9bf8fecc6c78b868c7ebb3b450372a4fffeda0b31bdecf344fb096f",
  id: "44a36f5fcc58f2091a25c1346edf2a0a707e5d58c89be2f814f1c658fda7c559"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03858d4d3b77c7c227f6fe3e18b5807aa476828cb712663dcd79df87e439cc07c5",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_5",
      publicKey: "03858d4d3b77c7c227f6fe3e18b5807aa476828cb712663dcd79df87e439cc07c5"
    }
  },
  signature: "3045022100cdea6cbd578c8380c5ffc4635af5c9cf9a06b8ce8eeeb3a03a93936c60f0b67a022027a8efce7700d9e4192f50091cb5d72b8c18ca867df92d1d9cd40dc3475da4a2",
  id: "e12ade6f3832d1aced7ddb25bb63e06efdc1f99e3eb16c501f7cb790b107a09e"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "023918d30ff448ec897e12b77ccd529835c78aee07db1682639320c253cc21a1c7",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_6",
      publicKey: "023918d30ff448ec897e12b77ccd529835c78aee07db1682639320c253cc21a1c7"
    }
  },
  signature: "304402207b6770015a921fd6ed1d0e0faa06ede9af7e66925a9dd2ddd1553e48179cadf9022044ecaee06f0661abccdff90be1157c5410fbb42ed8e67db413201c61740d7e39",
  id: "2c5969f690dc7d8e0c6720405e172b4ae06ce186f7ba99972bbe7dd587b3b319"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03b12f99375c3b0e4f5f5c7ea74e723f0b84a6f169b47d9105ed2a179f30c82df2",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_7",
      publicKey: "03b12f99375c3b0e4f5f5c7ea74e723f0b84a6f169b47d9105ed2a179f30c82df2"
    }
  },
  signature: "3045022100899b81a7fd3683fe1cb60e8ea070dda891ed22e9ce386538d1f57a79f801e90e02201592f75d7d1dfb15da63c27d190d915fca192e9d69013af7d8087fcc7662a13e",
  id: "5191f5fce08b980f0004f654f0af58eba43a112c25eac53e29778239c7c2b8ee"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02c3d1ae1b8fe831218f78cf09d864e60818ebdba4aacc74ecc2bcf2734aadf5ea",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_8",
      publicKey: "02c3d1ae1b8fe831218f78cf09d864e60818ebdba4aacc74ecc2bcf2734aadf5ea"
    }
  },
  signature: "3045022100b71c3d87f13aafa9e4e7ecb0293daa2f40ac703a8678f58c3a3c04c57845d04802206b0c9e48051b23380c158abc441372f4074b1fb76040fef0a008fd9a9a1a948b",
  id: "269b9bf296615f4cca0812f3d15ef8f0afec02b123088e46008ce4a353def912"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02be5acbe305bc5382ebd7998f3f42744c793245f37a645916771ff123fb7b4ef0",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_9",
      publicKey: "02be5acbe305bc5382ebd7998f3f42744c793245f37a645916771ff123fb7b4ef0"
    }
  },
  signature: "304502210094b62a07ee25d1058f5eb2c71d82acf55f62b787cb017e821eb22885f16c81bd022074d2f06ba34771e2fdb65b5d46a8ad69d05e3e2500549c8c9dd978503b8ebf2a",
  id: "588c80d5df11abff1247672f875a9c44c36b45e742187b9071f1a9e04a1ec3b0"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02e9ef70986ab6de9dbd5e1f430018bb8dea671d30c1e34af5146a48f2b73d551d",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_10",
      publicKey: "02e9ef70986ab6de9dbd5e1f430018bb8dea671d30c1e34af5146a48f2b73d551d"
    }
  },
  signature: "3044022038243ef0738d6edaf8313fd51bc0f1482a055880e1a37e0d28f13e7287d3f5f802206e3cc68b90437b8b879a83c490aac772d89c8f15c28011b7409545c9e934d922",
  id: "a11ff1c1ffae49f6cc08f1b36606519f215f3ddaac5dca616f3e0858f33205e3"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "024c149adb250db9d314462e7e3628c8a63d263812d85306a530c3ee1f5ba31618",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_11",
      publicKey: "024c149adb250db9d314462e7e3628c8a63d263812d85306a530c3ee1f5ba31618"
    }
  },
  signature: "3044022001e9b6ab03157a9ab0b3a882e27576bb496b0a749f2b4c9f6bfb77ae3a18d72502206f4bc9e9f4375dae548c9d480b4b149af35a3625b1aea1e9298494dcd292b935",
  id: "e5034eeb44b0762a884d346a0d8806e0776bf7194973d978e07a2247d457b6c0"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "022eedf9f1cdae0cfaae635fe415b6a8f1912bc89bc3880ec41135d62cbbebd3d3",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_12",
      publicKey: "022eedf9f1cdae0cfaae635fe415b6a8f1912bc89bc3880ec41135d62cbbebd3d3"
    }
  },
  signature: "30450221009bff8a22cdad663c21f587e828cf774c3b399a66fbe9a4161f22a932f0a389bb022045b1ee28e49cc95d280e4d07bc044459381c8d7dfbaed94e1bac2e22ece22f67",
  id: "831e9c84af1e61afb18fc7561681558009b51206e920495b2b708e9f65f261cd"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02bc4cfee3716fcf191caa51c7bd2205a796b504b9ad5461864681cf1b33912003",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_13",
      publicKey: "02bc4cfee3716fcf191caa51c7bd2205a796b504b9ad5461864681cf1b33912003"
    }
  },
  signature: "304402203ef34aac4fb45505b2e869e1a1f075a1967bd7f7fdb95362b33bc30862007517022028f65b2409c64c0832f1874f5e7e6173b107bff4f3737fc41c2042cf1fc9370a",
  id: "5d7cbc26b116c9daefe94965b5a64e34fd6a7e42de3619a71d0ba5976976c966"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03f3512aa9717b2ca83d371ed3bb2d3ff922969f3ceef92f65c060afa2bc2244fb",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_14",
      publicKey: "03f3512aa9717b2ca83d371ed3bb2d3ff922969f3ceef92f65c060afa2bc2244fb"
    }
  },
  signature: "30440220763f33a056e01ee9749e60a17722138dee67b88cc1a54099e30939787ca6890c0220606b4e77d517b9e2d3f2fcf92176f081f3ce35c76ea4dc838bfe5f9122635bc8",
  id: "8ad18dfd85c61f3fbbabf8f3a0363cee55966c2cad784f96406aaeeb8d87e8ac"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02e311d97f92dc879860ec0d63b344239f17149ed1700b279b5ef52d2baaa0226f",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_15",
      publicKey: "02e311d97f92dc879860ec0d63b344239f17149ed1700b279b5ef52d2baaa0226f"
    }
  },
  signature: "304402207f764b224b3baa195c4385ed608ff2ae4516f00a0d26c370fbe8d2da246f31fb02205be484657a0550bbcf334fe20cca1e5d4b709d7288d497fa6f8ebc9dc08e4d91",
  id: "75604d72872f730d7c38b9d73c916e4a532408ea0074850a581f4b28bd62acdf"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03c57b6a3eb7d01ade51f95c8ae4e8ebeb7ca7b8422ab0fb2a236de5d1a5bc6a1b",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_16",
      publicKey: "03c57b6a3eb7d01ade51f95c8ae4e8ebeb7ca7b8422ab0fb2a236de5d1a5bc6a1b"
    }
  },
  signature: "304402203fabd59dfcfdf9a2789b08b3fa44685f0327e314af34c61a70ae0a857a54cb7302207a87e1d17b1526a16dad101bac823dd6c3075b9a65ea0045e9b60ffa0dba51f8",
  id: "d52d2fa7a2dde4e8f76e9a4d87c9b85100390e85e502f7f53760b062e7c58b2b"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "020aac4ec02d47d306b394b79d3351c56c1253cd67fe2c1a38ceba59b896d584d1",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_17",
      publicKey: "020aac4ec02d47d306b394b79d3351c56c1253cd67fe2c1a38ceba59b896d584d1"
    }
  },
  signature: "3044022036d24450a81aa6343f4e7911301f8fa1e8a7a4d439ad140035f5033841da95a302206fa9f1721e1fe5985dce006270ae5e25f4bf128b8d007350caa7041252a68356",
  id: "d11fcfd463a40465ed61d8d624f0a4141c7a66629d0fe36d40d1b181abfe7673"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02ff046250cc01d4ccb74fcf6ff9b6977f5a67539cd9c461f9d41436677f4035b7",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_18",
      publicKey: "02ff046250cc01d4ccb74fcf6ff9b6977f5a67539cd9c461f9d41436677f4035b7"
    }
  },
  signature: "30440220347cba116760fab827b31ebb2169679cfdfbe6b5c104ea74a2e4e3878bb064e3022015a44c54db1909777d2d4023716de8cc30484b0659d9776400ce9d7ccb84041b",
  id: "4933cee8da17f173db0dbbd4746dde532dbadd50060dda1d571e2ff918593a54"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03d6ba3d1132d7a74bbe9da3923168aad70146b5646c6d6505bb7f500b211b332c",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_19",
      publicKey: "03d6ba3d1132d7a74bbe9da3923168aad70146b5646c6d6505bb7f500b211b332c"
    }
  },
  signature: "30450221009aacd21661b435f58c40969cbab10600c504fd5d705ee174cb9177e36f893149022049870b13972d9eaa6a3a4335d892ab2f0620c231ce90d0a9cffeaf40f9a3093f",
  id: "8cb3517ff945dad8652d439c6c4db47a040aa41359897f45d6089ad325f4e239"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03ef692bb144c368b4844ceca3ffd30fb8c82b97b5b40220473e9009925637e9f9",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_20",
      publicKey: "03ef692bb144c368b4844ceca3ffd30fb8c82b97b5b40220473e9009925637e9f9"
    }
  },
  signature: "304402203ea9c88ba6bbe508e1753b77593be7213b4fe9833ea5b09168a4c85575b5b1a702205cde0fb97c4786d9a87c3afdc3a1ea0557bcb00530f33aaeda67fc544f39e3ef",
  id: "1bc38d97669d9bab1b4f59927d1f752732ac400c80cc3e2972a59c4dc1f59423"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02aabcdb8511f55b6a28593979b726ef55b1f5bbf16a83205c2e2bfc9d8c2909e3",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_21",
      publicKey: "02aabcdb8511f55b6a28593979b726ef55b1f5bbf16a83205c2e2bfc9d8c2909e3"
    }
  },
  signature: "3045022100ff5a0dca3050e01b69688c27ee08b9954b9424354fd1ba5d9f100d982d938fc402203159fecb536b4a4dcbb262e37df5649f1497ac2a5e58f54f9f2a1a5b2fb981d0",
  id: "8232a75bf0a7e2133276dc9f66c969ab8710105b5128c293d8a51efe5328f99b"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03b1e1d0b5e1dbe57109d78119785e8c5985a47e282a048bdf6e8b1fe61b7c5c13",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_22",
      publicKey: "03b1e1d0b5e1dbe57109d78119785e8c5985a47e282a048bdf6e8b1fe61b7c5c13"
    }
  },
  signature: "3045022100f041225c982e862436317172c593d016e6f1f6d1f5c732d3ba1806a5956015ea022079bac9a025de182905dd19e151f8414051227387e42067089c5017371585fa91",
  id: "c13a52286d075cd6ab637047dd7512514352fe25d32fc721d8cb867fd620454c"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "030efa0d981385ad10d237588ed67eee4a245ca552673b7f137cc2e9c9dc7143d9",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_23",
      publicKey: "030efa0d981385ad10d237588ed67eee4a245ca552673b7f137cc2e9c9dc7143d9"
    }
  },
  signature: "30440220478da5abd03f51d3a1b2313027624ad38a3af2e832fe4998fc70524a2032d14002200f4ded96178002713f05ef0bd80b2f5a96182ee5f9b2a4508c663c2c6169aa82",
  id: "bc9ab5bde4513df5c7ea88d2b625e2b9dc33681d3b6ac8c2e620d92032f35588"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0335fec08c867b80e3b71545be195e1b9876b2040d5393fc177b6edca78bde8e42",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_24",
      publicKey: "0335fec08c867b80e3b71545be195e1b9876b2040d5393fc177b6edca78bde8e42"
    }
  },
  signature: "3044022001a806c7d5a40553fb13a1fde597f53a1904229d3c2ffba8bf9c86c10f436170022058403f447c5d3aa98af0e4fd111c541e33e5d9f271093fa8860ff131ed6eb6a1",
  id: "f585f7fc3b709c91128b1c2c09fb6b8d43ceb6220b85e5e1257715de748eb6d7"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02a5522a8cb7bc98f8adb024f92d8455918e18d3280e427e7d73d40a03a1698b96",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_25",
      publicKey: "02a5522a8cb7bc98f8adb024f92d8455918e18d3280e427e7d73d40a03a1698b96"
    }
  },
  signature: "30440220116373ef6690b97809bf2063ff3a617a5ed8ac351978ad2ffe8b2424c8f8727a02206c64f816b524f388c878fbc51a0e1229fe8e0cc774964711581055fe576965d1",
  id: "b07658aea5a70cdb8cb9001625979681d49a8b1a6989e64a5098b959a6f1f76a"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02951227bb3bc5309aeb96460dbdf945746012810bb4020f35c20feae4eea7e5d4",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_26",
      publicKey: "02951227bb3bc5309aeb96460dbdf945746012810bb4020f35c20feae4eea7e5d4"
    }
  },
  signature: "3045022100fdf80150b0cc8956bfc2cbed753a52343b9b95c858620c3e59aed44630114a9e022041a34e074ae8e36ddd7ec352837395733f93eab9a77f3e4635c6739c54d22048",
  id: "f60145575d1dfaaee2d8c7927c30bae6ba7c82c4381ffef374b7a09388998052"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0259d9ca7922c277b0e7407a88703bbb98f5da43a335b0eefa6c4642f072acfe79",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_2",
      publicKey: "0259d9ca7922c277b0e7407a88703bbb98f5da43a335b0eefa6c4642f072acfe79"
    }
  },
  signature: "3045022100e90fd1d6bc5572317f97de693c8186c550c81e5d2ab9314dc56572984d72967102206fcb2d63ef004a9356048ec44a083886f7ff73af5fde973da1275ef694244938",
  id: "7d1409e3032e05f3571439148ed8914ec9d7cd11943bab4170823049dbcda9ba"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "027f997ab2d8874c8f06d12ef78d39e309ed887a1141d2ba0f50aec8abffaffcde",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_28",
      publicKey: "027f997ab2d8874c8f06d12ef78d39e309ed887a1141d2ba0f50aec8abffaffcde"
    }
  },
  signature: "304402203aada267711da498f7c6e3714d51ae89c0f4dffdcca85740eaca3994cb36b08602206b7c29fbfdae516c5cc677b8932f9cb2112c7f231abfdd040148ddd6cbe930ed",
  id: "056716dada5916f4f8e108a49a93d9b5c4d2da5773e9d47ec81509624a46e638"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02fdcb7706624aba3c050c19bdd05f74a0c746614462584dfbba3705810ba2d69c",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_29",
      publicKey: "02fdcb7706624aba3c050c19bdd05f74a0c746614462584dfbba3705810ba2d69c"
    }
  },
  signature: "304502210086fe27f8a2527269b59728ddce8cefb41c4b11efb49cedadafbf364ff972beba02204df3a83777933f4cb0941748e148a3f0d2b03b5e1be93ff429b1108ba1791c04",
  id: "583e706ee292251a32526a647576a4467162ebe4dd61fdf4e9bb878083745c7d"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0212a11582a28f178b906edbf8e8c447ce1ba86041ee731e595ae4d39ef034c2ad",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_30",
      publicKey: "0212a11582a28f178b906edbf8e8c447ce1ba86041ee731e595ae4d39ef034c2ad"
    }
  },
  signature: "3044022065af2653051345aef10cebf5f98210f228af00768b094eb0f82a5a0765180ca202203c87461e7e40f17273be4638f604b01cae72c47ffe8815917d0dae6f6195709b",
  id: "4041e3a8e3760e40e7b3d0269935b7894df156dbdd08092a9dfab32a00dc0572"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "027b320c5429334ecf846122492d12b898a756bf1347aa61f7bf1dcd706315a9fb",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_31",
      publicKey: "027b320c5429334ecf846122492d12b898a756bf1347aa61f7bf1dcd706315a9fb"
    }
  },
  signature: "30450221009c0682b562cb4405cea7e522d7b98b628af4b33c1bfbea354d67351a0d3a066402204e1c060c533c8a8896dbfd5e6219e2a0e7d96c9d40cbbb23bbdf8bc6c0450bb8",
  id: "ffc28e2cddf4494fa4bdebd90e5b8fa41253c1faa02a95eca0d7ba6bd04ca616"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02ff842d25fc8eec9e1382e6468188b3fd130ab6246240fc97958ce83d6d147eaf",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_32",
      publicKey: "02ff842d25fc8eec9e1382e6468188b3fd130ab6246240fc97958ce83d6d147eaf"
    }
  },
  signature: "304402206f3e7f51cea90b6180dee3dbb80a0e7fa5f06ab6266b73ae8f1cc05de077247a022017d5aa06a94eee0c3be3764fb644c02db8a0367010e726c646e75df3e41aecaf",
  id: "062b54b6fc5abdc8e7d57a98c9a8f2d0ddfd42c98c640a6242c9af10fe792d68"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03a3c6fd74a23fbe1e02f08d9c626ebb255b48de7ba8c283ee27c9303be81a2933",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_33",
      publicKey: "03a3c6fd74a23fbe1e02f08d9c626ebb255b48de7ba8c283ee27c9303be81a2933"
    }
  },
  signature: "3045022100e35cca00771ea7b1dfb141681aebfc30a698976203b2429b21d296980f278b6b02203bef1d5571dc1109fbf7eb956e411bce5d11ae06557d232a6fb7c5e8055a489b",
  id: "d1955dd9e4ebafd3c33fc2752ddeebfb5066c0e9c06275e13b3904d2db4f59ae"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03b906102928cf97c6ddeb59cefb0e1e02105a22ab1acc3b4906214a16d494db0a",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_34",
      publicKey: "03b906102928cf97c6ddeb59cefb0e1e02105a22ab1acc3b4906214a16d494db0a"
    }
  },
  signature: "3045022100901a161168ef69bc7b35610809e892d0aafe2b275f2f03752fe46d54301bd16502203b143cb62708efd18ee11cf5405a05023935ffc867c39b78397dced75aa7b0ab",
  id: "a9a246807ec148536909e633b7422dc90dc8ffe858b3146e0b3d870100ebc488"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "034ecce71a7690b1c314f71789fb32373afb79fef870fa6ea2843be4c54812b0e5",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_35",
      publicKey: "034ecce71a7690b1c314f71789fb32373afb79fef870fa6ea2843be4c54812b0e5"
    }
  },
  signature: "304402200e5bc71301bef7a018e9715f18cb705d59253ecb9ba90dca9846272f70168b6602206d5cd8f334883480502e565b1602daa4c6168f631d449faae098e773305386f2",
  id: "e15317b81533925b0c39b50feb18b865f7122621a33266f606787a2a6e97bad7"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03f89a2f86fe683dbbe4856a43c4c326fb2938ae2647fd334ad33261c7c2dee265",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_36",
      publicKey: "03f89a2f86fe683dbbe4856a43c4c326fb2938ae2647fd334ad33261c7c2dee265"
    }
  },
  signature: "30440220310fa69482a0cea90eb033c258b1f6f012799f76fbe17abccc36c55fb33b00200220287647844189029eed0f7b30e28759d346e6cd212cf1ed20bbb3457e066f8234",
  id: "b6f546a0017599ca64784ee5fba9fa524fe861ab1a9e54249d3a87c94477f5bd"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0349e7e2afb470994a8323e9623a6dab227c69d5f09f1a59991fd92880123ffe75",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_37",
      publicKey: "0349e7e2afb470994a8323e9623a6dab227c69d5f09f1a59991fd92880123ffe75"
    }
  },
  signature: "3045022100b38c62db607d567ab0e9180dabc42662ad02b1ad86ec962af54085403bb4405702203b8b95a3941e8a825102a55af6c374364efb95f807cb146d318c2255379c132b",
  id: "1df66d5b41a604ffa298cac7a60a3cf69f8c5fb9f6e8da67cd6f8e6fcf6807c0"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02237692aa37cba4fe67d557973ed610ea175ea44d3f5cf4c3ce8ca7553ca1de17",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_38",
      publicKey: "02237692aa37cba4fe67d557973ed610ea175ea44d3f5cf4c3ce8ca7553ca1de17"
    }
  },
  signature: "3044022022d6b16ab19faf9d9a86bf52e6cbe3568f2c3be19169657b49cce412b2287d4c02200ba4ec759b7d1e2fdd268111fea5ea49d54f2c5d9c04723e4b4fa64025362dfe",
  id: "3fbf00f4d88c94d736bbff3ef4722183c9b2993a0afc2b992a590b2cf93c5d64"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02ac8d84d81648154f79ba64fbf64cd6ee60f385b2aa52e8eb72bc1374bf55a68c",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_39",
      publicKey: "02ac8d84d81648154f79ba64fbf64cd6ee60f385b2aa52e8eb72bc1374bf55a68c"
    }
  },
  signature: "304402205097c9e4a3e3020f13753bd9749cf7263e8aed0165582f449da057a4f46d14310220699527199ff99af5ab3a81cc13d8100ae8dc85c84ddecbb2211daa7ccaff9361",
  id: "637aa19839b81f70c84ebc0e1611e18a260a55fa55af363873f7c2401a8ac18d"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "026a423b3323de175dd82788c7eab57850c6a37ea6a470308ebadd7007baf8ceb3",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_40",
      publicKey: "026a423b3323de175dd82788c7eab57850c6a37ea6a470308ebadd7007baf8ceb3"
    }
  },
  signature: "304502210099fb7d275d0e4a42febbec6279f853df99b6d4423df38df484511772e8af7e44022011933c855a3253eb1c68ae7d6c6daef095a93fc55942b77cb502f070d1559bee",
  id: "ef351a3237490b7b09d74f37340aaa8a589adee9ded564974ad230f7ca0e0aa9"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02637b15aa50fa95018609a6d7b52b025de807a41b79b164626cee87dd6f61a662",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_41",
      publicKey: "02637b15aa50fa95018609a6d7b52b025de807a41b79b164626cee87dd6f61a662"
    }
  },
  signature: "3045022100923763d4651f207103a4c8c5d7cb40cc9423b66d03dc155b320fda25b6c24c860220088a9c96d50a8123856be4762284f0390dc0775f05a1bf40c54fe034c74c6cfb",
  id: "d1c6a20ba8d77777b0d3f48bd0c0c0b1dbca53c602a98645ed103ffb7a09d816"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0346e1a1b5cb0720e863e8cf8a91dc8ed827e09fb4a4812f9f4d51f606e5359516",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_42",
      publicKey: "0346e1a1b5cb0720e863e8cf8a91dc8ed827e09fb4a4812f9f4d51f606e5359516"
    }
  },
  signature: "304402202e2550948f1a31becfa76f7fc1698313cd597148ce9530fec24a03bc8b3b28d302203b75f4b837b83602acb796baebd684d8807140a445277728987325ca1d4f32a7",
  id: "0240a4a290d3973ebd34eee830567a6c8250229f5f3d67cfa7400787bfc5f158"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "021b0f58eca7f123428a8647ffe0644a9454c510f066d3864c27d8c7ad8f5a8aa4",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_43",
      publicKey: "021b0f58eca7f123428a8647ffe0644a9454c510f066d3864c27d8c7ad8f5a8aa4"
    }
  },
  signature: "3045022100bd702d74bc7a476bdb8b2eeac513fa57a2a06f7a3726933c0edc13413c1fdeb90220014682b24f98f2ad79fd53913ef4e691c4dafb5e00535c1c220529bcaa6e0998",
  id: "4b4c0d5999f70244ff66b14e77bb6f1ae3279458e784222f9b8a81b3915111ca"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0335238d54c6ee73d79769d4ed43888d9b18e38c3594e656bb5a5544649d4f5ffe",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_44",
      publicKey: "0335238d54c6ee73d79769d4ed43888d9b18e38c3594e656bb5a5544649d4f5ffe"
    }
  },
  signature: "3045022100d7dc0aceb038ca7a910b9337cc8fb325c9523874b4bb79d8491a6d5d413391c1022008c6f2b0bc8ade96163d577241437c6e1a376d36525a3739596cba2077abd1ed",
  id: "dd002a3a4f56a33c33cde898966887009adcf53f4cb84093d6a5670ed43d6248"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "022e13de675e14a409ce636706c76d42857c673d8dc0dda4e5bfceffdbf86e13c9",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_45",
      publicKey: "022e13de675e14a409ce636706c76d42857c673d8dc0dda4e5bfceffdbf86e13c9"
    }
  },
  signature: "3045022100a57a10ee4e79394818345347cf3a4f6c9e4f039b4fb5586da040ff34a6b96cff022078416a630aa400f9c988f8c43d4a5484d14bce536d91f3a6dede075896d32842",
  id: "c8b11bc8306047f9b368c510dbb6027a7c9b4d6df3c5505079ac334446437fd9"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "029a20963b506afabb2bd805830a46cef8d59218cd88c0dca9d2a0158045b1c3e0",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_46",
      publicKey: "029a20963b506afabb2bd805830a46cef8d59218cd88c0dca9d2a0158045b1c3e0"
    }
  },
  signature: "30450221009ee57a3ff9a8db841853411ad4068065aed82d35bed8a89f80995e70848f78dc02206a6628a2a8347a91aebcb78e1d575c0a1f8754103909a8a225ce3ac834a84830",
  id: "4f5a69ef4ee644cee1e5f8c0fffba9156d26a3c27ff88531a5c3bc53d77cde41"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03f08761f99892996c6771761955ec41ee6cdffadd43171228f5f28f8c76423b3d",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_47",
      publicKey: "03f08761f99892996c6771761955ec41ee6cdffadd43171228f5f28f8c76423b3d"
    }
  },
  signature: "3045022100d65c0d76bf792c61a8c93070cdcfcc56330f1ffb37185774d04f77115c1acbc70220092dfa82e91e4b7f47a2a6d4ee57965d80ddc82fca9758250b22c4271b5ca303",
  id: "e36de13f1ef1c5749f697a04943279d8b398c5758eb30b7c8c685d45cd2da4ac"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03ea97a59522c4cb4bb3420fc94555f6223813d9817dd421bf533b390a7ea140db",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_48",
      publicKey: "03ea97a59522c4cb4bb3420fc94555f6223813d9817dd421bf533b390a7ea140db"
    }
  },
  signature: "304402200a378960653a3d2f8b7959828cc6591a7e345bccd78bf4467e727841504f6dd302205129a7d4ff5a695ea4c05881824540753d09343ea591f8744d408917ad81465c",
  id: "c1da6ef5cb25b778cd8401127ee15b22e2e95cd37fe6da489e8ab35dd8138eb4"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "027710de44279aaa41f8e75d5ae61a085020c414db2dbea02bbec0e0b1f27bcd22",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_49",
      publicKey: "027710de44279aaa41f8e75d5ae61a085020c414db2dbea02bbec0e0b1f27bcd22"
    }
  },
  signature: "3045022100dc408846105dd8d3849aa24b5f8ed40836f17b1c5c0d8c82977fb278f8bd9d3702200b6c097658fb5b1030f1cdbc8c3c63d402b108b4236b2bc63ddc6c6be4a05633",
  id: "f9ef93a7ff6a96ddfe6b0f0a58f5c5bd9d906e6f7b5f2c8d1372fbbab37ebf74"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02677f73453da6073f5cf76db8f65fabc1a3b7aadc7b06027e0df709f14e097790",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_50",
      publicKey: "02677f73453da6073f5cf76db8f65fabc1a3b7aadc7b06027e0df709f14e097790"
    }
  },
  signature: "3045022100e6a5a91dcd3c70f3beb78eb15432171b000606557c5c13073d155422d931b1460220073b2aaee4cc7f6788b3b1781e881f20cc163ab7f81be9d32977e2eb194d9ffe",
  id: "de4fd6a03861476286161177b6d4e4b421871d8bf393dea05c5daf2de733de56"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02257c58004e5ae23716d1c44beea0cca7f5b522a692df367bae9015a4f15c1670",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_51",
      publicKey: "02257c58004e5ae23716d1c44beea0cca7f5b522a692df367bae9015a4f15c1670"
    }
  },
  signature: "30450221008a4abd4350b2069b2552e6b2c26d1d8fffc78914a071d98f1682de78497fbac502204b65e5b30255438e92d1980017c2fd5bbf3436839bf42d933d83a032d5b68f1d",
  id: "93288bd9dda27eaa1a395c0e575802f2c89a088c2166fd49e4dcfc8480d5812e"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03508436f55577f406be58a5e7e59307cea823943c5312d62f4e3f3c63966f6e7c",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_27",
      publicKey: "03508436f55577f406be58a5e7e59307cea823943c5312d62f4e3f3c63966f6e7c"
    }
  },
  signature: "3045022100aa88c4528c44c168fa205cc88b240ad73bde9bd0bf7b6c3607d15cd7dd1a6bfe022024c361cf430531ddf6345fe00c40eeb4f7ebeebd853ecf927f34f465ec87d134",
  id: "7d7418341dabf8406726f30b33d22db8a6e5713a36b87f4d5c2a12e44cae2564"
}];
var height = 1;
var id = "13114381566690093367";
var blockSignature = "3044022035694a9b99a9236655c658eb07fc3b02ce5edcc24b76424a7287c54ed3822b0602203621e92defb360490610f763d85e94c2db2807a4bd7756cc8a6a585463ef7bae";
var genesisBlock = {
  version: version$1,
  totalAmount: totalAmount,
  totalFee: totalFee,
  reward: reward,
  payloadHash: payloadHash,
  timestamp: timestamp,
  numberOfTransactions: numberOfTransactions,
  payloadLength: payloadLength,
  previousBlock: previousBlock,
  generatorPublicKey: generatorPublicKey,
  transactions: transactions$1,
  height: height,
  id: id,
  blockSignature: blockSignature
};

var milestones = [{
  height: 1,
  reward: 0,
  activeDelegates: 51,
  blocktime: 8,
  block: {
    version: 0,
    maxTransactions: 50,
    maxPayload: 2097152,
    acceptExpiredTransactionTimestamps: true
  },
  epoch: "2017-03-21T13:00:00.000Z",
  fees: {
    staticFees: {
      transfer: 10000000,
      secondSignature: 500000000,
      delegateRegistration: 2500000000,
      vote: 100000000,
      multiSignature: 500000000,
      ipfs: 500000000,
      multiPayment: 10000000,
      delegateResignation: 2500000000,
      htlcLock: 10000000,
      htlcClaim: 0,
      htlcRefund: 0
    }
  },
  ignoreInvalidSecondSignatureField: true,
  ignoreExpiredTransactions: true,
  vendorFieldLength: 64,
  multiPaymentLimit: 128
}, {
  height: 10800,
  reward: 200000000
}, {
  height: 21600,
  block: {
    maxTransactions: 150,
    maxPayload: 6300000
  }
}, {
  height: 910000,
  block: {
    maxTransactions: 500,
    maxPayload: 21000000
  }
}, {
  height: 950000,
  ignoreInvalidSecondSignatureField: false
}, {
  height: 1750000,
  vendorFieldLength: 255
}, {
  height: 1895000,
  block: {
    idFullSha256: true
  }
}, {
  height: 2300000,
  ignoreExpiredTransactions: false
}, {
  height: 2850000,
  block: {
    acceptExpiredTransactionTimestamps: false
  }
}, {
  height: 3963000,
  p2p: {
    minimumVersions: ["^2.6 || ^2.6.0-next.0"]
  }
}, {
  height: 4006000,
  aip11: true,
  htlcEnabled: true,
  p2p: {
    minimumVersions: ["^2.6 || ^2.6.0-next.9"]
  }
}];

var name = "devnet";
var messagePrefix = "DARK message:\n";
var bip32 = {
  "public": 46090600,
  "private": 46089520
};
var pubKeyHash = 30;
var nethash = "2a44f340d76ffc3df204c5f38cd355b7496c9065a1ade2ef92071436bd72e867";
var wif = 170;
var slip44 = 1;
var aip20 = 1;
var client = {
  token: "DARK",
  symbol: "DѦ",
  explorer: "https://dexplorer.ark.io"
};
var network = {
  name: name,
  messagePrefix: messagePrefix,
  bip32: bip32,
  pubKeyHash: pubKeyHash,
  nethash: nethash,
  wif: wif,
  slip44: slip44,
  aip20: aip20,
  client: client
};

var devnet = {
  exceptions,
  genesisBlock,
  milestones,
  network
};

var blocks$1 = ["10370119864814436559"];
var blocksTransactions$1 = {
  "10370119864814436559": ["43223de192d61a341301cc831a325ffe21d3e99666c023749bd4b562652f6796"]
};
var transactions$2 = ["608c7aeba0895da4517496590896eb325a0b5d367e1b186b1c07d7651a568b9e", "43223de192d61a341301cc831a325ffe21d3e99666c023749bd4b562652f6796", "2d8ed494d852880eb674c279fad64468bfccadd79d2a63cc69a5ca80116933f5", "31de62ecd08b12b897d0ab50fb8cb07cff149b8cee7116c17ccb8b3916e2eeb7", "12be521f2bafb28cc7ada7139d424eaf0e68f7ac20216b5840d68509badebbe8", "cbd6862966bb1b03ba742397b7e5a88d6eefb393a362ead0d605723b840db2af", "e54fdacca38409781abdfd273d9ab11bf04c65286311b9c17d2f73829408b561", "38ef7225c653e9aa9e78434a30403c379318bbde514ccb7f32aff72c067043e6", "67f9eacdde5e4f8c90f430ea6bca0972984e50d3fc404c0d85c59a2aeecacda7", "7a31e574c93c61aecc2801b543cbccdd1776e44edfcadbc08439e61cec68a7cb", "da7590beca2aaa04df430cd30f1ab57fef2867b7afaf2c4aba09a8902864fece", "a2743b3ed2556a31ab1ac0551124fd507b10d86da95bf3a742744a5e55fbeb40", "8d150b3ea9b1bc3609e763aad30089f784fa3349369d62eeeb6de62a0d3ec56f", "834c1cdbb55f78a8c390dfa28b352671a2ee452e69842c5ae0431b909b295ea2", "1603029ad41e4cdf22a91e7650513b1dceaf5c27a854b9ff6b66f7f9eaa51f0e", "0977bf68d7349b9c10160c6fe7e533c650bb593514d4289dc99f6b0f9f28c504", "24714428cbcf94b4c5a02dce5a9ed22019b07327e71873764ec945465efb56f7", "13e5f2fe5eb5197e50662de599318bac9ae364bf78896de356c40bcc9c6cce71", "c41555d7dec8612966803135a55550c2fe0753219fc31f6b55e7d20250f33430", "4bc5378f069c476ca9f7aead1592eed8664a381ec40405a12ed2c5ec1db734e1", "044bc62e540079946b95d0cb43ac8de4d4ca0f8622871bca2e3748d3be3f7487", "605b96925202e2726a69e4076494dbcdb790bcf97740580fe19442b3b14537ef", "09de791caa9c19349b1f085659a21767709984d461024abccbd53bea0018edf2", "886ccddc38e922d7f931252776178a684c8d170451020f238aefcda5481224c8", "a53dbba9884500b254833d1b7bd3fc37a89c75afbd09df3c2de1e47a02322a6a", "9a70c55cc803b3de9beb5e976450620f673f1aec49a71bb88e618ced2a8d1ec1", "4496c966fb8025297101d12fbc03509d47dc949a722cf11783ad00c71acf127c", "5290b62ac6ae61e0319e98a7bf5e22264e1e42fa4199bd00ddc9ddf148ea2ed8", "6774f5fca7be329fba7d49ed88bebea42a5d2580e44e16a21c1c8d3677d7a38b", "50c9252f5956c693fe04bdd9538ec2cbabfab51df90b2d16e098708a7e30e0d8", "813fd1b603094159486f0a59f1648e8ada12f0654604b2c3207daa6c934c2752", "ec952f0edcc10d9ba8a96b3377078995e4761ceb2483e1cb86db0a51f07c8abc", "874c7b1b9191eed223cd3ceb837bd3b144b25725777fd0ce709983e50d304475", "978b7e61409d333a1f8a888a0dc64da19d7940aeaad6bd26262ffabe7b46da79", "ba6856d223f16642d916b33488a3825c61ad5bea92564896febafa44026a28a6", "8c03b130bb847ab21b59d9da807d6043d33d2f7587134d32fcfa0c460e78b36b", "500e035ff064f19599d41e98c2725687fb8736367f85080517dbc91bc9d2f25e", "67456af6f26a14f6f6209fee5e9b65ec517ee6f8035853d26ef4d0196eca369a", "c9f9fa471a19515e6b57ba4c22c434044041a39ebffca7b10cde8483d1f8e716", "4f83bc708288044a6f5f2773b90e1456af2ddc50ed8f3b63e960f5f16cac7d73", "2c0f79b3689cb1a065aec5494070a165b1183e93aac9f8be6d6c393d71d04979", "fe3015fefe5b9d6b023c922c00264c92af07635374865cd25f7a4b91188d5c47", "65aa2caf22785619d1a0f53f2dd56baba47fb02a702ee330161a89c0f148b7b2", "743ba3234f1c74dd187595a25ff53184e12e5561cb6d28dba4e470552cbdb602", "4f3e18c955c94cb1d3aa977e4dcfe9574555d361ab687e9624bfa2b7ee15b4b9", "748e5295ba2378cb29d92c2b0c6160ebd07ddefa7ce136f93fc9f83e3e430c09", "b475296519b1e49c45d0ded70c0bf8cf9ced16c3b6af9854ca36648f79238cbd"];
var outlookTable = {
  "5139199631254983076": "1000099631254983076",
  "4683900276587456793": "1000000276587456793",
  "4719273207090574361": "1000073207090574361",
  "10008425497949974873": "10000425497949974873",
  "3011426208694781338": "1000026208694781338",
  "122506651077645039": "100006651077645039",
  "5720847785115142568": "1000047785115142568",
  "7018402152859193732": "1000002152859193732",
  "12530635932931954947": "10000635932931954947",
  "7061061305098280027": "1000061305098280027",
  "3983271186026110297": "1000071186026110297",
  "3546732630357730082": "1000032630357730082",
  "14024378732446299587": "10000378732446299587",
  "5160516564770509401": "1000016564770509401",
  "241883250703033792": "100003250703033792",
  "18238049267092652511": "10000049267092652511",
  "3824223895435898486": "1000023895435898486",
  "4888561739037785996": "1000061739037785996",
  "1256478353465481084": "1000078353465481084",
  "12598210368652133913": "10000210368652133913",
  "17559226088420912749": "10000226088420912749",
  "13894975866600060289": "10000975866600060289",
  "11710672157782824154": "10000672157782824154",
  "5509880884401609373": "1000080884401609373",
  "11486353335769396593": "10000353335769396593",
  "10147280738049458646": "10000280738049458646",
  "5684621525438367021": "1000021525438367021",
  "719490120693255848": "100000120693255848",
  "7154018532147250826": "1000018532147250826",
  "38016207884795383": "10000207884795383",
  "8324387831264270399": "1000087831264270399",
  "10123661368384267251": "10000661368384267251",
  "2222163236406460530": "1000063236406460530",
  "5059382813585250340": "1000082813585250340",
  "7091362542116598855": "1000062542116598855",
  "8225244493039935740": "1000044493039935740"
};
var transactionIdFixTable = {
  ca764c01dd78f93393b02f7f6c4f0c12ed8e7ca26d3098e91d6e461a238a6b33: "80d75c7b90288246199e4a97ba726bad6639595ef92ad7c2bd14fd31563241ab"
};
var wrongTransactionOrder = {
  "11773170219525190460": ["bace38ea544678f951cdd4abc269be24b4f5bab925ff6d5b480657952eb5aa65", "7a1a43098cd253db395514220f69e3b99afaabb2bfcf5ecfa3b99727b367344b"],
  "5847703302374058501": ["163c355844ced31ea62c86aeba033a1ba75f8a9657729990e17b06cbdf31f68a", "ce3b901c5507993a282c36987cbf003769e962d721b70a9f550b9ac1654fcee7"]
};
var negativeBalances = {
  "03d0102c85624e5bdfef4a82faea7badded8bc0dc5e087bd71d75bb534641404a1": {
    "8": "-200000000"
  }
};
var exceptions$1 = {
  blocks: blocks$1,
  blocksTransactions: blocksTransactions$1,
  transactions: transactions$2,
  outlookTable: outlookTable,
  transactionIdFixTable: transactionIdFixTable,
  wrongTransactionOrder: wrongTransactionOrder,
  negativeBalances: negativeBalances
};

var version$2=0;var totalAmount$1="12500000000000004";var totalFee$1="0";var reward$1="0";var payloadHash$1="6e84d08bd299ed97c212c886c98a57e36545c8f5d645ca7eeae63a8bd62d8988";var timestamp$1=0;var numberOfTransactions$1=1492;var payloadLength$1=313052;var previousBlock$1=null;var generatorPublicKey$1="03a4d147a417376742f9ab78c7c3891574d19376aa62e7bbddceaf12e096e79fe0";var transactions$3=[{type:0,amount:"0",fee:"0",recipientId:"AU9BgcsCBDCkzPyY9EZXqiwukYq4Kor4oX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ed57f27cabdb01f5398b30e63e3372735ee428e17e95de675c37586b6d1a5c12022062a0040ed189a4adac6c3d105e05180f7c74e8c68ca9912b3c60286c2226f3fa",id:"44d9d0a3093232b9368a24af90577741df8340b93732db23b90d44f6590d3e42"},{type:0,amount:"0",fee:"0",recipientId:"AeLpRK8rFVtBeyBVqBtdQpWDfLzaiNujKr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022018618cfd5dd1024c0dd7677fdbddcaa6977b57f832eca130583d36480dfa452302202c067556fd93899fb0d18ea28e6f0276a778099cdde3d97d3bb8733dff965a59",id:"512f1aa00538b24a3ba55d65519d34cea83d753f5b2cebfd7004d5c0eaa7177a"},{type:0,amount:"0",fee:"0",recipientId:"ARagsXvdeTHYghaQgJkwbdSkPLZ73qdMkR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022021e056a123b4a6c30e3f30dd68ff56f4cc1a994222cf27ff5b48434947e45f300220424cbc671a54a019cc655d02b2313a324702908a4a05c86bac4ac83029bb01ef",id:"8bb3997878a6a359f1418cf25f31c84f660e5e6897ebd6d07549ff6a4374a44d"},{type:0,amount:"0",fee:"0",recipientId:"AT9xWcPQ8hGYuXZ8aWE57VJFohyX1TTLkH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd0ab0bee79152978d8d5835e2d244fa159e4957f48d602c65e35e2383c0d14a022036380dac439784075befef7f7b14734f9ed782e4be5ac7f2f4c49985b08fdce9",id:"30cb724924823c689058c25243d1c213b9cdb8c157eff26ee9c89fc1e705fedd"},{type:0,amount:"0",fee:"0",recipientId:"ATjjXXcGPTum6wogPVGb9pmimpSo4EDDEv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202e4a8dbbc11c3628f7aa9ef92825d84cb662a20e0af724d80475bcaf64416007022063e859ef5e9f9dcb294956e14d0680bad69641d1c254ef0ccc733f25b7814573",id:"69e5ced4fddc54dc4b688150e8bbb5bd3cb056252708e0d03401819490bc6125"},{type:0,amount:"0",fee:"0",recipientId:"AW58iWw1ATvzGHu338WqMYvgUhmvMMsRjF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b1a8dfbf6c37a984acb364311e22336c367c5c76741a29dae4d5f894a496738202203e93441406fe1b23ab6d8807179c2cfe9e4c33bfbc455cc30733b5237af35d60",id:"62a85a7d3c9c31eafba7b39b102ff4594c5dce17e5c9ed38ef897ae0970ea613"},{type:0,amount:"0",fee:"0",recipientId:"AFxqVbsVuDfnfyd9ciRAuGq6waR5GqiC5R",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ff14b9189e4f4d6199737c9b9b00d7572b2e9a5e1d1280b0bcb02b51b233668d02207a9df93b66088faf216bdbd60f438974dd5000cd1dee92a5a391294d717fde00",id:"c7b221db20709d99cf25d4a5b75aedc2644c963be994f040c9582c8ca84524d5"},{type:0,amount:"0",fee:"0",recipientId:"AJjkVwkhsvsX6dVKhVxpmhRvz4CyXLEvQ3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100aa43dec0f44ed1ae07fcca1bd4ed5075954cfe0a0bc6ae88f0a2640c9961cd1502205c750b5c957bb92e7dc032bdf01fdd2765cffa5dcdfdaec7201b8a2fd17e56b1",id:"647143b65234e1dd78f258cb32ba64008a1d23baea7739c02db82e60ce9147bd"},{type:0,amount:"0",fee:"0",recipientId:"AMG1Y3LP4kZJMAtoPhsnVkpsMTJ8nnCDr3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203519061e2b618b44181bee15f4ae561f710c6601995ee5e38149726366b3d14302200d0414c012b86429eae098b474acfa1c9f29ac4ef06d500eda8a9294c1ce14c8",id:"02dc2d050528586dbb9ec9dfe8a4118a21bcb3244d14e61a8cf41337925972a0"},{type:0,amount:"0",fee:"0",recipientId:"AVFkEkCmEg7cuCXoVrfvtH6mKz6XC9XnvV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210088d431420331051cc29ee00cfe3851ac4fed969c9592a81dd0492c0dac83d0ec02200f2efd316f7506abc7c60ad6151b00977206aeacc5a3a538df94fbbb88a1bd70",id:"1a3522ccc27e223953d3978b891e4adc219ab41216b06eb956b138c8dd532243"},{type:0,amount:"0",fee:"0",recipientId:"ANstQM4LaxfsuKtFMd8vqdGte3CL9s2vMA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b6e401941a798a09d5179752ac67c39af596f95d28aaded45a79cc8b8689bfa5022079ada29c01231e3fc2ad96050204047a7d0a9b56c56f609532bdb3d92b152e91",id:"574fbbd0c1f28cc923b03cd00bc9f6867fe246a645e3b261b6b9b6b041491c13"},{type:0,amount:"0",fee:"0",recipientId:"AJqbav8MPPAe3zdzo1f471gaciQbx1SRe3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e4f4718c13b10300c478ea28fc4a6444f626fcd1fbe6d45f80504abd8f1e5ac022078c0fa5bd5701dc989ee3432a561e659d7a07c22e6a9eb198745d162a3eef958",id:"e1d3f456bc81aa88b5b9f790c383384fd24593ab4dd50b308a77a843e0de346a"},{type:0,amount:"0",fee:"0",recipientId:"AbfnTeGFiRM3m8eHcMsrqNvrpUCoCnuSzH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fb740effa4f878b5afd3bf8202cedaa7bc4c76b5a9ec0e1791824008b08c04ab0220340e130184ea186b9c7acf058b9cb62c77fea9cbd954d5e5f0d883da8136d15c",id:"85c540e0e42f449a14541c4ab66a667a64a18ffb1dfc2213a143441c6d21069a"},{type:0,amount:"0",fee:"0",recipientId:"AXArbuCVSiRuYBkzCAajboxCfNiw8AyQX1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022073143336b15ab2a51da194873e14a2e08da329a325e570d3d525c764a8e546b402207055a169c2cf9b1da89bdd40b1e9a19c579865cc19e2f5e868343f594ebd87de",id:"0d00b60f1a26a05d52432e517e59a6e42b1597ba16547f25d5b4cc5a4d821c03"},{type:0,amount:"0",fee:"0",recipientId:"Aa5rKoVusA5xiyh8Git1tJUWZE48ScbCR8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ea59db1db3462c4d08ed19920dd694e707181f63dedb48ad62991935f3f5da10022005d5981a84a82f8b7a881e50a07ffac814fa62d1052d43583de50e0ed62498a6",id:"bffa21418f3668024901a65e57f484ad45202ac71196e857d30b61c2a300ab6a"},{type:0,amount:"0",fee:"0",recipientId:"AbrgipEvLp1ZHNJ1GcWWAsCLNgSgDG6Lxh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203e5fc71ee49506af5218a4d6dd3870493081984f16234dc53339e6dd411d774302200293cee5f33cc54c22c766f420a0658107339905c6d6b745e88d49be6154be18",id:"77456d6e6fe11bd3fb7ec636e115dd6cd105cfbc97f2c9af37513f9f74737c97"},{type:0,amount:"0",fee:"0",recipientId:"AWLoVgSScNNB2kecswuhbY9tcrtv9kf2iC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210089cb088a883d07418a6be847f45d2fdb1c8c09cc506b5ead7df7df3f54cb503202201b323319c4e8ae723c46886fc51ba311a722e25a0ed87a130ca57e9d6e725dd8",id:"79c7c34636d6bef31813438d5db5c2b02bd8a7964ec1654a2e24cc24563f5695"},{type:0,amount:"0",fee:"0",recipientId:"AbyacFxcWS1JsokdRCx8bFsWP8f48XftmS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc987030f590b970eade8df22b44f13deb89a652837b3cdbd9274a27b9d97f9802204ad6718c262ab2eba80202503ef5cc9704c13b3ebce7e2e5e80489e783e34540",id:"8e40e07b53f46d8b42c90b18383ae19d5af69ff657c13f5f6550890eb65939e3"},{type:0,amount:"0",fee:"0",recipientId:"AYTEu82arYgRyvTgi7dbYwjodV7ignYucz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e30c20254d8518201f0a46ec347352159ae81ab2d1a47d582dfb20bbbfbfdb7c0220300c012e88a107f9268e7593f2adebcf7ab72f2d240aad37b58b139d02067f40",id:"23241fac8b9f633b6749f0b7788ffaf9ac8997168c55718d7c20eb688856cfbd"},{type:0,amount:"0",fee:"0",recipientId:"AYLTbdiYWHvPvJo5Lh42MEVS4Fnepg5vgc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207c919607f7d4b17b0dd54cd82843f4b4da3f5c5ea92f07a1794f0fd666f065f402207245dbc1d97ed651e14849c84579f11bee9dad72ec7b73dcf0b3d79cb7d68eaa",id:"5c78d1808a47333800b9604fc1ab2352bd847ea5fccb9f834825fee74e5aabe0"},{type:0,amount:"0",fee:"0",recipientId:"AGdHR2UZ3MJuaXWejKGoAycztyN8BFQnNG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6f1153d93d37483e21cbad1b6c07bebf95a8d13dca45e8c51008a69be736dd602200f81dbda9b257e6c12314bc3a20c5b1c8ba86e0deecde76bd1606f79e836e008",id:"fe843047a6d408de46081217cea6f5f197f6c2aba86bbacab00240f147002501"},{type:0,amount:"0",fee:"0",recipientId:"AVi8PFHr5jFBFGWSissPFDFXUPABuBgxSa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022002a5daa6a6ac2cba5804e8bdc21769310f76fc6501c61147f9a5d97ff35737ac02202c6886b09e65cd90b3fb5ab5c906bf98512ff823f21cba66ee684c3e55e2058a",id:"eba8ca8a4c458bd3e15aa956a15e4b8cdf9336bf7d1050e9ab44bc83482005cb"},{type:0,amount:"0",fee:"0",recipientId:"AVoTzMjHaaWKDuA26ysXGU681N6Q2PQre6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203e6a954d0044affbfb9bf8097fb12fd030fa4d7b9f921a797ddbdac7d64d357002202404106e049c35fba4483451e9522ae46e201c916d50bf6971e5ffe7bc1f0155",id:"3c8b8785bb4213cb8df30aee1b061fa2ef0a515b59f05abbb0fc7e1c36f2052d"},{type:0,amount:"0",fee:"0",recipientId:"APXkAdLbLiLJDC9Ls68Y9a5ws3PcgmUDAo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022022b5f2321cc614962cb4fd9a1eefd128986d39285b59f6e418e459139b07528f022050988e49f7d25d9a44765514d50765a0f43a47b306df56def037be36d9c97d01",id:"ab8a92d54c08815a6dcb5561c0dfa0e93b8552eea75e3feac096f5a5e4eff784"},{type:0,amount:"0",fee:"0",recipientId:"AGZhXHXFUdvd7W4aWs1fYJe6XFUYeSWrd4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a66c0a231cf6f09d6ba27d7a835a4458edac26f7efce8fe1c6b58f80f88cd00e02207f92221ca0873e10a6415e62cdeb4da836cd16336715cc861784762d387a1749",id:"ea59d2aca71b241d063cc41061adab57d97369fe0e9e3bda651ada6c712665d2"},{type:0,amount:"0",fee:"0",recipientId:"Ad8UiXMZPecuNGwCXZTmF8Mysn1TchVVTf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100af001967b21b5715f68047911026eb0cef51d14a8e0563e1633b2bf213c191cd02204b85d55c4b13255b488a661dba416f7208237dc12c114040fe54692f76a7fd57",id:"b8b63cd15f19ef5671309e8d571482537d88af6226248c2fa0e5bfc3750606ed"},{type:0,amount:"0",fee:"0",recipientId:"APQgLh8MaztT1XuWVKb6d4FKM9HMmdmDVB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206bf4937703d0b2fc171b86ed8596ba5ec58e9282e3cc4ac269192ce670478a4002205cd8f627869c5071fb99db462c47655eafdeb1b991beb75bc48f62a56915c137",id:"e1a4a5601e46dca9c9e2a5a67655bf976764efe72e82d2cae07c043e46e29928"},{type:0,amount:"0",fee:"0",recipientId:"ANUfH6C3Jjp46pDUxWgeV6WUbWCagaVxM1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100acc09397ff3c0b38214df5bead49d458931197b22e28426826d0173594a75a0702202d22e93e84748b52edfc2e420ddbc6887b9cfae3f7b7b3d7781886f085b9618d",id:"e47687f406ffdc59012079854958532ae22512e2021990c0c11cede226c64d58"},{type:0,amount:"0",fee:"0",recipientId:"AXuVpX3tAewNp5YVWvXWv3etxjrMDgaZdK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100df1255aec444d8ce3ac9cd459669412376eb92d281ec0153c7a525b43b2cd7ca022078e22a0c52eace076baf1d89bfd03771ed1b45dfea105451cb9490371be6908b",id:"a9301a31302384e0428be63ca0731b93ebd2a2c18534b2ce771525c4a0c1a708"},{type:0,amount:"0",fee:"0",recipientId:"AdCa1oGLMRQqygEBGGq1AEtSV44CJ5Kbdo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220181358f06e1a2f2d43538dd72e7ec33ab64a39c92a512f2cb08e08fa32c3e2cc02203fddae5a4c9545093c9668c95688ec07b9b7ab1be27eb3efdf0c0acc41b2bc61",id:"f10ea8612fdb470c754f6ba5271d0b30c52c12d3a89ddffec0151cbc90e8d6fe"},{type:0,amount:"0",fee:"0",recipientId:"Actv8ebcwNsbfx8MM5k2AeJidJuLL7PotT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b2c5014c3967c971f57c995bad2385f5d3cdbef34d43304d17be215984f986de0220080cdd2e5a643d7dc8fa9c299c5456d554a2d46713ce3a8901abd94455dd5929",id:"2a992486b31f723a33458ca055b878e51f1c13359cc4bda87509fc124d57c6ec"},{type:0,amount:"0",fee:"0",recipientId:"ANeLRbMxkSguPMq9CJeMgr8xZxwZ9mbqbx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009fddcf0b5071d43e7cfae4f9241011718d324ae16692ee674d668f09434041bd022050fd7c97e4206c2e07ef98032ed731593ec0cd8209a9debec36f39b153b752c5",id:"3e6debb349d1059af502804311bcb2cd37368d67b33845f9b50e4ba296d0aadc"},{type:0,amount:"0",fee:"0",recipientId:"AR5z28tRUnvaBWC14KSBpvNJDgsVCNtagq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220747d72aa2180e80d190ae4940dbffcad648ab743d551ee70ef221439357aa14a0220334be2dd1a004d188539af503467b37dceab37ec55ae5a035801746fa356412b",id:"7b97374ee88b881af118a757167c49ee0ae60b0ce88e377a200b015f87441b19"},{type:0,amount:"0",fee:"0",recipientId:"AKeDRRgG4TdDo4Z2iCzaBZS2UcvjWKMSrC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205882a3aa05216dc8495784c9b842e3066f331014c8b55644804deccc10d696e602200fae518daafe7c9599a3e9a4d1ab8388fd3e5751af5e946c00a0d5d7c062f82e",id:"0d1a17ff619a2dfd5b1d2abe09600fd1a9ae1f373ebffb70bba1dacf7a15947a"},{type:0,amount:"0",fee:"0",recipientId:"AbkDPAUDsfQJgvHn5g8AisDm9XqLAtFFai",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022016ea5da49920aec7c20e293270fc5aeb99a7a8e6020daee092ed11cf48b01a3002205d10abf6cd111443e4ed7ae84a9f29791c5441cf99dac64af09611d6dff00dca",id:"4888da0a60c337f287a6526c9fc86be8bd85460ac1e48aa39b5d2f5c4a4018f9"},{type:0,amount:"0",fee:"0",recipientId:"AZvjdJSG5V4WnNjPaRbDNfLD72j3rYWqbs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202d089f163508a18c061fc42c70a79583a0081d9afb49dfa36b7f881cf73a48ab022021dfa71c41e3b7303297dcfcf63a180094f0ec58953f52e8b8c424251514f7f6",id:"be67562ccb6fc1d6a04791726fbcc111067d5d54076425b91380bc9442b31ea0"},{type:0,amount:"0",fee:"0",recipientId:"AbAeJ4YJU5rxuNtXpDn3E4W5E8UNHyc26a",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022015b2f957cf3fe5f690786bdec5831efe41b59ea82a357bc520500c77ab20d9cf02201ac6773a21d83bf1f0b744576b620838ad984e6954965db199fea922ca5680ec",id:"2101c235de152ed1a0bde3f57593362d73149e1cb1e5b4df855718c392ac245c"},{type:0,amount:"0",fee:"0",recipientId:"AY5GwZtG9sFvDzMKAQfAD1Q8EHDh4bW718",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ad645598de2adfa46f68a9c0b849457306a8744627c9d5a085238bcf51599fa022035823c617d15fc35bf7910a88ca45e47c9b3d2aa6c9146f6c1db2b92de0d3ecb",id:"f9aa1c9331948314027579cf07368180d49b452bb747f153c0f25c39328d955c"},{type:0,amount:"0",fee:"0",recipientId:"AP8agRcU4WmsYhC72pBqyfLwaDU6NYKUL6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207b203b7f10f7fcd1c29379603c765d37d9c1eadb787885211729b63606fe7b3502202862e0cdc7af6f3f2ae8d48ce56b9a76bd38ef3320bb82f21bef96c6d793eee9",id:"f6445a905a38bf0454327fc4cd9976bbd971994b48a55906ed3c123efc0f5370"},{type:0,amount:"0",fee:"0",recipientId:"AaFxHxsjYyYCsZtpQwwYGvYESogJ2SHxe5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206f4c7616b756110ad060c31c2e4402219f77bd266bbf2c0bdcb4e8969cf59cb4022028355a38d68cf842b88b67ca9d9e261ca5adf017e84b2b5bf04e7adb6062285d",id:"4ccaadad7365662dcda0d68a13a18ee08174e2b0ce3638de5d45586cefe1fec7"},{type:0,amount:"0",fee:"0",recipientId:"AHmBqWJgxZfaC2azkyASdrbCxF6csE7Qxx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220088ea11151b787f4aac1c5bed478a83ed2b31a013942ee76f6c8b5a45dd1fb3d022068d99ce4db49d383fe1987682a459620153e616de651b45f092839b7afa4b29a",id:"600b4e8a38b45624d23f8f6a11424cd20a9ed956fa970cd317b126221c2c870b"},{type:0,amount:"0",fee:"0",recipientId:"AZengw5WND4WLC8JKz6xUDFwLz3yCKPpTC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022001c34abe513df6f732d459e995d5ab3ac6ce064213ba79f502472fbd23d2a41b0220799e96bdbe031aa06aa9fd14cb25b49b71244298cc04f5835fd3c947bcacdb61",id:"fca76de221fc1f70b642f30c4e5ea024f5ff886fbbe2f51f4ac7fac4bce94629"},{type:0,amount:"0",fee:"0",recipientId:"AeLV4NUMsPJW1nvHquBWPFVKCWirs1pshf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d37946b7e677220e9333aa5d428e8b82a8553d2b3e0c1adbd8551a75112b54ee0220465fdfad076cdde91b5642305ee4c237c4093dcc210b9445c374660b1a11ae40",id:"6680f73be6c0d1f96e187440bf3575eed655477e15d8f1da85388453f5c9390a"},{type:0,amount:"0",fee:"0",recipientId:"AJrXd5u3y6FH5HktH2jgkLQHjgD9ZztMtk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a97bd4beb5444b5c2dea233a7dfc11c5ccb705a88799a7386f188a159477ef56022011875cadccf32228d693ebf24b6a1acbd574b615dabb2763e4a29b75591dc75e",id:"0520f4b24257ba8ad735613737ac0f0f2bd593ab5c52edcac746f4bbc8c635e2"},{type:0,amount:"0",fee:"0",recipientId:"Ad6y8ae35QWkrtiLBpiXRR5Cj2KK2u3EGX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b6065b0dab807b36139d101154d5e16c145fcd9ee807c06e46ba60e172efedcd022030e641f2c5ee29da508ceab6649593a6cb872d89d4661b3fb2b79f48b20c4ec9",id:"04e36364fb8007bfe7f85914c22cbe4bad262c12631ec4f339858d82213adc7c"},{type:0,amount:"0",fee:"0",recipientId:"AQaKx7UU8857b4tJij1jb7aURUzd3GDyKt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220540f725157e6fa9e1d5a7e495504b5007d9d554ad8f0c275e0e45a04028cf27f0220660a555068c7402672443beffc2bcaef8a85f06f9ed38ab558ede7a21e265bac",id:"3dbb56502f32939958b41aeaf84e9cbd4483a85b23ab32f979a3c1f0d683db10"},{type:0,amount:"0",fee:"0",recipientId:"AGb36aHfdxvqbMqoDCnm6wVkKKtqkE3zAh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022063d7b93cfedf0daa9255bb1ab9a3955367c5bc8941b386f548fb01db85507bb902200cdde437236daa8fc1b396fd7de9294a9cdcbfdbd22df347bd635bd66581704d",id:"1c99e21a5232ccecf47da6b530eba9ceef87f02baa91cb333fcb3b8ca18edccb"},{type:0,amount:"0",fee:"0",recipientId:"ARDkQVS4DbJnErrptyWSWdJD8gtaPEyRH8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c1b92b570f6abf42650414541ddf44693c61835816883bc2de0c4e7997926640022015e109e9f622844d8930a8e497ea2af2fae7089a4a110ff2d3c6fca46b19a70e",id:"fda4e22bce9444a6bc7d952c0cab822a5408ff74a19aa8e6d47b61513e061bd3"},{type:0,amount:"0",fee:"0",recipientId:"AW91q3n1QYTn3caBm7KR35zexcJU7PgMtZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009010a3346835bd198bd011a5a3cac7ef94685c96acd668ee92be386e9b267fe2022078a272a9552454e80ff83dd2a01b3621fce5818d71fbd6430e0848ba85cd2c32",id:"52cb2975b2dec5cd21beac470055a254a84169e51b1a72387757a340509a5049"},{type:0,amount:"0",fee:"0",recipientId:"AYaYHEKaJvLLWX2NgM8VXk15zSDxV8vCgn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100894832a480b4ce89972badf315ba89a21f9c200cf83dc402dfac475107197852022036158362b58228e69defeeed4035e9491f20e38b8435a4b8afd86718906ec42e",id:"1b693cf3a23efe80385fb0f8f2b7e1ec123af4f5b99795a154f7dd1aca505950"},{type:0,amount:"0",fee:"0",recipientId:"AGNMmJ5upuU38ucaG3TUsG1ESaQDExSMo4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e2d35dbf837de046e351c2bdc8a7061edca5af3cf01d8c47ed468225a85f688e02202cd057264c2d6f17a4b0ab9d054de7e6db6349eb1ffa2beecda58960ce80b4d8",id:"509e2950f47ac036f4ca1545f3f3e4dee77db3756682175d292558b920948579"},{type:0,amount:"128537390",fee:"0",recipientId:"AapqpT6xF7q1Enu44UkL75c76uNuWmRWkB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ba8eec5c24356ccc89437cfb53440d3db1929fdae0133a4744a4fc61ee1c768502202775dca5d3ac6c2c3b6d5b72e58a975cbdbdfeacf31f26d46486a420fa12bf9b",id:"6300b6f026c1e1657f7d7328bcbe58e5e1c6a8e56eb5f1cb1402bd1225786c90"},{type:0,amount:"1470150572",fee:"0",recipientId:"ARc9Qz4v9wNbneBSNk5s4M1RKXwoMzLiug",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220084a67416a41da67ff634eab70f88443a7f3d531976c84b310a07cb0a6ced39102201f26c0d886785aaac15d5efc79b9545bf8da36ec4b4a491a2d33a937a97bb9d0",id:"33c5449bf830f309809f67aee50bafdfbabc3fe284aed0d5a84059baec213843"},{type:0,amount:"1939749374",fee:"0",recipientId:"AcE7Xh9FTaMB9pUKQgST1BHfXnpmganLAN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a3515ef9744947b6b3cfcc3c6bbc6ccc05b7c158ecb639b0a46b0c5d38132b3b02202d2c20ebd19a0f60da85961a6dfcdcc905858e11556a0fbe3f37a36ea286703d",id:"5359b1e1068625f47432ba3a1ac12fda7411225f9be163d7248c25a92080c496"},{type:0,amount:"2223350287",fee:"0",recipientId:"AcGWNuiBErRUP9MeXGW3yUQrhQTNKh4keP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207d9fc26887b0a6ebc7877d0f96cd49fb6f51e09c5f7086c8030740bd19c7f8200220229ac976a89a3f1b061d7f833c916fc76da131629d0373e20f6a10680128c246",id:"68e9ebe8e03c06a773223752296acaacc47503411398d75ce9aea8d1809900a1"},{type:0,amount:"2635948642",fee:"0",recipientId:"ASHDLexaM8z53tcrddDC9qNrG48KiykCFj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220390fd742fd9ad375f06b2dd4be9fd28976facd9ab58a3b497f9c53627c54903e02207a13f2cf4b2e35b512d9f25344d7cbaffa7533a841b444be4131ef3ccbb9a707",id:"140dad637fb5e85d9bb48885be2ce2caf63599982325fceef875f5438dba6379"},{type:0,amount:"3319628053",fee:"0",recipientId:"AKoFbGWi8ZpD1FKLtWbs4PFdR4H5L9mNqj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fbaf95f5cf4ed909feefc9b0d3d82a27c6281837320174fb9c1cc65c6dfc4b3c0220571f50b5ba6c1b9effff224d5ea08a1dd79753d07487694897f5b053cc7bac56",id:"fc4460c527373e2cae1ef706aeb846d0d011f5fe3a15d5b29727ec6d4a65b378"},{type:0,amount:"3500000000",fee:"0",recipientId:"AcT6rrsUh2T23TXVgfXxXLQKmpRbECs4N4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ce9a0287b36c323e4dfbd845a2d0bd30cfeadbaaa4314c5055d3f4194d05aa1402207aeba8bf92955383a8bb95ce75628a258c5ce379e3bb482787b66db194bc24c6",id:"255952a161258cd10a8e70bb03be46b8005101f05ad0ad453e50bf8b5f1c39c1"},{type:0,amount:"3500000000",fee:"0",recipientId:"AYxobqMdZyUFvvX9o3ihE4iMnZWCzQBhgs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a8ba213f88717697168ef6647a89ea7d7d1a7bb56c8b82a27f4019cb351f13b502207afb90964461534dff853f2bd8a55e36fe6660de37b0864f65e4220c45cff2b5",id:"4a761497352e5687757421e2cad81fd7881c45395fafd33fa5d4266d98d3b40e"},{type:0,amount:"3606920711",fee:"0",recipientId:"AMepHWLBpbShRDbwLcEJhyHRatqGAMDa6r",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a35fee7952af116cb4ec7b4881f9fe5056371287ee26034206d964171c76f05d022053b2d4cf6bd03c89db073a25270ce48fda9b1c98a6cf19136291b912040d8917",id:"5cbe722d6e53c668c603db420a577c8a88f2c57c838141d7b0d336ecf4d67541"},{type:0,amount:"4373745201",fee:"0",recipientId:"AXZCfAqHYyFUpYxYgNyw6W9XVngp25rGkq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d430485cd384e4a58efddc72ce62e203a5ce80eb29699fb293b7d378521c932d02201e0d8cd73d3c98ca4973fe45ca2d161443f045125c971304864f9dc4e7d47645",id:"4f29a835860ea8533c479ecaac35bf14af9c12689a4d40ad8f4b07e55efe9a91"},{type:0,amount:"4410451715",fee:"0",recipientId:"ATyCrCUvZN7hJfkYWbCXgKfEZp7PB7ez6V",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e90a709462f9654e698f131cee2fe1ae82852e12909909c32bb4ad8883e5e764022065c75a2511725d489a625ce0f4321119c43d2df7831fa748d788c879cea94eca",id:"16f6d59d7b48c528332ba917f7710f5af66dcc647a0c129165da7508aa93e826"},{type:0,amount:"4410479871",fee:"0",recipientId:"ASrrGt6HcDBYe6hTqX2p4cD1AjNfiC3vnv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f42315460ff894d560857f7b863e22b8e9b14bde5a86ccd34c4189e37e83a8ed022036ad285ab692485715db059896f7d394382dc6ae8386627d6bfde5771a01279e",id:"6497901d7e0d33d9ebc7b510100ada1146f9be06e960528d789c4d62f1198855"},{type:0,amount:"5445780417",fee:"0",recipientId:"APRgb6yUmpvtaCyPmLuSzXPucgPiJ6FRpJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cef35ed420e2dc8c5f0de5911474f0b22c0b5f0eebf9cfb453f6832892b47fe502207f52c64e0bcb8fabcfd641a8c0a680d6f6a80ce47df726e276f620131f681c70",id:"1ba4319ef107661772377dc6587a13c08493dc0a02499eea9f69de567fce243c"},{type:0,amount:"5549484283",fee:"0",recipientId:"AQqQZPw1ZNhRqmbYfVisYc6muRF1TrUk32",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100aad3e80ae4d92622e819f38872ef85c0edb22300dfbc3fe8ec67ce570c0fa45a022076ce462d4b9cc5ae6340eae28219b1949ca4e5d70eb01fb70c92d759513402b6",id:"ddd800bcdce22996cf22036b8de5903e7f5719c5aa9142e4aea0a79b25837df7"},{type:0,amount:"5618558679",fee:"0",recipientId:"AXd5pgP55H9Xd9i6ErnzM3mWpZ8hZpYaCN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b5860683085463cbb8f828e4749c08b31e1c8a0cb5c5be8166414c7d38da33100220053a0efa7541a6a63cdb752bf3ca7eff289d4314c01c1215ee86dddd27d0c68d",id:"12bc04a7470e5929cadeaaa4f1ac786861eaecac4f6792b38b5bd6a8596b6395"},{type:0,amount:"5677245896",fee:"0",recipientId:"AKURdwRzPFAS4XhPUtBAqKrTrLu9LPqFbj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fcef07fa5b582bf19686f0df769c110a74e2503fa653475b82f7f5e6faa3be0b0220647b219bd0b2163b6fa363b62bdfef06f2df6006325b878455f806dfd44c09e1",id:"2436864a65bb862ba864aaf5e6334bba91a7674a032abd2ad9f2a3895d08309b"},{type:0,amount:"6558699223",fee:"0",recipientId:"AaNyZo6YitELcMW9SyWXiG1FVTUmrK39Zc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022078ce2baec0753ba02c05dff2efe59dbb628cd279307c7bd7d884776f2c15f35f022007f3cfe57778813c908496b147ada7c6d3531111cee9fb56053d09099a4b878d",id:"64277b25a02735c525a4f11417772288ac3e71f0fd75c8e00d6f40e6a2af8cb6"},{type:0,amount:"6900000000",fee:"0",recipientId:"AY3adwSjUDSKysWv8Ym4UaGYeqDx9V5a1v",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200cd7794247be234bb63d915a2c777372a89d0762c3c5299178bccec15b6be0ce022048130b001b7d24136435c148838e1caa6b176b98a0fa052314e408f26f81db35",id:"644fdeb9e3e870bf0e6558234075ecd9be5addff36f9fec81c28aa7c8ff57a86"},{type:0,amount:"7350752858",fee:"0",recipientId:"AY9k6pyVCWzkCNdnfges2yjGJVJyhLdYw3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220216dd68a632f1f0846cfb628921df1ff06772d478185d05c20986ba09efacc8a02207ea5c3932b37e98b491041ad0169554e3145e06a03088ca5c4e92a6fb184c6d4",id:"00cdc908312961a8350276e109985ee2dc325a984d92d8ad64d60dafae5e1ef6"},{type:0,amount:"7350752858",fee:"0",recipientId:"AV6aU7fieAyQQhMpjAdiUPF8w1SMujpVo5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f9e222aee99a87a56193fc9661fcb15754e43c41d3a37a1104c063b8e754d37202200c31da497f5e8e84069c9265d816d5ea8c80591836ea68ce94b4cfad308c619a",id:"71788c698bc0997546b1c9c2da21cdc2f391a3a295193c61582cb5788571c5c4"},{type:0,amount:"8174205069",fee:"0",recipientId:"AWhKaR8aPiTxfMaMypQqt2LtfDEUGpB1kz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ce4bac79228cd04ad09239a51a423a4c0e3e0aa48feecb5de9d3ad9402b6678b02205acaba891280ef0fe4c1ea18ed56d6c0693f5a0d31ae9fd00e266e3dddb0c5d5",id:"586cf12649c475cf490b6f7ad6bda018032da30e87bd257ebe2b222391e932ff"},{type:0,amount:"8335753741",fee:"0",recipientId:"AW1BDJsPkEV6AUfZtk5js9RKqHYfjEnuBH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009c055053f467f1571cc395463e23f7225580fbf5814d17756a7a421eb812c709022011f5a333a164b685998de4fbd5625c55a35c4a35e31643f8653b74f84d488836",id:"dba64b2e7c7f94a2afc083b73fe947c069070b534e442cd5958361ef4b22880d"},{type:0,amount:"8793099579",fee:"0",recipientId:"AH2QuDHZFX3rkLFkFTBrRshjz9VAaDVu2z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022075820ff7058679540c808d1fceea1033fef3c80fdbdc1f7409ad40e9ee22249b02207a60b839bb427497387c71965871304b2418afcc7aef71495b3bed16bbb87445",id:"fd79cc4dced6ab4862faf2c0b5cde19b3ecda72ac2453558001cee1e5f90af09"},{type:0,amount:"8930739717",fee:"0",recipientId:"ATiYQXzewAtwbKtNb8n5uoRpATXvASGu9C",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022043721eada610fccc21dfcc12eca7604854d55ff996a1aee8ef1b6ed6dcfc9c7c02205c1b63a8dc3317a90c41366477b12e6bbb4b26aaf1951546b956b2a019849633",id:"4b309d61a46af825c19faec1e116c949e0e4958bed87afe0ef3c81336e269169"},{type:0,amount:"9285850665",fee:"0",recipientId:"AL2DsLKiUjXFKBbByaLP1RsdUMeNyj8Pre",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207310e88bc29ed44d42c60cc2bfd8cd0cf41751a7c44a72d47f0ef597a312efc0022074f06ab9ddb0dd66b6095f8324a65d8e57841db18df7569427e3001222bfffd1",id:"fc59c5754fa17a47bb34b642ee71b99fff47e1cca8d877788490a6401c1f969b"},{type:0,amount:"10062477006",fee:"0",recipientId:"AQjGegCDm4ig1o2hAmxBwWYAta74ZvS8f8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022035956acc21b16b19f446509f805fcda6ec6aa5bb09803e9367e3459b05de6a630220310de9e98092f88787e9ccc503bf67439dcb47e4516eeac015ca5064c6c8230e",id:"96db83cae120bcee57cc27436207abb76202272b558e5fd7579fcda5f5f9f61d"},{type:0,amount:"10090126421",fee:"0",recipientId:"AXhCBxMufzWdxQoGQi3ZPS1SQokqHr7SQ2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202cda06e19276c0d76680c0fd5177c8e143da4863cd47f2ab4a9f9634abf0b28402205e278ca769cdafefbe74862d94df273382ba379ac0efd90c306d817951d75703",id:"f5a2f41b66cb6ddcbc7d68cefea3f5b884f18c2e981eeb8731280dad92d781e9"},{type:0,amount:"10400000000",fee:"0",recipientId:"AbDSp8xeAfoUR6mauGYE5P3JTDXXnWYmjJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220684bdff8dbcd3dbee5bd9d98d630db30d6e285f82f06349cd4c85500d4e20fe4022049809890d215e9041fedaa8996dcacf2b59cfa949ba44d5b19bfc0aa3d993f77",id:"6bcee0de136de52f7fa27f7641d3fd661bdc17069f874c189b09593936b9511a"},{type:0,amount:"10469786602",fee:"0",recipientId:"ATQACwzUT92xq8ftk83nm9gc8cDELLk1wt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203261caf9bd95edc131e4c18f7c0fd985d477314f70b85fea340501934f6968f602202c0c225421471e7ca9ba8e1bf3fa38ee5ab35187ceb5f272c6eaa36b2fcfa127",id:"8a8a7657c453a4eceeba12235add5d02a27dcfbd27a82238e586e673ba2d8dc2"},{type:0,amount:"10792241696",fee:"0",recipientId:"AaD6oZFiPZaWDgAz3NGdjASA4Lcw1n1yFB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f80771b2256f6e642bb27369d356716861ac83bc0d779870055e53a362bed01402201c5e896aeedc8acbe608ec78f14b87c623069b627d5470d835f07db98dd3394b",id:"194ee2091f2dfe779eaa985ae67489ef6f4caef181911050d2d3615292eb9345"},{type:0,amount:"10860889308",fee:"0",recipientId:"AQr31AJnzbHCTxtVgbguzDEL5VLHUqpjhb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ffaa693ebc94e479852ec7d47a90b96f82eebaf2c00b73adfee062ec8f764851022039b50274a148a43a23f7744c30cb00a370ebbd5d39a2e8aff5d91465f3b3a95e",id:"177f350bb7801ca83c881fa56256c9f9d63dd8b78d508e67ee74d8455852eae8"},{type:0,amount:"11300031743",fee:"0",recipientId:"AKgJL6ko3BvdJXKdRDuZ4f9kAdvmNRiq34",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d2012faa0994f60a9e9ab7049c703e223de18e4b89fc71b2204fe73b17af9708022024c5294f0424a68afc1d2975f7d300e35a4440b937f49684ceeeeb64277cc0cd",id:"b513d351901d269acf8389af328ed20dd0146542f83b80cb4c3ba8f8a0fb9bce"},{type:0,amount:"12028504677",fee:"0",recipientId:"APg3XHNRy3pxHmg9jnbb6iSqq67dEyeup6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022018b80f68abdc7e6940dca597bb8d24c3a6150c3b6cedfa85f13f3e73aeefb720022047f45325bb01e0d6b9f300a80b0b5b15d5f9f453b646dd84371cc23ed63186b6",id:"e19f84fd9f142d50860f6725a79d8c1a14b90e19301ca793ba4a1d13bed8ab22"},{type:0,amount:"12416758078",fee:"0",recipientId:"AJZA2GSpqAAjxCBsQS6ASjryGwFvEDz4wY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022012701d828ce4db33b2f03f4dc42720189cb3e0aa82f48ff8e0284b3a4deaa0b902207a1685bd283e1c51c42002a8041c31ee518307c4b86c7f22c78acdd863cbb4a7",id:"3c75b71a126df25c97986d07402e8b153919ed29dd8e86ef7b5d232dc4c27141"},{type:0,amount:"13626793145",fee:"0",recipientId:"AHUzDz27ouUBRnBB8MVYEAjaEkjzfYxAZy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207dccfdaccd0afa9d7fe39da6737f1fa1588cfaa83011f9913e46f9e0bc2d60f5022030b46c49b11c5513d7041963c76394f6a643f60fc9f76af2549ea72758d0d33e",id:"ff635c6f6988222c2dfe24ebecd0ce33f5c9310dda198657343c16d9c2c73163"},{type:0,amount:"13900000000",fee:"0",recipientId:"Aezpc3WQ487fMYKeoH5CxF3X1BQpG3Z1Tv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ee21909eedef0a8e7c587263c5a6d8430dc487a1b96ed2d5c662e69c9cc6cc610220341bac16dd02f854fc19f9f3af37489c0b4f4035bf309bc6ef81f22997a3b814",id:"06f9cae8f3f46a0f3fe4f1b53efe34cc8c502bd1fbbb2fd15d52d8d0cef3846d"},{type:0,amount:"13900000000",fee:"0",recipientId:"AUhaVctz4y38gYtk8kAH5iiHsUZJyiV9QK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cc8a312b243e021212b170071f32ce4174013460e275166c9f17020e769de2c202206b71d09fdc88f4ac32677c19ccaa21408045e1756ac5d7ab4b94352dd21ed038",id:"e5a8d56567089b515a7878383ea67dea1690fb4624e8870f566848a28fd2467e"},{type:0,amount:"14407475602",fee:"0",recipientId:"AN5fzWHTJm6LuJjU2iLqKyS2HGrz7n1awJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6203ac00161224464cc3c4ec7df00bf57446cbc9b19d96b4895df4a550bc126022059ec4181988c1f19ae9e790098d17bafffb2668d11b4aa2dd6581abf4516de0a",id:"817ab520c018dbf31f24790d8ca23e5f5c1f6e598cf204c58427289dd9c7299a"},{type:0,amount:"14554490659",fee:"0",recipientId:"AWQzdRCybJwnWsJcB4Ux1ZWCcudmuZj29L",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f61c81d36b176998d3c00b6490c0ecc79726693b04f7f32bdd0522076602e99e02204d8bffead0b7adc26cb5245c5a8de9db29909a4982bc1d371db83e69e005864f",id:"397f2509d05348aa49de4a15f4d3adec5379ef12521541ba3388d2c73d45ed35"},{type:0,amount:"14561654186",fee:"0",recipientId:"AdBh5du8W41f6JXJxFVmHE5x97cRG9kojq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b15dbd1e14d3a4ec461cf52edf840144bb0094e09e2a9d1b91f9a9669f6b929f022038ae77df2e975e856a57f656bd04f4fd8b08b11166503de53affdf50da0891f5",id:"39d14c1d51ac1509fc9dab4be8b3b40f540c12b11392fc7fb45ed208f0696ca7"},{type:0,amount:"14701505716",fee:"0",recipientId:"AaoM7ppRsH58K2ABYH1YxSyBKW7z3FrDpY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049720a06d232f1232cd8f09e17128721f32bac33a8b210baa322ff6bd813f5520220402aa73d01e414a5953260b79946172ecb53e02326c9baef65c0d6a80e71afe4",id:"6d93427a7be1230f2faed5c635893d0f7e376b9bf13fec2ebbd7d6d314bc7e7c"},{type:0,amount:"15000000000",fee:"0",recipientId:"AM16EJe7VJpQtFPkoYLyatgNDJmaoNW1EK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ab3dded9d9a320de89ad11a137ec45cdc6caa558b1ed312c2cfab6a5e73028df022050adffc944953f798ddb791b9f233e1503856f6c16867e06cb91fc18f503685b",id:"a9e8e4e49962cffc045abba3b6eaaa77f2955daa6c3b2bb62497f861e26c5b04"},{type:0,amount:"15000000000",fee:"0",recipientId:"AUPFE3QxTSpq61H8T5pumPcZNBtxbPSCvr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc62bb643a1344403854746bbae7bffc44228db69528c485a1bac9b44051160302207628f7a3ca9b230a77dfa13714572f0f28d421356288fce43d695753077173a2",id:"c4ced95ee40260f04bb935b7709c4a19c969b77311dcc75537165c30f43793a4"},{type:0,amount:"15000000000",fee:"0",recipientId:"ALeKWmZh3XGjdgSboRyFU5p1k1BQpuriwt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203abcccd1b15a9857f111db5dfbc65135ae361ff3548a94cdcf9d18f38f1ccc4d022064f4dfbb1a13e532ea2d629ba4a4d5cc85622c18e6f5fea4c5cca9de6e8aeca9",id:"110689874c1ab40dd0cdb8af84630a1b89074c4f751e662105017f5e351e1841"},{type:0,amount:"15000000000",fee:"0",recipientId:"Ac9tpzJ5h72V7rCobsaLxeC2Y4aHmki9EK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200a67c0321177682ad46b56c287807a6c6fb3c68cb35e7fea4325c26b1ff3c3b0022038d12784c4b342b950f43dfc5592d57703c33e331e867a33fc0bf5d6243406e3",id:"3293e055b85c9c3a34f2099261032891a326cbd39541a80dab24cc4c5efff8c8"},{type:0,amount:"15000000000",fee:"0",recipientId:"AZ8hMVpGVT1hyHt8nonk5ip8fKFCST7KZ8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e1d4503779cf4c4e9e90579b2de7eea38a344ae1d1a5be81961309118b13ee7202207b977b82d13e913e0f4f9f37ac713b8deb3ea5b752cd3495af4a00a99c62f853",id:"b1d086b1b1bdfb25160c121232d62f2246e0f2125f557f7657439def1a5b473b"},{type:0,amount:"15000000000",fee:"0",recipientId:"AXxBftbe7ARvVnaLTpXyY6bSWSnL1b7iQw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022057b0ec2903cf6d7741db49ae7ed7e6243e2bda73f878c5ff93e78b9e9941169402201c199cf06a81408eaafa26c8dc6195f243fbfd193076df3ee362e502b555ba8c",id:"5555d7f9855671019c47805a4aa14c3054fd4aef01fa161cb7d7e3fc79388b0a"},{type:0,amount:"15000000000",fee:"0",recipientId:"AcB6nKH6ueGiN1ygXurgkdXUVTNGPrAiVA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b9a86d98d13a708b647d00ca9a28732af3707ed3ea34b173e66a20340666eb9802204de9b88e185c87055b454f146b8472d6513883ff065ebb251c155e59ac56ce28",id:"3922852d56b26b389bb1cbcfaf3235d2721a9e65e72185946dcbb46e09de2889"},{type:0,amount:"15000000000",fee:"0",recipientId:"AZJByMD3mzvS1ux4emnxrJbYAf2mEsS8bu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e7c70ded41dc8ff70b306e5fe5a01fcbf38057d2a38875e9618deecbd5e1bef40220031687e7a7286f4856e056fb86a600c5fe06cfd05d1373ad451a8e33c3d7ffb6",id:"dd619abb201619f8e6361f54aff5d95ab8a45f1b75c866e86a68b4319094bb01"},{type:0,amount:"15000000000",fee:"0",recipientId:"ARVv9D5LedrdyjyuLPM45ALNowdWZCu9Ww",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022029337e12c30c5a1f3ea0b17a53dcc263bbb88343f140765e5dd5b7661cb7249802206c50a6520a2b47313a614d9d657199b5bd22f6a58c10374bde951078ab66bdf4",id:"271e64895989fc542cee02a54399c1e8dfab53f596658a095d7f3818f9d147c6"},{type:0,amount:"15000000000",fee:"0",recipientId:"AJ6Swgm7ABDGZd7vdBuAv3xHL64MGSFZ1d",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220640d9872265a1f6b0649c593e9850bb77023c1122e0483e03924cc44d8421cab022063368396d31392bd0fce5b5aeb2d0a745a4462ee3b47bea7499a8bfdbab3e218",id:"b1c51b691bd763cf532b060f04238af305a3965f2755d3b8295c1145c2c78acd"},{type:0,amount:"15000000000",fee:"0",recipientId:"AbiXRAWJQvtxiEMzVZm45Jj7dTYF6amMx8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008a0d3a40ba64688ce776449872561a1887d272b885ed9dc77464f5e0e9044ae5022062db52bcbf422b12bebdaffbf4f207f0240b803478764aade7c5440b0efdf413",id:"4616809d23f8caeac00a90f33547db0d3c31b6d21dc0c6d1223a2f2b6f8acb9b"},{type:0,amount:"15000000000",fee:"0",recipientId:"AQd294jzG4M7snWPK4chtyrKDTGBN3xU37",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220073c9db4fff5e1b5d59f7b36a29d250ccd0c352d8e30f42d641c0aecb9fcbb780220304f3f1237fbfdd6feb055a4d193a2a24f3d78d36891f86c752059704cb87d84",id:"8356eea142b2f8dc858aaf9ab5038dbfc8f71f6a6fae25eb0f9a1e7b0c9c02b8"},{type:0,amount:"15000000000",fee:"0",recipientId:"AJ4WmzahkzX1mzQGQ2ASfXUwVNsTr2nK8c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100beb99fe85584c1db0e164c49ad211ef99e09b62fecb4ab5bd388b82f3069a3b602206657572320712fa459da101ea422229843f65f7c63cd0f2ec86d49aec3895cb4",id:"d3e6dae3d4d3bcad431182bcac5dff365e0ef615c1bc44be29776b9b62eaa847"},{type:0,amount:"15000000000",fee:"0",recipientId:"ANZyNXsDsx8pCWwodv4VBp5vQotCgFSLpQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c1b2099ba3d7dcc366b013be5a09fce01599bb707d25c8ca4b8112c1fa65eb1a02203468b56d9ed1247cf21bfa67fd83307eb6c78741f51f24d5722033249193300d",id:"eb1c6fbc04b75fdb056432946f90715f02c4a1f3cbba7a1da1e11cf923d9c26f"},{type:0,amount:"15000000000",fee:"0",recipientId:"AGZ466UoZ8rmMwYqCobkJieDn5WnmuNJBT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220115463a85eedde299e2181968838add9326a9f5f11a066e2de1063372d96d2b102203299c9a0998b75353b474a383f6a8ee5636964ded2265284924a1810dc8a2e6b",id:"42362155399528b008cb1945e8271cda6ab8232ac38c1a9f1ba092722162d5ef"},{type:0,amount:"15000000000",fee:"0",recipientId:"AQK3Ew5GGnHTyrFyt4fZRY6xobNoiWAa9S",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220232b18ce1bb8fec9f105de89b07be45b4851032fd57adb11227c7b408fe4910002204fc98352522425910dedc1a10876da390acdf2737a3efeef36afc0b77c26c114",id:"01899d20bf6bb2163d05c2dfb1800fc9abfd8fda8c708b313dd38c44eed60e27"},{type:0,amount:"15000000000",fee:"0",recipientId:"AKLLCyWEnnsXPLxQ1S91J76WXL2YsgCxo8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009b8269539e07b9055f9cab99b49218c0535124d99a366cba09a674a31371e82902203b6b6cf090facfbda718b53f181e046bab31040ed1a6bcdc702c519b2fec40df",id:"053d16a85becee53a301904de426d478499b1de157a9f15db98f91c4783173f1"},{type:0,amount:"15000000000",fee:"0",recipientId:"AZ36zcRJmdUJ64NvN1M2T9pzv7dLAWtp6U",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008a664c0db5cdf291bb0da5dd05b22a539f8b538286650c2f7dc91def82ecf204022035033583b9bf16e4b0e3db65b4125c567e0591a8c69b5739ee158b55f8c842c9",id:"968c02469edccfcc11797a12463cef24aa7ae281aa648854fbff46b6634b5279"},{type:0,amount:"15000000000",fee:"0",recipientId:"AYhCgzBpHXC9kgRCu9FUyRpjtqvfqNSr4o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f207cdc66a586a04eb9e7a5c777c4ea37434b73dde96b05a0c7ac666064d69c7022058eb07e5f8adac444c5eb113d25d09da6fa42e9f7a3a5ae778f479c953039610",id:"67b0005a47824abec015c2799d99ddb2036bbf932a36cf05db7575fbaee92098"},{type:0,amount:"15155129039",fee:"0",recipientId:"AN5x6WfeFwtvyqDvpaN6C1MusAvSCzZU45",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f2577c3278f2aae85a9cbce9b581c9c094d2f33b2e8173ff6b4091a12008da9a0220753f0064d21a0b871807911194832c3c255060f3a6dd7730fcd6538de884392b",id:"c2f08ecf56771833549e92030bc839761e353fd88330cd7e414f9e5e33869b99"},{type:0,amount:"15155129039",fee:"0",recipientId:"AcgtP5SQDHp9gjDwe4KPVVE83JLGwWGvUG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210096dd68b49e599249c0d35342a8375ef543fa62670c6f67602e2415db4b788cb302202cc2edc7b1b318c4c127acc7fdcf34c7a5385d078a683cb6f10593272091a6a0",id:"887cc5bf0335496a821123b14efb9b9e989645f90911c1f7fdb9f44924c89f52"},{type:0,amount:"15155129039",fee:"0",recipientId:"AU61SM9NBrBfiCVyJ3wYMZ73GhvGPcQhkj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022017fa1b374e87bb1dcc55ed07a0dbd64efa5a148d5b1f3604b6890dc43ff6022402204a0e788d401f1223b27b4c2e0cc5631cbc92d1301827a53bd2d7a7ca411d41dd",id:"3dc4b91d426b88fff8d78258c20991afa63c247572ba06ea469ae2a4887a4aa6"},{type:0,amount:"15155129039",fee:"0",recipientId:"AJN82CKCtJ912F93y6mHEmbWS7ny1He3c3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022042cced4fe76ea745f6e41b70a696a800c2172eaecb24c77845b35355f882dde402200e7a5e5cdcb4411a92bae306df4c01a3ff8ee5d53b6972518dbb1f50f768ee0c",id:"445db40bc02d41ea28aba75cc2069cb212793b0c202fe5346feb1ae304288c35"},{type:0,amount:"15458231620",fee:"0",recipientId:"AebPWjx5BvurHauVa1Qj6nJD1h6h7hrnAm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eb671a7f10f305a65bf38632f205cc28f850d304e24d49cdcd19d7ceecd20b830220658bee7489d4555361f2d330fd31f59e146c489070c2522dbfb2009a3ccc5209",id:"0a6de5b1e8dfbccd33051fa1bcdba56d8f8ba2beef3c5ff7310620695ed8f7ed"},{type:0,amount:"15912885491",fee:"0",recipientId:"AZTp75YcToEXwnZU51Meb5etPteCx72DCp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100831c7fabcbfc8e4f0d7d093d2f80f4dc964bbbb7139d1f438ee539cb3e5266ab02207a4c930391f10a571b7047df2059de1aafc255da9225425cc09f6008e8b93889",id:"6b144c56b46f2d418538d2af9ba9890847b3073cb6f0d91c0dd4406402361cb8"},{type:0,amount:"15912885491",fee:"0",recipientId:"ANFaKygQ8EoZFiyvWi2SaRT8WbfwXpW21R",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205d825095fba54447404abf0c7721ebde7ec9d1bafc56bd4673eaa2146dd0c24d022029586e4fd33e94280ce99760eeeb4f12c51e2b068df63cdadc090dc5de09a741",id:"74f7c9d800d11facf0e9fd059069e0a05eaddefddc35e684c77f8bc9c6502d45"},{type:0,amount:"15912885491",fee:"0",recipientId:"AVbpuFDTAyRmt1BRakzWTJyuokTRpBbeqo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f70e2674210db0cd7ab970fd8b58cb86da605ff850284058d8d6803668950ff902202669e91f8004f9ad85b19312539eb5b1a393d9ed101659980656fca3a7f2b978",id:"d828823d3b2287d38edca76dd4e83a88557b2b8da43475cd6197ce16c906834d"},{type:0,amount:"16670641943",fee:"0",recipientId:"AG31y1h83VJt7MUvv4zu3ergGFqfpUpNkw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022050e9976c6dade3e5c5e365ff0f4ffb1990ff83e6613015559439c18e62395ab20220083ae7dd6567213a1ea0d762c24af46f8845080bd554f57e675b501c30c11ebb",id:"85df60d54bca2146dc642dd2a2bde7ec60c2b00ab7868b3487c3e4cfec742385"},{type:0,amount:"17079830426",fee:"0",recipientId:"ANaUP88ggMTde3BhtTXvm8N3UwSLADG54e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207e0f782747a7020e5f2b0c72ce0bf366bf43ce2b8016c937d376adfd583aadfd02204607186b59392cf5d7899a8f020fb7298d974dadac28f3beebe82cc58b2843d3",id:"4a78a7be1bb24b6b44a6d8d20a5be158edb30f7e33028703a01488194439628e"},{type:0,amount:"17300000000",fee:"0",recipientId:"ARUNkZzsiJa8YECfHbTxiCGv9vrFLZcdKN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d143d7c5f2d41212209c85a3f762dff3321fbf3e766b6746a9483e5136f62ab402203117b6c3c8fdeb69dd8779319c3652ee0390e3ff8771cab0fcf18512e885fd18",id:"ebc1f86a8dfcb7ae369e124628a80298b868939e410a2bb5262c467b43a21b3e"},{type:0,amount:"17300000000",fee:"0",recipientId:"AepyttoE4qxeaX3Q6tmhvJmhWR4e59UgNN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220100a5efb6722cb9e96ebd5bc5af40854bc765e7b68c5d42b56d7b92e48c32ecf0220428e3ef95633e89d1b125fbc8c75ffeaf093971b70c553722232e464965ac6ae",id:"3b6bb91064213ed8006dfbb57a7aa9fc9b92acd1ff152625bb13c84d4a1c9fdf"},{type:0,amount:"17300000000",fee:"0",recipientId:"AK1DoQ2TzXwZFpqRuuLRkuMLtxvnwYA6BN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206d8e23fd7873b9b3b176c2f81ca68bb8f6a39e86f48e01afd58f1d72b2f370170220160f43117a81dea41d0bd16bca567744b30a0df789d4cdecf1b4969f0de5a16d",id:"f77518bfec4286fd33fb36f0c6bfddd86fb51a4394034d80f12616b9c839eca7"},{type:0,amount:"17300000000",fee:"0",recipientId:"Af2dxbRzquQbsEDdc6YyK38EYoa86bLaS7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022072d8f98d2aa1dc1ea479aca3d4b3232de3619674c0b484b4f821394ffb91663802201ef857234756b2c4dc090b32375a399c9b9981c616d4106ce35f18b55e7883a2",id:"c05281457bb1438b3a8dd85840f6aa8a4e87089f8f41e3243ca146f1ca406836"},{type:0,amount:"17300000000",fee:"0",recipientId:"AdgRuyVNXHvKYyqfTqHNN6FL8nQhFuybe9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203fcc0e870991a56bb59b4d5e3a8be7efa5a07361a34c19802e4b7310bf2a79660220281eee0aa154c8ceb369173ba099b1cf0a46117576dd77d9d30e0bbe7cdc55b3",id:"bd02783756ed0a83080748833bd610847e7a54be76c138b07b417bbd09589040"},{type:0,amount:"17300000000",fee:"0",recipientId:"AJZcbQZWg6yk2nZvxpuenxNEg5vdNfP7d5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204f2170f03f42e1a6013ee9ab7f585e420480fc72309e219aa536de5a1eeaeeb602207b5c6838c72cb39c48357df2419b569982eda8275bc4662c066faa7b390dc4cd",id:"3742052eb3b87c2e55476c66c85fb7d6f71206ef8c3c94c737a382576f142746"},{type:0,amount:"17428398395",fee:"0",recipientId:"APGnKfbcBc7pKjbSWd4dqYbC6zAS9UQn6u",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a9b09e31f0cdae58a7f91e18a967e12436dcbb5dc3e56304e4803d942cbbad7002204d398385e1776bb0ed9f1cf6325cdccfb8bdb64a78287e4d96d18d5754bab1cd",id:"f7bbbad0d7ef708f2df7af6116907e8b89d34348d1786d22687f6e680e70b918"},{type:0,amount:"17428398395",fee:"0",recipientId:"AMBQecZh541er6XkgwPgZxk7fNLWUDwjXZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f78352db270ad2e970789ced7fb13b976f20d45905cf4374d9ecb7a7b89a072d0220634c8330932815d3c89aad1f22d74f4305f9a0209279c3b5b5e849a573b763ac",id:"849ada089f0422ce85f82cf22cb73ea146af98d1166ecaaab0f772873f854bed"},{type:0,amount:"17428398395",fee:"0",recipientId:"AZHYssEeVUGz2WkDiWWkjefoSRcmNtKcxj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206cbf14e3cb952df65c1688fd79bb6dd657325b21dc9831ea4545617bd15acfe902202e828910f28cc99a91b1e28c8000b53c5389fdec3920c502ab7c2116c11d111c",id:"de2af52762d16398e677a58eab98730dd6ea3fa036b148fe8c701da96501938f"},{type:0,amount:"17428398395",fee:"0",recipientId:"AefDEneWp8sNsesZ4aQkGk91vKWCpMm23n",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022023939f4888ab00f3e2c258fcb8671a70a8b1c25a2eb52d610e1efd91ca5f813902206bf4c893b636139551282d0274f6155df35e46688974c5d9225dc1e3c7ba2230",id:"dfe1495aae4a5c62976804ff5ecf1e993416996f4cba9bf1df0ab0795ef5005b"},{type:0,amount:"17428398395",fee:"0",recipientId:"AciqQathcu91PZkK7wiKqRp61Cddop7YwY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201b8ecb50cb16def362f572efe3385be176d0ffcac0aefe6f9f378d5e899e445d022062907eb7d5381840cfcd021a1c9283dc4047a61e76df88e9cecd7852ea63e3e4",id:"e86a19a03fadada17fa359e563c25ebec320915ce818f28bbdb3dbe7a15545e7"},{type:0,amount:"17432660696",fee:"0",recipientId:"AJTnGpoECgBAwkcWJFgxNAqq6BNNwQP1hm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022045f5da273f2e2f227b3d422d418e3cbf3816958282d21131f3ec2844c9cd76920220591b8a380ee924fd2550a1e52a425fe3c7f185448347c119d2f0d515e15135ee",id:"aedb2f45e57c01965371534c52adbb99629ba581c788f7597da354fd72a0b885"},{type:0,amount:"18380568436",fee:"0",recipientId:"AUWioz7GLb9wrTXGMLVMGa6X4HytaUz1mt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202dbb34ce6baa94e4996bf50310955636c5082e96db5314804af02e4c446846810220333215217bd86424975be8033217fb1d74b5897ba9cbcac196efa9006765ea6a",id:"bc0efb1b00e63694849e719ee3552176f4dbeaeb943910ad34b681b8250c0280"},{type:0,amount:"18726879545",fee:"0",recipientId:"AXJ2kuVeuwa2MMtc9XQqe5VBfxKgt8ZAsy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210097fe86ad5302cdc3a189eb42fc873abb875e7f3c4f47b4b5e581e04be5a37a0902206e8a1fa9cdf78cd7d69d0e12059709f4c2301fc6235585db9dd8d638e01a3a3d",id:"a4cbe3e424ff70728cfce9f31324b8115012bc47293d480f62b05228969396dd"},{type:0,amount:"18826504375",fee:"0",recipientId:"AaPfmEsY8yCH9UhUdHaWr29UCruPbQC8EK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fc0dabf71ef6e74f376b5c646ceaaeb09f65c47322096e0d130e69463bd0a32f02202b52c16528b3106348834e75e68137fff3908755171c8ef89ae44e480da6d774",id:"79e4c62a158b1d95852406021ecc176c2eae643012071320c741c472be24ef25"},{type:0,amount:"19758347933",fee:"0",recipientId:"ASWwdLfs6zYsAnQB2MEVq2KVhbtsuuWELk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100af87163f52e7bd36dd86f728b18360df16d9d9f499acb1709a0e365080ead6730220016e4040fe172f041da4ea90eae432d28f8fe4f49326ff7178f087eeafd52945",id:"b60e9a8a4229478192e1bf5df84df85e009a8517b5add54ea0e779550571515f"},{type:0,amount:"20185909534",fee:"0",recipientId:"AXYVmQKznY2qtzpryr19zTSjTbSkfHd8aH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022062ddc327d35dc5a02d06d6a91f9303fc340829d731a2ff8c71e868482c99d70402206c4bafa555098c358b0b5e68823b103401ecad4a05a65e5a49176ba0e435d09d",id:"60d339709c06fce066b14b06536b0afe9d7d8f0cd346da5763240fa937d2b7e6"},{type:0,amount:"20235049486",fee:"0",recipientId:"AeR3975uH4kfYydrwgLQgo5pWkmJUww2nm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e06a134e0545f41c5f3a6f7f54881ae07c5e7791d23a7c9786c3015fa5fd4a60220422553d947eee3af1faf66e6e80119511651d5a2589d39c34d7cee4daba94ca3",id:"8242c9f18a6fa8535be6511f8b75cf6cbbc8da6cb962f8f9a0beeb697a95ecf0"},{type:0,amount:"20301994953",fee:"0",recipientId:"APSfK5XyawPuumG2me4ovkwDPKCSx257gW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220789829516e896e6f204699d632176feb9a721d69bc3b72392ed1a1a7b787efea02203f736d9ffcf9ff0b899d7ea648d1b74e1e938a4fe26cf3c8c6f556b0fb4a4bb7",id:"e0ea1ebc9da7c1a67fcee0b06203e7df1bc6ad83444f4dfff4fc37ae58f41c2d"},{type:0,amount:"20800000000",fee:"0",recipientId:"ARwCmALF48ZWiY9cCBWqhCV6PkFbp2Bre9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210098dcf23f4386de84fc4d75258d22469d2bd67017fea3417396393437d831628b022064427eb68be7fbfb7d034c682b2e5a3c0a740594da40843dafd4fc8fe1593528",id:"9c76e2b23ef60016ec4e1e54fae90bdf727172be152125e41fce7a69fb04f73d"},{type:0,amount:"20800000000",fee:"0",recipientId:"AUGQoqoSkCGdT9gYPNsuFumhksQBDjFLeS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022071580d7f06e5a33fe8e140208441455af5cd013853c94fd983c457e34685960b02201d7c1134e7c3e408b2dfdd61916e8b1fcbce9fa3e5539ddbb00ec47c424bc510",id:"8f444d8c999f8cb2a73f6b48be6f497b0230b4956ce62bc3c2c646367ae79d79"},{type:0,amount:"20800000000",fee:"0",recipientId:"AQayPyz6AWMwY8RPTCPeVhxkr8hNuez3Qi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022045fc1b2a0389840a6e8495f0bab89579c2927936bbdc1237f56b2159ddbb152802207f2216ae4e65f848f96a5da8db61a64c7b0ff16a973783d1a6dc93afbabade13",id:"805e65bf89a54b7bf5043f510d74c9bc89a8fbdea7fa741a68bf4427bab5caa6"},{type:0,amount:"20800000000",fee:"0",recipientId:"AGahFaiYodwt82Qi12rt5j29p2C2MeTLBh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100897790cf4bd81566f48c2ade97bed334735704f19a67f8f9ca75f53c60756ad30220468cf778cb00ad16e4921c2377a06c2ea762f87ca41fc55e7864fe1cf18b841d",id:"133692fccaea85c45398542c5d4c8ac7971d4882764b60daf649f81a3204c49f"},{type:0,amount:"20800000000",fee:"0",recipientId:"AUPkqi1hRw1Xk95PU9DmKn489PztyNjRYh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200fd59320b0f0962b330c012ce0ebb55791d59ac26ceefbe0f89b140ffab7e5ea02201ace6578816b4751dc693f4894e04c25ca654e9f962d7f7ea710cf55a759df13",id:"faf85b52fd458c9be80059cd065cb328853cd66ebe35bc2f0c76160e271cdbbe"},{type:0,amount:"20800000000",fee:"0",recipientId:"APuwwoc1Btsz33vZNtuQDHNznD8G8CHcNY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206633a9f528e3430e1ac997eb95252c483c94308a97462f9d8d8b6175e04efc9802204cec670befc7b7e2445aea1ad7af8d300a0fdcfe5f8e185df47bf5bf2918b210",id:"886bf5c983e9f90993a7fbb5a50064a6c9b32db2408d09561951578a12db73c1"},{type:0,amount:"21622003904",fee:"0",recipientId:"AavfBaCqpww1LarHdp74ayFp3TSVZ9QHdu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206329d87b5ab1bf32142a5688d09638ee7b80b79109350e42fca433dd4de0170702206d27e82dedb5ec747f7e16eae5c35408ad6600c0a847c130c615c7cf2875ecac",id:"3ac9d7d0173837c2079cfe16d4079d1f960ccbd320ecdfba026819239c4659a2"},{type:0,amount:"21819296752",fee:"0",recipientId:"ARfsXLuowXfLk3pWNrJprdbn7F25hwMRYi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207289896d987705b7a0be5edcbe197f61cdf28efe3a0844bcfd70f1f1e36f3bfe02203e49e3d9e01428c39a8e5966851fe94d7b798b4c3c6690be3a098f1ecd16db17",id:"ccfc33a398e393b8abcdc28d431fb5a3b4753b15544d58864d7a405b828ce957"},{type:0,amount:"22277220240",fee:"0",recipientId:"AGaMNkFFH7n6bXwKbXXEdfuDCN2JC4JMEY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e619395ae8cfc6dadcea3a709bb27a014c8836092bfea565ba8fa40c5fcb42002200b46a3a4503971b4238fd849b15a40a927945babd50e7107e205d9fb40bd4110",id:"ee656950500341fe56fbcb6b720b120a5e6ad4eb5eb75a2b89651b0526cbb782"},{type:0,amount:"22426664055",fee:"0",recipientId:"AYL4yJL3TfEafvWh5abik9mjrNGDS2N5ZT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b94073a33031731ec6ca84bebbb2e63e45d4d0c509b885684b7315d769b7cb7b02202e0662f659c239b2a69583fde44eb38e8650eaf91a9edfce4e9c602106fb33df",id:"b5e89bf8f85d527e891b8ca3ee0f2a2e24a1daf63e50e0ade2d791aa52e03b06"},{type:0,amount:"22493303746",fee:"0",recipientId:"Ac4V3AcXoBTb3gDXkBofGd996DySEZ8w68",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bb49539eec3c2ddd506812379d6d9a126f3cb252fce6e918d72920dc389db7f40220135ab2cb8c335ac8e2b7fb563f9b3cf5ed4a3189e4ff9008871b21765def468d",id:"f418f20dd6f1c0826b102833e01fee05ac5eccfd3c69e70c6d9694c9885fef2b"},{type:0,amount:"22606906279",fee:"0",recipientId:"ATksXZghzmn9RkctvKrpwPEctjEFG2s6Fv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206ca341544ec2f0047a0f1001838d1aa42c0d94b49257034e037258bf09d34a2e022021c6958774ed74bbc8ad0fc4fefcbbf3711bfa0c0b47369fad575001fd3d7df6",id:"42e3bda812617277293b0efb08d308dc5494e47c5823d088e1c0520d2082ff57"},{type:0,amount:"22720508834",fee:"0",recipientId:"AKy9y4KXZ7XhtWmiodsb3mJSE2HH3H2VtS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207d201e258c9244f724e94f5764513a16a42dc2aeddd50da09db88b6fac5919350220437202432b51c67ed7538ae1af5ee3445093d5fe85ab500923b23c866a4e12d9",id:"54a8922aceaf439f3efc4ebbcddcc60adfff7170351c57fb38a3a23ef2b6e1ee"},{type:0,amount:"22720508834",fee:"0",recipientId:"AdQTTtT1HGKsAuGzs1mgqBnwXHtMVCp6MJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100df406f87bf59816e855ba7749af423879a850e20863ea5bf5e0ff96972aaefce02201a50f1f35dedc824860e5785dbcd6b49eb09510df251b5be71d4ec1fca16e546",id:"7f97907d31a72371925ee8ddd94f6c9460f2d7bd837533245c2aa41b9fbcab20"},{type:0,amount:"23338898720",fee:"0",recipientId:"AJeeb4cmTjh2oKsSUt6b1Cted554SrkCuE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201500734913f9fad425d61e07ed00838e1c1e8171020c25dced36849b81be9da402200cf05fe867256dfb7467009a78e47ffc001eb80835413b4c558a465cc08c048b",id:"888fe214344f8d288fd0107747d8bcfc1cdd1baf596c75a1aa493b2e086861fe"},{type:0,amount:"23976819323",fee:"0",recipientId:"AXtJWNWJctDDFkwuYC3J8CNBGNJorqs5KS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220678d7e0489942b5faae8fd0cf73542706f700bb4a9ae7a7037f1f13a64b74401022073f32ad4ca5b3a8ecbf843d645876656ff46382057586a85909c8454261d829e",id:"d7c0a0b53885f500999c7efde8b6f2dddd186247bf94f0f9b4a1864630d90dc5"},{type:0,amount:"24200000000",fee:"0",recipientId:"AYet9i4fohv9fYye39z6TVkTkdAeb7g2Gm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204382461f91941863a5256166d0202c684e4fb1ba39ac43eb7cb432c8b0a90a0002205ad3056fdf794935c28e94bab65673c01e51154624cf695331687f0a3974b420",id:"a14fddbb3784cf2bf6491f244fc9830559bc8b3fd355decee085db44c9953b5f"},{type:0,amount:"24200000000",fee:"0",recipientId:"AS3b7yzfnNX97TLzWm4ez9GiAfkbzs8WTa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022075bfdbe554fb74d09142042bcde603b6390903a8baa2eae9995193f87bcabad2022048a005a2d88496da6de06cf027ec78de4563267a8de12c0f258580d1e2d44638",id:"74b83c00431943cdf0a97d5f801eed6045c1f57e10d0c07c5437954b4b811efe"},{type:0,amount:"24748325720",fee:"0",recipientId:"AGUdj5MtJ4HnmcAFtdd8GscPBGwRC4hzYK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008600ceac976e10082007b40015e56d19d6924f888e6e620ddf8ae114bc877b5502207cc0afad875ec422d817fbcd6a067ffce41c013d6d971083b52389ee567726d5",id:"a64ef1a8982ad70a13440e5a901066ae8bbab1b1015113bd53a48c14e886d2b9"},{type:0,amount:"24859867470",fee:"0",recipientId:"AVu5QHc9C727s3wXJACZyvFRc9XJSiHkHs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ee316c58495cc4729ad60d451d129d7a4f98574e764f8cf5bda95050e1a8c79a02204ba8d962c6128d528dfeebe64156e7ea6aed5b4c98f468265d5886066c350711",id:"81e9ca6c942e14621b6c0de8ca5deb8200114cc8dff364ad52e541663095090e"},{type:0,amount:"25052610401",fee:"0",recipientId:"ANmAMut1Egf7zK4DBHbaki6tv7dzgsEzBt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205f1aa6c3bc84dc585915658e7e03bdca6b05307a86df928cac71cb523be7510b02206cdad96a72947eab1a24acd55869a8888c12252583e3319ce11ad2de65f64857",id:"ea5534e532dfed08d41e0c0668e5b1d3e1aaf70831ff61c6afc65562580a40bc"},{type:0,amount:"25157514204",fee:"0",recipientId:"AUncJXmGFQDzHE2XWPWEqitaQg5Azw7Rux",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220354217fb3a9f69b30e0c74b86c3474260e276e4553c0dccbaffa5d2eb1101c5702200b9dfcb85de1773d239fa99288959577030eba8f3908a4cf2611d52c5f5e58dd",id:"bb609aaa336872e1a90049e64e08b329ba0e9b1b155b39555660f13e900cc5e6"},{type:0,amount:"25248444979",fee:"0",recipientId:"AZ5MTXTuHnMtZsgpZJ2zM9B8gWojkpen4A",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100892b7674c9045e60026206aed6c6d8ca9fea571c02fb63a3d852e26de4d9aa1002200f4c29438eb6a7ec035105771370937732a0e076fb1bae458d42f6b864784d0a",id:"9e7cc0e06c0f91878772d1f3b3ef00fa270da3087442baaba6e2ecdfb1e788b3"},{type:0,amount:"25763719365",fee:"0",recipientId:"APxxDqpuPch7PfMZ7611osF5bZYEyx5UMB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dafcc214d6f27318979493288f12f50e61a1398bc4276ff9e559dc2d00a2e61b02206b173725cbca509a7d26ae49ab1b063540c8d75843c887ca1e0139029a26d395",id:"b838f9fefc43e5780733198956cb88817b6b57ada2f8b9351ddeb38a1b1b4a13"},{type:0,amount:"25763719365",fee:"0",recipientId:"AJdxs7TGgcizNuXVMYgd9JaXpuyKe6fF5g",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008402e0f1908c2a7a75474b3262ec6a6b492cb8d63d9ac0fefd5e7935f91cd0bf02202e6225f7b03abe5f580bc1c7d7a2a33070fb139fa22122fa075a70d912fc7749",id:"e93052fe6fe08457995307ee8c843d5293f0d62d3a644b4613af01057f7b4182"},{type:0,amount:"25763719365",fee:"0",recipientId:"ARjehcSFYaDpcuEnZ1iPquKMnq7i3sW8Yd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201b094974dd39f06be93b8fc08eac96a942eba37a5ee4aed9b38b4c4d5e85414502203470bb9167f1a5121ae1909a3336caab615fd947a9ba464ef4cdc0ec5efd6182",id:"f9b86470f90ca95e6ec3dba7dcf43a638992d501595dc2b311354b01420267f8"},{type:0,amount:"25763719365",fee:"0",recipientId:"Aar18iMBogeroCZw8S4ELPzeLDuvXoRdH8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f884dc287f4e68750c622c5cbcfa02efd10ef032e95e3dd5163fe0709f331f7002200b8fb3fb1c0a21467618f265d012a2d0094d62b6b95c5a36e77b1129d295033e",id:"7dce050a4abc7ae6ada53d03e78ee7e42774ea2dab60a084cc2f2b2a3f77cd4e"},{type:0,amount:"26000000000",fee:"0",recipientId:"AXbPyMxJTmQ2iN7qoswFQoxAfZWW3wZj6t",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c343b8c44441d845cd4a56ace540f15ea2445b00a22a350a70f4694052480f2602203110b618b42594b5d8e148f53cf613b55d2eb83685120e40eb9b8f2ca2ee36ed",id:"78688e06570c4b2ee4017450f89cf8531cfe1ec31a5422887e84ba2a6a21427e"},{type:0,amount:"26000000000",fee:"0",recipientId:"AJbQvAY7LCed3KXVa1qxJiySXMKWRrLZ5X",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022045b6f2b658a709eb8b9ec4f9d15839cfe270ee0be5f96e6550a6395e0f887c2c02201194477e971ebaa8b7b8dc4f281f2cf1157960905618602c060b35ccc29d8c0f",id:"1604c3e03314a5a83519482df25366aa40aa3bcb3738d7eeb42c177bd1a38b08"},{type:0,amount:"27559966014",fee:"0",recipientId:"AXBwNDce45Bw5upoPTup7NUmdhn8NP6D12",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c3d6ccd2349a07f0a94d99292863b4c40fd1fdcb541dd15554131b6f03b5c427022028e5387876964b386a74c01ce79c9435ae71b6690bc65284f6a88b6e313498ad",id:"cb5a0d3fd3c4edc2414b8036df50caf75b9b8c25b1bb4b645b368291c8506cda"},{type:0,amount:"27700000000",fee:"0",recipientId:"ASXb7xv6zz5N3JVKzhvfLrmZHGGVETBvSw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ca228022c4c0932b3b548d1c3262894183c12f65c56981b54365360acd175db4022037711473cdbfec5110a4f4467d2f4f847cf8e1424a70bd31ed391c11440e4cbf",id:"1d466dc4a218dce9c63f753870cdd645e994c9af33ae0777596bece6fd95bdb5"},{type:0,amount:"27700000000",fee:"0",recipientId:"AJMMbNCj4gMpfne8rg9QezvdBF9zxPfysh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202ddc599782c761e60e98b40880fe924a162495a916e30b4fb7e119b5a0ed0a8f02207429cbe9b1e529682b78c2e30e8269673845621d809b9b0393b7386e396e0378",id:"a0c287269d928a06bad77dc7366afe8579308331b10f2fc67b0c249edd5652ba"},{type:0,amount:"27700000000",fee:"0",recipientId:"ATj3133FZRJqKK49nScR4yZ87S6BAWdtZm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220690493de80d6ae99cf3108b18cbb9ba0b18d9c283f65d9dcb8158df40623e6df0220376c3e63badab403ed5bfbb298622a9449b8f40aa93f797b4678fb03a0615570",id:"7ea9ac0687d6c936dc61a9c6a8c131412cb973869a7073b7a679508d91243917"},{type:0,amount:"27700000000",fee:"0",recipientId:"APunbT9dgTkTpqpUAqxHHW1GvQ6pNzaTHL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc128ca47b50617210c4efe3991eea82f3cfeeafce7e3ee464acc43c6962fb4b0220434e20c12c72b9e6f1cca4b0f79f5f8023cf054bddbc4e654cd195bed26ad923",id:"7fd55eb9e7a1576beb9060840cc704c3db6c2022c904d6ed4f6fd42bd2b94b96"},{type:0,amount:"27989653191",fee:"0",recipientId:"APTFQ7bZpw8n13J5v5sbgZ96YpgqbdYsNj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022045ff469954bab872b82b892d9cc5422ab3284fbcb4976af1fe34abb3882fb18b02204ec503dd4f4491143fcd84a875b6ec8fa7aca68b2e8f6240cf5cefbc281538be",id:"6941d8c3cb4a3690680b6af7656f683e3f4d7dc77a8ffed8ca64af9ec501134c"},{type:0,amount:"28721448453",fee:"0",recipientId:"APjsYt53nwje4wv8sBUJkuJPgHYfkJrvbr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a5fb78077c9bd963201b4b73f26d1f57f9ff804d0e56080d7d5b11365b97218602205fcb7dd7009b4fc091cb21d8fb32c3b20ba8feee9eb95f19038caebaaa1b3de9",id:"653f5e251e1fa91014fc5d5fdb5160f1aab6408bb8e62baeaa69733a9d11b847"},{type:0,amount:"28730083421",fee:"0",recipientId:"ANPpsAJ5zUvsFSH89FpiuKn3HSE3F8MrvD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203d66184dab85d76f32d99f406814204822417081b933227d247eb99aa5ca69420220470e38f361a771362db029ef353e384f002982dc5a40bcfd846c0db84d413576",id:"24df83ccb61485f2694a460efbb8ab77b38d0587adc4e48855ba4c496195a2e5"},{type:0,amount:"29339140141",fee:"0",recipientId:"AWwHvryaqeQv7SsZVysNaG2xHQD65romAU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022037e16fba790a42b0e56a0e7b353fb740eb499278cc8b9e638209ba06885e27f7022039d8876608f1afc24e7a27400844b4855e6f6b05f7fd2eb45f682760efcd5442",id:"54ec066a0475f3d3bb34b431aa58747a246a1e8513c6d295669f0738ad5208e2"},{type:0,amount:"29885914464",fee:"0",recipientId:"AKWZFvNtkFcyp9qCd1qoaA1XHTCo6yumHz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203dc53e2d991bc80bfe7ef58bb5836b1016fac072bb04dd8ea307c675fb5fa86702201e4ca6d94cd78e647c9f1796bfe6855852a1b08d24033e31861cf4769da707e7",id:"882cb0fe98bfb862e7c1b0c89fa209cc1611691a92290ead9bd049b38fc69dfb"},{type:0,amount:"30000000000",fee:"0",recipientId:"ANPjQL9f5qA6hiVgntKsdre4hRnt4kVXqb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220641e29b2546a81aa442e6b13f7c6ca49cb3fd6ea836a3dcff16f9b8ac88b30d602206804d133dd4ab791569c95cb6db82d9e9ae9e8774ebb14be8de6a9ba15308bbf",id:"a1e0e700abedc3d7ad878be06f16cd2d565074462d81a731976a57411d1c4d35"},{type:0,amount:"30000000000",fee:"0",recipientId:"AbGe4yigaf5FgBd791PKMeRkysFeRdNUJ6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ac923911201411e738cc3d738b588fcefc6809d1cabe40042fd145624958f32c02201f3f39bdb47e5ed315cb3d88efd53d7f7582370261ec2956d1eadcfa33e1d560",id:"99992456df9d1108f11876975230e1f47bbce3defecb092aefcde7d015863426"},{type:0,amount:"30000000000",fee:"0",recipientId:"AGWNji5TSq8tXMXK2JftSbUuytzkkUszKX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202ed1f7fadf1c77665beac7333f23ea2afe3968219944d538a894fd5763f7cd320220637dbe52b04f82ca4f340695b9b77e939d6abefbfc10bd928781abdfe0770b59",id:"f11dcbbd114f6d70f1b90c5a54bc4dbabebe788ae0aab1473b9464d48686f0c6"},{type:0,amount:"30000000000",fee:"0",recipientId:"AZTfaXxi8ZEvtpvZnEbdJZaajFXqCf1B16",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ba7d814fe5391cedaf1eae38c14557e7f7842b0bb618a2043aebf040c10c23dc022002780b3165d68dad87c0dbfe646ca1e11852cc09e8f57443787b3fb4ac636b1a",id:"1ac2891f76ab45cce0d5297e9d896deb831ae644968c4b7aacd3c22ac3e2cc80"},{type:0,amount:"30000000000",fee:"0",recipientId:"AbEXWz7aphvULaWnTs2LMt8PTnuvFM1tcQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e5b9e4859b7541fd99124fae2704d5ccb01d9fd424168d931dd8ce7feae9e55b02205faed9d0716e2abea81cf4748db0189c7cf802706087f0570add7399eb51465d",id:"53ef0aaa67a4d02eebff7a550715542501d59849dff9ecd83b1be58956403276"},{type:0,amount:"30000000000",fee:"0",recipientId:"ATHcSoKCMZzo4KW8ukygbkeJjQ3Hhdm1oC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cda20fa0f3a07fdce9d0b17acbd67703863c40311ded26bca2411ab6ea2f03b002200fd03ec6c9c62e33aecec9f704b7bc5a409cb727cbe2b43e7a9ff7ac894b7e85",id:"6038460b4fb005389c6df2e4e1513468063fe6ef332af5471e7e47390e09f7ba"},{type:0,amount:"30000000000",fee:"0",recipientId:"AKrAqqmZ4SfjPqd9UqtbMoecpHR9tCgmWh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204d13a7b0c8f6267c5134f40c9c03af1e75eced936834f100607ec8785b58b9fc02205f99a3e0133114f48a42f0eab3e1cf9546b2e71799244e31f12470eef16a5af7",id:"4727130dec5138ce4720b7c347fdba334c80d638549992d58e62d8ac6bac5e56"},{type:0,amount:"30000000000",fee:"0",recipientId:"AJNdz4hjGwRxrt8CJSBzsqzTHgyBUmEkp9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e0218eb720635af56f74b4c3f531ab1146764cf082d9c934978c3cbf52a3c65e022041f23226a14f86a8893cee1ef08bbc8521df699ceb6e3925dee5ed947b06d70c",id:"9ae2cae32a3895d6fa5f6b7f6b36b21416a6fe14c4782e386d5ebc0831d9985b"},{type:0,amount:"30000000000",fee:"0",recipientId:"ANWw5vn73Hjh6pLHztyWjYvMiNxYynkbKn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009a7f5002efea36c366ec5b7afe37b22e12a72d59b2ff43626ecbedeca83a14e802206ea4127d8d15eb80c28905d5047c16128a23ec64e9f25262345de8066e0a31d5",id:"3735e0e88737e8ab56057b4383d091ca5f0779177d5aa95da30cf0d8a81aa96f"},{type:0,amount:"30000000000",fee:"0",recipientId:"AcgKpQ3zVCN4St8seZaob41Brk7zpBbyF4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220455306c09b4bcf68b3d503c3399d266ccfcd7355014e1edfb600e17ec67e4141022055e7128f5c2caa7b564a08b0dce9492448aaad0e4cd093b603e61d245b27fc28",id:"d4c0238a3d04e69ca8e2ee8ec3b8da3a41679ae8d131a1012c2cb300c4a437b7"},{type:0,amount:"30000000000",fee:"0",recipientId:"AdT9uerGBa6ivvJ75gGJaDYjXyPXfGwJBF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022063f7821d3d906617f9d60474e54259e408ee9f88c724ce5b40455eee8701042202203d0ca800bfc80788ed4888351174f6e1524b7ea63a41f222d770f305f97a35f6",id:"aa97fc714c3d8c6b5f5fb76c351b81e4e0fcd263b90597a72e94d55cffc14f2d"},{type:0,amount:"30000000000",fee:"0",recipientId:"AQ96VLizRnB1RtTb4voazDaMLB3VYKhoiW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203c248de6577db8045e71f536de61b935a3c6a2dfbf9ab80f92d810a31fa34b9f02202484f612bc171400b2b0471b6f5820be3ba8291031740e2cde5547948bd25f65",id:"371d63607d0af6c067a50dfeb58e56737e2636f4b0b0ff98aecaa44507a73f16"},{type:0,amount:"30000000000",fee:"0",recipientId:"AZEYQFFZ31ybrZ7gcnt7YtJb11o72HcVCE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202cad95342229afd4cff162e4f6166020be810f803ae87247e609ac6b476be6650220643568fb6eab880dcef52e35a6ae597da18d849ab7f77e4847216817dbdf2066",id:"8d4bcd6bbe8c0d21408c5c956e963c7edbe906e8d51618d15946356ed05f84d3"},{type:0,amount:"30000000000",fee:"0",recipientId:"AQrgHm3rfWGVXDhoPBSz4vXRYSJnezg5VE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204abad6d12a702ad5bfe5d86738bb12e5fb77ccd3dc963f385f9fbc60369406f602207e473b2bbcd7176b9d1b8d3ac9429b651c8afa5e4f1394d97114923017734b2f",id:"c16763bfed71cf294553f0f3d6b3b0b3ca6d133d73d09c4b918b6e5cee11a895"},{type:0,amount:"30000000000",fee:"0",recipientId:"ANBMsW2NRR5QUp8yhQNJc8BW6yrL7iRW8W",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220344f021c3a169186dd6ae0cdb48330b6224da92758de49503fff882d1b71b2c7022048f81b28b9a8ff3c07a1879fb2b3f0f31489f9409061df4cab21bc8403053f34",id:"3a359c2cc190a82229e1366b45d4c882bca83958d84063bbdf513d69f8da9bfd"},{type:0,amount:"30000000000",fee:"0",recipientId:"AWHBi3iRAFasvWqRPrhBHYXvayzn6VNans",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210095a887589f959790c4c01da0adca893b9f288a8fc6ef32de25d19a4501f2fa770220267683c7e421d85c5d368c0416c0f067110ad2b39085a57b396300df68446827",id:"3deed8497e891cd9c8c52cb779542e4e0c14bc1434418558e20cb2d2e7a26f4b"},{type:0,amount:"30000000000",fee:"0",recipientId:"AKNx6tMWjp3wkCVmMKc6Lf7evoVQaVW2RR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008a303a51a8eac6a3b47ac696cd9d561133dd3b08392060a20baced5d3d7659e5022032c11371eb5e80d42325caa9933e9cb218c03b17584bc20c8aae6045687c1a45",id:"8fe4b99d4943a9107010ec38e159f8208e1242087efa376d7345cfc8798fcf57"},{type:0,amount:"30000000000",fee:"0",recipientId:"AX9teDU5aZqYBJUiGXFmkxFoVARFHpSZv1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009c77ca7fd50bbbe8244d6cf87d31fee1502d9cd53bc2719b4977b163601656cc022049cc61fe0848c5cc67bcd401339da0edf6490d59766f1eae6acf071f59d11bff",id:"960f6fd34b2aee0ec704559f85cb7889acfc8c5a3b635593d4660a5c4e84077e"},{type:0,amount:"30000000000",fee:"0",recipientId:"AbB54oR2UpH7Jh9beZbHAMU7i5FAZVqEPL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205ac4b25ffcee117effac747f983502385778170bf4d9397aa36f0b68b660817502204d73b9266257237d35a1de1afed230c6512c7edb749e92cf978679aa9525e131",id:"a841cd49a92d5ecb39a5439a958d9d1d02622188a73b71800b45631d15ed14b9"},{type:0,amount:"30000000000",fee:"0",recipientId:"AdDxYew7tm1TmxC6ASHJhzS1qgtoVKLEPc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa7ad99b7c0c61a861d253948568f93ed985cd832ccc49bd68b5fff69d7d0a3202205d3b4717783ed8db230108f8802644ca9b63e5edc60652d743e3792574cd0a18",id:"1eae0aa7ebb5ec9e7e421e704ead21748c4d211d899006b8e0c4df6c0dd54018"},{type:0,amount:"30000000000",fee:"0",recipientId:"AXsSBj89cjVAu5Sc9gLiDDwoRhASaVPWpA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201a00e76784ec8a63958aec45ea6677c6af0bed2c0fc698ddf5a62911459af0ea02200efae75686a8e3615b62fcb698148229837f5ff32c2cbc2d289447124bb2b5bd",id:"193e570b80302b146e5c034c941e1817f34979f322c1c8fe47bef69c8b129b94"},{type:0,amount:"30000000000",fee:"0",recipientId:"AKUncjgDtuG8pJk7YQrFkwBxujN8SLp1By",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203f9a8eb03c96849a9327c877eae8bc07d3c8e469ef3ecb7bc92f3b10ff76e77d02206b2d2396c5f18be1a68689649acc583c7a827eddf3064d16ebb095a3cb6d4be6",id:"4aea1fd822d1a22ae2edefbf779ca2ffb6f8b49a0971e2f43addf9607933d513"},{type:0,amount:"30000000000",fee:"0",recipientId:"AVbcaqopSmsUjmXDvW288cGUTYq9YSmWRR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c26e6789b1f61fc93d15a669de8c5a8dd420f68fb8e2424bb5c40c4a15fd1abd022007007a2055610948879608dbfeb831ffdac2535e26614453bd029b93820c648c",id:"de983ec6b437575acf2c16bb9da752f6a901ece688be7bad75e24591baab23c1"},{type:0,amount:"30000000000",fee:"0",recipientId:"ANhuDMbZ8GPX6MNLNrn1wC13yKTKL4PjL3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022057f327c74d0539fb43790a2315867fba5f2e8a3f1faa261852c146bcd26e570302206d543cb594a980b408f5bd8fa2c45251e7d4eb005b2e55950cebf36c92c4438a",id:"a869df9fc61b6e1693527a3981d465f6f46d96a318a09d9a92c9888145e88a7d"},{type:0,amount:"30000000000",fee:"0",recipientId:"ALg7ozgLSN9wLUGu94LwMhPhFzyWBxQobR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a609672480799e9034457b36d6c8f78c1cb253af8a055ac82117e30a3582f96f02207616bc3a6de1cca1762a3dac65dd48022da00e6800c39b44ae53e0d26a322fd1",id:"7f7b0295b52a45c399379f18ee56ab09638718fb9346c5bc1963d11cef412afc"},{type:0,amount:"30000000000",fee:"0",recipientId:"AcF5LeL5ooyt1wja5Mj52gU8X92TVtG318",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022019f8c0dc34957e29ad1e55901f0ab865b38a7e0e018ed69b8793253a5d207e8002205901d7f3d081664da8469ed8e6bd59b3041ac1a8455f629f5508b50dfc2f62ca",id:"dae4406da93d88d9398fb59cdb154503104687b2e3a0754b169d17807a634900"},{type:0,amount:"30000000000",fee:"0",recipientId:"AZ3qjcSmk3vacEiV3GdcK3x18hAut72yAE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dc74c59b710ef47a0568517dfe242dd8df2bd1305155600e7b0d39113b34a9e602207abe3ef33953e3aee86dd4f1c8909edf6ccbb2a3eb181a0221665dc07e1e0023",id:"0d3cb578f886acc03177c1708528692590db30c8ca270b5032b5fcd86ed75033"},{type:0,amount:"30000000000",fee:"0",recipientId:"AYdMCtcQjbEAUKWLb7f5NEkkBx9SmTJzcU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100af1a06c135f43cd0c67c499d1ce310170ead6e61b87f5d673a3d1eee424ae1cb022065b02e0dba32c5f235d9a707cf279a8178d5e5b0baa34572327c9dab785500aa",id:"ca2382312af236ea7f5ecec7f860db5ca528b71a4030736eb824db55ea976167"},{type:0,amount:"30000000000",fee:"0",recipientId:"AGRJC9bwD6npvCuYBZywtho8dBD3RAzikr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d060d1ae9b22357dd0fb6062abc88eb2ae7e47eebb7af7bc21440495acd3803202207e33d96cfb29e5cc40e45b53eca85b5891ee1b4122ef041e579df50464b8b053",id:"40a6b024984183f0809d08d199fb2d7c1742995adea05f1fe51a2fdbbd969842"},{type:0,amount:"30310258076",fee:"0",recipientId:"AU2s8RgEdGWJYXjSSh8M5zkoJjdguh41Tk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be9cd07b90814b2f4cb2a868f08dea6eddc297e79ad7d48c3a1230d078454edb02200171f1277e17ab3978a16fa260903bcad9e66b8667e632cc856d09ea9359a898",id:"8d3fe39309daed03ed0e02d4b1808d54a18b71108ad3316898a9109981f0b840"},{type:0,amount:"30644619264",fee:"0",recipientId:"AQFEMBFnxk8j3ShwNErwoqSK977DidXAAK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100929d3ed3bf40d9aab26360d553f1016f7fad051af511b4111b45ba22571d2b4a02204600751a7a3dd8d0b9e5ae93b6c014facf6191b52a64963a893ce4ad6d74cb36",id:"49b13cd9ea10a35ee422e6cca7044ca7a4e4201f397cbb8fd8627d1ef641ca5c"},{type:0,amount:"30990774050",fee:"0",recipientId:"ASVZwCuU1a7qgUKSdiZzRkuRHJpLp9Fp4F",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c352876accf4af2e7395b682bb88e69b896166e3ba25ecb62de62dec09891c5102204bf978db3488674cedc28d875a218309195f3cf7fd2ff1e35b28ed9dadd60995",id:"dba6677347d67b9a1030a3f883d978a72c40870414b9dd9a6fafd888195d96cb"},{type:0,amount:"31371117110",fee:"0",recipientId:"AXnjrqJujCyYt9rMC5E6NmnbuoN8N8LtR8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205a2ed6c565adbcea14620c4872181c55dd5df09cfdb0ea96242a6a8a16fd446e022019cd448d1b41aa454ac2cfc476eb4d8d95b3283489fed359d7228d87f97f4192",id:"f03293bcc0c837c7d0741081cd123574c51a55f7e58f430aab867047ed0ddf0a"},{type:0,amount:"31808712368",fee:"0",recipientId:"AWecYiRcWfVFEqdU9Ph6j7F7YwZp2kuowr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220126963651521701323eb3bc6d78d7bf598d7b12896138f91d0daaaa0cb2a37d4022027009cf91eb481191fb7058204489db792fe49cc2925f2ded59e06f7740f2cfa",id:"4b77e88f7746845ee2b045357fb2f1cdc9d23608c50a5587c6414b3a0c4df8a7"},{type:0,amount:"31825770981",fee:"0",recipientId:"APATpfYkUfDEhUnoq2icXy7ECqSumPRK4C",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d20fa45969cdf4217de7c8977675794023ceb702d0986785fc7d14200a836c2202201db190f80f13322618d3d5c27d07b36f78c0a876428550ba1fe3cc6e5a2be8dd",id:"d6dd825e9819c4bfa896bb33b25ccd26c0d6fdf07dd60567c8048b57a6046cb0"},{type:0,amount:"32300000000",fee:"0",recipientId:"AWcBdMSL6DFzxf4zcbouKnXqT3xnsaxi4c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a69a449089437fb0878f351b9abb5770b9e84041516b1fa92deb06dc648627a302200b30af92639075735109ddd39d1247a57e9ee7cccba8760f0e18da868f264d84",id:"b3971af4cbd2bf84c9766dfd4124993189e2e445bf5c0dff235aa49f4942a2fb"},{type:0,amount:"32490327633",fee:"0",recipientId:"AWq1wsJLPzAY4uiVTvH14F14YNZ2PozaUQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f05a79d7bcd98a58c56630a91eaa25f14e80fd07bc9c70277ded30bf32dcdcf9022067761b7133837da252a7f12c54a5e59596a5bae74292751f4f71722d1d0aa3d6",id:"bb073805ed067d4e2efb8882453433f52d0fd6f44235299416f012d73688ec4f"},{type:0,amount:"32583527433",fee:"0",recipientId:"APruVpipmehKJWeienqh2jbAdVC9o3x2Yn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c421a27e857b78d81cfd6d12a5b5feb0fea128bfc43a7dd874c014040c91a29f02201df13abe3451a8039bef22d2e801cc09bc6f4d42f85bf4e62caaeb34131a5e7d",id:"439c60dc29d33a9d2e800a5b4ba1c1d195f580fbc46c4183cd4dfe1eaaf9dd27"},{type:0,amount:"32900000000",fee:"0",recipientId:"ANiKA7nwrdSW432oB4Xufeb4MyyTk9QeLb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207a79a82616ea4c83b9bbfd52f8a53ea0ee6ea8bcbbad23a0aae1b74e5eb133390220179678e1b59b8e435fd19e68541d890136f85656f31ad1513169df3b947ea481",id:"e645add44af4985a0c44d63a7d33d6bbc87d8d0ded51a9074d8796a2af61a720"},{type:0,amount:"32900000000",fee:"0",recipientId:"AQvTNyqxVEHLVZfpVFttfMankBSGLyAfWh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cfc612e6c035e4ba731bc662abd91c151c0256379c975b2b0b301e4990f99c36022028380c0fcec416d7cae09ff6ad936087ecb43f162e7edb98b6773891003a494e",id:"d17aada75d6a2e7566d34ea4d19a4f044e7ec8a77954de872911f5e603d0ce2b"},{type:0,amount:"32900000000",fee:"0",recipientId:"AYnzEccw2MrcTUT4yXRp7sHQGe6G7x7UkD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc272d36bad69aef950ac0551b96dd488bc9a83cb4025fac78c57ca286d42a30022003e275f6f1f923c61d6c3a45141274ca2b32f396d9f15a37ecdf8e6299df9254",id:"685f94850350f66b039fd33e550f0c2d1114c9f2fd7b7f0f723f9a8dae08f4be"},{type:0,amount:"33114472223",fee:"0",recipientId:"AVzMmzLTmugSxbwqWPqxxSQA4QtXVcz5Le",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220699428272cbe81ce84c5556bdb47e05285e8f2a533c5e1f0fafdfb2ff47fe92802204b0c4c4ae35dedca243f3a322e82bba73d80802f01d8d584ce5abb75154db06a",id:"1a1efccbdf78b25765e859d14e2d623afb1fc2acffc1fcd8d2679c0aa1fb697a"},{type:0,amount:"33341283885",fee:"0",recipientId:"AY5Q9bdBx2NnXsQ4L6Zw5XShNR5gL6ExPu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220398e0ab17a01dee9508b61e2a42fdccd6f0e26ad76168dd5f78b3bf8ed5d0a5502202fe39e30d85935a83060a11be934999874065d837f18e65ce96041b502a4388b",id:"eae73dbe65e5699583a3db3933114222b264c45ef69c6ad26dfa517fbb028665"},{type:0,amount:"33341283885",fee:"0",recipientId:"Ac2vcL7D9SLoQKwm5K8G6bbFQWgAXNbN9o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206826a73682fbfebf2b6e78341e339ca1265bbdc3a2a70ea36edecb3d50adb2d9022064a2a77effebcea2f7e8fa6de6249b1e205e518e0efeca9000826f5a493d46ed",id:"16158b459a0c1b2953d98feb4d5b43df41ded0f72f3d8f7b159d47f5fddb1c2e"},{type:0,amount:"33341283885",fee:"0",recipientId:"AYNtaJsLCbs88Dqv2Cc9SUEhRn3gMi6y7B",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009c00f35dfbde9a28230439c618354b5bb60defa091c8795c455f8a3519dff48c02204dbaa156e94921647d58d271e1e94cbff2fbca92263f225b46fbafbd65aa67b5",id:"7c0a5ab8ab2aa880dc4688437645dc9d825e030fdac4df2a25d5a8e97f4b5c70"},{type:0,amount:"33412512992",fee:"0",recipientId:"ALa8NaNCRdYYfS5sx81qzvoFEVsA7H4VQw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ed45f09cf19eb0819dce65b619923909e116fe75588a96d6d2e792857a1a887e022050ce6e62dd65fa58e4bae5d09c191290c669eaecbca5dc38813d1b043f8f565c",id:"bab26302a9ea1d99d9ae0a90ed17f44c66f1174dc8ff11f7e7b79ed7b2b49492"},{type:0,amount:"34492604732",fee:"0",recipientId:"AUJRMxuAJjUFEbS7sed3otS7K4R89caZx1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009e20c799169e14bee9d76da2ca433b8d98295f8593bcedbced345a3ce189b4e602205fef5c8b8225b20744c385f1bd2994a0a824849e2b65592fd5246d625cb6a28c",id:"6cb0b2faa48c09b48dfa6dd0391d3309be705c4704d55f72d8a39347da0cc6cf"},{type:0,amount:"34600000000",fee:"0",recipientId:"AHWoDbD86gdtvHfgRyKtxo7jHS92hLAnPL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022043bac64f1f5a5b986fae5cf88d182ca4698d667a0989fb2b89e731282487021f02206b8d22d28a13bce3d61e513c6aa2ab9ed8aba0370ea38305c86df90796cca026",id:"fdb9291d29c3ba236ff008224764227942056a4d28f9c12c7ca7e22b4c4c9f56"},{type:0,amount:"34600000000",fee:"0",recipientId:"AbJv6ehN7bETURRPJtTgJ5LfJcmjnVCjjY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e01a874648848f53e3c58f382b04c4d8372dfe14d5e715a0aafa483c4c1593e0022024d196708b95991b30f9a735aa5bdc951ce80455fd30b32265fb1ae8e20c4376",id:"f10183e8291eec17c2308b2731b25e0378a2753ac11024c6b967c04138491900"},{type:0,amount:"34600000000",fee:"0",recipientId:"AMGy7FcNBntN6FY9ouWS62dEmiNW5SNDSs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc4ceeb3be6f423d167c08e8609e5224a43fe2692675c4cccb7ef35d9b5e286502205b9639e02cabb93e9d1262b8291022e87c8fb26e104ad46f38ba1ee4eecd8b16",id:"e72f27cd791fe40da52aa33d4534c6cb4061080e57a1f00ac5c0ca2e0f8e0adb"},{type:0,amount:"34600000000",fee:"0",recipientId:"ATgMvSP8FjG7mtDN84NKvxCJkHP63S2EMp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206556edbb04478bf8492500e284ba73afa570a1ede51add1d0798e70f349e728802202846f2751bc43dd0c0541327e1f20e5e97149b2bb29ebf75d2c17890fdc751d4",id:"21d1a6e3205127c1c2008279631cde827bf82ef542a9706f255f0a52b0aea1f3"},{type:0,amount:"34600000000",fee:"0",recipientId:"AHs1p6BVoscsszE917Zhvd9BPWrQbaUqcq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a3e2779d7b46931554138df6b0cef64b7f087541eff83c07358e497e136ea23b02200477eb4b805e61433a164c1d0dac248aa2301bb20f774477bcb81c455b5ea709",id:"6e804117d3933b6731b936984bcd33a42319d096d5ee8d5784e1686658c72af9"},{type:0,amount:"34600000000",fee:"0",recipientId:"AHqN9DLFs6S26HcG3zNL93VfofkFSoMXQL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022058b2c046dc42102008402d2aa1cedd8417f39663048e943227682186c8a5861b022062914b3c529429ed2e0612cf2dbf0e66baebd5ce3ee70679ec723862d8bbbed4",id:"d0d692c0b8ea05ba6adf6848c94c642a824840fe2b541e16c7fdc0acb8ab280d"},{type:0,amount:"34600000000",fee:"0",recipientId:"AaAewYY6LEDiXVmMcsoZTbkvq2X1DQKoCF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd56b02b4933f9ad0f998c48d4305fc64c047d80fde18883c4c38561d787023702207f6c412361e281154d0868530a6bbe3261040d367087c401b9ad8a7915ff6a17",id:"72b77c936dfc9f4f38a825d79ae0360a351753a8aa7e89286edacece4ccd59fb"},{type:0,amount:"34600000000",fee:"0",recipientId:"Ac5rmbW5oQnjn51KeQeYPi8k8cB34kZFUY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210084307422d072f2c09c3ba15404fe9bcd44932e92eb2ed608c60d707b960b69700220186c1250f67c8805c39661d121b8051aa983e0962cb34e046372641830dc7dea",id:"7fe1f32c8cb0217b9ef57edc5cf687a7fb07c1b1b82a6e9d6422e1ceec2643ae"},{type:0,amount:"34600000000",fee:"0",recipientId:"AR4BUMG1TKCcZi7rWMaNQ6HQkp6wikmknF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f32acf1ce8f09eeef89d9b42c32b76dfc95da77375d96d22eabbaf837a318fbc0220059b6de004ce6fa0a2ce3f41ed053cd0d8f735888707bcb6f5163e6c05e762e3",id:"28148ffe3c46ac548cf5ca10fd40575acafc8cbd43f01e97cde9b5d385974b29"},{type:0,amount:"34600000000",fee:"0",recipientId:"AZDhZu4Bxs1Y4SgLc24PansSLP6gXZ29to",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f4963f319382de0ba03c3c0856b9a667a00c82a90de308f00581299aa649b30d02205f7023de13f3958320606b1db434cf40c5294759c01a21691070c90bc2b02bcd",id:"d7b7d4815d3617e96fc2f47bbd7424a8b841e2dd5acfa42fd96ac52cd91d2e90"},{type:0,amount:"34600000000",fee:"0",recipientId:"AVG7PZt7mWxsbHEuJHF8xjqDLCxhPXsH6V",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a6698eead4fc3e21e659f6705356bf1c1cbf11865a735ea83e60eac5488ce1c8022002c23b6bfe049f8a0e9dae2f7eddc50558b51898459bcb2310b4376ef29f1a21",id:"e0d87972b7727a514955e01278aa1803bd33f18170554c410d0c851f7c0e7340"},{type:0,amount:"34600000000",fee:"0",recipientId:"AWiJZUDjG9KKM5QnKhz1Gnb1C3WQB23Xyc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220563392e63a4df3c65909808b2a4b69371e082af2e6f0a9d2c3fe8131b87d514902201657b05f6789b16a5cc4f83dacfd0479f222bbfe17ac97374f19238259566c81",id:"34aec54141d983219b001b20901745720f3c38d32cfc736b82697e11bd0848aa"},{type:0,amount:"34600000000",fee:"0",recipientId:"AXDoHhX3gwTapS24HEU72dgjsc8TFEre1w",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204d7f9490bb14995339dd36f4f36a34fcf37726f1ff6a821731a2e788e62c9e1f02204804a2d78f61b94ca546c21285de091fcb3779c2af7aeb7e62c483556c221849",id:"152802a6a0822b0d9082c0bfd4109dce3dde9efb491cbf09d76e071911f62083"},{type:0,amount:"34600000000",fee:"0",recipientId:"AQ1n5gCzkyT9DfgJVBEMdApdKsBhXS2ZjE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206b5c708a8413bb94024010c291633528f6dcf3f86d06112312239bed0e488b5d022068113fcfc5dc3f522005841ea7972f92c75f57ac19f58fd186371d7548ed8ce0",id:"b0a303fff3f8d312ee52989778d5473173c0010bfffecf773d89e3db1a3c316c"},{type:0,amount:"34600000000",fee:"0",recipientId:"AdJ7BZneub7qzyB8qPHg1FS3ViisAfXP55",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e09b911019131814eff411b87aec770b43f90b15dee330ef901ae18f57178f90220381febfa6e3cb1e869ca682c3efce6c5c07f5002a234475a1724a7a3fbc6788b",id:"05e2795800c06da22617f5ecb702c5c178c610a9c1ccc8dfc8a5310f80c169c3"},{type:0,amount:"34600000000",fee:"0",recipientId:"AXMgtmxcMTMTZkMWJJyZgFNuaP4jco9RZL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100db75661cda0f02805787729e123ea7fd914448e56b5de0598c187d193a1fdc3002202823a45c4a674e70468185ca667f45fd2769c4a763c915e4e4c0975a672950a7",id:"e7f397170f9ec10b9e1605974c37d1ab68794956b6687c03e96ecae5057d12e0"},{type:0,amount:"34600000000",fee:"0",recipientId:"AQFYCZf3XpzZyjo4BtAQ7PzD72Xhp7y7vb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d3cc40176b487dafeffa3c068dec44b0e94e079d015811c0866e3eb96a77a2d6022051d678f7e7410d3b27a9c86e2829d31277462b37381eca23febd1d195b21cd1f",id:"56806a7b8d18fff61d209e977234bbafe94329804f06ce5dacb626c91e5efb7f"},{type:0,amount:"34600000000",fee:"0",recipientId:"AZqUtuBczriacfQkM1iWaiobSGX4GN8KwP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009897cfdf79fd8c69a0508292f557dd46b4ee751be8e158d0bce8338c73fd86b2022044dc1e89fc5eaa374c0703862cddec760a8f692718768b221ca561116af6eccd",id:"c9e886dbe8d9344cde99eceec3f927ad6f8ac08525b18daa8d2a72ddc2a0bddb"},{type:0,amount:"34600000000",fee:"0",recipientId:"AW8RbZZiYe8FbDGNS77MGWEE16Zu8AxxLz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207bc3c68c391fe49ed8c7f06d35db75a739ab9c8d97cefd2e108f7b9bc5f164bb022040ffe76e6f3bcc39f993df7405860880ece802b28e56336a17b40a91701587ce",id:"53f0027d4810bd37571d6a25fe9a212890210ec4ee42f700394ccd8a1672c8a2"},{type:0,amount:"34856796789",fee:"0",recipientId:"AXk9foYqX2ExUBK9Rtdirj2XTZ2vReCmox",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049aa0eb602199bde5b2163a99fb098af4687a8ce249923d7007f5155a4219764022076e659cb2877771720de2d695b7df6c981221010217e885f42fa7d0c09d329cd",id:"fc2c5586c3e6aa5bc6d08272c06caebce5592b9f9bea2657707c3ced4c008aaa"},{type:0,amount:"34856796789",fee:"0",recipientId:"AYJyrRtDNZPw3srKy34buKUFJ8vwCxAuzc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220125967fe3764625cc68030e8111c0499a0c5102195f94aa38499802de03f267a02206a97bb532d9da550410499a3952ab4a6e01939ab247c17227792e67fc25fba03",id:"b4cfd3f8d50c8bec11bf73e8bda2e8c78de932ee460911e0b8ff69c49ed03a08"},{type:0,amount:"36400000000",fee:"0",recipientId:"AJtBjGqiABsp5bUduT6YaK9L9E4EVZXhjH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210087a0a6cfd2e046140baf9899ee9734ebfdfeb5fa86da06d6b354a7035ae3bfd602207de557dfade43b2b1f79b57c19133df0c0c0f6fe5b72f6b34fd0a5b5de987a8f",id:"379d4537f2de2f2cd6d9dcdad6c922ff45d538571712ceb2eca4ebfb676d06e7"},{type:0,amount:"36400000000",fee:"0",recipientId:"ASE9D8yvqKef22qP7gAqKyxYqvNymPPm9a",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dbdf2e7a976583aa29d4bf6e0d46f3919aa5bf281af7d2a655db076cd73aa1a702203d2a6c322152f63bcfa2db3f535f40b397bdccbd69a13557430bad54c3410cdf",id:"0fcf2fa0265d5c4bbdb6a0a0bde602f3342fa59c479af9c761e8032876ca7a34"},{type:0,amount:"37488839577",fee:"0",recipientId:"AT2FkCcRYAttXPz47FGpdgURLmza1cDctK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207cc3222d47958a7db0ccf22b6a82724ab14774498c3015c1efe72a4eaa81f0c002204c6d395c17568ee5f5831170da2ed918f5bdb637d2bec9711173b444b09a250b",id:"8a905c558371ad7a59243e489fd76d5ca42e522c8a04d3d8908a73445d6ecea9"},{type:0,amount:"37771522137",fee:"0",recipientId:"ARZQdfzNT9Bd7ym6p7VF4KTjnD1XyoBFdx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205c90fa2f53194d4d662c53420e4ff1408aac499327e46ab09c5bdb4bcb367eaf02200c71e40ed64aaf058061a224a54d21d1da4719816a4ad90a73b2d86a2795d3f6",id:"0f8a2e414407bed22c8866f8f3ad446bd932f24089c15c3122677c7f5ddbf4af"},{type:0,amount:"38100000000",fee:"0",recipientId:"AQpo8EbxDh5FA4zATjVRzEFfLcnmUnzMAv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201de54ef50c50d19a8c86aaaccd7ce55790faf0a58031f608f50929b0ea79e8550220533214087b327632aad01474d1abd56f24793bcddd2366f7cc8346cb75b72985",id:"079d07f46a09bde98d55c78ecb6c5205e5209ab32d27c4307dc5448552a25bbb"},{type:0,amount:"38645579049",fee:"0",recipientId:"AarTZVSMDRD4k2YPRRs4vNpARZMEa6MtHL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e437c1b3391179c2c73f309351525aca426a52a050f84cb92463fb37c0f0da65022075660f2e0dfe215911ca518b55954cccd0e184f2d87eb3b7f4500a3e782a7b4b",id:"a16879ce73bbfd163115c767c3ffaba4dcf8d1cd2bbdacece77ef15c1a777ab8"},{type:0,amount:"39403335501",fee:"0",recipientId:"AZdt1o9xiUGNbKtxX4GUjA2Qf8rrepeY8J",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022100c6415f478336f7eb59ada8084bb4656eff9e22a97670afaa4b7aeab9cdd38d40021f62e0546fdb8b200a526c79c67c1240fbd528f6cb332804713109b921b4a458",id:"6da4c777b0511056f1d5420621dd8b70b8ca6ab5fdc1a6df342938513e01b2c6"},{type:0,amount:"39470224178",fee:"0",recipientId:"AV7fCGPQZi7tcKaKYDKf9yGJRiaTpicRTK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e0bbe7320e5972688505a4793e0e9cab39914b53a9ec5fba0ea6e179cd8f94340220737cb6e960f6c2af403f8a80b7a553b6baab74e517f3bf9de245621b1ca9cfac",id:"bd2280fa9b6d30ec1530bd9e5601de25f3dd3e0344472a2b4cc7c32818e8037d"},{type:0,amount:"39620933325",fee:"0",recipientId:"APLS8VURVhTsQ8gYRh69cNbUCETjL89jik",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220548e77cba610645e3b5caa5fe0de930be30662ae976b837252b3fde06bd2f93202201bc93d5dd1710ed48d95cae56f0842df1acbf6da100d4d4d4a56a43b84a504df",id:"6bda585f91fe13005e7c2ae9e317e55486f3e6cd0d83d0a64636c409ee8962b3"},{type:0,amount:"39676127823",fee:"0",recipientId:"APfd2W7pvN7889NjkxygPYuaeAg1XNvKSo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f99b2ab861887bd456fe83981eb9bf17c655bd9fb3db399c57735001b8913c6102206166bff4926c83511798121ddbbe68e37ce8ef14baf47009c55385110bd470e0",id:"46aee861d13cbfa1e058f518e14f1accab43bc628b5aa1e5fcc5f28b38219a03"},{type:0,amount:"39676127823",fee:"0",recipientId:"AaLnoAq8B6ZQ9gWMNSc6EHa1PKKkNrPVFV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b9dd2cd37c9f1838e81325c4ec8d738c9554cd658df1588bdfd568d4ef92e1a9022026e3e132290b7c040220c7a6acd09aa98f4f10cc203f632fe8beadb4f9e1b036",id:"d40b29ae4603902272be5e09112e1e5291d49ef8a05ac9e756974c92ae50a677"},{type:0,amount:"40208679058",fee:"0",recipientId:"AXVNkc31rXQchNorSwfpweu54jjPCuJkWu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022078da406531b60613184867d8ab424d2de871bba0651bdfeb0fd90f57c50db48b02205ce247f5c318340534a0ab4abcf37102c09072085b78649b7dbfdc166e79151a",id:"d3c4f8396ff1a4ee221b03282321bb8e45ce23efb00d61b8e1f9c76039d2c744"},{type:0,amount:"41600000000",fee:"0",recipientId:"Ab2j8GC1y4QtgT7hYv7pA2g1tiiC4W2Hmb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fab3f4e4d7b764645b4dc54ac55b3856fe95e32f5be4e1bcfa105823a9cb5ed20220053d7c446db556eba9cf85d8e6229360a28dc0cbf46d894481e29269e96ad74e",id:"cc6a17753f16a9bc0bfd922b5c39e54e2e8bd6c3daf60f0cb84752af997bcea0"},{type:0,amount:"41600000000",fee:"0",recipientId:"Abbn712o4ZVx9WVhC3vy36KuW8nRQrKR7i",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022027d1dbc4e47f15a2acbf82f28391d94205ce0ca67fc6bcd88aa0661afb4cae550220717bc9f5525ea5f38d8a17ec4b265b56a58f0caa523071e584d5bc1505b9f525",id:"79fc75d4fef939b3967e65fac8103cbdb9dd6b7e60c08323d735611d4f4a1db4"},{type:0,amount:"41600000000",fee:"0",recipientId:"ANMGxQS3nccdwd4E9VCkUPx7kqCoNgTPBv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203360d6ca61b6a128e399878bcff373b8ffbec4812df391d118eb972f8fa51cd8022057eadf2624d266fe0a054b103302832345189074c05502f9d9efd4969fb6678a",id:"000e2a9426529b65db56224bb9ada512a48395bdc14d22eefcc64ea1342b8e45"},{type:0,amount:"41600000000",fee:"0",recipientId:"AWPKFKMqjSFjMzzimsKMgQhyzJF9JBbu6s",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c8f1def0dd762083c23c58977202e0fb138ac22f987ecfc71f915425e3492827022054d427bbadc47b5aba27f3856cb00960a9c07ede09e438ab29928e3ed0096e26",id:"617a1168653fd2b8c17ca88d0186949cb8a155ffce2a20727b9940254b82f2e9"},{type:0,amount:"41600000000",fee:"0",recipientId:"AcQR4ymd1ezhUe82AuXZdWTooroxdt1cWF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f92c3391e8c66ee21f1f7a12b056e04056603ab6364055295e5bb9eca0862f5022058b6be51c4ae062433934609bf3d0b3f7c8e5aac5af9d72c0ab375abc89a6167",id:"948c73321a84c807cd7381d595361e64dfef9b87e957da57ff809f666b76f0e6"},{type:0,amount:"41600000000",fee:"0",recipientId:"AQ4Bp3zg3oCoS1Kb2grC3DMVtkRCzzgsgz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022057a78d857515ab4028b94cf3bc3cc0bf378213f226fd1160d18c17f298dcd5830220574d2d14ec7972b165c138bbca3f01dd51b34499d2ea5516381572ae3a08ac84",id:"4b1cbd8fbd593f29f8fa05b2aaa44c0e0130748b17f09b0c43d65d3e643a4c3c"},{type:0,amount:"41600000000",fee:"0",recipientId:"AHgivfsrR3CX3xQFoCQmui2DAvUZY2CNyZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a76da3d4c56cf815cd0fc51160e7a78408c144bfce412d19ee1cc58665e8e44f0220348632438eb2902e6af28bf0a5c074dad45e9060a44b011eae325fa52a70177e",id:"dcb2ea9333efa45f3d66d4a3fc489ddc3853f998a902785da39f4ea2ca1520af"},{type:0,amount:"41600000000",fee:"0",recipientId:"APcJ3M8vmMQD7gU5ADj2sDgcf1N6FhJ1P8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b530f23d6cfaf93c26ab19c19b06d4424bde9d28d9a26383603706e15a9c2273022064b7a2879828a23310603e34907761104bb7f3a3df81bfce674ff11ae2fbb664",id:"69a05ee826cc2ba50c2c034cb980ae47812567b7307814444b72b8e70f98b43e"},{type:0,amount:"42131258728",fee:"0",recipientId:"AUHWHwFyrqGvBcNXUjvUwM3hadXg8Ao29t",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bdc6bbfd224056cce2382d92e4a81821720bff470853dbb0afd886afd149cc4e02204b98db8db62174711cd168c11900262a210fbdcf3a9a6f37095e174b54ef5891",id:"31ef234dacbdde03bd42a16ec10113e15d07ec0a7b7be5ba53c0cea80667fec8"},{type:0,amount:"42255389394",fee:"0",recipientId:"Ab71JZB8rZ8kpYVn85Tm5Ra2MPP9dP9zrg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204adf5271946845e06db2bd764012260c81fe65fd53cc5153d197bfe49ec4c6b6022064637659ab09da617552f820fa155c0c8e927f6da4e64041ce1d1dc982dee5b5",id:"160d40dc3bf0931f17ba61708817191e818b5e3342c23de337ae4e90c865a371"},{type:0,amount:"42416655243",fee:"0",recipientId:"AQjvy3Lr3AnW7QzeEtDzaL2XvAZGNmA6od",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d073a33310126298b08ecca7abf4f9af03086b76a62975c13e335e77880ce4d02200e928de4e5726b37f282d9e483ddcb7d4fed27c73cfc0261d8bff9f382606768",id:"cb63ced56cddfa2952302fe8878c721bf74dae1ccb014309d602caa2b1cd3787"},{type:0,amount:"42700000000",fee:"0",recipientId:"AbKA7AXhr2Hz4N3o4uLgxCVw9q445xygRs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022061a00c4b115ae2f72d6c7a66d6bbc6bff9843239b65de88a214036c98bf2ecd9022059f612d1060bea12812fda983962c7909793151b0c33b57ea1c0b87cb979e588",id:"7e741a32b14ce1d4364ae4f93ba123042d430dbd76be81b0705a69921a07596e"},{type:0,amount:"42700000000",fee:"0",recipientId:"AKRPP27m6RocDmDwUeSn9FPMZAdq7XZKeb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204976b03c753c921b6ffcaf08b742e53f3944dd99f7604e9491128c2cd5bb06070220735eec837093c4b48d14dd6d91d02a0433e86ab5156070361245cf7204b7648a",id:"5aa56c54f898b59c422a478990d978382aa5ae7168e87afb3a693db7e5c4d897"},{type:0,amount:"43300000000",fee:"0",recipientId:"AboW3NE4S2atxnDiB5fE4FNq6ewXQX1jNM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200bd507090d4afe13d3cfda6d6a3b8cd84d07f501c1d0b4dcab622d836f6f2baa0220597014fae0b01e2f26bd560804a8d2980df2695a0b277945140c2f7f3641d072",id:"d8768e339e6bfdc242cf3c395d3b0f11d4b4796977179cabb06c2ec3a758c301"},{type:0,amount:"43300000000",fee:"0",recipientId:"AYSgtUb1hE3WTkw7pQ2U1AxYmTXB6hSdAY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220548744d15a0172cad94e4a2da25632d1074c78de9b5ab01299ce319b7e9554eb0220252400f1bce65a39a0060a64a5cb44aeda15fe33e01ca7b3524f2dd41ef517e5",id:"af598dc5b1ec4ca254f60e4abfdddda7a400afd42eca30863b7565899fb73396"},{type:0,amount:"43300000000",fee:"0",recipientId:"AJDZqWaKSug4kPadzqKYDzm4MHGxhhUYiE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210083e24d007dfe080315146299f74d8129fcadabd3feefee65133cb26b4a7205f102202b0378b31f5810c7aeb96d4c1784d1cb098a36df52f8f8e10d16fc41370f7c69",id:"1c2e9b68f93e64f431c95d1aa03edfe301d01d5e5061bf303ca3510462f7dec0"},{type:0,amount:"43300000000",fee:"0",recipientId:"ALDJhQh5YLMeT2TNf1viyoqJFDTdVxBpdr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205a6741a4f2d76c61a93c300c5dc9542ffe7822c1d2eaf4d63e7f5dacaf7405d40220675355e51b2da2eebad0e1409be2b674415ed903fbda6257dde37e1851ce4fcc",id:"4522f2e824f76a2ca38b8f9bcb589d32394eeeeb44521c27a7d29b410d27ba2b"},{type:0,amount:"43300000000",fee:"0",recipientId:"ANZed5qKqwcaj9Vy1emaYETWUeTVTuZE6q",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022002d24d963c7d96285437680fa90647d6380df7fa3f84fc3b26ebe80d6d5b4ab70220292fd00bed98449c72e246a94a5265324c16bb8357d4d5863cbd9bf95d7ce1c8",id:"72ceb8e73f321a870319b090a0840e83bd8257d86500ad1c23fd3df4e9f76288"},{type:0,amount:"43768613037",fee:"0",recipientId:"AVpuvWkhYahCaRt3HP27X42W5sLQp1par8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202bf9aaf14081129fade556087d9c51d31b2ca79f316df943834364dc655e13a502200fee586bf2a8edf195f939b9b850bbec71eea69a04f4bacd592e38dd69c21910",id:"4f0a3f9b10798151efb56686d7920dd3447d824d0ff85e805923f6e429f35dbd"},{type:0,amount:"44117933985",fee:"0",recipientId:"ARKK5gYqzp8ZBQu6Lb2XCrhyFN7DW2u71y",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100982ecaaa74b2b64bc24eafeaa49951093212380f9784b4cdba3f39b4c6d80e84022054da5701fc8b6222fd56ce68c1c36f125b588e1b4a18fa2512674497c553d807",id:"f75cdbe651257ba7454fae6d967686c399a041698c666c25db6f31641a7dc9e3"},{type:0,amount:"44286661880",fee:"0",recipientId:"AN87Bx6HtTjA6NpajYfTLrqSwKHzx5d5hW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd9e1fad2be125b433ad14c77655b8f461db35bdcd68e2cc776c22c887908e46022013e50085edbe22d2feda04815b035ff06fc6a744822150ef8ea7f67c893f0c66",id:"9a01c2222033973b17d6014c970e033280053eedac7c1fa9092b2d104a72caa1"},{type:0,amount:"44333481457",fee:"0",recipientId:"ASbW8T3Xx3bDZQYGincxMhgspZFZNrobJD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009fcdb37789a54a1ca4134fa8a5931cb5ecff33a6928695d68a903d088fb086b502200e7c474cbb7d1f6245c569d3f2fd7468a7993bde91bccd9802c59ce0d2b56ddf",id:"48de47db070de621b582c945d2eee43674ce2ec38b48d7fa80294d20e857cdf8"},{type:0,amount:"44556079374",fee:"0",recipientId:"ALBVdpLvZofQPLdHungdurd4iF2vHtoFbS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210098e6b691e6c5c75fe5288d2a5cf0cd0b79694a03e782d9aa982a6df7fe206db202206df4cfb87cc5fe8fc61c5b95c16c947e98671390dbac8b74d5d9acc02fd6513f",id:"bb34fd7dc178bbc4ccf41b5ffe7a9b8d8bae117f006006bc710d76f36a83d5f2"},{type:0,amount:"44571697840",fee:"0",recipientId:"AHXaXhX5ybwNZ7VDkJzJMSD81J6m225xNS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ef3571ee051193e032dbee17d7b1baf58ea08de031521582416e7965407babe9022055b390e25f42ac5240921d89210f4a9c7176bb922941cc85f92b9dc7e12a1491",id:"6834021b254515836168aaaba7bad2ea5ba943f2f6ebab2ed65873342886e147"},{type:0,amount:"45000000000",fee:"0",recipientId:"AatvqNHtaZ3bEbegvVZKPoXUebZkNQgJG8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bdd197b4f1265984c8298d2780746f2e9c3bc375a2e316108fde2334d025e06702201c836e38d63e67910c20791d9fc4813de475b83ef954778ed5a309aa7691ba3f",id:"f3fba4cd40e1f99acd6f5fddf5d7fea6758053db2c37e0408976a4294068bc92"},{type:0,amount:"45000000000",fee:"0",recipientId:"AYzwRwPZiXuvP33QBjKC8aGyhtbQJad56t",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f87ba4784290c46da18275953842aa98133bc70d7b4e71d8ca12282f6c3aface02200ea514cffdaaed678ee27e9915546bd78735363976da8036347a99353373c981",id:"e81faed2cca7cbb2f9d059b2092adee98010bdd0be99cbd5a2fa3dd6cbfa2b50"},{type:0,amount:"45000000000",fee:"0",recipientId:"AFrMQ99PEVFX2fF6FHiczGKjXwetkGxYCy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210089b572936a6429869c1824ff5c093f32519eda2f184c25e488044564fd4f773d0220300200b1497d89248eb06940f0ad30972666dac7971767e1e3d72290a2017457",id:"d50bbb062053072e469d59ac609cfa67f1b42db5bf94f50f00002a89253b09bd"},{type:0,amount:"45000000000",fee:"0",recipientId:"AZ5xjWNo8XA6xCbWvVeR5gWKF8Yh51ccpY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201c7336f68570529c6964cb333047edffb7208a41b20946e3f1e33a6fd8c2808102200df8378a745cfebe85881fe2145d8b6dc54bf002e7232e966f10f852f2ac4e92",id:"0e671acd9b32bb08daec418f01e9a2b92533928190485a2444ce5ed10798903c"},{type:0,amount:"45000000000",fee:"0",recipientId:"AUR1TuACuFHerTUB6nkvzfr8LYKw4D1DeA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205f37144ad23e3cb508c39225b2aa5316c64a64c4dbd8d9f683c931f986862e1302202a6891bc8c03f50f697d5229fe5d9e968c731f54ee2661b4d87c4178be3bc2bc",id:"1e0c135240fec675f246e042f8d3677621cf69715a0f8ce8c0480c8c7e276d94"},{type:0,amount:"45000000000",fee:"0",recipientId:"AJhTg2R2MWsrzWfn2VMSa7YgthV9ciSAaz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b8c307b1cd5f04e3190470d66972ab3887286424834389efa4c0f14b29d5dbad022053bacfe7cb19002963ce7999a9b324e7b5beee348b827cdd071514c4f3a94fce",id:"625634fef958d669ba75d5feedd43da8930ee4f33cc192ae99803f9643d9d44d"},{type:0,amount:"45000000000",fee:"0",recipientId:"AawK835dZLs9E5C9KXLsFEVmK6re5E2fwp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f97b2eb6908446bebde6634b3b79d43eab3d425f02660216f1c2c753195d6aab02201c428ab520196041a462194e906afe6bb49ef7e4fd97955dd44bf4b2cb3c498d",id:"71ed3ebc697935d79efb1b1b0ec2f45a67a0e784c57fbff3965ce8ac73a8cdf3"},{type:0,amount:"45000000000",fee:"0",recipientId:"ALyaoK69C8NT8yiKJdx2bPnPpggTkuJdFG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f69603b3b32ed21e6b90d70b8053aea3c45c1c2e2c204bd5261246b97f43da2f022040756dae02033d7959f870bd1e05145f017aa7f9e8d8bde5ea9db4458eca7e14",id:"a38b475f390abd826db23697d8f3a11229ef4ff5e5d9a5486dfc2475cf9b2594"},{type:0,amount:"45000000000",fee:"0",recipientId:"AdrWr45gkfS17raTKgACtMwC1oeem29fLn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022058cdcaabd8201113db1e2babddf080db1958c9072b1039fa245c7dd83e92caa7022070ad9408de0f11f8a39cb43d2533a8b6bf079c7237250288e4eb96dedc3806b1",id:"f0865d7b5fbb45687410d8abd0e4a491320fcd2803a80edc40d3a300ae0eb05f"},{type:0,amount:"45000000000",fee:"0",recipientId:"ATLyQaK3RtKHa6eGCPZRkVrKjEMcKM2NNE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022005e5bdc9a2eaf86059bc4d631765da8da416e108e6d2e07f2aae071e14fcf87d0220085c0961f9ca20cf2e40278cb27e3cc0de609d080599d4547905dc37bdbc60ed",id:"89fe6d2b213226f45a138ea256496d79ad5144353b0f5bd95315c34324674ce4"},{type:0,amount:"45000000000",fee:"0",recipientId:"AdMty9JNMNJ4eSoUZqwnE1pzRBZQW85Dmr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201aeb9867943ae98594b74f68a44e2194eda83b52a7c01850f2da145af34554e80220615f683129fc5e3b109067e5bbae547d6c80581c2653b7bedd7d986bc19384c4",id:"6550d4dff8ecc93472441bde8d4b87b174719d14b9778f9f25e826cb58d57d08"},{type:0,amount:"45000000000",fee:"0",recipientId:"APEkkUCURK2SFA1rXq6nrqYyPVW13rsxtq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022056e356a79e482348494a82271fa5c6ea1f1ff3857fc2429d248eb5c4ab859734022000b20a70ff281ae78a4ad63af9646c92e11b23a0108c6d646e0b2680f7a8cb53",id:"2640992456466adfef85dc33db1f0ad1bf731209a988ce0c3af7b9e2f0a15e36"},{type:0,amount:"45000000000",fee:"0",recipientId:"AYiQeJcxPMdGqdvKVHzLQvmAPcgK1JNuwX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022072936a9c44c3c78e1da607c23346ae71a7dd55294a9f1dccc7ca7b995075b96e022022ceeb6db9237674388251c1acce2a1a6eb5665aeb8a42b9772853ab68284e90",id:"e288716799ad69535338745567163e9607bd2500e78f2fc1dd90b4deaa64cf7a"},{type:0,amount:"45000000000",fee:"0",recipientId:"AQAeWRKR5mR124KMqCH44BciU6otGmbofj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fb9aabdf5f55bfe910272ad8ce308f03f5db3dafd8c9d2a9007e784e0ba8b12e02203843f7b9e84f7a2a37a23843605dc6e1943b3ec3be0a7330d075024be0338f8c",id:"b7a4725339a9517ce667d69b50279c93c53e432ac8029cf1d1990033ce446479"},{type:0,amount:"45000000000",fee:"0",recipientId:"AYHJ3GQkHzy9f3ndLg3CsEBvqSrAr9WicB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a609c9f810820be67db6b2ad25e582721da81ae29b1fbe95acc1e6ec9eae4f5502206cfd243d311190870177ddced286a50f7df71e3ed12bcf2544ccb61184441675",id:"6e68a86ad3f141ce115341c4167a0b8c8039671f7b8d593a9007c299a1742ab8"},{type:0,amount:"45000000000",fee:"0",recipientId:"ATsDqjHX5hGuURrPfnDNmQ3jpB4q2aMcmK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd13b731e92673d5ae20fbe28c9dafd55b4de120a8b8654b9db323c4ffce89bc02207df49ea18df0e5fd24e72ade2bfc2ea417f53d5a268364eda48a8af850a972fa",id:"f6432660a1f9291b952bcc0518abca3f0fc2a48cb553922f94ab82d5127d83de"},{type:0,amount:"45000000000",fee:"0",recipientId:"AbWMPtepNQdtZKbNFfkbEvBki3gLxgzpWZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203fc4e5dcf19aec5c7cd014ec4aade1a177bcf1e8ba4c1ed8ba6636e6091d62fb02201935e26746309781e360a48577ef5ffcd82d41c6540943448d1bdfe44c804b7a",id:"1c67042ad2c0ea1436ffca3f18bdb68e192dad5cc1af9506db9187880bfcff58"},{type:0,amount:"45000000000",fee:"0",recipientId:"AcA3ke2piEk5tUbLcaaeU25tZckcYaVRo5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220057351f830067dd2f2a6c554307d64f2cb01c4a41b4bcb56d92bd02353f2a00302205562002faae96f1915237f5ce1574cba8bb17f2cbe4cebcc4eb25f21b39018d7",id:"8abc18519bc37580a21b2b5d36bfe15eb4d6f63610fca4db2dee20f6a25417b2"},{type:0,amount:"45000000000",fee:"0",recipientId:"AWMJezaNhsvRxDPMtEqNdYHt6iAMMCRroQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206f1e30ed77982601cd7186278023615f0f9c19984ea459629a7d4ebcc4f31e9402207109ecb76a21e88e3dde1c9b1c996195def546b3e6c5affb44838c2fd6342a0e",id:"5977367c87cc269564188bb26cd03226dc5d182f7191ec3dc7948f6f21f71d13"},{type:0,amount:"46006407173",fee:"0",recipientId:"AMjF2vBKEdDs292kBAsPB2HpAYzCqwUmEC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b58f5b2879ce4eb45501c18fc605821dc979e3e7efa7f204c85f5ff02b6623b602206f2b4c40f9e7ba54dab669024d3a5a53bbf35ad4bb815c3811a565e6d5325691",id:"faa89d3d52bebd59d0abe61d555e187c1b8c98c3446bc566a036a217c6fe5c7a"},{type:0,amount:"46288347832",fee:"0",recipientId:"ATsdHdM4ZWFUXSmAS1MxvTJn4wEt75fyBu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cdad60bffc4d6b6e137f894becf8b7d67d2084a47df750d40590a133e02cd68d02205c99a8012fb42099ea7f26c45181a47e53a02602093a0fda29681ae77dd9e6e6",id:"87c1e1fdb88c4e153d3e3e85a767b0e76a29f7da8a88d299b79451abcead9365"},{type:0,amount:"46416322043",fee:"0",recipientId:"AZsbKy8LmWUf44H8XqGkbGA3mVdyoNsPc4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ea15ca497460bb9d9ef34b644d107abf984cb3ca26e6c31b16509d7b9346119002206b732e6eaf0a6d14f43ed5d889726a5998d5a190895d4aeeb355cbc2c48ae2d2",id:"8aa8e83047ae4bc31b0775949ec3e9a393888ce39b463d91be26a9e5393fe7fc"},{type:0,amount:"46947045881",fee:"0",recipientId:"AG7uDVNphx9PerxNvELAPrHREsnDC4zNyN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220697f3cf632d4a4e8a3a424be3e15cf7e9b8af40f484dbd862fa32fd0e7bded8e0220061d59d40d3f63cb496b1b1030cdbfc87a9e06e71c63fb9b05764fac08df8dd0",id:"e351f47deb7122873b04a91a6051db3812abc8fbe84c907533e6f68a224ad68f"},{type:0,amount:"47400000000",fee:"0",recipientId:"AGkeeXQM5NjSMk5FwGs4wsVET2TojDJRgh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210092e1610b6e99829aa9a149a92fb3117ea73ee1f0c7c2b7cea099b55769870de6022017ec1216d66d1c8f7546d9c5e2db23b95f033313d2aa8e1e4f9762cc74036dc4",id:"4d07eac2ace1a2cd2579dcd8b0de07d6dde9c3145a2d09ab7580f8ded1531def"},{type:0,amount:"47400000000",fee:"0",recipientId:"AHGo9dHkARtM2E2kqb8oVi9VMGZduFNFGT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b022f6e3c9b494d8c11e12c2014cb078876469c3ce2cf74ce1d2448cb7f813190220012990c9b719f8e80e69108a6e9e0501d7094cf47a0daa1df32f08c2cf29130b",id:"143256c98cf7c47331065de6db5e8e328680aa78a35a9b7c4038055a6a416961"},{type:0,amount:"47400000000",fee:"0",recipientId:"AVZugZBjYSTPC9ik4rB6RknCnjzWPBdP84",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205d010fa7f4e16cdd80da7f18052eb197794173f661abd51d5b8d3a377a88d853022021f3f75f96a21cd8e3c694b1635a286febb72427c1d7983d52d6dc20a79c3576",id:"058cd4a632a73218954a3b9dd18a5b21395ea99bffe9504be2c111e7b5df1628"},{type:0,amount:"47400000000",fee:"0",recipientId:"AVp8x3mBHzs7fpvPfpUyeE8WMPdtX5CK63",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c0b5dd428920c1f5148e1282ff66c13b845990b6bb31f497381dd060e8c6c0d50220756750f9565df70437787347c15c60cb5d71677b21c9ce6a7c8bb5e9b786b4df",id:"6a3a8a2adc4c7c5cee98d56b69f581b32dddf7da323eddec1bcff013841bded5"},{type:0,amount:"47400000000",fee:"0",recipientId:"AbgCof5QkxSrpZNJGYsiepZuAEwPxhxT2T",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022063f69a740c7ea719eb624fcb71fee6b497a159b101f0f3b8f06e90791b7f508b0220710ebc92317ab726b2824684d51ae758059efa7c16b7ec78d38d45a4e7d6124e",id:"e5458cc7aff8e0bd8e2804a68822a783c48db482295997d53939305186376ea0"},{type:0,amount:"47400000000",fee:"0",recipientId:"AJZtruVwKAPj1rv3ahcF3Z9GTXGcN9oc7K",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204849a42fc02fb6473c4a79a0c2c9ad9facda13ad294495b9b2786b38745b7f3c022070dbe71e4555efe7fa244a3cca10bf07744bbd0ff280b83676a2a2e188f44825",id:"3ee0be7406fb23f3ba38c0eb96698b168c043afeaa6fd918949e0ec7c90cc3d6"},{type:0,amount:"47400000000",fee:"0",recipientId:"AJgvboi25qWyEgoZrqqWo39kPGaPVbrbki",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203c936c24a2e3490bfa4743b369ed09f12ed8dccefa55836551ba3c666febb58a0220586eac237dc31060f71bd86a893b78a578b76f2970b8f57ff31c31132b9f1008",id:"14de30e7e1bfc74127cca71e59bfc74a03b9b2f714837b4812a7e149cfef20d8"},{type:0,amount:"47400000000",fee:"0",recipientId:"AU5SUAATEwfHjAtQDkGFXVPL8Vh4k6sNtN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049a821648ea42ce2c2d1d02c5c97d7a8964060bdf2e4028954528dd843faa00e02203e800a96beedff49f634ed9da667ff419bc8c9c582bccd0297c31006683056a6",id:"f41fed485ef003ccbd228edaec88d8087731e0005616a600dcdf94c67e72f0a6"},{type:0,amount:"47400000000",fee:"0",recipientId:"AT6sBJKYptsn7csAsQSzrKuHeDNv7GkTSv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200b60f4bf416eef8e104234eaeb92ebe80647bd5afa15953cb446fa06da0b169c02204dad39f650f29de7c6867453c4121a868a2e24b12443d5c7722c4b2465443015",id:"17a5a7826eb0676195d33e12b63705cf50846a4db052199cc330156a67607c55"},{type:0,amount:"48367953807",fee:"0",recipientId:"APcpfWW8rMcGe9gmiFmZZ6qfeYBtwneDP8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100879fa90ae6b2d4c759e4ce307f0a1cd87980bce956d431fda9003f00ceffa6a4022054c7765423a5f512d1631d3ffa077d717d943298e5fb8cde08908a0a7c9b8267",id:"4a6b80c0f1feff81fd4450558c0da1528879ac2db42362ac7fe3b65f4fa52201"},{type:0,amount:"48500000000",fee:"0",recipientId:"ALKpxaTevuYjZYSXvTYav47Nj8jQaWSNqf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201c5a1709172473523d605e4a21c02f3350df6bd9cc3c0951f20e8e2d13151f95022047b2993d4fe88e1e7d079de95f342202c45813aa0f1a6d17289b71022c03d512",id:"fc415685bb6fd5876d5ad3c492ce4696004aefe8995874b6b1f1dd0d5571ec52"},{type:0,amount:"48500000000",fee:"0",recipientId:"AH2ZufhZhdDsHWsY6qBbrdp9AwH1rF1kes",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207d9dba6ca6da8f7e49f6d2654d0a02cf36beaee6da12fe5e5470582e4d9ea28102202de0debfc82f03488b867493316c18949aba7ce6788b8e6b583b26f7d9335792",id:"22a3ad155d12e9679a0af1d5e8384417828eec2b9fc36cbae2785464b12b372d"},{type:0,amount:"48500000000",fee:"0",recipientId:"AG2RijifYGo36FXJN2Noxq6hM1JEvX4Xxh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cc3629e0cfb25047f615976b40ebaec5d3048f34eec4739e4dfbff8537122a9d022034f893414c942792e86a25e64494c4fa92e72d2252236a2506d26ec1e6d64d41",id:"ce7f905a90772e79f6e7b54ecbff92625073fae404abce4af59244ac361b411a"},{type:0,amount:"48500000000",fee:"0",recipientId:"AZcoh7wHpN3Ex7ijGMrdMRTF77i4sMEgiP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ce4ea4644dce81416d60ad4de4ce33c7c389b6c6cb53f06cc3bd2c5f60a08e7302200dce4ca71921b485fc37eec0326bceae9c7345af73e16036a195d024c97644e5",id:"46016076914aa928d354260f80e77a6cee67c75a0fc754eb8c84c0278c8c5562"},{type:0,amount:"48500000000",fee:"0",recipientId:"AYnAUcC8xE7EXKouH467mTCiubcpbgQj1A",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201697eb4f8560bb074f208bc71be81f1308a275967f9af4931066f61c9f56912602204bd8f4577f71c2f5133295cf6d9f9cc54deb0d8c370fd8e1c100cbc8a192ec62",id:"37b6ab528f70a015c24f1d9532cee172e1ac7e24167b199de6afe74bec419b9e"},{type:0,amount:"48500000000",fee:"0",recipientId:"AUYW8cN8SXecVeBLmTZrr4XGPL4MEbGz4o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206a44108ed5a88f05d1de5932518d0c4f473ff9b85952ec7f168b7f013ccea9ac02205c0cdb66e19f9c4766eeae55d554af8e18954f88c008621eeaf4bbaada341df4",id:"9b7ce4722d40f509d67a01d676ea46ab007b7c3250e70cf450c0d4152c861356"},{type:0,amount:"48500000000",fee:"0",recipientId:"AHoMsGebVZJMkwd722t3SNQtz8kxbsK2j3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a6ccd3bc952f8e17fe373625a22692d035ce466241cdb96e5412246c4288bd6602200c55d0122b0e09a7b98df0940538ab3308937637b03640ece423228eaf724964",id:"abb9425699d86129a675ebe33f6021ccfe0423fb2ee919030cd44856e29ae0d1"},{type:0,amount:"48500000000",fee:"0",recipientId:"ARRMnpJsXLabK1nWxQqm3R1WKiY9ZyZxtn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008b4c4f04e3234f263978b73e510bff42e7eecbccc61bdddc82c906434bd2665f022061480eeade9e85307b62121241c7dfad53168a851d5a3e141c460bac0c78fb80",id:"6c644f623c504fd6449dec1ece024fa5026b86d13896bd6466912ae6f8487011"},{type:0,amount:"48500000000",fee:"0",recipientId:"AV6ffXNFhte61rxqLoCuWVTs3ufuJ7Z8jW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200db348a71ec10ef1fe1498daf3c292411ce01e1f524cfbdbee6f2a9e86959ef002204bbbbf2e508f461a134a6acc333ab4c817c9e2c791baca36d1f235a30320b11d",id:"cdc3bf330b78fc143c82058b0674465da2b2e840270869d05a42c2d3eac7ac7b"},{type:0,amount:"48500000000",fee:"0",recipientId:"APhVjG9pJj2YpG3A7rh9gApT2oFf1HHdbA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009609b469e7ced5253be188cc3ccf069e155894e715ca8ce9b402c024ae62577a02204b6887fa2ff4881d0e539d66ddd8649783bf4aea3cae68aa5bacb0cdd1e5a106",id:"bafdf9d4628983cf25b0f411f0c957ebe6565d01dc043d5f79877d6503749b62"},{type:0,amount:"48500000000",fee:"0",recipientId:"AVa7ZKfPSMcnZn5b43m9Z17dLYAkKPepSC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fbc0bd9719f34d1e39ab2c3eba2ae9b20434d4ed9550d745eba0a176c45abfae0220261f68db9cdbbd41ab3df574ffa1a7e5d07d94917bf3455f0348f2a8c86f33a4",id:"cae63006ef7dbc6d4bbb8c0f8b2f0c1821292a53c3720046d2f3e5aa9b18df74"},{type:0,amount:"48500000000",fee:"0",recipientId:"APJyeTaF5E619fNpruHNDppitroDorHt5a",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203a37ab7e59a3bebbcf9b1d55aa629f5eda60d60330c43ba2ba1c23c43783ac7702202e75368241dbcdf204a3d9e415f8fe755fd8e60c8c45454de3104e9212a9a56a",id:"22399be7427eedf993b9bda222c461f4daac136d9ae48988f073bd31d34d9c45"},{type:0,amount:"48500000000",fee:"0",recipientId:"AbWDXPoVRcHmUQ3KW4ZWeuD2mrPYfhodtr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b245491f63892ba07fa18e5c6f0d3dd50c141bf978094934d32aca1efd8c6bbe0220625ad4d01d27ecc58c643353396093c12c9ee5f617e8a7bab48f590b4e0e92d9",id:"e7b6647114488172d1c18263e301818829f4ad9185cae8bed3622cfcc2c001d2"},{type:0,amount:"48500000000",fee:"0",recipientId:"AUeBAB7qtntRpSt6GtXZXcVNeVkhuS2RRm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206013142ca9cf760ad5f77a3f946e8cd39a254ba8d4b2424489e01897edd3cabc022050457ebaa39e2b84e773ffee063526ead54194a86281dc21492e3fb0188ece93",id:"b9d8c7f12cd758e451a70df541351b3f19dd2f2c5516f7a62629e04227d1d4e8"},{type:0,amount:"48500000000",fee:"0",recipientId:"AMKTHeQDsTHWw3QeSRLAW2kWQnBrfrqKHV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6fae8c2f2fe7da5e0690c8b030e7ce4d7f49ed238d182c0bcd554e3c8daf1660220065e1ec76e1db8fc24fc360e04ed3a04782c04e29a9248597aa0974a67825937",id:"afaa4c75e302dfef1e9d36c63929decf4dfd7d8d1e8ec8f980bfb6459767ff76"},{type:0,amount:"48500000000",fee:"0",recipientId:"AJT7v8APQuYDV3uDJWsAFGBze9XDKpXdNt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022043653b6aacf91675ba1ea798f0ef37e7fb265811ae4a52130959e57d4d90091f02202b046afa7f108d0d1e2a377246e9aa295531e053c359385c1406eae8ca9dc4ab",id:"3917c81dff0713611f02f1427a92b63d26058577ec5f16eade5bc5f313f8861a"},{type:0,amount:"48500000000",fee:"0",recipientId:"AGuBeT5rVgCETkMTTAUc94Yzx788X9fiqH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f17d6e2720d978efea176cbc85f9e5c472882df3f6886172c5fc94b8c207b1f5022049fd7c95a425608177ca111b78b6666829d6644a03c324d033de3d003f2a70dc",id:"6094c25254da89c6e8d08fb7c97e255448331fd054f3aeb2a7a239f4cab5c43b"},{type:0,amount:"48500000000",fee:"0",recipientId:"AVvE9v9QyJvBPZK2kgMDwJxDMu1UEYvYRx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022019dbbb234bdb03d4652206e72bf2294f4d5e18112b86e1e52e29d0419369e55f02202be9a176cec5b00ad3cb40900080100b8c3b15a0827ae5132e4004f22f820895",id:"06df438d747a1cad820cde398e0198333f4389c12faeba195c0abb7fd4d92350"},{type:0,amount:"49717819332",fee:"0",recipientId:"AKFLHqUXHQSV8qchdjbm1jUYPptVatZyQy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100929159e14809ac7f07724a097962ed91909fae24bf045e51c74f5f212e2a4654022053ad7d90be5cd253e8fe175267b45453d5af2738f6478d611869ec5e4b124e46",id:"c57dfb4a2801c1ad9868dd2e14eca2115928f013ee8713e068ab670171e66abd"},{type:0,amount:"50011925828",fee:"0",recipientId:"AYTJNTk88MySw2YRJxb24XQrHr8fYe3SFf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207a665bd64a6becf19aaaa99468984ce4e5e74cdea92ab4ff565d8d202319ba7c02201aad01d9484f0ec40e02fac399570338ff66cb5b8a84748ba1cffa0bef41fd3a",id:"89079a73bd4806bcf928c52bec954e11ec3de186a4caf4d1bc8f21a430373c88"},{type:0,amount:"51012164344",fee:"0",recipientId:"ASm2ZsSj9W7jmYCDdLi8Eh9RwLQALkH1T9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cecb5a11966ec1d395eb2eead1ebf4d9c41f7a2e65d94bece07d8175fdb20125022062b79536de24c87d93ace4791643d62e2af941cba4aa457b776bc12524cdc0dd",id:"199a36b4f6be8326483599431afdc07c424c761826e5dc915103ab677d97112f"},{type:0,amount:"51523164985",fee:"0",recipientId:"AYXPcxBW4EiZ3hav9w8qPnYCfMC7UiHUFc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205006932929f7e0fcdfa814063682fa9576cd197d2ba944a52244d8ac573701620220540b8abb5d72775ef6fa039984fe4fb068fcbb11622715947e0bf43b00dcda85",id:"5af79acec8a2ca26ae1ef4a4bb4c36c9d756f4627407b9831dc1aefce88d41d1"},{type:0,amount:"51527438731",fee:"0",recipientId:"AN8fTyWTGzGMWndi86xLuPZ6sx5RqDU3V8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c86ad1039fbbf4dbf38750f6933eb94de081730aa4bbbab2e69fbf6bffd86994022065cb206c7a6da6a2cc49564fbdbfd861c2d7a43ae574a9152ca743ccef38883a",id:"0e875f8909e934d95123c4e39b0dff610726bf4cc793ff32ac3ab87607a869c0"},{type:0,amount:"51527438731",fee:"0",recipientId:"AcoxZHkmsepyWCs2K77TaAAuKXzYFRhQCF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a556f84c6f3ab557c61a3f103d5a19f967a624bc247905e6433206d17b05979702202bda3ea0fe77b2217dfef8a79921a4169a421451eb08f31350667e8253eacce2",id:"baf5b1d34f909d2ef94d82896e8354fb10d59464743e95174fdaf41f5816d986"},{type:0,amount:"52000000000",fee:"0",recipientId:"ANx31923yoBut3ToXoPugKPnzgRhRGELPX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008e91db1c38a78379d51739c8e7c5bba7c7e10423f90d975a83ae8fcd5073e08a022025c8927e171c351598b0ef39f93c2bc2eb2bc86eccd43b5b8c9f6bca681edc97",id:"6e86383cbfbcf26c0268180644f7a946325559b282acd1b4166d1edc55271951"},{type:0,amount:"52000000000",fee:"0",recipientId:"AN1XZJrPk8cm7Vwf1ZTrKrZtCCLZgkyrJ1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205e39a2dfce53486be7370d92d65ccbf412e079c07e0405d68fecab4f1e17371e0220438de48ce7ef76a2bb2b65bb9e2013eb1790f1c9b26d2037138ba4796315611e",id:"6cd2b5fb62f45dfcff3337b52bc1f4750761e88df28c5d02acfecea7cd0164d0"},{type:0,amount:"52000000000",fee:"0",recipientId:"ATGUpBz7YkxB86G86796U5yTEgyK5u4rJk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202a418c3135e189187865442f8ffd4cfcd5469eb1858ceb9add3bd0810ea37a4a02204744e68ce981a9d4bbc54c992382dacd14b47458873da4488e3995f206b09db1",id:"722201637e0a6c263a9a2094f2ca0adda2d8b69f44a6f15e4d29a53a93cb2985"},{type:0,amount:"52000000000",fee:"0",recipientId:"AGyRgpaEFZ2ZnNHL9Kr5bpMGkv5LUWebQb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f5ce9d7c0055100d09575738ccde05ba74dfe3db8bdf4d8a30d0bcd6b99592b02205a0f50872db6a29e0f0bab2c687c44077f9be26558b022dd74b3e2275cb6b853",id:"33f843ae2198e8310d2055803607fac2d24907bf8f8daa2f7290967e81672e14"},{type:0,amount:"52000000000",fee:"0",recipientId:"AT3g4LwnJfZoN4vuFLtMJY9Wxq2uMtLuxT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022059078b6b0dcb5203a2c3ba3a46bef4d723a63ecd6fd3a2e3ad29f67b50fcac1c02206994e842c8011c3de756e762b831e9b1aa12d8df872d5838ff98d53aeec95e2d",id:"f5ed89f77f37b64aae398ba0e89fb520081aac2ef2ffb2aec87c42bf29a719a4"},{type:0,amount:"52285195184",fee:"0",recipientId:"AdJLdk5Vkejk95ah4j3ZRcEWu34E1Q7wVN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022056d42be934431202be893e9d5e6d640d2d9f5acab7aac3bc40017654ee6688a902201f407d488855a6208aeaf3068f109a0b5de4abdfc4233e8bfbbb89ca3e33847d",id:"4912aebc2a0e8081a4761cdf85238d17a27277193389698d25200c3259116728"},{type:0,amount:"52325513889",fee:"0",recipientId:"AJE5ptbRLg4SGn7DQcaLChpuzjEo66WTDg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa8e197adcd0a62c4e79017cea097a9e22a2301be0ab22fb3b5466846bb78575022044a063dd5987a6e91f6ebc4858754ca6f7e7fefcf53bbd3e1e08e20c3f7e14db",id:"58aee6b0df8cea2a4fb9ec25402b3440a8e5076890a8cba8a9ccef0ca5b52148"},{type:0,amount:"52512522119",fee:"0",recipientId:"AR57nJGjbRknsTMoDJVPnKjeH7H8pQ4J3e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fb7872a819b54bbc0b30dcf4d8c3e413c84278d631628dca3a6805ec1231e210022002c76cc1e9b7672ad3f0a1db859e4b36564f7f815e494c5f9b1d601b6081e8db",id:"3f54c13b225a0c71692660cc5cc0910fedd163ff1aada08cff0b6216df414f4f"},{type:0,amount:"54692496501",fee:"0",recipientId:"AH1HPESny9sMqiJz1ySzoonvcgVLPNTVY8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204b168552ce3f30befaf9a566986b6c17f67471fa0cc2ea308acf7e580586d58f022017a5a0173699a7a5440f82dabea25270637d7167372d9aa71ec62b09e4c1860e",id:"b1ac5258577f86365c9c532150696897e0f5b304fc755657e4166b7f784adf79"},{type:0,amount:"56071540498",fee:"0",recipientId:"AY4gFPmvcG2GfTcVE25mqeDmnDQMPcWndc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203b1848de0b3be4cccfef6ff105581675c01006ec69da4492815ed63c194338f30220377f301d3fffb2a88f7ed13d42e2231cc5984f63775f082e3c85e02b37c1743d",id:"e1154407af38c6fbb875feb1badaeb5cd8262821b3b1b1a441cf506aaec41d4c"},{type:0,amount:"57049922288",fee:"0",recipientId:"AQbcTN3TDRc57j6fpwAvLjxsc9FeAJThp5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dbc5ba06661abfcadade917512e640a45ba57ff29ca7fd7ef728405e87f8f0cf022016d0bd3ef6c0a88d161096520dcf4673dc2cb8fc96ca7e61095ea5e67465c8b5",id:"3fd968cf660e948f9fe340334684579db327ab1d6281ee05a840dd1deb0e4b7f"},{type:0,amount:"57589490347",fee:"0",recipientId:"AZDQwckNFvu5RL2gP6x5SfNFtzSk91tPTQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e3824a2385b1f4133877047b7d5e702d269c82e64bf96196f526a063047d97120220327dfbafefca990f871ed25bcbad0bb7308279930468676e84c54d701890ee15",id:"d1d7712844a3898546271abe9b6c0d139b3d322f436d26d7805caa0a34e1f8e3"},{type:0,amount:"58900000000",fee:"0",recipientId:"AZe1BULQ52K9W8Pm2oz7WnS8EFsHSmtcGa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cef7f753f6cbce6fc6513cbbeffb4fed56e32f0f6632d87f4471d59841a8af2c022036f7202c8e437be380ecedf8f1930d38fada608900e93d33334ea8815c4ada2b",id:"00acf4f97b4d6baf38f7a16619a7bfb62d93a96cd30f5bb081fa15099dbaadfa"},{type:0,amount:"60000000000",fee:"0",recipientId:"AFuQS4a6wysBSmZJpMXq4xDNAetJJBAFsQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d8865a56a63f070cbf21dc8e48685ecd862077ee52ccd2c8cd8f40be72c3c4d3022057b11b12e968dd5e87df9da6928c6028a131b59bda09ee07a204dfbb9a055844",id:"d3ac3ea41460fd549c79fe3badd7a80ba4d467869b62b6b4bb342d8db1570efe"},{type:0,amount:"60000000000",fee:"0",recipientId:"AeWauSzsoZ2FXZwP7GFX92pPLyJMSkSKph",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204531943ac76998e7bb5987455c901b6174d603114ebf915775590c8315653896022001eaa07b36c01e93b07c66aa139cf299ebf25ae16431eb85611dfb9cea9c09a1",id:"c6719c892816ee2bdd2c113614cbbd92a59de7b54b3a4c17de68c0da22256d3e"},{type:0,amount:"60000000000",fee:"0",recipientId:"AMmqT7w7oXLazLwQcSV7WHnYx9S7KSXixq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200e9b8f5aa7d2471eb1981ce5482230a2c2fd1bbcc6db017f6a1ddee9e4e90eb202201ec640c890050eac7108f74d40f010d1e7d5f9bb05f2fd17eb5d8fe385080342",id:"7d269a6a5a9c507c1637707448d5fa61324f9394471fde06b0b53bbd51b0cac3"},{type:0,amount:"60000000000",fee:"0",recipientId:"AXdGv5eEBNGK5UTcRaFHbW3FwEiXifcegt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd07c0502e712b804344fdc118b52e2bd1f9082c52aaa6a87141f4e46d42107c0220718a1a7d58f887e544c92404b49824154352139fbe33eddb5a7dd5e4ef88d7ad",id:"f0425c83dd9d9eaae6158673566fc41a1d4dce9304fc82703c97463b4f93db7c"},{type:0,amount:"60000000000",fee:"0",recipientId:"AYA5LBnUiYXCraG1jz6XxGe1FbViiJbj7n",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022036479d87611d110554a7fc93c08cc78094a769674379c3630c8a77498626c1b302203712a96621cb8133a43789b7f4c64dc6dec8de903de7c7275582c1fba30007ba",id:"2b65f2d5ba1c79f39c61a99642af209df57514ea158bcdd790c637d6287175bd"},{type:0,amount:"60000000000",fee:"0",recipientId:"AVf5Nefkn7H2m5ccTY2Gss783w4B2XHrZH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b3ed017b9c924a513e4175d1ae026e1f6e0cf5062d8abf944a1d456c9b99a3e902206e81a45c621846a3b3975fdbc63e842926e2f0736a8cab98e382fb2027309e09",id:"afc6dc49249582cb59fd0ef44d5ef26d40d7a4faf6cec4edea6410396511a57a"},{type:0,amount:"60000000000",fee:"0",recipientId:"AZmiLVom6XmmQjch8mPaZjzbiZt7xEJ4Ux",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022001981eb483fc7c992ee3b6491fee84e92940df9fe96655b36a451771563a94f002201d0494084a12cf4de2441081cae004067d1d43f802c7c661bd75d0c8882a6d9b",id:"c177aef927d06946f2c80cdb33855fc233d0b20a5bc0b70a72d3e1f6076e4e4c"},{type:0,amount:"60000000000",fee:"0",recipientId:"AUs83fWgyxfn3vFcpr5DLhiNeCrRcrY8YL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022025c7b0874fc7eba0e23e003d5172490a564e3eed0a504861ce0346e2782a28400220165dc08dcf6720694b67de43258f127630a4d4cddbec8a2f66ec1ddf853d454c",id:"6e6193eb69cb0ba573c5545757078fab69cd407c3ab4499ab75985fbf378634b"},{type:0,amount:"60000000000",fee:"0",recipientId:"Ac2vFD8sqzixk7MaK7JwEYoe2QXEPna1e3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ee6a0aead5de861b29caaf1c876304bd9792e917a5ceeb1164b69aee6293727002201edad412f00a6efa6148a6a62d7148466f4d24ef343e406b5291688a4270b92b",id:"ab0da3b48e067dfbdd94c6bbcac4f3e468946a508735dae2c7cae0ce051e2087"},{type:0,amount:"60000000000",fee:"0",recipientId:"AbJSiFHgiy1Gc9dnpnSUgRQVu7cmKUTJFo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022007df858f6b336a855e06e11bde5f75b4584aa8941a8d61ed54b91ab8a76670ac02205fd2ca83ba0694a6a5ff2e552330616ac9896c319a319dc9998f5c6b57edda65",id:"6cbc50accd6cdccae73f205c0bddb4c944bdba76323c5100ba6331f89d16f952"},{type:0,amount:"60000000000",fee:"0",recipientId:"AaSvUFxNvGZcvxk9ncd7wnqtMw69qTF2NG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ecadd5dc516c178c2d80b3b52caf05720883e07c0b28bef1e0a20f27c0607900220178af5fb06c3327e6b5c6767c848bb2be60e311ed477bd64a56caa6e66dfa13b",id:"d1bc92a487e9202d245e42abfb7e37f60e08d0a78a3126624dd0e0783c2a9238"},{type:0,amount:"60000000000",fee:"0",recipientId:"ANFpv6FWVyodGiMNwfqBvfNo3tt59q2uwW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022064edc033b3ff422b695196c4a6d3a0bb6b321e467a2771632816d92ad05af9ca02203afca6079f18210a50218dc05956311a77b04c9b5c9f7c960f0f796c436c92fd",id:"a3429a6656e132eed4dbb74b2ed17238caf2790187166ecf4af877aa2a7087f5"},{type:0,amount:"60000000000",fee:"0",recipientId:"Ab9vTWogfBcwA3d9BVdHLZ7RVasLqZ7qwg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100923954a62e4ab7684af8694637e66839fcff5fc11d54de68b4fa82f7974b313202202d89f173b1c62ab26c6f9210a8cf5b7d12538124c7366c6c1914f8990bdcb272",id:"6cb18de69128b7a4c91bfce46d17227f1103f50f0061a9228e2488c58d26d18a"},{type:0,amount:"60000000000",fee:"0",recipientId:"AGonR6i4nHcvrHN95rsmg25YTgqRm7TBox",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f906a1d22b886f4198c8e6e8729d55f15fbd10761b445f92a2b7748ad4ed0295022018b9fe3b0e95e59d612119d349472090f1a78be9057c754dc17a0c23610247cb",id:"4c650df3dca440c5d3f2f17f89fe1000e114a60df15a51190134eac8feb777e0"},{type:0,amount:"60000000000",fee:"0",recipientId:"AZp6btpTxvxPCWdsJGUqZJCrZMYrS6cCk7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c8211a6578d9f11108a1fd950260f2e30c15c854c5cbe33af0d6ee329a81bfef02201fa7a8226fee5217097353f9b00c39cd6901e8cd2471cd3d3a34daa56958dc5e",id:"9ef08f0bd8beda3e82d6c39147005bdf9590f6df478e87716c5c69942f6e34f5"},{type:0,amount:"60000000000",fee:"0",recipientId:"AQT6VvbyD8BaVSBtkq2rQJf7ZFxpQMrGFF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f989f104e83e5091791929078b408a0e6c56d86bb8c9caed517293bb377a92aa02201bd438311e99fac1e31bd4c031ebcb9fe7f05de8a330713be4bd25f5effc2e0e",id:"30e10c01d2e0a376ce6deb42cedf146f8a849f9ead0170286e7ae6f5ec14af92"},{type:0,amount:"60000000000",fee:"0",recipientId:"AJRzekFXBecN23nD3H17GCvU5ykTqZ9Qu1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cf8ca12989b34d74df49b7f7db16c5d29d5c94e387890a6dc714628ec737f7c802207eda53f3c1d3f43b62598b1b6efc8de7a4b46ffc069750a90ef294b5a5d49fe8",id:"167ef310bcb21341cc2b7c32b1ded135a3223f5322eb438751a5081fd8a61c1e"},{type:0,amount:"60000000000",fee:"0",recipientId:"ANVX8UQEt8MkJokm35rGPiQbkMD6Kc7KSt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220723a3f4869ece9ec362b11c309a824ef17ff8287d3a6e2f1046db473bcc0faaa02201618ea49f81bf73c60ee427956afaa75826bf94788d73319c8810ef2c4538427",id:"b3734997009c33befcf1d9d3aad7917aed5eed0c4c7de9730ecba54a72db099c"},{type:0,amount:"60600000000",fee:"0",recipientId:"AVFpsz7LiwhRJmCAq63uMCFBXhXYaMNAq8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206c018a247cc32e4807e6fdc62fc83cab278d50ec7a4f0f67e26094387793cf7b022014782a31c92672ce921fe86b3b8cf36452e40b360830f47459c3fd8b26cbe5c5",id:"072dafcb1b3e774663b9c7be4c1c2054f7c9357e3708b5d61dde8104101026de"},{type:0,amount:"60600000000",fee:"0",recipientId:"AZ7M9chTUSjuxSUkWVDyQhAbEDVXbP2ZvA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207ce6a75041112fe7cc42d42ee0e35cddbcae0f33ba051c425b5d3afc235b691e02206092e7c04965993b38e860019c498968baef52f05160e492c5bcfda86a868e33",id:"d728112b0c69a9c9f5a3c1800347aa8f87de5ba5407fb16fed5e1079f9a48ac2"},{type:0,amount:"60600000000",fee:"0",recipientId:"ALMaBHtP4Ki4epwJut68XMDxYVRXTwhPuU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022050f867d1d89a62e65a88c9861c6fa93971ea08bd0564d9864a51517244196866022032ba4ba30dcf55cd08834085ddcdd425eceb7cc784f4459e62c11e70f29eed21",id:"996aade098c28e002949de9eba9dd663f3d9a29a8042dc516142bd56c91f1b8a"},{type:0,amount:"60600000000",fee:"0",recipientId:"Aapmg3eAWSv4bWzPYMNUWMx2cULimBsKDT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a76f37bb0e4c4eb508597231f437289107f7f9fd266c31c653c2e10c45d59cfd02202bcf4f912212e7d409bf2a425d73fd9697836a63019a064e6ce2ce8f174987d4",id:"544531e7295c7333e4e770a010b73b7584d06751a7d05388f3a523080299f929"},{type:0,amount:"60600000000",fee:"0",recipientId:"AZHUEDRF7B1wHT4qcg66t6f6AZpmAwnQzP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022037ff7edd4d48a58cb2d3aca7cf2b4a6f047b5e0ecf930c6624deec7e6e7ca22102202a038b5e27f88d596acc94687529c4700fffa41e907a34118e4867c012083b2f",id:"ce8ac13ef4d89b3c3e9cb359a4e5ecd8ece85313dd6ed08e247995fa12ae92af"},{type:0,amount:"60600000000",fee:"0",recipientId:"ALMjKKEK2z3hLUY3XubSxkAhzdpU5i8jsL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203589acf0d84cf3f231ae931522af87cd17ba02138f1b5fbaf71b1ee6f530451702204881f4bef7736594e5cb28e5fdac8bfadb467fc853c58ca7f59e55e7a7b121bf",id:"2988196f5d08ebe98c6bb9de0830e0675c85fbafb60a2ab7168a633360c112d1"},{type:0,amount:"60620516154",fee:"0",recipientId:"AWFzsKF4dALGbqzQgR81VbFBDdTSUJCBNU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210083abf4d927d402f0aec00e8c37e661e8be625b8ba47b3fe3d604500c358f88d30220645351b976be790dfeec71082328756d3610e33e57cb8b396657c69fff96feb5",id:"a68385459023327d26fa0e745c0891a34789bc3db0392294cee99cf1ddc1b190"},{type:0,amount:"62300000000",fee:"0",recipientId:"AGikMwhSBsgXuwCUZsv3EAkxeYSsHCRany",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022014e9a28ad7815e15bef49340133ef40a0ec92d8dfa80c125eb0c26e3d47ca96a02204a8ee6d3f847fadd1ccbf50e54d4a1f220ad28125f82cc1e653069761e953331",id:"71a75c1380f47a79f47847fcf615e733c9b8e4d44511490729cbc2cf7cb04b3a"},{type:0,amount:"62614203690",fee:"0",recipientId:"Acu59K3HbqucEtsNMMLzogU4tFJxmuJkCc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202448a56483a3ce4580734e2734c1cda29fec792689854f77a3bd2aeeb4b395be02206b17cca51c241b725a9f41d7a7d15e308f0f94f33480fbdea4f4ca2c99d01482",id:"d71afbccce8620d94b04bc74c40038eca31034383a296570c0b3181b00433bd0"},{type:0,amount:"62821647096",fee:"0",recipientId:"AGg3tZ3u4gE8mSM68gmeEiQnjARwUpT2n9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022011162de5da032f0a5e15596ee983ac470d62876eb2e8348cd015eccfa0b9831102207c6b60bae672fd6e593b3f5040733dde21c7ed75741a85faff759d97f8a5e27b",id:"ec44a065625a762aed0e093f485104dd5cca3e4d73fae79d6ead07ee6bc4704a"},{type:0,amount:"63651541963",fee:"0",recipientId:"AQEsgEhmEBzGLwtXeDzYacpgHFdmZzgxBD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210099bf9fcf91b0efffd75888770663c351f6e8158fbaec8ea99fe43382e31ad5230220575000d242528aa103ac912daf6117cb4ffabdd867fccdcf847b46d6e46c0a12",id:"130c08efd433f91433f3170cd7bc85b484d2c3e3c53134c0d955932726bc5338"},{type:0,amount:"64100000000",fee:"0",recipientId:"AL3BcBwg6R2PZ9pmnYe6wzeY9xr2E4Rhdi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220684f309ec0d8e34d82365c29e7ea21a08e4d044bf5a96e17f692ea4320ad12210220155cd1bce15cfb31d60d097fadfd6aec6bdd14f65c079039d9432ec9c7ab91ce",id:"22372757608284b2b88a6c068c4dc994ca37684d765c14f5be0bdb48ad50e968"},{type:0,amount:"64100000000",fee:"0",recipientId:"AbpU1DmufxiTYMDQrbKjeKumxoVPwKyczD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202f40051c81e2bf95bff6cc78fcf9cab2b999d48ebd9b6524b593c95441902d9e0220347c380e7fbbdbe5dd4ea8492a5deb17835b48ac22f388c2b519fd4103fff0fc",id:"8726a184e737d57567c17b077a424fb7ac9fe5b0cc9acf509e3af87baf5167e4"},{type:0,amount:"64700000000",fee:"0",recipientId:"AR51dQ3b2iPD7kxY6Jr2f8nvG9V1Tp4bXn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e701b0a5ae50d35cc985776be08a2af2a1189df4a7dd2bbaaf7b182ff5fe5ebd0220123def90996bfddd4c0769746130d4e13a8150d75e32770b6fc2024cad56e80a",id:"9f890472facb44d3f0fc91cc3100f33ff80a0ca419d6654479c0ad2e1867401e"},{type:0,amount:"66023125672",fee:"0",recipientId:"ALMVkKVthbGLSyCAu99UXPTcJUCgycJCio",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204c190c4ae5a7885bdefb89112f08f782934fcd60fa2fcc0ffb5a57fc25589f0702206c086bd249bceabc559d1bce46a35687963c7af245e982b83bcb4679d27f048b",id:"f0db655b4c6a0cce96585893a9ae0b5834629b471c8a10bae2d03ba7b59a86a2"},{type:0,amount:"66682567770",fee:"0",recipientId:"ALVWWv96ePvZpsr2LJiYkgczjp5HFh2vS6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d4223e4d6d86f362b5d9bbcf4887e3b4a7905504509d7cba066761e5ab4f2eee022053f2f8f1e12ea2c979c1ff532d2529577ee1d5128e4863e4b88081fe4223074f",id:"e49671791471089e19114260ecf0d0410571a828831fc693900129992cbdcd32"},{type:0,amount:"66985670351",fee:"0",recipientId:"AK5aMpBxSFkveYCPLK7655BNCYxE2oDWTj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022030059d3cb8c99259e250803496094fcbdf5c644a54be5de71ed67579c50dfe7c0220551dc20a9ea8fab2756d945ba96b6df226f786f1517ba500808990535517540a",id:"1ab441b67ca4f041fd0b4de0ee084f47808fc41327afbf0db652ec6e8eb0293d"},{type:0,amount:"67500000000",fee:"0",recipientId:"AZiCsJNur5AHuBmzXFm8hrvzMtxaXeBmTP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100819f9e25f210711c95d4f5bfda34f90c4cac0d2ee7fc788867059cc8437153a302202f94cd63aa4e59b051dc69a1acf46cd905be00b8547d377f705f6f63b3a61119",id:"373da2f2c548fb4f41d36f7b39aed883804bc453846bf42ad223c7dc22f65903"},{type:0,amount:"67922251265",fee:"0",recipientId:"AaVsZhcJWbpsrwHFYQ6Ms7dwRamLQGbiEQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fadc2d82b1e12c7ade65115d3d2a80c59be0570cdcecba6b6d46500de0b1723f022027b16d7f88841422575354d423d0cde46edd1ff3dbfe77cec29aa3cce7ddb61b",id:"b6cebe893f177fac2b32bb805b3a8b6ef79dcf42d7e7e1e367da46fec3c6e659"},{type:0,amount:"68047923959",fee:"0",recipientId:"AcfGpnqyxHTTCg9qGGDNoJZxp9gP3RZJEs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220056ebdfcf97cd26c4f1ddb8d2dc2eda872aa41c72122dbf4b1fb7dfe6a13a566022066e8ea897d1845fe11262d60550d930d4ec0be1408c874ae05b6705838499ee4",id:"636db58a8c9e586a4eb157c7b2be73af3edae8b5ff48248933970e06cc14ed67"},{type:0,amount:"69300000000",fee:"0",recipientId:"AdReKteT3KZV3nxYeaUwbxuvNu4Tbux8QV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220045e674e2020858cb6db65016b0721094b18d69d5c40b21e420eaca23c7e5e530220581f3f511f5ac357d3dd730ebf0e6084d62a9aeb356d1317463799444ed3a327",id:"194bef1b8604a0d86e0dce346149d9a67dec990def05321fa4ca2f5d857a3b45"},{type:0,amount:"69300000000",fee:"0",recipientId:"ATBhoLR6mCACu9T9iHcvPmXBbeabR9o2Af",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fe79b98c6ac6eea23af36c1cbea5f5ce104ab7e8cadad9905bc86c36555e552f022050dc6c3a5334e5efaed6f072a584319c51dfda211522d9424561e0d48bf5d7d7",id:"bc5c5cbfbacf7ca885544dd956d82dd4a99d3d9a9b922124556711c35aeaef1f"},{type:0,amount:"69300000000",fee:"0",recipientId:"AULwd36ELPQHp3MBCVjQPGsG5vLbWDwsX5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220730f890799382a99a6082648a97e89117ee5ea2cf79405ddbf726c8732a48a9a02204791eb8cad7f9b987dbd4865a507c87d446b502f4faa5b469ef938be043e034f",id:"8de5f8c57d06f1a26d57f2b30e1a6de70c1f4181b5c7a5ac46d4d77d4aa0d1d0"},{type:0,amount:"69300000000",fee:"0",recipientId:"ASWtE77ekytMEB82Snx3iZeyECBwcyYAGU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009e5a8e6261a7c50f8cc6afeaaf51cf433a55a2ef85545823811c2bbca752046402204d879e4ff9709ac18288c75ff6b2d0bf210d4466a7c46d82d688727b3a49eaa9",id:"a0d0bd4e4470ad7708a1b6a8d8c26c5ac9de239b8e15a581cf2a29699648f944"},{type:0,amount:"69300000000",fee:"0",recipientId:"AMWKeZaKAZgtvX3McGVZGVCjR519mjdxod",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e910ea19a113d2fe010320fba9848358135d3989f92c328a59d9611e1382a2c902205e83c177d11dd68147d97a9536fb8657b18121c69e3257034a101c7c928d4cc9",id:"622e1654011fa90a79be805a43dcd875b0d649c5e5d455285c2103430f5329f7"},{type:0,amount:"69300000000",fee:"0",recipientId:"AMP3grMYVWSxx5g7KdRf84PjvT3f9NDiZ4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100acbdeee8bdd4dc28809d30dfeff20965f48211675bddf7bed7a105a6e04092e202202c61fa35cc87ab1b02a8530b0021a8d05d2d20f34520637c9e17f60e603ac2b1",id:"9ade4fb6bd9dec55103ea68751040bb6cadbdb7f7518442327d72599dff0ec36"},{type:0,amount:"69300000000",fee:"0",recipientId:"APyUPnRwawq7LHHQbuLVwEVvviUS9gYvqf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210082e9e6dc9eccb3d40725cd5434128ebb94f56d47bb864d879a79cf6a6d7d92e6022020e76a058819f2d1afb709d1262835bd3571112422f885d1bb5dab06900a41dc",id:"961478ef66c79ff2bfe8f9c1f7f530c1111e998ab0f36386ae9b5d6a27fe2875"},{type:0,amount:"69300000000",fee:"0",recipientId:"AaygtE13tPoD7HTNBJiJQ2McDRxVaWdJYw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ef82c8eb76122d5557befd50e52d7c297ba3ec741cfc050fee3a1ca10d3bd01a02205b199789061011b890a09029642750b784f53a174082d8e113a43083fce2cd24",id:"5291bc37168adc5497986964e7f44a553aa5007143cb056be070857b285cdb0a"},{type:0,amount:"69300000000",fee:"0",recipientId:"AamfrghtYBbWkQtRV7vohTfrJCPv8Sg15f",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220757f338c7cfd2ba9342a5246b2c20ab46c2fab13d8b8475f748ae596d721afd702207dd4f45e4a0562765392b4041a812f3caba35985ec8b0a27f59af91063ca0ff4",id:"49f82d3d4360a92c509afd96a16e76adb8cee98b82b17c9ef0d8403a7d933b8b"},{type:0,amount:"71253891180",fee:"0",recipientId:"AHcjnPJA9tdupQcjcJMLtD6nnWJ9e6KFQs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009ac53ee5d6f50ae5eb6021aae45b59f77ff49b259a42bb7b072d1c9506c0063602203238177cd22e6d418db707699b4051639c4c530283d13a02c8c9ebef4fe9b4e9",id:"04069fc9bc169922314401d138568a956bfe70d8f3658a5fc456c33ca10ad67f"},{type:0,amount:"71429604399",fee:"0",recipientId:"AYFJQE3EPeSkuxEa4PubKaS4eVitUtZkiR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200add47cd5990fcd49c559868724063fc58cbdffe8c79aa958a7ecbc75a603bf7022017f022de0655cd62e383d4b7d9d4a4a074b8222ae7c1bd6cf26716c1292bb3ad",id:"06ed48da4f8bfc579c4ef2298b43745eb77529889ece543daaaf68ff2bdbb9b3"},{type:0,amount:"71590501751",fee:"0",recipientId:"AMP1K45yauAQU1c2NqwuUu6ekCmBqtaPoP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022014db9f5d0e46fd745c970ca39b54ce13f245ddff480e7abd19b318c262f3b951022062ca17464681bdfc5381876ebeb66740f14ea227007c34a4dfb1fe0946c6e2ce",id:"34598c7779c1aff18a82cfb53f52f7cd9baf51bf2fd9eb2d8088f38e9de615e2"},{type:0,amount:"71600000000",fee:"0",recipientId:"AQRhAZwfV8rwCvsb4WM1bVTbenugJn3c8r",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206b2f68e67bc4218888b389cadfca07d954a4388635974d1c4872819d9fb4305402201dfaa7ca2e83c0694ab80505ac5282ca28ae45970161acb774b38d87efaaff22",id:"e9a1f1079b09dbc72a80b56de6c65f7414455d7d569c6ef55540286c6e6cebce"},{type:0,amount:"72653688612",fee:"0",recipientId:"ATBxkNfkzM8NBxdCsJ44RdABoATkD98qdR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ca29827b5530b9846ee5a9084d75a067fbd9a932073e731af57c460bc403b5210220487342cde09bc5c339223b575a8a4c325098202707c68d09e0ed48bffdf72f1e",id:"11ecc7e569168d579cb6273ce6d27f58f29fd4db7c2897082d6e49cc6a9bbf8d"},{type:0,amount:"72700000000",fee:"0",recipientId:"AW5d3EEDJBQnKFHkPJnKPTinSivnBzUYkB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e68f134e251d796c0c4044c61881a7e49f260d17aef7fd2f4d54010d9fdf52d02203dd02402d012f4d91946dcb449f95d61d874e02ca02ef4bc2c36f7d4eb5b4547",id:"f38d068010566f2d81f972525779b84f6e8693880ef6251b6a63153a2e98d9ad"},{type:0,amount:"72700000000",fee:"0",recipientId:"AMYvEFsHMcctwEmRrghWE46Jj9kWbFPA3A",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a593780b9925611723664234d85ffde90f314afb68d45e4a0fccb00d40c1bef302200ddaf8f1677d988f24302a388e71d069149437822d9c7d2330fa037f96770110",id:"b1d8f7741c54407d505bcefc467f1daab79772ff77e71bbd0ef7f8708ae43582"},{type:0,amount:"72700000000",fee:"0",recipientId:"AR44YGUBeJXZDQcbUebK7Ds8fVHy7DHjgW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207ac0a6b2a5468d60e9f0290e5ceca35b896db702038309ffae2a410ba25f2b6902205d3643b2569c0b185f2bce2a1539f5a1cb92438a1e6efe3512080712fbf4774b",id:"1bb883cf35619f46d4839ebaff381c9ae4e00c3d4cbe981acd00bd98a1c4ab91"},{type:0,amount:"72700000000",fee:"0",recipientId:"AM3F4yHDLbzGGqJ9uMCjnPCv8xzoJ872sp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d6ac3a85f45bd763fa1fa8850dc8fc12978155982c3dbc250a5514d2e4f6081502200d08e59cbb1dd6bd22a7ca8375ae7bde3dc2499367482483b84b5dbf2df4a0f7",id:"e46dc48c6353759f1bfd73f83112c808d8a2ebbb687fcd177002f7facc3da944"},{type:0,amount:"73796297519",fee:"0",recipientId:"AGcoFdESM7NdWm1HodtJyDU32BHyShDqat",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022071e03ef704b56aef2dc368d7ca2642275dba4b81eb085aef6b8c1fe48307006602200a4354795dd801e4752ca441187d98f25609ac9b58a0ab79d2bdad3659db6ff8",id:"71e2650406959057c6503cf336a99c7be97b592eb47e383b03a334bfc3cd5bcd"},{type:0,amount:"74014667709",fee:"0",recipientId:"ATkzTWGZPHNhEKCToyULmtTaxSJYNiZRYz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210096a5bada156e5b921023bc5d2e79b9cb6058c2a6b722674c3bc04ff45e2c2d0f02202a804f965b55887303c2f15ef22bdfa0f70639141ab4db6b982832b76e5111d8",id:"ebab1e0dc5d5a02577ba83b3bcb0641722dfd2f08acde9ff14e7f4d5c5415ecf"},{type:0,amount:"74124099984",fee:"0",recipientId:"APpwmia2SFKQmhNZq9zxav8aidP5vBBptx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a4a58e349be3f5d8da0b00d71bc150261f2538a2031e06fc8dcf0df8afcb6865022003308a299af829c6bcad2f9bd36c2648d96eb3a3bb8b0c33e687b33099cd1fb3",id:"0dc2b86a4ea26f04660150949d00091900028bb6fef863392f2bb3110e77b498"},{type:0,amount:"75000000000",fee:"0",recipientId:"AWshU1zde3iSo4691GzJ1ibHDCqA8n7mGW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207a0ed602d07dca8bbf2b4d9458a0dc70fd92c192c2bd05cc455dab5977be3d48022044f872dff762af785e654198f8342b6083e66e9c0181a16c3c21a1f2423b982a",id:"2df19ff6e35c5a76a99a062d893432c27fbc7e98e6d4df4ded66109311b58744"},{type:0,amount:"75000000000",fee:"0",recipientId:"AVWUFjyvKxXZLYexXDWLiJLuLXZ49Ymb5f",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210093a55677a758062eeb56a99d5994dbd886a2bdd33f76287fb9dee7ce6f25322302202ce4a80a24aa3b75d0b8dce030b04985f3b625252ee8411223735ed013535f1a",id:"40dc85e19386d391e0da2c9d50cec7dbdef55e9777f8e0952e26ee7c9a2523e8"},{type:0,amount:"75000000000",fee:"0",recipientId:"AL9X3YsJksdtUqAMS2yojWG3rThNH3rXqc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022007d901327f63e75971e3a5a023ff97c2513cea96dbd4f4d2969fc33fcecf3c8d0220606584131bc5a786e15e7a7fb7e8dd752cffb73c578b5933a62d6ea6072c4ad0",id:"9d0d26d7fe267421fc7db3b7cdeb2b877696d056dfdbbd4dbc4fffbd052c5584"},{type:0,amount:"75000000000",fee:"0",recipientId:"ATE6aerp28bsHn4g9uhKk4ncJiGtKpuSNe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204faead30048606f6b057ddbd4ee76da47657a853cb8b644e588c29d375c9f2ac02207785f0ecd77c1af9f8f0f68c5cc3d344e4176fbf911037ec8df681e72f5d5f09",id:"7f2a17f9a14b1c84cf539431573a00a63d9059051a58ee50a3ae575effc08bd5"},{type:0,amount:"75000000000",fee:"0",recipientId:"ARc6St2Vj9T6PU8JPMtUn7RBb3DuM9uE8p",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100de6a748d2991d40d71bbdaa2de5cfd9cfef49c4bb9965174e0bdccc58cd7e0f5022027ed0e384fdaa03164d3e0f317f475d6f7728e1747afe8ba829a47edd3f39b59",id:"ff8a36e128dfadbdfd48159c0b65c608702425d36f3dbbe0db0657a80cae66de"},{type:0,amount:"75000000000",fee:"0",recipientId:"AHfcau8pKsQVGWzFCWSXDyoXGGkTKvuXsK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b1a48ab2f689a43aeb5e2b8d59f6e777ef945685301e64dcee3325bb9b3ef46202204b125c359a5d00bc54f0c0d0d3580a9841c73cf8e2ae19fe3e9666587a83a143",id:"64e0e887e60dfe4cf3c0a0a00ce3c89c5dbf6d76607e6c1bec2c8e65611492d6"},{type:0,amount:"75000000000",fee:"0",recipientId:"AaSGhysJYBesZiFSf4zHj986A11DRvYtca",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ed44ab5a22710c41eaf06885e3b3801bc9234987085adae32f7277d1c31dbd51022022a855e38b1e57ad064a4004f37597ed6d31deaa6378e06dcbee180075ac0fbc",id:"c2742c309400d0bc0e4cd6b4a183cf9c58d2a8d00ad67564e6243e5019ce79a4"},{type:0,amount:"75000000000",fee:"0",recipientId:"AS3gXToMKTMydG7jNvxUMNxygvUc7okXXw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d8b5a57241bd6982060e2a5260a6d6a9ad076c10e9a6b863503686b5b1d9ff0002200933f2e858f279ac24011d5008fe4a6ab99efab3ec795954a5b86c121fc09a90",id:"27fb7f36d8e0e19ff8caf5f74033b5912eec9611c439561f1d3edc37537c569a"},{type:0,amount:"75000000000",fee:"0",recipientId:"ATS6jWiztxiZw8EFr2VU158ZiJev6bYfiF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c434b9605d6bebe5950ae910388235326b701d218a72f630a523386a3d085fac02203ba1a9016a6738f0d6078d89d7e481aef5fb7e1c698262a345453f8978211ef0",id:"e78b60e89f9757af6f2193efd826c7f4e43cf55e992abb49a49fc6efd8488ffb"},{type:0,amount:"75435988442",fee:"0",recipientId:"AHZ3K294SDAyoNfoBX7ofAvxNr3u6bt2Tb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b700ec2b35d2a4a0a36802e503a75794557148e37121ea7983bd3bfad456d19202204fc34d8b6fcfd513b1e7d74dbcde9963eb606b234897f1d8fcd1024d236a7118",id:"c331e66c718f09ab4d637cd139a5e0a9620b0aa268b8548b51f82113a6f91961"},{type:0,amount:"75912885491",fee:"0",recipientId:"AL8QkKgRswzkHyPfaYuknd8F98onyYfsw7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b2b7083ee6801b455e14c24c1f739e1f19f39d429054e86c77475d82c54be2470220128182d6a3c7b36eb456a5e2438b9cf7579b981feef78a31fd71e63200ca1959",id:"9f74b82aa9272226bff1637d566a3e3ce213957f053eb6fb167ddc9d1b8833d2"},{type:0,amount:"76800000000",fee:"0",recipientId:"AcHCwqRbb4vneRguSP6SXqFq9RzUt8CCto",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203e95f92a3a0ff1cca53e0acfd410a6204074cc52135671a1cb1ab193e7e42b1402202cb648ac7bcefe13152483a85f5cb54a1f2dcbbbdef70fda2e9744d210692614",id:"1758ed13f7ab2c65bf54bebfff06763f6955bec8836c1bb84b9277960aaf3cf3"},{type:0,amount:"77291158098",fee:"0",recipientId:"ALikhBgeXghUsmNXXwXD37SPJJKP9YKFQZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022037329d395aa796dec8db0f41eebeec510fdce6cbcbd5bf429bd308392def4c6102200f20bb5f7d5849d26ee324ebe881ac7fabbf3c4e7fe5e93605c0f7615810f50e",id:"144e1c573644f0461ed333bd72feca9b94c7233763ef21f196cc869937bb5de7"},{type:0,amount:"77900000000",fee:"0",recipientId:"AG755Z2rSmeXi4nXc2Dp5xjEnV3h9DSePY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022072dad4689c20a7daec81141e12e12b48ccd71072cd2c6350321523515830f97302201e442d4448f5a0fb02e73deff73b0f798262beeae00d47c8f8a4ad94e041a4a3",id:"50259feb79aaba9640ac99629d6dd7cc84a43c14529be5549267c3fa219e071e"},{type:0,amount:"77900000000",fee:"0",recipientId:"AX6JKGAGAURGfwYoy8r6BqCsiHibZQFtSH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100894bcf3faf2ced40b12da116be0cebcccbdc17d822fecf2d52be9dad273dda8102207de8bca9554c27b1a37e7679c1b8ea4bd75b1b47697b9535789d5386f2a69289",id:"c6a38a970ca5a17e2632b958bf0f035c4760e2320fe5991c19dcce0fbc2ab0b8"},{type:0,amount:"77900000000",fee:"0",recipientId:"APkL2ZzBb5Smjhv8f9ugVgS8iRJP48pZEs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009f0a965cdca67e25a459cae3674e261d235b631393a521c95118260a50ef817b0220667fc3de471fea7ebe7d92776f8d0358bf1cb6e480c1964f45d104ee9ebc815c",id:"b11d02a6be882a82b57e34d0876feb673843ef6baafba06421adffbf34512108"},{type:0,amount:"77900000000",fee:"0",recipientId:"AaSzFFxYD6brxjKMaz6PsLM8Mgy611VWXU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203968e6322e183b266a578d5f6599b707c74b8d35dfd2722b1e43abe8850434af02207e4a7783ba60cd39d8503769f886d7f699b673cc1811879f37c97e000aee180a",id:"8a51fa7f53ee7372961dbbc9dae868c1111748d769488e36cb21c575ef3e9475"},{type:0,amount:"78500000000",fee:"0",recipientId:"AavMxN9AF7pJ1yV2qmWjYeihGZN4QBVSTo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f4b220829fbee7eaf190752898c3bc55359ab757413f2acb3d8f3f3c154e9206022076632671be2f123a47cc6b18b1f4ce8c5fa6697247a7b4a4da6e87e9c3810585",id:"becf405f252fa1c2c16031dc31feb20317838c2995476064f11fae9e7b3f23db"},{type:0,amount:"78806671001",fee:"0",recipientId:"AHTeBUJSraRKMDkpYmE2kzCTdEMTw2iS8v",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d1db2ff69f14e7066d9e3a8e9d9325f9c9c840ca2f3cb4499b72d615cbc47763022067e19df7ea14b245626624b76b408827093fe02036142966ad7c91c2a847bd83",id:"98e5b97afe377508e7c517db5d694167a9380169c78903aa92c557d673b7895c"},{type:0,amount:"79513639585",fee:"0",recipientId:"ANg37TzJQgskwThhQ526R6EukJff7jWXZD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e68c3dee5a9eb77645c958a81f8b3684485ab7ef7108eb29c95239d618ae6cbb0220779e760390ec7ef1700cc84b80361dc80c23df1bdc8fae6e2686e20f489342df",id:"e6fc80f568069d7ab3bb599d99e81f02ee2e8d85b449e37b2456f996f729f727"},{type:0,amount:"80575550021",fee:"0",recipientId:"AUwoiLFPxQimPnE8Bnp7Z9GVLGwNMn777R",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204d6e44f453221389ffcc58e8bc98a9a2691483f2e0713c1c0ebb38ca87236593022041a360781403cb8f434b221177060f206b3bc7bb184e011eb1e5066f1ea8d70f",id:"75dd1bd25d4413d6d4d5c2d9853d9c03283a2606365b1f0458d1f05d2923d4e2"},{type:0,amount:"80648439946",fee:"0",recipientId:"AWojAkunWdVit59t4Pr29yGWAdhCrMzeNf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022030ee47eac2cb2b80f4e22f407d8eee4c29733efd0e11daf7a3937bee384e44be02205695c43c6ed886a5db961b87b6008ff171ebc5add97e0318680528940ed0f007",id:"52f8f83b4a2346b02e454ecb7dbd9fac6a8d4c3f2596eccc5cc5c1444844a0e1"},{type:0,amount:"80880602287",fee:"0",recipientId:"AdTfUqtiB3NJuhhw2T2xPYHiMJYGJLFXBT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e5957017f40d2b9a0a7f10722697b00e49c16e791e1debccb1c2a072e3d063c202205c19ad3b770b138245321ff7dc299ed5f411f3d9fe727f22b54d1165f0447b8a",id:"f8900c94b8fd4e9c80d07fccee69881edfd4c525f7d624f076522bf677c50c56"},{type:0,amount:"81355763706",fee:"0",recipientId:"AP2TBQe9NmoirGTja8cbSuH6158GFprhoS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206a6476bd2d646155d0bab7dc4f952a8856c7789a6512718ae6d8b7736ae1ba1802205fc63cac9eb495ef7e2426a64668b771a694826c943023891f0f46f5ea8d4741",id:"ff059b0e5477e3417d2e3ed156d6cc48dcd62cbd7ab13e30c5120f80900d8e73"},{type:0,amount:"81837696809",fee:"0",recipientId:"Ab5x44ac1h97exN5QJsXY81WfMTAJx9YyW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022014c66256aef1f3094558a0890efc5a0f22a25dbcc1ff52c6f618a1ba519eb5cf02207a79ccc6cc6e562604c2d8e11eb041c27ff824a2682de9f399906e5360bfabc5",id:"4caf5c2aa360f7f94a872c50e41028b7c83540dc65ed63fe8c982fcf0472c0b8"},{type:0,amount:"81837696809",fee:"0",recipientId:"ATpmYfefxVXdB6raUbujbqqj3bx5kVoDfB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022073d07498a3e0ff75e0786796c973e8700139fe9222319fed425e96b03c78dad5022012fbc2aa62a479c88197a3656ec4488756356cb4d568ecf65fce5e8a15f5c5c0",id:"5e3146ffca3c3c29e76ffe1bbf28dacecf88566d393117d870feee892111cda9"},{type:0,amount:"83100000000",fee:"0",recipientId:"Acp2FNSe4DwXdMvJxBn6iLGGMZnvmtaR7X",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cc65894c33488bd85d10eb2104a142710a36d8f4899c8198dd50db51ba7bc6c10220527d3192c1357d324ffb84a70fd02b848328fef04d26537255c4f8790283f138",id:"d584d07fac0668f426731192de3967134dc574c6fedf27d98118df0c796c2dc7"},{type:0,amount:"83353209713",fee:"0",recipientId:"AJHws2iLF46S5j8JYEwSHnSvcJsfGmXuY1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207934233bc6857a2ec4440fb1d3d80c30f3e71b86c59438fedc0cb8f773e6d15b02202f6915682768af0db3aaaeca4e8154acdda3446ba816d4086636af89ed8726b3",id:"f16ba7a15ee70202fde2f172673374204a3beab555954cb8edb829214d4d1f9c"},{type:0,amount:"83989725133",fee:"0",recipientId:"APwVRmToNQFy3vq4wiEHfi8F1vYfwGXMxe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f04bd60b6b64559d86587bf3c83f6407c20b0ba82b91db0d79a284222d5ccabb02204bac2bdc4e1b328c668aa33cac6f435b666cd6e3f907b91463b3f5b03678d799",id:"6cc3b4a346d67a46d101749766f64a6332dae291d148b969d042cc8d178085e4"},{type:0,amount:"84900000000",fee:"0",recipientId:"ALaNWEzy9zhCVGrJw28wSV91ES1fhWZpQb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c27e16af3bac0ad147ffd8a884565fced7a6a609fea72d2b3e23a54cbf83e77b02205a8ad93c4da3473bec4315ea1917af5734413171b22df8d1f1cc14b1f0071f0f",id:"d7b32ba893728ea38b48d632302f22e87dab2c04a01cfd809413b7991afbc70a"},{type:0,amount:"84900000000",fee:"0",recipientId:"AGNzHhBmg7JkSgae3DKbhj45cJvd3at1ht",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f0dfcdf262541ad079d15430a8057ca753ae9ad4030811913110356b177afc19022031c0156405f2ca3262c121a648242b65f40e6b9e02f981af090bf5fd83d77234",id:"d3173641dc8035ce4e2bcfb9d20ad323b3b525d9cab25a86f8c3ecd6cddb1c07"},{type:0,amount:"86600000000",fee:"0",recipientId:"AbcfAjLyDM9xKnnKyPq1esgwrpPffzuhpK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100868c42ee9b8707f4c5fe317090e9d4bf3ee8fa023fef5a2dd1ab6e5613b58c5d02201898a17c6bc802c3bf03522db36e4d23a4fd74e780e83aac72043f51dde78074",id:"8c0b5fb020e1c904661cc97dddcb5ab0a946d6b4f8e74e4ec22dd225ecbc29ce"},{type:0,amount:"86600000000",fee:"0",recipientId:"AKFXsYK3u5Yys3gaQVtQnARgQYr7K2qi7Y",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202298b4575ccaa0e90fc62851eeb490411cf463a7f81205b530d9abba7151376502205b1834247d0e24b428d211069e86d0fe7498dce5545c21fcbc669a04738440f9",id:"83b38ef3992d3ab5884eb9b7bdfd37d7f937134f238e0810aa807ec6c78bbd34"},{type:0,amount:"86600000000",fee:"0",recipientId:"AHiUknBbPYinqfG6pGkgJnLWXyH5SdiAwu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022068147f79aeecf424c969d66138b8cfeb1a543bc833d0c1dcaea2b361ca67088202205af3b0111769ab1ad9a03f98c25b3df6db75e352c973cd6ac2a5adb9a528af23",id:"8fcf8c21aaa30f9a9cbe2e8f17ec58e811e52a7cb71ddd76a824560dd5ed26c2"},{type:0,amount:"86600000000",fee:"0",recipientId:"AGpULTAeC1WWDY8PFZjkzrbhwUqnksCTKA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ef2a3557376455e0d25cf3c951db49394f7b211503b42b57a239be0eb76b41a402203406584ba5c6b3f1c791f1bd54781c27cdc2e4f794b1c187e3ba05d8710559bf",id:"7c09fc8b85c9a9b231aaa24e4ba3149f2da51dba3693bdda7ef1dc584b6e2094"},{type:0,amount:"86600000000",fee:"0",recipientId:"AWhFiapndC1wvpb8o2cxWak84oFu4NBRMo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009a5bed09102a91a9355bec42813eb86645d93ef79c7eb0b26db2bd155008678902207b8ce7fb53a59078b53581a81ded88b791737d1caa5554c16a05a9c4ce15034d",id:"0288e9d30d96bde32799db384292c36aef36840fe738d86431cf001180e171c1"},{type:0,amount:"86600000000",fee:"0",recipientId:"AJUmYRUYf6hksjU2eWExtQZuxf7ZCACSzt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dfea58e5ce12a20be120decac2941a279eef12189d7a5491856278c7d18edd8e02202aba95df77908c8f46353fb1c4bdbbb1d68ad510dfdb082fb7c7f74e3f4f573f",id:"eba13a92a631ea574f1e478f8d5612d3af6ce7f6d610b669a7b46b30d878cc7d"},{type:0,amount:"86600000000",fee:"0",recipientId:"AY87NwPwRs4tYVYHznKKoqDWLqCUHrErYg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210098df44bd72c80c3ee825909494f2a973484d1b9d806e8b2d6359fd89afe5714b022002b29eea85c6bac9267d37d0ddc0f74a89c5833cc15f5b8cb5afc98355b6eb4a",id:"74d30f27ca09703402c3f09089ee5c4cb8548625974a0416f5efcff722984606"},{type:0,amount:"86600000000",fee:"0",recipientId:"ASmTzH5eR9V2nkrU7E8J7G8Mu8RTiQstJe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008f15851112cd2825da273a761843bfe8d772c88da8e8108835f18758758e3bb7022040497db4055ffa5c14c2a2f3fb000cdbeddd5a8fab8a9066e55b2beddb34a790",id:"850b70f669c62b31665190b27391ec3dff00222e4e86757e04bb35cc01076357"},{type:0,amount:"86600000000",fee:"0",recipientId:"AQqd4UCBGeKi4kJZyjoqPB62W7Gqqi41YL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022065e858357c4f598f1cf4c26e20e52b245fe92c2c58fb66c986106800e106d02e0220071dfa1c61fac54e79288d6b59f7b15c7271269e7cfb4c93a76bd0a7c6858011",id:"dc1dcfabdef49122d646d50d52fe9b558803df411c765ccf04fc4d86cc084d9e"},{type:0,amount:"87141991973",fee:"0",recipientId:"AR8hYbKPJYajTNZ9pnpHjWrm7CFqSFaGHL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c68c155894dc39eff0136d6aa9d7046964f2abbff63548e669298b937a2554dd0220669383cedd736fc3524a286ca3480001e17e6fdabe616b0290d151bed94361b5",id:"1697ab9993ff077aecedf05e5897d1366435f757709d0d4b8ba163cfbe64192f"},{type:0,amount:"88300000000",fee:"0",recipientId:"Acd1WttVcq32Xv7agoi1KnoQZ3uhS3xx5D",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a6e73937fdb2867650c86e5ab5afe66407d79f38ccd10e9af6e6b9210852bd96022064e9f36604a80e8ebd292143d6dbb4dcde5fa48567c1389ab448a87b57a7edd3",id:"129f59b0d566a5081114b4a4a287e8d352baa05b6ecdf8efff73fd0661d92da5"},{type:0,amount:"89405066332",fee:"0",recipientId:"AGzvuwhRjpXsCiF1acJxFnnXgNrMd8ekWe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205dd8167fcd2a31bff75cb1a6a98adc1490bdd1c8a073929aa05bb56ef3cd199b02202d18b11bbb36c91fde4ae756b4cf7dba8197433c8723835ba91b1f4424a40a32",id:"87618b8944a3032bb912cbece834559d1f043e7d7255705c6abda7bda031f445"},{type:0,amount:"89514072770",fee:"0",recipientId:"Acn1izrpJYNCFrqFwFQhKXgXHHyxpGAVTw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207a5fdefe87c639533e3a5ab01f52624f4d1b468ab88eedab0e523cac50513e1e0220388fe25747ea2764ca18cecd4ef8c3ddfdfd2a689effe830b22f336d1db292be",id:"2eb0bcffeb0067aa69f8438afdf76f91969faed45f26cd0c641fc0b11695145a"},{type:0,amount:"90000000000",fee:"0",recipientId:"AG1bTaALP6A4Lh7Z3pDDehv8saCFpf3RZQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204f0e2ff8ab6eb771ce67474134ca7a8b59f5d0fb421730fdd306803a548f867d022029256ce0d0c018660a1c3a9f38a7c627a07247a73b2058ae52a000fc06781267",id:"591c06ac993f8d1454caf4553330213b9fa246c7b8e761077768907b7f136dd4"},{type:0,amount:"90000000000",fee:"0",recipientId:"Aaq9zxgsq5heY5uGvHWpUanFsLp1aFYtzs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c537c102f6d3e77742203961dd7718f4441db6f9c73e6dc17c139c7639707592022049a206a019ec362981d3377b6172d499de98a4e603b2c6b6772e676f3161ce7d",id:"c66078f962373fe9663a4a89460d2cb8694aee100ef510c511376b64a6129d14"},{type:0,amount:"90000000000",fee:"0",recipientId:"APdt2CLhn79TsuFb148bXN4yRWDtxXByi9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be4c6dd3e6266e8f3c488f7a70e43547b289a8a838af519fc0e3718270133a7d02202b438a20931ed53c67c4122f3bc8543c5f51fbfdd918e87e2da4d0aaa9becaca",id:"fd445aafceecef71b3bf57c4f047fda3759aaa279f5bd7108a5ef27538b11002"},{type:0,amount:"90000000000",fee:"0",recipientId:"AcAs2VGLLA3CTwB4zzHBnbzrUpFU94qpo4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c21d6ea2c66bc26ddbcb250dcfe904c10684eaf8a30aef233aec5b64d3ec9687022011396be43ba72cd7cf2f5001e619fc4856d972745d012194b3d951834562f802",id:"0963c73ce61593cb65e2faaba4c803783a37198d3b93ea54323d3d52615d45b7"},{type:0,amount:"90000000000",fee:"0",recipientId:"AHvDiW6VVXRHhGLkMpuR8ZX5auBZPHK4AB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e333d51da7708efc3ab80ad3e510482ddfd87f2193b1d61939d38d5092fc5be402207bce382e3990b99c53e0c8e5dc3af4f948a7f511e514684e0f59c37aa0ec54a2",id:"f2d908530b25ea4f3cbce6547e4aaf248e18fe149f190d598f775fe26458e60e"},{type:0,amount:"90100000000",fee:"0",recipientId:"AJ43cE4rT2RoUAv3LfkDzYYG6podChvrUQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f4b85a3222ca9638fc1b8c5a64e4e23aec2cc4ccd8d957cd1ad0747cd430fe910220716428e2f6d7289bea53eb029006d1a1472cdf4661c0e55eb9b04ebcfde5958f",id:"a533655b53cfeff54fa341c2d9cb376e71c70f2b7625f798a66e6e1e0ca1c505"},{type:0,amount:"90882035337",fee:"0",recipientId:"ARQiX23neMcAX7SPfyauwbixNhfWF9DF7c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022018c324014c8bdd445bd2025fe527f52cc668886705b068837b9d86cc079ff215022075646fa0b7eee5be5355c1630eacc5bf4b98b1653db006d1cbfd41e07c156218",id:"4111147e598f03fce985dfef561a5205500865a7adaf07ebef15a8035b070726"},{type:0,amount:"91944813749",fee:"0",recipientId:"AZRqkB1K4ybcsZXL5ZV6sYfcqYD2bRYwzW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220794d5cfc737927e6e6e2a628298466bda26bebacc349fa3b75cae81c636bdfcb0220463b4ef0055b4bad1150add80f192999486d91c4ccfdb07da77bc9100844271c",id:"8e3e472a029d3c34d9360a92e08f71ecadbe5c2290fcd295d691b35444510626"},{type:0,amount:"92749389717",fee:"0",recipientId:"AXiaU4ksGV7AZHLSPPMM5Ey1wbEwEXoV2m",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203436a912a9c53191957842d0d04401a5b33b3255bafecea63ffb703fe36bc4a402204bdd3dc39ea956d43a909b9e5ad8c71909bb5291238ef2b0ff7bfea8cecce5c1",id:"6d4a7e3b265f562969594ee5ada3abf8a1a3028a324803a7d8566b294ace73f6"},{type:0,amount:"93006402914",fee:"0",recipientId:"AXZLHoMLqpEVAfeP1qcdtprba9GBoK8rU1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022074f4c6f3bc573b7e6ad33da49b2f429d8bd93d2947c8befb2eef024e24b885ff022035902bcc93a8f39dad93fa36d0c378378517d50ed2bfe1b910d8b6bf2712b3c6",id:"69adc07393e5f7e41408f665571ccdf56ed41e8414002df3a5ee78f83d4e51a3"},{type:0,amount:"94906857132",fee:"0",recipientId:"AGwRjNYG47ycvkzKjM5f6QrzcHoU8MNRHT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f31598c11e21ad6c472aca50ae8c9e762bf7b9dfb720bf81e4edeb0c94a0863302207172d053daf3cca142027b29c62cf8ad23f2bcfe856d9ae9bee82f2398bfcd38",id:"c311c2d17e5882af306b820209a4cccc28f382dc7861e8e59d39b7a5e023502e"},{type:0,amount:"95300000000",fee:"0",recipientId:"AY26UuQoCQTQA3Yaqf5Khwf1dWK79AkfuQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205a0874f7f7aef5aa5eb650196cf1ee1739a3c0d3be23fcefb43cb63efee96f3602203aa0715dd7b00a84926f6e7081840adc97f9dc8dff542373b614bb9a20912074",id:"493a1e157bbab8a11059fd93f54cb3015076628ab11b09a1f6768b233d8c1454"},{type:0,amount:"95300000000",fee:"0",recipientId:"AFwj9n5ARhWX6oWNbTEeR9bbX3o7xBikXD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220483099ced6fd44669d578eab70d4630660597f0df1a0fb734a62c72cb2581cf202206636e3f8066fc4857d558eeb5a3502b3aa2dc25b2f51f3d44aba967650479988",id:"a3273ca38ac6a49f276e658b11155fcd151f5745ce220bbf63373cc8971d784b"},{type:0,amount:"95300000000",fee:"0",recipientId:"AU54w4okTRtFbFa19MC79VBL9B3QW45trR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022055aefacb9cb4500f4573d6ab8e50e724970b2640b8a01cf071c4f0bd7076ca6a0220474772c7c8f44a38f98a1fd4be1cdd65120bbd3c2404c91f21fe5331f2f429c1",id:"de221e24f05801bb0c5681342127472e05e716852392d8d60733811779a0a142"},{type:0,amount:"95300000000",fee:"0",recipientId:"Adap1889XDiKC1bMLuLrSKzsabXmTuBXjR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220083115c84effaa090c3b79b7e7036a9bf2d9dc8e5818aad77446445f17ac8e41022016a2dc3addd3d82605c5b20e27f89019dba0af6bb91cbb609f4f3be89f463b4b",id:"97aaec895cc684d562baab61c97def9a651cddd63b1b8fdea8ca846a86eb595e"},{type:0,amount:"95559787156",fee:"0",recipientId:"AayAdq2K47PQiS7jMknrMwmQZujeEp5Fic",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200993e9038199932d4f9ea36724f89ac970875ce335ec578abd5792c24c4cce170220048ac8441077ce7e8eebb2fb0d22d4216f0ada9a0f8a3bff22e713f2d20b2875",id:"28103dfb6b5efe7dd7f5f880df2b3b910a96c4ba733c7bec80040aaf73b9a754"},{type:0,amount:"95612193593",fee:"0",recipientId:"AWgoLa9CgxHtUPAHqFvMpxvvFFK2iyBxUK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b71039017534404cadacb04535b1da38415411d5a2f6f5b511131c6a7d48843e02203504cabf89ca95390944620ed9398261da2a0a825e38d26ed5ce0c94bf58469c",id:"2a4c8eb73ba5fda2120f2ab91c7806ac9b603ca1a2b2d8301d676fda113ac29c"},{type:0,amount:"97000000000",fee:"0",recipientId:"AbD1qLeYWasvZH4PX4j2h9bXFXJxAdhAuy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203d888caf166966ca8a3559a40b6e8a7ac840048ef9469dc143bb1f9be26acbf302201d256b315dcbca537eaddc86c56850354726e67148088e38ea6763c8f774e2eb",id:"0725b2165c79199d1cb3087ce9f6989d0781c38bb4fd3bb054e9f42cf577532d"},{type:0,amount:"97000000000",fee:"0",recipientId:"AWffb5DY3ceB9DcHknBsLSmZ7bQCX9BgZa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200a3142e959218f0b3b7daf341222c3d2ceb5be21817e5c97bac96f964823faa70220086698050a3d8030bb6a1f01d4000297561b0a6204d58f8e4795b58a6b1448bc",id:"50f6375cdb90d9bf764f1544c5c85daaac335148e7c5b9706fad6564711eb832"},{type:0,amount:"97000000000",fee:"0",recipientId:"AJyxXb67KmdzRibbRSp55tC1NHcSXzNQmn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201bc4e3f5e8bae4e7bd81da4e8d4d3e8a1f9c607c36e39e442235b133e3c350dc02200cdab848881bcfd15adf3f38afba7582753e9824cded8a96c35de855ed394c6d",id:"41cff0cb50f6902d42cc455467415829d66bc857002b904b63b959fdcf028215"},{type:0,amount:"97000000000",fee:"0",recipientId:"AYo5WNLUCNSRKkvxxMs5hHCNxme7xQ12ZK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205958c081b5336400e4a7a834a33cb8b5b05b81cfd7fd435b6f2c2109850db75d02205ac3c51a116db91e925e26da94efb2143e3e457669ebed1bd7464c9b1306099b",id:"ec651028a9b2b6924dd11472761295fad83f3738d2b1ca5867b32a867e17d946"},{type:0,amount:"97000000000",fee:"0",recipientId:"AZFKF8mKcoFVz6nG2zvbFxQXfumsXK5a2J",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ffabd89a120c2ed7c03c125c1da112043f5dd98cc99f205ae87488f422278b87022054bc18f5d6c732e8a2132086bb9961d9b3313bbfde4f428cca2f61db934275cf",id:"6dc4ec6abe9f5b39e3624841432e9c9af338edc2d4214468029d204d15bd50af"},{type:0,amount:"97000000000",fee:"0",recipientId:"Acye9MMv7bbhsBoN1T7TuiCKwPFprnoJgk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f2dcee2429c1d6ed797c1d8825890474a4770f5f18774575308946bafb3b4c2502201ad6bd91169df28bb2fa6c827e8cecf0696d87136de193bcacae2068d0af83e4",id:"ddd07d35e2e0d2b1eb9d1fe7297051c22da9762283b767b6f8377d12959328fa"},{type:0,amount:"97000000000",fee:"0",recipientId:"ARWYVBZxnuxnp8JQp96fSZHZEw3Ea2Zd3X",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022007e6b2cbc4a6bf18e2b310325e1d7a56e0d455cd9afc6b7bffe419a9e70b710b02205faf2e91e740f331c04ca133da2e6408fa7f3ae4e5328b8ed6befabc8f7adef5",id:"52d56ac56c6e2363f94d1a953a908ba3d841bd193c4af65799f652044c66bde2"},{type:0,amount:"97000000000",fee:"0",recipientId:"AdPV4RprkYHnm1YajzZYcQ7QjVLwyP9HrS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203827a7141256877ba780e3b36875bb9af64f7f4fb3d9bbd4e9705d25dada25a7022027a1c9324c162cdc510aa1130099435d7d5569737249c3458f496577482a297b",id:"7cd4765b692240de26ec4341109869564754a541571ac191a1ecc960220cdc6f"},{type:0,amount:"97000000000",fee:"0",recipientId:"AGNE5beBRiKtzAGxCGHPUEzSTbYNmB4x65",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220639fd4f4f25e365b6cdb6ba4cd631a93cd826376a07ad941aff9c83eacb438b3022060a52e0cfa6f7b4b0048d30deff592b185a7132439031c9f84aa5eab945413e6",id:"aff7235b112fbaeb9bd31ed8ddd827a95d735d74cfdbec373727031a6e752d07"},{type:0,amount:"97297237832",fee:"0",recipientId:"AWxt9gGVbxQ7cX7o9DBniXLA3FNnAzo5Yc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dda67cc7adf9bf59523c49e3862a569502c02b69d4183681ba73fca12720e14f02202744c8bed417d5bb28499eb7bd3d353041c32d86247d9152090925395642f2eb",id:"08977af886121fdadc51a53156c4d920998d236560d5ba5518eae27b0cb75460"},{type:0,amount:"97764047435",fee:"0",recipientId:"AXduXps2TeHn7AvTiJW6m9qqNCtrPAXD3H",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022033d10a0876ec4a4dc66e809ab4a852ad48cc688c68891ca5934b78550420e7ae02201798c11a5dcd1c21f873f0bb299a86d363895ea0e6d4e7a1137327498fa69256",id:"9d74cfa57b58e0470fdb88a9eb944096e1c749a4196820575b99e948c125caca"},{type:0,amount:"98045028617",fee:"0",recipientId:"AWYjUa8Y5UdaZKtit3Va899xqZDdXxsRaS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c60266fade798d0a234c8e8d8fbdfe5f73fb015a29f2497acf95e78f1fb5e192022034c1a2debfaaf6068d46e70e42eb606082438aa53eeb75ae1d84f84b6cde0353",id:"828319edbb770b68aa5aa91afd76c02f76308f17f4a1c36523fb2817d1bc1e28"},{type:0,amount:"98100000000",fee:"0",recipientId:"AUzivjaUXHG8ivXWuj6evpdL2TjszQmVWs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022008f1b85ead0a3a3328f43200c0c532a2a539715fbf4856e084dea1e7498a096402201e0daee01c06927dde071f5f5cc7e6fe1eeab7291cf4f7a0f330833c535d2deb",id:"fa1085f0ac80d410ef9530aba0af26ae0d652677f5e90195bf2184be93dfdf71"},{type:0,amount:"99262036541",fee:"0",recipientId:"ANGen8SGYqiBR8TFgtawL57qxbNZRN1hrt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207557798214dc6bd35d8dc197714dc93287dbd45edd7ed832991635e5f20cf9a202207ca660d57db42578e31b0622648439ddf0219a862579b1c933d5987b76ce53c5",id:"f46f63e2877adbb32ffac6af90c5cbc79dc19ca5592a0579d395739d249a22a1"},{type:0,amount:"100000000000",fee:"0",recipientId:"APSNQNbPQabUiMqxLxjhEyTkeh27nWQDu8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009b295629afb30454c67ebce29203ec8b3f684f194fddb167bc4ef9d3739a300902202da7e99a48430663805db9cef9cc32915ad694ee75b5573a5be7d7d7d688afa4",id:"423abfb5a05784af1225894bc22e224dac42d421e90bb4227c945c35ccb9aa54"},{type:0,amount:"100000000000",fee:"0",recipientId:"Acj8SdBVCKnaCUFAydJ2Ggk6E7cfiRP1kJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009d471ec487447ee43e43ecca799d7d1eab2528d75a1f98a35d9f1c777ebbfcf5022020d40ea9d1d3903bf5ee4e2f67f97b7d62fdfeba622ca8e72e67622c9dbdf8ee",id:"0977be517acbf17a25ebbe3c2568a91667b5bbc05c6deea85d61b2f1154440b9"},{type:0,amount:"100000000000",fee:"0",recipientId:"ATz8duPjUnEL5oXZeD59rLCmtvHEcbui6i",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200de765be6c4d07836d73dc78eafed1a80fd2e91e3217e7bd104b6b084b09d78802207b244d85ea74fb2248bbd4c265a9e88a5b6a55ac6126f1545f839d2c41204f95",id:"106903e0f03337c08dc2d9af7c17263b53376474f56134b76357113a4e92b3e9"},{type:0,amount:"100000000000",fee:"0",recipientId:"AUxTza9YeaMXKqgU2FXp6mr6kGyRNFACRF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220697444d31def970f5a73bafad9d3c0865cfa82a8f200d95913a6953314b7b49102207f70b0f71f2177add874eafa7ddbac1c3f5162f1f410320b06cd9f312fa5cddb",id:"e2b78d5f015620390fc6dc0bb39dfe1473461281c1f2de2dc47668959cb705fe"},{type:0,amount:"100000000000",fee:"0",recipientId:"AdbbGesHxgSbb5S9BFVvvmgrLbz6vMwtti",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ff6e1f7efbd6cf34bd7e27dde486d29e6429d28f0407a2cb86b9d3b2430cf22802200f64f32c92f87a8591e674426c34e43534c3afae30c62f08b6492f53554e99f3",id:"900cc87a9f10d54378456a777b72168fa9a8e44d256d8c46c362a1e068b8a3ec"},{type:0,amount:"100000000000",fee:"0",recipientId:"ARRdKZqLoEz3BqkspqPFnjDMXUWHiK7rUf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008ac2f93dca4a6e81886d0cd48cd8d05fe612364e9382f45eadce42e3051cb0da0220349b5ef16d0dd502d887fbd2caa4d666cf0080f55a6c8bb92b99819e15cb148b",id:"48bdcc189c2fe7e1796fe78cb49f18b99187feae93e80d3e014d30101c067f84"},{type:0,amount:"100000000000",fee:"0",recipientId:"AM14wbgpGVFcR6EeyFrZ98iBSGQdKGwoNR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f56b28811f377035b6f5ef6597f622a8f45d0ab7ba46d9cf8b73367dc2ba72c4022021bc53a68673a43fbc49c98b19708527f61269f16bfa15571a74b468dde373e2",id:"1c0411c1f4e0cccf85034f50469939ef994740903f65ec5c51d3ea04a0d776d8"},{type:0,amount:"100000000000",fee:"0",recipientId:"APwycJtjaT8LaXEwN6DmyanzBWMGLCDffz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022030e5363191d9681297a0b85fda62a95ed499f3b6ec18f7dfe115371456367bb5022018807046a5e802ed222f7b2f87e583942782a7a3f3241592f9d7bed5d5d88784",id:"f0825d84e64b56bf8f388530cd18cdd4909be54d364ff9703db24cdacece080b"},{type:0,amount:"100000000000",fee:"0",recipientId:"AFwTR2Q1TyWgpYvnUD5AKZ3KtEhTZnjSen",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220767d49d3c2497cac443b78c806287b68deffea0b7bbbeb171335997b40a10d7c02201a7e30b1d7ac9115d98589b3b54c16e19e7466b8ccc4394b488cb2637315af0e",id:"0dd5220da9ca8ff958bbc8a4040a0502d8ee757ddde806625c00f4a7cdcdddda"},{type:0,amount:"100000000000",fee:"0",recipientId:"AWWbW4iYXRvXzXAG4DVNw13kxGyZXkXJZe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e00353541efedb21d3bd42e33963056ec65f0a79880f8a3a5f991103d8f64b3d02202f324a1de8c96fa2fbc41d9c3cd544e3e25bd84de68013c38696115a497a12cb",id:"3fe581b3aa87b6cffddcb98d27f62ef83138e2e78fcf3feea8a44db4575f89d1"},{type:0,amount:"100000000000",fee:"0",recipientId:"AZcPTCo5A8M36wCFvDvPz3H2cBBJo9p8iq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cc27cbdedfcb771e9d222bb6cb13a71d7aec8e36fd433ea04942633c5d5e84a20220564dacdf36c5d0abaacfb62c445c8fd1d046a794339f38a05b8f40ab1d338d2c",id:"7682c2fa3c74fc40d917290a665ca4412fe74b737cd464c908850ee631af679e"},{type:0,amount:"100000000000",fee:"0",recipientId:"ARoVFy8w9CsSBazrXnigzRZVrrsVhUzfLs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022072790cfc15458125cf1fe54e85d58955797d3f4409f99fe74d3405742fa72bda022013075f4dd0ec2054b42eabc9d41d4cbec07d885bf1650f75ef3936826dc2d1b4",id:"f20634bad0858d0e9b1fae15b9608e8b6c0eb8715adba0977e0f17cc20dbee99"},{type:0,amount:"100000000000",fee:"0",recipientId:"AaerL99dZfwZL7yghV9k8Ri5Hhpi9YPsYp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e67003e1c964db17bf2bbb00e6a4c60ca12e46753d36785b13041a136bef4ebf02207846bf567a2bd72bee3289a321e58da645d3a64dd9030d0f52028de50efac7b8",id:"8aae4664984ac30d28b171541c9a41dccabe558089b073d8236171c40456c4a0"},{type:0,amount:"100000000000",fee:"0",recipientId:"AYA1abqExAqcWxP4qHaMNN6MdwSVAzz23e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205e46b3935995f1edd2797f8a4ecd5181cf16893d4f955747824e0cbd7effae40022012f11701804587a5c2d9bdd8295fbf67524bce5a26ac6758bb7d43ba6975ecd0",id:"fb4d5ab6087839d6bea3c4b93d91a5654cb556023c0c2648e3ddc47268b29447"},{type:0,amount:"100023851656",fee:"0",recipientId:"AG825v123YvZQuL4vbe7wNxvdyTewt9gGm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009d37379a461696e7b42faf48419ac770ead1768095ff38997eee98fc01bccc3802203272ec96815df48dc692ff686952e04053d60f14c0cddd821f0bfca775034b27",id:"aca358d024faa5f4fa68b7943ccace6bbc5a9ba2bfcc614445b7a1b4e96be417"},{type:0,amount:"100749519793",fee:"0",recipientId:"AStWDeuQ3NTP619nCiyxbYbnyHTnR6cxb3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022046f3e87a0851d6feaae6224127051c783d08efc892aa52118f89dab6f11f02310220030a37ce70dcc5b4554397934d67ea888f49c7ad825a337a5540f8fae99cca44",id:"b92dcea5e20cb9348374898f686f4d2e2b6ecfaceefd6a0ca637bc61c6a2bf46"},{type:0,amount:"100933159396",fee:"0",recipientId:"ANV8jYBCQdPscN31ES2NDFQ5Xe87zUrFzX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022000ac1e8b3e471505f8476f98ea31920128876a804d22ee446af4ddf210442cfd02203032930c4d6d6646d3d4140ff89c48b4e58374770f6be9169d04c1099a39d216",id:"c57cb34e723d065e12f74b33c2ba5bcde69763ef191505ba9cb38af0a769360c"},{type:0,amount:"101680182605",fee:"0",recipientId:"AUQroQ4if3dKyFwgv6ESDM8MHyJDe8MVLP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022025f1efed2ab491fe87764de2cca46aeebe3e31e558210001798d86c831dd69fc022059dd3257cbb318ab88d7f21baa2cf56a975582d578a3c67cc188ce46793a2d2b",id:"f1d975e6feb911d060c7ee86cebf9f56ea0d3001d8d1e9813d24c0fd1791aeb4"},{type:0,amount:"101830636768",fee:"0",recipientId:"AR58rt33ihFKG56DXMVdKoidzNm4C8kCnF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a8e1e2102f75026fdf1cdf3bd8a737a673315d48ccf8b28730235ac9f78dd2ed02205d5a50aefab9c7817d6769a64c83b19b96df69769a735a3051c9888eb4844ce7",id:"84ada517a25f66b23c3127830b7d77948fab1c1fd2e643f4166384c1a6af9bfe"},{type:0,amount:"102744627447",fee:"0",recipientId:"AY7JH5b3GdHv1ZcbFXW3c19ovA5k3jYtDc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dc91d5af8df4ce928414162c63d64452bc1a05ecf20fca159cc374deab7401ea0220749733c55f0532b454f3d401d41bc3bb79fec7fef8b439f54c34c17fd5865a1d",id:"edbb728bb5f8ccf9384ccd41be5689507179d05d60f72188c419d5163d76b6cd"},{type:0,amount:"103054877463",fee:"0",recipientId:"AHRjCLd18MVx4MevXGsygteD41pjjEmae5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220223d32f9daa36a1d0c96c35d6825922ac18fd23cf9e69f640f707c27a49f9a4802206e4132f40a65ceabff49666671a7f8d1d22848e06ff91c31a42cb6cc38f0d9b9",id:"63a23da52548b2b0f932340589409d453f3d46656f78dea4d8688d926013f84d"},{type:0,amount:"103054877463",fee:"0",recipientId:"AYwziM1FFZdiYJFpLjSDBQUnJD5gQG3T6U",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ef3d526e72b7021dfdaf9b7706c88ad8bd985f453754a116254d13b888e127140220259eebf0c8aa21adee9b573ceb4bc1b4597c72cf6a18cf1617cf645eb169dd4d",id:"915baba7089f762e6ff2398ad391de54f7285f0b155a277d88e5a9bd049139b8"},{type:0,amount:"103054877463",fee:"0",recipientId:"AFygDabDnSBm2M1iDWofGNHPa6ZeCEeqj4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009fb6a8eeca7df3b18fa9d1db1a1a4c1c63fb36dc5f71396c9f6d21070e7fe8d90220426ff00438c59643cf1ccd01575832f0a375d1217c43cd816538f3968c643fb1",id:"886d32c7624d952ff3db788984073b74e5dc6bc027ef926d1139b0a512dc3f2b"},{type:0,amount:"103054877463",fee:"0",recipientId:"AMimZDyN8vdDp96CHVLtWkhtvmERvTmnnT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd942aca86527ff6011d230a0ad9626468d361b91f44ad22e32c0774627b0cf90220410fe8a28dec6354408b5da8bb3b77f5f5a4e2b491dabf5177876a8b29928c97",id:"b7f7c997bc93d99f92b458affba8081b15e2349f35176e2100ad38bd859bcdf0"},{type:0,amount:"103054877463",fee:"0",recipientId:"APdPdgkVCNJqQz1xP4qqzRY6K2tjybdH6V",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bdb4e44659fffbe283616db6d45315d3abd1e4e559bbf323629b9efc4ed81b080220069b6e53fd81cea49c8136ba9ae23e00258ab6a2d30130d1b31784a21b669a96",id:"ffaa043601b679834ce66deff3b7ff00046acd8bb3f573ac6610165ef087879a"},{type:0,amount:"103900000000",fee:"0",recipientId:"AZiQBaR5TwSH34NXrdrvErMX3aiYZWFxo8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c87c4c23d0a4432c99df14afd1c88bdda73f3a156ad89a247ea662080b7214dd022055506cba670851b036bb39e638986879199b28312fdf356a685bdd1b17003708",id:"146b10f76eab1b6783af1c108c35df9bafa3c6ba25b72ac6597d9fc57c7cb215"},{type:0,amount:"103900000000",fee:"0",recipientId:"AZo1U1VRipZ4aWx8LYfEXmyEBcFTs2St36",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022040317a8ac4fe1308c10fdb2ccf695db0d4374cc57ce5b012e7d37766a7619ec70220014d508f6dda12b5b9ff095e6d53fa77bdaeeb04713de273725d09b55ca22251",id:"549b4107541aaa18058574d381323196285df6645476b9dd4e4f791ea4c49106"},{type:0,amount:"103900000000",fee:"0",recipientId:"Af4CtTPXJ4Wkgrsw1zsvmCoEUS1AksAyEk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203e6c4eb1fa7b5311f04bc7cdc38445b9b737592b9eaf0df143998cf5ce66eeec02204ee48dfa39a93b9afb978afdb4b2de537dbbeaf1c82e31059d344be867378cbd",id:"3fe8bb50ef8e7f6346f7447e934e9cf8e51d981ab151698ac258cdf03c72b8ac"},{type:0,amount:"103900000000",fee:"0",recipientId:"AV1MipTPz9KkjJKqSfagNiQkpCDACG6A45",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009c3986801d041cc233bbd394cac166ddcb2c55482aca48a85a59c130c55cd8d50220164eb74f9ef23f5a6307756fe57ff385258a9fbdeecb5525802f79cf5dee8956",id:"54fc495250ae8a95f231553ba952f8ff502aba015ad586f03f68bd6fceaa7606"},{type:0,amount:"103900000000",fee:"0",recipientId:"AdFF3NRiwLpVuypouVth7HKk5Ca4xejtmq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100efce8d12b523214f79402697597729647211ba94ef27ae2743af9d6ff0985da602202b75b8e0a0a655a8863b39940726b51b31566f98ddb51b2b17735a7970596edf",id:"436256751f2e97b12d0a99f725a71aaa4b4ace4644b4087298592e0a5cafda7d"},{type:0,amount:"104570390367",fee:"0",recipientId:"AXowRmmMSAB7GFCy8XPpNLu7E23B7DmkPa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e0b952d2bfc38186a4ca9ca51607f44ef64a3a0e58836171f1668f0f47fc10b5022071d9e89774682c5cb84897d5c406aab779527e759ddfac473c900add865e420c",id:"ef7a402d8c58133af24b24b5ec33821e0b443e680144a20b9ae83ac85ea2d16b"},{type:0,amount:"104811009865",fee:"0",recipientId:"AJNitjA6dbbiz5vDaQkaKSXaNiktVFmopp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100aef19847d686fa0e802b7eccdf3e302fd9bc3aacc87f6ed76ee2ef0d5abd0c570220248a00f81756031ad2b87a6bb367e7e6cedc11b4412ee3998db66972edd35166",id:"1d956208a3979f3224a4dd347109102afae6463b060bd94957440442904988fd"},{type:0,amount:"105000000000",fee:"0",recipientId:"ALrkZgaD6BBZCLx1FaUvcFRL9BkTsjXa6P",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eb10d7c5fd4b9c27aae44cccefec7315600dbabf3cbb180fc66e996ea2856783022037c60b02b33ac06604cc39077d11372ade6e1a66aa89f99c43b6fd0f0fcd8ee3",id:"1d10aadc7d67af4ea389a2f0163fc174f261d71ca6c80c2b326b674858948ed2"},{type:0,amount:"105000000000",fee:"0",recipientId:"AZnonaWAZjaGFbku3DLoeGwgg8PCy41sMj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210091235be3645f78fa9d77d45882767b7280e779f3532defcdf0b71eeebc73bf63022050c9631aedf3c42231ed1fb9f385763c370ff1c9faa6c14ce07d14500fab3d0f",id:"a65fe81748277af637a844a6a21b8cd57f4d1dcbe6aa58a553a94cfcf0ee2650"},{type:0,amount:"105000000000",fee:"0",recipientId:"AbCoHPSKn16NSKL58h81seENSohU6xAT9w",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204ee2fa79681c3c86b4107e239596087b33a0fb6108e2bfe286598618945c859902203a32f45dd2538f1e49eea075fbda05db26f5c9cfb2b3d1f4aa85117bf4a92149",id:"306de8162df8007e47f95095c1386c4f838d32bd6072ea1e740e27720649058d"},{type:0,amount:"105000000000",fee:"0",recipientId:"AMng2ZJC3Gh2ykVUAGUeKB2q16WnaqK9hF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204d0818688736ad3bb25e21e4af2716b2038a3691e2cc7f27bda2df761df4c1c802201c2fd04143b52f2b5e5bc1d3f8c17cb038b90eebd5282ac3877012a874f8fa95",id:"1a64cc2367fc2d05a9fc862cbb99be77166117d5ba2ec25907126561b2d9e1ed"},{type:0,amount:"105381567713",fee:"0",recipientId:"ANzYwcwGfMg15SgWMkGuYPxjePuXLtvuEG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220750181471cd14e07434ff8f59022127b7ebb36b643aaa1851142144fd6d0bfaf0220268280752dd52b66eda35bb6384e6148135461ae865154b175b36162860d71d6",id:"e4f2db2efffd43d8a99a2df742cc93ba40d3e97cc4e9cb421f9ad3c85a1d5e19"},{type:0,amount:"105714987355",fee:"0",recipientId:"AcJFXLL7uS4i8x6Jg2hZQftgirzmFt2X1t",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200c0d4ba6f603d8dc3b535fb8b442fd1c92c2d7deca82c1aff622981874563b0b022043f3c8a59e042b847b1359f1a28a34b44fccaa042c41947a1565ec2d7e719167",id:"a85f33a959089b825b8453138de87a63137c1fc61ab1038f3e8202d761133c31"},{type:0,amount:"106221504166",fee:"0",recipientId:"APk1d1oci5TiANq2XcdQjy8C8iLwmtTf1G",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206afbd9bc04c90409a31228c58e89f493ce384d7dd97a0b97412a4725d7358ccc022067b1f28540632ad989bd7458fdcd23e5897615e9d9017289850277034114888a",id:"b9cf7363f5730e0b1ac4ce9114ef5eee22797016bb718354940fcb53cab874b2"},{type:0,amount:"107239514002",fee:"0",recipientId:"AGLvTbXCtBAdCD7bvAi8PBSSvRexEv1upC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ddf53eb746d313d24df80c2edb7a3d01b533a9691d05d4c863afe390ee5a82402204de5576afd6f9a54ad7f106cdc71691acbe16e206914e9da123709f9ab78ef85",id:"84b3f5981b62693819aaed660e3eed3e5f13042449234ab73a5870e760a45c7d"},{type:0,amount:"107692346948",fee:"0",recipientId:"AR8jXLCoRWnnkaD78YxajVcFsTv7eVutRb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022077094180476f993bcc0da365d9f9667c8724c5d07402689ece5f870af7e63b2f02200faa17f80991d65bc3e8a2593eb2ccbd7b12fda29dc3fb856ae0d222bd56113d",id:"dd832724781a028d0427b13d14813c82d8e949fa488e9885c872f1d7e6176642"},{type:0,amount:"109100000000",fee:"0",recipientId:"Ae8ZPCEgJEUMkR8oD1Pp9eDocsGE2MRtiZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022040ea35b1906200719f7b79139f0bc3dcfd2d1f34b19c3e75a4fdd1e3ca84b60b022008522e9eb7dde5ec65fecddb318added37afed341c66d4c3f938cdb539bab0c3",id:"ae1127f0c65bc53762bb7b5e79c3dd2f0da85fb201afc5bb1577b1fcf371c31c"},{type:0,amount:"109100000000",fee:"0",recipientId:"ASoz5DXAEBaQy8H5KrYWH6bzYkJ3zHVSsx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b4b63ea88288f994776b80c78ecb41793cf70fbf72e3038acf73099c5677be9d02200358cad66ae2d98a08c43be0c73fe88a6ee869be49d0012e394db3d14659c43c",id:"f2d28d17f885481487547831f316bcf701a1be0d2263403740dc0516293384c3"},{type:0,amount:"109100000000",fee:"0",recipientId:"AaPUG2PrNDy6UVUBkSwPuKvKh2DSZdnDqe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d7f47c01e28bec5afbf49a5cbfd68f4a911a4e840b624e13abfa4209c2e67c102201fcb385bc4fd9b55c687e5a253b2f181a658b7fc462d8830e63deee0c82967d7",id:"0974483b28113dc2ba87c4e8caa564f71b5a4dd10167252e66124b02fbddd7d9"},{type:0,amount:"109100000000",fee:"0",recipientId:"Aek4aTvvdA3hUVUjhgkDtPQF5E2iBuAVP5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a05c9fc68f17c57f5adfc88c3bef13e616149a53b65a6a97c95d8f750a3251ad02203cd2aeed88591b244df1c05342d79fc7a5c0da989d5b024bb4c72582b28333ea",id:"cb54ba7a6a747c5d20e66648e3a7d12c6e5193d0ec1daba2dbae6b8bda726165"},{type:0,amount:"110800000000",fee:"0",recipientId:"AL32Ure9XiVh6emxgHdLQPRbLbr5otNqDc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b8d1cd4c228ea834d371edd3ee9c59053d831c124edc7588cb358aaf0639f93102200cbfb5d6f0cb5498709897a24af743cc1a80a66a948d411c9d71ef18394872ee",id:"4683c51754c198ccaefd949f1becfa8dc36383bdf4f43b9a5ac3df0e848cbb01"},{type:0,amount:"111541749725",fee:"0",recipientId:"Af3iDQ3qYG53LHVXgGbQFXkffa2pyjdEFj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c57f7ddf68a0d08feb91bc9d67e9b246bdff6d8fc3dc07e3524cde453ad60bb9022007a08e49417b03c201aae30e9c6b12360c1e5e92b7ea5e72cc3b257d48578f54",id:"df3260c10be2b53c385cbe025e84be776d6f9cc5bbced87a110ba3fee4ada362"},{type:0,amount:"112600000000",fee:"0",recipientId:"AU1k68nmfcpAkTkday2TZFoKuttD6eh7JL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3043022004abba6942eb051d80c8faea823133159c8207251f82bae328b0227b77f92097021f1580e0ff6214cbec6d97059469e5f498b39c25873c889870d0450b1b892be5",id:"c4b480f9254eb4290b7acc61e2e85bd2131785e482f6e617b8c3a6084773760b"},{type:0,amount:"112600000000",fee:"0",recipientId:"AS3SgCu4BQ4VxfdJyu4HKNVHZGTQBP6bTB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bd132234f55b6c486d34b3fb5b1b52558d45938ffbe0a02e2ee06ba9fe7673e802200f61ad1ae7b20468c496c0526bf726546eae7907387f72f85245e0c7fd9888a5",id:"66b7e7ae47d5663ceef394c8cec8ddd1851bb4034c5ad133c1b4f6d2b18b43a1"},{type:0,amount:"112600000000",fee:"0",recipientId:"AWepJMLX9wD9nm8RqagQasNfypVX8n2wLF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201dbf3a7b09b8a4e71db49504e3cd5bf8864a877218bffab4dbce5a50b199cd1e0220452ebc9b95206fea3629f11abc6a40a6be3c0738bf496ab2215c7033bba185a3",id:"a94b2af091d991840007d2644ece123f0f42d18276237f163935d2df2e075685"},{type:0,amount:"112600000000",fee:"0",recipientId:"AXBWn3Kf2yEy16mYKrwnTQsRFL3geunAxh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220663a6cd1bef053f3376b19778d7256d08a34a8d8177e9fc36b3460cacea75c4602205b50dbdf88972c8868d15934c2a466f7cc6b82234002cd08391ffd13d173107b",id:"068b774d4990385eca9fb6e1ac6726cf6eaf99fd3687b35271fe407b33e9a784"},{type:0,amount:"112600000000",fee:"0",recipientId:"AYtpgFgBb7FJL88VBShq1GtBLoGnYBzLe2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201d96f2acded9f3d609618ce34f387c2bc46402e7e14c7bca2592aae1e00562800220593d7ee4b3f97caff848c38b497140312855d9df2f007b8432c69b43182462e8",id:"df619578c2c85a4e2a3f9f41c7afd5992439c5a60f8d17eb3ec7a9ce8b23c96a"},{type:0,amount:"114624967068",fee:"0",recipientId:"APR5muHZocUvsHqfXt3Y3QDuYLHHgiRnov",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa7873fc955e0c2de2a6591ecf38fd0252b4b25f83c92b6eca220dca2c593e7b022007b86133cb60ece69909502ae21d7a5a0fffba04ae88522ffe15bebeba2882b0",id:"877ce4b295db21844c7dfdbaaa08571c2a376400d60cdabc9af1eac7fa2b591e"},{type:0,amount:"115000000000",fee:"0",recipientId:"AQVCqqgTRUDR5NMaBBDNxgdpwxkZbtqGxs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202927f829fea3a19b90b2144407b9a268daa489ab146c08106be90c4273220b960220220f2de203a334b320f9852c527e55b8f595d3175e6b78c2650c27487bcde63d",id:"0674ef83667bbf5c4dddc21c122777e76af7abb6ff73337b7c1f87231573e3ea"},{type:0,amount:"116000000000",fee:"0",recipientId:"AWEHZFuvK2sucehMNho7bFgs5Kct9MX9cM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022023e9e21d3126edf7419081dc3d8ca781cf08b4f7a6250536859c4161d848799802207e4a553cc1b629c4727b4c3fef627e8fb592e839c80997dbfe631a08313f84b9",id:"aaacbb16a6a80d35c49796dd24c5ec944fa8e78323f7df908fee895a651b59a1"},{type:0,amount:"116329005231",fee:"0",recipientId:"AMuZTwvJTd24XdckcZAi7Qiy3pMoitZLHV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220523323f28caa94c93362d327129e8d3c4088f9c577a77e9c905464c5ebd04b1b0220705fe7ff0d17f52e3370d10be916af09ef1883614c76eec9899adca018888445",id:"7301a48380a2745cfefa1cdf1a2ecc9edbf70e619ef97440092bf80e8c392440"},{type:0,amount:"116897017953",fee:"0",recipientId:"AdFmnvX2noJxbAqXZvKKCRV8xewsq2L8mU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a61b9e09531ab70652d5a188994c291247b3be964960448ba1fd0d21668d7f2302204d856caa8fa3ff06e8b91c69f5dcabc7c60e57d8b342205ce03233682b109c06",id:"55242c764f2a4cd791545e8b71cf09b205b99663760874500a814a942070939e"},{type:0,amount:"118387830724",fee:"0",recipientId:"AGsD1iKAnYqa7q41f987DzMS9kVmuvMB4p",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b982e36000e67d68c16636c2f869d138f69612e2a2452584831d807bfd7e2b69022061eebe290b68359322fda287642ca41864a581bf666b74f998796b7abf418c54",id:"9c19c864bedeae508eadfb014a1716c8f6af01bffa05bde44a35e9400fb441ac"},{type:0,amount:"120000000000",fee:"0",recipientId:"AbToFt8MRXR3BmKcC6EpnEPWaNUMQzr1hz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d94cf00a4b6aef15f3243dcb3d68afbad70558b3928f096622eba887da94af4e02202d306ded93a5b9e21cfa7ed9db16dae8b78ce51586f4c6be5dd0ff69c379fdcc",id:"fa35c7b607c02653d4c3856476100bdb65b0af57df0864b0173da3fd370d1bf7"},{type:0,amount:"120000000000",fee:"0",recipientId:"AHWWoXDCa9RSeB5d9BCS2krPh6TzxUa9b5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100af2fbcda194d173772c91a90ecea2ba0ae32aa24dd7a119a5cec4b92dd348a93022073dace8e3c3fb62051bccda308c1e80650e39ddf6db74cfbb1ff554fe5dfe773",id:"d96cef527759049343a6ceb34e973a6e873cd89ffdc0750dc94a9b8b11602c38"},{type:0,amount:"120000000000",fee:"0",recipientId:"ATqYMZ7zmQy5f3DFrPKaMZjiPVpGAjCWae",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220176a3dafb595afac283608fecb966d35be5f4ea746ee54a61cc837732b368f3d02201df396e59e4947dac9c31c0f6e3596fa366b3d6a1b537a04a3d39bd5b2705911",id:"942882235103abaf544d21ea54b7cd466fb9f0eccf13db858af4cf254444cc0f"},{type:0,amount:"120100000000",fee:"0",recipientId:"AeEasb3UFnht7FJiYqFi7csnAavnTwxUHG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30430220608fd2db9a7ab9160e8071694506c793a63ef0b3a70970488358a661e80e11eb021f6ac85f5fb747484f5cfc189b8cb75e2ae8a013b9f9f2f37b96ccd1a5e21f01",id:"5b51d62552fa2d44563a09c0e6b1e30610ace3fb9721fa24499cc19d6252f8a3"},{type:0,amount:"121200000000",fee:"0",recipientId:"AR979mGe91DMX9dUPsKvEHhru5hc2aMqn2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d97b547f60feb499b52f9b613366eeaba66f8f2675d7e1faba52dee39e3142810220617a00281f0c066eba13a80da45ace50b6d94766a50d0b975563c2e1617cb1cf",id:"03676f15ae81acf829753f2b3ac30cee6d4749a508ae32cf104124b9a4f612c6"},{type:0,amount:"121200000000",fee:"0",recipientId:"Ad6npQratXMq87v27PgmpKfK9aMvmWTjSs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022065eeb3aeec85e090ec09e772ed5d036d0e7521f09db0310e75622c0bb8e96c87022061e5b3ed0e12e3077522abcc5d15cb07a2d261d6fec0e59622700ec4466c89ec",id:"1e2ea66e2f12b91bb85d384b483f8a81c349adab4dfd2d20fb1d26346e4ceed3"},{type:0,amount:"121200000000",fee:"0",recipientId:"AMeyqtTonCYWt1mPJwd1K2FpnHcPjCVznH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b0d13c6cfd44a8e186e659c23a2af522cec69a41b8e28ea6a6131bd12795216402200a0a212cda71ddcc26629b53d7f1d6e455b99e8fe4bc8f4e3ddc29839316a82d",id:"2f27ad44ec7b4c1b612fb27a23a4d77e9309461f72c5613c1ccf60db7601e833"},{type:0,amount:"121200000000",fee:"0",recipientId:"ALvhge1cucXrjdpnMozCDaWM3C6gm2Xm33",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022059d6b72bf48d119e8e18924861ccd754aee7e71d7d3010daeba835d2b33daf8e02203f0dfc75e84aba60c389eeaa7b8cb704c5768e58d0c3e066004ca01b2015120e",id:"b46a24fae79c4b7b18b368b357785eed4efa908b0170fc0c955365d9a8764b31"},{type:0,amount:"121200000000",fee:"0",recipientId:"Ac427bp1DynWsNGXCCYwWXseyUCYMWr2CA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100df366d759e02b5345ca59b52de2bcab1906b78729c65ded10fe89c6e0daed4c602205821d77a90716e943ddf58c31392f902c7777e3dbe69bdec5198bb2796c17a4b",id:"f5c95f62953e9c219850a8ae44c468d3a61fabcaac19446d99aefdf72714f32e"},{type:0,amount:"121200000000",fee:"0",recipientId:"ALHBQuNjrFx3i3PgCz1QdkWgAEwX8zQ7zy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200c9fa69d5adfc7f6c1a6dda8dbcaed58135738eb7e20975bf457cf288a4412fc02207be43c5bbf745b851bec3b076291f3800c54388da527b24853363b0c8144f0da",id:"190f5a757ecd8332701afd35805f0ab1ade99cd1aa3a9169b0fb9f48148e6cae"},{type:0,amount:"121200000000",fee:"0",recipientId:"ASn5uzMgJxu2bu54HGiKE8D64ZpkhXrPcX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bfc41e8af18b4505ef221990a17ae16c2be5e9ad554785523fbcbfd5393f006f022017978893e82ae7232da47b6ef37334bfa255c94cc19e9dcc8de51659b4bc47b9",id:"2e80037c72f52d9caa96bc27fa934e662be2497852c6162a50ea01b2487c5b4f"},{type:0,amount:"121200000000",fee:"0",recipientId:"AYmpwBT59ZpMKJCUcsKxjCUBYfGb3i4r7P",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200b5a383750451bbfd892a9c444c41a029efe9fdddb40acf604851b6cd623ba320220129abddee1f38206fe9b688715471242f10ddfe99fff3717bbb0e17b5a43c071",id:"388d78941ad3978004c95a6507737c08e6b2840f1de9e054c215a1c800827c16"},{type:0,amount:"121200000000",fee:"0",recipientId:"APaWSMFzp9gNr2RRqwdGzMdKrf5rwa3dNV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c69b404bda50b119d33763cdb23e3b69bdcc387668458dd33253955247763c5802204fc1cd9a805cca13f1c62bc706393a2f2e839a696afadcf528ca93177aaba237",id:"1b24b82d490655834aeacee9d6af2ec815bead657ff6405bd6cb29ab19faf737"},{type:0,amount:"121200000000",fee:"0",recipientId:"ANo6dapr6rCMDTKjwRzZgWUtQgbbQ1Nnz4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fd106e25de0bd3b3c1e6cd3dd1f6b49968e482fb015f00556ed60a3853c2d576022050e02fdee6b72fa4c6027c17f8485e395391b9a342a6e212b064c0cc27a47aec",id:"96834d445ffb6224915b81236804f1a6f4e5231553b4019d5b9a9806afa632ed"},{type:0,amount:"121200000000",fee:"0",recipientId:"AWA6TybTgFiesGDtCasa68Jt15QP2Auvju",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203bc67263cf58ec7b90c524dd694b06184f705dc7a206b1e1a1a8fa1dd29cbaf1022049410d87332f9108ec487dcc2d4fcaf52ed36867b05e4b4f14deb94006e94802",id:"176a70f81ae2c02db9e422651bfb9fe7430639d86144b94a4f28585533403cca"},{type:0,amount:"121200000000",fee:"0",recipientId:"Ac97FP6Zt5mUcz8hRWRy8QgNRsPCxs7BaL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202d1d32121b5e7ec0fcabcf04ddf8da303b4e3b5ffb55ab9ec037509f6d4df29902201526e223d63a19013b7e44fe44879ecaea07baf2c45ddf13c1234ed9c5163475",id:"7b50f54fb15fb3cb7c7c2e5b1ca1d241c37d3c10db990db87534ce366ea94d3f"},{type:0,amount:"121200000000",fee:"0",recipientId:"AJEX11r4ECKF3r14KxNMwzLT29omPCtGHA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022035208eb90354b15269c5b1a97197ef357799111600bbd313afacce965838eae10220036a346f41e67380824086cbda241e058dab979994c171be6b9f633ef4c0300a",id:"35242f8882db3e61b508761316879c32fcee9a5677bbbf23c76c731cd68b2cd8"},{type:0,amount:"121200000000",fee:"0",recipientId:"AQ8PPGdBYLGPAiUjpo64YAWCyPzsUEEBvM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022025cbb2d13fbc38c3de8cd8f134c41eccee79f133e78c83091888e4e1460f998402201abaf01c324594b4a3e2ebacf46c80ae6609ccb8dbc915304d0bb907a08a7869",id:"0889d189eb144fca050638e158ba32932733b39352998d2cc9307b4cfd5ce2fb"},{type:0,amount:"121200000000",fee:"0",recipientId:"AKhaX5DPoz59va7cMYhcUsBEGLw73S7524",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205c29cd985cc57d5dfb9cc47619030cc11860ade66201f73db301a411dcf8769802205329981e063b8f671cf6584bdf65f6d9ee12d304d4b167399d913e1e3fa3a8db",id:"2edd2baac328384231be9165095f0553378679aea26eba5b149e3a54303f5fae"},{type:0,amount:"121200000000",fee:"0",recipientId:"AN3u3wzJPUEbKkjRTW7JGnZwHj2U8ir1s6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e2cb4fb8a510d122ff54873ae69f3ed0e05e5218f16caf3e10c719a46c1f493e02201c2a6640e6904f68a9ef5375bf4d3e0a568a558a088d68087071f09f34206d61",id:"85d4a553ed41bc54fd93c81ec5021a23088be6f50aba0055270e382acefd98cf"},{type:0,amount:"121200000000",fee:"0",recipientId:"AVL35iLjeDYJFrV3YK5kPHHijJcHbzGqv7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200acc365ced6b1cbff5d6d586f373ca5f9a193a20de02ed784c2ed0969bd33a27022033ed50bc892f08d837f3e38ec8c3d4b2cff4ad2ba148712667870d7615047b80",id:"122ae3a92b89b6c5cb1234075b7e5415c0b284c4ccdb66a480cdc47a6f45591b"},{type:0,amount:"121200000000",fee:"0",recipientId:"AYxAEgAvXoifkzMsN9P8nmDGaErUnGz6vE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022079f8b805e20edaa4f0ee8e1a1136ced571a1a964c49f678ea4ac945c77aa40ad02205f03efae06c98fe37f8beb0e730a0f0b6cb5473c70fe0f5f03a33e71699b4816",id:"9d1bb9a20498867f18e4cd28d56b1b6d0330c78da178d3ec2a9ea776d657300f"},{type:0,amount:"121482157847",fee:"0",recipientId:"AXdk1YaWraKLT1he2N3LW4aBaZLyAiyiMW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022036f7275a99c91e73aceb5d904bdd1aff19007fe45aa3c1d926170e9883134730022074df6932914e893362a8f6473bf32e1eca016efe823a02bb9fa3d9ab7f64c6a0",id:"6676dc925e0257740d79d42f4963e30cf1451dfe23c282732f9b2a0917e7fda0"},{type:0,amount:"122958047810",fee:"0",recipientId:"ALHwE12mF1DbBNZCTxcPRB6x1om2bRnQxG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201484a2b3a9bf798e204b01eeed2d235e3dfb11f9710bcaa5c78eb984c5a4cb2102200cdb0f5f44d445cd495f20b75707927abb3115b84fa1c95e12879f36e5d962c2",id:"50e3e17e80a61446fb6a9dd016d3ecd76d22014721416802fbb8ec212f732255"},{type:0,amount:"123284431502",fee:"0",recipientId:"APMwQmexasWJwpAyLZoDFYWFSGUamtNK1J",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220310d6c899dba99be0221deed8077220becb9da79118276ec3cab9226988e9b72022048bb5ea38ced208e1cb6d065248a390ecafcfc6aefd19b8f439c515132768603",id:"817ab6d80dd709d55baf1d885b47d8f83dbfe0009f8777dff77500745797fa3a"},{type:0,amount:"123492648017",fee:"0",recipientId:"Ac33gzmvjrrbo75WJ6WVuuMYchi2oSG2cZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022011862523ab035e2600fc17663721256caeb4b54de512cbb7f22064bfeb6f306b0220586576a37ee87ce14575e8e440aae35c6b370bf8ebbb3d220337395e4da3a127",id:"fc0ba615203b330acb7946235f7f4bf01739cf6847e07be0d23d5218ac106d03"},{type:0,amount:"123626298069",fee:"0",recipientId:"AePe8p3H3wqiUUJ7N63aR4tSiSkxnA8Li9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022023c78ea21b06e95bbe80641f27a39ded89ec17a2ee2c8f5be89135ac4098a464022058ee31b7830ed287622216e2c47c34c6fb1929b72917b3f95de4c3e1cab45083",id:"5776ccefa14dca3370b26abed21365f1ffe65228a6bf5b25631cd39c461d14ca"},{type:0,amount:"124700000000",fee:"0",recipientId:"ALL3T4hBL5Hy6N1ekevdHuK7c8SCoiKmSy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100da7c3cc5cd62b428639c066eaf88fcf3fcd60b69b3a6988d1059868aced0a0b602204a2f5da3d7958c04d3edfd60bed8ce37a862ca10238c5175d49f8d994f4d0462",id:"b44e7fe2d2a0491576054ce4b6df112eb422691517c896ec9000e642d057eee6"},{type:0,amount:"124700000000",fee:"0",recipientId:"AcM8Mm1xZLsaQ3C1UrpKBGETTWL42n74o3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022051d19bcc61978325c50456ad68fcba62f75356d48611b6922b7b3386ecd1febe02204e16018952ec4bd29530eca80eb7d1485b279595524a69c77a199b7795bf52b5",id:"dd34a901ab4d46ed7f9e4b0d9e4ef54e36e412d1e0169c63fd5e6479c9f49eac"},{type:0,amount:"124700000000",fee:"0",recipientId:"AG9kM2jLaRKeTdRiDBnmHKFvEodwxkyns7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ed04ff01b76d87858b06a9b4ac1fbbf452f237f3c89291ccc2dabf2ca2eae7650220307fbb2d586cf040baedd8a96b0745e7c5bff914ec9a36c6a9ecc1db28edb430",id:"f69027b2324e43c68a23e9a62a24689315571342b63651380d620e0d747cd561"},{type:0,amount:"124700000000",fee:"0",recipientId:"AbJe8Q4PeWXGd2hurMguwVe3BLaDHfWRcR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206c292d5bc621a09520136d3763e2ea99994c92164f083317ac7d4d84ad67c9a7022064fce43058f8d19cdca3d633fcc34429086211c6947d4deedec92a96f5d72e7e",id:"d6b27e61b96f4a4e503454f052fbf313559f9317694aaf0e3b17f9c12a84ffcc"},{type:0,amount:"124700000000",fee:"0",recipientId:"AKm4VdRbpqQRxNUatCuHz6SaRGTatMGUsD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dec71fb87031a989bc6dc3f048ee308dbc97ec349a45861efae3459b04424b2d02207a5e5f4a089bd56368ce0cf6a83db247e9a8b215c0aed867dc83141ddd81894d",id:"f3cc88247afdfd0a8cab61e339840363c7353287cb76043acaa613f1ee5e8555"},{type:0,amount:"125174485431",fee:"0",recipientId:"AUYnvSaH7v8kU891WuBGDA8XraJnqfPft7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210086f778878fc1586963bd8994419927a9a1f6c88f899c5f4f19840b2c42dc559c02207bde1d3bcc0f1faf3143b3845f6671a90792bb2e3ea1b041ac9d80a5daa02615",id:"2801d176b91ba63de86b0332a26346bc1e4c7a8a3a967473e18c09e559965121"},{type:0,amount:"129540204214",fee:"0",recipientId:"AbnX6Wyoz3d1LLBdY4pkYmRXvkv7qq57Nw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200d2330b9edc3faf556ae66e1c689237bb630dea023ccaf3037dd706e7a9e34b702203ff844c9710095e75fab94dee0d6f15a2c233a4c05e37a593008ff36bffbbea4",id:"0a1e802ba4d8543ca30911f77fc551ef666486b36678ef2132ecbfee416331e9"},{type:0,amount:"130000000000",fee:"0",recipientId:"AYxWmuZJwzYkjUarmquFoHjG64ityMAwTm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a55652d4a247e1e536a05ac2233c5cedcbeccf6e8b8e701af2bdb07b42a72fee022058737e0837e904be3c969f81e9622890bf7593604e8ef6ee19aa592ecaed0088",id:"3efe48cfa53baaacd2e25059d104d656493d9fd13eb2e8acb508db55db7417dd"},{type:0,amount:"130000000000",fee:"0",recipientId:"AFyuiPD8r62cdnrrAb8PHdiom3ZgUZsFQb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009f3ec0907177655f8d54eb4eba7f2c96a3e86f239a914401174b45319c482c99022051c830003a1111109f2f726fb888107ec30c5faca8f54a34a078c4831e62ca0b",id:"7a58e80d25d0d063bfa357729ce25b66b833107b74beb953899a4724e981d47b"},{type:0,amount:"130884887397",fee:"0",recipientId:"AGDxH1FYXf3XrL6nJ9qhwmGeri3M8hg7dM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201cbd29a31f62bb30c95fda9d78c8d860fcac3939f39fb7b5638257d429bbc69702206cec558ca827f47711b6b0685b37a571487840d013dae31e95dcaccc31c0d82d",id:"218113406ee93b29cc9cd8ebd40d51df6eb6b37dab860641087fb2990dda7d88"},{type:0,amount:"132401763390",fee:"0",recipientId:"AdFxLwoJ8JVWW3zpPWkvcpTjbVtawPhh1L",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202cd5cd7114a86e5ea04746d2a44b1daf598749885f03cb8b69dbcb95e8f7591e0220062c9951b5f1476594c34f7bf9a47bb637ea83e843e46bc070ef8f80fd20112b",id:"21589db4eafcfe26a65312b727f705ba20dd4403d8ee7fc09dfe4722005251a9"},{type:0,amount:"133300000000",fee:"0",recipientId:"AVzze8R7jrAugNCcUDpS6gvtH3jLTBApfK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e575b4d782d64bfd7b3a5208a9b0b36baae254418f704ff71a519be9e33f4504022011766b87c099d21616072efcb5916ae72965886276837b08e8737ec00d20f691",id:"f0d6338a6ae19444416bd44a0a194c4dd6043950bd0488187c2ae522f0c9cec5"},{type:0,amount:"133300000000",fee:"0",recipientId:"AHiw6LhXUDksaQkQ5YEys4bR3KQUpShuhK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220336d5cd425f12d9aba380a3112d53d3d7c8f64adb9ecef94f69e6b42afec87db0220521a58fd1b62eb89abaf64b5ba8e79493ff4b146fb9877ade991119b4d5096f1",id:"01968fa393539a33b61a61e9b27f6c666dfc9a75618c5515d4fc0ae3e5e2f7bc"},{type:0,amount:"133400000000",fee:"0",recipientId:"Ac9Z3Yq7xJeE2Vt5QcRPDmuaTS1FtypjyC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c041ef867527f600f1c23510313ea3765322127147262b2137a7fd6ff8e8ea6002205d20cf3486dc1e2604b447f5cf48b4f1463c0fb8e2a5136d4ef43e5017355bbe",id:"fd69e79e125889c7e18e4ee6f3b9b6a6833185dc560cb07a24f76523911d9e87"},{type:0,amount:"133400000000",fee:"0",recipientId:"AeWazLDW2wcTR5tDFoThm96tZFVKvyg3Xw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210094396bc42de431678812ed874f45e95dca0c9a28a3e67a48530f271fe1366c6202201aab946ee2c25becde260943d413a6b70e800ab2ec02bacfe6cff415c439a7eb",id:"99cbdf7999737e6e3ab6f3db168106e630e99e78c7c7f6610acc9cb77d9b74f1"},{type:0,amount:"133400000000",fee:"0",recipientId:"AYKHBz1zZ1dQjpfBu7jJforx7wqX3MSw45",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022066f06afd81dd1ae22a41c79ae0f8592333f9a1f40d0dc09a91fc81556179ef6802201c0fb882cd5d81ef77ba6b1bca9ce4a52143fe2cfe9c06d0c4d1b6737d27b42c",id:"ac75980be3c16d88e18006a739c0405ba62ff7e4573297509c22799f36648090"},{type:0,amount:"133400000000",fee:"0",recipientId:"AGytj4HN26YqbqoYy8bVyAkHr5DBKqck5S",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022000cb76109a01edf4df270e3a942744877f14f08c462e21f48a97e8b401d7e0e00220497ef0efaa27f2b0f98ded7c797f897411629d2500eb9541e8450e2ec4a85b75",id:"dcb55ec4448b657e784ffce0a845657369bdcd31ea3118c6852f3a267858dbf5"},{type:0,amount:"133400000000",fee:"0",recipientId:"AKv5bQtqcrS1NwWM744ApRXLGzxq8th83Q",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022000f10c1b56695f77a65301a9c63d16f2c6a984a921b4c43a1087e41362db454502203ee4bb6a6f6fec5cd685966c65e032b9dff460102e35423f16d677a98d4d9a77",id:"da79fa8dda0f553b25b8cf289fa917a8f2b3154d16754749c0beb2c0fd541909"},{type:0,amount:"133400000000",fee:"0",recipientId:"AW3MKtfA8qu3WyuWf3WzZsXyNJj4T9t9d9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009e8e61957950103cb3dfc4dad5e18efe80e1f1e4974d1c1c079122ec080087cf0220209c4741057ef4819de778e3353b58a0a9fbd45013775606e3eaf16f91b4c22e",id:"880ffeb2284de4b16dd38499fc6fd15320071d08a0d19b1837a1973284b44795"},{type:0,amount:"133400000000",fee:"0",recipientId:"Abe1tPmDJ7a34syYde7XCkdUfAGjPmhNyD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206ee7dc450b5b1e60271ca2172e1e1c26b23d6b9e163bb8ef819e4d7a2cc3937402200b5b7687c82a928ce9856cc9d452ca71e762053135ebd791bf09e1ecf2f1d94f",id:"436a0eb389e7ebb2ffb7215e10fcfb90b707f9a3fe08b46b4a08e53919106bfa"},{type:0,amount:"133400000000",fee:"0",recipientId:"AaCJwF1eVDGA3Jy6MmQ8emMB5LKkPFhqPF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c319ac615e8d54a36c919e40e7a6a77e534abbd952abded7533e11a1bcfbac2902203e9a945df2c06505823ea920839528d37fe946ec8cba4c75e1c2bc035d1e0624",id:"65451621e425a1118c592029a9b6f47f4635937da9640edbbe2aa7e1531b032e"},{type:0,amount:"133400000000",fee:"0",recipientId:"AXYh1dUhBWumWF3Saj7F8UH46TqKoUR4oq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210099fbf3734fcf70371ee259534f82e2ef84a37b9000b254f7bef53e812afee3a202201c0aed05b097804fc2e6103c996b323cd0d1a634d2bf08560d1473cb19c98583",id:"0e8d05444ae15dbb7cbfaf6ea4d03733dfdcad333267f9e7e7ed18f5975bc168"},{type:0,amount:"133400000000",fee:"0",recipientId:"AFzhTRcF1mdD8bswGM4kjyiAbvHFZ3utDf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a40e1a906abb1198a9e6749f139169488103f6a089384414c228a375c3697c28022045e6829b51d7f3f0ffb9e6f27132aabb8c13c5612d9cf98b2bc65736d3bb7d6a",id:"53b7a5d15d2e6c5d4b977280ec050e8bde87040748e5b25901459f139c9afe46"},{type:0,amount:"133400000000",fee:"0",recipientId:"AHj3b7vTcrvS81U3xpWT62G6C4jVBpXB9z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a226e5b1d830f56939fd2b860c004c54e6f49260ff1400d21509c2e1f6c7404d02201997e86e6cb516c88bf6ffc7ee6cafb855783954fb8e131bd65561fbbea8246b",id:"7bf54e1e48b45d11b86e06636fbc78f412d46ae1e71b2dd24dc3474aa6290dee"},{type:0,amount:"133400000000",fee:"0",recipientId:"AUjtjkgdiyEpuByP1uajKuT2HSeb68iq2K",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220415974bfe952d18dc3a26a966b9d7c63993568f834a3bed5c4bd08784331230b022029b654a8a4b0da40821d6a63dcf40fb325b58579041008ce1593aa8f1b785d09",id:"cc3fd2a9da7d622e24a186044bbe5479ce94cf75be168d9e2ce5a950853648b1"},{type:0,amount:"134701272086",fee:"0",recipientId:"AGyWeMScLefasU8tiewWRkHBeqvSeaAGii",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e75d0bf3d62eea3631a95d6bf61055b0006c0ca0f92007b3b178e4ae82bcf5de022065d1c1c26883926792929c9945fd6fe6cd1054ca716113d146598c669f8b7db9",id:"2b80ef415bf5e28b1cc9b5fdd407c3005c498e6ed0d779defb5386f12a145b05"},{type:0,amount:"135000000000",fee:"0",recipientId:"ANZr3b2hPsGwTtVgNxpvMkyZZ6Vg9UZkrx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220774c16ee61fb32555f68f77aa42d26f4df6689af47415876105fcc44049d00f0022026855b61fc8975aa07b518e0b4043f63f6e4e10936b25266754dd50f4d63c014",id:"70a85c890f419243809d0fefe37b7e6a03f73d859c8cda6f59cd34d1b7d67a5d"},{type:0,amount:"135100000000",fee:"0",recipientId:"AHY7L1v8LzmNke19ArEgzN3tocigVaAzLX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204ea6f57c6dad7869ddae0d8bd270a4f3ac278bf5887bdcf587ff4f083013e322022032a61c4901116e5714560a5ade681f74b41cb9947426384ac2db55df4004131c",id:"a5bb75d5aa8aad7955555060d8d43eaf3ddf39c0b7e43235466870752a8fc283"},{type:0,amount:"137900000000",fee:"0",recipientId:"ANAL6hHrK34Jy7v3YWGodsJcb3Egau8UcW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d12c766b40589e3c976e03c5a0ed64a8e44c32d3f0b1366051dd37bd9c6043520220455b383091894c83178c0ff07a45108abf5d442fa44d2dee6adc8b8cf884e018",id:"95fb3162c8f7beb2ab5f6fb61666094226db627b460f0d5ed45a76483064e6d0"},{type:0,amount:"138600000000",fee:"0",recipientId:"AUArTLyiUVrf9h8N5fM4gtv3yeaT7sD7pt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e4f07b7c14b4136b62ba30d4dbb23ef7c34d0b5aa574b528fc71975134700fee022018350059d6011c7c4310aae232b683b8bdfec4f366cb952c8a71573080eeeb73",id:"cce0cd6d09ba3eddc5acde554e079cda7dd1a370a2ad2136bee3da660a7bb6b0"},{type:0,amount:"140300000000",fee:"0",recipientId:"AKbaSMZ36bgW2jL63Z2RYe221JvEKBJRpK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e1e2cec556612a736da0487ae900c979093566cb9d461ee5f97c1cb8913521d022059f3e13018c3779000de42972f514a49cd359f1681a8f389d203483c95defd9e",id:"77de4c98b0eb2024ba7df54f734d9e0d86efe0250eb4c38921be96039a92273d"},{type:0,amount:"140332554565",fee:"0",recipientId:"AS4JC75Lv8avQHSDT8aRu4qWLLzy7B8YnJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220220c567e49b35270e9ad3f4618ce46a1d9b86d8bac6f51f77a561414b1c589b10220287e615bbcf9366ae1cc249f5652cffe72e61bc76dd6221bfb0b9751b359ed63",id:"b45e18990b9f754737ea2442fb4ce19f020f9ff1ac5bc083d69e5e24810d0e34"},{type:0,amount:"140332554565",fee:"0",recipientId:"AU1Bz7CJhiNYneNYEuBCXPY9WQBwCxCFSQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022030a79416ae581e874e3f85ad8fac4d2c0ac39d7287c92e807452122a4b18977702205b3d6fc1ccddb6741330366926fd70ed89f160eef85bd2dc161e73984bf7c1e7",id:"627b1183a9f109a94542d761904f247ee43527810bb5b32c70c6089121223f1b"},{type:0,amount:"141913175258",fee:"0",recipientId:"AWSYgoRKRpXfXbA3WpJ8eegTky4SdT6dYi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d8aa4af8d9f52b9b1bac3b38217220c0aee778de34fa652dbc9d2df182540c840220687ddcebd64e8b0b02aa4e18ba738aba219e0a66157d373e840ffdcb4e3d5093",id:"fe7f90ba3d98988a846a2f943017bd03c475625ec021bdf13799f8cf7ed70b89"},{type:0,amount:"142400383746",fee:"0",recipientId:"AHomeJ2mZdS2HdBnfpznUGWKMdnGE2ZyBi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ebc13c20a25aebab60d043e3983faeac70aea83008e8531afcd3b3aa986395e002207e37320b8a5085c0fcabdc8da57c7f67482b46847251beb21ced9096858d67a2",id:"73f0d8477a0a9691839f121b8a28b86f9c3a0283e60b5dcb57a74256ddc19c1e"},{type:0,amount:"142597922946",fee:"0",recipientId:"AbCmk7JqsA2oNHjSxs33hwEwm7i9ZGfNTc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ff68a3af0a8400a3f5bc2fa933df079aeae3cd8a33df0e6d06883b8bae604f3902200618c92f102ae967f90b5ab0bf2f17d561501fa6b0e42069cf958f58f10131b9",id:"1b8a6a9805b7c3a9185eb8692d93bf0130f0c090decfab0f25f33748465c34fd"},{type:0,amount:"143671138618",fee:"0",recipientId:"AKpcMURctYwUa7NFWwQbHMPShAmGvZxTDk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203de99b3f8f7fb93625f52d07e75e9735674757e5728a0833e282e21887c399ff0220665f3516be9e94ea507964890dd5d1de7d0829143401ef78439503742444cb45",id:"ef58d87117fe3cfb73ed87681ef9df9144ef889a2027ad85f341809548a7d69b"},{type:0,amount:"144747007068",fee:"0",recipientId:"ATw5aBDeZzzxdz1VhJH7zjYUS5c5m3wWcz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022016e3810651bdd50d22b4240aaeaed98bc01b383990a18711671e27fc1c2bfe35022027628ae55345065e5f4e21b462408a9845cfe2b3d9666506017fda87ac6f7e07",id:"d068d9b75cf07209d53076886c817de5d449938fe3fcafd31828ea400f4fd44e"},{type:0,amount:"145130623474",fee:"0",recipientId:"AeReN9UHpbqNqA1zRP3My3iQYYw4vBQ85h",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022076fa46b96abcb0ac7b0b0b9b5c8870269edaa7b4a3ae4fe75585837c73c1194d022004e5e214749129ecef9fcbafd06325ec4645816366431199253fe349af14bf86",id:"a784b1ea1393c00ac0c8e58fa19b9e137f1e8611a4e8f81f65660dd36b4f3882"},{type:0,amount:"145500000000",fee:"0",recipientId:"AVgLdwCZLBUVRr84tPzwgCPLcdDRRTvkMd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206d398c5a3c63f66e37216a297e442d8eb490c67bf99cc0a98c5680d9ddbe2933022048170d0c7dbe5ef0a30baee4c669579c1c414fc12cca94af65adcd40e90e2d39",id:"0d36bc9b909f51dd5bed75e5022f632bdf8707268e74aba53f8d7400849b49a4"},{type:0,amount:"145500000000",fee:"0",recipientId:"AVroDA7WnnpRhsAy9187e7mRs3c9p5ADoF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e8248c25c74669b3074a5efbdab29b715d4d796bf1b139917634cd27b72b1280220184b4d05880cabc910f372c43c13fe5f3db2540174993467dadd0bcab4c84873",id:"6277e6f92b5b75671e07fd26b28a16a82038447cd9ae5dbc4a8a525ea2969204"},{type:0,amount:"145500000000",fee:"0",recipientId:"AdQNZMDMYsqUhuZ3F5Yy5FvUsdRDSupxEP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009b106d35d40c34def24a3af078288ce38a5c42374086bf13c1d43a354abd4ece02203797da879995e88f71e7a0d04b65ab17f80d073d0cd015bec58f1f4a5bac25a6",id:"a76db685b5fc59e38d3e25f7c43cadca9f35dbb079c8b5b73bc8da3066b501cc"},{type:0,amount:"145500000000",fee:"0",recipientId:"AbWS5yJ1gwx1GhpaTYDQvJSy3bCFbA2vpo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e1ff4b27c8fb80dc2427f493822b570600fab317cec5a5cb53a58e10769b6b202206a7dc2cdb7785ae00ab6240db3da4abcff95042a33f5c620e42af976925f2c73",id:"560771be8dc4d0c21922a7a57b7fb66a9b20803ac8051150cadb54816086eff4"},{type:0,amount:"145500000000",fee:"0",recipientId:"AXfFia87jEauZWU6DJHRbECKk44EXSQmbY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d1ff7a6ec56fbd8fa592c687ba088f198d0752abc667ef957dd2c2e40d9589c70220218d36c822d70d25b1fe3c0ecc1efe85671b09d16765a93cd12c20b45f1fa6df",id:"63d81828f4c3e1455eb6a1aa99ef36b241b5fa9dd7c5cf86c92dc8781df88b92"},{type:0,amount:"145500000000",fee:"0",recipientId:"AJCWEe6hRQRiCC1gLdS2TUSbEwUPHxMJcn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205b1550775c4cf879ec7500f8eb3880a3ec9173db41a7e8e249db14dad79a0d9902200cd06919a283c00dca6cbc647f1f09398dc377c8a4819db6ec20458c55a4affa",id:"ec03b808b1f705553a333f882008acb5330f3fbfb87eeb64b7879f4e3e9e013c"},{type:0,amount:"145500000000",fee:"0",recipientId:"AM3Tdmm7PajytJqccZvjBmK2aNzfkmVNay",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cb1a88bc254deed2de2aaaa7165c62d8ac24599cb716cf294fa7650d731c7cb8022040c5516b3945d87eb5bc4101ad5fd8e28c04a86a2475617d43611793c2e7619f",id:"58ea9d0e7a38ac86f105406e615eb08a288053f6be10db870a126b4d5b1a7558"},{type:0,amount:"145500000000",fee:"0",recipientId:"AY1tE8UrGCykVngKVmmjZfes21arcLLyzn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d0b69b396392afd07b737fc4aab7262c5e693a61b4869afe53696e1d72c159d502200de0cb71068602b2552baec25e1d3421c4d59526c01a99bc3475abec5f63bd1c",id:"2f2c0ef7895193de3e7405dfda9ded41aebf2aa0143a3870f879800ff3af4a6a"},{type:0,amount:"145500000000",fee:"0",recipientId:"APAFtJderG8gJDUr6avxr4thm5a2hrYk6q",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d43e939b9b3789b1673ff939519fbcdbfcb6746688d1309318b2bd12f839c8e022009e186c21fb9d2963e2c01d863058aee90c9eed7349d3243c900d606cd7f5163",id:"d9e039153b8d06ab7b1e3fe64eca9bb917bd7a7c848eeaeda9f8d2b28d24d5e4"},{type:0,amount:"145500000000",fee:"0",recipientId:"AMFSfB5sy97Dr17fqAF64G93pxkSn6mGqH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022005a7f2529d9264b887d323228132518980dc91ea2d0cd5bfed098b8f05b31acd0220676c8d86fe6be5a7fc90ef3ac2db26674377c33188b694e5106c36850fcdd5d3",id:"1f7ff73bd0c0b6c42a73499dc8948ffc23a5affa758ca17425d60d03f0e3c412"},{type:0,amount:"145500000000",fee:"0",recipientId:"AQ5kzJMSeEEr14YkwoTTGpjj8odwQj121R",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ba6df9e0ac6c1db0a889bcd3c30460b2d5460ddffb7867652dd4e0fb296d9bb70220039f2b0799cf13b3f9e5f4f950afb53c12c72ae1e6ccc15b6c86aaba0febd322",id:"39afbf86f83389014c2d00c1b56c215278a7d12f631a10e24615b4c69aab3dac"},{type:0,amount:"146600000000",fee:"0",recipientId:"AY3P1mc5878sCMkCFmJdEBhMXjzZivm4rd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c563a228728d67c90cc13501efe0dafd97919ecec25afc4e56c48c9289f0d85a02205c91587eb8001188c7e291e0c851feed13f6960d1828b7fdc6303fa49eb08b41",id:"a1ab69f665a37b685d9219b051428f1e9930a4e8bd908623085b1cc5a85a7a37"},{type:0,amount:"146647519521",fee:"0",recipientId:"AVwxCqG9GamW79Xb96S7ipWUpxLgR3shoe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009d426ec91319147e8ce9d95e7f4a2bb2ef20ac1a93c4b9a79e0a45b555aac9840220470cc4cd8993fe92f3e41ac71027ea68d6dc5e873a4f5f4042d2f6e03fea61f2",id:"6b19fd28e4fac7c60537e63d10d0bfeb1ac28eb768db7c05a0eacb22ed0c945a"},{type:0,amount:"146868042106",fee:"0",recipientId:"AUALn8exeu8kXARs5HVxay2r8pmSmxMVdq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022038a92d978af95b79d68342d7da3d86e0de7ec10fe793b87e15e889f962f78bfd02207095fdc539244f346eb46a50d00a5a692b0687ff1d6d4597ebc7f2f92c7b3aeb",id:"d3d03e03d5bba603521e8be851fbb870e25dee280cf5a1f6fc7a025d84314a10"},{type:0,amount:"146868042106",fee:"0",recipientId:"AUDTxFyejQZcR5bNSXBkoQocuoquYfChG9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c460859d8d9d4a18b8c336b5345adf8023234c90a0d2f86836a39ac3b1baacc9022068265214028204e47325d2f157d27c6ac20c0f43276d6df706d4492687b13e23",id:"04f2135cee1a37d6854cd0d10c8db0bcc83fd8176833428f8e5cb4b891aeaee5"},{type:0,amount:"146868042106",fee:"0",recipientId:"ATxUGRxnCNHpafcsTQAimxEygTJEb3syCy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008b9f09ada3004e0b966f2a208bb2c938b797b1973e1e8c2b53b7ad4b0860939f02206f08c4caaf1ed0102430c9b2f382f58e6e0337ef8c11ec6ca0894263b99086e1",id:"7c156161c977de562a5613d8b6b955144a56ebdd9efceee9e8981ea639e144fa"},{type:0,amount:"147015057164",fee:"0",recipientId:"AJeAvhsxGTJQKtd7RHBfmNtCy9fPUZYNVV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eba3c97cbd1002056427991b7c33c21336783809f814936183ff030378ed3c5002203c6dd00bfab286353f3565d3bc7be98975a9c8f412c409bf182892043e350719",id:"4511231384b91d494dd617db65cf90e99d7be45a761010761b39b2e07cf0a896"},{type:0,amount:"147015057164",fee:"0",recipientId:"AeyAvcAptKRxirAwuyLei1YLUMZap6RSCe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e30b9369318e1cad7ec287448f11e9df997d10d4ccfa1cb14c5bc16f042969550220716c4d0772ffa77db00d076cea094ea196e1bad98aab377b20e87aea6e7b8b34",id:"a033da0ff01712d4b8e724846bc0f524a3931a0e268cbe798a006361a6b5a2e2"},{type:0,amount:"147015057164",fee:"0",recipientId:"ASHqJXYyyKCVuhjs761cz5bLm6wy8nbSgn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203c354c4d829f755371122ce7249619b2df5a86e74830f1809e977fb80875e5610220713491f7571edf18f009dd7d0a1d4ddd94ba8c53fdc7a1e53596dcbeaff40315",id:"86c30a20741f5fc1738e4f0180b64b585f0adb966d414ac45316a879fd5e7fe2"},{type:0,amount:"147165816371",fee:"0",recipientId:"AVpQfwASwF3WSC5CM7HErLYvYBkpzkTmUu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220030a63d6cd68e0fcac0e2eca89c14eb6a8832d52efa56e6d1a5b772805d1ea480220091c1fc5904423e14a6137f02d153573765905e76d1c4db66e945ec7851763b7",id:"93ea7b1a7e4a623e75cb4245a2ff78894c9f63c9ae4438a2b614350b9f65f1cd"},{type:0,amount:"147695811297",fee:"0",recipientId:"AevPmhwSCevsJkXhDcKvaRNQwnG32ygbC5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d748dcbdd417e023f4e3976a7625d8c7f2ad45644e768bc5923210b70b8e535102203ecf2b3f03c5caabde8ab41047155bb14ef36073bcab9a76b1fde86baa8eb21b",id:"6cf7722a4793a9f5134e80853eb954b8772ec20f9e7732b109c7489b722f7c0e"},{type:0,amount:"147792818385",fee:"0",recipientId:"AYdQPyMPRyP2jpp813PpvKn18rew13EJTk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c946a710663b006a6065a032f29ae1eb13ecb2864ee79e7443e795a7d566714d02207dde19f663673b881bb01ddcffdc1bb88481b42c7b78058ef722238c3acea288",id:"5ced9e0a7ae04dbe285c3087898108f56f6ac791e3650a11c9b6d05c3279f0e8"},{type:0,amount:"147794072165",fee:"0",recipientId:"Ab2sMHQxXcEFT347HyvsSdXqTwBWcYkiNo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008f73302141cdd6646a1b0c2be14aeb4e40bed6eeea5ae720ba24d482f45ce1fe02203213e8ed9fd98004e859de842345e8a3856b9a1920608fa050211ea76dfd7cf3",id:"ef80b356e77a8b3e18c21b11b6ac09b3f89b7b99f33aa12fa53b4d2ee3f380b5"},{type:0,amount:"148338192678",fee:"0",recipientId:"AVS2aoVuzEnY74iWsgzfzmMNQfSRc5KTzq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c6b3c68949296e1794246ebbc64bd06f9f5d099c5a4498030442a6eb8a78d6f202205f0be315dfac6b7647a33934a04df6c40a2e40dd8a17303f0b20bb09c6bec6b9",id:"e38e2053c5110aed17e4a7654650a3061ca5441c3a5fd8d159e2140b20d26f33"},{type:0,amount:"148900000000",fee:"0",recipientId:"AeNApTdu2Kf7vphV4H2ZTbopitfEchc2eb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201255ca8ef4fb94fb2a0f9eb089f9f1d48971adcc9bd153835e7df739109fd6d7022022a497a0b8ebc793d25e3348fd884f32cea85189bdae2f66799a3818c15e6936",id:"5e76229c1016f43b961ab11b51d4be7598434be225f68ca4347df5106c68b0b5"},{type:0,amount:"149442810367",fee:"0",recipientId:"Ae9cyMJ32RatQDd1iPd5pftvBjFpRyghhJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210099179595efa579206006e9b6689f62d222f67a4ce4565508d7dea57e3325c917022009425c7807f05f46406a05f02a8cd70dbb6cd20f7ee172749a54eb21f9fdfab5",id:"578b56b6076f8b418eb1df12980143f0ff841890cbdf447b7d1d5320785cd0fc"},{type:0,amount:"150899497250",fee:"0",recipientId:"AZGVDCCTnVz5zye3hsckws1AZkgnUdEwLj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022056e8422f6cc77310114d7e7aab0eba13fbca2cc242a04594af17c8938d7a55c302205d8a258dcb617f878e4b25c84f08d69f77c5575e7c6840028059706635f5bd5e",id:"c543394aca3a02fea18e06f89d12e6f170269787be922539139bf72ba173caa8"},{type:0,amount:"151036016000",fee:"0",recipientId:"APuhkVvG7u6itm8bUEfqDBpw8vTqTZMpdE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008db754d788749079dadc57c9bec350c02487e095df746ae3e196c566b62edfa50220089ecf52f504b54a6d5ec5da34b0eef3bc5f151d8a65598c07da8cf61dc2524f",id:"2a5b77ad3a7559a3b066e6845f41c73b368032bf9c125825f6ecfe7f84a48f78"},{type:0,amount:"151200000000",fee:"0",recipientId:"AVJ6FhpMSHC7sywQDJujkwM9yv75tyzjrj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202a8ffe7a80afccaff07d8d972d11e8af2396f9912171e3fd7ee869a30262739b02205b9785b72fd0ff1d1028c44d29d9423cf3a22a3e5c6514f86697742777868398",id:"e1e3ac19ac46f91d4be3977a0e95de5cb136219a984b03b1782243d0b5f2757d"},{type:0,amount:"152400000000",fee:"0",recipientId:"AKMDyKrWkSbpU3q6oTxuoS7nr6G5US5Ppm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b12f5c4a7c7e0366f303803b62486f0d6685eb60a873fdb9f15d508c8796af2f02207d28afc1bda7c2af2c650a7cdafcdd6111f950cc10d403fa95132e0bf5669661",id:"188f9c090bca5ec2214a0c41ef741aa5b7f3a947cd2cc6ffd51375c837bcf9b7"},{type:0,amount:"152400000000",fee:"0",recipientId:"AR5yuVPejTDoeHhfbAAYBMCoMPWfT64wS5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207530f550343588e92edebc0c239f9d9215362cdba07fc9fb0a9a0ab5a3185baf02203a151c01fd5ee65b3b90915d6bc0d49a756a687e6e409ae21dc64f18cdf61c8f",id:"b5b6f86c2a8dcba704275301e6f78c80fc63a7c3f1e6f80a11e4c1f35e738e2d"},{type:0,amount:"153500000000",fee:"0",recipientId:"ALhmTEX4c8Cu6j3LmvMy9QRScP4qd5uS1X",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009582b66e2d7e23ee2cd95f4a35683e67370dd60f84bdd4bf13a70b0e950255ce022027d4f0e29103bbe2c7626378b5d92f9976ef5637d4e30201f41762f6b58abcfd",id:"d337a4d55a6f848c4b56a1d8b4267ec04379b7ca49d51c4ff12bb4c91dfe07eb"},{type:0,amount:"153600000000",fee:"0",recipientId:"APL1n3DRcNdNvtGEAVXrZeF8aE3kSje39B",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022026c5e59f6f0389d02d8303807aa6b56a1677759397bf1131fa923da22cc0ff3102200c206cdad36b67bbfafcdc42bc5af3a43865c4dbcde49216cd6acffb1193a86c",id:"f855d660cd350500dd7c352d9e1e298f7faa93fe3b99d54fc5179caa3233e9f3"},{type:0,amount:"154067041808",fee:"0",recipientId:"ANe5pi2srBMSp2Hsdi4dvEQkmRw6QRufWE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b6021389172baf3c7416f95ce39a517a755f44e213c7fc174dc47c2a9f67aa14022002f08e8c6e0109219b258fec7dfbe25e18c5d563a99cb751219955a68ada0e0a",id:"300260d69932d0fee55a854007a7c8e16da8ba9a531fef306df009c500e42901"},{type:0,amount:"157600000000",fee:"0",recipientId:"ALUZm656LEa4TqfwdtkjP3XFidv8hdFG9y",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220564681998c47b9747919eec5e8d497815a14002b497a43789007d5fcfd1fa37d02205b6097bfe9e3c44dd8a7bd9d610a55d72c674cca6f89e29b37847ce57eb06ec4",id:"2c1eb9434e82279b5ba0aafea3b7813e4f024f3386126e65cbbdcaac3e1de27e"},{type:0,amount:"157600000000",fee:"0",recipientId:"AWtwaGELZxRTxu6znTh3JaxMJWyUf5yg2b",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a87d31acee7834af08c83ca70917065c1a5a413a74d7c4443e316f24a8526ada022077ddd8c1add111bba68f01695dc922f680b83fa3db1edf0e9750a0e041a3c5d0",id:"b724ce6e1fd1bc009fd05da5523c735a21300fbe1a4fc1da52cf2c6ab9d66ba6"},{type:0,amount:"157600000000",fee:"0",recipientId:"AH8dy4DPGzSnyMmfXmJrtyWhUkZoqsscWC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022000f7c8a6f8a8b0bdda54992f15a566dd1c9c9d5d48f03b0205104ccef6397312022052ba2904b07535406df11778a86256ea7893b6e41c91a7889aa4e4f4e93ce7fa",id:"a7d0234ea7c0595d44d473619c7464781cfbd6b3be2edc583b624cb9210ae7f4"},{type:0,amount:"157600000000",fee:"0",recipientId:"APovNoMU6T9i1yvfXczPauvFA79FFPP3Ns",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e8a6834b4380b17f340853bda75c96ee9c553ba2b570402c28261504ac6f11e8022072c7c130180e042c97a660bf1f6f2b17625dc24acc16e03c4b54bfc767ba4e02",id:"86f6394cec011bda87c30b080e27320137e936adb8e67a9f9fde6afc84582c7e"},{type:0,amount:"157613342003",fee:"0",recipientId:"AZd59X8LMYSdKgz6zz64jKxhs6YHUcE2Dc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022021513ab40baf4bd11223c976ec339be0374e8a96ee60c90e499202e2e14916150220229b9355d285561da1b1cb33ad210df305e961ac485e3ce51db39faeac96475a",id:"a3b4066f32a764dd0cc8c357a401e91c30be8b7913851aaf8815c61f1fde18ed"},{type:0,amount:"159675898944",fee:"0",recipientId:"Ae4moTG7YCQ4yvzW7NV86aZVA1SL5jZGUy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220799233668ec57eb2ca1b0c18b433e788ef25df88edd97bdfbc5919e1184efdb3022074a3d4fac5a531fee1ba3a6c6378d5fd080acd163e8e7f983969b1059376e9b1",id:"2d900441744993dfaa79989178ee5ed78cbf8dc5a67ed945b2558b0531c23653"},{type:0,amount:"160600000000",fee:"0",recipientId:"AeR1SNtu15o3UocwDDh8kBeov2RWeVYzve",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c3ca5aaa9b76d2d4f4916b9268fdedd5f8c75427bb980e7437e5e50e4028560d02207f145bba9763452fd5cf86013c35ff8a71aaeebd0966e2a6e218e7dcfbd43dda",id:"4f732a783e8fd503af9584c2116f4d2d9cdb0763c1629f202646dbaa79445be3"},{type:0,amount:"161600000000",fee:"0",recipientId:"AP8RQXpVHCYEjNaQzHPZLYEARWeMzYAnUH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dea089096a8ef631cd271361fd564a626f541409e3e166082890f5c3d39a5db1022057eaa7c8ca2fc37cac5129c8994f26b231dada2607cf7f3e026bc5b22c9ab89d",id:"99aad499192c22c4bcbe71b8c133bef61eb16efb59b9281323e04c6c4b925860"},{type:0,amount:"161657213879",fee:"0",recipientId:"AdLtfyiktPxNa8Wf3uEgGiPHHRvBwb6BVS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022074316c70b4b377bf7ede11dfd7e246e947479c62c6343c8370db0f0f5ba9e19702202487a7a8e86ee4970e3bfa3c42edebfab845b42f98c454db3bd0310c085acb07",id:"70a2af7bb1dc6807071d4c2ecc193a16ea4adaa872ff14de76d40e5d07c3498c"},{type:0,amount:"162022981403",fee:"0",recipientId:"AW6FnNuwQGBcJ9nujbPDx7CBjukP2tK8KN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c29213cead6a57f15622d66bb90dbfd8e9f46bbdbc186c752113d264e930486a022006f20912f179934ca1f2f94e0fd43ba5b415666d9949c11f0092de3553f648e7",id:"5c75d116edc4dcc35d0ba18d7ad56aa45dac0d9404fbf9f52e857fe8e8f34406"},{type:0,amount:"166527964751",fee:"0",recipientId:"ARkk3RAAeZSrA6Q2NiQYi1F5J27yW8Fz66",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220297e1206fd771d82406755d928bc86097eb8126f245e500f9c3f425d5b30fb1f02204b2258bcb30b1a11cde8cd76c81ee20482f870715cfb861c62c1512bc2737344",id:"4f3aa1ae966a9f4ea2bffb9e340bd522f3ee33479be4fea1f63d5a7b5eb47c0b"},{type:0,amount:"168221932329",fee:"0",recipientId:"AN7y5f2nixsdifEkZTcgpnXWBzpiuCkcQQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e460a99b932fe2c9b28720352ea943683be7120993e9dc4bd82bb336167c597502205a46ceac87e8dd5179eb40194229be169446ccdf085089e657b200089bcec557",id:"6bd4850be884fccb495c347ca9a9ee5b46be31fc1a0404c03cec0608912be6e6"},{type:0,amount:"168973133925",fee:"0",recipientId:"AQ6ziotXeWnocAnwzz7V2idW8uxz5V1pka",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bfeb6d49f03a89820a6dd1e82d238aca795866ca245be3f43e869dd1ae5bf9f20220580a0224b2b99b38564cee5b3470f88aa7c7106068e2bde76fd8ad1d8ec0ed98",id:"81e4e95e91247b73cd9e2dc3be2a84efb9fb428f04b184f63df43d3c1a9de40d"},{type:0,amount:"169700000000",fee:"0",recipientId:"AKDpBAVgjd4cYXd7dP6khrK2Q5GyuyQfoi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202619a5fef5f87ca49dadda59139f17bc7f388f09340914c5e0b997c1f0492b9d022031a12aabd0dca56193409dbf39fa3e9ee332d3e47fa4656252e161ea90563c6c",id:"6c86bd9ad81ff5305fa35d8eec25872292bf417ed456a801bb2301cfd9d5e79d"},{type:0,amount:"169700000000",fee:"0",recipientId:"Ac6zKra111cp2QccMk6zDNYwyWrYsjY4zo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203677d3e5102ea36a2a7693d8a47c86b3f182aaf7c4c8cb4118efb17eed87b6f002206a17cdfc67917a0c18faedec37baec1be75245eaccb45dc7fdf8ce4cf49b1e5a",id:"df692fe1270c264c2cad4bee6383428d2038d6b82d29b805d367690097136575"},{type:0,amount:"169700000000",fee:"0",recipientId:"AZbfRSargxVS9qk4cBB2BfVCiqir8bsrKS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bba6694b9e169a8b77a512b9c09079d99586551db4f5848a059b18d7500ec4e60220438d0b0f1d75a0621a6a06375ba8a3f75dfcc542d7d13f08175f9878b5feb409",id:"c0ca1a1626b404ec63d0a50fff867e2e9f9a1edaa744840c39a58c979862e33e"},{type:0,amount:"169700000000",fee:"0",recipientId:"ANeUUTh74UcDqZhgxEwMe1SX2CP44MkfZX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022072f2156f00911ae5b22ed9bb3701c89ee4ac9ede3f3b4451911e1e284e21f3ec022001918a7e52c65cf762ace735e980547e60abc3d00df59cf16770faaedc05e1a6",id:"b119402b26404e9bbba26df0e59cfbf8d50d41d28d428202fb0b293e19c30830"},{type:0,amount:"169700000000",fee:"0",recipientId:"AdVL1oAWGLDP5vKax1kfA9izMrZGkaStAj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206d1a108b0dbbdb2c78252fc7ad9a91ebd9a525fc5d6a0c13f94d64a1e6f8ffe002203c04d2e0f607398933e30df73e93a40db9ddc41abef1980e954654a6bfdbce12",id:"ffce74f355622c5a278ee320d0d9eae789d9a8a81440815bd919179a5a0b2633"},{type:0,amount:"169700000000",fee:"0",recipientId:"AFpTaoXGqbwVG2HhaWJK5Vky8QMXCGNxAh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206dd92556e443b03c0d88cbb88f562223e8def85b3c4e5ac40cefd0dc958ae157022012b06f7fbd4551ada6d470d25bfcd38cf8cc711c9af94ac56e4415f4f099f528",id:"ea0ed0b1bcb706d1e0b05b818a91691221010f7fece97113227de6a2851dac02"},{type:0,amount:"169700000000",fee:"0",recipientId:"ATzVyx4Et7ie5KLrjEUm4iULw9Lm77vgkt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f42364a66c031a8584365c68b926931d1ffcd6edfa8a4a859a9e07ff248a507902201731c3bddd83d1f64f8514f5914b0bba1f385c6ca410241a0c313c5b8b614b1b",id:"6aec2e00bf4ff94b4374f83df59e85d0b6a5d05fa5520b021d02c74e9b582e26"},{type:0,amount:"169700000000",fee:"0",recipientId:"AUeaN1Nvksrkynuxe2KFQcDnE6U8dHFPdD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206facc2f5e57cb6ffe15840f80384f3d386125e186234a6825accb2c8fae4dc940220456e79a2aa1c1302dd8d9437d815582b5cf6e2dcf9e7bb18f5036a1a1c77aa80",id:"965f90cc474b98cae2de4369455e85d1d10b71d5f6218bf8029eacbd8ac70324"},{type:0,amount:"169700000000",fee:"0",recipientId:"AbFmTF7BXLzyHYPsbzhH73fcUSzYrLcZeL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022025a0f243b8cedb3282616eac1cd44a0f15f0d908c75cbe5cc9b0be8b46c4e72d02207463d2e7f585be69268fcdb655d3d23c6f3b50c376b2683d7e2f86cc7a5e1aed",id:"c1d0407270d31a4e5a569d340e0e71f3e7771dee306d0c229c2c4badced51dee"},{type:0,amount:"169700000000",fee:"0",recipientId:"AXvyLRRSRYxX8HsQHwLgDJNwwxQ6MPyuhz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a149e9edfd55fbd717c71c7150b9546a47072537b1021c7fc4e23703b4322c93022033f23dbec845e796d00102b8570fabea477c75c88b574611bc46e3aa94afdd73",id:"d7fccd7b5b4da68f0deaad41f9f132f5891a82295259510d2a4c8f5c1f2fb22e"},{type:0,amount:"169938227241",fee:"0",recipientId:"AKLvGM1T9FCVstMPjWTC9ytw5UjyZJ9xMT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d361a2adb15f3e5b20238eb382fedf6a502ce30044b065b9169f4bd223d30fb902205e6004454fb61b7562e86ff5dec410db6765e29128e23285a6dd2b34fd437791",id:"a59e761db39ffcf16d170da0745cb36b5fa9d13c103592cfc28e1083ceacd886"},{type:0,amount:"170449652084",fee:"0",recipientId:"ALwMf5fAPMJhW3iwjxMydBBNr8EgZcTkrr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200d97423751ff5c67b4a4bf29412b80ee84ec48c34a9412addeba4bc0a6278372022010398454bef83c100bfcbcd6920bef23951cc1534611f143c9dfc07a247d60e5",id:"d0dc0ac9dcbaea7ddeabf7fc94171d286fccc49fd07668e417b672e96b49f362"},{type:0,amount:"172000000000",fee:"0",recipientId:"AbpQwBzBGHQa2NdEpPbg8p1N5j1u9KUMkL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203599ccae223b04921b15fb6dbf2282c0847656785d0fc12874e739520462d8b602207d431393872a4a6c5e9a7014e99c5d5dc6ce17ed2d21745661b36c34096a96c8",id:"245622a915732fb38c48597bce7bb1b91a4ae08bfc629ab7108f13f17804a962"},{type:0,amount:"172479663865",fee:"0",recipientId:"Adu9KbxhD6etHEMnjkf6n7diLWdjEGzwiw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220702ff0e19a0dcc3fb0e62185a5cf1c094b6b67e3be700252e02ece19e3a53e3502205f45c8b0ab6d45cacc2572799244c5304b832f068e0cee10dbfefc14384e98d8",id:"3e2a032b3ea825987a4f374298f036806e3d032d7047ffb77f3c74c62d1bb8e9"},{type:0,amount:"172700000000",fee:"0",recipientId:"AT5ziEWMZjWzBjjKbgFVwa9XsXvgLF7E6x",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203072cc3eb52d630364deff654fedbc54d5a05feaac0e34e0b56acdd843c5d57502201e8f8c94205b700683610b373a3014b04fc0c064ecf7e48115febe1dd26e6c07",id:"760939c2cc34d8b911d94e7c5d33e577b4b521695ef1283793e47e9550cad9fb"},{type:0,amount:"174283983946",fee:"0",recipientId:"AUnkYxRkpMJZ9jKzRQMN9p5VGDmYhk6bZQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bf56948136cd8aabd99228cfe5b668e3c31ee9ba51904413885a0c28de5785b00220529937211a9e16896a45ce426309e06db74d3cf0014316d6472088d843ccb6ab",id:"1440feb6aeb77c3ceb720c4cc1aff6c3ca840ad482b13ca6fc44943f26bd41d1"},{type:0,amount:"174283983946",fee:"0",recipientId:"AYP5kYDXLi1c6wrL6AbUX3S2JUEZPVLyug",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220564b80aa83110cfcf4c05976c11cb0bf022aea5539ccfc7285e6bb7024ea92a6022054cd14b6b69a9a7aced496951201a2b39b665282a053686b6095aa8f9af74be9",id:"2350844dac54c1d2b56608babd879cd5d1b986f4d0c3b32f587e0d270f9faac5"},{type:0,amount:"174996809637",fee:"0",recipientId:"AZ8ijDkmLBLemmH1AVPQZz1ucfK7hmpLaG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e3e8f38a1b850c94c87b33bb095221210280b1f9da1d2ec58669063f7b9302c902206b3b20dc5e9fac39ab48f418d4119751c52692aa353361c20839b564ae2d86d0",id:"af897d4026d8b58fc97ad3e0a4f555c1ec2d38954a590611780229514b07aac6"},{type:0,amount:"175000000000",fee:"0",recipientId:"AQyWsH3NpyMMepkGbMJmqBqZehhQoDnzgu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a9dadb4e5df8e5b324a66eca8e5a2abbe608886ceb3058c3b28d2c4eaaff255602205bd59390dd1b2b0019a5d928913d9379cad4adebd2b686d61b91733acc1629e9",id:"169028e76183f099c5c6937c4b0f33d085a4dc67b0cfdd5e70ef985a7640cc46"},{type:0,amount:"175000000000",fee:"0",recipientId:"ARaVs5XoWqrTdQrfXSSr2PTFWpz8ex6Tpd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3043021f2f2ee4045f6a3a4072212a905fb674ac22021fbe4f627ab06254c9d8996a6302206011608f1e33f52c6e310bb6f5990fb97b40e3621266d832b5ff3336998c75d8",id:"b29913407f911e50a89ee33658efe0bdd856c17654f022df7dff3ba66037456a"},{type:0,amount:"175000000000",fee:"0",recipientId:"AaAYd5qhdUN5Suq6wnJyLFgvVMbz7tAXhe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dbe0cac3b1a67b51c05c4dcf60cdd40898c0d797c9e82ead41c3d253ff5936aa02206a1367f167e42d0272eb4a2aacde2f6392b845324131d83e4060743e981a2982",id:"8c1d279a9c3e6fa01cdd41be4de0389ca0628a81e9f54738b3521a38cad15199"},{type:0,amount:"176418068596",fee:"0",recipientId:"ALemeBL1Rt6JgL6Z8CJysKDckba33SxDJg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210087e1ac43a27da39206017ddb7b7d65c9104eb079587244283e27156769a6669a022002838c9763c2b4c53926175830c64dde70709773dd9ec5fc82880f8afcc57ac4",id:"d1e866be9ca942556ce9e7b7e86fc181cb4b2507a254e213837cc9549af568ea"},{type:0,amount:"178300000000",fee:"0",recipientId:"AK7bbYXM4Gkyscxp9sVecVn12z3oniuEfm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204c1db106bfbc3cfb05d07cd96f73e94a858a3b48d98e6ecd569c70e6bd381b0d02202db38c2a3f4796f90719ac11132e0bccbf90f3c4df55a423a8102cdc2617dbf6",id:"dcfa805aa6fa5e3b48e2977f881e0b5e958fcd6d8f5e954d2ffcc19ec604b548"},{type:0,amount:"178300000000",fee:"0",recipientId:"AeBnLajb2S3ggu919PuDkcHKvQUyHogQ8e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e22d2b3fa99c81cc47c253d98cf068c6e6d4392cea6b98046a6f9bf96f08cc2902206b95a356720f6ad9a1fc35a0ad4a20dd52ff5554e917b83a47323564f6a59eea",id:"b7f38f5e6054fac0d79bfad045c9d6320b25c5daafc7981cf20e97a86d0c960c"},{type:0,amount:"178500479084",fee:"0",recipientId:"AQdLeqJwgo6Tq6K9ydgN79wyaFt5gzKFde",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa25b2247f33f524a63be9001bc7bdcc5bec69b58672a2716c818bd6628e2dde02203b4fe9e4e3ee61142c081368f69b7aa585bff6a006d89be99f11c6812f8adefd",id:"f31cb0587377be839be6a8c831a618f305cf2aa81524fa8b7db848d1a890ff0a"},{type:0,amount:"178900000000",fee:"0",recipientId:"AbZg4v2npAwLZfgjLAX3fj6ygRRXiT4uJ7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205069080158b4cdea2222990a79074e3b604f8fa3c9fe3c64a6ef43c28e17235502200ae19cfc468e9a6be38f7d32418a8fdbd9645926cdbc41f69983b814a2370268",id:"741fa2cda9837f82593d70443034a0fffcce8513f05a6808230b4dbc222a517d"},{type:0,amount:"180659436535",fee:"0",recipientId:"Ac9dEA2bwQW99JBREyPDyhEotZ7YQRH6ra",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ca9bd24ddc2d0da487f016603fcbec17be8c090360e57b8e8cfc33609bf72d080220033a502c201ddc296b9ffe5a6c8a439a56ae3b3e7c21907467f22b5c84afec74",id:"d777a58efef6dd5addf4b41c7d606d5087d2c04da46cc3de40df6b253179322c"},{type:0,amount:"180700000000",fee:"0",recipientId:"AN1yL23GyoHGo9sa9k34ivBDsbJ9xNTso4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202c19e9171610eea55add6b8ce88e6dd2df3cebcb2c7408750e2d439462053b9502202a0ac408178498ac59f3efef9fbe11595c6354e192d93384b40016ce4032d73b",id:"9baa8ef575418b7c21c114677123bdf2994083fdb026f71f3160e42749a3d896"},{type:0,amount:"180700000000",fee:"0",recipientId:"AQvopcUU3ynU28hy9qrgjNgAfNJUXxxh6d",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f192ccea6e18a7c7085772ac499c17747e47086e3e3f8091062a5024f6e1d77402207312fda88382fe4897d0f36660b431290e6cc28d09da713929cffaf9f6a49924",id:"bdb82c07d56940e5aa3ed4738521380d13c46dfcc2c41a08a552870b9b2f26c3"},{type:0,amount:"181302136380",fee:"0",recipientId:"APytrs52Z9zEQFbTTsVseTAc2ah2w3Rz6E",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206333d9530c4bb019d2fa8505536bba29d34255860b173bbce1f3c04dd5dfaae502202f71f8001cd13550442493273dfb28a76be302bb4958fa2c00c1da0752c5584b",id:"c8e21ed6c8a7b2de81d217a948f55842dd2d9f3ee5c5355e333357d7345a0276"},{type:0,amount:"181861548464",fee:"0",recipientId:"AK3N2csioKfWiKcdFiM5Jz8bh6pQurd8B6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205db6e528d94b20b8a25c31994a01ed5b2735bfa1bc5cf2e8a44d44b666ca11b8022056eccb3b38df08cd32a6d10abd316caf075582233a4e3f33cb73dbd143ee2905",id:"70ade5cda886880e03b60be04919c3623a511b655e98dca632b59c49c861a285"},{type:0,amount:"183741686918",fee:"0",recipientId:"Ad5ZbazVtWzjZJ7PPep5xcd6BrKXujAVRs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022046b4f82debedc188166749d7eac5367ea18d2c56ec136943dfea7081d2a52af402207f6b27161c1b32de2738e9d55225e411d74872db44109b4ebd740abf1f3751d8",id:"d7f3e67bcfcf0e9be5368f8c3a0d23f48271465c61a3d345054c5be9aa01249d"},{type:0,amount:"187700000000",fee:"0",recipientId:"APaeLc9yFj2Kr4c6TzDvSEhtv9yuyYt15r",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201f2ec1b7426bca1a40df431b64b458e41c3da447c9110f04752b17f27e19922802200f450da9a7053e18de7d92f27b373bbeb5e8d83d9ab97e521e7b2b97d70a56bc",id:"2d55f798fc91fdbbf8e8cadb68372e3562b7c14b5c8cc9c15e9835c442f37133"},{type:0,amount:"187862979565",fee:"0",recipientId:"AeK3nfKry9sXXTKdf1TpGxukzwjEbFsYzB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049d80b6b0f5e5592a925a105fa49d3824cf6ade3e1f82c6e08458fc6d1b4e1ea0220084e937408e7f66e690d2170723464652d7fc5e49b5a50d46edd4daeec028806",id:"90e496cfb4d6231cf2e764ba08e6d236086ee2b0126d754e96e1f046990b4741"},{type:0,amount:"189637269418",fee:"0",recipientId:"AURDY45qCCokzgcLMHFgMQedxx3fAAvrmS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022070499c504fec7c112ea30ad8064083d50c86fc7bab9c35b906d3f5dc574a63c50220295bfade3e5b109dbd370a713f8166eede8aa42754b532dcfebb2e1208ee064f",id:"a344917af836c95bd810bbdb119bfa4505d53e314f7d8064b947a95765acc668"},{type:0,amount:"190000000000",fee:"0",recipientId:"AbQgQntyhfSarnTh8cFN7o5voAyDvbyZFa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bfd6cec5bf192f270babc3b0ba8435d592bdd369e3624c9c6c3b1a01b5f2b6820220191aa370fb41dc7e0f1c4ac848290419702e467f73dba7eb5e63f31028585fbe",id:"5174fb0eb29a8303387005b4518977b8386e811e228754863418ea5dae98953a"},{type:0,amount:"191010602651",fee:"0",recipientId:"AQXAihgHkyTH2GaA5q7txsuGN8Wm1fRCsh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f63d5da7c7ccdabaeee4c6d4d7a6a280feb33e4c0309291d9d32e689be6d83b6022013a07a743b78fb4a3fdc0c405279a72a1514baebb9dd166b9364c46eb934c3f5",id:"0b931be5bc7475ba3080a14a864bbde1f78e8dc0e9097c7d6541ac32990f55fc"},{type:0,amount:"192343079840",fee:"0",recipientId:"AJVL5Lh8fjMSrzDMTXxsBt8bjjEfMp6eFb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bf093f56441607b038305a26408c77428d3f41f0be77f1ad8a990b8837902eb702203c3badb9b7c845cd4c84261403de3ea42e644f11cc5536878828ff3536e91c0c",id:"e47fbbeb7f8b522d4a60ae7731df51df96a687adbea76a3d216c8671106e9c81"},{type:0,amount:"194167513244",fee:"0",recipientId:"AR8J56ZfnBCzB5Lvx5VyMbjKnfvN1ue8KT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa1e878c673805908d682901f13bf1f0ce133822ba183e9c00425bcc1d43e8bd022043c553f199195ec42da2c5ffead7abcf0aa9046dcb8a5009f0b04d64f3611c8a",id:"2da708e273f79eae2ccfc37fb5ce48fa46f664f90715e7109b4b03d4f336820a"},{type:0,amount:"195295588810",fee:"0",recipientId:"ARRpaRQ3t4LQdiJSN2ZMsuShCn4RqV6uq3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202b4e543a3ac721ced2a4cde390f1b7e31d5efdc3d036d9e6a525c5a093ca7768022030c034a23ef72c1f335fb32fcc0e068ad14ddb0973302f8895f46060acac864c",id:"1cafd9c19b66bf9168a643075f84b1a78d80c909e2d6fcd13ebe51335ce45d83"},{type:0,amount:"196578368156",fee:"0",recipientId:"AXnet9aeWZ6SUKqHqHaZfCZNuTvQcdS9YR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fde0862fac2154078b283cf6d5d95e9913b5b19ba708cc17f6287832216e54e502201f71dce1c39e215b9d5a3c971ff5a6e8ebbfa6fb79a7135ceddd490216fed391",id:"4a3e46a8378334a550bd54172491a19a8832ff1c4e909b68f54a9acd22fa9e0f"},{type:0,amount:"197344240463",fee:"0",recipientId:"AV9rVNEKtxumKAuw7ZRui27Xqm5oDQTcGu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fdadaef2d3b1c8eab520b7a5738db35eb35c224e2fdd0d215911454d74b09da302207d468b503cea3e7106c55f2b4e3081036c6ee71b0d22f3c7ef7c6ace38c2c1c5",id:"7a263c4f547c159bfeea9542f083060435453a72ef8251375930a6ce50788e35"},{type:0,amount:"199700000000",fee:"0",recipientId:"AGJDGWF7ZdcFg3py7fg5DXVLv7u835YEu4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200d2557315c3ed28f6e9006adff24c8c7653482ae2c5a46536dffcd2de17187c7022021bb54089176340c71544b27388cd2836274b5fa4578af87a8bcebf8509160de",id:"73ee85253599b0a5c6795e002a0369b02caafe3d471e3ae50bf06257d9242ea6"},{type:0,amount:"200000000000",fee:"0",recipientId:"AVQp4XzGX7xezNvAs7zK9THH52sHQ5cVMF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f4497eb3cf8dab8dcc034e86323ed133378045e5be031e8a0aa7e146df51185102205b4e2fd28d73d1c6b0363163f3d43f455e909c5d1e91ab351f1c54a0c1180c56",id:"ab4b8af4e3bba9782ddd6e1cf423572c08018b97c1edb458ead90e71d84196ef"},{type:0,amount:"201600000000",fee:"0",recipientId:"Aa5mSdp95Q3UYCfq14hyqoFAb17nbvwtce",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a859f753c037cf28dd0adf78f00b25edfb1824a361dacaa6e638c1a026072f4002202f3fc4d70a9a783cb18cdf15cbcb44152c33c4b1bd3258a8d40b080fb677b93c",id:"f8f09ffcd58da0f41474741a12846a993315794679c3689f683e2caef0222616"},{type:0,amount:"202607842389",fee:"0",recipientId:"AZ1X4tRmPioTYsF7M9G6LptiwUC3FiTcSR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d687ac1127083d06605b4f903c9052cc4d0d4b32a6721e2bf5802d7363dba00e022072fa83d6653c638db9f2f011a61c7277e3feda10551d6455be11f7ea8282e625",id:"9fbf5160fb1d3e8c0b218e2332a1fd4ec0bac96c346fafcf8430cad2aa7dfbea"},{type:0,amount:"202700000000",fee:"0",recipientId:"Ab9yCa4xAXYPMhDVQn4pq9sPaNPf87oPn6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203b4ad209e97f90c9042d145d904fb43b7415dee167bc23704e29d1b1e6f57a7602207cd6aa93c337139424cc160791262310216b131fe347e6261f29c30fc470991a",id:"f553a38a56e7591467c16af7ad8b3b33661f70cc6e7ef38b7193ca30d7433e80"},{type:0,amount:"203859765516",fee:"0",recipientId:"AdAVt1aKEhoTSpoThdzoBc551Pd8TvcnTK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ee9a0e9d21b09cf8456a7af712aff5576bbb7487afec2277c6ce857ea32044202202c7c723a32c2eb349c27cc9b53aba8c41eee9c668e606e8d1f39a4f4c51725cc",id:"fc7712497be31254a03197aa586d121307aee0db828ea22ae5f64efafd4a7d2d"},{type:0,amount:"205000000000",fee:"0",recipientId:"ARpbHrGteAtmcuq4ogVhDHGYa5bNX43vuc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be97fc5e92f8dbe342499e2dfeb861e2a3034d90db0ed46263c492c02821842602203c072ccfcfc88cf36e9e2bb05f4bb6bad6055c6b5f409d46a686e2594d92b2f7",id:"3fa38602a65a4cbd8289112ad9d2dcc38682688422da1399192e9becb3713419"},{type:0,amount:"206040822146",fee:"0",recipientId:"ANiKFTez41cCVTDCeQMGDah3CZcQE3QtqM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b2d3c8ff809e06ce7f18e8578c098a05f17ef5725f5493455fbdafb0a18c64d50220278ebca469d1ec78d436a6876bf69caf7c43b61de58bf725768e20e5467b214f",id:"fb110b753cecae568ea684ea89219ecc435e4c0b36c4732f39429b96c4324d42"},{type:0,amount:"210000000000",fee:"0",recipientId:"AMEiCa1gAAMQkkNBLq6U8XU6eojD9NDLhK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100858d68292d61d3ee9765bd761c669b387362768926892d13e20de085dab00b34022063217ca008673f5d910d52e76172ae3d5cd89c5397722555fa02ef904046b3f0",id:"5e160385a766397e2e8073acf3c6e61ebc1e5531c051511e2305e1f9a99c9074"},{type:0,amount:"210742589495",fee:"0",recipientId:"ASa6Ptm7PRBFEabEA3xSAaTzkXAATsgWYH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201f7e5d2a2b1eb413415147c5b0531be4acc9657a258b0642674a9222c9e111aa02200a6b12557e8b15c93363cbd2f16c5da5b347808b81ff0787b509a5df402bdcb2",id:"7e416a3161f32a1c8fc7a50ddaee0005af24af5d71634ed412a850b272773300"},{type:0,amount:"213596124973",fee:"0",recipientId:"AW2WdVA4pT25G6Mg4Y8v4zVzwMqf4aSzVY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f483231b8fa37f29b442b23f5cde12bd0a3c5aa9685b0474c9d8b49e29bba09202202909c7cfd49d450ac8230e0830b501c30d4bde12daf911c0123c2986a6cd940b",id:"c40a53464e01b2d155f20f7bee18aeff16912e6d0bf62ce7af98242c7d17129c"},{type:0,amount:"214366548708",fee:"0",recipientId:"AY4zDyuA2GRwYA19o9MfJWHkYX5y284Qef",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220433e6ed95528685139036657dda5bd0d00835bf887ff48b50f2ab8fee55c862f0220454511b151d642bf325c1b76e4f87c10e2edcd6888db2ae93b80dc002c64fc26",id:"d11284b0b9371d544a9164d028d01780bd65f8c855c147788bf9863670756898"},{type:0,amount:"218074902818",fee:"0",recipientId:"AcGLR6W5eVw7Z4nUNxAKAsPbff7W3g27LL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022059ae53f97ead4bcffcd1918d7441d2af25e3e82b8177543cf2ed491506ea4452022040e8491b7acda16b0cbe26376c7c363c31e007fe6d530d0a7b59a2e0fa8bd2c2",id:"492487dd0ac90a5e56db964bf01399a2e68a6ae90ae7df983d28bb7a016fd3ce"},{type:0,amount:"218233858158",fee:"0",recipientId:"Ady9TkKQPteVBFnEgsB1jReC31ChZPQTrM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022044026bad7aac5170ffb87b2fab2d9e042093d05707d14e8cecb33de925fd04b70220181f5fdf565a57905911e0de52b99de3fb686768d269bd825e660a7136e88baf",id:"fe4a120e7ab4c9029ce22ff565bb6a3b1c94b271d356fdfb5ebff146b521e983"},{type:0,amount:"220000000000",fee:"0",recipientId:"Ac4TAJqrvBq4ts5VZBhHdH1NG9t12T5iG3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207afeefd18cfef28ca2d575ce09186d5e73dc9b26164ce2f236b3191c0f96279202202716438a52ea4a50fc87bcf18b2053506f19cbc8063c6115d878c5f6392effbe",id:"97b34b6492aacfd46d6cc9abc808fe0a24753ddb97bbf6f6fecb926097faf36b"},{type:0,amount:"220522585745",fee:"0",recipientId:"AVQxWb8vskpGUtBHGyWtZSdM9gGK4oWGAr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022029c9ca7067178a57095b53e99b9ef5bf510797b677eff8270dd269c44d52af190220773c8cd4647f9bd75fa8d67164990b3dd5c4e872564438d5125be7c08224858c",id:"8bf8a19bc12cd56778d9ceed54b0f85bf35d93074acfc79360c845b3afc49701"},{type:0,amount:"223213787338",fee:"0",recipientId:"AdYX3f5TQrDG1E59vtT67yfUkePMA4kdLs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ca26254fdba9aff2aac672c8f81d6501c7ed05f2310408211593616c79dd1d7f02205601d25d8967f49a12d32334a65c2a5135bffa6b00ae0b8409c20012db15c977",id:"01729bd3f0c4cf81b3c5ee92c11104e3ba3bdaf5ca1cff75468b1909b0702c0d"},{type:0,amount:"223400000000",fee:"0",recipientId:"AW1Hn4dANHJAbEYZeEjY72kHziwS82vgnU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206554e7abc84d48a0446916b7dedfe2ca80b81ee68fac6a1306e20f21fff13277022069ce2552631634c4ea0d8715b01b78b2a6a5ae0ae27adedee6fa6e943845a33d",id:"489622fac2962052e7aebeee1e4a4b2474432b88164ee70863fc4597ccb0f27e"},{type:0,amount:"224600000000",fee:"0",recipientId:"ASHHaaJMGmaBdgYzLBnCf3QRzmBfiCLwCZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f52a3a95b11ff46babb1a698a31a2c15543cd1e4edc0222b7f6593bf9e1d4a8402207aca0fc68e3096119766e390f2d20d2e48d308520f2700a4a1a8400fc9472407",id:"83ac0a39f01b70bd420881285a9cc7b4a99fe52f1329da58561a10bb7f933c4e"},{type:0,amount:"225135109888",fee:"0",recipientId:"AShwN32PRrdnpqBNruVJBba54zvBxQT1fZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205855eb9048241c2c794ceb57f89f4cfe6c6e7db7b75819eb2d6b613ddf830f3102205e55a04f4d782a61e969ad9cfcb8926990001650282849122773fcc25efd49a8",id:"83093ca92b08910d1701846610d091403f0caa583c539c555c676b6a31fc62e0"},{type:0,amount:"225186625152",fee:"0",recipientId:"AU8vV51b4PJZb9fWwHgVUrgz4Qq9ybsM6o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202ceb7829288662087ca7db79218ddb0d576cbcd112fc065bc5121d2726f7195c02202deb812e71c09a4e21095b881ba24d55a7cc135cc9dd739e66b22149d669269b",id:"2cac15432180f5f1a0459c96a42fa93dad5626ac6f3abba1b79116c9c785734e"},{type:0,amount:"225944551562",fee:"0",recipientId:"AMw99hBqtW5JzU69NFnqdHmP7hezSHEJwd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202ecfd14378b25946c8f865df0a638300d26e6f82c4c557e47acc3ae5fdee98590220047e32bd8b1cefe6ac337acee1671d0c83b6c4966bab9de30615c36f5b78afdb",id:"c62a1fc478ea0e2bf3e784ed5a79e7073e62911ee9d078dbbbe888fbdb69f4ca"},{type:0,amount:"226088941627",fee:"0",recipientId:"AYijkoBCzzshgn3N89mw6tVHfFVDEoHhTj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008a560bec818d7a518488d631663ef9db1051402d2e9f24b7e45ed008de328adb0220783be0fe7394775314a1ac063e286a47d8f0d5a03bedef6fba927a08f16991ee",id:"b5ee7b65892cbd18ce165ec3039e9f103163b4775c19774223c7a039706c7be1"},{type:0,amount:"226432949161",fee:"0",recipientId:"AQg79cKKYsHB27WksW9k5Zj4gfCgd6y334",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201b6566d5b7fef4e562a28df76b1cf240b1ab6d8e404fceeb6a73e8eeac2c410e02206fc6d1f95cc2f73268bc8c8a16c018f1e3d8841b5d1689a0ab9a994eca88c35c",id:"7f3c2b6326ae39f356f638e7ae2a62c6743f9a0ef5d96bf5579d4ab633945d3e"},{type:0,amount:"226920728780",fee:"0",recipientId:"ASvcE2iGk6NjtGzsCdhtyEmYTZq8vzA4ro",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d491f759be71c566db0c613b002abe362d5773c394c4c334b2be2c594339cf1202207af821eab08a548cf1ac494066c9f5c44f1e012a2f802388cda6dd1d3e929136",id:"d5f945780826ed328ed99545019e5a71b6758320802accc0e27063a882bc410a"},{type:0,amount:"227205088343",fee:"0",recipientId:"AHAD2pRZH6sqxHbhGYjAWWBbrUryGgLXNb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fda316ddaeb730b7d40cef2c6b67b1ab4309013e1fc2dfad9c7338cdbddd99d8022068dbecf8adbe1f3772ec3ada57f712d621c6dbc05586a7d07657f515ceaf8301",id:"c90e06437de6b21fefbc7ad2740019ed8a21d3d2f8cf4dec41c9ca50fecf9878"},{type:0,amount:"227326935581",fee:"0",recipientId:"AMzGgQHh5MHzFzpMV2RnP2ZEaDxh648gYr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022100df2e8ea17c584cd5c2b98d8f482073b0283a0e08dfff592d802b136397f482ae021f3b7a55fa8f7e6cf81dc6366730081f9350c929a64c00d57b278e8e927a6639",id:"4ff0f93c6049358eabbc1fc17d2085b198fb2f853898c31e4e86897921bf0739"},{type:0,amount:"227395512019",fee:"0",recipientId:"AadNd7r4Sxm8nRqRXauh8e93JieVxHr6SE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cb986908cda1d4cde6fc3d3d1d677cd884b44cae1f8baf1ff29c60ce9ec230f302206c17455c3a4a0cbac75aaf7827e3a2b6e04904114b580e6b2e34e1830824afe0",id:"8198e7da0ccb9bdddc19850d2b12b7f142e5bae867e699865c6e07f380249de3"},{type:0,amount:"228227511241",fee:"0",recipientId:"ASyPsMFeWujywouFojtZHAmk8MhB3ZYMyr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008f58884d3e390ffce7e7dd713c9f3c0522a03f995ab5e78310ad81e490dcb80c02206ef0c5569957702d9260aa8b1ddfe7460737fbae69f7685cad4615e497b027e0",id:"76cb4cb4da799f5652caa816f58da0851a83281f7412938263b9d93535026bff"},{type:0,amount:"229694826743",fee:"0",recipientId:"AQejgdtXnkygMaN4iYGsceURNvrnGLN96D",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022043a8989908833bb50b5a74aa77ba1172f4126ba24fcfbb7502a8b3adbf7f9bf602205227d5352082b42dc8ff3a6971d5c04cae58f7c84f44b9804a42d7d424e076fd",id:"5f4e06198e65476fd625fe07b5876e9e9fc27cec66fe4e48faef7c89bd79fd57"},{type:0,amount:"231352203905",fee:"0",recipientId:"ALr1QRnTAnsQXCKVoc5nHjA78uVSDNGArL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202b798a36b794fa8ec3a75ad0edea4d6376cd39df6c0d263025c4b09b606acad80220371266d010a2cfd2a22e5e46322647528cca9eec61f6e17aedbb64ee19854b3a",id:"cefa0126ac7ae644b539f9004f2cd71b5e4520af416d93e4541c5ca8a84f75ce"},{type:0,amount:"232283790318",fee:"0",recipientId:"AeZPqVdexqu7VGES4UMMGdnySdKTRapfPi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022015972edfca96fef8811354524dad92eb10b6f891d80fd0daed0b692e60f65b2b022052ca9bcd9a6963826ca5ed308c0268c94a0136d236245c522859091d405d9599",id:"e36e0129a20398b9ec6d8190e2ef349e4e3ae61e0e1a09085f153523f57bc3a8"},{type:0,amount:"234568404307",fee:"0",recipientId:"ATAva6NSSHp4tfH7N9toWikSqd6YYKBBLk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c2dd0fc577d306894f4464c70fe39c83e85c80f31003102a5ed878f6095ec21702202c64b5a075465f7c3014c9255ce0cbdf593b2158d6cdbd8e91f1b44ce9e3803d",id:"7d7fe67913bdd7317ac7b930a9cb90e7649f05125ebdf1e8691e4ed32a482af9"},{type:0,amount:"235000000000",fee:"0",recipientId:"ANMT9kqisqY2KKLx3VMokjLCynqMxQGUaS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a8e13b798bd778badc34d9280e1d2ab9414c813f938384c0a86550e826cd8b8402205950252bc1efb41ff5b354dbff2ca5a8ebd5d4d815d9b5b3c39f2c787b881a48",id:"14b33a1754dd1dd5f243301dd176910255ab19ddaab5f6655f18790b9d2d8331"},{type:0,amount:"235931714746",fee:"0",recipientId:"ANpWLmDRAqDejcZ7GCdcKChmRGoMZCNJS6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b99bd138ec399c08edd91e0219e9bd049ab7a80e32c813501d80442f436d2d19022056341b7bf689ddaf371c88ade20a7952815bdd784dc2ae64d30b2ad311e79e39",id:"6953ea52c0b42bd950b6a53eb1e0b4e6af5c13d0836a30288726a0cbbeb34f56"},{type:0,amount:"235942815916",fee:"0",recipientId:"AcqrcF2KJgjenxBxXoK5vtWo5ELqwfkbhX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210094dd527f0c312b8ec349fa10aad1c7dfea7cd7dcc9c4c9196fc5a571c05d85cd0220595c9587b8bdefd34389e98cd78ef8b4bd9f1912700f0d3d713afbff6f5280f0",id:"6572a91980977673ed2d3c74edea33493e87d2855e060e3ee17a015e35331159"},{type:0,amount:"237605753191",fee:"0",recipientId:"APNyAxuJpws9bQ9agQN9J1hKE2kMoBpv1c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ec9cc4a71bdfe43a491208b81c164c1a7dba990eaa9232235a6f26eac2bac7b002202ace026d4bceaab43df36c3a7dc38d859e00337e0a278550fc11d3f7ec2455d9",id:"45c45d469ad237b9eb967bf033998866e4671c955498a39bcc4ff652d7366e69"},{type:0,amount:"237874783089",fee:"0",recipientId:"AUn658PgseDk5iLkcAHwEMAYy7SLz7aByk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022010c2a04ea0859438a7c8baec0c633a993afb4f2fa74b09fd3cdc36bd2a74cc36022074a2b5210fa27262bb40d9a5d6eaafcdd7791bb62bc678c3dec55d8a0e196b2d",id:"5809e7da60df4b7f9c8f359c859c43fae0d319b9ba0ba7e8dc2228d96cc8f651"},{type:0,amount:"238708836916",fee:"0",recipientId:"AS62XXxC49oGLwGiaFyMXCxCamuATfHSHo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206e893e194882b8be5aa96582595ca69b55ea0ea9a7799789d0e3a79d003ea77c022034edefdf0793575f1f2139b925e7cd1e87c831ef0e2a11f923440ccbb62aec8e",id:"745488ac65b21596e11eb41d380bd595a4270fb691819b5c0437e3b9b0f5f52d"},{type:0,amount:"239265443070",fee:"0",recipientId:"AUdHvFwv2fF2DBpYqbnh8fakj2Wc1HFDW9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203fadb40ba73bed4b275b2dcf2d205b496404c65e896468fdb66946792fad929902201ce6b87ca0ca7013dc22177e6915c06fddabeaba1f818098b63cc0918c33c9cc",id:"7d94f1bdecf28119468bad192f7ed5ef12f67800246f071a312bd23e8d8f2d9e"},{type:0,amount:"240950563055",fee:"0",recipientId:"ALE7xUp2tVw4XqoA9gK1d2UADbZ5XbNPv4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f2d3dbadcc28cb3aaa43b29caa35493ed229e7feb032985420d6cdae580e8355022005ad1413bc7dde581e08d60a2faa4faabcb8cb1d4e822cbe23f47922e737d7de",id:"8b057bffb3bfa183445d801a220a07a2c66e7e4e1aadc440265615fec4336442"},{type:0,amount:"245331115580",fee:"0",recipientId:"ALRhEXxjx8RxjBMbFJMZfRPVKYgTeABue1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c10b2b4f807ffc5f82391479dfbe6d1e455e16f6adb0c150bc92200c8fcbd9a30220033b3a351010143a22272ca5b48d73180b209b9d9f2367fff8ccd5dd899e642c",id:"09dd0da5b96f36e27e7d67779d3cdf266ccc2efdbe5c9ab88c20b5082942d4b7"},{type:0,amount:"245368130406",fee:"0",recipientId:"AR8zWTBs1pw55kwS3Wq58uvhhwPjtTYNyr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220076a552745173a93750265a34cb80633d8d613dd72565420ccabe9d56f27c44002200509f4e62d51dd15d11fada0edf71e02af8397fe5e5bad521bf28bf9acf80655",id:"39c6bf781edd4da283148bb6f34d1152cee2fc98cec7464932a82bf380df151c"},{type:0,amount:"250593911397",fee:"0",recipientId:"AGnxrUgmVmqqRNyo8nVVnFuSwiABeiMjXp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a01fa1cd2c20a5012c88ed1a0756a1f643a62c78fcfc4f69a7c983e76932ebd202205ecc72be31c8732feee7ed2f79ada18b52b9d773f26fda89825d5364ffb0653a",id:"abe6f922e8ab5509fb29fbe11356a182a5b7feb4e91d0ffabe3969708b5d221c"},{type:0,amount:"253760909613",fee:"0",recipientId:"AchFpiHbXRyCxc1ZY6z638QtmJnDi7hozK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008e32159083784acaf47a4a5bc2fae2f25b42f27ccfd4d1f0bb2e6263f902ae8b0220068d23c7a19fcf30456fe8117678b6f16d14765256e034764f7be575c53579a3",id:"99b8b895b70466c7984edfdf0f05dc35ad4b52b3a620bed624cb11fd68a588c0"},{type:0,amount:"254454616560",fee:"0",recipientId:"AXt9rWvbGupykENfpxW88mnD9zdxTDvWXQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022071ecea689811557ce917a64653771c2660ff29f9a5a903405a74f5f7e6884a0c022034acca7a4460d555b186d371be5c90de69ee6cd2e562b874fa37323dc9b7479a",id:"189b47b1a4ef03306276ad9e7afa6de0a26711fbdfb2bcb6527f679ca1afc192"},{type:0,amount:"254606167851",fee:"0",recipientId:"AaPyrCLTj12R3oc3iW2mWAwFBy6iu6VbwB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b4927d09c6bbbc5e300e8e12107822350358939d92916affee3f5bd8147bf845022052635047282fc85c9fb4f115bd03f9fdfe42636668f1da00073827ee72835b4a",id:"bb4f8ad248ea6a382f7b492587bd4ac14bd1f06554261b9e2d187aac784930a6"},{type:0,amount:"254687439215",fee:"0",recipientId:"ASddgAZdbm4jQAWaT1q6Y2zQWRqEkJFEX9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e7ba05a49b3b569d7f55ba5dc0309db7d775c5f1b5ad068f426cecf7e6973bfd022073aa72abef5c92119acbd30f5434b066d2e9c3f68d0a8d44f61c6ac60d76d9a3",id:"3aed748d0979d80a807df6e530f480a05485d147925f971b26e7c7826e854fe0"},{type:0,amount:"257637193659",fee:"0",recipientId:"ASsSVAcmoUukQd71zZdmXu6nXzmG3gsKVk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100823c1f1dd6b34885aaa0e0ad4fb4ce4362343dd5a328bbf0d670261a6b90d4a802205a54410b7ec114c84c47ca4de5390e78411fb580f966a790266ef570425ee935",id:"00dc859d0b95f33615098b9026cecae7a86f1aa61dc2402725bf41ed589fb563"},{type:0,amount:"257700000000",fee:"0",recipientId:"AdeWwxiobp9H6WiabttYQp5H3kkNrHXQ4h",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022052cfe09b5968829e0742892f8bf957072e13528e293879aaecd0c0c5c37273b5022021eb5fb8c940be0b569c6c90921ce4a5e6e20df8662d50d94f05b03429317e66",id:"b55d6a965744191be648d34aed3eafea6346102c9c078ac7e6ad16b3aa9528da"},{type:0,amount:"258336704622",fee:"0",recipientId:"AZeA4DJAW5qBbSdGavdC1CikwiW5usc19G",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3043021f791bd82b7e0414daa7a8a9567d935795438cf7e23c4ce95ec0c634ddf8bea102205eda1bf6bbb5f7f374460fefca7e8001e4a37d1d2615e776c347a3094ecb88a7",id:"5ab82d277db94a82df64931ca7c39d4708fe488152263dd47abc95f889fea4c3"},{type:0,amount:"263400000000",fee:"0",recipientId:"AQ1qa5TMsSF4RWU6fBZCQCFxcEpzmtkGEM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204fea12280fe69879e6dcd4eb86c2590293a9647627db7709ac6848690e3d9c3602201fd4810e4209edae71a9dcbd3b58daa95ee072bff610b035a8c642770d70de4b",id:"0985c36709c6452d9520cc9a2742c2388949c62c811f51add27bb59e0092f144"},{type:0,amount:"263517383725",fee:"0",recipientId:"AVLiBtEcZGEyUzME7mkjwn9whygssd6iio",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210083285814a6b94481dfac21296003cc4f343d4d7c8bc7a7a0e5345d4aa48eac1902207915c6bedd8a3a10812da78de0368acae101cbe093685d18fdcddc98b76053d7",id:"af50dd79f9d422fcbd301e204ba6a1e27f7b52bad2ef1183ff20e434049c2ea3"},{type:0,amount:"264706758253",fee:"0",recipientId:"ANTb8pDUmSQHBQK47P3JSU5pTWYDnAuGGW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204175f6fc6e5b7e7b453dc121a8af4df6dfc4c55028d11c3ddf71b9d81f4e7e0402207723e4e6a7ca838f645fbab78af16c493d384a06e70b32909fc4cf915817d5e3",id:"0ed931759cb9de29db6d266868b504864389c2d1cf3a81f5d4a5efa54ae82a7a"},{type:0,amount:"266600000000",fee:"0",recipientId:"AYpgKvx4aBst2hD5gaRYv21FtiELyaehMa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210095cfda172969672c538a02e9befc1343f837d4fb1f3bb9570312f03e2dbfafd602202297f4fd1f28d1c63614a75d47c4cbf3f60ec5f77eadf12769d4de7a39290277",id:"2ad61362f35c9510c43e14c3968ae3ab8a1f0b1ebe69dbba2b0bdb094805d55a"},{type:0,amount:"266600000000",fee:"0",recipientId:"AFsy81B8AvNKkxpneNm4WaPXsXezYLRVwV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220632892e9de2b0f3e915e2af3a869e834b065a33d239888e4d9cc86068e9a8d9202201cf798edd4f1785b50425d3cf0e85b2cf41117479e4d0d354a00908ac809d711",id:"2e7d5d559b6bac5a49af20ad2e745daff3651fcd782d3a681e1935c2fec8793a"},{type:0,amount:"267156888910",fee:"0",recipientId:"AWxBnbH6FrttJsempdhhoNqzzdynnue2Kr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204ba5295df2c4e3d4b1c098c7ecdedc98ec316f115399ecca37ac08606010a4bc022057819841af1ce0f3c979c9b3ef0f6de3493e21b10040dab878cf753849c25b0a",id:"0caf79acb11be4d8712ca28485afcee25efc113aea6eee515d490a9235608e28"},{type:0,amount:"268215057163",fee:"0",recipientId:"AKU81Sra3nx1y9FcCJYxuuHQjZ81rjHavg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022020e417bdf510dbae5780ddc943a9b2fbdc1a79d2225a3e491a223f3e6a8fda2f022021b6e95132010bfd534af5d9404295e9ab497f6f00798ee15d7a6b5ef49257b1",id:"fc18ebde76c5d15ef00d628b4e987f77c4ec85d4fe24dfb56d7c3a20fd8abe27"},{type:0,amount:"269700000000",fee:"0",recipientId:"AXHDNRmJ36baawXLcS8ipDHgrunCeRN471",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220580727096e40273d96f9f2c52109eb4810c2cc10797bc59228f1abb8fb42af22022062043d9bef15d4e1239a42735bc3cccf08a15c6b1e51058d3c0ea590418e269e",id:"fe60d828232ea75e7df9a6008cb7b1b3ad2e5d8e72f638350f6f40420b36bec5"},{type:0,amount:"271217304301",fee:"0",recipientId:"AegyGSE9AKWNiYeiBPA7p7f5MDBbsQobNw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220587cb825e6b40631e4b8262b05b170e219c6a42c723ba1fed4f6cc6b472474120220784a7ff6e72b544cd8807dfdabb9f00f3782322bef851bba6995ff4b2b826710",id:"fb0dfdcec943df0624049563fc6c04fdbdfe413bbeef620e7a27ac06af71f0bf"},{type:0,amount:"273312359613",fee:"0",recipientId:"AdG4rV1nutJ2VmGfKDvH1usesnFgxdokd1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220367368621c5adcf56ee4cda123934cc5fc9ac54332b0bcaeaa0b413a0d65a71402201971cf564a643d39c915a8328da5d3cfa36901b373ad69b8a72a21345946948a",id:"5a71a47bab2f7cab9e01e4694cfbfb67b77c411d4488555101f187dc88ca3372"},{type:0,amount:"275823348504",fee:"0",recipientId:"AQHWx36dxxzBjq7t4HD7sCMtBMBSjCBceS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022020167d72b49f9c4b420066171449eedbd8313fcd5384f06881d19c1648c1b4d902205d0d2bbf805276426751a1a45daf52516d058a1776f43963c583cece69fe20c6",id:"a5b96fda073ea900e23c4c85cee5b79f0ebead350d4353d1697874abeb377ec4"},{type:0,amount:"275919189541",fee:"0",recipientId:"AdmQcPaXYhe7cJcD9C1Ghk6BKbfS9VqFQq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d577572afc4ed0362d6ec5c4a5c9b31abba6d2267c51a69c7d5f7349f8760b902203e73555f377d34d71c77786defe682711866f02f4be29787552bc25e1a277082",id:"99e450025bb676e306e237e05dde8a6f2d49913794ed927d9699c78a5e363409"},{type:0,amount:"279247094098",fee:"0",recipientId:"AT5ANRumUi7WBhCSVs35yfkbUg186x96fe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100967b5bfbba242e8efe50f90f6880afe77a1e065e471a7885060af61baed6736d02202dfc5b008abb3466e78cc24315b51af9058ed24e2f77eb6e57c80b3a85ce250e",id:"ca2358076d0c35255bc017cc7a85023f41551867e9ef28287ff6d5da2d50833e"},{type:0,amount:"280000000000",fee:"0",recipientId:"AQN9znPRTre9TCbGYmriMAc8Z2m8H8xrL1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022032247fec35acb98d299336331d44cd915e19b15857c36ed9f5bbe6dca7c2d9ea0220350197b5c1a25d9e0dad1d00d223596aff07e8a0da480661a19e27342a26dee3",id:"fa5d6719a86996e3661842604a1448e78e5b9d6a91e6c137a4ca6af765b9ca19"},{type:0,amount:"280803102800",fee:"0",recipientId:"ANfCguzStf32kWL6HueDisbWajTw8acRWs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022014dc24aa9c13fa450a824e24a25ffb06005807c86b04aad84c4fd502e257647f02206479aaebb822b9c1e0ebc8d28acb759c7e5b09a3eaaadd48409dcca0c7045c0c",id:"08fc563e818b09004b5ce2e4c7c5eed2890146f62deebcafec6d5a2e4ad7f0bd"},{type:0,amount:"280988036090",fee:"0",recipientId:"AQypxoNmusR1UsP1u69SFbjb3R9YH7mszw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d63d05d551bd6c9610dad7ecec2332de5675540eaa9c7989a00b4622d238ded3022071a021dbd0a3e69cf9cdc1ac0d949f803cb5137e08ddf476fe606a774f6f1127",id:"52cb8cbb5a802ca5d4f20438a0cf60ce155421404f9b8184952571a2382745c4"},{type:0,amount:"281336687456",fee:"0",recipientId:"AZx5ahPCDgGR7tdGeZUTv6oV4vfmKvPeJs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201f040daf2812c5bca3ca29ea83bf0d24212707eec898547a76d6f00a114d1c330220179b38aa34cde2de80c519e0ac5beb23be3e14389d5e12b530fcc8769779f9ea",id:"b3e6422692e6b305050f7dcc3d23c3ea9efead66f14327c7ed41f02e1471039f"},{type:0,amount:"289471840817",fee:"0",recipientId:"ALApc6GgN5sAA5MdRfws9MS3PxcP14Vk3i",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220284ba45d70676f0e34c9f8401d06c0d5807a6e84d021ebb52266730491ac5c0d022014d14816d1e86ca5568ea8c78e54def350ab3817f4fefe4404362042cdd12ef6",id:"899123718c97ccfc2af2a5bc4b50d97012d46c2d1403c60b51d54ae30e3e7da0"},{type:0,amount:"290500000000",fee:"0",recipientId:"AVd1HMGBkguKeBduZoN7JD25mVv91G3diR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220623a9ce997e94680b7fda4412921890ddb91de2dc833c76331026df41d4bc93f0220159e4f175d888472f3eb4318344b7fbde4140cac5b43dade415445a5c848c24e",id:"b2fd759ed4885ab57848dcb86ccc2026f47bae0cac4fe119183550435dc21d90"},{type:0,amount:"293042430719",fee:"0",recipientId:"ATdJXNdCCBdPaD9pTzZE1uHubNd4EixaoA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220333ccf40d7686d7ede92e901701f2e4fb65206b40bf1f71abc85815e6eecce1e02204c30a9f447bb751fa78c08ac0eea0dd9bf22950cef4a8ae85ae101970a963362",id:"69d303c8dbbec71c451201ea88e64455da3260bcf9eb866a784b13128ae3e6d6"},{type:0,amount:"294030114327",fee:"0",recipientId:"AaobgufVyjG5QYYUCHfdD62yqfKnheoiK7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207badea2403c148d9573e4b8551e91ff258250cc339647cfc7c09492c64d57602022058a84d0ca29a3e2a9d469bb5e31460c3fc55a968a296337dda894b1f324a3406",id:"e1fc93b662aa17857ec8282b16af5accb50862272ac7e804c9a599072e13a7b4"},{type:0,amount:"297800000000",fee:"0",recipientId:"AavHyFGe2JQE9ZwkWVHZeZF4otbj8q8aKp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210092332a9a11c56d75f25b407f22b3b910d469d888b30ddeb12ab843b37f5eccb2022008048a684ee0765e703fff4452d81e85eee5060c7730ce7959e66ca4c442414d",id:"e908984cbe697b713493d9e3f6a8e928932c5352d5f3eb262d7840cc04e8741e"},{type:0,amount:"301300000000",fee:"0",recipientId:"AMwtequWhiTWPMH7R4PUf6wzEUVoQf41sE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220284be66d3840c7c5a748d244c17b9255e2977142e43263139e36d89e1b204d9502206d9ebc18bd3f19ce852d2b4e8371baed5853cfe7a57d550fb89332f3cebed29d",id:"caa7b788cd2a9c62b6f83c5e549fdfecaafd76dc531f1f29689cf3490bcbdbc2"},{type:0,amount:"301947752203",fee:"0",recipientId:"ATFJPWAy75j6jXHzYPCG1JbWYMm6XvAdiK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b5fb6d53b4dd98f55f120f556a6bb569291942b574a0977ffb82009a8422d8cd02205203575ca53fc5636a40e6f931e429ff63e2bb55931177732a04a0ce0431d431",id:"6f0fd1a8e7236b0e2ea0353de6aace7a1a9e52b2268a2e21a7d70ba50df685b8"},{type:0,amount:"302851017757",fee:"0",recipientId:"AGrNFNUrFmtbDEtGmdmcXY4PmdcGt52xtD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207085b431cd0a8ef985dc12b3b01b7e45ad8b3c0aade162cc21054fda777114b202205df8eb5b1e36a571083b0c89af506f917d5bb80859852a0435fa7af5ecef1994",id:"640cabc266bc124bb7575b0d0d54826bb4298f6dcf86728552a7c85cfb9d5c42"},{type:0,amount:"304323259134",fee:"0",recipientId:"AcmxYd8QHTF89awqRBCtJFsC1aPvwfnLqx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c4a2d7ce45f32daeefaadb4b12d0f3022f207f68019a82d76fa41fae5f50461d022015bed2ebd307241f334322ac81eacac8b517a6b4942ee9dfa866ccc85cd3c4be",id:"88585b0976182c15633b99af07e08efd91f2e2ade96f6bcac9a87289b7b2f7bb"},{type:0,amount:"304700000000",fee:"0",recipientId:"AcjeSyWdbJbP7Y4xXZpPuGLuNtTL1EVmKx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022040412540fd1740a5bf25c9edee8e55b8697f4862b476d93c57b7397b5265c14e0220394c3e19b2a9ffff36ff404e4ac60a77b695cd3641bdb119a0fe2d9a74ca5b19",id:"09b69e99fa28ffce86e2333899a9053e7cb915d4a6eef962c9b19fce83c42229"},{type:0,amount:"308731620043",fee:"0",recipientId:"ATXdja19fpLfnjPbpuusYqtSs2xGK1yYy7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f16422eb334f756c50c1af8e4df9897a0341dd5b222fb7e24838978006d1b0b802206eb59fb05242d6208812e4601aeb2a0a64408ac03aa42ccfd6e4d2176cab3821",id:"71036c6537b211efc0da3ded963361c03c47b5002a0729cb8bd94c9171514900"},{type:0,amount:"309164632390",fee:"0",recipientId:"ARftmK1C8xzd6QJk4xNvvnLUHNNHr5oWD2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d9ae4512d715c87e98370acc74818cb15f4a3575eadbe764e15a6aa4beff9ec10220042de90d3d51992d850581e2f717c40d7e00d85a07d5418856b8b4d28a6da8ed",id:"aeff6d588a242455a1226b253a08412327b1936cb47d911cffc5b0e1d4e01876"},{type:0,amount:"313315057164",fee:"0",recipientId:"AVziGRo9W9A4ngqrkof2wpHyrDDeBDiKiN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022077e882d387450d847cc5ccf18042ef7c0c9a15b9f01ed523ab2dd90f3debec66022000b0525cdb09ce49c7ffb1588002e56e20f95798e2ed979e7f34cfb7c95aea6c",id:"c9fc04b7d64a5f6cc60fade0d91d344ecd925187f0e2b5591cb1e0748c293508"},{type:0,amount:"315100000000",fee:"0",recipientId:"ANPQroio7mrAH6hSrETf9nhoBvhz9UfrnY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022004011cfce82a2b867330e93ac537230402fae45ebd6c28029c20a9a179fd588e02203c1d4518c47a0f86f33d93ddd32f6f97d297c74ce4a3a22464695aa14e144311",id:"b50c52e231192da85a6249b53545fcc91f17e03db263ba9ba9830f6e2198a36b"},{type:0,amount:"323400000000",fee:"0",recipientId:"AbnhZAGRAWZQNfj3NSwWacXCcXsoDg1UDZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022043e245c68837fc34dbf6a6f1806a5ded6a173f97a935aed9fe532ec5df5a045402202f5a8bb2ae72c7995e2fcaf1acbb9615b2d0f3567b2bd9db01af6e02c33c1a96",id:"5475983134ca085d94e93c8ad7847d8ec2d124c0606e7f65dc7360582927e28b"},{type:0,amount:"333412838852",fee:"0",recipientId:"AHFC64BTXc4kKdmn2jw8Tb8487uxsbK65j",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f1d1ec1e2e7af629ab53f68441a83f4107ff97e7d21ae0db068cff630a2ad887022030152a4a06f8a0d390d7957995be0a5134f1fbf58693f4ccfb4815abefd9ba45",id:"178b974b999420ffc3f16c4b96a2886660174655e77f83e1277d1cc139c42445"},{type:0,amount:"334419127093",fee:"0",recipientId:"AbEtCb6JAawzHj3iDF1CnEBWpjdShoRes7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100934d8a30fa7fad31b7e59d5befa251d41a9b476f381394569b6c670388b88ea702201789741ebd7614767df9f43b73a8ebc1ff546e9747ffd22cb1c2f7060891622f",id:"5889c1d56044d500f6abd85ba7e02e2fd69dae5740a88a6321acbf5620f0ed6b"},{type:0,amount:"338228944448",fee:"0",recipientId:"ANm2X2bmWfVavS68Wf6zmisgvyKzmsYWEk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dad3e59166de998a91e9439ee044e318dd82040d8c20ab971d6ba12fe5057384022048f7c14d431001b88b2ce5abecba8fec190d38a1dad0886b1213c2bfe649b96f",id:"3255e17ccac83b9df7d9d34bd09ae2a6b6664423c632046b5ace6267e591fa0f"},{type:0,amount:"338641901001",fee:"0",recipientId:"AR9nWb2Y4rZzrsCTpHCDBsjeTB2cSqxgLr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100842b25c4dcaa3f85e3cffcb5412650e3d16f65600c6f76b3ffda4d3064649ce802204b6e0ff006c7045ec16bc1f2ddec0c778a192bf5f65203f1c9330dbd25e0317e",id:"11d040dd27672f77a6dd8088f2a40c0d095d714ff505582422eb9c280f65ca7f"},{type:0,amount:"339243683819",fee:"0",recipientId:"APkQyY3hE8TTfDdYFxVX9BXfAhKvgLMFFC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d5444e7ab774e40da05ae30917882abef70cd94d28114658515c122bd33b32c022022e8c524d76b82f9241dcb8d49759dcb8e11efdbb2bc8f41ad1340b0ace8ef3e",id:"05c45393976a5e5daa2ad7386d12587d3f8096e6e99875b8aad24b6b87fec4c2"},{type:0,amount:"340662911557",fee:"0",recipientId:"ATynVRNrhhRBWx9xLuwzqRMatJEebrNag5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ab90a2e21ac0cb5269f1e3f662e29d54fba5e57b867fbe8c716a2212c9c2fa06022032daff32ee5c0167d8f1716462077882e411473116cbd3a23289832ddc414a6d",id:"863339c27a73d2b35fb206638b23c1048f35854c4d8ef4e0d2c2c9f664a38be3"},{type:0,amount:"340892990675",fee:"0",recipientId:"AdDGwzuSnwbTgS5zCn9G2tjgbRSVwtwXgq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205c4da9c7896032a24fb33f087f28cbd4ee68a1af5f242ad4cc246ce189c57fc70220754cda9f04dddd1db8a420374a314b3398d2b20c8a13ca69490c9c48af950917",id:"6b0fd1ad749e8923efea2a678bd5fa503cad05c1290b85d87336a46641148a1d"},{type:0,amount:"341600000000",fee:"0",recipientId:"AZXZtF8s1rtY2x7qZ4fup9iXsGdwLgCy5o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022029cb43b5e7381c8692a5e474af506b4443735f56198d2c03d8bac38edbfc46de0220736670e57d73f4d8ee09c27ddf435b1ddbe206fde50b3cf2362115b11ea8da9f",id:"79bd2a6949472941f09c7872534dd18cc5cc7d55d8ce9276f0859cc872f1f56f"},{type:0,amount:"342836625893",fee:"0",recipientId:"AbSRLLJkexPZCWdhznU1YnBs6UmsvAsg8R",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220615218597c85309c9eb5db6cd1d0657998553494a8ceb6140102d9d6955bcd4f02205264ce22077d58684a39bec2dd60d2b90780ebcef424fa29720244d19907dc6b",id:"ebce164ccef6fb06922b26611a1d4c755ac5393812f1b6e6725f5a09eacf9607"},{type:0,amount:"348484491500",fee:"0",recipientId:"AVv22GuhDy6QAq5EbWmvqPpyNK327dDKpX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210091c2b8ace2dc7f2d4bbda72cb5d52cae4b6413f823dfb4722d7a6b78d93d07df022046b2f87bdc34fb337175fbaa95d17ecd967a2b3bf2e158759b50edc1be0ab51c",id:"74c1b29f70e726c862c8db61964d259aabdc5fc1e5ec4a14caae3338c474b092"},{type:0,amount:"349954995610",fee:"0",recipientId:"AZKSX4x6Wrun1sKFcm5tUMQTyEDKHSGvEt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204db55e406f565efc50329b609813b5361fa8829413c65dfbdb81eb62d45d4dc702206eef0b82a59c4ae156d53b5174d667b2239934b2f4ce6e3a433ffcf133dfac8d",id:"b4f3fff5b12a05df38f253328d0212e80e1b86f9f783d1845676a395fb46b72a"},{type:0,amount:"350000000000",fee:"0",recipientId:"AXUuekRSD7Z8aAqRz5oEra8tjAhn5Jvvrr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100875b2ed22d8bc7cef1683d8aa8b5f5bf4696859e2770afc120fc5fb9fcaea1c702202771caf3c8ca619fa15f339dfe2c1106d066804689421836b19d9a5d1fdb5cd9",id:"15a1e1313a9a1df3686417a2eed1cae978664b8413e79fea6b38925a286b4411"},{type:0,amount:"350000000000",fee:"0",recipientId:"AWnx5rbjMA3BNCXQ2JDXw9jjtdJtqG9gvU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220723a306d9e64fb999de916be02dd0a12c45a33da542fb93eb5be5a73a39c7df0022063a52580d99354654e80fcd43440c0df1dd932c939eb672308bfa4ea705ff901",id:"6a717fdc8c6b1052bc7f70a2a18ffa4bf14f78b8d252825c90424d920f13a24f"},{type:0,amount:"350918258935",fee:"0",recipientId:"AGUqJi6qb2E4F51wdxxdtomHGdTgDMYhkm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a2ed646787d44f8f362242ce96426f32fa938967c409f3d1f748b713aab0a2c9022019adfe63d28f5b634ef60f843021e42514baa766c465a45840d73bedc00001f5",id:"a4b4f4cb2902f4d9a0489fe35641c04bf8911b064d9cd29b80cb0a1274ed64d5"},{type:0,amount:"351177075272",fee:"0",recipientId:"AMQLH7k26GetQAX3q4shwWaDooL9cDcW9F",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e6ec5c6fcc7b88f4325f2e449d139e6889e8eea625463b9cb120b8921c26a902022049986b8ca2d95d0f3b461601b3411cc7e694271a2496ce84088899242a9212d4",id:"6f0898653b2de3e94b56625e6d6248bfe50f2e120b0a6425a311f6a47e7a3b26"},{type:0,amount:"352101061907",fee:"0",recipientId:"AKGkMr8fTn7d5Wcu3AAyjbVM338JWubiHm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207b22f8fc7e97f5669baeefa2e72d9d30dce95e4ece077da817c391460050de28022045ecc963840f840ebf144a32ca3f47827a3f8665ccca7653a718d273a29c6a52",id:"35b48f395bb80488b5b9542206cac08dc7bb6e1c4ac2f07fceeaa028a615b2df"},{type:0,amount:"353468821454",fee:"0",recipientId:"ALkHY1xQK74faXu6C3Pejk1xSuAFqCFdhz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022077fe72a93d8d27611229b8f74ec4dcdd4fce7c4c3379d44237814ed7e5b81bf00220679f8baa1992972284470f22d085907bcaf41b5cbdeaf9ae886be71187e38c0a",id:"ac919bd687999aa984250568b6c43e8cedd7d1a639aed32a816f8e1588cd901a"},{type:0,amount:"356573668788",fee:"0",recipientId:"AaEfJQu8y267hp5fQSyJtzR4iJSor7q5xH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f101ca42eae873277eae594351e634addb1ecd245c28fab5a3b6ad97add0800f02204a262f763608d06ae684f5147b1ccf82bc9538bd82937de72cd1d8593c9e9804",id:"51f08208e82c1ea12099b608bc6cb3fdec272ae383c10cc18cca09d3a6906ad9"},{type:0,amount:"357292915405",fee:"0",recipientId:"Ab7CQLYGsWUEwHRY86hEPRXaABtMRfj4vp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022048b11cb528691c8397aa0c8b01d4824ab9ab37b2ffbfd5c93ea7632be5414abf02205d868c12d097942225f488ae41bb9a0b83fb7e12fe163eabbec26a50a5751d17",id:"cbb6e663289d0af21a30738d8456ad4bf347fc60052eca55937598ddcd1f8127"},{type:0,amount:"357640325222",fee:"0",recipientId:"AQzZvHDiVUfrPTs3PhNi6xXaCmWwPJ9rW3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c6744c0afeb8b450b915b4131c6a5318073f20cc7828f31f05b5fe7a51d40413022075e0848a80f03df23205e31438c4f7fdb16aa36060e87838f5ea4098ae5e92c5",id:"aae37ca7a805749e82bc2ccb0f812c0c80c5731d4b0258a6a44b394985f4e213"},{type:0,amount:"359722188329",fee:"0",recipientId:"AH45YgpupuJgJaKfNqpxrbusmyxxzAsSiZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205685e59ae6d20fe9242cf689a3a6d7741215b7d473405716b61eaa15c4ae156f02201251a4a0cb27f4f5501c5b5feb891c730a795620d7092d7906b4d853e830ffaf",id:"bcf73615f4b48a7ea0a5570da0b75b6edbe053808301a5d3c0465da8a1c8a992"},{type:0,amount:"361053804649",fee:"0",recipientId:"ALGxVP1rkTWWUpEZyhTvzT8YJprKADx6jA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100850f4683c8641e83b64d7076b43922e70569769b224813ab0513c88e51470eb302200ba35068526155c1413020bf4c18f2b4b8cc32f5e16877a9e10aa32dae1907cd",id:"afd3ee65410f9d76132c8cecbc796bfd54a530327ba33af33dc0e9a07760c1fd"},{type:0,amount:"363315727061",fee:"0",recipientId:"AMQ8ezFU9gvYfyxxk7VETnXmK6kpt1Looc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201689314194023cd9e64eef30f0051279da6253ab7b487de47d5ce3b81487f2830220148ffa133c7bca9cf6d1d743105be8b3912af8426d7e0309b969c2e2d6334674",id:"a9bcd03694c114a041220271fd5f01274c7ae365a6b0f85d89b364a104a20e29"},{type:0,amount:"364303311651",fee:"0",recipientId:"Aeg4n5zYvShKUmhuXe7CmzvEJqFBTv3jVs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100899497a5fba8b821e22acd35d5027771d09baf69899acf626c47d63ee4ac74fe0220481eab02c6e999522954a7da743125b5162b56620a93d6132195675464f64c8d",id:"e7ac9b3742d019488f8d93c3418e19fa8bf556bc232ff0af88cc300e631329ca"},{type:0,amount:"364467189703",fee:"0",recipientId:"AUSKfmvgiPu3LSAfY6Kfyo4zR1VgL2twcL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022055af734911a3bfe58f44351b3ae7c15653ea3738911cb6d9872c62471eb3716d022032d62b6716655c8a6e9109fada3a82a3b4a20809ab6c0166ee79327529e92ac0",id:"635946b171c00b3f9c0983e4a43582187bd2a3016349a6760732e434bdfcd697"},{type:0,amount:"365586352150",fee:"0",recipientId:"ANV7tExbU5ZgSDJGYyDtDmfg3Z8SVZ6rvf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220493d2343b10c305a73614abd14c038561f4ae878c6d9957a171c0616f149187f022042548385875006c2cb45faaf5322f455b178d256075a007913ac11be84fd68b7",id:"ebba2ab5afa6f21355ca4f77d4b79e55d08b88c0b8b35afb69749ac61f0b031d"},{type:0,amount:"366287950968",fee:"0",recipientId:"AcM4tvSTkSHsvjLM2MtBEkMX53ErPpFEbo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f9c913da5d2500b202003576ef1c2f478ee3218ac7d90ec443b94b64e96012f0220537e1b8af0d427a41400ba6008a463d00006c5f722bbc6b65e1d83d524863ec4",id:"a6fa7609921c11ea4658cea3ee0626f1a87d0ae21324780ce17721ed0d21f539"},{type:0,amount:"369653766955",fee:"0",recipientId:"AMfKrnGPBwckMBZff3rR4wFGfeztHUXEXk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202e4e5c658ba2857c9b0d56b5babd7bcb848bece7b38820f4407827132032d59d0220713d1203f84e049caebf326b1eb3424b91643f407ee34494d1614ecc7b06c7dd",id:"ac8c772db29278a0bd50fa5e4b0a016fa8bb80b35b20bbb538ead6f53218cfff"},{type:0,amount:"373149442409",fee:"0",recipientId:"AVHXn563x7mzNDVN32MCf8Jngc7UKgGoY2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022009b8fc1be1c3fde84bf3099e79c2356bea23ae042a0f76bb1d07b34fd4e90b410220704e5c4ced7376c4c7135004c0f07ae545ea1b5a0e72355caf0aae0150c865af",id:"36ab40ef3b10937488dd8593e7726d4c965a5baa8b2839f06620cd6392c146aa"},{type:0,amount:"373746668966",fee:"0",recipientId:"AUc2gugBPs87YHajno9jVS2niPspZLydtb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d83d24ca3f90fbf5791169619436bc87c015f58140ea0c72a4c68df3996ea50c02201a061ded755126c92713e464bdcfd652cd4f7530aa1c5a56f1c56e366b388236",id:"f46f2c84bfb139e6bd22eaafd4b8c18a0547635dc798b91a3bc40567ddedb41a"},{type:0,amount:"373774406219",fee:"0",recipientId:"AasYFcLgSztcGK66vSat1rgHSpFSxbgMML",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dd07f53bb0e76df7d4dae83990242fb5db90a9c53c1d93855620b03eacf5d95902207957e7389be539c14ff9a17b9b0cd4418ebb14e80a74e3e56b555062e209e333",id:"19b48281b3104b5c29a0858d05fb08e8c324437fbeba15fdf68756842b3434e2"},{type:0,amount:"374988724940",fee:"0",recipientId:"AbNopZKDikntAR9jguVZBChPeVmrp363ey",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220238b5a7da45bc180902e8b2c49d8552306a721f6a7f7f435eea329e0fb6952af022028e04e87bb64fb457a3cde60771481e71aec7fc8c2522cb05918e6677242ef67",id:"3e5fa869674d84582bf5a2cd3a2d18a52af64b80c188ddc9b15d6dc4b129c67a"},{type:0,amount:"395360944311",fee:"0",recipientId:"Abk1pu25HhKdUVPwwkGqp1zqhYMTHEU2bR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008e3454257b6c3f1b6bcaf812b5f3551ecaf4cf7118fca5367d4cdd4155208650022038add348b1a48125de8a37d8724e497e140b69234cff0a3923e70fc305c8d58a",id:"e0aec5537bfbb10983ad3268b4059a8b08fecd76a16db4a871d76e3f9d82c6a8"},{type:0,amount:"396243735944",fee:"0",recipientId:"AFrHJuVb2HT4c4tWqYEvWgiY6CuymhkNFs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ef46b5c739f79696c0b0a9a8f735cec91a0dc546accc233ff32f7e5cbf38b40902200dfdc24247a4f60f3e791fba193d9e9d16d83131184028e248a50ea4cb2a7272",id:"f2205ba50118bfce10259a754db70528268ee9112d16da6e2bd7dac30d06418c"},{type:0,amount:"396752660012",fee:"0",recipientId:"AdWC72U5LSwghdenW8DKXWHYuULfUDrCP3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008a55e63ad2b9b3d0baa2b6a2f80606f38d02abaac071387077ccba86f315a80c022013c555cafa7277020701df0004f2b695e34253ed7cbcd6f2a9e0e66593390577",id:"61c5f683b3a21404863121a1833c43e94f7f97acfc4100198f24e8dce6e5fd7a"},{type:0,amount:"398860671270",fee:"0",recipientId:"AHV54m6LqZG8A1YdPKzvJdBfdoV48VzNmt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220281ea4f34930789c6890fcae28d56ae12d1877038a112355f45a8586a7f7108a02204b0ceb0a989c686b91d84d42cbb5c8de0657c2988d9acfda7911f6fb37a4d0d4",id:"8aa2f2aec071acb8418bea239baeabcf9e22a4ec3059777df5f2f379f0dde30d"},{type:0,amount:"399900000000",fee:"0",recipientId:"AMDpfwcmvCFW1jZYJz5Vk16pytx8zwqf4M",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202512aac371fad98ace991a2c0b3c736cb12b18da8206f5308dab02b71043c1df022031d2c0fee93eadf08de6f04abbd6795f15467d0d9264bd22c67bcaab93a40307",id:"9147058ff25475d0975386208f9d0d4cc8c60bbdf77737a09dde4bc168638db9"},{type:0,amount:"406030861383",fee:"0",recipientId:"Ad8LXbyPdTSYMHvcCZiQzaUtsd8VkLRdUk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201df9dcb7dfcd79218826fc4777d0216f5020377bf2c1ab94e3818f17a03a6ec3022052324948abd06924e123c5e5042f9b388bcfd0f127b962f4450b166207f6b4d8",id:"7dd69f0c7424458dc39d3500fda4e8b1e5faebb079d6917f908c88192e03602c"},{type:0,amount:"410054755558",fee:"0",recipientId:"AejLSizWdJowzJq3o2DZstQmyZNdqGGzJK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b53a8ca2840af4fafdfd607ba7a2673d1a3a70c4c3001cdfd03998e1d85049bb02206d11131b4410a8214be0bb9035664caa24e5ac6788ad7201442e151ca4e75b2e",id:"84fd6c750dbc8697bf563b042b5590d7d543e0f14b07cc3af1de3a89ceeca224"},{type:0,amount:"411430774232",fee:"0",recipientId:"AQwJBgy1TXokikH7XvqpyWtgAexhvnEX4e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022005de47c592104b12833c0de59912e4f98001ab5e263af9d085828237f378a73f022074efe6b3260b7fc941691a426dd73e567eae101b680e360652e9c1539dc26c1e",id:"4594cf80dd9c58f780619f1c5b07ded414855e984bfe92f9c8b5e253703eeac4"},{type:0,amount:"414435446144",fee:"0",recipientId:"ALcuF8EWQZo6wHdhEab3SPG6NNnUhxmtrS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be8dacfc1c3bf51ff37c4db4df096642aee830e9c54b03da3a2cb1093150099a02206694dc3b9cfb53ef9c9af478bb5663979bcf740cedd5c36dc892ae50ac2b5c38",id:"3683470aee128d9e3198d1367815a49543180de9e5b6a354c6cace53386b998f"},{type:0,amount:"414495122050",fee:"0",recipientId:"ASCzbyDxfQipaZCjC6VR5hbGG9YYgsaAwd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b9aef4b9f36b7c0fefd1a5fef061047e327f54935080c118cbf913f607e42d1c02206edd5cbb8feae8309a3ea4e53ce4a86f9d91a084d453cfb51dcbff13522ce002",id:"198ee58a22c79eb720667aa9d17e249be4e2eb3114c7206ab0a73b7c9127ccfb"},{type:0,amount:"421404948418",fee:"0",recipientId:"AcZ8qLedqB3pqDv59QMLD5zLCMLEPsZiyA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203294398344f0e3863dcb9709bf6bf915ff4c678a681edf48f03ed605ef990aeb0220247299f0e0a0abf1595d9801220e2be6ae9baffd4611aa62683697dbfb051f92",id:"83fbac69f11ce4a4d5993f8b7c60a4d1da9738f85e0d2e6905d49f41f62f22ab"},{type:0,amount:"422404168409",fee:"0",recipientId:"ALEAsaG5tcombmn4ewk6CtCZcT8jxS5LfA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022044a875f285cb908df1025a9246529b88c88320c3d2c5b212721a67afba69304e022035b80eec3f0b523df1d8b235f9c9ad05c569e33f6ed4b7d72127ac88a8e04a51",id:"f01d3a9212807fcad775b20db523002d72db87387a2c0c0e6d6e43a96f76e10c"},{type:0,amount:"425000000000",fee:"0",recipientId:"AaFVVK4bHWAULm3enE5jFuW8w1tGDVAtPP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e4c2fc79977dd2c8202b0b9b710c1d345266b58a583911b8d7dab80cf6a9efa8022043b02b4273d62a6bfb357060314f977c8688fa2c9fd9655f1225d76e5f210598",id:"a9d807156e0201c2e6b62cbcd86df7e744c113443547394481215613463aa517"},{type:0,amount:"428842921747",fee:"0",recipientId:"ARTND7EwNVQyRRcHmxRMXD4vDxMsuvWHe2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206d2758d81dfb99fe616979b5241ddc7054c2ba0661db8534b27f5a15a6e42f52022075af3ca1a436a580397f182ffe8dc07734eb4b2a67bda747135546f8fd3462f1",id:"30cc3a106ccd48d7a88c1f6d948d5701670c7541ea85d7472bc0a8e66899a9a6"},{type:0,amount:"429330120346",fee:"0",recipientId:"AUnowRvHGnZnpPYWQhjnP5GRh8waH9oaoW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220396919ca6596b28199114e6bed458f8b3fcd53d1bc01b9c55a3e8c393f2694480220072f26bdc63d2ca9bd7c3c4a4ad1e246676055338077894de505da12f2b81a8d",id:"b673418ffcaa8a343b85cc02856e8d1aa2167c9e80228b738ac3d9487a56adf1"},{type:0,amount:"429900000000",fee:"0",recipientId:"AVtEhnUNTLMG1ABGW8MxoprpQpcnjVMMs5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a4775a3edb88c12d3117057cb71c556f460bada4d578d14d52f6f16f52dbe1e502206f0793cf3cba1bbfb17195e79343b6652414cd85a1ad47a6e76819f58a41e794",id:"91d608f9137abb9d4f30446786eca2f74cd9173b0cf9e47f3a917b400bea2d78"},{type:0,amount:"430758143690",fee:"0",recipientId:"AcsmQm5EH94A8bmxVhBX5azqRZ5HxSFurH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ffcdd344a83d815b35399377593e907593848c590e4f6b690f90c8d87970f7d20220098ae996ee30c244bfbe04fea6f0940488dace06119d2af396b7d08dd925a328",id:"9693698248b30da4d32f3bb74a94185545a22511a32789b6e7c6a62c22300d15"},{type:0,amount:"431169218840",fee:"0",recipientId:"AaNpyjWJC1SzuYNtPd5eJrfdNGD6syTzLe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a19b4cae750b166dc50c3e22bd12dfc5f490b58cd13c139412b61dc7acc7149502200418a034b9a2b6fa26b12276e5bba9f79a15ddf3307b51ac1d3b35316087a080",id:"074cbdd2b8b306c0883d1e6d0a468376c98f00274da7467af05095edb852a044"},{type:0,amount:"433300000000",fee:"0",recipientId:"AS31C6KTNhEc6P3pHgpZYg6L6xduuqvSXW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200369f8d253aed3996199457e932c7f1b95d12cfbac50abf255e04a331eb6b30302200c9643963f4b856e9ddb9572797944164f4a2991e2073ddd0a9c0853da0b969a",id:"bed6b1d63572f48b674a38739a4f33608fffd9267989b21144f3fa1de1f6d39f"},{type:0,amount:"434358663505",fee:"0",recipientId:"AMKqjbsJKvsiRyzBwc3htV5V2sqrwkXpzK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022026566e29b8b649d199aa887ab842f5b815df66865cc04f5e1d3a26378c3a39450220284f908cca59b861fcb512612c0e66a0ddd855d4472d0fe6a96d113963dd0ed5",id:"73c577979ee440ffcda796ac338ecc04d7a462b69c17336ddcbf05dafeff9e9d"},{type:0,amount:"441082175858",fee:"0",recipientId:"AJCDjQNpuuEN2byRdGY9xf2qRBCeASsCv9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203e7de0ac5c2dca5bb3b367f2006e33648f0b99fe5321af1cf06923f5638376e702207b223a41226368a7fbf51a26ede9ce708c86dadf563446aadc82eee78a142f29",id:"295bc81dc9d3e434b8b4cd76bf32878432742128e94b10f133b6f8596e4ae65e"},{type:0,amount:"442296547242",fee:"0",recipientId:"AeeJpSnh6sHMH9QFnaS8iNQUxHX5kxZwa1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205a6753a13b5dba6748e93d9ff8c9e0b243916edebc82d50f26dfa4023c5a1c97022015cff0083bd455c998ba99ad3836fe8f569dea1b16e46f3cb0a1789a9015abc1",id:"db2bd8f694e5d5d7193469bc9af661d54ccdc1bf5f8dd1672648edabcec5585a"},{type:0,amount:"444900000000",fee:"0",recipientId:"AYBuKPH9GghfWpVeoXmHheJ3hFEHHsPLL6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022076e35e14f992269d3388839ceb60bf32ec1b02a0ef6e63ddab97fce76cebe95702203cc902cf0c383317ee84a5b6fe7ad1a5d0e507d3dfb9a5e1cb6b72bed9c2e013",id:"05b8f0519ee71468c7b25ee5d7e80360de95b6e2076886f3c1407f0b1b2c9f35"},{type:0,amount:"454296574143",fee:"0",recipientId:"ANdCnCPbZcMmb5DcuxKiC4Cun8XfNpk9LH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e4072324402b907461e4bcfcf4b064dad72e9099acd171f27d208a9a018c2c4d022011b20091c75c4dc05d32e8c40b202c910a32a6fd18da1b531ddb4f5dc677a0f5",id:"9c35f16fe5a213937cb9d260efb89e114bc59310f3843280f6f858626257cbe0"},{type:0,amount:"454410176686",fee:"0",recipientId:"ASDxEzhr4QLiKvE8gx8NyBNpNJBiY93bBN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be0f72e16ac306667849e550bfa53a55f77446ba1b3e85190a28c789d80e2dda022021706b1b73b64cd7d98e85c79e9787cae57efdaddf31c60e9d13c6530432d09a",id:"68038c71701292ed7e30371c8f58c74de6926a9eecd9833f205e85817b4880c7"},{type:0,amount:"458329154329",fee:"0",recipientId:"Af4KkTdudJhshRqyQknHmieMTzgN1baKGk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200d98f84a03352a7404824fbf2565597e3407f554602a05db8c9e94842121de5a02201500a98f7224e8e716c2719d8981995c6a9cb0c38b456842b8b219c6034819b4",id:"13437129b6e18a12d3acdb01c9e113c21bdd85e2058aa56a460af7f3c8423501"},{type:0,amount:"461698156433",fee:"0",recipientId:"AJJ7HZHTZGmkLjGLBiWJ2ni47EVVmsPAcW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eb4bc75f85eb983bd0b2a1d73ebbaf29c0163ba020b3fb85781ce3c1a97d6a49022071bb413f07e6c7b13f6f8c82dc9d023da2ef6f262883aadbaae6def1dbe5cc1d",id:"2e52fe4e3801a2a567ab73693da5448d5f0bfde55a2f0d6f4052075820ecae65"},{type:0,amount:"462363719366",fee:"0",recipientId:"AVsMnuEh8yCdQjAtc81NZzRsxJJDVjf9Ka",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ffd9156e78730c609974cc6a31a597d827cde890c7e5de46bc54cb10d7b1d51d02200303b539a531b513eb059a15ed6a5b08f9299e634348e3228ba323cee42d16bb",id:"5ce506c37e536cf8d7da0c3d2208bf27e461c5b261b9eae156808812fa14a6ee"},{type:0,amount:"462789386912",fee:"0",recipientId:"AVmGqru9A4Zpn3kd7goY1kJ3h37nAaxkN1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022039e8e2eff6ee9b7df8d20d070143f244f3a29b4c673932576e2d1d514d31d7af02202a79c76be0c59c0d27af4a7c5e45da0ac00944eaee1eb9aaffb3768eb3986095",id:"a3875b9ae99d76e48778e0b37392498715806214a2cfca46307c828e0d160ba5"},{type:0,amount:"464492402483",fee:"0",recipientId:"Acb9QU2CSwSXNcbZARBwyqBSSsQRubqjHq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202e6eaaf793a04b8fd064315af7d6cc5b911f86faf21346fa2a6e013bdb2191d3022038a043a4914bc834a47c6c903cddf4dba4eef84885201b9c4a637cfdd9552f55",id:"7f81ee0bb3fe048921ccb934a4476c15a339019cd8bd3de40685062281d9373b"},{type:0,amount:"466008654301",fee:"0",recipientId:"AQ2bpZffieDKR6TFatkS3vZwDLyvDpA6Jk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220516e15a8cd6382b7e0b93ee04ce1ceff0621dbb17ec2f79158a1dfce7d3829e902201383e9cbe11f387f87cd8e1701a0d974c61ea92f75090620065125f1b283ceaa",id:"838d54e1f7681e910380bc08a02aefa3bd47d347c10c9f17030cc1bbdbc9067a"},{type:0,amount:"468845108203",fee:"0",recipientId:"AbBz7xmNnHkkdww8fBK7x4EcEi26V5sqr6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009364c19fed0bfc1c4566e19fe01e83bace4233e7f7bbb25ab08971ef5c2e00500220118bc321de72db6de795781e1ccfe1c587b89362be1a8f9ff43d9ec1e2411633",id:"de57689682daa61b89193fc451040ae47b6335ef07f363e86bb37ff0b28f75d1"},{type:0,amount:"477386564720",fee:"0",recipientId:"AT3dyR6SqoMafVWKsMvL9h3iBvsU2Q7S63",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b8e109b247b4d83739b36d32ad9e54f11979bbb54ec0629da72f65274e468d7302203b1370fce9d9e950120e102ebce751b2381d2319353e5c0313c6c84e5f24fff6",id:"8ec9dac6224398952f9c801261fa4a901ec3e823bc47301201c8e1d377b77bd1"},{type:0,amount:"477386564720",fee:"0",recipientId:"Aeb22zZXfmhNvEjUH6H3ZT64fJCEqR62iJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009fea8a4720368c5228f554d16026c0286bc036d49f5de51abfa2689d27e54346022061f2f0b0165159567388103419fce40a4b296079369bff483df251fcb9427764",id:"a47039058f275732366634483cc82c01a7ceddcfb6fe448f4e60eab614ae0e64"},{type:0,amount:"477600000000",fee:"0",recipientId:"AWhmJrkMyrJsdGjVaz2LoqAboibJFdpeKg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202f3417cab05063c88942c5011311b5d19f7c05bbffc67e6ae090388803a8639502200a05fb48af403296455264ca2a3a3f6d4b1cc89706877be3335fc5c490c88692",id:"b6c19da13c34a12fb2a06d6a081b172074f07641024f3021b2105864e31faa49"},{type:0,amount:"486438883282",fee:"0",recipientId:"ANVReFpTPz83WVcVZocHwuNwJLuGW8Hg5n",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc6894303b0552ad18f66494029308976efe651de9f707a0187059e33106431302203f70460a4113ba5b089efc2d85e885832a349a9860bd05563c55f5d5923bbca5",id:"2644a2b4e0c87b2b0fb23f8da21f0c085ea8aae031436e846d45d77699ad1c28"},{type:0,amount:"486986935045",fee:"0",recipientId:"APoqq5cehPy8xdqgY5nPMFtupDK8HcCWFD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e1ac0a3e424f949cdafbabed541a5fe658eacf781e059b22460f1ccceeac7554022050119d98a70c087621994890f55d3d8a79e889b02cc186f8be1ef04ca4ede1fc",id:"0bb8b3edd973b8b51a57550b49252f708528319de548f0b89a77aaf8f567a685"},{type:0,amount:"499452432600",fee:"0",recipientId:"AaVHPBJGnHGAyDsXqcXMkgnTXrP2VA8zXd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202040b29b5ae655905a4be13aa5160fcc682c0c3df0768ef4c15142e0b6d79f45022070a5b44807bfe60f84455ad05957fdee06cf677a99279b25c33eab56b33bba80",id:"a8a4acb7cd42fb523baa102fa6dfe72371a2686c99d18e8f26d83cd65ce69e62"},{type:0,amount:"506413677424",fee:"0",recipientId:"AViKTbBER3QdyjPYvu6aEikJG6jyMZeBMH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220575b7844c2c7dfe981396bdba8d577ed88738a16e4307c522077255c5db8225502206ff9da12d3b9a67eebfb1234918c19e92b1d94f75983c5ffc8b5598d0992a40d",id:"a424e155f169f58f922458c89352fc80a71a214a9b7f5d7edf53b833b7e9bb3c"},{type:0,amount:"507369287698",fee:"0",recipientId:"AN4SVH6wMd1J2UinEszD1m6rNd2Qf67s6p",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202fc2e97188ea29acbbb5cb669a91834399df4e95258f843e5f508b2ae92bdbaa02201503b9313688be4f868f27960bd4ec9d3e26b49d09455e7261f811a8f4bb9f64",id:"362dce6072bbf7ddabf9cefee0b27fb43eae636f5d4a0d2f777319764ae643b9"},{type:0,amount:"509141981427",fee:"0",recipientId:"Abjr6LJqKumLBkGwWdCmqQU6ySWNTvYs83",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210088070a6fcbbe069be1a6a7b9de2ac4baf72f01078d69e8b3203bc85bc87e68e802200993087e55d13928a55f3a543cb91e780fe082d1a571da71ad6e4edd4ae63af3",id:"980d85c7519a5bf12e66c830e13372ce93d7918dea83f61bf88aaf57e5d44e6f"},{type:0,amount:"515274387317",fee:"0",recipientId:"AKsTx2HPyBzhbNiEuUTjaBefkXsbWBmAzj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206799aa5ca25023037fc2046c9976c29eee3253c6110d6d68da3b38a011f85ae20220498f5755684e9f2525f2080ebbec2c1306b18dbcbb1ef40d9006f17b3e12c30b",id:"0b85faa2155edb7516010b7b78fab8170527f6f51a144eda464f9bf148a2997f"},{type:0,amount:"516873898330",fee:"0",recipientId:"AWP1xqsXMMgBDfRpvJZum4fywFLtRvT5Uz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205a98023efaa4e52f9936bfc80e4f8d4230a2c907a7723a7766a7ec0eed9992fc02202266a5cb028f371ab13c03ac11ec40a711c0473834a595da18591c2293622f15",id:"bbf1e033954f8086c4ba041a94635ae3ed8e0a34fdb0ecb699aa1a62edf9dac7"},{type:0,amount:"522000000000",fee:"0",recipientId:"AZydcTLh6qTuJzSkt2i7j7neaaMxN57bqL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049014a7b3c815b9989d7c4da1275d9381d5ea1bf94fa0197e2f1cce3093f9001022018b6744495c6da6cec8820e4d28edac409e2f4a9383ea42f918a792c89fda18d",id:"253a6707bd401ebd1b7d1465bf5857db4aba9e8ad438b8d97d121a7bf3a6e7c5"},{type:0,amount:"522851951837",fee:"0",recipientId:"AZ1BHFwiQLgXfnbiW8poyzX44z9fg6R7Pu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e6ea691fcf6ceb3735eeca8e83cd6be8664b9c42bd31aa0317fda910b154e65002206556f64d1821aec7395eadb7d2aae1a5a95e7a063b62ca6dcb6176d3ae8190df",id:"a01d46e24b46904aa9a2163d3950c53af19460ac839238d03c7304ac83b33820"},{type:0,amount:"526711619581",fee:"0",recipientId:"AUsWkvkAVgvaFhj9VTX4U96FyGFh5KbdZU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f4e1b32ed7f1c7831444c0b2452e8d329dc9a0a439da676a5a56d0ef2b8c266902201bf1c1a13f4ecd6289b91e866e73b727ce735baa4128f0825acbd976e147ea32",id:"c22131de3dff92e746993d7a01636fa1ca2dd20e01d4db0708271aae6a63bb49"},{type:0,amount:"528376108643",fee:"0",recipientId:"AUuTNzGAj9F1aNpcKDJfuDzHYj2ndYLihD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ffbe2910b4d88d818dbc798913af9ddc106e423242640cc712e0d55c1a4a1d602206262f13fc3fd933e9f92f1455ebe280d33727501dfca60f8dc1bf85bfeb51ce0",id:"b487b250cc3f98368b60ec6c5fabd510e1a8483cc03bcd74d4931ef792080712"},{type:0,amount:"531321344927",fee:"0",recipientId:"ARtGz4V9e3wzW3iRtpYo4DbREDAvCwAg2k",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203776cd4346a82b61c46c2ae9fe7e7b5e412b84727183646992b4764249881c59022025e092b1d5180fb4cf23717ba0de4444e52067414da0bf474752763cdbefb8c2",id:"fe48867e9156b1ada766c579bce19e3d01f92164d9c265902b7a6c20159d520e"},{type:0,amount:"536606958259",fee:"0",recipientId:"AWFff1CkyqJWtugHuYYE8WWzBP8w9qwuhL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220024c4fee1e8ac337e575ed098a4ecfe070ada692085295894459b7b7a3b86c37022034f2e22c2438ebf949955ee0e865b528a781da86b942321eb3725178a2f8173c",id:"f1fcd6c5c6b3c83d0bd5accfcb929061d8804a863015cb094100ed09c90b0076"},{type:0,amount:"538220305472",fee:"0",recipientId:"AMF2nM6FEMBBfv7qWc9tW1TWv93dxWbXjn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220315cf7c033bfeda43ab267511e88fbe392380aede5ab0087e7295bc4b20b0abd02202524f858f7d42cc1c5fa6866221d7463abc1b94d0185067ff0b3dd57a182984e",id:"8e26b02745f1f5ced11fa24895b0bd773a2db5370126c1e92235f1b123570548"},{type:0,amount:"539888138573",fee:"0",recipientId:"AUoii6QU9zwWhRJzLZMF71E6dffv7c9f1P",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022045f6e18076dffb721463d1e34eaf47a3bdd0d1d0e87d19d9e0a2ece49c9ad71f02206a0b723c4937c7861579b098763ddb8c533a7308dced9baf55d943b17e8b6237",id:"b56baa4d48dda93fd85fcfed035b4ee474f64469e28eede0b2369b4ffe17a542"},{type:0,amount:"540008433875",fee:"0",recipientId:"AKpuB5YvWrEzgxGqs9RSGr9oT9WQLCyxaF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022066b1533fde6b296e7cc40d4764676bed7e9e088489e2482d9d7151f845f1c7c3022041502f6705fed4575514296bb157a9c5ad601758992acb22be436badfbb66f21",id:"85882091ee2b032360bfc72a9502434cda2fb938f5362225d68c4f77c3a47600"},{type:0,amount:"540816219226",fee:"0",recipientId:"AGGeFX427aMiLYXk3n6u1c4hup1X2STgdV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220276e0d0e57371d2e5d6d9dcdcc8f9f1267bc27f640e95eb88b8024716e019743022034bd26c909f2653ca8af6298aca77609e8eb367e16f4b4507ad280beeae51699",id:"d966f146fa457ac9906b6b928bff9807416e8506483774c8948c0398c0481435"},{type:0,amount:"552260891955",fee:"0",recipientId:"AQrYk1AbtQ2brZ3dvsbHh8rdErYGJb68pi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a1ad97eeb99f64d9eae5da29ec69a174058788941b7d7d43348e0e84a8d04cc902202520b1fc1ffc869ab83da821886b904d1e94193dd33210b5fa6cf38a1c9ea9bd",id:"ccf83a1e1d918e27052860875f0abf5e55dc14f6933c432eab13264919a60d6a"},{type:0,amount:"553060575959",fee:"0",recipientId:"ARMwrHG3miRYdVZsGYmeXKQULB6GwMyyad",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200110ca9f26cf5a36a36e2b035b932b98df256209b95465a57eaaf8c2b19c05b6022062f55565484251018cd6e30fe19ae6387d5bff36836dc7b09fcfb5c350efa4c4",id:"f8aecfe8e66cf62d917c2c231855f9d4a7a479e918464658a98d4cf5dc03edc7"},{type:0,amount:"559276526635",fee:"0",recipientId:"AUbZ5CjroZETpDU9rmQtJdVU1ZSBHhxWNk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200c8f7e1cf87873f2035f917f692cb58ffb2e8a5ecd68a13f25e8ad08b3309eb002201b7d7b59ee7e63221343a44e4a04642118e38acd08ca658ec01bf620040f7ec9",id:"d94bfd69197aa074ae9ede3c8abf9fe3a67b49bf498d3c620c364197be028b16"},{type:0,amount:"564299912400",fee:"0",recipientId:"AcMseyJzDq5Rsh2RYqJsGXYncjQinXDtvX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a5edcdabd03e64a2e29f5bbf6427db67691f39b54ac517fe46fcf26b3515db9a022074d62771c4396e6252d56581e6413ed4b24891272bc7c8fb2a3ae01d2b7d6161",id:"a2f8f856798ed3ea34daac7d04f99409ceb4b58e897f8a4a8f05e1706926c64c"},{type:0,amount:"566286551662",fee:"0",recipientId:"AQFkoubX26ch8tFBy7dm9yG98LLqV7cMCo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206e638a8e03710eb44c0d7e8ac09b1b38366156bc8c46e1a0ee2f88424b86c5b40220247f979fe46dce7faff11bff26d3fd1bcd510747dc857b9cce2c354fc8d31043",id:"392e37377917bbe974e3c8ce837d0ecf52f41f1bbb7ec2e0056d0b09fd44620a"},{type:0,amount:"567899118315",fee:"0",recipientId:"AYMj9jGadgkv3uWMpRr9f8P9poV9HPqr8c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100937f17e1cd7f010b860f1f87e21802ee7c72e826564e9eea6b942b862e56f0ef02201673df293e24e84c2528bc70bca4ebfa5f73102beb49bbf999ec169527e2a3e7",id:"efb581f15c255041206ec351d3ee4f0b20792e6f99b29da27f9f588d1a5fb34a"},{type:0,amount:"567899118315",fee:"0",recipientId:"AGpjXT2iG15ACjpwGGnZuZ1rcEB8WuwLGn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b12dd8dfdfad12e59a4bd1b13e589a882674f1d9ddfd7f91286e10def66a8e9e022054bd93d1ea02976eb99f7d2b12c3df7b4d10db3cd77bc02810332c24a2e26227",id:"4aa30ef712b9518114abbcfbcbc962414af90b4618d22288fcc6c9b8cedf4453"},{type:0,amount:"568012720859",fee:"0",recipientId:"AGM85ysEstriQdnff6hLY96CNegLmfsTNx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009b5a8d8225cc5c573f92f1f007c19ee1a702093e08dde891385ed3c19f00258902205e1088df5448c3a8aed0cc80a51b16db6759b80cdcfc318ad0cf70bb1eb19ca3",id:"32da511a73a5b2077d70a3299332790197c37351f0f6a10178cf1f777126e6f2"},{type:0,amount:"568126323403",fee:"0",recipientId:"AWkSJ6mwXFC75PCU2Jq35ddXHyDAWETy8d",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bcb4517f522f1c416d6ff3a5112dd22b15de6ac76fa7288c3e53859265b71208022046f9365a91793e947578c86fc7ff612c6f34d468dd6ea61f35b7b4467ca7f87e",id:"6de463003b0a10c7372a8ba2490533ae3a485d916b93986d2049980bf3771e8d"},{type:0,amount:"572950085963",fee:"0",recipientId:"AXQXmHt4c1EcpxFAqkC9Cy7J1ui7FJaTUe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210081b78d77da50f2b94713bb862662883a4e0dbe744ff6d41e14c5448dec5f99ef02203d4ec23476ed4adebfde4e7043cb0fdf6f7a07800d0bc350c4509baa698eb45a",id:"2521232eaf12c8a956b5b0177a86b430e4557aa782be3719e3220a6ae1ef77fc"},{type:0,amount:"584622281689",fee:"0",recipientId:"AXVz1XQf4pdPdXgyyU4VCFjsRRV3i9VrbW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220296a2e02be62e0a620e5b5b166757a449fe5c45829a0d41efad153710f94d065022075f637f41da115284df9e0a3782e73db04e044935a60a90715555949add9a470",id:"1f4180750e1f7c3f5c48fcb94104ab167e677eac601f7414f675c984e8dced44"},{type:0,amount:"585926998753",fee:"0",recipientId:"AeWy7BY7i384uzceaAbtxT7k7N1RkQeVK1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220296d7c9a6a71dc7d9803a3c95c67f69fc0aef05e2309dc3038611d28a712f8d5022050fdf931fddfbdfff9a36c4a554a7198c3ac011d462580f103b419b6f9a996db",id:"f8ac8625237e4d9d263547e716bbc276f536c7dc5612a9b102195f76744e0d78"},{type:0,amount:"587913213597",fee:"0",recipientId:"AKEyZbWJ6qKChGPXrq41cHZk4Jz8xHTqh8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100993c7c4f1c17412bc3f44f64181821c60a5532272d1f0436aaabda139274900f022010e72f7d9343ead3cc02fba0e111674f31c2cf573994415adeab4d664acbdcbb",id:"8691098d97c62a3d45c08b8193b7cdd5416518973eb699d713bd826f5b978fea"},{type:0,amount:"589063195094",fee:"0",recipientId:"AeZ5u74dBxufywKh6eKBafLKBnWBX7F39G",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203f7a428270130c3cb5cc77cf307f8f87e3e99da03bd9c673805de883aff6b4f7022062a643143c9be2a68a3c49ba308a96d89920130f4e28bc688a687b05e5554ceb",id:"7ef826360e319242f436e15599caff7ab705747e617cbb8a2e0865b3821afe7c"},{type:0,amount:"592519033621",fee:"0",recipientId:"AJQkUYcMuHxLho6Ag8yLiZjTcjhMXZ9aHB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c2f173878f73f99e2a044fcca1fe6d6e5f116c30a8153f0ede31f3c1963b19500220081480f6aba6fe8568d84a6ecb26c70a8b6e418c60aad5386148455d9d361b0c",id:"af49856b1c3f6a712330fced86bbb90b577150af1568b8fc64b024eee487daa4"},{type:0,amount:"597999101241",fee:"0",recipientId:"AGoFy5eoJDS7wWbNpAwyDQbwGcWHF4iAe6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e0a578e2efa657e551cb1ec1fc7330b08ec8aefcbf4458f720d7ece9b04b655a0220065c046cf75908b41f1d540e33450ecc4506f838818d97240d3c256562bf1daa",id:"50a23397ce1b9f9af4bdae64c7658e7a98125d17e803340d310535c11aef57b1"},{type:0,amount:"601400000000",fee:"0",recipientId:"AYqXPht63UU1HKGMYSTgmgPoZj33zKWAGV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201d214d26ae57304653dbf4deff3a2f4c2b5c0faa6451821a4aaf0851a66f77070220563a930f4833d36732cc2845a318e4d59cf77c2c7808eab9fa80440b6649c3c7",id:"545a75b3f45b8d3ceb447f8a573ad527853ea7cbfcce54c2ded8e8add84b1574"},{type:0,amount:"603323064588",fee:"0",recipientId:"APue7kzQNznGLbD361AwVKyfeqk66Gp8pb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202105a9341411c738f541af56b48370e5c670710f26375dc77c968e3a3d0306ab02204218af14c3f11038101be19628a0d34d7be466f0dbfc41518440498e23742b57",id:"ca525d14c00825ad6f0b1f41b8832ab154464f55adbefcdfcaa9158f195633cd"},{type:0,amount:"604220262324",fee:"0",recipientId:"AamyoMmKy6vucKTsu13jYFnP4GeBy1RMum",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022032a24879fdefdebcb46b671a4dadf43e6f84af8b4d58646044a13d2dffc19720022052301e1eedcbb6116cc327c27ecf021e0e69345fc8b64d8864de1799356cb052",id:"5fc2c74fe023282f5b142ede55e47f0b218daed782c307d3f516b1707afd89ea"},{type:0,amount:"636515419627",fee:"0",recipientId:"ALPyErixj2dXaoQf2aFKR5qRWrpQNSpVzW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210088327da183772be9161d481fc69fdfeee11f629481d8b564146f45709347775e02207bdac01a99707e5fd59cfdaaaf9aff15b0171bc5c4fd2a8a97695c5adae6e49f",id:"783b96a592c50b102e9e73a1d69279352e842cdd8dc7b967b2728f6f15031ac1"},{type:0,amount:"639468721143",fee:"0",recipientId:"AWTTo6v3d5AwpVu7Z4zMTdzGt7nStpphgS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022046efb627b31d7f8834c4cb53547c86b346cc0a0c52b00d8bed26910909cb759e02206c6e2c5b6d5fdbe74e6a05006fcc9f2c1c0b2e3a488dc8f9baae9c1e4f9f2538",id:"b5be81aec8875f631918ea7e3471074c1ead97de2eb760b6367d43360f3d7917"},{type:0,amount:"649700000000",fee:"0",recipientId:"ARRLBH2goVLrow9EgBstBpS13mjmKzYwNA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210091648b7427049df79b49484ca0a5881a3b870354a1e74c38e56b83849d49fa43022010008dc0dac24a564eb2d82d51353602ff7d7cc0b01be101aba4e6bd8a3d5bb1",id:"f7d43309c24a58b257df1477766aafee1d1f4a41d4ee45a38fb874fa62517e29"},{type:0,amount:"650982673120",fee:"0",recipientId:"AeUoiRMhcgcw1BozjW2yesuRNsCaq4WzAt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e7623c82f69ca00ef2b0f988cdf38f53ef71067be47637c7db4da7f010a33ac60220429410215eaf06057c4f8c7d1da490340b0147a3d72be9ab9b1f4e136451cf98",id:"f3c675a4dab04c4a3f7437bf4264e97402d36f43bcfe84f5c2a874c089509cf4"},{type:0,amount:"655486679871",fee:"0",recipientId:"AP7kuQYdDVNaxFpBy1RRZCtFJxEfjyafk8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220157e94b4569a8eb2cf78c543010cfabddffd8fddf12b800c5ae82a6a90605e95022041d4a41672b6f85bb8c2171a033906eea7043a35f377f2c1e07ae09c07906f53",id:"8e4a229041acf3eb033f4215adc26faf8bcdfdd1a8f351b1f97bfb96972c48ae"},{type:0,amount:"667854242368",fee:"0",recipientId:"AXyLBiVC4v1vyXUwVCZywuGPgzGE6fwjfr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220117105ef4a93b506305144a883d16778f4d15fb5cc7cdc4624770e1e0976c1e802201ef7dfaf16ccfa96f2e408f78f7026377a65a59d1289608c47fd6c96f9df8730",id:"dd2a692bf311ad077ab9e0eb14d321fd4be930012b9ee7439cee939330063ce5"},{type:0,amount:"668477464923",fee:"0",recipientId:"ARanutQKuQepLjbaHuTGh3yvFVzDbuoWj6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207bf98de6ba2b128320e753ee96a3740084cdb6aaa13b3452ea9c6dd3afbdb6ec02203a9c6e40cf99cc6694a504c913a3eda844cdcd0e89b594903d27774a78b96ce5",id:"a428541fc5455a8e86b42088317a82ec539ec88ee98e2b7016a8aed336046fe0"},{type:0,amount:"669856703512",fee:"0",recipientId:"ASBZf3gbf2VLdkaFp8rkVRGjnCm89HRfEP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dfa8b07f91d5ac3309d0302898299f4695480d247e75cea9c316aead4eda1332022039a19ddb10f1b4b4471a6ae3af7cc70cc9a2fc5ba9f88da5cb14e25c1cef12a1",id:"3a0b61cf0227f3a14b973e4d991b3c892ca9c4b40f48c6b48dc0e12a70939126"},{type:0,amount:"683962013271",fee:"0",recipientId:"AM6uMWQkzps2vJqMMMMyEuZLNa8a9HetfJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100aed03caf6374a94b18218b1d6557cc6b24336e14a14932f1c3de017d61d969e3022040ae6f228c81d7ef90a5cd59d57844e7e712c981cfde43b4f7bf5fc590550995",id:"1ed84533e28f9b77cf94331c50903a74d10f648d4bb290eff722fafd5ad726b7"},{type:0,amount:"685060228654",fee:"0",recipientId:"AMwuubQrccxV551wFW5oTmKWZhvbojTizD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204618ffb59c02a2106b27c71d14148d1932968b0c31490664911c343e96e5316c0220313e2e7f2387c05e242f162fbd94bbfaa3c991aadd853ebbe19c994095cc2464",id:"07c8587383bcb1fa6cc35ac3517ddbb3ccbaee82084ed71682c81a53db7b7995"},{type:0,amount:"688309516953",fee:"0",recipientId:"AS3HG6pG4cgtJBHiai6DrZfMdpUyTFPkB1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022019ddc6fe655b187a051a3d7a0575c8f3fe2b6ddaf74c69c8c6dc84a05e67d20b0220568dc2da3b1d3dbd1a712a4dc8e492500b475a08200bc70f62f73559a10d80ed",id:"0e1e914e5931d52145327aecf15e302d44dd38bf5c87756af8cb22a0cc1b8177"},{type:0,amount:"690823753611",fee:"0",recipientId:"AL5qEAPm6HBApbNTqVE3awEgzr65w8JZA1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e7ab0f12b99f73cdec3b34ee4b52d3987aaef73fab54b7aada17d807428cd0730220383d3191195bd2819afd54dc40bdc165c9271a201ecf57444c6ccea480800d1e",id:"cb4091df5629df4208f1132ad20d8beedac84714e5c73e52e8dd025a2d571278"},{type:0,amount:"690970768669",fee:"0",recipientId:"AMRtZ94wfCYmF9eAgK8345Hy9unPa1GKWE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022058163e796f8fac61be71bd7493ca8f729067086b0a850bf233a0f719ff7a4d8f0220126c32a7a178013b1c955dafa8ffc3ff7c785a41f9ed089fe0bdd5283ee2bbe4",id:"711bdc5c2a1da2fe4c488397f938dfd9569779581ad321f8f1471b2bc363e195"},{type:0,amount:"703958360199",fee:"0",recipientId:"ASCegDxvnqHPGYrUUS3YoX3fMC5B6WqYGx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fbcb790ad306e8b67dad036b7b02185dd3f40e92cde91c942ebf65976ecd98b6022033e4e5eed3dc65ed5264efff8a3f581107557fe0033fc6ef440e3a1622e4500d",id:"15c7116a20f1740fd4fa8c6e93c23b5149be45117d14c9c38c36684517914c32"},{type:0,amount:"706898356567",fee:"0",recipientId:"AYSpB9rSgnR9Cp9siWsdPct9dKKxbhBnnL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022000cf165386c43ac8d18e3304b5eb7d7a58bf1eccdffdefd3f5af84fceb94846c02202cfa34b89f205b55f7a8c90ba72bdb8698ad1abc18a87dd650fd41c348592f53",id:"be6736d3f90b290d9761ab4976c11397d23d0300cbb09a3d24f818c850c9fe68"},{type:0,amount:"716079847081",fee:"0",recipientId:"AGBi3EnW12LZUDcyybsqxbeqLzdxzxTsEV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220524fee405d41e04fedacc0e38c031c26ffbbb70cb273e53106382add945918430220549f961152cdbb902d342a57dff174cc6cd7d6b689d5aa49eac318311784b4a1",id:"a5a5a47040cb7f878d89cbd7b9e2d4da7f17b686f9f031b9f4ab8485373a467b"},{type:0,amount:"726541178342",fee:"0",recipientId:"ANkCc7vjQS8g1jo5pKEvYKvrVbPTVmZxx8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220082613e1f512c2c74044df74ccfa0018f5066c27c1027911669e6a393094f22702204cc71514d9c0c72430d6b24dfa6d8e0ddc3e0d9e9877e5a45af7b66e06c77141",id:"bf09ad805c4fbe75d9e1dc6d17b319edf13885f5455094ce30e44c144a496ed2"},{type:0,amount:"727897828829",fee:"0",recipientId:"AeX8N5GFDN6ZBqf3u3kXNxVHBYsz2jLg8v",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200198881de2264fc3c1921b214379e16bad210f1e3d62b289ec0714e4c47f51b8022013d911c9f57820450630bcb87670ea779e7ffed6bfd700f7be55fdbebfdef0c8",id:"83613475e1867eb2a82ecbb92db7506a2e50c0336514c42e48dd3868d5aeb6cc"},{type:0,amount:"732204904378",fee:"0",recipientId:"AbzyK6ESfRUtaVWgiw79Qjx23QpEpBQdDY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022065140a29fa740ed9049d50e848a48398fc0976992611867e87e7fe0afc72e13402202bfab985f83e5ea588c2a15210e1f6751b263eae649c2eccaddffc07746a0a69",id:"03dc5b6869f88c387a1e29bc05e963c99e88a3861a8e6b215ea0c87852df252b"},{type:0,amount:"733825657832",fee:"0",recipientId:"AX2fhE4ybwdvcWwnJKpcwsU2sHZAQqF9h6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022014e54a8d9f603cd2ffb1b589b11e26c1f74d0aa0c3c457b67fdf614ba46d1b1802200ecc6519cfb098463a51a3a4c8791d8cdfd7d0ba1a7841402c1c61c37df556a0",id:"57a89b3732488bdcab397c8c52e9cf56cfc18d316659388d49bd59b9b104be11"},{type:0,amount:"734634240646",fee:"0",recipientId:"AJdkWn2xq9mfJ1XbsvMmGWgzg1qXZcpaVr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022020e7d6b80e23a91b7ac3cf255416b0cd1ee4b8c99e7905f3f074e0389d41658002206e2056d8cd76a1017caf5657c0b2028f85e9769b8dffc3b55667f34e00b10187",id:"a6c0f4e9a9df5bd241fbddad25bb116624637bfc4aa4938c2167894d3b422d31"},{type:0,amount:"734928270761",fee:"0",recipientId:"AKBTUeWQRdFCE3Cs2tKVXdSSxFnm5m4dZL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022056a156e3715c7e280dc5ada73fec5140c0d7d58a36a9d5c2d191e141558cf22b02206f1a3b08eb3f4ac221438eb716232c205e5574753ddfe10c215dfab5961af2b4",id:"3fee18fd82e1b26fff178afc44338454f947dd5cbfcfb9b26e95786d7a852a36"},{type:0,amount:"734928270761",fee:"0",recipientId:"AYcACtdVz7kyrUu1RyfyYmnSxd4TKYCiAH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009173fbf35ca5887ba7e479349557a88564c45c0f9a2c84555ae04839fc96124d02206c2654536f9ff7f3192f2aa9ef23e612f4488263d77c342b81d0ff9638b59f93",id:"50743bc18dbf1b0b06b0b85da7831be155da905b66cb4c55061b2c87329b6857"},{type:0,amount:"734928270761",fee:"0",recipientId:"AJPBdGiVCiYb2Zo4ZWs4wQwGpiJxuPT6uC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022001bc153ee897c9a8088bd7d83db9b0beba950a777c79a3e19168a280c9a58929022028538f8aa4e9932b2a779622b99bdfedc92e16cc05aca8e835ed647a41419872",id:"aa2748fd0d2f735f8937046030459798b03ff7ace43ab7a6858a1d63cf38965d"},{type:0,amount:"735075285817",fee:"0",recipientId:"AXe51e9NEuXQPFhY6faMfWJNAru1ccTJ3a",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022008f25a62cf8b062f8264aabdbdfd46a3b7d8ac5086031e0465afb0f9e30403870220207ae7d8f21ef03284ef94bcfa9d0d370dbc4e5b795b183decdd446f89b26fea",id:"0dbe3c763cdab7222f45d7062cf94bdd72a5ed8895fa55b268e2bc7626198c22"},{type:0,amount:"735075285817",fee:"0",recipientId:"AHPpn51yRx8UnegXydxpXiivh9xnuyshH9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203f1447733e52b6d8529e108e9a59259656da14f448adbeccd11cdf3770afed200220236c460323b60286ee1667c51bf1d8a61e7c7ccc88c90195241db585e886ee3f",id:"8e61c93cec0bc73a53710fd0d35fa0d4dff90a240513d20964782de96f256a86"},{type:0,amount:"735075285818",fee:"0",recipientId:"AKST4cpT1s7nnoP9fVYvyWSEvnKLz7vT7U",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205559fddbf5dc0f93eef3713edaad47980b79f81dea309ec15dccfd4e04fb0d76022018c9a630b655ca36b9865b304ac7a256fce6282779092790079d6dc78fc4cbe3",id:"6ca20d3c6119bc42cf161f48f4d82c73f005d8e9e5f602df32fa5cc0bcefa9ee"},{type:0,amount:"735075285818",fee:"0",recipientId:"AGN9gWA67X1BxSdVNjDwuQrpJKr6waamAs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bbb6b489d4f1f55424f74280ab00615213d7c008718567eed1b849a66c9c0ce0022008129948f42b4be5837584c37bcc415d343c336d7a6988f1bc7ef69a698c188b",id:"031a5500249e80688c627180ecc8d3cb9cfa38c5ed42ea10d2624ecae5342fc9"},{type:0,amount:"735075285818",fee:"0",recipientId:"ATHa3HMBEGDM4BQ3VcH1rAY6FdviPyDg32",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100948cf4bd55210d34820da658b900d4d4dfc4f2b538b9f8281189abf139fec2070220749e0a1a746c346b324aa393796276ea95f449dd11058d1857bba366fd228977",id:"ac676439da598343cd82aeaad1f306e6d1fa15d8db51bfaa967de14572af508f"},{type:0,amount:"735075285820",fee:"0",recipientId:"AdezHrqbRQdooEMbLf5HEQjStMcWtKaUrs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a0265aa6bcc52dd3ce524eb0902b08a00139f01e8078412acb0d48021bd54100022061fd1f5fd3c0abfdbf11fe56932ed39ae9b25d468f9e9d2fe00a96b96b60e3ce",id:"e9d8c9795d3f32cbbd22b6811801dea2d4b99a3b5dd66013d8e1bf75a12fa573"},{type:0,amount:"743982782620",fee:"0",recipientId:"AMefnVvdW3xQzRnfy3RqzjpEjUayGp62cz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022046a419c537be06463ceef560a05950552f61b5429f7e2b4a2aa09ea2ad1d3d0f022038881350fc45a81a7c1c0ad407f258b100b87acb496b8ec6e6e62958468c55dc",id:"edd887ebf23a14ee72232666b61754f7835b4cfa4034f7294fc9bd9a30ac1f10"},{type:0,amount:"758597694964",fee:"0",recipientId:"Ae9YVNX8GAVUiVH4wA3PqeSMGTDTDeUfeC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022009cc850c616124e30c7a173d679234436dacba9fe466a501b2f645f01a59944d0220042cc6acd2cc25538201006a7a1df425d3ffce08a4408b1f5fdeb73d27d7cfa6",id:"ae6f8253bd2b564690008ff3ada0199ae1389457eba14431897332e6588e111a"},{type:0,amount:"762146976638",fee:"0",recipientId:"AdScYdTwx5YAJSZNXhFfCXGqNpUZfgUAun",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207aecd31e853d981b83f6b4381a7e2d6152afcb06e08f7b001ad88200aee9d33f022018b9af36be0290056ded2c835c80902c824826ec0955e53cea50f4f153fc62e2",id:"62c9ac8c0b9bc3590849da10c55d14ed79af7a11aed9c88d4820c043655d8d61"},{type:0,amount:"764781255703",fee:"0",recipientId:"AazxWnociyHVd8hBNgCxPqAepYe52psryF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207fa864ffe01d95a14e23efbb66ea9a22ec47b0cecdb564c8842a6c0f0cceadf4022054ff2c650fbd053bf2b022422e49977f6bc4fe147834dca0198d5c87f39169b7",id:"3684f2c7ebac624519c3e3fa1751718e07c66bb695649cf049238506d3866e15"},{type:0,amount:"767271583336",fee:"0",recipientId:"AKBgENszA84HHwQg1eKG7t5KnU17WLUkDN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022015ab4dce082428342f964b9372d37588cfb5be5f916c8c936eca4d7a4457ad440220632c804557c94797efb8d041f94561b3126d0ce2105f1f51f038b49ebe387a8e",id:"a7d10521629488ad012d27edb9083ad6dead0b3a401089fe34401af2da0a847d"},{type:0,amount:"772911580976",fee:"0",recipientId:"Aai89ucFnPch8ZHFvt5NJ6qBZKACJVYTeP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204335c3aa664c18916e6ca785fd3c89f76b790e77511df34ffdaf5094322dc0a002204506ffc0e8c85e5a68417b78c3c231ce5c48a8a1dc417f1962bf65d6a1b5da7d",id:"773b21c1fca3bd52438fb17f97403e5f26aeb20693c591ee9d4e9e3ffa748be1"},{type:0,amount:"772911580976",fee:"0",recipientId:"AcBCaUbM8cS4sp6s1uXELKv3CESzCD5XX8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e01f0a0d0194e905f33d5189eb1f46da9ec86cd2520af288d3a88bdb3096d54202200f1285e4b0a6b4d3036e1fb85637725532a39e4cdffd51c324af87d4d30d0a3e",id:"2465e6d3f6b17da590b6f53136e4af7f893b9178bdfd0f7b5cee9f7c8ef816f5"},{type:0,amount:"780058983676",fee:"0",recipientId:"AcuUUQ4hUm4wfob8z2dy2fgzVjMBYBL7CE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022015bf2469739a014eb0002e02a27cb9873058c6ce26bcc30b491dd1c2a783a285022027942002fec0c30c3f73859f03d0b22d6e6b9aa8f2b4f996fe440ba00920e643",id:"1efca8a1ea9b00029fc970c5680d14f2aaff245fa0757ad0f1853d2c2b2e7053"},{type:0,amount:"783225207027",fee:"0",recipientId:"Abj2DUoYZAET4WYB73sTyr6udaGA24QSaF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207d994f0790b2279a417323e51fabe58f9406f3306b21846d986a3f7146bb2dc40220246635f1f8a5d028f72d6117a7a743410fc596e89722121f94f8643dde175495",id:"cafe13900519e38c9e814edf229a8a07f9f521ecedfeb8f2812d9c8a94aa7f4f"},{type:0,amount:"792264143054",fee:"0",recipientId:"AH6gRrXAUiWeyi79vjBvysTKJHCny88jpo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bfabfef46710cdcc59a2223e554e3e7cc416890cb9d2aa3ea408724bdd11d08a02205aed7c99e38a0b4ae8991c7daf53da01ba8652434d589aab0122d7c043dff201",id:"26c101b6192346f37ee639f28da5b53ff81ecb7ac8802389ea6ae9cc9571fc2d"},{type:0,amount:"795355926543",fee:"0",recipientId:"AL9EsuL167UcKpjH2Cco6zqiFena8LoURK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220601bcb86301d0406afb27b864ff246c6bbfb8e6668be9bdd87dde634cd44b1f4022070ecc8458fed79816df9f30790a903d99ce41bd765cfc92421cf6070c7e6961a",id:"b745abc6ac90e5123dd8235aa5b19cf96e2419a8b7710ba03828a33dc796fb11"},{type:0,amount:"800000000000",fee:"0",recipientId:"ALgKXQivLiRjcmchi1vaRBvZDPpYcMNv3K",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009ad6dfefc8a08f6337c0fb9283a07fca5b24dda8145dbb06644284a7f91a0aba0220730b2b1411070cc0f9cb67b09d8d4c897a2dd7fdfd49523ab3b9d4f759c9803c",id:"fde379bb0f8057769553fbf9c7e49b62c37f33999696b0a426d6df0f1198d7e9"},{type:0,amount:"800807608813",fee:"0",recipientId:"ASNbbDUUV537CWVyJhW4nEBaoqphsfdGoF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205c5f5fbe87eb844f435035cee3b081a0594c30581165ab0c5ee5eede125c99b702202db7822920671f90a6bc5ef5056b6c91599f7f48b1441ce679e8aa6b0ca53e19",id:"0d34c831223debbc92140029644e84dab7664c4af7cb70acd1271b023df5777d"},{type:0,amount:"807327846398",fee:"0",recipientId:"AaJkUNWfyrzaF8VeoujbCUB96bncRBxJwb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204b973689c3730f93177aae4292752724a4ae4f313a98f70b8602a63d2fcd7898022061fc16b87f2e06b4f2adb56ea4e15de9ee8858b079b7783c749575c6fc8e647c",id:"784dabe70b09163d177db73a00dcdc56ec59620d25ea31e271fe15a479c31f35"},{type:0,amount:"817711112949",fee:"0",recipientId:"AY25aryyTvvZUjDtbG53zbpigrenCBXbEd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e23b475b7f57825c23c18dd4adc239468a8d185f43f5fc35b815f8d9bc04d03d02205e27da5cec444f1fa6941ac1b28c6536b5c4e56c9908099aeedea3af4c8943bc",id:"50fd6a37dba73576473f5d47c3a08ae07e39b1c5451d50fdcf5e9d3c1469a521"},{type:0,amount:"817938318037",fee:"0",recipientId:"AGTFXFtkqYmcG6wZowdinGwb9K56rWbSjH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c8908d3537c932ca3d4de3b28d09da5561604463bd531024a992be58de1802ae02202b07302aeb41d0a3fe01a7a519a0b19e14d726918dac560e79d575e5c68412f9",id:"9352eb84bca23a8932cba246fca96482c36b3c55cebf9545ab3260968c223b04"},{type:0,amount:"828092442164",fee:"0",recipientId:"AHNQc1eUKgSJWr7BiopwP3fCLm72NRGFnu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022078d3cd96dfe78a40223df2d36967e46708c8ed21dd1e098e5994c9832b2bef1602200ac6d2c0ba0763740046aae684d542a3332ceaa98cd2d62d0217a75c57411e54",id:"190407bed322d0dc2626669ba6de2627c6ed18f86d158bdc4e3d24e4e49bbcdf"},{type:0,amount:"833532097131",fee:"0",recipientId:"AHSytS1gD6vMjHtcpkQ86V3tTLVbVy4UV7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a35919ee25620b1cbf5f00d83d28329563805282f1de3c6a14c3f3718d5fb671022003b1c6755cc0d0f7451fc3c16e41cf2b5a771c4596063a2a3458544bf927dfd4",id:"c36f7006aa4ada2eda35951c1d8e88194598959783880832ebfe42357baa5661"},{type:0,amount:"838975285818",fee:"0",recipientId:"Accz8foPxAgb53QZq55r2J3MHyhFJhWjyN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d38fbd8b4e808a943dc3ed39967191c50ab52d5049bcb95f8c7896232ad9a25102204ce41e68a375a7a77d12ac92c4eb5a32a87dd2646d481b4dd6a4fd9b28e0a8f4",id:"677b8dd3b694d5ca4f4a2d890d99038f0d3529372ca65f21ad0669eb2a703d4b"},{type:0,amount:"843238131545",fee:"0",recipientId:"AVWJBw2eQiWU9dhYYiPZk6YDKgT8zWuJpr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100908c7959593e47247fcc045d6c5d14798668266960532130f43c8f03ee9e4e3802205da61bf5c85eaafea399d9a0f6ba0002baa6f011fc6c10d0367197768d5fc7f1",id:"442e380e1881f46f13924593a158c58ab704e76686258a9e1b33b645c9f1913e"},{type:0,amount:"861005612452",fee:"0",recipientId:"APLNgrLNdVJUcAg8n79DRo5d8krXTS9jBP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210082d6450fb65d0734f8c6d7d7ddab2438055b37ba420a3283b73b7dd236cc855602203663d2b76b2c2e681e78f016bf74a300587259281d73be10a8ae1841db720bbd",id:"53462cdbd50f84cc911007ef46be4622b31fecc18415d27f7937b5c36a9c1c38"},{type:0,amount:"867237104113",fee:"0",recipientId:"ANnnZMq2TBZhCoQkrXtsuhKYVvX7ii5RKG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220054a3b0e8eb109670e0fb452e1e58b8b82048aaa531c4238a011ade0f3c7662d0220711ad6eeeaf8888a8774cd572606e7ba0613d737d3255367a96542b95181d5b6",id:"e6c1a70720897231182fbac0ff131552e938891ca01be2fcd96afdf3ce2079b1"},{type:0,amount:"868945860370",fee:"0",recipientId:"AdWni6sVGmYL1iWEeVAt5erYacKrNE6CHY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022042ef637e7595b772dc0f2c6edd1d1cdf05decd33f67e595c94abc1357baab2c702204e8bd0a77224dd1bf329ead41f7d03ab79b61f3bbb4a607d9b1ec06978fe59c3",id:"93ea865c088bdf14d07332d702448dc31dceeed8f265334e3df8b859f06a048b"},{type:0,amount:"871419919728",fee:"0",recipientId:"ALBGoFokLTX1VeswH5LRBtk3uEUitoYy5U",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022036757f788fe0baf560512809ee624ea8efa84ec50dc22f8c8d14bcf6daaae4c7022011760ffdfd5f5c283ae6561b017036027b62b70a1281bcfb7cf9fee718400800",id:"75dd4fc72a01bbd3b6faaf4adf4fdea8c88bb2a6708d15f124005079cb9cfc2f"},{type:0,amount:"875407840383",fee:"0",recipientId:"AStpm2Vziqqgtm4Tc3xw8poVh9XUBGpode",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206fd3e896284765a4a81713111ed9bfac25e977e14b70b2db0febea67d8e14893022055d0b6b689b94312aa2f360f5930c43341499b6551f74cee2d2469527f5699e8",id:"85f1956ed442417404c08f274e8b70f65b139a35ce77b85bea78f9b913e4e4f6"},{type:0,amount:"877995100899",fee:"0",recipientId:"AYGjRAJcBQokKnpxnEWvxsLYohpa3R22n9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220563f3bacdff499019a348d4c9feb8c965c3aa80385328d1ae7fe2d1abd7b133a022078402ff3128df4b1bd885b3abf5d79c3318d6255ef03f6aa2c4148b323569a7f",id:"92ab5e8f2f16a9e0b3e8a127101142184a3f2da044a47bc9ff72da0afdd5c0aa"},{type:0,amount:"879811609594",fee:"0",recipientId:"AN3odZjMnK4NY6oHHG5hKPySNbH6DvfcyA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022076f3867eb0610cfb8c5ce5be956ac5b2c37561fdd58525db87c5c89e26af7c0002203635be4d862d33fdca979630ae2f08f43a8375f35632af2ba59b148045bf1f24",id:"ad3ab65ab8c782d704ebcb4f1ad69d54a225ca2e669aaaac22724b946b244508"},{type:0,amount:"881943327924",fee:"0",recipientId:"AdEnEMDqFd9FGjuTAdcLgVeSYB4Nroj5qR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022022e4869dc0dba943de4d58bbad7c4252e5a7e29a4cc415940ec3ec947b4f427d02204dd4c32404556aa475eb6eee346ca5b408e6541d7078cb03af4c8acf72ce87b2",id:"7deba86a243c8bcf2c222986ba4fed01192817061e1721c1d42e55b04678c85d"},{type:0,amount:"882010152950",fee:"0",recipientId:"AUNsfAkq6Pcqeew41Qb7fMMTtsjKMfLuBU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203abb628561fafe13dcce54fb723168690a9a9e766bd4ec3a250a5b496abdfb33022017a450e3a2f31be397e2696b79535dc956c2faa59ed503ac81d57fd8c3078c23",id:"55dd0e380d2c6b884a719461ceb712f3c6ee0518841ba10f81f1f3c3cd044907"},{type:0,amount:"882090342981",fee:"0",recipientId:"AYxtKAvHGgKmjAyszFLeeUdrBrcx2T4HMj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202dbbb29509d4944ae73a2957f94bc821480f99552f77b7b2576b63703832fe9902207c65af1e634a4f3f2140146658865b577d8fd0ab88563d943ac6ab9f5c2082d8",id:"ae02e0d07ada325ac33ee462c57bbfe4b175943bad966e7930af9b51a6a83888"},{type:0,amount:"882090342981",fee:"0",recipientId:"AQ9dsnRjod2zb1jYmQouSeqMECCjczHTe4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204ca7df8131d2dbae7148bb7d600fd2ae9504838ae6e08a36ce5038898dface6302203016472420df3880b64e341b28ae44d9ba50a218a1be088692613fa69ab95245",id:"ccce88fed70924e2c19f5ce8ccde69f7c74377cbb3f698fb678dd6455cb74ae6"},{type:0,amount:"895174683068",fee:"0",recipientId:"AX2ZAQGv5aZfuB7uEMrKVBJixqGjaD7QTk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204000a219545ece7dfcabaf8d2bec29a6ac6d360046298e81f1fa847dc260bec9022004193aacae42218212effa3649334b8e5e865ca8018f4cc10a704e0bf464aac0",id:"fe23b603d883fcb3e0f2dcbd203a338e6402e95abd9c2d32ff36352b707ce12c"},{type:0,amount:"895341745634",fee:"0",recipientId:"AKgTzN7RNMLvv4S8QzRHqvtP5Kx4KFeufC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210086703eb4f783d915efde3bc0521c44c2c1fa7f09ef0fa0cce1b83c0567e55ea102203402af173407f63130b753f8e503acf6ab9272d4cf540ca2da5f76c5da2704a8",id:"e61c6ec80612d5006059f9551b9f34e928aeb6424694f773c56500bf2037e776"},{type:0,amount:"896791848697",fee:"0",recipientId:"ARyJArFNkcQUDDpQdLGL47BF4ZVXJ3y3fm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022053fde5e97462ffe6d69adc37b4923118269fd9d858ecbca3b7ec8f9fd88e1cde022047da7a3a640d20856f1f267e2f06178d1ffefee2177e8a15b2957f24f83cfa0b",id:"45eed794987ba92e4d579a7aa21bf890bda28e3028a3139be7a4bae6ef232ac3"},{type:0,amount:"900000000000",fee:"0",recipientId:"AKJn3FRweuCdDcNkjSGH36vXb5M8ZBjbcT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009e08602bf0177bd5ff9b95c0f173333563073c193eec6574a25b8a4c7453a15b0220778701ddbc1a30c3b0366dd7d7ad654b0066e4db8f8a884a668425c95dc57028",id:"5d3beece4057da03840834c3035f4b580872492de87afacbe44d540ed75453be"},{type:0,amount:"903190511125",fee:"0",recipientId:"ANN62YesPBDVEsW12iTwfwRaxhgTQGC6B8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cd15bb91ab56975fb578938b0ba8ec406c684015cc4a84386d93a1fd5660ab18022017b0b3c53b8d834a2a830676ccfcf346d21610f55e96c25eec771585d6993c87",id:"f7b3f239d399a69d954994d12753be50a09d71241516f3bc49dcc6fcdefb7d44"},{type:0,amount:"912865546892",fee:"0",recipientId:"ARuGpfJJNMi3BFFbsgS5BeHU2c5ASxcE3x",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d232047da315e33fe38b625c3bebad7400b03cbbd0b046aa0c38e972d5843f20220261e30aa301f0f4956d1f95cf3e4ffc50f0a6d6dcb2f0175e6e589704eb88023",id:"e2c3a809125902671f2e0242d8cbafaed3fcbe90c659a782e9de638bca44ef44"},{type:0,amount:"913029661747",fee:"0",recipientId:"ASycZbKLnRNbYdYgek8YJQzvyNFwjcQGAt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b27e1b308e009e6cdb6ebbe5b5ad0b81140bfb107e13ee7b044cf93d3152fd8802207b01d59ad8c5f909c37114ac86e763ad66c5398601d99fb1338e5944cd8810fb",id:"0a2f7813b32d7506cd8f633d7938b81c89d8aea083e830c65790ebaf4c6e7795"},{type:0,amount:"916154978619",fee:"0",recipientId:"APepu8ruATApkWtKxJhiU5CPYcFMfH5tfu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dba1440e8f6a7a3d4796995d180099e8abef17fff1f9d1c5d8c69cb3132cd1c10220351bb3f699b4dd023ad2ab75172a2c2f4d0854fd554ae437d11b3bd573f8aef8",id:"92f849292f6fc6ccb43b4f0feb73d9a875024a8aa9b32e4b4023936a71e2ce95"},{type:0,amount:"920325036170",fee:"0",recipientId:"AaDbKSFY6xA2UJgeBSE8r6n8wX65Py1feQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ded1448f1d4b184b39b787c38e550308b2e458d19ffd23b403c8d8c836cbdce1022002d021095c60fbe111946539cbefa09e5202a7261d44df441cd1996c01e3e2d8",id:"879e49379ae26a5f8120f6a4535400fb01357eee8b4aae9322d51e149fb9a227"},{type:0,amount:"921784408416",fee:"0",recipientId:"AJGxTV9yTgqZWNiXifF9JM8U2vdPssLyEz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201d722c68e0a469d9bfc0a67bf0de5c63c4a969b2942c30cbab883fccff7e733e02202d9cf49d2fee94fb552e356cc09291a1a0cefd9fa5ca98af311a951433c6b3f0",id:"8e0a8082e102ee10405d32ba82988839770f5f8a4736b556ca64ea6b674d90a0"},{type:0,amount:"922643224501",fee:"0",recipientId:"AbsrMsgKck1shqR8NwDm1ntDApWxGSZW3e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009cd6e7355be59b5624201572983708b730e673c00b779c20273d94d4c34e9e4802202685f9d0798d3e167b787234885618a79d7f9967adc21786c7b127edaab39687",id:"59d8c7f34718a9845f8c670513b377e70b9f988c86007aad583f6318680be534"},{type:0,amount:"928155414454",fee:"0",recipientId:"Aaj14mdqcmAtZH7LnQqdWT3qf9BFmyR7hG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d10065682321cd83ecf696a90d06022a557d0e6f64864be26aca6d3e7958348d02201eb4018574d93c83eb706107bf2108a5f48529782fc2b03a4c55482f49cc4ba7",id:"65e3b5466ee3e56a4646686a8bed5a279368eea489d49ef0e093d3c6848a8ddf"},{type:0,amount:"932790490195",fee:"0",recipientId:"AdQDEejPjoMpLg8cMDPJV7tyG2zLQmuDjg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e668f456c6c608cae80c8c429f20cd6b38690f069c232a8d8ecb57def6986579022015f6758e04f379ff651fa51c06ae5b9f64b48203dead52a732f08d88fd5c7ac0",id:"f14cf4caeb5874d8bd03184939da80ee11ff146580438247ecb81af6dc116176"},{type:0,amount:"939660273449",fee:"0",recipientId:"AdGeDcDSCeYBfS2DA5Dd9VZ5SwvgmAgCz4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100de0fa78884cbade7879b174697493b0d54e6810a8a5b1e9675b04d5a98668fe30220520492f5cf1c91d22bfe2d63edec163d25a09ab5c74338f20f3dc1ccb3a80e0e",id:"e11a97c65477cb5de932daf09eb0f377e14cb233813ddb680ffc030661dcd44b"},{type:0,amount:"940453697923",fee:"0",recipientId:"AbfshU5wgXcrhfWNDjrkrvN52y3EScpg5V",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206cc11c0bf89c528f9efc84688be77e19339a847328790b7cdd407bfbbebfcdf8022057b0752aab9c9592f2387078df66d2ac5e40e49928df72a53b769b942cc40c1b",id:"1442d74ed4130eb43a84c53baa8ae6db3fc088d2ac900423f8b69953aa61a84b"},{type:0,amount:"944039590123",fee:"0",recipientId:"AKj53MkBzDfkDf1SLXyMf5DnkC7Ra9cqug",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201edebd2222f9e616ed293c9c55f35c7cdfd6f0b4e739a588d912dc9761fe4dba02205b7b844d19d075b195a5cd94799d40c3292ca05f0b3bfdb4736739b7869e9d73",id:"8f981304ad1db95e27e2fca8bee4e51a421d0c8a406921d2e8aea3318e45fe9f"},{type:0,amount:"944903185065",fee:"0",recipientId:"AUTtCwMqXuWDskRBVkdvDjCdMPz21Qqn1B",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220455ff666f653f5e990e60a35c440270b625b844ac3154e4d1a959e490fa11a1502203980c454fd84512adb7659279c031f72b23438cb3d5055238b34966837337856",id:"1741b8faaca3c787f7abc73fb5a926f1669b4c7ad363b2ff8db9c04f084b3f07"},{type:0,amount:"954261371043",fee:"0",recipientId:"ASdMtEgrbnpJzNg8ZbcA9wec7QcvgXBio7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202a01b72970b65264a10f17e18db74bff086e4908e01ea391baea9f67528abb4a02200a63fe887e4aff1fcbe7235e72d58a6ca6cef97e3f0d7c89f7792afdba1cd41c",id:"cef4106da76091c4ea826c2f1cd235a182f20634765bf8f6183a3c767fe36e55"},{type:0,amount:"956921007076",fee:"0",recipientId:"AU3A2mNv21o4SkKrPjjumxAMSx9dNSJkbM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009fb21352f67025aa234098c53b941d99b9afd9acd26e9a66fa08209561bacba0022067f9ec9f3b46d62bb5c30915f80b0da84b9efa71e6b9f357efc7089827803c40",id:"6f0e865e6a5d3b5564ebcc4f2e2c0aa6618418fa561284db9780fef7bf553f5b"},{type:0,amount:"964800000000",fee:"0",recipientId:"AXUg9JM1fE7XbUPCsDeC3UxXCMv4tx8bgv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206fc92484602f29f7b50a5ffc503c5d1a231dc0e54802d9aeb373ff327602325002204efccab14943708ca58cbf02824c6d1590dc1090bc0470bbfa7760f14fa629d8",id:"a059a31470b9a196a3894a864cd22eb0c92e159e776c7406f20cb92db7a54dc0"},{type:0,amount:"967490707524",fee:"0",recipientId:"ASvJ5NScpJtLy2WQV6AyBtzh5FzKxP5N4H",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100873f68bcdf9688710966b018209079b9a4ebea3c7b49e281b220391537b5b6a7022033d3d9d2463907307693dcfdc80edf4b864cb92cab31bf89ccc3c260ba72b91b",id:"c996d17aeb1aebda108edbd8af91fae13aad80b959a5f6cd1b2f8152cf4e829b"},{type:0,amount:"969700000000",fee:"0",recipientId:"AQinQgE4vAbgTXaUKCj1QabiQbpsAT8fzD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022041619c75759c53ae76620fabf4c133b4bc2b8cf890f3c574a4ac706436a6e84e02204386f909f08ca380e03cc52330fa553bae5bc73ff9cfc5dbef030be47a4b934a",id:"ae59ee72e6a0f70f2a9ec115af54c17664b2515e5af10f3c66ae0ec5687fe005"},{type:0,amount:"984780889208",fee:"0",recipientId:"ATunEsg5YC1zoyYSuRap3zJyWmpzQkz9tT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f8ceeea56b0a689d42103fafd6a58cd236a14183201ede721f666309aa66769302204c345a794bd8c7aa04e3e734bbdac62cb1606cb1375ac66d4a405c9bf515c5fc",id:"5711b79607001f91ae6452e19d06b65a23310ffa4ad08acc8a30b24ee67bc3ca"},{type:0,amount:"993823555585",fee:"0",recipientId:"AWUKR4R5oo99dRkwRkvTvTJ6ffYBNv7zPF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eec0a2a2274589c7b1daa03e60382327c2a429daf422815f969a16a2cbe3bcab02201c2cc1ea66118960117cc6c00d5cbabb878e48783e37086bb7fe0e3ad3acb30a",id:"a71624227e6daceb049d5ae4cb83a6a6e9a04659f29e53a1fe30f4746f3dc194"},{type:0,amount:"998232238139",fee:"0",recipientId:"Ada2uLW2F4xsEVqmYhvk2y1gnjbQbeEGny",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008bcccaa6dc17a49848a90005e91d25cc5a2f3c50af365fb9e84bbd18f8cf19530220582fbdc99507556d418996f4aec523965f88c88efc5248d779526deff09b1460",id:"bd15a7f964c5ccfeeff073d396ccb099886e5bd562af5b66717f93dbb20e9bf5"},{type:0,amount:"1000000000000",fee:"0",recipientId:"AV5UwZD1wxVNcDjjXi4K136dBPjT8BUSMp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022034080e7de43853b75340e97ad6a2823b8d08290c7050fb0b4e7be311d95067c0022035815502cfbadf9851555f9bf30b82544aacfa1c5eccac34377d86520b83d873",id:"494e41b53f142601472c50a49c966c2af768701a283d28dac2b09492b902f9f5"},{type:0,amount:"1001660153985",fee:"0",recipientId:"AKmat4frPHmBjrfwuMCk4uBRTPp2zAznfu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203cd5409d500d5b5fbf817476f4ea709e7e09cdddcb93ebd2a1dd7cec3f46dd0f022051cb3f390cf2d0d9162d5409aded948a48fa466b25186498de1e35a0d360ea24",id:"6a948937670927c06e5c1358667bb2f7611dd7387a405bc429b25f43e4e56827"},{type:0,amount:"1004564574086",fee:"0",recipientId:"AHnrwSwuuXKTxxL41xgqAwAjHBc7nsYCDU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d73919bc931145f7dc02745832964a7cf2091a3540eacc25569f6fad1c954fd002202ca78633ac126f1a38818b7712572f0b17887e187dddfcfceaa4c92521b4c80e",id:"18f0983e59f657e62c56a4b3257d3a14cbbc405b4066f20d687852162c449a43"},{type:0,amount:"1017708933348",fee:"0",recipientId:"AJnv4qX1hnuecj66hRM9mgLXfYUdEqWr8p",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022012492f457272b7d233a1324f49e7b1e04fcd80d555d91a05b1392b6559b62dcd0220530e2dab22b207a45dfeed314678a22822eb0118715ef7a87fb7bcdaf97cbb93",id:"5caa6ca9681dd44dc6bc566caf1289fa243e6448d9d9c5d19200800341f52dea"},{type:0,amount:"1022309295002",fee:"0",recipientId:"AaZ88ShGS4izM2RAjdRb1v2XBDjeWNRiCS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022022def44bc8637552e51371d00a3a39b5cd77cbbbf0166ad4f3431933ac94181f022055884070dc5ca41b51cfe9c8f363b03209c76b97c6dbd02476fe94397c1e4bee",id:"c09ea42b2ef6849ce9724fcb6e560e83c211df8c31bba0eb5853c1dbdfc2c9ff"},{type:0,amount:"1024417009424",fee:"0",recipientId:"AXdzLoCsCHkLrhLGW7SbqQF7ycQMdHj5CW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008b4844b7dd8265790126f46b21ac699ac941d6b9e657ac3efc52ed7c874535e102204c3ac47d179cd180370993b8e7d2e322b584e3848b2d7a0ecb86f8f74169a08f",id:"3ad1bc54683cb14a70774636d880c11c2aa3a236ee3af42c524dfec3dbc7bd20"},{type:0,amount:"1026165099001",fee:"0",recipientId:"Ab5PAShY5CX52trT6YmEB8Xu25t5tM5HjJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f74a6839a13eb8a3df1b72407585ecddf0893ed4fa3ee32bc30a66f7c49c609a022051dcb39162f3aae1ba1269a4496eb62db24ed3c176e488419bf19250fef3680f",id:"fa7af6fc72bd13847f83a7e5b0a9c689315429725a6b6f87101f9f5210a67330"},{type:0,amount:"1027972402698",fee:"0",recipientId:"AXk5qyz8GftcgVTEzUDhpfWZL52ZJMcN4G",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206a1ff97dae426570695a4585f2e9e5734c742bb8be2981a757890cf99a2d9fe402200f7e67d7241d9fbef45f4c0f51f7c86827649cb337ce8a902f242d6367b48ba7",id:"ace052f0c133b5875489f3a7397b48ade06a5ea9465c0860a290b3d34a5f927c"},{type:0,amount:"1028958385088",fee:"0",recipientId:"AK5NYn7AJdvYWy3DyESmvQb2SDf7PxRa5J",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009fb2a2c3952a7df061783e1f6acc7d7ebb1db208f242c9db13e82e0ae515eb8e022078dcba5d7c2487202d4a950b66cb3ba4e4cc8718bac248605405ada6131e617e",id:"e1230c88023ca1225588bd7a9dd7ddf53bfc6f93c0610c3dfdccf630f943ac09"},{type:0,amount:"1029105400145",fee:"0",recipientId:"ARAkS27JzjnmAGTBPMQmKJgSwCgD6SNUDi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e2fc6163e74ec9cb17eeda9bf171e5b4789200831d5ab73aa00356cb911f884102204a9b214977eedc6106cb9b6c416ee8a14d000e854be082764d65109f88ec2206",id:"6c8816c6f0b88e43ad7b4b790bcb539d7be48a61a830b9f4d32ecec9c595552d"},{type:0,amount:"1029105400145",fee:"0",recipientId:"Ac78t9XdQCAVc3aQVwrvB8HTUqSoDqiHAq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bb701ab9fe8c4f9dc7b1cefa260c8934b2bc4c2aad31fd607ded1c768526aeb902203b1b477789a7e8a69c02fca7bb5a8d348785a975e097b4e6cea3f2515d68ed82",id:"5005846db55b1f7f32d13b95ec2ed595dc8927902d1650fe366356fb6cdaa5fa"},{type:0,amount:"1029518225860",fee:"0",recipientId:"AWPoYy3qsD94b5k2kbNuvUzZVh9SnQjBsa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200c1463b83dac90ff2ce43bf2743c30616939b4a9a1c3dbee8ce27ab1015ef3bf02203c474948d5240127b76ea1f19ecbfff55033dcb3257faf741c0d73c0c4fbdf83",id:"fa84fe86327ff3ff43663f888df8c167f5567aca4f61c02157a7c4403af4f29a"},{type:0,amount:"1030548774634",fee:"0",recipientId:"AdPywJjNoHDnCzYua5irL8ShvUx9KSHnc5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202199eca47200eb76742b28d1b0767359f588e9c2e6b19405a40ee32816cae9a402204d9b9980c2cf193f6cc38e6ca8796b0e192b055bec5b0c52eeb31b95da466bdd",id:"c65d4ec488a9d907cdbadcb865f4732ee6a0ea2edb8baeafa1e7e76c37237c2a"},{type:0,amount:"1031249725970",fee:"0",recipientId:"ANLRw9k91KW3snAC3NCPhhmzgg9cMgdg6j",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022052dd06e5866b27fe253f1b64dae8d3e1924bdd4666062d7e9384bf77cad2b86102201cea424f053cd156ac65ffbeb703d245b14bb2ba0575aa90d9613a7e8fe4a7c5",id:"5c7bcfce2963fff9eb502e79dcef563274a4c409a93334c3937c3019cbf55185"},{type:0,amount:"1039396454147",fee:"0",recipientId:"AaAUZ1yWFqde5BYXbbUEWFB9FGGpQCcScK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008bf00e9e9954748def806ae413bc38629058e7c2daf5f56c34991b81a61fb7e0022015c587a5adb9e7cc11e4da7f2b6e5f1bc1e8f4f36c99a3fc15fef28390dd2c46",id:"7dbbdba5101c67507ff51e5375318d0aa8a9e3f25de019dd16af2fb62077d6d7"},{type:0,amount:"1040719589660",fee:"0",recipientId:"ALHQ1oorGCEvSPsFNWdYPwRyk3rVvMj2B6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204a48b4446d976bce24fe26d4e666947e59567c29d55254c4a4d986ed2e0af1cb02203147efd709c8bb850861b19c71997a5780e606889ccabddb70ea4f5beebcffeb",id:"b06a6b4aa2f8d71c39b5ab05f1535e521cea4d1a6cd304d56fcb02518e5d37ee"},{type:0,amount:"1041975741930",fee:"0",recipientId:"AZVgPvHxJNtfVaG2YkJn7zPdFdUtk3jL53",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206c33c5318130b31313a7431a249900519d511ee8f2a43986ee37ca6d534aeca802204b833d1bd726a50e0a76edd62600031e215239c7e823c556e53aa225cf5d0691",id:"f9bf139b97f3dee7e627fab2bd00ad2ee7b2ca61ce259c8a9da4c0e33f8e6680"},{type:0,amount:"1049727197915",fee:"0",recipientId:"AQrP3AzVXbRbps1UzCfjDFoCCnc1f19a5o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220333ec0cb3e0cdf420ae2a89997b32607a748333fde1bd62becec1e8231b5a98d02201a424700aba7467ea4141d1d847156b83da94c26acb464cef725f4f8ab36f651",id:"69baefe519ef9cf9c530931b69908efef4ba290f89a014f2fe7c93f7d4f4d3da"},{type:0,amount:"1078361899572",fee:"0",recipientId:"AXhwWcy8HhMYLbiWhUKnZPw28o6HfGJjaN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008ebdc6ea8c2c50965088daffa9b2ec09f1a4548729284ba4aa2e9adf38cb82510220524ce025795ef5cfb044667870375c205818ba4da875e0c3cc4ad6283673d884",id:"fbcced1418f85f3aeb54a66bceb7bfee00708ba6eeaa3d5b7aa85cc841a14536"},{type:0,amount:"1102465913669",fee:"0",recipientId:"ANMuAyS1SD2CfJvuZSi6RQb261gvFSJt1X",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205e2895cfc0f9708d2af9c6008451ffa63461201ccebd7037c81196198f3c25a00220151c81744a95f78670811a8b66995a0f2229be460d5dfd712a7e744f5d56b706",id:"9c19d49856030d283b8772771d575a16c5356413501e2acd042835873fc02cbf"},{type:0,amount:"1102759943784",fee:"0",recipientId:"AVVhvtdbiqHm6zuFnUYbCQCsgfKs7GxJxS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a5a5702c73261b34e2ebb67471524f509588fa51756b267c861b3cc8737c9b6e02204322f7c837883abeaa450b02e6c51e81c90c5a0d41196f046dbdbe0827e1de63",id:"734294bf0236a11b079ee873079c7c4c9f1b85a53750c0cd97fedcb5cdad0074"},{type:0,amount:"1108427216593",fee:"0",recipientId:"AYnxyQgq1j5i7h7AEd1UcYVWeZhip2BPsy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e3c2842f21cc80db48cc3a7fda70e84cf3fed43e68ec7486d2b6316bf94e85f2022040fb1c566bb45142bccea742c68cab0d9093a823c43d623ac6038062393cf171",id:"81ba05c7bfc196047ec8955ddb0ee07ab51176ed9884beac7e59d49e117e7bae"},{type:0,amount:"1109838235948",fee:"0",recipientId:"AJvzuyNaWbYyC8UqDu7hPVBLtB4yEm8ovV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d0159ed2472012ee33ddf9230004b427c7f696bf22eccb67f3ef6320e657a33022000b1dab519c3bf58067af22ddb3fbd1df9144324ed404f0a3f67d7fb2f64f7af",id:"08c1f4dac6b650a1d2e5ca059fabd37ba23a2a8718ae034fa1759e32f0ecfcdf"},{type:0,amount:"1110036076121",fee:"0",recipientId:"AGvTatnwQJR22A5dDEWXvWpfLCCFNu8tof",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205979870c79c60800f61d96ff866cc18b494945f2c805678b9d55650548562e6e02205a070cc7341571569be79255018a01cbe86a1330c1e2b02ad4aec2ab498910aa",id:"9541a811866acc0b84756a38bbf327a40cc96ae00eef7e20a540be4adce3ca69"},{type:0,amount:"1110492080313",fee:"0",recipientId:"AGfChYyMy3ezANVDo7JBECGJxEYGeefPwV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220298aa44e674cfaed265a12495d1ecd96299c34f8ee8beacb597ade8a5b22429c02203b640535bff8f890be8292c5ace7085658b1e71ed361a467945f1d6b97f5a223",id:"b1887110f49e04d53f26b0182321f2cc049877bc774784dd69a856ebae16d260"},{type:0,amount:"1113211377847",fee:"0",recipientId:"AWhG1JweDmRpkT4jbojz4d8QshRZnf1AZr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022060139759d9b0b550c2b108cf60902acd2da2cfbb0747e2782124c478fab51d1202202d51d8bd860b50a5822448e21f35eb97c39deab8cceabff01e30d7865a486fb3",id:"dd436734a516d0647539b60be1932d984dec023de8ec0b3d963bb48e2544da62"},{type:0,amount:"1117612928727",fee:"0",recipientId:"AaTpLPFKjkyMqe1HAzsQvnvVDAPj7pyv6K",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206a305e6563c1eaca84abbe8141f6d16b053e58796933355afd0c004e4b4615f9022022de5f7a2dcb182a421cacb118d5606b3180e54397e535ead5fafb3808640ec5",id:"d946b6d8a8a3a305eaed80a1c5c856dba6b732d0a6f2976d2e1830168d242783"},{type:0,amount:"1127012726593",fee:"0",recipientId:"AdwPm6G4tnxBBgtuB2UCX6kUt8KYv4vm4L",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201527ac126261312ad02383d5481500ac4bd030a800d2d1e8b0eb2e26d5986df90220666b7179f7e9eb56b0a91b43165247d2743083d37f61c773780314fc18d811fd",id:"228725e2039844ee5584f099930f5ab6c1c0185f78e69fd5d418c74abe97e512"},{type:0,amount:"1133071775570",fee:"0",recipientId:"AQsoWhRqcDBKREvizPBDehMYfUMwpfoyts",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f4c04ab56643d9175bd4c8179c2c3efc5743bb2b1149c38a182583c72b2ba1a02206fc46634fdd5548d2ae01950b9e9696ce6b880dcfc59abedd4c62c3757d0783b",id:"71e16485b6b1168dbedc07642c4dcd4295c7d6073b6b12d8c86afddbc392675a"},{type:0,amount:"1135911839174",fee:"0",recipientId:"AUw9RAfTKkMqFky8G7Q3s97cA1NMwsxsK1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d29979af23b1a9156c2a0223a3e5a76ecd62b666452dbc0931590730b0ef15bc02200eff2f5a2cb906c959ee855bf3261db9240d7ddefb5cc52bc1d70d295856ef99",id:"dfd87714aef9d4f11ee8a5383fd9cb8a467e3523a3206eaf99ec66d943bb41d6"},{type:0,amount:"1135911839174",fee:"0",recipientId:"AHkybDKEp9psTVmKPvHzqj47z56BY5UcEc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205d422f18bd80adc6a12a4c8bf2f933fa5a49328137e696e1738f1e5ad0f743e602202522cbfbe59ca0e6d3080cf64011d7eada1505b5984553bcf353b871c2c6513d",id:"7500e3531f8b71b5f4b7aa57e9cfd47de4424a8b7eb5dca89e2f2b9e6f5dc34b"},{type:0,amount:"1136025441718",fee:"0",recipientId:"AKwY5JoLghksohAZG7oEG2JmgZuubyPGVp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bf6dc08b189c178a9201df3e5c32c3e42b534a09c7f676980d47d6d53335848c0220531edd5c8315583016cefb60ed96217a578c14dfcdc4d6ed703c052cc2c2adf6",id:"09bb287a691f3121e58b6f0d862b98e2fc1e6a703594897dada3f2775f8ad9fd"},{type:0,amount:"1136025441718",fee:"0",recipientId:"AdbutZprjH2HAM17xxtqixENbzXPW9Wys5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100df1312b79544c50df8309c5c47227587ffd9a46eacee45787cc56e37be4c0c8502206e7679edcba8ed6fe9bb634fdfc96115005803a8c12cc6292445585761069d4c",id:"d77a533c624889a76d7135695ab9c70217f78ffea9319af6800249ab846800f1"},{type:0,amount:"1136025441718",fee:"0",recipientId:"AJknkVe3o8zMyMVvhLoeoHsgMowWV2gZj6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220090cff705808e2057c9375917aa0e29056143e9e30a4a631cf32be7e9d8f7281022001259193a883851281a9978aa198ede0dc910db7215f1da0aa40c6eb749fdbc4",id:"f0813945e05653ff3b2f3e0f7be0a392e5183f5805efe5fba11d23386cfa310a"},{type:0,amount:"1142768005049",fee:"0",recipientId:"AKjKD5TuG62qWVFPpeca7JGeg5ZSs87F2t",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008c34f0cc07ecff34844dc8b3c59859eb986e4713d2177923de88beded8a00e4302202dda4d34149b8269f5d62b28e18b3c0eff841acb41c7d19a657f673d8f2ae735",id:"f456730f13cabf7d2b355c690cef499f35613b3d9943769770a371d68ceda967"},{type:0,amount:"1143514373646",fee:"0",recipientId:"AVzbLnDifGM3MgLLXGJokYRRaJtCTSDtJf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e5ac125df4c653e04fcfa0ac241245873a2ab254eeaecf65b2e55a9974627da5022026cb84adf8e3f7b3b3acfe181df6cc1e4a1d64f06e9aeed4ee3dd2fc809da404",id:"7084d48327cb27c550dea563c70084c1b113aac2cfc8eaee8da2d2dfd231e7c4"},{type:0,amount:"1166230353463",fee:"0",recipientId:"AdFkX9y3WiLxaeEsdHgTBr3fTUHSzEynGF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc010d5be3aa4448bf37dd53b39cde7efd9112922ff340bd4271e6989ef0a6eb02200a155c4869414d9feb7359b3b7abe7a44dfeb329f70dba2f06679ed5f61943bc",id:"331e701070f52d72d30610165dfc9aa6c0d7077f7fefbf4daac202ed64563323"},{type:0,amount:"1167544630860",fee:"0",recipientId:"ASDGBYEPJkRm16xDXW2uBtzegkmtDX7Fs3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202e7deb619dddea19875e03f43270d03e73f37e48efaff365eda36e2962f676e60220697fe1276d816b0e5b2d6a55f06a0aedc12f76d6f228b07da41213d79d85f2a2",id:"4a2f713400914d0d3a66f565c2d1c9cc39a3f19c12543e2ec418110335a0b596"},{type:0,amount:"1172864247614",fee:"0",recipientId:"AWbSK2Pwu5USnhcQxaraoybLz7XSRRM4JX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100812581fa24ca31fb48b100b3bd5415e16727dd8be600f0f604c03408010055330220032db4b8659cadee9a1b949add6b4ac8fafaf0fca6774898848f3c417c36a180",id:"7dd6f8130f9d3f76512de04ba1c3473ca264e77b0613a2c8a86f3cd791fa659c"},{type:0,amount:"1176120457308",fee:"0",recipientId:"AaRaJMpnL5vKt7ADUsEAbVw3nqnLY6CvMg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220379c7a758df66f5b8e7879119a902aa415fad87c14d36d7288b8565c90310773022074efd40722d365288b37f2e883b4a9c3aaa8dd211762b496649c63e477bf9e48",id:"df44e3d6aea679f21c528cb1e0831f1c2c1a92abf61ba046e05bfe4542b5cad2"},{type:0,amount:"1182001059596",fee:"0",recipientId:"ANZWuhTZmksp11sRpxy1JdT4mymjkdz2ys",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022004f1a606b87c3931b43aa9ad6c39c1b7a4425d7b9463d3fb1165ef64ef3515250220614138bfa85aa722ed98ce55a3a8445c39fdfea6add75b0d780e47f93a45d933",id:"fa762596e4127da262c6663483dacf38836d6efa88c818c9bef23d3c8c265cec"},{type:0,amount:"1185739919799",fee:"0",recipientId:"AV7zqi8PG6BfB3Nud74eC2N3BQA3zi9zCa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220246839d23affac82057511a02b479902a17d163a2df94b950e8cb7757436cbe402201fd4e87363021f4a3d341f8635d61d38010aba3ea51df5e1a10c9af1613db6c3",id:"d3aeecd07fcde727f3e8e8ba0852c7ff5b28adf9da80024cfea7c51f8d2c961d"},{type:0,amount:"1187780964457",fee:"0",recipientId:"ARyuySFRx29xHYMdL7TnKZv3xvBgrWRdep",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201235cf2bb5c1cf1c254fbe24d2337d87d100da46a7f39c211770ebcc937765b802205bbad34509bb0b7f86f8a2807e08be016273cec72bef1ab9bf5457939767832f",id:"b7eadc91dfd13958e6a36963095361b289c1c37c68f0aa3fca1ac4f648440ba5"},{type:0,amount:"1218554570073",fee:"0",recipientId:"AGqGgDyDQdj4stacZznPKNDRbdeQ7z4nfz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e43b353214830892288bbb6ac6da9459ccc205692fc81860f5551b4a6fe8f325022040f1567d23489b76539c272293702890658f1acb22ddaa3e43ec2c50ed293d14",id:"971db6562dad82beef13c4ec839c0d60866e141b03ec2d4a9d63c67e2fc46992"},{type:0,amount:"1226105576744",fee:"0",recipientId:"AbumjiTo1eDMprMELVf5RnCwY4jFYxu5js",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205873b0046921b459e29f8227a7d59181a7abee5d75860c5f941c79a9618351dc0220795169efc3aa3651755c0563b623945bb5aa8908196cc2aa0d1fca2e87f4c6fc",id:"f22ec22f00452a8c00256018006eb2fd665b84932dff56090d95faffeb895a7f"},{type:0,amount:"1241085387065",fee:"0",recipientId:"AGNRsF3qaggSf4N9i9gpmMuGkHBKnLCYqS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6924dec0957658a213b7e04eb24a996018344513ea1a35163b4977bb1db709402205b8d978e83d7c5051c208c33617bf8ab611d63ab376fda7ab8a3ab6917ea0ac2",id:"9137dc5ad77a4c7b7946f24e7e150c2622c15b6d1765f3efa552a386dbec4552"},{type:0,amount:"1248321295924",fee:"0",recipientId:"Ac9WFSBF9MPEjCD1f3G6vWCHtZNT53C538",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c9ff6cd56b1723f0bc7d5e7623bb66ca39e4561b79ed3f6b2e3fc541bd08787e02203b69a4d8b2837be4fc097bdbf174cc41c1b968626d125f497b106c30c6b8f5b7",id:"24d7adecccd21860742650572bf854e50a79d8edd7f23af74b7a41311b3d9917"},{type:0,amount:"1251098136462",fee:"0",recipientId:"AZ8GhCcmNL9HGhLejRShEkbPL4fsDcB6Cw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210087e8c65ba87f0af0fe5966e9d134ba62000972b7a4c5caba161f634141b2e07002205ec3411d77ffff2f5652d2074f622078dee8b8149b0f14b8dc779164ff03a3df",id:"912bb48bb857b0da7007fa875d86644c803c3acc59af672692cb0abe4fd684b3"},{type:0,amount:"1254056287561",fee:"0",recipientId:"ATRX4J1yKRWZwSsNyW2rEHwbgNxaj3SaDG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009eaceaad92bedbcf6a3137ecef0dd7272072662bf6158c82ee8242dfd6a9265d022032b614fd8ddb333c1b7135197649a09e7cfd3ebee617f4b08753fe5011121330",id:"c9eb7cb21ffed293a6dc750757d50b459e5bb98dde6080ba44ea984bb5a3bb81"},{type:0,amount:"1262124265749",fee:"0",recipientId:"APZXrDufYPZd4M6KK6mU3N9i1o5kypmeFB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202dd40b2e9929255d731e525e3f2bc1d49dec2151eb3d65a58424d346b6e1ebb7022050c87541ba7b5da3e891df8b9148b9cc7f84d5e3c185172367b76afb8544c34f",id:"9c0e58750a4580a5efa8c5dab95ec4948feca82e6750647945584406b2b777c7"},{type:0,amount:"1267980213012",fee:"0",recipientId:"AW5XkGBc44rDNynQgVwVSCSyUHd8dt2ap9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202fd98a801d3baf19fa8a77e2e0e5b8d684547744e26856719c37f37ed3e5af3202202b3f071b8daf7f5e57ea7ff8c4b54e46dac73204a72f2ceba6e5de7121f0de82",id:"b0ac53b52314830e2fecf20cac13d0e3c1c33795c55cc15fe575db1caf5e59a0"},{type:0,amount:"1275943681122",fee:"0",recipientId:"AekYhbhVD1qNL6NmWL1tUZTyopAjEjq1FD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc37876c3e04ed282fdab28d5412486eda4952dd02d7cb625cc642409fa0262d0220263503fb14d31513ba463c6fa2bab58838daca4a19dda7604c7708002d576073",id:"17bf45d5a938ff3f0e910d5a75c731196d39553d66152b74cd4f8687241e3c49"},{type:0,amount:"1281318617272",fee:"0",recipientId:"AY6ZLmZrpunUg3XuQZZBSXQCqhUqwdV7Pg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022033eb26e2f3bf589d76033dbb4ab8a726bf495a26068e54782aa26f86edc83cb70220639b4a7648c43a4aae0e4d3cca922b7274aabdaf8096cc1f99aecbb93379cf70",id:"027298b8d2a4425c3b04df6e1200a87e504f79fa7ddf9f8e1453be427d51b5dc"},{type:0,amount:"1283452028431",fee:"0",recipientId:"AZUXnt5f7UDcqCTn8GLMqrqxFumWzc6xdV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022061a17e5dd43b0fe5b0bd9f3a10dc22a004fa2ed372e4668ab3fe162444a4a354022025f7353468432e788a5859f589e4cd840f107b908d496bce9e08a0ae8a48f81c",id:"fb90e727a1fb40e9f09caabc1bdf855f85ada79315a103e6201f4b05b9bc1554"},{type:0,amount:"1290283529798",fee:"0",recipientId:"ASxqjAvYhLchFzgx2jwju4GsUCSQEH3AEP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ee3204265b27ca699266a811730b567a7cc018f07e789156820f4b55bb5dc5a6022037f1b07874363ebac4373e04aa81cdacc8e462d0c8615dec4945254fd78bfdb3",id:"ab1293aa990a9bcf79d2c390946ee548564abe1961227cf01b6ea0e4f99caae8"},{type:0,amount:"1305366622447",fee:"0",recipientId:"AKoaU94wDMKcvDdon237iQ4ygpqVEP13Y3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bf1fcb56c3a81f457103bc035df6f52aa8f37b342db0d24b37d31ab09b345d85022033ea972e903998fd0b87d127f49638d31612c25ddbf176a8f28408da823c5382",id:"e33edc4c6ae458da431e7b3fa0c62bb9f04b900c071887835f9e7168cfe57076"},{type:0,amount:"1307153045859",fee:"0",recipientId:"AYbyHKD2741E6HT7dM2YFnqM9mMPS2yYTd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eb0c6b3da5ea62ad2fc5d1d80b88627f9f88de9787c2369ad41d035fd4e984db02207b78c129b934570c69db9b52b5c47e7e922c64d9c0f6d05beb8b93507e232e3b",id:"b791858333e83013d9a2bc47ee3f32000e2a4b5425093c89e3615af4033bb90f"},{type:0,amount:"1332727985890",fee:"0",recipientId:"AMwPB8oS9vsN2mfaDVXSBZpGPx4cos5Mjt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ed8b29399b29160b2317c2eb075647fdff0f477844348d0c2419f6a99eabc5102205753d822e07f472849206cef2b0bd4e55f7584e793eaf40db6b1a1eb478a65b0",id:"393c15a74a9b38eafdb1b8bc58171ba17bfc61674792a0443abd4a4706674b0a"},{type:0,amount:"1353732126985",fee:"0",recipientId:"AeWDk3U68wyXzwYKrG1eFngLb1PmjEJ4NU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f99a88f1106de48bf260252af1d7c94c0b128bf3a1293b39fa6aa3b39e855671022001c6a107ff261eaf289562ddc495ae5431f2c03eaae98e02d31d186b3891044e",id:"677d0d56c62618704636b51d569670848fdb4e838c1d127a643ade064730d7ae"},{type:0,amount:"1363961613487",fee:"0",recipientId:"AYKGjy1QdNyw1QtuYMKEQiLeeim1PsMGse",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022072093aca8550c3ed5c93ee467e06dda194f02c5434da8b51e8ce1f425f4d6a0e02203b3969a7a176fde24aba664534284790c56aa157e3ab8a6144b2f82e14c328b1",id:"7f8fdbf6de9d41fca6389436ffbf660e670356a289f9b823a335e0c6f33a5fb2"},{type:0,amount:"1368486431867",fee:"0",recipientId:"ALqNN4gFAQ4i6keQYWt19VGVdf6srRw3fu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203fa40db925f8076b84cb54c0442f866c882e25b67274df69d2e668d1713fb702022029b2294f08730eecb92ac2080c7f116ffd3b587ce00ff6907d0ac52b544188c3",id:"0ac5811bb68f5a2b9e1f9516414ae78b9b19d68c9d45abd95a83b45ee5b8245e"},{type:0,amount:"1373148336615",fee:"0",recipientId:"AWBBsjmyW9q9Eu6Esu738Bmhm2ZGZiwqmZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200d6fb95c47336c8107cdda4217db3bbb5c7e6068e82d0e78c158f422d44e473b02202b2c57abf8045984d6a695a1e7396507b47c0e735a38bac8b4731217a618b922",id:"0d8c957621281c5dc06c45fd28fd69d0ae5bebd809f991f077d061e692470b25"},{type:0,amount:"1414800000000",fee:"0",recipientId:"AYsi3kyJfxa5LvhTms3yLbVjLDcwZEuQFU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201f2578fe3f6799f09c4e21ceb01444643676736794accb55e66065b5e2c7823d022057adec3762d37b685973d42c40d03b2c8ec414d3b4d2bb04499816845a358312",id:"0cf6ba6998cc228d806efa6663b4e1024aa417a15e46b5f64225dd86b2e1a2ae"},{type:0,amount:"1445037440539",fee:"0",recipientId:"APNYtJ4DsTAPr7UzmPoQFsdj4GaBT4cDNw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b55aacdbdafbf73aaa8ffdd77638cd52c2e572f68c82cce5a21182d8edef856402203605dc48ec3545efcc2ae67e9dfbc440a3e3fb89133dc2eac0969c65e9d7ea89",id:"a0f5649db4efa028d6eebdee0636a191c1981a80829cf6c2948c0cd3f5c14ff5"},{type:0,amount:"1445600000000",fee:"0",recipientId:"AZ82o4tRxNgRkjzV5GyBDkuaAgnLnUDMTx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220713958c68f4b3f560c9592fcbda9dc2a6be93678f7e08ade6e96370c4eaa26d402202c862c934e996d1dd75dd49ed7204128b81b54b78b431076c997cf97e7747cfa",id:"2fac0236a0c0a9a6bcaf6401293611d1452f338213641627f8db909d47bfd8e8"},{type:0,amount:"1454528664622",fee:"0",recipientId:"AcCh8h1ZmQN5BeJ74rFJKE6hG9KZqbesYT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ca4227b7da265016be665600bc3e7bb20f75d7a65d72c13da8c8d9ab4ce383e2022038ff78d1c5e601365c28d9e6d2e4337a7d9d7d0dbde45c4a4023638fa07e87cd",id:"8ae411cae067cb9b9f15fac37ff5e9ecf9642a135de60053c3ecddc38a498f77"},{type:0,amount:"1466807483534",fee:"0",recipientId:"AFqgu6rcFy6QTXGfN1FxC6sUHY2xCW7uc1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b2f227538d4b7706be16ade8e17139e739a09afe03282f64cc5c545dd1e2dafa02205597c6a4d88ced4a5f1a2773b27b256a9138310ec40c62bde619a99f6b4914f6",id:"2f4c8dab500b1105cc9545363586a417fd7946615170bfad8928f68b145e067c"},{type:0,amount:"1467651315664",fee:"0",recipientId:"AHHrxPEi2Kj5VP6W5ZKegVh49PCV5n1jYG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e97ad561c742835e8d25dfe5e8417892e5b73a5fd29200bd36760092bca344c702202441a37b935457517e87484b64edd8b4d8343eee4e6acfb4a231faf29a079c9e",id:"806e0255fad866d11ce328cadcbe4002bd5a496bb152984bb09344e890d566e7"},{type:0,amount:"1468250973203",fee:"0",recipientId:"AHBAMChcuEmR4GEqhyx8Kwf2uSadixGJ63",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b2484f242f0e10ff6a3c0a6ce4b32c308153788c8d844ea7b8b6f53eb2bc6013022009b277ce199b03c13cee24d7e1f0d0a519f097e783053ed8fb1e85ff174b5533",id:"e024d4271d53d17eee174f952a3577ce724d9f9896036a3c2cd3dfe7680b6853"},{type:0,amount:"1468680421064",fee:"0",recipientId:"ANAjpvQ3YXDaQBdh3uq9UrCzpgdKbyyPec",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220329b1550fb0f30e6e506aa2a818bc28db4f5f83510cffb3e92c5237ed612e3ba02202b595447789bc432db35f5795a9f37a41dcb7c610dd1148fa46748291a08ef74",id:"04ca01893a22c45fc969173c7ae1d0b8f319b6ce02a52cd8439fd40bd7092452"},{type:0,amount:"1468680421064",fee:"0",recipientId:"AZdWJgmHDvj77EmtJeV1WvpBP2iotiGAm1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022022abe78cf54b66aa2968b866a5f2c89b5ba498a10716b87a4f5b1b22294268b002203cc887e61beae4a9b5d1472a25fc5e9e19fa21195710159c19b433b9004fb33b",id:"e1a59241b4186c667e2092a767cad17bcd1e348c0e7507e57783ecaddd8b59a8"},{type:0,amount:"1469630945593",fee:"0",recipientId:"AJduNtdjCT13Xmn1HbRG7DA4H4g4Q6BvaV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210090c7c64fdfd574b1a2e65c070b231e9c99a4fd26d4ab2046d985076c42fc21c90220481c1d8d1458f1dcf7adf39a52fab40a3f3d25830607ce853e20767623fa691c",id:"8bfc8aa67c36db1b6c8db6f65fd89687b83bbf8b45223be0984c084d2d507621"},{type:0,amount:"1470003556578",fee:"0",recipientId:"Ad4QYPyJaqhXRoMKbezNvCREbK5XPa3zhy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205188ab1d4c98d2f7c02b3825701e03b310655fbc44db5931a89432b666ffcf3f02200e1eb5e6220abf42c61477be919ab32c21626dc74dcd14a48c5d6078ac155cec",id:"4029404e82dedf7fa4e8df1e90238546b5fd8009d9cf6457ad8adc7504a1ac00"},{type:0,amount:"1470150571634",fee:"0",recipientId:"AYF11aoSpagfi9wzfzY5PWdsYw8erLzi5N",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204973fbd8f15de9230d6a4cb6f9f3bdda3dc7e1b66abb0d5eca95ad2ab43b4d750220132d7876e371bffb26b076bcc1b68ac7b8719917b25d9f09c597ec58e37bfda4",id:"3112c2354cb4f918d6bab6f765a16084540663423d129abd46a7f98292f6e781"},{type:0,amount:"1470150571635",fee:"0",recipientId:"Abw8geGxqiRSNtAZubYj6CM7NPeWK7VU8t",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220532893083e7e86ced90c28507bc86376998b7fe227c26d44835905dc2c4c3fe20220784051c6f98e86370580c94789326635a2737a3f1d9cbe553c9af5636e4c7a15",id:"508f69085efd61c4ac263c576c0da0e037ca716874a848a3ef14d7cd8fde3487"},{type:0,amount:"1470150571635",fee:"0",recipientId:"AHbf1KCCkWZZYww8dBFjAbSK4oi44ATaNj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207409532c4f13e05ccd6236cc3230bd8c4d8b9fb3335023566af2ec6a22ad545302202dbdccf7e42d4aade9dff05a5a16c5c96e9b8050dd5b2437f3471097f8ad4211",id:"dc3acba04a593a641812a6390fa5b0e63837447f08914576425715f8887c02a3"},{type:0,amount:"1470150571635",fee:"0",recipientId:"AP3uaTgqBZiPz6TFYNJ8zNNcZiNBidyLEa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d44633e422ddb30db8bff2241ffec1290600ac1307393452dc7754e7c0928177022024cf31e3fa2a243218375cc5e66c8f0dfa1df07ec5480196884309b54a4068e8",id:"9273a1dda6e37f1e98206d1c5c89f5c36d869a7a4e59d1134875cfb923b9fff1"},{type:0,amount:"1470150571635",fee:"0",recipientId:"AGuHXDf1v7Hwfobh3P337B2579DBPpjSVs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220278be19de5f1b004e82a31fbb872d3bc14f516c26b56dfd10fc69fa5c724252e02203dddd4e05320b906a2a3945e52b412e12760c0be9e64c9286afa2ed1b907a43c",id:"6dfe84e6247aee21e6df75a25030ac199eb74a7079b01df62095fe507c0f3b53"},{type:0,amount:"1470738631864",fee:"0",recipientId:"AHUF2TeEq2KfWsdKJmKkyb2r7rn1ssxVTD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c5944532bc50d544fbe393d8067585bac4c00239d96d2cec920b16b5e58be22702207e0594792578262ddd6c2ed4f443078a59b17412b835168837f58ea03268e8f2",id:"4e4ec69496a82528dd81743b7121fa8f8337d95a8c960e035ca863c9e9e945ed"},{type:0,amount:"1471620722207",fee:"0",recipientId:"AdDYWwFY9CHymn4k8dbnShiEJZyF1gCTbe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202febe57e819afd13b956afbf988130d00fc6894a72128595b9d3c5c10b7171ca0220127aeee9f9e67b4ced063e09300edb638be7001c3d823bf4873f2fc07c1a8052",id:"c3efc99b197e710b0db3510f26d78676fccff157f80a0043ff70f862b99bb48d"},{type:0,amount:"1476719471690",fee:"0",recipientId:"ARPtgH415JQHtdLmpkyfXm5QvUB9NWWZRY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f9f6c9667ac8300ab05a51955046d8653cdbf93d28678be87e4892502aff5bf8022045b45cc9ba1a05612867c00cb08e881ceae4dc43e0369cad40789edc8dd3ea66",id:"5accfa3b6f5bde03070a900439418bfcf6e333eeaa78a55dd38dda5281f72359"},{type:0,amount:"1501867950683",fee:"0",recipientId:"AaZMdjLc3oc2VU79SWzjaM8N6QQxD9JXsp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a4efa1b07b43cdb06620c1ef7cc124505d440620ac4533bfd20d609d038b0018022050a04b85c435ad086578e698d11bcf35256cde10769c69945e144ea5b369a5b8",id:"99e166bd676b85006a59c88b96bafd199145e0464e120a72630a18886fe93347"},{type:0,amount:"1521031173923",fee:"0",recipientId:"AHGrL6VPzSfw2kGfTZWFLN9hJxh11NLvRH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022009ce1f620f2978fde9d02d346f69178a5339d0d34d229c9303a6bf3b0d390c7d022052bd984b7abf23e6e1f71f6c532a94eb92fa99a1b1a6683249ca16c93610e06e",id:"cd80da60be2804c472b529b4e41b3117d2c54b37047fe32363431735f21f4771"},{type:0,amount:"1538544082336",fee:"0",recipientId:"Adse4g6EQzevtFtxCaymFKNTXfiqT8q3i3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e4d2f7d9ee5804329bcb4a16f1a925878dcc4f35d2462bbbc0e5dd63d6c5d86022039db901cb2fd1af4827f7c902cbf9d3758d56abaa3c2673f9a36eef29237bc4a",id:"16d0f95017cd07ec7ee5fb6b9a34cc55b4f3a43b7e551a8a2117fb22117cbe13"},{type:0,amount:"1543246790015",fee:"0",recipientId:"ALreqLXn9X6tcgYfw7LD1WYYk7Pt77kdUd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e5d85a41b1562fb3238d3e5fee2f4374b794aec61600ecf1eeaf745ec90b699402202b87a4c0574ee646af802ec7f4ccacfa7d6163c70f169b03384bbacde592b398",id:"b0078a99ab5fd8889b072e2022171a7eb345aef853d5d097a78b761989a260c6"},{type:0,amount:"1544792613177",fee:"0",recipientId:"AWuvoaPLVWvzGLAdJhSAY4gdLnTB5uEJdi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a74e828d11fd810da6ce5be317d67c6795cb1bc02ebef637ff8d0f9de8c00412022073c5c9da3fae7a882d34d29ef370cede0e7b3fdef0ee054e72c659b0dbb25b71",id:"eb3495c47848de6b51b7d60f0918727bbd598a58625a3e308353dc27cbe2987b"},{type:0,amount:"1544843298795",fee:"0",recipientId:"AGWDijB8AcjiwxYTB6eybHiV9qeaFXPmsq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201c541b0daa00bdb881cf99ccff32f8c04575e14f55e0987ddaaa9e83079ca420022042d986fda9b4e961d5487e602f78aa3c982bd4e0f9601ce33ca5b0be2cb51332",id:"cb64a6bb232fe4a160ef8a96b6f34bc76e8d1f1355edf969e0e1956886384aae"},{type:0,amount:"1551677103335",fee:"0",recipientId:"ASqxPCEkpFj8ziJ6j4FY8pC3AmMXXT1KtR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ecf1d28c1dfbc54be58569ec5f273008330340ab70df7629243b096e32357ff502205f9b0ed9cf1b7d7ee02b6e7a06799da79566c831cbbbb663b56b52b56f2f8632",id:"18fc455a58a3d42ae22c76540f497b5c1e74887612b6fb6128f6930d466fb6ca"},{type:0,amount:"1557630114327",fee:"0",recipientId:"AYi6DEzFoDBwrRjj7sT78hXJGayRm3tZMm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008ce7aae30ea9cb91237a4a646db6408a52917eef521c4575bb94e8a4a95e25b80220356cea901142679c62987b9d6f36b82029860226a46fc3e056c8120588658144",id:"e76471ed188cf048233c7114f4cf26d21b24e77b4e4c4e297cdc3e02645ab56b"},{type:0,amount:"1590480695140",fee:"0",recipientId:"AWevRPHEGJfM4rn2BRV435fKi3AAnZZuxP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3043021f73eefa8d4dda995031746278feb82015905014306cab9766abb3d428d82fde02205852d35a40e3cf3a0113295ae54c76b4465bfbe46b67eaba24b2cb2590ff4b7a",id:"03d82bd53b9b6bb359d6773a6ef3fd340664e1946f8bd02cbda99e53fa35ba69"},{type:0,amount:"1591288549068",fee:"0",recipientId:"AUkNoFqcTkMpPbvSx6FH5HPssnuWeUN1Wy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6ed9dac47067252fcf8bdaee46e90445a60b818d130f96755cfef8aed8c03830220139448b9a28051a55cf48f54f3162f7279e13e6a987a15b020d3d96a7e9cc3c9",id:"cba7cd24daeb4cbb94a63f729b6f4628bba3c878b09af82c6d81dcee220e8bd2"},{type:0,amount:"1598561495493",fee:"0",recipientId:"AGwteprikJgukHmkfyLepCefswocmkeJts",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203fd3b520f78acab6d4319657c1995b3abde676c85271af58fd8439fa41ac256502204add7191ae8d36d8028151d67956c891f67bf80b1cc3762fdf0871087a2ce8b1",id:"296c9e5c6c5f2fb5d7008c3b6d5191a02aa7410fc8efe451f8ced624d60de865"},{type:0,amount:"1603639652925",fee:"0",recipientId:"AGQZLKtm74nXFBFvQX954zsXpBCVz6Vs6W",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eae62745fa946e1d39d8f12c6a0f965c2dd95e709a728bd2b4aa800b8174ca0b0220529f3a59374eaf4208b8f6273d90af22dce3d183624fbe50b0ec49fa3dfc1519",id:"fca0223018570612e9d70ae707868624c6c7b9b42209077bfa7eedaecb136b86"},{type:0,amount:"1605551439283",fee:"0",recipientId:"AH5EBGfkjr5UewU4Pkdk4X32FZUacp1wib",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022020d4c8eae1b41ba868e1796068e109d48cc208a5eeb374318c448b2aa21003d70220323a6f9fab9bc56481e8d6ff37be611370aad7957f8b0506688e20084466460d",id:"069a53a5dfb9ee6058e1202769e25903a014b12df9e4a815874bb4675e95ab37"},{type:0,amount:"1608266337418",fee:"0",recipientId:"AXsBCKFEyrq1TmAyBHBFX6Fs2iLfg7qYsB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200fa692b85aabb7c9cd1c23288ab8c3c51707598b7e4067ffc018f27a2428e37b02204dd58f775a2ce3340d1ece51a2133b628cf79e26df11dc75669c2f44b2e58df7",id:"399cd9f4dcfdd54a47fff7d51568cb6525e54332251a623a94c8497b228a88bd"},{type:0,amount:"1612755177084",fee:"0",recipientId:"AbjtH1c5sw2cPFu9D7cCDNU5dchyWERKV6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f78f0db05853c6639d8ab877bae34a93f65ec3001b62a313d0790c1f08429b9702200133bc555e10405721c43638af4b77eaa4c57b73c64f786ee40df2f4827d9f7d",id:"fcf8f52e8b0a6ea3d181ca56067bb44d93f744e28aedbbcdb8e06ffeef189db0"},{type:0,amount:"1615695478227",fee:"0",recipientId:"ATQZen8h9DzHAt7HgPAwzcWfAC6CaTH4dp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203b9df7a00baac5b1c3b61b590455967d9a38701ef39fbc4e3e37d1c74631f0c202205625993ab0006b2b2d65b0b28871765a4345a6482cf2aa42d0d1ebc503f6ac93",id:"c13207f4ba76d22fe47a1d538019c73ac6652dd7b6351a4222ddc158950e9958"},{type:0,amount:"1632724842016",fee:"0",recipientId:"AMbioVwHwrkTYHt4zqt1r577Z4Y5tgWwJH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210084ed4b704b13b31aba705cdfc9df95fa552f0254e97f89371e9488d672aa337d02206ca6ec6c2cda84cc0534d21a4e74d8782f11aaa5690668ab17768bd97abafa9e",id:"18ae7a152adcb4616d7f396119eab66060b48e66553a4562737e95244dc2cf8b"},{type:0,amount:"1635164836036",fee:"0",recipientId:"Adkm397wm32bW55AE1kQTGyk1t6NCz7sfP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c749b79487813d5201670106a0cf10f990e795c5405801c66e3fda6b7bb8515f022012a06e81726ef353b47297609051d850caba385828b5d9a4e044f1e5edb32471",id:"e583c7aa0cf2bb4da4d9886b55b893ce1b1052ba6d79ee510e7f58c273c8b1c3"},{type:0,amount:"1658329844804",fee:"0",recipientId:"AGvf9xsh3xgCMSnoCYLembrzthHqGJdwbM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200a16ffd1d50f85db3ea81de649a38892df46548d4b69ac6ba8e1cb610bca9be6022005f0b9d13821099d92a8fe5662389f439c232e3da0a024dd43cd5eea7ab4fe21",id:"aa4d7b90b4c1fbbd4297a23df89b89a84c9c912f03af1a9bb4dcf77dd52b794b"},{type:0,amount:"1672675483771",fee:"0",recipientId:"AMW2gACZ82N8CNgjFL4q5bzC6dRwpave6f",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200fd4245350f29e79b767acd442c893689dbbe3fe5c6d0b1bb40d3d7d8f4e0dbc02200f0d67c711afabfc3d38324236f051384229ab00f1f9a698627567b8f73460c2",id:"a8870e6e74479438af8e464c62dcabafbe785b01824e078e1e121bfff01e880f"},{type:0,amount:"1738465434518",fee:"0",recipientId:"AKFT9sF88rSg7rvy3gvMEJJ8LaYsbEsYH7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa6c33a957f7b2b26549f37208c4ab1d968161f531cc2c681c863acaaa90627f02203138faffd5b376854a9e6d7080b2850d571f07b1a2c7c58113dfc105c6318f54",id:"b416130c8a04526c058e7dd56d79161c989f0cfcd83aaa798e6235ee6fcc3c57"},{type:0,amount:"1742839839455",fee:"0",recipientId:"AMXgwGKJbUt9NT5qEMwY2dxUVQquQDBrTv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220537c4ad8333d6c27ae2d4b5e3822242efa493084a984db369f4538f61fd55cb302205a054469d04d99e8d3e57f47ce237178014ea4c7c33c7e05f5bab627901b1e20",id:"d5355bc6a2601705af7f537514f45a838246dd11a95c2b33bd3a3bb2461bc89d"},{type:0,amount:"1775549503277",fee:"0",recipientId:"AWGk5PUpJCLBr9GppUnNY9ryL5RhbstthX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cd7bf83928c227b964f34cc5d55483743a1ccdf17f778f14bde1bde676a7051d022034e2bb957bdf212377580f3b6a7ac3024179b1aaa0dfe57e9cf76c32f37ecf6d",id:"ee657127722958204f85897e7825ffec69af1504e20ade4076b07aefdeb263cf"},{type:0,amount:"1812187469576",fee:"0",recipientId:"AReskqQAtGi73GHG6tLyGxpyZKAw6kyhko",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f7d097824b01b8a9d290ac4f7c80cc8bd5f32ef07b22768ab289ae39048b2b2902205bff5fcf23fbcdfe1f60cdd017fe790153ee783facc851af6a65b7e2cde0cbfa",id:"3641ee56bb7b499407222f68f9b0432c80b7e6a32a8515f8c5c08ee38bcbdf8c"},{type:0,amount:"1847900000000",fee:"0",recipientId:"ALCuA5ST57RnThByiyCGYti1rFFpy2vaPy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210088f32afedbe40f6ce661f0e828f6815288b96d78409c0067578bc016149d05c0022018dfcd5230d3fca401a478120a60a153c027212107b380c8f428e3991775d067",id:"ad9154e66ae59ac9f80f524568452bca4f00455ecfbfc25ab89652ec84f26c08"},{type:0,amount:"1849124693198",fee:"0",recipientId:"AbpeUAgMG9Zk1XsLfPcNshwumea7mkekBZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022012c3db569ba5f74749d21752f16fe382493c639d383aa30d9bc85ffbdb3dd1c002200dcce7a238a59263badcb59d57e531933ca1264161aec6f04e44e5c87a6767c1",id:"f5615283d55e13b2b690b281bdcc412f9d87493b212d2b6b76d529e54d0a6b32"},{type:0,amount:"1876941234807",fee:"0",recipientId:"AdBizdK3H7zfp6cnpAsAi9uR2fvJNQSFd9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d595be37c3d0bc9d54b9746e84d92ea5d28f1a39df6c0ead2ab145191f95bb4e022020c5ece72829027083379f47cffe67674d4f4ee5e98f9eab80ad16b2fb44a4e4",id:"8bb71be1a515fcfdce9a10be706054e87bfd64cabc0e2ad958569ae7a03068a2"},{type:0,amount:"1891934510958",fee:"0",recipientId:"AKxpcA6iVjFtxKzcW8H1EvQY7nz2qrkGFT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205e4a8eb13b197165a479dd3c0aa6ef0d06a011ab5fc429de4b25021fed9024ab022061c25125f58c392d7d10d9b060edfd3a55df16009b3b50ed6b7825be84e0c375",id:"06f4102c8d21139312432f58fc981d0e183a97c6726506f8ea1ea71e5957c4fc"},{type:0,amount:"1895283091114",fee:"0",recipientId:"AYR4E6VBw7Ut1ygyvwLxbwDYtsLHrq7T7Q",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022012c4b05c360635a515a257733ed66d9f100fd39810beba85b4014c21c068bcd30220090c79f001b853f4e38c3df7f043fc8c7c2c683fd2f2572a01e38d11f4219d88",id:"bb54551895feb42ba8c85355084adb36d7dff452ef87dd411558a07356989cae"},{type:0,amount:"1903697975211",fee:"0",recipientId:"AbT1VtooS3gA8M6KRT4Fy98tFzaTg5N9Gk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a905b417aa0cd3b7f1b195254e15bbe303e0e59d7e2f7007889e0615bfaf945b02204050e412101f519179944471aaa65e6d32045138a45631fce10b18e31a05748c",id:"3f1f30abd5977c35300930eb6a8af9b16f78ee602cbfeabbc3870149d0144c57"},{type:0,amount:"1909607394110",fee:"0",recipientId:"AZt4XTwHPBLEhr6vkLEYX1b1RKmAN8Yit3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f5fcda2c42c4756ee68e460366d4ee509299d67559a4ce904dc22adb03d8422c02204be79c434dad458962e524da2e99ab10116c61374ac17bc880dfc5061827bf61",id:"8c4192958e2a40b7ac6886d39d6324a17d4c05c9c7e96da6bf6316742f2a7b7f"},{type:0,amount:"1911195743126",fee:"0",recipientId:"ATd8DeNiNgb7R4uiQGyGNLYkq1q7FhikGk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e2d7e0d4153794e41d90c9cfdf873867f46da8fb73d4bf5df8250f782d4a4de02204c2c78faf8a805d97119e09e77c132630f7d525bed291fcc40b019e71bc85490",id:"cddf63350558f510f3bd2bb86009c71bd39f75d36ea1bb245bf4b3af761f2e1c"},{type:0,amount:"1940598754559",fee:"0",recipientId:"AYeUdkzuGw84sPXgFBdLjfjXtG6SsJ2Rjg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220621146cc0eb8596f176a16040fa8832112c2fc19b49c5a4a1ba830de141df6b202202f1a8232b2057dd529355fc4aec34ca4825630d203182f02880de2efe342d736",id:"00f4cf49905ea8c652b71c522fb8bd19ddecde1d2e8feb1ee2961fcdf7034a04"},{type:0,amount:"1941422708032",fee:"0",recipientId:"AeVN8SgGb4mUYCjHVCCmWfw8h7WHb8LApw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203d2d268ff5c91f54eba179cdc53b51726f6eaa3c1dfc3598be7e444c12a5575a02201cd9dd296215e16ebc511146fbda0989c8a41051dcb07d62f9fd4622bfcbf27e",id:"fb2a707333b3286f4d44b61db19a2e617bbe3592de77da45695444b62fc0a5fb"},{type:0,amount:"1946861217599",fee:"0",recipientId:"AGueDNGxUQRDsGUa9aSPw53XKNgNPjUAia",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a8a10c8b659087d985de4bbd6166a9f2c5f8cd46e28be26b2f9babe3a2d063c80220460ce29b3f0327359a4028ad600d25bcb25634f19bd9b3d8e4a3014b2b9636f8",id:"e127b243ad79cbf966ab4b1c77b45e6657fbb5f49e4cc3a96406887e2ce4637c"},{type:0,amount:"1949845628984",fee:"0",recipientId:"ARsJyHCQ8YnDZYm8v2sE51e1qtGnK3SdMo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f82068304b6f191b9452c1160caede73592d36d75a00beb74a9af9f1886715eb02206b38b09daf8e9184cb91130165227fbf05e94b835a7399d4ba07ff8bca6c1179",id:"6ed82d8c0071b52aa28e9674e012ba28759081f527a793da1161fc32d058bcc5"},{type:0,amount:"1973042309220",fee:"0",recipientId:"AML7Pg7WEuKaEWAM52rAUfv3RWE8BAbp7i",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204806c034f7027b71d645ab6df4134ce5c2861e479b9ce8a608669221fa1f9991022052ff1460577ba1674b6a15ccc505b53749bd6fdb8f0d1e3dfa596ca91bc956cb",id:"5d719b936209fc04fbf9e118b78c688ae6b586d0d9ffac1cf88225f47e2c37e6"},{type:0,amount:"1973887957498",fee:"0",recipientId:"AcSTQCTesrVHnvoAK8r1bwZ9CpDqiPmRK1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201ee8cf1f90aee896e63feb920df725b6897c6d4cf0723198abe4dcb65fd6359702203e5307a6831a54072cf564804482661789e2c78b9c189760ef1b33579de60d56",id:"5b82367f3b78997169ed9fcba1e4eefa8054c96b64d2bd30d12f18f2a364444d"},{type:0,amount:"1991239524027",fee:"0",recipientId:"AGhLhXKXAUWDZRS3skaEVMzpcyeqCyE6as",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022019f81fc2e04573a9ec9ffcd4c6504da8d206467a742c8d9cbf96d1980ab77ff2022050b0746effd9c253e61dc8f89b015b4256764292860db88eb9a6832c33812b66",id:"b62ecd68c562fa705d41d59b3f871934b7a5594a89354cbce472c9772e100393"},{type:0,amount:"2000000000000",fee:"0",recipientId:"AVMX3Y79qXSHBk6tUrcLAeKh9C25xtyJVL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100edcdf6bd19aa85b0c2078804a9a021847592dce74d2dcdddb38a0ece549a080c022057316f1c9f36d89f08ad9020385c16fed5bc088f12e588166fc984e9b0c6fda4",id:"4a26a119361e812cb7fa868b10ad2c903dcb681418113abe72c610afd4c1475a"},{type:0,amount:"2007149179076",fee:"0",recipientId:"ARLoK9ABM7bFmaqLMaEBbfTVvsXqyYaeXV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e924d9016e8ed30d3e06fbea56d70c05b670b6a9d6999a039b93b0d436357b25022015da3def5243cdac0d0baa92e8f695a5018e06da5155d17f7f48dd7814341b3a",id:"f40dec591c02dae1e1eb176583476d7a7e291ee5f6be1741b9ba3c0e97013f1a"},{type:0,amount:"2020119321574",fee:"0",recipientId:"AL4youLTt6UXwxXWmqzAxznH2aPEekZCpf",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b4c556e5c648045ac2cb50aea26bfc158506a494c66bfff2d22941ab8a3f6af902206b6560e4d19bbf8b770c2ea0cacca973f94e683b38df2a00d81727d4bc0b41a0",id:"394ffc5b4a91e6dd81621246ca0a1070f3b451aaeca3f1ad48c4a4186409079f"},{type:0,amount:"2048474511235",fee:"0",recipientId:"AGsx5dwwQju71REuRJd8iv8AAo6wuo2Hhj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210083dab3dbab91f91a9f7bbb3fd91b16c5457fe84e918d475cb7e544d09466c8380220504deee2a01460cc9dfe7be2531f92ed2b14a6923bc6bdb02ad1131803fc7b28",id:"0c1e0d578f3f6afcdf8d0406ea5478ade1c52d87b31153fcde6c6345cb0db9c2"},{type:0,amount:"2058848207492",fee:"0",recipientId:"ALcc4t52pgbFF1iZ1dntq8oK1TjprrckKT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008ebec56c81cce72ade2152091e9771c0c9b46c411f17c49272b1647466b4d1bb022022bb7763cfb7af70ab4d97d6301db9a96046225be25b50234a5e1bc868e978e4",id:"e3e18ce2031b8052143296bee5317ba5013b6df080a1a222fcd41af5a3263398"},{type:0,amount:"2061097549268",fee:"0",recipientId:"AFpxF8SMNEMaBjhw5NKdydhfU9zeDByEnK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100df0a94e388245d9cc205bd2739d9e17f02964f957707a88a51aaf03d029fb58f02204fe22271ef442b7364541ce62a5d833bdf061d8c6c3d78809a243e26428b2f05",id:"a91fab928d30719452a7890dc5d7b4bf323642923ee6e99c7e12aef8eb5ed821"},{type:0,amount:"2061097549268",fee:"0",recipientId:"AbfyMpZLZXJukJ1jCLkQaDdxU8hRMCroHM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203b386391a09c598649acf2575dabb917adcb14572a60f1ea8cbdfeeb4557549902200d3e0c146cd9d726ab91b215b817dbe68adc25dd8f506dec264445062dfff1ea",id:"0c1c747f9e680eb8199584b1f2a9b3b855db0f700e61ef3041f4b9388bb0c826"},{type:0,amount:"2066612412189",fee:"0",recipientId:"AMgiiG8wXhd16NBjazW2je1hK9pfanLyMV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204c5afff450f8735039b04fb34b6324136842b66fce3e1e87fb5cefbd23d1384c02203364cf3f9b63c10e14909c7ba9aa6d442da124bf257c707277a8167a05bf894e",id:"142834112cc331aabf1f30dbcec6c6a538c9b47927eb71ffc30083f8322bb224"},{type:0,amount:"2109666070297",fee:"0",recipientId:"APJ25Fek6dNkA3jEExkyG67UAzrDRvPxf4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022047b3d2953eb0b6e1834bb77053b207444fdf49669578ae639e062eaccb721c9b02204d142ead55d393dc0557b1d4b417e71cef41ef65623ffb5bde6e56665da2db91",id:"439911c5383eb2e090858e43740e9272b7053d4709c455a5fdf21ed46569a591"},{type:0,amount:"2153677032409",fee:"0",recipientId:"AXtyzwP8X29Ddr5KUy6GuuxWibW2eNypng",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009ce7072f8d3bf7866b357aa36b475f3eb102e31caeae5d8d3c6a39d8f3c39a4a0220636f0f46dbd6a477194025d39f2db234449195b53798fbd03ce3e2ec3c86edb7",id:"dc9c7ec06d60f03495f590e1e46a6283db8cf62dcfd2186fc65249f4ddf51074"},{type:0,amount:"2163834169022",fee:"0",recipientId:"AaJxRN92BCtogWtzRUrHJC8TWqSswRJGA5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207120a932e96c536e2c2f051546d173f3c58bfc83946fbddb0f991431da9f685a02202ebb91ef9238d05341afd2012ba2bd456a54d2bfc20d22ce3d10d4a618ebc5a7",id:"fb426988eabaa074956707a42bdf4adf3a0c10cd719a6c4cd6fb2828fa9b7c53"},{type:0,amount:"2184588569625",fee:"0",recipientId:"AXKzjecNQcpJvwpm72ZE2DDkf3c6qV9FQz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204dc5f6f772f7843dca653edee6da99c709d3efcb585092d3b563fbb58ef9ee93022011ad3b1c4226208c88fbe189f9a40fc22964d8336fdc290d3051840a20006499",id:"7853c4e80e57ad1152b9b7c8f7e8e1f6d5aa849ae1f0b5a3732121ae11b929c3"},{type:0,amount:"2191161363601",fee:"0",recipientId:"ARV6tjuLPdAAJFhTeho2KbZ3caMXNChvwK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e9fa2dd98b2518aaf44488865877488f3413caa3f38d70d690b8693519f96a7f02202959afa89b20dfc55786c82a636edc53260290744beb427150b506b666414da6",id:"0e73c449c0116a23ef5abb5993be907794353557601e0a39e96da882a7c948d8"},{type:0,amount:"2204931827339",fee:"0",recipientId:"AaUvDwmuhLvZRwmW8epsDmRQfLh11ufUzH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009ebbd2c288878988a5f18a448ec7c33adaeecc203084620f2f98b3c74960ae6402204014eecc985db4e8d94b92e94148453480f526521a604c2222b3c04b90fcea17",id:"8e95a6db2d145e700e36e08a413e0d0f2a6f23d0640f468be65b73b56469ffde"},{type:0,amount:"2205078842396",fee:"0",recipientId:"AJuvjPUQHDYkiV5R9QQrAmKQqMsdCiyW9k",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206083b54d4879edb8e02dcd5828e6117ee97624ac9f1381da575ca3654d7da3ad02201effb3b78038dfbb482cc8d60a8096c77fb351387cbeb5b1fe7423d1aac34c67",id:"bf0dad6cac85409e568de7d2ec72bf9a649a5a78e2f2d49c2096800e05dff8bc"},{type:0,amount:"2205225857453",fee:"0",recipientId:"AdeDz2SgSHtNSS49qk89UQoosmM9nSn8yW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022060fb58e2b791d584bb622cbfbb9ae89489a68b63cd292445db2bb82c60031025022065952795086ac1cd075d4b2fb58356579b3000948628d8a0cd91170eff57a83a",id:"7acf01f865d9e3b0172fd107b066a11d10e561a233af85c325a1891ab695b94a"},{type:0,amount:"2241213029168",fee:"0",recipientId:"AcRFukzbp9dcnpAfhUR7tKr2T9TP9ysr8E",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c9efa61ad9f4ac61a62a753d773e5f5b07c68348d41f651ce11b4381403dbe9202205397961b89303df542243d52407a2f3d1d1314b7f419818fef1b6a5a172a7b9a",id:"68995bfad121ad8d25068bd9f6a1c7442730220b39cc002a41650ff3a38221b4"},{type:0,amount:"2248243233437",fee:"0",recipientId:"AeZ1HHc1d6eg8P42i6fVcJVKsXw8Eo32hT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022047e447051f960a6d1e554a72640858c8557099de95f891b692f44b15ca6b85d102207a4d3e483e26de4de2de0c337ad2bbb581312cfcb77f806d320d88103a1aa227",id:"7eb9c09a76d966babff5fef1db9a160af8885f4545fa1da2cba9baf5b64cebe7"},{type:0,amount:"2262177091195",fee:"0",recipientId:"AJzzwPzzyDCiDc23uQ2u7AMywkfzaVCcWt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206772491d6df99e5475ed8609d3a35a646b77fe85b81aa0cbcd5a79ea725a0f6602205b19e267638b99baa4990e16ccdab0ebfbe2a9130618c83c30ff9f8fd750eb2a",id:"fd90da851810e57219244396325da5e2064640daf9ba6114102aabff880414ca"},{type:0,amount:"2266868808469",fee:"0",recipientId:"ALNvcAUuj1GRHaTvDcEj3J2LJrpbigMfTd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b0e14408162136a3d9a103e113d860643cb583e260bed70db986b548167bdd1d02201e3cd6711b3a5a47b07cc79a2a0fd24d701003ee54bf4e96c34feaae11586bcd",id:"997f9a8497ee44bce5675df192fbef70e582563d5a8d6774a10a38c1ffc870e9"},{type:0,amount:"2271096947063",fee:"0",recipientId:"AKU5SETsMF21C4QNxSAFEuMtucEVZbHrbT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220405439f374319ae7818197cd605c29f981ec33ae5e5d8ff63daa6c28b79a12fd02204afb1feecba0339d1f6858f00f45053c4fe891a041a810df553c0274b8da8837",id:"625cabdf0b3e0ec7461e182b037d5050566ed0cfc96daeee199fec7372b428c9"},{type:0,amount:"2272050883436",fee:"0",recipientId:"Ad3NrB9ak5ASf4k7u8UsMUw62onx7t7c5T",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210093ef0463dc9e57cf30e412631760d1f8c9546fabac8d02a81d4450c1b0225fc7022034d6e9612a01b53cbca18c08c95ded5ecf9e16486772e910e857e32dd7fcc8d6",id:"56ec4d726f2f6eb3bdbf96201d7bd4ec0dc76222145e4aab469a5a8031bc0897"},{type:0,amount:"2276774784522",fee:"0",recipientId:"ASdJV1rBGrv8hr3n6PAzyEstMMaeKRC9r7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022073089b31090a9893b58f7d356e2ab39709f213bc753efe142dce1028a18fcc85022027516343ec493797a210a0eded5d162f612c19221ee758925bd0bff3b9a38a4d",id:"b2f66b94ccca70109adff57f5b0327c01fb8b1cf9266cc5d34e67c1078619b6b"},{type:0,amount:"2287751179042",fee:"0",recipientId:"AQG5AyRdBMK1EiAxjtzumHBKTz5fQziJaQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203358a1b09882d61785e37ac06243189f37c429a08c245dcb9cd302d67bc23a89022036c0830ea03b7fc64d9d673d83d99d5001a39487d5207983a09a6b2bb45e8b70",id:"27f99bcaff31983a34701f2db5614995f09298ec428508c0ef310abca3a17156"},{type:0,amount:"2318734742927",fee:"0",recipientId:"AHWbM4U2eC5G8GqhEXjKjyjQ14gE2uz8WB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206f65c7a1ff3c846ba9ecc55cc3485c498ea01d316a456d7044e801dc910edfde022057487ee7c70aa9f4920bd4a32759569e2dda24d493d427c1a1aa2cc92b6f860b",id:"726d10604f15f9e5007445f0b8f829d8811952a0b9f81895fa673d45e579a8e4"},{type:0,amount:"2328424475356",fee:"0",recipientId:"Ad9T3DbNPoF7SnCuhBEMQwHuiKjEXmhTFn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220725c7b21c8cf49ce86093c81ff5079c5f3ad6a7955529a52354e01c8b93db64502204463fa21a31a3cd7fac42e62f0e304ad7861d71c7eed6114e1c64cd37ade9438",id:"66ecd1311f19281f119c8bbbd34d6f32daceb58f2c747c32bac3821d1b22bc36"},{type:0,amount:"2338875909420",fee:"0",recipientId:"AH5nQnHDEueDsMA1oL4AxTYgPkGgzrPPv4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210093df608b5fc963f1724fbb3f0e3e3c52c1642b17330988bfa45d7e28b143f7af02203b04d3b802038a17bef863ba2e2e17f1a288ae1764ef61e7410643017643f054",id:"1446fe4a270106969f516ddb59b0d145c4df5ef0c58aaea92e16d4e73d4edf17"},{type:0,amount:"2356684778844",fee:"0",recipientId:"AeNyCDJoThuMtgGCqo36Qj1RxiLzp2wKfX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c7ae57e20b74727add16c03acabc3f2ee6e8e200651ed2dfdb973f3137cbad9d02201c33c46ac75f9d1183ce4a60bfdaf72021415676828992f5b4bb4a15bf8b06a3",id:"8e4d777e325bb6e75f240dc86f0def43fd27a1d7db6efeae8af457fb4a0e5a7c"},{type:0,amount:"2366781260994",fee:"0",recipientId:"AGog6GdAzTgGhYXuifWnrKvK8VAPaEhe3U",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210097204cf3140ccc71aa07a31cc969dd5b532d8ffbbe936581b08914982e823033022063df68f995e5b8f76d391cf7faea9b34fdb2b3b26db5ec42dc94055efafb86b2",id:"250af0610058d8455a4efe16382bc4b0cb0d3206cbb288333ac3550ceb44cda9"},{type:0,amount:"2372499252388",fee:"0",recipientId:"AQRccct6eua3CnzgReDsYVdZhjJEGa55fM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022048fcfeda36ed20495c633c7b1e671a306df8229e2a7d4a75547c81b8af509742022066b8f68d2adae68654bb0fd01d56c817b45f1d5fe686c1a180fb53f9109ebefb",id:"72c59a55be7083859a7fcbf1e4b9d5e3f39013b292c812fc61a83b07d44aca4a"},{type:0,amount:"2381643926049",fee:"0",recipientId:"AGvdP9o1xDU5HB9ZfFEBKTN9Td97rka9GG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a95fbdf4d29b7d8d00bf352f5c0faae88fd0c6954119c1e7de8624c539efedd702200aaa95e4924771e70dafc892933be295c372f3d7614058f34f6568955e60e3d7",id:"c4be55dbb512485ddcfa1a44a64b77f72f6a623ba28a1ed74f7e164759921b69"},{type:0,amount:"2411046937482",fee:"0",recipientId:"AS4BtWoaap3AVmgxh8cQj3xkcd7dkWfK1J",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d2efa679287190ad29fd7fbe91978ce07dd5819acfc9f08b12e9aca27c5d9fee02207da29d7168e36a88509b6d73344e461635bbb009e1203bff8c6ea31068f8b2c0",id:"dca8904b7776d845555706aa639fbaae9e6ae4d6d912c796a41e793dc2030d6f"},{type:0,amount:"2421793988476",fee:"0",recipientId:"AGErCuSAoSpZNQ7ubeV4HSuHrwoxGQoBbq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c9947449ab96e6ebafcae96a6c080669ce3045f711e0ea1bce651061cb054d7b02204bd9e3e1fa0bbb0923571ddafa6943c69ca2096fd82dde9a0fea4e3eace6bbdf",id:"c36be7fc674eef93fff38d284a209599ffab56eace2e569f9f05db0ebbc98e8c"},{type:0,amount:"2424820646199",fee:"0",recipientId:"ANgyLRoKJC7a6RLUJw4nkkrL1Rni5eYs5i",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022040b3f827c57219cac01e956cb5aec623fcee151b57225ac06edf7fbea1d86521022021808f0d44f5a50c7f35a25e40c0034b7831deb627f8c2922ded0b406a00cc63",id:"f3f300b5fb8de1f81c863737617f45c4b67f80fbfb7b72cb4a4e0423718df75e"},{type:0,amount:"2440155918800",fee:"0",recipientId:"Ab9oevZRRtixxzvZjVA5jJrjxi1kwWhUN3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201a6214822f6166833f7fcb539cbbca80debc0e0d01ca91c0f87a64a5dbe993b002205bfc9366366bca57d54bb5c389edff2e0b90728fdcb58ceca89984ba9aa12e66",id:"a6fdc2fec0e799ecc73e8310e8285cee66c1420f3edb9d915cdbe7414c23b824"},{type:0,amount:"2471141445854",fee:"0",recipientId:"AcQgRCArM8s3iCzXmaNa4LFYcPwPUqR4Xw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022014be56285973e8fa73c89a4de8c1d5f06c30bbdf6d69c9286e19e18d3c00cdca02203a8777b4f3cb0a28cb42af527b3a13d284c8bb5a8c6a97b1f04c5fa3b7d42dec",id:"8dd4e91bcad96169a7d3e4a01fcede8898b36e45797a4aaa6c318f1c0ac02889"},{type:0,amount:"2481166956848",fee:"0",recipientId:"AbKSfhS4rZQXKJjnF1egbDqBh1fnkoDADx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bd942f63f791c0cc5f90d50edbbb6837a1445b053c599abd9cb8bf89e933d96e02202e1620e229f7657fd1d87fa97c076b42a5a8a4b5eb6992cd2cf1308a4d2585a2",id:"cc51d42bf081b422663bcebf7c9d4676a1ec5fae1e4df76e7ef63bc9184e7c50"},{type:0,amount:"2484636536440",fee:"0",recipientId:"ANTd31Ts3VHYBkd3BmbAv1FHdrYjVU939o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202aadc401035be55c7a644fc4204865a0b25c61c8ee7557c35c8d6908ae51748602200eee3eb04aaadda8f210440e269c03868d46fad3f80850c81f7f526471e7090c",id:"d5f9faff17330dc56236696dfb08548941a881159948c6aa100136fd416ae834"},{type:0,amount:"2532393949328",fee:"0",recipientId:"AeZGayWNSzKRkeNxkHJFzHEygeXsh8eytK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022036bd56eef8476da49e4c226f6d5bff50a491a4b0d077f0320df704ec731b3ee9022057b53f23797d0cb167b534f88cb0004961c2ac0ca25adca7a83bb0eebc541cab",id:"b6f7fad4820bfd4a97c845918c3f7d39a9cce601db5947b30f0a8cf515346fe3"},{type:0,amount:"2576371936586",fee:"0",recipientId:"AZMvWheiHokcgXW1UBvepmCiSjtLESNoid",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200923d3e46b3595c3f9c728deb6f8f34cb5dc49e32cf5e9668d0d74e31181d5ad02202d6079625ff697cb987da8782d44333768b883c10407af365fb4cc9a5135aba0",id:"1768864cee1985d3e4440b710f7cc8dbb7bf095f57f61af22f4fe9c1cef4e1a8"},{type:0,amount:"2584344277365",fee:"0",recipientId:"AUpLiwm2WVWh7Pqeizt33LgjTfLxaeKQZM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d3cb2ef1d65dfefc87c26a36c625d9c018924faa17876acb422727fafab78c5d022054abdebdb5079c36789fe3f7d97bf736ef5a314555aba0632ec3511f6b72af7c",id:"644c4cacbd139ed34ad275cc8e2c5d147a4d3a5e8ceda34f93c7860cbf3285e9"},{type:0,amount:"2592139332838",fee:"0",recipientId:"AWEVGHr3x1e166sLRYWjub9tMuRmrwv5Rz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dba9d478044f5f59fe1c85f8528f1e0fcbe8ff1fecd0cffc13d09ea320a180480220086a1fa2d5f23c120b0b8e49753d8e4c9a1772f8b2449700e9987f7679acbdbf",id:"27a27a46a268bf1af2f7309c1d6d4594513c1e6188d68216eadb573ebaaec3f0"},{type:0,amount:"2596699852052",fee:"0",recipientId:"AVpBNSkQsqp9VtK1hZtf32ZBszABP6mPxz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201d4b144431415a853dcb795f3ead4eb9947a0780af7303c7f8f1bbe95f0bf470022025539723eedc56622cff150b1f6d65e5ff10ee29a39b5f29b77af51d455616a9",id:"d6adcf3c3c7307e26318198bb541bfa38f3b12328b4b71a87eb3a6eb760baad0"},{type:0,amount:"2599032418076",fee:"0",recipientId:"AaQDmLECcNXVzALX99oWP8ed8wrz7E6vQV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022052078242e033e71cc764c5e6cdb1f240fa434c674d8bbcf5253f17b2e4bdd95e02204a1095961b33110272cf1d944ff3cf147cf784f02cd37794205369f75aefeb09",id:"06f66303e2b00608900e64f219579cccaf060f93a50eb1ffb83a6af3374128ca"},{type:0,amount:"2619541018549",fee:"0",recipientId:"AM1WQJyB6ENVcBM3qumifK1iyGgmxAtfky",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ec33ce506f26896c7cb3f5730859b4da1b52fe9ce4fddca9c17976e7522d82cb022040a6c88430b555f187b83324a99cea223f56be138e5de4d860fcf2a3315e91c7",id:"105f4cf709516db516b88e985518ccf82eb4939a886c1b8fe356ca85b2444325"},{type:0,amount:"2625323003381",fee:"0",recipientId:"AbYapv2W4GTvn1XAQopCFPxHTmGuhZ7wrU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cbe7e43ef7a56ddda2308f5cb60204611e24dc16d1cd1c681a4190bb109ce8ac02202b41f1a599c6de7bf37d94b8105c618460729edb0235d3070948a002d408a315",id:"706cb7d860d44fd5ca836fa5667d81e60dfb86c0e8190850a1ef042da330e2fa"},{type:0,amount:"2646271028944",fee:"0",recipientId:"ALGc47qvCBw7dL6y5ruLrpWXdghQSMjRX2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204756f3e295f5dad6ffe44c0bc09e7a8e215acf01bd7fbe85babbea5e1682971802201cd1a6af8e4d6440405631ffaa0b77333ff31a4068675a4ed9e32e345e812c11",id:"a7b9cd14e449f0809494ef6a4e94e257206e3b339196dafa6cce9a5911eeccfd"},{type:0,amount:"2735324506659",fee:"0",recipientId:"AW9ZtarPjeMUH3abFtVvC2ECNTkMS4w9ZY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e1b443ca71f70cefd6dfd6cbd2120881c7963e60b9601d6793d46587bf64f8e102205519f08774fb4a7ccec42ee49cf10cc1e60c8bdd4b8f9b0ff3d403cf009022c8",id:"26d5fd2ff3c8975785fcbbefd6ad746f51727c273f70f5545e95d3fd683593fe"},{type:0,amount:"2745083256244",fee:"0",recipientId:"AcWyTqpf7XuNnptSCJ4cTyw2hqc6PhDufV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e1fe873519ee311dfe7114f754260443d272cb2faabdc67d5e13b3e22dce40b902201b2372a23b827ea4c3b588b9e55da4cb09f9f18f201293591bbba3791f1fe46a",id:"3ae55c8fc62086c2ab577dad2cc85e9fd025d8e035ccdd040857f25f3215a29f"},{type:0,amount:"2764221209306",fee:"0",recipientId:"AS2NDZSgogBv8K2PdDNYwWcU8RphnXARQo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200d7315132954c4ddfb3a09c6204a1dc0be0a415d87b5243093e8ca01c02057f70220377bb5e835854b2a1372aac469e103ff59fb023acb7b05abb259083ac0a695c7",id:"41220183a52980e1897442d243a14f13cc5f6e3a9356c1fa229b6999899c152b"},{type:0,amount:"2806744646340",fee:"0",recipientId:"ARsQwGzjkRCscuwe8dQ2MHPHSYqmbY4iSU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f71fdb335a27b7d37d9e07677d14e546e91f1bc8be8c5519179853be3f6ca9d0220712a67657afe2b13a1ed42f7d29f662c625b55b577a87d032e5a513d3a33e875",id:"5a83436df7e6bcea1e1221846e05315cf36f3c5c4b06d785344e8010e48cb64b"},{type:0,amount:"2906876974000",fee:"0",recipientId:"AT51Pc6EAJKjK4Sgr2tf3i2X7Wp6L1Nmef",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210084c2421ebaf0f1cf5c9ebc09454762d5e6b47291c0b88d8c644cef634c92d4a9022000b3c741497725e2659358254baf0cf87ca742dd189ed5b29160e72e9a7e8d94",id:"5ef7d8921886188473d15c50c752fbcb5db7d094efbaa8011b23929409a7e642"},{type:0,amount:"2910898131837",fee:"0",recipientId:"AST9oifUBT4nv5kiNZwFrkTneZEyUshbti",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be3ed06ba98f260ce44e0049f1ea20d5efa532ec97e9c286a3dc6611f72048bd0220562050948f72a8747b5e9407033c083ecd60aa78621b0f8d7c57283eacd286f7",id:"f04b90545d3dfa0567f8b277d172f32c9cbd9de645036edd4d5e0e74c77267a5"},{type:0,amount:"2940154128213",fee:"0",recipientId:"AMZXd6g2nidHGd1pZFUqZVpJnNrpzqtCKF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201396009e8dc5376c341ea496e7542c2b96514819dca5aa23ca8dbf8efc1175ae02205a6083d4d66a15d511c672cf521d57ee61ac55bc876f494ea6450d2b7b5f6640",id:"46f24f882e0b0a1df1eeb6e2b17ad3a37ec3b9eb413d8aeb2af5827c1a16e286"},{type:0,amount:"2940154128214",fee:"0",recipientId:"AHwkTdboEC2Nm6NwXoURbTzoNRPmMVXCqc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205f1d63f3ad6bb0ee39797711bd1939b72f6081abda7a3249ef9d690c4b2de86102206022e684106c6e47c8441c5cb2ca2e583b3e79fc2f8db0d6885ec2590cf88c2a",id:"f868bf1d98ad88b9fa263292382355e6e21513a7614bf35e0a413e94602b4f80"},{type:0,amount:"2940301143271",fee:"0",recipientId:"ASBzgywUJ9UtciVtbYc512CDrgTDhcMYng",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204939d50212d6492e23e7f3ff583044ae1ad7f01b173966b8fa83491e2c94b7ba022033f1a5538b4790cc5cfdf0d52a093bfc9e579b4da08643c3359d3ef0f39bb34f",id:"202834102dabee749fb707c8f620ca53d51c5f92aaa4113dc1b86d7989433ed5"},{type:0,amount:"2940301143271",fee:"0",recipientId:"Ab2DLnDBmKqcwBuzhQUa6wWdCrECZ7MpTo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eac45b9e454362b7fa3852c5c8ce5d2ca19db0da27428f75543d6ef075c91b4002207a49026e26676748eb003fa34f5244e0d9ad7cd881e90d9adbd158ab322e82cb",id:"f608e70123ec8b29777cf6904ff2e530f8c150d8f59aed648866acd8bd250710"},{type:0,amount:"2940301143271",fee:"0",recipientId:"Ae7NncFsoDvMMmVqiJPiTmibiB1aW8XYk7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207767c2f983946bed560b7ebb36101222275a8bd64f0c0b4f8b2fa2727f344b0202204222fa85950d3ba68b37be153d77ee9135a12d1f3a4ca7f8bf201d18502aa12f",id:"56e775c567f7f7c2c7e728221167d54bdd021f722acfee6aae640ff888c50801"},{type:0,amount:"2940595173385",fee:"0",recipientId:"AaYk4acmLnvcKiiuYbxQBB71goY5Tn3Dm3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a0546e807d1390df8e97606cf30028b6145d287a93dfec9f5c7b9672d172afb102207325221156e2b4e32ad04c80691f073e1dc6402b61fe2aa7296cc7d424d584ea",id:"89d8e7581c333ef01ce0ded3dc08da5580c358e02444a6c37bb2637b53e747fe"},{type:0,amount:"2941331203166",fee:"0",recipientId:"AKJdgCXk6ymHHKaVoNhkgwtsS7zeSHg323",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220172d555b9f5ecc5268d9af740ce9aabd35ba38a1e011b0ab05783148bce1f96102205d4491c92d5bef700518e4ba909025b6e0da94ac550af7f33f14a2a47189b72a",id:"09b3d72c0f9d6051e30ec2f6dce7512820a02c0d95edeeaffd79dcf90e461fc6"},{type:0,amount:"2943241444414",fee:"0",recipientId:"AeykjWcAMwZ8jf9UkS7NoAEX7W3kJiBWUZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008260a61c32c694392729d954b56d02ca72468167ebfe0c2ab4f96999606656d10220247bbc53dfc30f0e6c0267e7cff73f44f3794a77512b483b3a16a78f95cfa609",id:"524c4e3f8d8c26f3b78ffeec170648af3410bcd1c4ff3dd91b783cd9a2f229ee"},{type:0,amount:"2975619527639",fee:"0",recipientId:"AGT3E9aU7PuT3qF5dGVQFwAG8zuXTd7uAp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220051f525cc7336031431dffad29a63ea2aaba824790c6db30ca40d529d77d1ba402200601f5acc9a39b41fda57e49a3d2e4ed473b323336f82b8c39be54cf72611de9",id:"dabb12f952a645ab435977dbe2353cdd2609dc6ed1a672394d547f0880d93cc6"},{type:0,amount:"2982935509848",fee:"0",recipientId:"AKU1FaKbLTBfonNqSAUidf6nWS7fyaAs8d",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a399bcad2f889782a418d8c4f43fd50545a9762a5afcc2f1c0a2584b9cd9cd99022033c4e961ea62a4db1bedf6dc894b402dde87328fc5426bf7080f8181b0220316",id:"ce7293fefd0f534c30b3c2845c129fd297d3fd3d4ed7c24d3e0ed490801eb0ea"},{type:0,amount:"2985301143271",fee:"0",recipientId:"ASgKLrpaJGxArbtTNuKHTQNVWyGitGGpZC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202de43275dc393daad998ce1dc35038299d94e82655584b05bf1ad3d88ed4ad5902206722a7a5753f18a2f280180f411bbe0be380d0fc48d95007ad5381f367ee3be7",id:"9a99bf84368d99e4a83fa780867596c6be71a181ab0e4d80b99e843956435c4d"},{type:0,amount:"2991168353049",fee:"0",recipientId:"AZePtHJzYCXrdG4tF9SBHY6k6R25R8ZBn5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f5b8cb767a75c487bb2d1bc078baf5e9bc1ffa024177bec52cd34de5c87306f7022024806722c1dfa0212e49d7cc22c1251ed59d4c0fbd9963bca459aa0c0f64f521",id:"a36430d45917be491b50a09e86615f3d1a67af148173e7867509d704df2b1367"},{type:0,amount:"3029944047194",fee:"0",recipientId:"AM8f4MdYwPFB9XKqvki7wt3MNBXK6d1EtU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022002187664dbc4b4203779ce0717e3efef35f94aa241477a5e326ececf4897e3d0022029c1e31d1591c2c54f242b43bb27575b94561bbb82fd726f3c54738f96c9025c",id:"e0c8f8e46c5377741c86b6854281d0056919cbebffdf4d641785826709879a51"},{type:0,amount:"3030774378583",fee:"0",recipientId:"AJVm2UANQSZBH6WhTLM8ZBqTNDwmYf48GE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100988c50ea74333df4771619f0cf7396f7569ed020b6d02ec3bc3ab1b2e93e186502206adc99ee4498664293176a09208ca5631fb03147f6fcc330d9dd28102f088e8c",id:"90090e44f39b81ebfd82a3c3c68e11c81c22757c91460e309879913aac6e915c"},{type:0,amount:"3043211683285",fee:"0",recipientId:"AJi3yet6WjHiMNx8j41pbwNyoKfZtFbzwE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f0d5d871e104cb93b22fe9937872219bb52695f3be7508144d260de8fd33cb43022064656b7b33df040d9a49839e45250c44780cca7ee302112a123694fd5ddf2a81",id:"71b958d40ddcd3e70236969225049f99b99e012608253a52102926154e8e6eda"},{type:0,amount:"3055154128214",fee:"0",recipientId:"Ack5VMNG38f4DCpn53a8rXNoijKCpaEEqq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200fc998d1c31efc5222de1447a8284cd94cde778da61ef0f13ec333196318fabc022049cb07ea8df855b9712d85f334e2c2fda9ba07a5d7065f978b677bd900e0f899",id:"2c42da9e75c92d6f66144898ef06ff9fcdc35853a8036788f3a52fa7cbfcf033"},{type:0,amount:"3059124967808",fee:"0",recipientId:"AaFaBMRCVAF1ZBfJx9wgpZNxxANpJdJSYs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205fb4f163f5d2276083b58ce3c7a5739f74e751d86050c6d9bb10b2be84c343870220407388a647c4d12beac50154d72dffa01125a3a2ed5f4c26fe20fd385ad27316",id:"a05319b6d84c6991ade6f957ebfcd3193aefe5937122e7afb1bb7768eeeb4057"},{type:0,amount:"3131025807748",fee:"0",recipientId:"AKuqp4G8AA3XWNe8JwMhTdNFsjhrWhQ7ZF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009c9c994a2e54b52e7dd638337ba112c43bc2150f740f470de9d5b72b852947d10220050af097f8ec27f51f0fbc9d052e5864aee99e7b6082a61e3f1488497febb899",id:"e521e3dfa3379d083020dc9c8ab5856bdac23ed0f412e1568d9704ebd73f4114"},{type:0,amount:"3136161306270",fee:"0",recipientId:"AHWAQFqCmJ5RrKvicKzg4qEvSStWN2f4PF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c2673236c613f050e22ea59478067f803201b9c88b51a4e0215270ebd6ce17f402206a586fbc5b2e0e5b27edf94bca44e9b136fd35a7be96f5d12c2c3030286a8196",id:"08a2b9d852bd06e8a2158c95142c88624887ae9ec667eddd62b02036993c3d48"},{type:0,amount:"3141084221939",fee:"0",recipientId:"Af4K4T6Y13ZyZi6hQxSuFwWHVRZQEhP1D9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008aa3a5f09a85a7e94a23beef8c95851670ebbaeaa7d251941a92a3f44420951e02204070c008e27d95e14ac9fd50741a889efa464ae4c740cb44791edeeab2815227",id:"391d96b95f7d84192a1f319932167a2d2457624222afdb0dba66eb4b3ef9cd69"},{type:0,amount:"3182675621655",fee:"0",recipientId:"AY36AeEFHXi5uevkukSSY63Qv29xLtBNzj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c502e26db7ca217fb755fcbe660da9ee6c29047ddbcfa3962e6cee1c15fd213002207ac54ce32e991a0c654e5b3c684d0d2efbee9d2967f4edeb80ad823f4b19f3e6",id:"f5c46574a98b4659092e4193d2c05405973cf80be9ef391e824eadf89003f116"},{type:0,amount:"3208001085999",fee:"0",recipientId:"ARtWsVUYotKEXTXxx1ZxCNvQUrQsnXaGSB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203d060f9f1a25f865c48d773b58228dd2ccc8061b9903039940c507dcdf895f5c02202bb37da139cd3d4a7cf5f677f1677202e28d0be38468601e829ccce2cb925263",id:"8a6dd2571b665a50bdd9aa12e5908b8b7bef290dd7e77365593830c0c3504355"},{type:0,amount:"3234184242541",fee:"0",recipientId:"Ab3SAMJGK1fTrQAqoio6uxNiQqUPCmrzxj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210083d0d329a80d6ee339c024b6a8143dc1ccd2a4ef9cc36e2a2290f3edcdb37afe02203a76762e23f40fc99ad1bf9684a19d3e5060ab3de016fe025acdab08546ae83a",id:"ab3ddb2107eb42d4b92b1ed42c5c60d6ba432932db57b3f250c5ddef2e5f0b40"},{type:0,amount:"3234331257598",fee:"0",recipientId:"AYUmyzDXiqHcTnFjtKQC9GHJzFQb76rTjv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022017b50c51bbc0d381d134b7fa916d7d2e3ff07819c217144c1969a993af614f4402207aa346585c21d6fafd6a31eae748581272ec2ffbcc4cdbf2cd12f258a113340e",id:"47d84153cbc76cece88fe01fd661a4fb388a40c05495fd2d4bbe8af7b650e1ee"},{type:0,amount:"3240854690572",fee:"0",recipientId:"AKdcJzAriRFVftFqfHkrdZ1kYKtSajjVGe",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009956a1473b920fc46270c1b8b7b53ee4be22aad70d53a9e9059305f1a8d3107b022035e82d31b43b221e7a7da617454ad1c27a504ffb107cb4fb9efe88539b886e4e",id:"a599896c8dab5a4251366d83c44c108d21f2e82922a01214d24857c5d965c9a4"},{type:0,amount:"3264823516954",fee:"0",recipientId:"AMnGLCrRYXtxmrnzsx7bDzEx3G2W4igcx5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cc08ed2979526f2e9e0876e177871deb20ac16bfb094b240475efa11cdf5642b022005f4dddc0a80d1c9df8eaf04f3fa4dff3c5b349e5b4315d6f037f80ebf95aa74",id:"0b33f80be4c0145ab42eb74dcd63c93ef5dd8093b8cc2358182e644f12287634"},{type:0,amount:"3307427638563",fee:"0",recipientId:"AH66WwUgJHCYvEbX8hTFpuKpx4UwzoaQEz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a243814491855ae7abe45fad6ea7c7e939903f198383b224091a25e22fb357f002206e4849d25af6dc5bb6e002f30ab0cf7f8cd939528fa4780256abe3f9f38f4419",id:"af232d8be6ed5cceba703d618a040d13db05286235b2610de8c4cda5668ebe8a"},{type:0,amount:"3324317837586",fee:"0",recipientId:"ALTNeLaT2mvuvMohvSjg8FjYhVDNxbeMEu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009f8ac3837eb8b6363c0ec7788dbaff01a07d9cf68cccad905a67a8016ebd24ca02207acf56e23a7485fffa201ebbe3c515b99bb4121170da3b0884193416881a23fc",id:"577010da36ec3f0cca45de28e26aeef46a3bb7fd932b755609aac454e9626fef"},{type:0,amount:"3332461324329",fee:"0",recipientId:"ARLUcoV2hyhKCzfy25Lk8Y9VWix6deVAYj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220724da3de0142e6139d36004f68e5ab4eefe84b786c5c80d0374b319c3be8d6f402207276502244f50eae18d9d8cc7ef1636936809fa9f6d72461a5bbe91db9c8c04f",id:"65306f6058181b91b964039ad1c18f711fbe7b7d9f318d33a02bc1acdc7618c6"},{type:0,amount:"3333461562845",fee:"0",recipientId:"AHFojRfYcbsAhEqvKY8MXMsAc8MEkxwZJU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220179bbffea812db28bea6ddc3e3863b6798af30cf9b2789d5f827201fbca974d302200ded60e75ebf3d9eb1f947bf5dfb216e8206a4882eacdeb7269c728fe47c0bfd",id:"705f8aacb1c7cca2391a4d432053872f3dc302d9ec36f1f399377e1b10ab1347"},{type:0,amount:"3337241797612",fee:"0",recipientId:"AHRETqnSboGYrrjQ87Bnu5ovyKZBvfuS35",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009eefca56858fd766265713c444958cccb5d615b012747c011c6f5f355955c60402207cab37ed16c6f328ead3ef60c35257cfeff84c0e36182125822142f2f4a3c471",id:"4f16617510a64b071be9c9aeeda35eea4947d52625610d7c8af2d47dc144632e"},{type:0,amount:"3341104284118",fee:"0",recipientId:"AXNH4NZ1wsrkZ1PPFfSQFucDGwt4sfsGor",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e443d4e4a9d3f91f9fddccb71e70555b5376d5928da292c4466f0fb4bfa7f12c02202b083a62b3e4d139c3bbc09c162259ea43c256fb0cd25870b724cddb4d7b074a",id:"7664dfadec3af8d62814ad0baf545d16c8aca1be546758a259a05a2115837cb8"},{type:0,amount:"3359667184998",fee:"0",recipientId:"AXDfDrajcMoF4ssBKAj72AefFrS32A6ErV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eee29af59dce2e725f1441b665b737c9bc22090bd4b37a68cb79c29e8a041a28022038b10296b17315ce07bfcecd521104a62a7c1598d07ef17fc397aebfebb094ba",id:"388dfda809f3802e4f7ca49ae7da2409e195be0b231c037c0c0ee139227b5e74"},{type:0,amount:"3411370798936",fee:"0",recipientId:"AMg61zEWGdPqgRcebwuY3nABTXcEf5ursg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ac107612d5b3790a6640e52d8d5cb277f32c7ce79f3d9881641b8e7b613213010220353d4bd4188fabe59e5d8ac78d4135b57faebcd5e8095c1c7ab8d9c1cdbb6b41",id:"a16f6f3d94d84c9e83cf9ab117cc17257632d3b7548fe779f21bd02e0cf3db90"},{type:0,amount:"3431641346204",fee:"0",recipientId:"AV4uwLo1v4g78ZWWEfZWt3zssgjS3HUUK2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c6ca22e986389d94fa3da2973a1bcea26492e76c8fc8ecc47d2f754ee21e0e65022031cb3ffe69ddd0d63c0c40b089fd445748c9b0527e71d71970f2c1e987670320",id:"71ae8506d64400ce1c01558b7dbf6eadb9b915b8576f8024ba54929f56273d8d"},{type:0,amount:"3472495650202",fee:"0",recipientId:"AREUm684gmTkURsYWAb5XFSWjtUpnkHXM1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a6977f3021aaa15636b427ecff64771bfe698cac3e6ab1fcf1113e927656b44d02203bdb670754598eb986329abbf9afa637afced4dd83415f117ffda3a40d7c2da1",id:"e03a176681d276f4c1a44b84923d8ae4458333954e8917c67cea9b412d743ceb"},{type:0,amount:"3485679678910",fee:"0",recipientId:"AeUU182Jnq996yw8TZRaDAPj4khgpxBjKY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022006a3492b8a039c733c6860409ad2b6639d288f4638863a10955502162aecfedd02205035b3a64ac33b34cc81b07bdec6d74dfd14b28639df434b97cb55c1eb15a9f0",id:"aa9f40571467e5776f3ff8378598356aa77cccd4ae6d20b9911472393a3aaa23"},{type:0,amount:"3485679678910",fee:"0",recipientId:"AesYuSHWM25csWzyJE5aiXD6yL4Vb6G1Vw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c4de585a2f48a005b07f3cce3a97ca0ad829250496930b3bd2410b0740b8ae2d02205f46e8dcb4cae8879992e1352a3bfa5c947706c36bb8d288516169b536f3299d",id:"0116ede2fa14adc70cf6286d703f9dac6d7d29d2121b62a382a197f2e0c9bcc4"},{type:0,amount:"3528361371925",fee:"0",recipientId:"AUxFccM7Y1rX9rgzi7ashGogxk3Am2A5px",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220750199ce472faa98d3eee8da3efcc0e4a381473aa1d48ace4731d7dffa78fa1c02203c91c647378029ce9944d5b647776989c67c7b3e153e7f3af0f33e709c9d0954",id:"8911fe01cd1cc981963d244e82226027890ff383183acadde7023091ff3ba196"},{type:0,amount:"3531301673068",fee:"0",recipientId:"AeeJBq15fTimUFojH6XpR4FUAZmDubP43u",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100933a2422b0d1ce2180e046a6071652758838311737a3424a23ace27474eefba602203e72e72184db462d5af7d862d1d2d20b8eda36d9d5df6cd9cd308b6868a7604e",id:"62f6c02daf915e73a4440f65838b9bdc7cd4af1cd3361d7e3ece2755643a753c"},{type:0,amount:"3535124064554",fee:"0",recipientId:"ALfWJY9kKj9UQkPG9WpmaD6ty1xzy19MH5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022056e64e74a7762a00139bc688a97421ff9ef58d1052019cd594855abb279de55d022075b33e73eed827a243c96a46f97bb3ad1c3998407d84a8d557f61f3e93fb08e1",id:"785e5330cca5c0a53d97c3746427ad1dd4e72d75e64567ebad677d00bcb3b8b4"},{type:0,amount:"3556280867780",fee:"0",recipientId:"AccgnHy72MjgSSByZcWQqmeRgMstvJcuYb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022063057051b56093a07affaed97bdc4c80fcbf7e3e9f1ca81d68347176e39ab60b022054765fcde969a830d58d67dc80f1e2610ced4e6275d3c261b44542add4ff74a2",id:"fe4ec15b065062d5662f9d352d1e1885ff2f907f2ba0c6a1528e98bebc2bc32d"},{type:0,amount:"3557938075605",fee:"0",recipientId:"AVEz9XVtNWEBn7DKziwGAYRFUcaXetU2y7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220603807fb9a4ae361dc3743551f4cec9f78bfc9a5e6bfd00a7576196f8970a1230220586ce37ff801f638feae33e0449cf80c4a389617fbae8712a50e03e45b6e11ce",id:"f0fff2d878b1fca856116cebb41cae5a5cc0aff75d6b1c986e302722a81feadd"},{type:0,amount:"3593815899623",fee:"0",recipientId:"AdWUn8FcTbrtck26543q1oGyaSjZFWu6no",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022045025274c42fbda104625bf2cf9320a01045aee16cacc809074ee6d315cc17f7022036b821e1e26e19cf0a34bb6ba82a3d1e5c164990f1257119677f81e019bb231e",id:"e2ecfc0a1f1e5e47ef99d7de7963e51d2af78f5a3671859487a835447cdf9353"},{type:0,amount:"3599965360713",fee:"0",recipientId:"AGYEkwK8grFmYGrrQkNSsEbQTRxSv1QGBH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d44a62be1cd41baff04021452b670b11fa4466a50b19624e918c56950c0326d302204734db4e45f8c2fb42f41fc3488cafea5187c051a4b5c21820b864e46336cda5",id:"f851283dfdb3e819303fe22d6accb80c935a06112ee8ccd6da917eeda8d9e2d0"},{type:0,amount:"3637230969298",fee:"0",recipientId:"AXtwLLdXbcAhX9j7YadfNoAbEAwmzUDGe3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202d65e277703ac1505ec5becca2491ae4cc63b47af9e3c9bfd4610601b14e17dd0220659e5031db6fe356fd2297cff629fe3a67f153f05fecc76a37d12ec81c7f77c9",id:"737a7570bd435e95df00dd9aea0d8dd9ed6a2d6715919814d240104a31cc29d8"},{type:0,amount:"3637230969298",fee:"0",recipientId:"AFtvTj3CU7Vr2C3bDwNCDXDpbqE5TAR7UD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008d5661fd7a233b744682e4df941f880b2a499996700246100d94b196db0297e102202c1086cb609d5d24d960307f3adf858268cfa85608ac887b6579f48fdeb2efae",id:"8c2a012cf5e9de46fc73d5cf899a51508af66e88951d8d17d9bfeea7b53cbd7e"},{type:0,amount:"3675376429087",fee:"0",recipientId:"AJqdLZvhCLntP4asFsVa7BfxAzvm5vL1TD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c69c239352a791354a5be8627cfbe1c5d266c11bd6113db1d7a156f33ae5f819022053aaa645c823507cc6bab83b87fda3f3e66bab8e69b4ca2ff29928be6a7b7a16",id:"5b19f5b4f515679b9e1dc6a3624a2dd740595f48dd236076fee85848ed65dfa7"},{type:0,amount:"3675376429087",fee:"0",recipientId:"AKrejHN9mQwjGALapuuf38wjs5TTDZGYPD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022058f35b0134f4ddca74ab3e3d3494946276c15748ac629b4949c1132bbb754dfd02204d6efde7d964d9f74327077b2f693642b5652fa5dab7de8da16aa5a587c04c1c",id:"6388b60ea1d6fca35d97d365f06309d93e211362aecf97d0bf4771dbe192006e"},{type:0,amount:"3675376429087",fee:"0",recipientId:"AXH4SRRS9WQqYW6tr32eDScenDgfmZvn6z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022078cc3fc5584871fc50c9df131c162cae857088ed96cdaad082aeb2bf73a7237a02202175cbca5a39833cedc9c394e0c896b5eb5c4369748e021b588af40539c80e1b",id:"e64991d57370d9e29549f930e3c72ba1d2963fea228c69d07da985f20889992d"},{type:0,amount:"3675376429089",fee:"0",recipientId:"ARuZqMpJcTxfyqs9FYwN5o4vHrH9ofLvnm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207c4cd8d49f9a5babd6d545162f31da577ec194b1783c1cb7a518ea922c589b78022053d81b6610d827dd8e4ee4be48d6ad9f397c28711d8225981027ac283aea127f",id:"bbd93094994a8367c48099c29dc4619dcc5da73cf63caa53b1e529395b6b9a6a"},{type:0,amount:"3697295037611",fee:"0",recipientId:"AZE3bGd41tQLJqtP7kmn1SUQLe4ULUpNtK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b7153b2711d4d93933b0d9de3fc66ce2d459464e57fe7c6d502d8a0ca6c8dd3b022027915527227c59c301929b18c2f04b65d58d6dac510d9f9720689fa3bf8bd180",id:"c8cf09babe8f3fdfc44ba66a538154418bcb3c3b4c960ddea6d710e893bd4337"},{type:0,amount:"3706851016327",fee:"0",recipientId:"AXMnw2SyrKVtEpkos4pYLqLyKS6nzBjWL8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207b5080ed8fa34486c079d94794804e2bb8fafab6c643507a322fb8f1266d4f9702207d80e5d261ec51e6c371b2fa59926163828d91856d8c0b482bd23a03a991e32b",id:"8dc1c97b5fd6cc3002868749b97114243ba2a950e9b2beff032840548a875f13"},{type:0,amount:"3709028616718",fee:"0",recipientId:"AWjDzWr3whEepeRDHMcLSZzfrYykBc2e2V",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e660c72942d1e4722f23166e5a781f5ec8ff9c264e6841695d9799934a9e859b02201a2e7e073c30e1efdf4b1fd17d3ef33914276e7931cde622c42dd3a90dc3f7e7",id:"4e83f8b8b7acfea0f43dfba0f8cdf8a8809eec7717d4519f8ba762e7328bd338"},{type:0,amount:"3822391486252",fee:"0",recipientId:"ASf6GkdyPRoxAQ9e6wNu1eTcGzdCxTwU4F",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008980846f5d043bab9bc69d533094c47209a08b6604052b9097e97d3fb884828002203dd82abb96ec6873149fc3a1f274b04792c30dbeef84d15d274432f91b53ebc1",id:"b25ef9750e5e136d27cd99248823856666cb496d15c45af37ef77850791157ae"},{type:0,amount:"3841576429087",fee:"0",recipientId:"AdJqCvp1xnvHCJKRBYDm6Pps7Yn1Ly4gnJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ee2c9b676bb97f604b5cddff9c35cd2995b9ed514d71eec031f606fe249cdd5902203cdadf32092513c27107651f170ec3209e52e2fdbf5d19fbc7d6cc222ae367eb",id:"4069a73c1653a4dd78863adc651caf01c46b1ce2c603656fabc4bef4e15cc243"},{type:0,amount:"3912040733393",fee:"0",recipientId:"AR4SrANMGxGvnQNzBtKo4PMiW6gpfnWvrS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ac2967b732aa360a24d7f5562b138970d165ff8f5bd6c9e8aa8e45e69ed94b0a0220360bce61f2bbedfb4fb7f12ca83b1d9cc803a1e39512b1fc5fe5667f12ac740b",id:"2eedf249fe84cfd6b31f3090424050ae839909a12a3c1e39c777bc2e98897b7a"},{type:0,amount:"3918939514059",fee:"0",recipientId:"APwMLxdB8EHM5XXKG3gfT76Z939dLz1JCz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d3efefdd5f23c7d432cfd10d2519ba3dec0cb225c4df2cac9435db8a71646dbb02202e46cc5d7721e3dd8ea325ca859b01899359a3a36657fba4c93f202ca58ffa89",id:"d51629cab0261f943ae8bf7c72d8f33220cfdd1cda45a5f4fa5407919e9af420"},{type:0,amount:"3937230969298",fee:"0",recipientId:"AU412AFph2KBNp1ZUNbMr6UQP9o5NSf55s",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d38cb807e50f55665d84172ae9f51ad7496e6afbf2128f7d79ff6b245b2dd3bd0220315d0693ad470da6c87599ccaa083645aae0bff6f5ecf9f6c540f2b333e0dae3",id:"04de02148852008a6b34df8e5c3ec16c21d4d84acc7176ac5a4f828bc14e16c2"},{type:0,amount:"3965251953261",fee:"0",recipientId:"AGQ6aRNRA165aF71WK26Wd7WBn26d928dC",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100996ac1644a8e8fa34351933824de6c784aec3656fecf58b00ecc73058100037202205b82dd95182ecc1b5933392cb43106c56a93faad5da958145e55cb066d055b66",id:"00887bc4d7329a1cd596625f9befcc07758c39b425cbc173f70338a62455f8dd"},{type:0,amount:"3970035705567",fee:"0",recipientId:"AcvUN694h6sjffQYucMLacGpPuq1ZAupLp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fb1f077325d32c64f6047e8bcc8c4110e079af9fdc76c171d1f8a0abfb32c43a022063f5bd3195cd0985a836b925f56cec34f3331d1fa0a9f0c0243583b7f785ba01",id:"db7c86a83a6e9fba3775696e6d06a5051cbdb20b329cd9877358d8e5bf3e1545"},{type:0,amount:"3991462828751",fee:"0",recipientId:"Aes2M6fkCxfwRyguG6R7K234a8aB3SiD93",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022059bcfb711cd879f837a28c9ab64e342750b5a3bcda836c1aa232ee472004eab50220609448b1560201f56d821c2bfc180e08de802a8349b0f132c111cc5ee7d0e6da",id:"c797c9e6646543db243df8ca6f595651745b1262062762393342dced20eaea82"},{type:0,amount:"4000000000000",fee:"0",recipientId:"AcomwPvjAGZoBiCx3u4e7pnHaXxeLnn4MD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022024236bc5bde500949d5031c98e8b36f823e00fa915cf01773baad25e20eb77b802201dedd50e48b684a7934b341f4e961bcb703cbdaadf3047bc3a63179992c80367",id:"65636f924d10c01ba4289d064623dbc2bbb19b7e6f5da944635edc38442aafd6"},{type:0,amount:"4001132109901",fee:"0",recipientId:"Ac7qjfgoPxS7CvKMsGgPY9qPjy8MRsxtFA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f4622b4a0e92ef2b2e120d951f547a4bd22afeb383700cf21f66cafda92d752702203d815814d38b4885ecd59e747d6fc0131f3aca76ad6b8f795b8d7d05a13fd8e6",id:"4b66a47cd8eccc4247e661526a5010aef5156eeda176cf8e0b1471be657790e7"},{type:0,amount:"4015989936987",fee:"0",recipientId:"AaHvdU5zBUEkqUebphZdJuRQx4K7QxGBc5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f1843d7b8f388f8fc2130ac2f5b5721b98e6e1905974cee0e5bee71f7bb5359002204ee81e364ba06b6ae5fdb9ff4c3772291dabe596664d64cd8fdc7f9041386b9c",id:"cf6bac6a58bd66f9820e8b92a2b7a093d3c874d652f81cf3956c11d785133f82"},{type:0,amount:"4042914071996",fee:"0",recipientId:"ATBpKuXuUDFEo3uxRDJpZYCYvAuRxedMQP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022036b9cc8a055c30695316e968334a488c1daaeb796f189549ca5566ca677d4be102205df0433a63bc80d39594ec5aada62412a8776468c5d8996d7c670669f0819070",id:"356ddf4e0040d24014d624050eea27429e4ee5002b07977cdf08878e93397531"},{type:0,amount:"4048316026508",fee:"0",recipientId:"AWd7KCkz7PAP9K8noozmqggx1qdWNHxoa1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022064ae748e8002a9118a3e4bb16d56dc25a8aa37260cfad3b5ff30bb0fda6031b902204fa1d3f9faece8ab66054c47647ad8a863759f0ce3c3c36edcc1e33162e6bf80",id:"d37818308a718d3d8ef3c3f4364a10b354b63af68840195c436dbba2fa18e344"},{type:0,amount:"4131665330066",fee:"0",recipientId:"AMuFbxddTGnj41RK9QRCVymbSbdkxrJBoK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e2de836477641275c567bd1b574bd277216d355bbaef3574821b70ee55affda02200e01aa3604454ef602992243324c66746e0ad04b91dd65f0275bc349f4329faf",id:"d9147524e74c26eaca62684a3a6a1876cfe97e71cbb85b95dc5490dcb1ba094d"},{type:0,amount:"4131706645547",fee:"0",recipientId:"AZ9hZpKCaaJ8c5GyjvNqWVxKoiHj8fUkxj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220618744db99463616257c71774ccbffbad439cf0cb6283b556a8a7fd98e54da2502206456d52a8c767b60e5de2f3280f852ac049b66dcec4f9e389b8e801ce00aec07",id:"265d72b2909c0d5500b9dcd4346f030c32be27ee393d755a4dd017cc66094e4e"},{type:0,amount:"4153588271639",fee:"0",recipientId:"AK9RL2q4zGWGbLtLViUHHdrzGbY19JyVWp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6adccb21f415791105482edc5d6a640964148330fa534d8f7e2e80f24b4fcd70220246d7278626b4b645018240af6d11d558a086e9baa7be5f4c02e47cfcd28043d",id:"be1d5b2d28236cb2e1551a702bb633e003582007cef416286b54553d1b09f13a"},{type:0,amount:"4209041086592",fee:"0",recipientId:"AQqyqd4wPnAceW8SNg2Jwq7kw7oJdbu8jX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ad4d36816a2710a030966ae3dfd7964a36e3d6600877bc12a5787877117b160802207c3bcb1abf4acadc60182ba7c5f242cac9276382fdfe31f8cc5c1d34128497e6",id:"0657d38310031c46d2207d04760de4dd9768f0f88643c189f234cd0f09fcf33a"},{type:0,amount:"4241270774064",fee:"0",recipientId:"AQ77PDtC953vqib9FNM1QxgHS4c8hTKbY4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202152e05672aaffa4dd6728794f48c789449778ffee43732fd04a7daf0ea10fa502203d3b1e6d34399f84c96363adbe3e486c4b766e402387b1c88097794f5d681f47",id:"faf38dc7c24d054c7b542ca52119cd5325bfa8e48ca24488e259594c72c4b6a9"},{type:0,amount:"4335474035753",fee:"0",recipientId:"ARNrAn3AagtTUXwwPgfNMkG42om4y4tjXp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049deea24c707fdc7650d34b049bf69911105a2591b93789cef09ccee23386f1a0220693f7fc8a1bf4ed2c42fd89dff05b49ba16efa2b607dc040c99fee81fd94fa8c",id:"4321cc2b30fb9c56a2d3dc0e68cb711fb3706c2bdea33bf06f8d1b532bb15ba7"},{type:0,amount:"4362372912987",fee:"0",recipientId:"ARqijV9qpJv793nYJpSuzhJJtgGt7F5vMh",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220330da9b78b7aa2553cc5b832e4780c160d6c2c9177a2c07240f7ec4aac39f31b02201b6a1e5f6d7003d1d2428eb6d89c1b4dd896a083fc37e136bb7a030322027d2d",id:"ef30241456071ab5739cbc01b77c888de52548ce718d290e17ed78dad3ce9de8"},{type:0,amount:"4395705996499",fee:"0",recipientId:"AMZueSSbjv5eBjytCubTZy8gkkFov5GQJb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220201fa8fdb645e5a6d8867dceaac2c15a03323f7df042a1c32d2cc0500451dc9102202980c35218796eabfe7755d019448caca47b7892d756548585cc2f10803ff878",id:"b12f8bef995ddc79c9ab8b62294b59ca171e59af53daf5b45173758fef8314b9"},{type:0,amount:"4410451714906",fee:"0",recipientId:"AeeTLvBUBeVaWNW6WU4dQ5RaM1XkFvAz7Z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e82506b38a0e8e95f0bba2735b71ea2d00ec3bdb4a1e11519960933acb202f2402207e93347b0fdc6263d6a0725cafb8a15cf6fd82dca3033a5a9520408b37dfd3e0",id:"0f41c6cab1711f15519c238ad3913e0f99f45604f01181bf312450fe142b42f3"},{type:0,amount:"4410451714909",fee:"0",recipientId:"AeVsSShGJR7KWQg1DHKEqev1PDSDREiDfy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a53783236e53c4d54ae16e2172b9152cb44d78194a72a404849ea9d36e783d39022030ea460212b5b2ad93542eb7e27806e6b6215f9d005863297e9a55814071bbcd",id:"41666cc004f1e16061027115720b89eb3fded76b0032c3db25e90178fa158ace"},{type:0,amount:"4411611467971",fee:"0",recipientId:"ASp6DK4Fcrji5LHRFCwx17YPG9wdnXUnq9",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220456e45ce3c5fc8ac7ff423250d7ba6248b29edce819edf5e1ff2fad55702e70102203f1a313fe9dd3705f217ca2a2515cc7e26e316ab7bd4228dce7e600a54f2d98f",id:"0515f9a1e521fc8e692c197a0467ab01b300ffc3a4780bbbd5faef682ce9514c"},{type:0,amount:"4415891272021",fee:"0",recipientId:"ANR1PwuJc4o8Wp2qpc6uUk6wWjX5QRhX47",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cf11b29ca14aca61107d25fac12d9a994c965392dc0ba3e1177c9f91559132ba0220266d7dd8d55b8eabe70e95190c53e9cb606c82b3d4c4f4b578afa933873f6b20",id:"ccf658c1b13a22aca678f05fff271fb533459d73fe00e361d1b1b96b64fe2d43"},{type:0,amount:"4507507351910",fee:"0",recipientId:"AVF5GuU4tJ9qd6YewAzDbN4sZkzFDNFgUi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ef1c683d99d3c0228c8af10864c6981991f0cd493262303514d907e1a2dbe46802200c087f8aa3e4f2aff028e14664e5760873d753d7f846eb0fe1e9e30fb885eb13",id:"450de1b4d45c627fb948d1badd4cc8a70c89f3436fa5e745b795545b1ef06927"},{type:0,amount:"4531651714906",fee:"0",recipientId:"AcKGYwT1xwcWveaQE3dBqqqqTT3nnfpKbg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c71f196cf735ce57f667d19e98ca7296c9dddf84bfa634318315edae96a67ba5022062cb8e1fec6e86e0f79e50b9b0c52a943a772fda7f5aba0cac56eca7cbe7066a",id:"d679cde12bd6e8ee711e0979e8968a1b97d6ceb9fe19634835355733b0a012ea"},{type:0,amount:"4535436795104",fee:"0",recipientId:"ANPpeB8JWX4gfskbcev8a6RYXZSSaMs3pv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b86b575d515ed5ba323eb805882031a307b11d63c65249dbb52d20bac8f41f6702201ecf99a70e608349febe6ff6d33da93336357df5f9255757e9096d1bd1ab0743",id:"d496570ca0432b0f7d71fa40c94fbf7f9388cf27d7bfd1c18617e70c96546be5"},{type:0,amount:"4641265354653",fee:"0",recipientId:"AXyPubrCRRig234zKtDMzzSVrPKoTR2vNt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220312e3a6206e914414d40c7011162de5061089520ed5dc02ac0f88e20ec1a52e2022069011ece4aa149869d180c118870995de0280b5343791f0152705094f088cc4d",id:"afc269e369f0a701457aad91613679e5151e0457bdaa3ca386359882cb3ece67"},{type:0,amount:"4680692119983",fee:"0",recipientId:"ASZgEyR6XZQ9RXFoUtuyXY7gqHbC64vkU2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203c43b599138e87457b214b1e3d1c1e83bb699d06a01b01e6add07df59b4c5b42022079f8d76bcb6bec406e86a5acb5cf2e926af71349801d6ee20ba89287c432dfc1",id:"121fc9d4fc8e2cc2f95508394b6eb20ce3593cf6c297fd4e0cc7d48d852719cf"},{type:0,amount:"4691051871764",fee:"0",recipientId:"AGa6Frh3DWJMmAsd3Nkn4bGt7n6bFwG8qw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100808d7e940940c758d49ef8fb12660f15efa0c0cf5ccd391805a490ef877322da022005388d608bf563be295af2d05a993b2b1a87c93ece23ffa0f29c1bb412104b85",id:"0ac956b61b69b38a04280abe2c372042dc63a8267b67c4a6f23b7870f88a978e"},{type:0,amount:"4697862065215",fee:"0",recipientId:"ANQkpXR4MwEdPpgbEdi3BaxF3qQMTGo92w",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220522fa6db9ad2b0d1a899e533b97002774bc90d96495b2493c200eb777a52da32022049690e22275a24280cbc7df79b99c92731c8b9b95261a07ab01e02c295f2ebaa",id:"fc6e5363cc3ebcb775be0446dbe8add45d7642f58ab984cba460ab5d966116be"},{type:0,amount:"4807392369248",fee:"0",recipientId:"AXYbSuKBYev8pU4TK5GkcwxWXWsqFL1Vvq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ad8d8f2a9ecbd9f954853681c27b5a46ac43b0db909544e6b23763932aad2f4022075e36c1e9e5260f5099f0fef9748071fb3e3202c82b0f685f6e56497c0ed929e",id:"a0b9708d51039b38e4285f869cc4ee2e29f620f84837bf3147d09e7dbd91295b"},{type:0,amount:"4900011855261",fee:"0",recipientId:"ALZLdzs2XH7Ma87nS6qnGBvipdXCwXEcom",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022055e239d43d618d29581141d520ea39e940a627d113d417d39b5e8600965ea1fa022013dabd576ca157cf2aacb55588570d6abefa793db90617f9b52b5f8bdc5c0bb9",id:"bde6c2c3a29e7d20ef59a478faba012f38555663d3468c12748c1d0d5e70e292"},{type:0,amount:"4972512330701",fee:"0",recipientId:"ALT8t2gVWLdEgc516c1QTXbajnsDxTvrMS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c4bed4d0ee6867797c4c8e3c3a15d169602302dff9d0f60a683881ae0a2cad7b022067e97a1f63f524e3037d8f29471b30007579fc372551e0c8e02f2924d8f5cce2",id:"c2f507727122bd6a0d0b78f12a8dcf1169d9f16187877e64bc24daad9679e0d9"},{type:0,amount:"4977195555049",fee:"0",recipientId:"AeNTL1HCB6ZBvKLHVMpHnGqVksTDktSCfx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a0a35c51f045c7b5020d616cedf80411457f899f160d1edc5a326f827b886e4e022009084b2462322f577fb92d07b220eb0d5f2c17e52838faa7ef0dd9a0913a01a5",id:"c0d6bb7397e069bf8fa73f3227860c1dc2f262ebb274d8ac79bc70ee5e6c5129"},{type:0,amount:"5000000000000",fee:"0",recipientId:"APBJH5q5UPjfekwkaMemUzo32WsAGPLgC7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220668c6951f67ebbd0aad2929ce9b00210a7d9f669fdcc1de95d713264a0630d420220630ba108e8db883d532c16fa21901ff3fd2a150bb6473d083a859416164fc862",id:"595117b36fc9609f6012d0afb10f3c072301bde2b65ee67d4bd5e00b9ea5b456"},{type:0,amount:"5086720977858",fee:"0",recipientId:"APiXiBgZ5Vk47zL7r6nXbb1feEcJw37a3Z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220532e792b6107cc509119c9761433c93ec9ffda5cc5f4ebde8b0add5b84d9960b02200ef235d5bfb86c9083ba1917160fe33ec880f547845b80c456f4a2cd2ebdd380",id:"2e02e34a648a1136e0237953a75deb9dc336bfa2851b764d3b419dea851b3688"},{type:0,amount:"5145527000724",fee:"0",recipientId:"AQvzCAZgwfEerwR8Wbi2jtLRZe1xckgwnz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022046c8c7d959a7e4a01250674d44fcfae8d2b1a1d1beb302061f98fb3baecbcca30220795103528d96a6b86575d359c68af22b864bc6e1c412e4501bbf80d55690164e",id:"29e47540c5c0663a2a8612e77717256275a82a29084a03ec6b0fdc940ca3b792"},{type:0,amount:"5145527000724",fee:"0",recipientId:"AUNQekNveCH4o9EGHfuMAc45P46vNAkJWQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210096a8e326a4c0ae121e4ff4428d3eaf00682d0894367cf354ecd68ac2063fd14b02200f21db687cd6b747dc4da81857fe7decae1dbd7d1e1570c8e609a27b6008d17d",id:"fc43db98ac4c5b9f1b3687e91da1f922a1328e4a33b3d5fead709911acf6c810"},{type:0,amount:"5152228598785",fee:"0",recipientId:"AbFfKLj8cbZCpD1dFcnx9M1quKbGyvY72S",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200108edd763dc24457372d2be73c2e0bf08c551e81646221bd02c298222bd3f6d0220304c7a242cc0b1c97956e7ffde176e16c89bf6bc024ad2f85edf0b531686b235",id:"ca1eaa9b36e044f32ce3d08b3d2a25bf6fa71d52efaddff1fa1712eeadf76413"},{type:0,amount:"5165668063555",fee:"0",recipientId:"ASxsKmBbAojE934PbqhJ1mhXXpkdrEMGi2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220218d87057621c85e71f76523b123fab334c76307c5ac2030c572ded289d211b702206a80d562a887ad92a6ff0f5ce69202578f382e55a79665526ae3a38af5908f46",id:"fabd7438e73fef81feade0e11ed6da77e2eb6e0a4962b9f945cd6288139c37e0"},{type:0,amount:"5229284067939",fee:"0",recipientId:"AV5Ap4mdBEJKpbfUZQYZWxx6Q66yJv25ne",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022039474147574e5fd182277aaab990a51c8254d41ac8d8740b646dc26c2877a2d6022033eaf619263d1b0e415c5badc403f76a4c9851d2de87c35f7ea0c63d35840a77",id:"e03816fb6db7a11b0bd2ade86f9a85765e3ab7a94e2906b6c0e30e7d8e0b5fba"},{type:0,amount:"5292542057888",fee:"0",recipientId:"Abos1R3ZsDqgNa3T62XQ2gsyE9ogYs6fPi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ea11ad93fe457b16aa68e3b89751a8556aecc737d0a5472695c8731beed5821c02206fce4f51c29956e7c996ce0b9bfb75702c90983b4a8a59a3fa3dc75c06a20ef2",id:"05ec9e7cdfa7944660f3468045a013182795f23b066e02d0706be47cc49fa88a"},{type:0,amount:"5308261029410",fee:"0",recipientId:"AGqBNsAT7ndLy25CcGrsaRCrXRzwhR3gLY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b2253589018b40a1f81e3a216adf75f1b6498cb9761023f6bbc0f120c21ff20f022042596e6765c285aa0905e8d173880704cb843b1ebf97de0e92ac285d972bc2a4",id:"c0ac0b134286a830d4f2a84e8e391215336a5f1e46ef05ce9a1b7f47da0729d0"},{type:0,amount:"5312153866513",fee:"0",recipientId:"ANZCH2mAMCUAA9TJByBgt1R9PZp8j2dnsX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210092551cd132785e29add9309d136a6883834349f2efa084138f259c7b500dc5f102203a39a5ef2dc305e947758bfa72d6d5ebaa3afa3e36cff9b17f3aaaeb0079cb58",id:"c646cc3909e6032cd9dbd8df7d5827abfecda82eadc0155d7f2667f33e37207c"},{type:0,amount:"5357843265955",fee:"0",recipientId:"AQJwwgFQ4F8NxNUqn44d8Kx6rB8AmJFiBN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210090279d7a8f908e661b3651cddb1f1690868b9906c0744724356747ec26e1d4db02200942dbfcdd9e72db4cf2ca3fb4d20b6b94133a781fa221ebe47d964e8c03f977",id:"aa45b2bfbff8221f7b5809e7ec6947f39e57754d1866a25d2b855b8b54080ae4"},{type:0,amount:"5399929874642",fee:"0",recipientId:"AeRzn9WbFJkeExpJ1ib9bcqPFGBz6fYha6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202c2146192848bd5fe02d0968ed6629dc03b5531b945d8e7fd344902c46074a5c0220677a6ade625198cfc73d9e60d9735841111dc5fce252a8ceea6ef5aeea325337",id:"d8396e0dc6eff0baaf523bdb9ec0a0f683ea01b2e7b481edab37f679959c72e7"},{type:0,amount:"5452743873172",fee:"0",recipientId:"AK3xPfpuLgDxvcUgvHE8G7nzgJ9TikonCM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dddf3ac76223dc2e41a5bf9c19b0e4e448e2f90c1e9970c97c4642c13892f68202203e5e2ad64cc817c835b951212e7a65b09e565f47707f030ae39b770694fd6f6f",id:"96fa04274bbbb82e73be6c4baff991523c86cb022cc8f4b0ca267e8f2b5fcd29"},{type:0,amount:"5454583384732",fee:"0",recipientId:"APrqARoKAGvFvSd2ipxmhWt8LMNoJPxHDX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205017cfe8817f69a0383d53361483393f92c9275face9004b127e7d3ee4730ecd02201259d5100eb0ed196778b34bdef3e90a59b34dc0d61949d56890c8c1c994e400",id:"12514530353f15e198fd07bf42693c050c1bbf92f1094b9060ec2a940f1bae19"},{type:0,amount:"5534027654283",fee:"0",recipientId:"AURkidZfCN8uin9FX8ByFwCpCpqAs37uyK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220752c29c7102b3d0967a2a369eb8ee0f8fb09bff978cc00502069626526a6b7150220351f29c9591b208740088abc640391b793dc7fdaa56a084b1a12bde9a3ca8ae6",id:"d39878fa44b4eacd96c1dde902d6ac74748525845fde03ae3bd74bcf99f0e14c"},{type:0,amount:"5596708324890",fee:"0",recipientId:"AW8dQKTqagJnXcRfDyYXiPBJgtY82sjSoG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100be71df263fcfb94fea34c0ade0751d3f7b3fd25406d995555f2692179b1100ff022000c3c93736cd0bb38fb59f5a4336dae6486c26f643c8cb8fdbff1b06d8f7bf5e",id:"5e016277b51da7b156b41d5790536d3f643297f005202b5e504d4ea588451d31"},{type:0,amount:"5613302182608",fee:"0",recipientId:"AYoqmnDvAruDtVpKpmJY5XGHVsdtAsfYxu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220171cc8f28be49906b2b55123b0b5e1dba8a0a5be228aaf517c3b5f03d1202d2d0220559bab26591db1c5348b69ec6b801f607ec8ba8b84030759b6edb6827d3ac0cb",id:"9c1b2c56282b48749139ac851a3a991ef9e4ae3926e600cff88a4182cf9b3e19"},{type:0,amount:"5623070875236",fee:"0",recipientId:"AGtJTLKoLnx2oVgTpfi9briAHR7SrT97PV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210080d87159f97654d34b9cd2ccb64b5c3b44824405bf464462184bff3cce93d49c02202e72887f5a73adfc0101cd5e4f0bd019ac66e52c029ed1790890389395c7b16e",id:"66ee1e6db3ff2989dea803fa06d2cd01981d1833a98b960c79295b63c653d3dc"},{type:0,amount:"5648505606296",fee:"0",recipientId:"AFsy8pLNJnnq1R36WeJmQNrRygxPZ4TBv7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210087518cb76baf699d909ef78187be4e5918f47d90bcc88b64612201fef8d672b30220668295a8f17296c8992a8dce97ccafb840b1a939660c7793f76c55ba4d5074f8",id:"1eda98af243f8de2c3cfe8cfd2b2de565e5e5b8af91998b716edea0da85607c0"},{type:0,amount:"5648906556452",fee:"0",recipientId:"ASjpXv62BcY7wLgJLkos781E8HhDjfPZ4c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206f1c839e8b95af5b74909a9febbabc652f35bb9cc6afed4dfb1294fa3a57cabb02200a3e9a2ff90d7d72808c5da906d873984a07576d593343a520279d5d81053904",id:"450f9e10debe655d9786b3e3a181b79380207e54a5460e21d27c64cdfe48bd6b"},{type:0,amount:"5667502986102",fee:"0",recipientId:"AMMB8GyfXAnSjbEQap9UV1KxfiQD4SFhnZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022041f56e22efaa29c67f715270a3ccf5f1fefd2b2c9a3a3473afdaac2731542df802200d42682d5a7f7d578f3d8065395662cca264afcf6c8941d558a45caf3528380d",id:"3eb6c19696d81659c7bbd979cd9d926a6473f86263b262aeb0ee10ea6c71a57c"},{type:0,amount:"5680013606036",fee:"0",recipientId:"AVgqPjPJ4RjFpw2bqmMkvHGHhTUnvrT7Sm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022030881e7cfb479dfdfceccfabb2acc03ffe03ad5e515c79fee770be69e107d75e022071b7098cb80f71d6a26cc8aa3b62df4d1dc56ab67cb86541c3a217ec9737554a",id:"9571f17bd17068f34b02419e07be1c2e1a2984ead5800a4b666b38ca8b235816"},{type:0,amount:"5880602286541",fee:"0",recipientId:"AMjo1KKaWVXTKxgY8f7h95pBGi2wjX9kuW",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022077e2def23f7441b5eebf718fcd350c6a5af8207e01f549932dc78c00eea12f2c02202697c2c7aa53ce55a12e88f4d28a9a92afa6d2e0b03da2c81de9cbeea5945c6b",id:"1f79270181b53adc2a6d320fdda137a3a2b0a5d76ebfa29623b7399f1bcd1cfc"},{type:0,amount:"5893686626629",fee:"0",recipientId:"AGWQjb8AZSSgin8H2HHHHcMNoA4iS1HweV",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205097acaa5ada5c48df6a182a101fd1ad2005a521ed387bda6a3cf48a93951796022001c1d933f2d00539a616151571e013e10a22c25804ca301ddc65652164a2e58d",id:"394aa80cac2db93a5aca32bed46ef28feb1c5e49b0fc26cc220bcdb6a255c58a"},{type:0,amount:"6008981564334",fee:"0",recipientId:"AKX2t7kQ4asoStjoSHQKhGVBuDLfXVwtHk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f53f7fae41d09c34b7371af87d33ccfad7b3fd29df5644dea82ed1e45706d620220027cee4f90fa3a0e6037a4a321251a53940df0b8d44564343068187d19e423cd",id:"230f86676f4336a0a640ee78f3534633d1af95728a495c47bc0ab4ef1d826604"},{type:0,amount:"6048199451708",fee:"0",recipientId:"AQQCMjGnEgsutWWRfL8BbUrsGe1z5HryH4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220211e94fec0b2a86f27a27009c1ca016d618d6415f2745e444ffe1d601963f2d1022023829c5346a27ab73f3f70cdde7200df4fdff5be708c6f965874fc200d529a18",id:"b26eba2e7164c76a09a874efe75237c6ea80369105872855350b1d3227d0249a"},{type:0,amount:"6062051615496",fee:"0",recipientId:"AdTSi59wjy3uZTv4tnenKL9fFWajaeYsCU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d5e6a1d7bdc9206e118eb2552e96893ed4af47543c1ac692798bc2085ae43fef022067cf6d3e916ef610dcdf6953c778f24306a989041bfff1ef3f1f599b90f11570",id:"6d99eb7d36ba0a942ae8e0c870b31312e6445392c2a05dbaa8734c56c249f1dd"},{type:0,amount:"6099257525671",fee:"0",recipientId:"ARPxAfyT51W26UdTgSbfVRdjUpzeiLg3Th",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3043021f4867133c5f9563bd0e953c12c2c7ed084e469b2933da10ba51eda964f3f74d0220527964fd63a3c23a6e140d7d2c142a0297d02786577d91f3a97c863ff1f43f00",id:"652889dd48a67aea94b758b01f454c7126398882189dc752bfb11e0a7d06602d"},{type:0,amount:"6114940797408",fee:"0",recipientId:"Ad2CVhECLL4ekRXmFVrYjGjALmyFmDBV82",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa235782a7afa225cc198c424876b1271be94a5cbd18b8b11a2d3a6e5b1ea561022006309b82f6241beea5cbc446d902ae570cb18c6847060e45d6287a2d0524302c",id:"2be98fdf7807c6d82dc2d8e7263194164b9f55822de204b1fc9258b735cb9003"},{type:0,amount:"6177278671897",fee:"0",recipientId:"AUwfer8xFsv4Yk889R3n4oQF1nxAKts1tL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b8cbb6b32084b8ef479e3dfa560eb6a99fcd8391c26299ec9d7339e98bbf3e9b02201effcbfd175cf6d97ffc072c22d3966ed4b22ff771dfd78f7ae7b03039e00bdb",id:"d6c0d6f8ccb456ff951f74e3033b503433185415be2fef77b700b096a1dfc233"},{type:0,amount:"6233789537763",fee:"0",recipientId:"AJ8vfPKvPPLJFdqVSQh7BBcZRF5GSTvBQJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022073c38a4d26f344b6ead47c4ac5f7e6d96a8946d423da13bb14b24c84c69e68c1022071d29be6bfe25b7b4e33b7b6d6757bb435f9ad9d00b1824b81cd5b16f1e4279a",id:"277669ed0959b0a322f658dc6cdc807ca4526ef9b7fb07f7b2c55436cffe85ea"},{type:0,amount:"6249771580151",fee:"0",recipientId:"AaXTDvrMHd2nW34ENidytBxjtrALaB3uVF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206c0337c25c9f541d130700ac0475836bff0a69b427ad1a352fa18155212ceebf022022db04421beced42fd6fb6723769f5eb19443f4cee8146a11f2386fa882087b6",id:"5de7ff26c18b4b4ad9ccdf0e09a94fad3053d7f61a4d07beaec231083324a602"},{type:0,amount:"6336348963748",fee:"0",recipientId:"AGeS6jmsQfmvS95KTbXLCFEKqpwUoEAc5b",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022002d5c9af048e1efd8bc37d2ad0e0aa64781bb3a738bacda828a9d2c3cb7affb302205a3594eaff82c4c46a6386089df34ce45aab71ef0ef1123e623cd64793c5f4d9",id:"c13088a3d622fd2925df99c39a4b25eac1632c68b3386f3351d9ede44b4bdf48"},{type:0,amount:"6347464915470",fee:"0",recipientId:"ALvAAwn8MHupoymbgiJSCDYiqjQrWTEQ1H",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203d2c5ef313400dde6be26935d2bf2eaa8f7daf90acb6dda71af277fab69b55fd02207280ed0a4f4114db9dbab70b067343a36ca6361e0b00cb9064a39730e9162b76",id:"631288a43196ef9f2d5b214a93c261d1453a532d83f3f68a441905899c5e5165"},{type:0,amount:"6608432032957",fee:"0",recipientId:"AcbUExwmdGDJgA1GWAjdEvx5VZv5VZT6ck",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e9c9364a47769112d10d48b398c5190e30c124d1c22b6d3bcd751976bd149bf70220297154a4646628b181af186fafc2f2b89c64b2d6b91b472f14353a324663ed63",id:"3def7e1baefa19fdfaa298305b4fed13eeda8ee4d8627304754edfa9b656e403"},{type:0,amount:"6690095694899",fee:"0",recipientId:"Acj7HFPqsAauRBAmfHqAcPiscUCxdiS7b3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022034909f75febe76da183cd50b5f7e0745a50b6317d1dd1327eeddab9f42701a9a02202583150e149038dff6694c382b45949ec0d052d1edddfee4cc31da83d7c39311",id:"e912a67d2b2f1f5579c60cc12b09898804fd06914fb6b7032add9807c7666bd6"},{type:0,amount:"6816039047765",fee:"0",recipientId:"AHBdGME8KmcvG63JkaQ1FndwmPWyuBWTgZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ba60a9d3173dd42720e271a63126cf2b49f83f0846083bc0314d047be29853cc02206d2fe11664db806837fdf975675360c51cf5429a2a32ec88439f4969a40e970c",id:"4d1f9302f5b7ceb7682750384d414bf0a5f6b36820de505c8965720f46874df2"},{type:0,amount:"6845037580681",fee:"0",recipientId:"AXFnbzewz6GyVVXuMhvAm7cyMLZRijpZXZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210084adf931c399b8330219ecb1e0091fa02e7e400e8f44abffa0011c3d5123a8c702207333080ef7f923e35c53f55fbda2cd3b686fd30606b0d6b92fffafc0990a51e2",id:"beaa5d25d2d5156209f7a6bcea44f483080f1a3790f72e2e7405a1b7adaf7d83"},{type:0,amount:"7198886304127",fee:"0",recipientId:"AYidBk2SLnvrtgCu9ZYX8thNPweQXKoBgt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bbc9400997cc61072e38bcf2a3b4a600275332a5667fcf9ba463935309b6a98f02202fa932ee91e6f940b9d943255e1ec649517302c5a93b54fdf49847ee5c0abcd3",id:"3e725df96a6f88901607d832bad39c83e18f7b52e689a3590869c85cc4dff5db"},{type:0,amount:"7274098215498",fee:"0",recipientId:"AQiRjkc6LSFBc5JgQHfEtRYTBKzuibCm9d",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a0d5eff67117daa369f3b77839d2053ab16c5b659dac2f3457a75877cf346ad402206ef582d8394a23e3f535385d02ec135d09bf6aba3c1d812228d59052f3cac48e",id:"f13e17151b9761aa406da0d987c8790eb0556d93eaeaab95d5d2b91458a951ee"},{type:0,amount:"7350458828062",fee:"0",recipientId:"ATWCEtjbAVLDMNCyHmdRMeoiqcHPahb3A5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206fd243d047585330ab1711f38f4a5d8de5d283df73af280628aec73c56bc13f3022035c0af74cb2df381b3e3ea2056d77859d085da0105c2e85edc6d607a6ed6df57",id:"9492b0c5b908ff768932a67731efab51d12491d654ddf6144307949596c4f581"},{type:0,amount:"7350605843105",fee:"0",recipientId:"AG61Zuk9tUxhu53EfvBBNzh6aLiHshmbgk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220289eb9006920d7e06fdf963d3a6b1252528cbc897bec005c20773c2a6fcc1d5d022010e275229dd9e83053e9cf8e931e8d6bf28c8b5a7a40275f6da2d08e68f12445",id:"a2e69e4e5391966a019444eb1920d8e6c8793cee7c6778848f14eb8e2a711d7b"},{type:0,amount:"7350752858177",fee:"0",recipientId:"AJ89PsZmopZgpAEJYiFpN4Nsf37AmqGFEJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b1d30a5b801388ff04e1afbb0a1a08cef63e0ea4f256826b49438559914965e002204c6311d26e092f282985591802be6819a159e368f86f8bc72b39ded94b3bb93c",id:"6372eabeb335296df1f7dd2d62aaa635bcfe1259195ae57967a47b1121d16578"},{type:0,amount:"7350752858177",fee:"0",recipientId:"AcxafSyp9wY2zZkqDSfX7uM1ZPsVsBw2mT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100af2d76096e5de9e708de3bd6d68f3144bebc43dfbf09272a9f402870c2581e49022017a11a3726d0930d47a965393455304dee143d0eeb992fba84880474de00a211",id:"05418f5b2eaf40ebb39646280a9f1ba7850e96727bfaf4bc4379637ab169e7f6"},{type:0,amount:"7350752858177",fee:"0",recipientId:"AZXTaxgDD7YqDPJLTkWwKgB6XPZT9L9Ata",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a54c0c0c82ee1943d9fdd66b10a0a6f70f8697bf5c2e5a70b108ce26669a639b0220463b72006b1f45a7403ac406181fbdad7ad4173d4109f20c25c890551851994a",id:"d311075ad854a0aabcea25b63cdcdf8f4b81ea41aeecb05e09f64c5e9d9056c3"},{type:0,amount:"7350752858177",fee:"0",recipientId:"AeX9ZCUY3TgYBmxhT1eA28buQymhzcRkdG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202bc46f5c4714ddec901a698d0ecb09e4eaedeeb654ca202f55f3af3256774a97022034c060851358a005d60fdc2c88a4706e0cd4252d1ed84f64c42227bea5fa0a5a",id:"f5338178edbbfef4715e79399f932057179aa09bca7ec7fbae3c170bffa5bded"},{type:0,amount:"7350899873234",fee:"0",recipientId:"ARnH7KwF2dFqZBaVtg89YRNpiFoN9E5s4G",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009a0f64be9d209adf953456872e1bb098c29174f219b4b620287a624663890ed802202894dd9517455c765ef6868b12239246a2b4a862cd9e5c5e53cb7e24b452f5dd",id:"833780d0f9ddbdd029d0a4c3fc15248044540cafabd9ea99f39ef268de3e559b"},{type:0,amount:"7350899873234",fee:"0",recipientId:"AboFjwBTGZYhpHeBSRyX1gRifpmGaba1Ne",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009f02dfcee31f851c53ee9ba7747732b8395dc294e22ce326bba9087ce845939b022067c32661f0ea2f62133dd9367ce19762e8ba976ae5d9fdbdd0b5747880527ef5",id:"da390944985838649b7fb34067c7335926531602ab7fd04993f3d3dca8cfa0aa"},{type:0,amount:"7352075993676",fee:"0",recipientId:"AHJUzj6eMQ9331gQSJ8VMmxwyTxXgojdUy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202efe05396510be9de3a85403629b8de370c7e239b9aa7ba8274a3dfe813b7639022019fb6626e456e050efa3b49ff2bbe5d53ff9c7b0f857bb46a60c4574ae9706e3",id:"6baf648e78dd4f865452d1b2a10008e9ba53067f5f7b33689715e1012e11b920"},{type:0,amount:"7467974903126",fee:"0",recipientId:"ARBHK6526c75WtrSA9twWuFbcvxSQXh1ZB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100820cd452944f0b765c309ecf5888f897a012290fdfa80ada1d79edc8048b068002200a7b4d0de4d6da32ca4e02527c9630f08e2efcb2b5d9a2ad9fb2ac59f9236058",id:"b615051a5fe01170d7972e4cc06eb635e0ac7d8435f7122873308a029d64b029"},{type:0,amount:"7596490265803",fee:"0",recipientId:"ATDz1si1NgxYVhwco5FU8rziXikgzMswrL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203ffe6e56154cd9fec39d3b5ca60ea6b371eb95dac9857a4365b807b329156fdc0220733a0c695b65af96e3f2b8b92661c6a91e1667867580abf25f146ca2362e2545",id:"7c77338e20a9478450a35a4ce4a503ae93c1268850c4582deeed42b2ea202600"},{type:0,amount:"7728600535371",fee:"0",recipientId:"AUzNXqYNtmcbPUesxouPuLnAqcvxeBv62r",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207dfaa07820dff0518a6781b5637985188caad8c308a6716b0eb5b8e49a399d1a02202a44037fcd6142cd558e01469a283cb7abaa6b63f383eed37425a830a38952b9",id:"98b95f131466f769280d7aefbe5cf7fdb7aeefab4dda10d561fd22cefb329e1b"},{type:0,amount:"7863973424054",fee:"0",recipientId:"AcGpDjv1Ja8gybNf1Kg1y5wfjRvB65nLJ1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022001916ce368bcfc70ab18b04a0972d24a4a798c1bfe1ac82af88af3e57f05109d02207d702327da226d245e3e73db80fda6ab378037e21cd96129b5eda4bdc44f0dd2",id:"8da4b1228b425051845def8bf958afddd81be64966832d56ae85f30c09b55298"},{type:0,amount:"8061487401793",fee:"0",recipientId:"AYpKBgSEGotwZF3BvgpXWxGKXsawYQEr7U",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b566d3021fa2bd2a9bac9320149fdea4f0aff2e710affebf98a8e4e132270f27022036fcfa529097201dc793d55940b20861d2a359bb14d82e8fd0a1ae17359577ff",id:"7f88e5d7f79c63317e0c732c03b451b1ff2714bd5d87900faf43b979e551970b"},{type:0,amount:"8091708746281",fee:"0",recipientId:"AMgi4FUnRNsseqVpBVQLcHtk2PxkRFkv4M",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202750a5d5fdb30175ba7a0e8a417026664dfde32cff5df156e5d73e25b26b5f0d02202a6ecd37f045c321be0526ce5b854dfebd8a7b29e646fed77e98a126458a62e5",id:"834bb22d473469b193464fc80c52058042e14d82d6e3ed85b463cef6da9e68f4"},{type:0,amount:"8150156945826",fee:"0",recipientId:"ATuYepEksWdtwk3PTdYEdjytkTKv1L3R19",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a2f40bf9457f828ef8c32f1bcbde320417f0f70eae75ee0492509a44986b97be02206a1fa49f2b1079da0af70eab644a2e161c69774bdcaf10d6b924e3b4b0730a9c",id:"2e66f27a9f97ace05f8168b01858118e23cdb033ee68c84ab0c5cad7d9154eb1"},{type:0,amount:"8360754246642",fee:"0",recipientId:"AbA6wrkyQS5p5iDZF25BXcvuUgfZm3Hy7A",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201477fff0e08a35db8bea53057aa0b8cf323ba63d32e3ad28bed7da6d79007ed102200a5bc18c359443f02793e2673e615dca45013fba0dcf11d9719d80478e8d6e93",id:"c087ec57f646b73353792010f5dab487f12111ba61950c3cb4dcf26c51daefe8"},{type:0,amount:"8820462384640",fee:"0",recipientId:"AZf55Hbr3KnRwHbZn6zoEov7TSkJGhDHWU",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b964e775cf55c8c3c174c1a06ab32919bc940dc74121b06f5f985145c06781550220452aed6f7d901c9ea5ccdc9a3c9538fd5f2fffdc8b4abd1778627f54674319d5",id:"206c25241d5f0bf068e1d532c0005957992176629f09a897dd39dada84b7d500"},{type:0,amount:"8820903429812",fee:"0",recipientId:"AankYCzRAR2mK7z2fRXmXxzUwJMknRPkDq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022023e35b79c2cd4429d44e9a152371760a704819b464132b8464313c139e8be78b02202b5fcd45b45515a5fb41a997d93f55c089e65090a1ffbf31f07147445181d5a9",id:"62b7ad211b62f4c87e4dcd71d72cc6d9aadc8a4077379d96377e3a8fdf468b78"},{type:0,amount:"8909427869508",fee:"0",recipientId:"AP47UoDcZ3XMq3P7VBLpJJnHGjGaD7yGyu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f5619dd275b2e1857001e6a803b2cc5978b562f947e569bb61c66d57a381075702202087f6b32d421f28c766fde6853ce0aeffb672903a9c065f3520d4111653d5f3",id:"8a8001b5fd69483fb8abc89b2c13626c30adcdb94c04a25dcdc1d81a5bc3214e"},{type:0,amount:"8947739735763",fee:"0",recipientId:"AeBVmaLa8zk43EApXSKPcTudHKRqDBYFWd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100846c22b8c3b999a50686b0df62755762c8f3d6e856d30ef3e467ea55f0755b9402202611440aa0e7b6c220399b990995b991324b3cf2fe8eee8d3724736edc00be2b",id:"e434a3e0a1ca8c488797a9a7e10361b4f0889c8528263f2d5da8de0ce2f923b8"},{type:0,amount:"8987732597729",fee:"0",recipientId:"AYtFa1PZcaXinZSwvsjoym27aAAKwEAnaX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100871e75cefa2f4aa5aa3e2602c3a918a98589889bf157f72e7f550085423d3300022058f068d7af9ee807c49abae45edda26876e1205504229609397e42bf26d8b4a4",id:"89f718ec38b7ac3e6ed5c353e8d6c6b7c77558357fb317e4ad45f00a593b4d2b"},{type:0,amount:"9019606582562",fee:"0",recipientId:"AKeLaHxdcSBzMyM5bJUvThFcTHsVxmmatz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210092e17b11d4c617baefc3df8fbb432d34ff142e1eba516f363507e6f7d5dd655902207278a3fc300dabd87c6103e680d0b4f9a9a9daa9a7ddedb372d8a5039a5b8118",id:"b1a04d1ff1bb94dc1b0b1902a803f95f29b4cb75577899ec9ec8f0b3d042fa17"},{type:0,amount:"9073460596513",fee:"0",recipientId:"ATNoXbqJPxJLUxNrPoGDYXo4TL8dsetmgz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008120ddb52945a8a06d38ed29d2444d99ffe8e2ee7a6626ab6444b3484cfd94f102202f304a833c539fe335c91ec20005231362b5872d37f2f716ef8705857dd44bc0",id:"aa0f4fabc4952d57a65943c6d9a4c6ffdeb77ddb984aa4c6e73918028e697816"},{type:0,amount:"9106661500215",fee:"0",recipientId:"Aa3rBGChkK7iz2NVnkUx7pkjwgtgaZRpVo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e61fe14e4167951da3bb22c81a12a387602ca09796354cb5d2dfa34b453e31190220493edba4cce40195451c2ef5c260726dd80a81f9e53a2c0bf8714c9b2cd33b14",id:"9db14bae790c26d0073c5cb21b54d8a860d79573f6a24004d5938db55917d20b"},{type:0,amount:"9116425808613",fee:"0",recipientId:"AbSakR7RXYAEWqBh4btWuVXCG29HTdxCgw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009d069471d4566b87598efb5d7f4550a511b7ce0d303f8eecae2532ec3cf1664b022072ffdbbde754ca2d1b57600ad8f0bf8db9d0c628a4f761479ea547af329091b6",id:"a3ade2de7783875db21cdb97071f1cadba19e2a5258fedea37396443f7dc88b3"},{type:0,amount:"9176679868148",fee:"0",recipientId:"AKWjaZp5KyKzdCnJq9wQiF8umWCJL33E6B",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f6d4983def05d2a75eda8867eb47c6ec6cef8c4d13d43c85302161685ec7a324022055c69ebb708ede45540d87ac55fb4b240f9a1160a5ba8dd1aa7d49a4587e6572",id:"4fae51a3f14bd18dd23869bfaa3fae58c31142644e18d4422ff46f922f68ff1e"},{type:0,amount:"9212629406283",fee:"0",recipientId:"Acj1Rg3SaJrZbiPsTRN7mfzKwHxh9ZLciN",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204dbd9c143b3e6d1335ccee6965087fe0d875d4d8d9c9d3574e018317508e248302207cc154f6ed0baee54eb44551e9a3d67b89ae5c539568c208b6e6243e881909f8",id:"5aa7d5de2c38dcc27f69d679349af0ad153ee494ecaee656a757fbf3cc1bbdf0"},{type:0,amount:"9261801586245",fee:"0",recipientId:"AJN6KnBY8VxHfiE7YDyAwneXCwDVtdh57q",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ce0a2d090fd6bfd170616d273b648bd862a37d30e5dc365af8e70dc702f0763502205b95aeadb2b0e3e02a68638e5e0ddfdf74ada07ee5630e00b22e58392144f3e6",id:"006c9df41217c960f9888779a7fe79f5f7e30dfc06d450379c54aafe01820606"},{type:0,amount:"9431021629737",fee:"0",recipientId:"AHpsBCfa32ufzETjsSJj3c3hJNGhjAyq6f",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f26cdb6fece9de8ef933318bb3af05a349e888ee8ab47310aa829d96f2b044d602206f97eab55c51cb15bc25e66da6832db6a4b436eb538aa727a5264fff4ccbfe37",id:"f543ab6ff8794636fe7aaa81367bbc5b3c47bdb7f9080df77d3fd09067941b56"},{type:0,amount:"9456800520174",fee:"0",recipientId:"AXt8HyD1jBZsYE1c6x2HdD8HoVJsjHuqjL",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dbb11f95e9145884db5207db7a7a45b4eb04bb4f0c833c2949b2019194f7c7b602202d8c32008367ff0d486a7c584eb23a9feaf533188ad2e38d2a7bcdb912561ac1",id:"ddd35a61d78d3ef066178e240dee956ba70f73b0ff41aa59fba2543c01ceee60"},{type:0,amount:"9529256927883",fee:"0",recipientId:"AXmh1DXiL4g4JjqJp2RgQdHnycZspLeztT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022039c3d55cd46134f05af871e13604c76aff0e92381980fe2d4e5e61f63efa891a02207b707a5e64a03e5ec1b6cce3372da6da6ca0ebb2e2bab0cda4ee104aac92d0ab",id:"ac0915e202a613fe3d133a3b8e0a4b86737e0d06bcca02202d583e5e3ddbbb3f"},{type:0,amount:"9547731294407",fee:"0",recipientId:"ASjGMDGXLfB9fViy9qPqYGEjgv1jeuwWox",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205e2ad7e24d33353687c030186542c4ecbe2602a35cea56d4e7b241454e785e51022028d425089617605caac7b1827be5cdf18abe4c8235c2a622669c97af32f965ac",id:"d31f907d222323d8e5d6034811433ab67dd7dd334e0a5c6bbe24cdd3accdb501"},{type:0,amount:"9657132907103",fee:"0",recipientId:"AGFfszsJjBPwUf5ko5gQJaX76xFVoKbh2E",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cece660ea46f4303e6b76cacb62da21ae4c8a6d11481ffbdf1b071e49d498f4a022034ed3118a40013cfc73123a39ced55c65bdcb01dd8ebccdac9ca689faf8a8514",id:"2cf431f04c0124d8149a4493ce3b317257512684868568884658512f5bf02d27"},{type:0,amount:"9720973358155",fee:"0",recipientId:"ALxR1nKJXgDfNtEuek1jaiNJG7gNtfZ6qb",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210086691e951494d4808f416e82c1d346653b04f39272cbcafa934b3e643447dbcb0220292d0fd8915227ba07bdc17bb7a7e946f6a50c4c063950fccd47a73433f5b42b",id:"f532635980304bfc7afc3ee2873890f529431ecc3217f8bd580f47f1369d0541"},{type:0,amount:"9861574288956",fee:"0",recipientId:"AYAYsDGPzVarAcqXrpUE8eYcftN9J2UNtK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d7531a783114009e2775b63dfdf0123ba0bbadd193e284a9076b4e02ad1063dd022041f3c3c3a9dd40d17483c4c01d2615eb89762611a5924718a517aaa0ce09a829",id:"cb3f0522a4824486a1277d54d509ea9956aeec80cc2fa77dfdbccdfc7a888a62"},{type:0,amount:"9967620875688",fee:"0",recipientId:"AaxB3RG8EhWNB1axLbDrxza3v5E9kphnwn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c9f22c83fd1327fab869e27902fdce90ed952126e7c43c7e9afae0cd9007591a02202141f6f04a4a4b519fcecbee3afa90cac41a090c31393db048946d780735d33d",id:"a47732e4feab4d3817daa01358f6f295d9e4f07ab1e383f08b09ba0cb755af05"},{type:0,amount:"10271698022691",fee:"0",recipientId:"AYDYbKKZ22ym3ZpXcyzPWc7bnvZXRZdiem",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205b259b711e8a7cbef4e8b103cdd7af07e6aed38f65d0f91ce15f906dbf6dff7102202a0e181a4c64494bb7a679e0d86b397c644e3139e0ecd8c90e38fb7dbc798811",id:"a46b6b26e9c55a9a265845d4109e3e03ea963491b5efa4756e49a6aaea94d91a"},{type:0,amount:"10298404754306",fee:"0",recipientId:"AcdSagvBLHcUuh1f3GbqhwxDZ9kuNgt9Lw",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201deeb7ffb887271b4ee12f3feb9b5c5ef4ba4c60cb4a1bc6555474cc96e420830220542663416f5fc69b7797d6a4d231041a6d4467d77d1598e19cfc7a64d89632df",id:"f9006c06167e9095b7398eeb11f8195d715b04be4689eebe59a5864def4798f0"},{type:0,amount:"10305487746344",fee:"0",recipientId:"AGVBHkaRr9XWBLZQJDdV1Q9RXcoB67PBeG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205601083db78190cda32bbc1af11fffcd7f933052794e7d4c95b6292db63c3f2102202bdaf8d58e7cbeab12ce6fa0d34cc70cb02f381273d533db553e15f9b2cd2d08",id:"66092335843fe18ab2c4a8d137fe0e341057060964ab4169383b461df9f7f385"},{type:0,amount:"10318455720429",fee:"0",recipientId:"AdbuHGsffes9YYyKBp9DzKrcQofg7zuSKQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200a8c0a7ace259d0393f8c3662af8f8e27a0f261e69fcbe00fe99a095193965ad022034badec2675471d2d846e28aa0f4cc48ec9d1b8f6879f2dfd769300496e0dc78",id:"457678f9e0c30fd116dda8f82fa4e479b23a0139d36872bc4b992fcda5fa095e"},{type:0,amount:"10360354001447",fee:"0",recipientId:"AXkBtARJ9ibkidfLMhzVSRCAuqWBxRaDhj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204131d85f9493b052192d281fef2a87ecebead69c4e4b72b306c967a2bffd013602201786ecd3284b341843cf434ae92600de4bd044840ea306ef36372da4f8fe7e13",id:"eb6590373de4b7155bd45679378a312473be8ceee6c9c4fb86f2ebaea4c1be1d"},{type:0,amount:"10445981844431",fee:"0",recipientId:"Abu2eNnxLNUKimhqKJg6x2aAcsUJStuCAG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eccb27c0cfc2b60f4ebaf647654132c4e7fab649368a77241c55f72dc8ca3025022016463ae4170d699d3cdd336c992057ac3d5c2ace3be998adb189840afd328d20",id:"b4b03eee17ce3bfdefba3d60783e5fefbfa99f5e2a3ae36d3a77f42dbba37837"},{type:0,amount:"10446382135839",fee:"0",recipientId:"AXBkJGbRzM2rUD6orebcoP3peg2xGbgT7j",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022008bd51d33b28766782018df754e853f8d92672e3ff570d1261fb1cb2f30fc9640220022208c3f0da9cb972e2c1888f1fb720c1e977b7376caff753f23fcad801a5cf",id:"818bcbbb73b9470f0e4d0e9606f937ae2281dfec46f55251ac7b77d8ae545bd9"},{type:0,amount:"10585084115774",fee:"0",recipientId:"AJXuBCyg1jivEDuJqrJwu9R19C6uNG3rHM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100887bab7c2e2800b93cc9df58e418ecec30395fb35db6c3598d541295cf4104580220128140bf3e75736d5710c9df703b7f3a9818a6a1caeae847c0ab154645bd68c4",id:"95ea9f02ecbd2722503b7ad6754a29b3c743e2e114fdd403fc96b16097a3ff31"},{type:0,amount:"10792241696323",fee:"0",recipientId:"ASSd4LMA4BLtskUS3XvPbQYLe84qCJBF5V",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202885acb08d8088274b1a8ab4a28c796f5489b82412344c5ddec9f21389bbb21b0220525fa2842e1e3b91b98a5f8326cdc89d880e543da82be9adff19d923a87b43c6",id:"872e270c3eb5dc0d487a040745293ee5373e2622ddc9d34cf3e4ad793f2c6a25"},{type:0,amount:"11033661805931",fee:"0",recipientId:"ARo1r6758wTHS1QR8LnhJiyLcudybWPhb7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bfa945a5eb00deeb1f4774b9a2d46a44832d38877976f385be3fa88628c00ab5022024546c571207800790fab06037d3292a46d31e9c947acf318a27f67db8e42ead",id:"1e03b495436ab9cad5aabd942c84cb315f7c7796a597a56a6aaf9680f1124173"},{type:0,amount:"12262151610133",fee:"0",recipientId:"AWFxQB7mKARk8W63fNRpp6kZjVsapdFsDa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a31f640dc8ff053899dbcad3ba8b4d67b1046db0c9cfd2dbe8c15a1b7fb7d920022003b089de0b92bdb55701c76ab22306636acd88e933f75cf6d077bd4cc7844c5b",id:"e550f7a823f274dfb83ffdd148c2d18b573abad654583438af7a702ac6de40f1"},{type:0,amount:"12274908823760",fee:"0",recipientId:"APcaeU4K9uQXSRLRGEgDM1G8gtiBG5tCYZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210098a25f2a406512474e48e14d7d009cc8e7349e7b4a51f2ebcd63f4996c2507a502203cda6a22c4fec125995d1163ff1ff725ffe060c6b720f91ae76c20a7217b2e6a",id:"736b8f9771bbec8794353162441c1dc30720dab02dda5f17721f3577b0f7b454"},{type:0,amount:"12417330032449",fee:"0",recipientId:"AHLhrDJwqQmHnZnhEPBJqfEHYHegt9Y5rd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100edd8d1aa1c15c0249e1cd88ccd81edae73250b10df8c8a32549632404b5f0c560220441b966469b37869d5415cc7d90205be883870c3895db4c8b5ce2b4a7d0dba17",id:"9340ea9bdaa5155914bf58d74b856d532f1710efe6c569ecee144d1c6ec51ceb"},{type:0,amount:"12465317334603",fee:"0",recipientId:"ASECaxsSkxVDWry9D5fcygAY5ZuutNBvPG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201ecaf13c7ce1da00ef9f8e28e95be0d15d26951dff1f742399e5298031337c8c02202d756de469c1f1ea127c4d785d723ca5c7f6991bdb8b8e3a9e7be2498f5c9377",id:"6902bbe0e9cb1b9cf2faebf4f96d27c85f4b1aacf9ef7b4dd52aa7d882b4470c"},{type:0,amount:"12637331924100",fee:"0",recipientId:"AJ8YEJ79noVf2n9dm7WktKLy2yJPqmUWiE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b4236f3e9b43c0c3f503906f146a6c736e8572264c9da1507de8cca20d7df08902203004c4ded33dd32eec7b97384b8edaec3cf17c8b0f813084703c289e17572cfc",id:"695597762e9a98153891ef3ce163835b600d7d6c8d622b15b53f70b1da3ec08e"},{type:0,amount:"13156450295530",fee:"0",recipientId:"AMnJCV7YZg3aQ9XFH2Wm48wX5Q8KP8yf3s",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220798836f686318188a82f5a0b37e419bd52a94582e4bea79a981bfef94485a06002205539539bda455d85f826a824772f5a068359d2c0af5f8fa94876fa7b6a83f14d",id:"dfe1528b1eda46e77923bee940a97c678ac3ccf209e146cee8b4d9e590d652f2"},{type:0,amount:"13231355144718",fee:"0",recipientId:"AYhj1z71Ajs7gQPb7TQoK1Th2HWne8Dicz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204e4e7921958f482891c6edf82e87d577bc1525ec26a1606239dc3bde80c7e20e022036dfd51919362e104d7cf98a1d2fcad1517261761e780569d60503dd87c85b9c",id:"d531efdb301103524d38dd7720408e6692c77d4b2581c46b44e98352952e2990"},{type:0,amount:"13433119945670",fee:"0",recipientId:"AJuwxFoWbhWGiSghWDuNLh7B2u6orxYKEr",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e2e10a21a73b7fb49a51c9ce6981401bb7041ee97b929781e9a33c55ba85f8fd022045871513d5cd53061f7b21ba1638ea8502f17cec0eceeb1ef66715712d3a2d92",id:"c37d982d2277da42cb03590feed99bf612911df0df4d0819c410d906e28237f5"},{type:0,amount:"13711299443014",fee:"0",recipientId:"AcFJgpMAH1SCrCRcsgWfXgbQvDiBh7suEd",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206fb5cbaef0ff5662a750ac6a89b6090cb5e54934f86e1852f75b65801397fbb4022052e7eab49c5daabe9b69fe1ced745c2cb722c3c221864f9336584082bdc750dd",id:"96f9f1ef9345ec0a80a1d49ac3a366ce130174c328432db08758a69f694ef2e0"},{type:0,amount:"14115873577166",fee:"0",recipientId:"AZLm98LrEyNEmbfe2AHV1q5V3FZza6x6fB",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202d808872dea296887d825d2939947ac1ef11f72f86dd8d0c6725f280d611ac9002205b08d41e9438076a7689cc07f0d74f3af73158568cda9b0469cdeb4d631c1373",id:"60df15ce23bbf98fcfef08bd24668c1951af818540910ec3ad9dcbc5d2600995"},{type:0,amount:"14159732932194",fee:"0",recipientId:"AWiJP7L3ZvRPzZyc6mmM9qqNcaYbL9ABxx",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204c66842803665c4bcf29c2043e1d9714e3724a1e1dcd935e1ccefe6228704675022010f26ee2519ced03bd61a8095e0830cab83d159c56928d7f11017c67b8c6247c",id:"9d5279ed2f9c0e85a47378bdfd168d29b83e2ee7d6ce8813c3a7b4a68fe50d85"},{type:0,amount:"14302397057832",fee:"0",recipientId:"AcRE9hpuKFJtyqCSGDS1QcAFTYCU17t1F1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022019ce5205866f88b78846a07a0862122d34113cd250df8abd884c7202603af10c02206d05348f0438e537108ae858798cc390f104c69047eb00aa47455bd89fff0b22",id:"5dced5fe4b20327ae767ec3902dfe102e6764a86f20fcb9fc75c6356cbeb7385"},{type:0,amount:"14627998187772",fee:"0",recipientId:"AeDZmqf4hg8HYMvpxJujrVWqCyVUyqZ3Zj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022050e3a4396de2c6bbbc7cd1120e46a01863b9d961bc19ed42f98a18750e61a8bc02205ba8fd0e08d26df41708ae78280ba08fffe1dbdac48092b464da8b77649a716e",id:"816320ee8653dbc97e201b24ab45af6d3c4d182ca9d59b96c60f218803bbe76c"},{type:0,amount:"14701505716353",fee:"0",recipientId:"AdTzqZEgkihPhhqn7isgQNM7UmJCFjSRaJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205fceba8d1f594a4c189f6939db2567a740598184cbb2787a82560c7d33939191022054ec9894c1f430554cadace94c584a6c6ea5f907f06f5636de53d01c9937667a",id:"bbf0def2ca931ae79bb421b00044e5873840c3b761a24cd6db19161a069d8575"},{type:0,amount:"14702758612028",fee:"0",recipientId:"AWSCxEf8ZFBNNMturNTbyrwaHqJHTAz5hF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220415ce13dfa1e2a0f62c4a1b452747c0818aeb16cf852e7c649a7e061b522295f0220738dd8e58a0bd7b0cb3035295d38aa9c164cf1a023fb69c2512f964ff840c0b1",id:"39aa37fb064becdf8f37a9bb1e55d3a1e8a96beb6be1fc1779967690a74dd7b2"},{type:0,amount:"14702828851868",fee:"0",recipientId:"ALcRivRn5MpE7gjYPfhvdjkT7EidnM6AsT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022041e7c81b713fe8ebc58fe4d9db338b89b3663afdd526ecd31dcb0b6e9a8f8b1d02201eafac17f41fdc7dfa29c748261f9a0e79bcfac5e418a1c144b0d820dcf54ab5",id:"19270d05eff4baf154541b1e9acea7f70990c9fad504e043c281d384a856314e"},{type:0,amount:"14708415424040",fee:"0",recipientId:"AbVMJrPSe2z7UCqxfebGwvVnCPePzYqqPX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220429ea8d0eb83bc86a8ecbde1777798182f219eae5aa56de3cae7bbdb4d04e054022051e6769e588884e730ca65b1886452de1d2f7050a9bdf758675f78c0606db368",id:"a116b90dd6924989225c4ccee132706146ccc6a508c8c0f2055349c71d01a375"},{type:0,amount:"14818222131272",fee:"0",recipientId:"AbmqyXrS3NaqZL1JanAV7pi33cxKHewwQP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b1d6a14c5c53e2c96d5080df55c593d397771c9d4cdd9c87a35dcb886102e7c202205e2ead847be17b2d5c71b93b7b50acffae974232c1164971145e6bdbf912a85e",id:"5b864466691fa06bd64c97204b10e4cc4de6acbc4f9f02d9183e96f53ae9e6e6"},{type:0,amount:"14822705716353",fee:"0",recipientId:"AMwimBgD3PLbthyD2pw6x5kr7XdAG81u4Z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100cc44646a784672d659731b5c7aa58da1d4f010845bef874c5dcabd149d2c871702204e067aa1fdfcd05315ff030f488bff4160bc6d4dff149e6d0f248cfe0606e5c1",id:"ae29982e256bf9213db1e8944b73f2c98942fc31a4b107c2d5201f67595102f4"},{type:0,amount:"14895015891637",fee:"0",recipientId:"AYJiw1a15awqfRNQWXXuDmxpQ3DNjWitzM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402205f487f6903a7767049c69f2d80637c45ddf757d5cc2b879df4b12e421223e0c702201ff2ad7ab479099433d5cb74b17dd647a0fb0ea38fe72950601d4510910b730b",id:"4b00501c8bfb24939da2e8402e40ef56c58a5c61ab6b4eedfc528b1b28f35157"},{type:0,amount:"15082558701296",fee:"0",recipientId:"AQbJg9r4c5TxoPPMcywzVfLHavxbWCQs5f",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220502e111dd7864a3bf81e5dfa24abe4f74db23747b2ae7017cdae6cccfb72567e02200737316bb0d540184321f56e7e1099d857c56fb50d9156f2fa4356c56b369d6e",id:"430dc9734272db7f88762940c12c32b5063b5ce5042e8846a48937d2636e11ee"},{type:0,amount:"15241050976143",fee:"0",recipientId:"AdYqsVoQVTUto6ALnocgCvnssTbDWnPAbP",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204012639c893ef39e7d67a0ba9fb133a37120007ae3b9d8ab7544cb2bcdda32640220232cc268d227799a8ea63d58697cfe0a2cc9de3123ff825ee7551a894d0b6d3e",id:"bab6b296e910810366f4ccba38ef01545ee34cd4386c0c1f806369c8d71579db"},{type:0,amount:"15458231619516",fee:"0",recipientId:"AcXhb4DBzzmBG2USvxuJY2uEuFnMr7Qfhm",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a2ce8edebcb297f1948498412a60c8b736320ce1ad347043222bf034b21fa69402205e098d716d247f85e9c454b7b53b43489d55a91be9f19d792ef92b303b48e9e9",id:"d4a58d3b71902d221cfe3cf915429551c77a0c4d3c73c92a2473c3c151c1f9af"},{type:0,amount:"15525088530753",fee:"0",recipientId:"AXDwt4SoPBiSvfjSKgZdV4vMTaNCgaFHMK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100eef9c401c97b593bd75fb52828a9df9bbeb82508006ff0d683309a7c1119e6f10220040995de4c4246197bc51ac7abc5094d9ac8ed8b1a8562ba85634bf430d9d866",id:"f3e07c51b39f93978aa8b6e4f133400e33ab808f17b3a47825afa75a58bb76a5"},{type:0,amount:"15609782909903",fee:"0",recipientId:"AaT8V4r48jE2MtWySFmdk2gqz3oz5RkXvs",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b46dbd720df1b60f59d8221ba0f7af053d7447acfe378b0763edc899300e035602206723c53b8ec4b41f1c374efe7620b94e62f0894fc90174404fe2d36c190ec396",id:"c37f2b2b221265b74534bb17e8791ae000793bea52102905f35c89a5fea5bbf3"},{type:0,amount:"15840600000000",fee:"0",recipientId:"APpQDTuoqkWQex8ZjLCHxNf7xpYuEdWpJ6",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b6d5bcdb2466f138713b14a398ad38c470affb52f714693f836574106ea1cc3002200bbe4f8923a286f2e677e660c7316a815b444db2b6f46849d73402466b12cd98",id:"4c20e8ee483a76470df958bf62ddd99ee14e9a2536be56599145d28afe1700bf"},{type:0,amount:"16008869346988",fee:"0",recipientId:"AeRmfbh2GUoEitySmsQRACFRkPQFh6XxCn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210082cbed89e51bde2a686b62c96c564914f843ca0771b18ee0f57a1266eb181d2402200d87f5c50a8be268afe0210c67a394dc63cfc5bf026db1b58c8950ea185dfd57",id:"9ca43cdb29bb7b775d487bc7392be4f6da70b6065cad1ccf40483b0c53e0b23b"},{type:0,amount:"16171656287989",fee:"0",recipientId:"Aa3E6iHPVW89sPXamzE5CUfAYhEp9arAw4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c1f8856ceeae2243ebb9a171b36ab449c637536365e033e244a6ec47688922530220565bd9cea70b34e2f7a7fe5ed5b6b4fe2eec554def7c32b400df035c5dd9997f",id:"e370cd7fae15dfee56e44b6b602c0bea7819758a9a61fe0cfb5387cffbf5c747"},{type:0,amount:"16171656287989",fee:"0",recipientId:"AYHTbw2P8oKpk9JyPFXKuCw6auvVtr1Upn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009985662bfaf857f58295def71d71bf62109d4e7454eb087bf0af4509896161e102207bce078f3fba1bddb717c318f6eced379c983b9830d4295ae2f6f90ba2fdfe60",id:"7874cc7ba980cda4c93a50b415074b3406415f7a84a10efb43db211eb3bbe794"},{type:0,amount:"16191556704498",fee:"0",recipientId:"ASUXHuCsmbvLNURKg8bG33iPKid3dvyX7d",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022061886ff0eba8d281f18efe0bcdd9ee543c91a19fa82e539aab7a1bd83cb5839002204f05a0c30ab8083a8fbd9d1e48f376b52aee5c23470c0f9f270e04e88fbf854b",id:"ee246b6d6c7fb8aad48fd8dc16e11b86a796a21d24068a87f9822f6fb6db857c"},{type:0,amount:"16746157299652",fee:"0",recipientId:"ATybACcBV3KhQEuhhJC2CbEUeAX5V9UpGy",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ae2122c8f375f70a1d174ec4d2d0fcd25936177ecb38ba43095d7166fc19da2802206c22f1e50d9e150d40e1d77bf1e81b153c546c3f55444e9073c440f5f9a08467",id:"bdaf7fef1b17036b8c7e15f7bd23c975166b368dfcfa840b5e569e5e95b71d49"},{type:0,amount:"17763076895273",fee:"0",recipientId:"AGycSD9trbo9XRQh7cFjk68dniLHM7AfBa",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008ca39400df66d8192aaedf44bc2cd791bed8ac3e0e048f3a94da6d56e201b6a702205fa0caa9f2f27a0d5321e06b0e4a68ca30af1813f7e1069d8e70afa378f794cb",id:"d5102ff88df36c6c97dd02fb8ef8e178ea72e32556c91a2e36f41d2363cc4e7a"},{type:0,amount:"17882280422877",fee:"0",recipientId:"AYzPTsYgUcgZXi1GjA2wHzutz7BMEcbm5z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100da21d666d853ed342f3cdc1f29eb6e6a557ca202c8876723637b51afd38499200220453d1e8130029e2c9b27bc97babefa23385b46f42b25dadd9467e867d2a6a66f",id:"d45a0dad2d8010afcfb30088104c4821dafaffa0c4348db0004e95e4b330fa24"},{type:0,amount:"17882662903696",fee:"0",recipientId:"AJAz37b4PJ9J5tnqBoQy2TDoDE5TiN8qnR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220796c225df7d57a949b38b5dce6ec87cd4e8c1842826369e19ef2fe672c8cf3550220061c7b547e460153c1be12930ca3e9d8fa39edc2cbbdf550d3286ffc1bc2a628",id:"ab25cc4069078357692cde0f4cb9d850988fec28be74f7ad3e97c377bacec8ba"},{type:0,amount:"18446724051788",fee:"0",recipientId:"AGjo125YZU5Ssop4kuNTUYSeWqxMqvKA6c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fced646103cd17b38cce5ff86201c1426304b6ca429e5231422d69e1db3ab93d022043255a9791928cd34118c57b07f1f587811179f29f8065ef35efbc8a698bd61d",id:"197db69caeb74f3de59dc23a8c5d65878964963e785874dd6b8474890106b791"},{type:0,amount:"20225218326294",fee:"0",recipientId:"AWDLp4YdsBUdxtqBjC8J4jNr7dddSCmbDJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203f5912d44a52659b0a679ab303f5044ff5413876a759cd20974afe45f0041b3c02204e313f1fd22299f8f811fd603f7482ca519a8ca9595694bd28d0416a10952fc1",id:"0053820aeed9059247f556586e9e0a4109f4579fefd5245cdaf52f9fd901787a"},{type:0,amount:"20741626925528",fee:"0",recipientId:"AN9sqKHVipVtacB39BFQkPa6dDhdSbUJ4F",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207f0cc0e15878619c6a0eb4a321492c62cbdb57ea87c5d38bf8c45fe8f188178a02206312324c971349b94bbbfca52ad71928386d6810194c2e1d3d0d7ea9d1f0b216",id:"1eff5e79d10063be3e29e764d3a6e4f64cd681a0dabecd2568492e25355bd2d1"},{type:0,amount:"21951221806397",fee:"0",recipientId:"AS7WWoFGGutbnpBg3GmzqSLapSRxqNqoTZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c98da3c32cd3fc557d169c23b454a294d7c226f5481593b22e4b4b0168b3110c022063e54d574b1580bbc056eac3598f96b3c6a6bfc4ff348ae3861835e6457eaf2a",id:"c14b7e1b79336f7c4b26ccd962d0d594c39b067cfc7475a2a577725937e1017d"},{type:0,amount:"22059609327388",fee:"0",recipientId:"AHDuDQzUhW9r5AEcxWYLg6rtnAej8LpjVg",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200645d5b06ea85a4712b6dd58dfd40731036928dfd3c72142558b8d45d3889d2102200b2ca62f33a473edf0330d1773c505561e1334452d0bc1aad4eedd4a9771e5d7",id:"e5bbad079581ef00c4ade09d30c649cdd6b36b69437c0690561e7b950830a1c8"},{type:0,amount:"22212505397146",fee:"0",recipientId:"AYo8E9DEoYD94vJuhFSmZ7Z7JdL5vUuFng",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210080fcc91a7c3aea6ab14ddb92132d820f48d44d08f956c6463a40139cc731051f02202f0dbbc598dfa8830d86d23ac58ba13a2e91c283590dcdbda9dcdc7a5ddd9e52",id:"f8e39f689d66d7277e0afd9c5e8d8e90582abf5eb2517ada993d9db8b6a4d5a3"},{type:0,amount:"22232699614369",fee:"0",recipientId:"AL8BTYeajbkWG8r7A2uYpAsKoX3LMk9uga",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206259fb0a490e9fc37569a4f1fbeec01d783a53a18630b70d2ebba2bbe0f6d270022020025b4c0c7215410bb5ab68d5c551a377e7bf7ae7e364454b7baca54f1b045e",id:"500ce8f0b6eb93696a6445f97c26e559f93f043f80ec4eba7d8e59ab30cd6220"},{type:0,amount:"22622858823224",fee:"0",recipientId:"AWEmVoaBW9Xs9mt14YeXxmqfmSJ7iLszQu",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207d52cc181b70569c0f2058e68603232d5532b5ca9863ad0464ab0af2c29b369802201e7ca2e873ff0f73427d1afb837220a89f17204c04c41c15dc5a32b57e1262c8",id:"74f0e117703a37fb072ed990224d3173a02ed8577441faa8704e767f9dbaa517"},{type:0,amount:"23205200171281",fee:"0",recipientId:"AdCphTbTtmBouY5wTen7MSzjy9fc84J9M3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200ac08f44e5c63a577d4dc5536ffb1bfe437813b5e79073d3118f66011c78bb41022034517534731c508f7c6d87d44e5848cd38d8475802a453295ec332ba79fe1366",id:"7622484aebbb489351c45157af39ec0e1c2f1c75ba8b6d3cdc5bbeeb87cd32ac"},{type:0,amount:"23285447659034",fee:"0",recipientId:"AMnNU9x52nTd9kEu8rDQu4wrDm4DPB3SCi",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202b899c4adaf2d1ba16c09c995dfeb02489ea611d07ed055662388ac291f12d3b02203965814654985d31c688c2678085328126fcc1959913fb6cbc1cf0b671a85e54",id:"d2174364d96891d86b3de6457e579b53b5750218ef9bbda87b5cd9fbb0aa24c2"},{type:0,amount:"23749226298416",fee:"0",recipientId:"AQFdF9mpwxWsjMASsSQFD3kMxghDVfkWh1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204a71c021260c33ee6ae8bb5966e6ab27f09b2c3f11d8123b85c532339b2f6711022042f89f016efa114dee8c5944f160129dc5b1329ecbc61222f3ea5d7a2cd0c547",id:"d231ed2b05da5b4771bca09d3262cd4b66d7efd38ee36378b93ee9e66f0bf6aa"},{type:0,amount:"23788728527651",fee:"0",recipientId:"AT38VrTjd8gcmW1XWao5hHz7zA5Cxvzber",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402204f4d855fada8a76db9e26e0e79c9e67f51907cd2ea7ada9bb6d640c77d49c15a02206fd26c6dac762a78531b42e74ee643f541fab7b4467caa936a865b63302dab59",id:"4cfdd48b353e9f7324dc3991738c9dc8f4c93c51cc18c535390c5328a4ec5ed1"},{type:0,amount:"25133628072635",fee:"0",recipientId:"ATYKgxB6sMBiW8bkuiq18eZBNM7ceyJ1zK",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a7c5a575fc88063777204691c7d8c83bbe794820058c87a47099b4fc523b7ae802201925f71003886a98bd9a14d2e8a4596acf325186449825bfad2d2b0947e75967",id:"5d86d1704c731ec1454b149b7105c223ada5a8244045c91a7386444cbcf9fbc2"},{type:0,amount:"25643974662172",fee:"0",recipientId:"AVQ1UscRdsXQZncshwXSZEEWqvPNMJXtpY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210092d6502d9d4945e59d22fb7a1141717e41918428362fac7b365c5e6d2ee9bfdc02201c86ca71aac24424cbf2ac44ca3b77088cc7c873f826b8b6542abddb68ba50dd",id:"b387e98cd84f82172c378834cc12bf9b21646891deeb37ed9c2647bf400009c8"},{type:0,amount:"25690453309429",fee:"0",recipientId:"AMpKaxERjupes1GjHCVV4Rctj49BJXQ5Qk",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207bb590646296b2ac4b2ae347eb2da399b9df6ba21273b463e7117dd14ab61e4702204861d99922766f5a05b12730ffd84bb9784a37c8e27b58aed3f0b896230ec082",id:"81b65afd6830ef600587c8f22cf425cb485df032f8fa236121d986a0937ba41c"},{type:0,amount:"25763719365860",fee:"0",recipientId:"ANymwDRzUoszXjbJXQMhPBmLrBv37AoysR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008815fa72ddf054b47d90c7a4b9f12c783eca5ce10a557caa79109ca2e51176a20220595c9d31fb930159603274e72362a8807999dc80b3bb49ec43958837ac60d270",id:"434775c5695597b6554e89281a194cd903f8808b655c65f1b8cbcfae3e39c89d"},{type:0,amount:"25896835969408",fee:"0",recipientId:"AdLxpRiPQdsdZqxQWEc2kYxD5YFzKsLB5T",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022079e5465fdccb479bd275f6157553ae46ce6b5c51dd51ff0fd4ec517b6deb7c3d02205213870fefea75258a08f564a7920f2740f4026a8655fbc8d1a6efc6dae611b6",id:"3c33d4479fbe31777d0263d7a4b6c035be675a2a8b9eb9964353af2c43737a61"},{type:0,amount:"25963064569714",fee:"0",recipientId:"AYqoBy73QzTfN9LHCgvT7eH4tfet2RU4Av",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e891a570ff244ae679fb0284f55f65595d7d86ce5ea42323708bcf5daab0b67022078488e4c73790511ed6c1f9bebe8bcb0dd8914fd9ce070d23ca5553923f9d775",id:"5016cce5130bdff278ac554c89615fce32aad318bb8917784b51fe40bbab4e63"},{type:0,amount:"26922263723607",fee:"0",recipientId:"APjnWFvHhfjudvjXHQ7t3d3JuW1efhiWkM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203bdb6af67dbcc1a8a1fc4a71d9e7fd6ca66ac92d0321eafeb3e7e44aae2d25dc022045598a45acc95423dad43741624c047bd2c08aa878cf3175a789f3ef75e6ec26",id:"981e2c0669340b781e6989d2e4ed088e71df124c2c3f90eb97f024fdbea70ef1"},{type:0,amount:"27197785575254",fee:"0",recipientId:"AZrX4pmxJEzr8WkANjFsofL4ww5UeqbVE5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201b3c396a9b310ecc51420e3ba5d9a711269202abe71353aa9a99c9388b3a282c0220221c52a87c44586507dc1ba810a7aec7eabf07d84ed7185616a3ec891f224fab",id:"421acc286ec7cc4bea14a8d3cbe33e77cfdda80ac748e27e4f0dbfc09584bbc0"},{type:0,amount:"27237835405410",fee:"0",recipientId:"ANgMKTXMWHB3WnU7sBeLqYmUCN8khwc4o4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fc96ad466ecf9cde5f005a6124f12ea237e66013b782406db1d8974926be0946022063f106ce7ebeba7a8c56393748460eee5ac888385a2467cd495d0ac7e6dae9d7",id:"594abec1830a739b1cbf625eef2b6301b5595ca5f229f353545c920c9b74d2e3"},{type:0,amount:"28691934514542",fee:"0",recipientId:"AM78rDegT1jy4U7CEsWErtPSuJCdF6fJVD",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3043021f33602385c5f0c9d5a374ab0a835c0ebecf104951dd15dc812cc94738ed6ff702202c366784aa6cec2524f816bb41b0eb397cb0702ac7e069a7a8938694093b868b",id:"c05ad581c646d9d8975a65e54a7deaf2c255fa6622af349bfa16a9dd753e418c"},{type:0,amount:"29252093379711",fee:"0",recipientId:"AUL2WbCnaYBkSRfz3Ak11KA3Vn6b6eyM7B",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402203e1c6a962f0d9dac66fe40b694ddf60d1ae12a0e8d7d4d12d71615dc08c885380220597d2eb1eb70e8afac03f9f02a0fed3532d15958d431d41e852adf147015f43b",id:"909a1c0f7371c0e7bd5b668e80ee67c980c7c06ac95c9a8561e2d245439eb29f"},{type:0,amount:"29403011432706",fee:"0",recipientId:"AW3MgXojRTWgrx4PzBmk5pjn5nyhY1aKH5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402206afb959420376fd8e172ff9535ad4c73423eb6528b90d888ef4698437e5560e002206d00854f5d1964357562ed79f680e7d5cfe887ee413073645842cbb248f5c34e",id:"69fd70220c9ad3cef6201a5043bc55f944cabbdf705808c6331a947ffb7933e8"},{type:0,amount:"29495120724982",fee:"0",recipientId:"ASaaHvXuvS52QJuvp3nkm3EC4pEAze47a3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c3838c356872fd692642ca595c4c53678396cec839de9841a74a4799cd37c41c0220168441e0f980c92516b41c8ea7e337e384ef95ad130f2a62d297bafc5ae6f710",id:"87e6c248637dc0774a78b108505ad19ece71c9248cf5151ef517561135c5467a"},{type:0,amount:"29617494546387",fee:"0",recipientId:"Aabe2A3WdrsrhBp8uTjqxUEQVyB7G1tica",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022011583f87dc647bc5887425c585d04c395f17c6bda80dd0fb2b310acde7294e1102205e64a69a81cd848f5743ec144bb932ebf18136f952b240f5f579e9524ea1c61d",id:"ca4e72b41eb5b6bf5210d47eedcef40cc9ce15168fbeea443dc8c179ffa6e711"},{type:0,amount:"30052189818242",fee:"0",recipientId:"ANaT8P38GwSHV9mcCk7cEZZAieB3Mp8jxE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100dfe6ce17738cd9e3565cc2ce92f2b1171104573deec8f7c35ebcf39b906afa5b02206310b1b28588bdee1c4c9cccad579606a0150a73fc2500a78b7f126c6a30a736",id:"1aee700c3737c07c9a6a8dbb6ad404ab7dc313af7e1e0c63e07cbbc1b3642845"},{type:0,amount:"31009000000000",fee:"0",recipientId:"ATgAA1gP4awvYXk4T3FrHRgpNsVtaBU5UY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f44445e667716c93963815e8872bb798f050c69dd18cf11260cca530866aaf6e0220741085d44bcc255dbfc4a8f34ba652ef20798f50ea350929196dcdcdf79685ca",id:"2f5f4923cb78e7d9aaa2b5028c16f3ced1448fdb6749b82711b46d469865bb1d"},{type:0,amount:"31239229496679",fee:"0",recipientId:"AUcXquR6CPooj4FPVQomhCjfhJik6KTzYp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e20a35c940073e07cdc048f9cab3ce5417ee3886790f8d8211b72d0d2c68ae97022018201c4a586e505c12d7eda3a6a8976fa4009bc8f10e11debcbd6df8c92bc59a",id:"11d6023327daa0bdecfc7f0db4b7f476270cce07d1442af2d81282004841f302"},{type:0,amount:"31413424826151",fee:"0",recipientId:"AdYVznebAKBjBGhNuKeKA4zzXLFJBxX6Z4",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100ca7de35722d5a049d61c01a8bcbd7df1a990534e589e5890d07cf7ae6181c0da02206ce232bf4f5d2e144e0aae9001e0f64f38b462720be5417ccd4e3192efcf54dd",id:"db369c7c18acfacd9d702e63c7a77e8bcb07d4e104ad8fa39ffa37489e2f1b29"},{type:0,amount:"31703556507222",fee:"0",recipientId:"AFumy9qrTPRdfjMq3Q71CyJGADVURsQUyS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220082801ddb5cee6641ae199fc46cdab4d8bf945a602b60099ab0a6014a07f1b4302205aae82168430ad6632563426a4b6efa855d7ba81773a50894427dc9f54832580",id:"1ec3d57963cfe1528f5032fc045c7516f2e811ae5b5362a5e5e98b887abbdd22"},{type:0,amount:"32988434694317",fee:"0",recipientId:"AQpbXQB2G9fyoTsc84PZKtWeTANaXg6USH",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220118c9096756390292e7fadd471894e27610985552c8a69abc091abbce4426527022073bfcdb62d459942d9fedfc00dd3b7f473a2b7a8f3b607caddebe79788732adf",id:"f5a02075ee137276ace1af818d4e40826cc57ca42a28e2f4966008114f1ee3e2"},{type:0,amount:"33301358574530",fee:"0",recipientId:"AGv459sY198H3RyLRwSUNUNVY2sdHBakyF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100baa3c39d1f99a14adadaabda9abcc74a8eb0fabf4478ec84e44c4c981194ea9f022026b3d6ed87d29120f5338fa371813700f08d989f8473f4e565e10ae7d7f3a5a0",id:"f85ed28225d31a5e12d1390e288d870d3fda8c31004435e7b581fbef143777a6"},{type:0,amount:"34838200000000",fee:"0",recipientId:"APz3bVED2boFzmM6X8Ri6EptTuwYecymNG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bc5e1636cc1a3a20189320632b53d9ca4dd4d6ed236cd79bc39897cb32ce1b4e022012c647f2c41f7f7be18989d37b837a1c597b9e8d9db34830e8c96aedf793c36b",id:"f762656f41ede6c6b2248a567e9338fa5fbcffd6e3acfcd166b3d7091dabe45b"},{type:0,amount:"34933049632938",fee:"0",recipientId:"AGnmhUFTHK9waUB2RvPKcGLBfxRow1Hz9e",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201feb35774ceabcbfc577b257045b93395c3eb0e81d91cf4e0799d0c74fa9db4502203fa395d409e2aad11c3cb7a0db6d2904cda3ec8c850b810b737202a9717d90b1",id:"9f9b749ef794c617b2136b392f09d358f27c1c7ae33d917812f777405d9ca61b"},{type:0,amount:"36753764290883",fee:"0",recipientId:"AXicS7Jbvo9wCN2uVa7RfBLrBS4oPHXvmF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a9d7ffc30ff5da829ab6a0705fc673c208fb1d90b4f37865fb859fe32771425a02204dd95d698733a1cd9ea1ae28044186dbca88e643f740593c4528e2a225be7656",id:"1f308b5f48e5396ca4b83e14ad69a329a486d695ecbd6819be782db4e79ef161"},{type:0,amount:"36753764290883",fee:"0",recipientId:"AMKQ7YtVjAHt8mWniZsvj6rqmA5jzu1rnZ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a75993db6caf823dc6d38968f205c3fec9406d2e215791a62cbe9951bad8677202202d0ccd24e0c9757d557720cb40182f5bbbd4f17b756aba16289de6190a2e7205",id:"dff7c0fe0b3548e5b68bc7705dcf7a33660bd77cc5d66bc1a5445f1ee5eee757"},{type:0,amount:"36827565849579",fee:"0",recipientId:"AdUHt2sqD22q3Jhby5K4nSVhBjPaBDrcN7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008dfbca2daed7bead47d885fd3f763a75c4b076bfcac2ad209987a2c0a2ab913c022019fdb82528d253b78768f8b8e508da440fe8f2f7a34ad9aba2c37f91df76bd01",id:"22b6643f0273b7fba1e4c4095c245ffd0a59f8c75582bbaba951f0f626fb6b67"},{type:0,amount:"40000000000000",fee:"0",recipientId:"ALcLekYJLkWKLwEX4TNsQszu8nfQbWSkDt",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202a594df3905ee3f8c8db32a69857b686badcc6784b698f8ad1ffcbdc5cb5d2d0022072a8e72f42fde11f54bdaccd48de55ed2d3046b1f426ddbb560b97658a0bc83b",id:"08a515e48fde2ed1141f3b7c6726284d1ae7b5ed1dbef1742ec43bf52d229eee"},{type:0,amount:"41574092648018",fee:"0",recipientId:"AGctmMKFHy54o2pzgeh4ESHfqZ9B7zMnzA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009ed97e274d06d1458aa4d0860329931ba6e3a2886f45ca9f9cdbe46f089d6a85022068a1f3f8edecbd96d580148602ea10709e92655fde424d68fb8d049d8841c418",id:"afc119b8eb143c9fffd3bfe31a39d7e42497770bfbad4ae7190b5b7b2001c9aa"},{type:0,amount:"42101522494901",fee:"0",recipientId:"ATAu9Q9UEQQua2UvXfQ6aev6eZAqWmSNFp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022060955d98b915a99a40fab60a89c9813d050550f17ea432f309c62d1e4da4f80602205685972723f6a5223466af3fd20c15afb95938182e7b2a636a32f6ab88cb4628",id:"bbb16d3b87ba67e0ad32da5eb342cc9bf60b51825b11d2d435f94afcc4ec42e3"},{type:0,amount:"43098358629104",fee:"0",recipientId:"AWbC9Wq2LyJki7J84AkTLJkzguF9mo89BF",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100fa22327b9cd6deb3153c39d8f5d76739754798733aa96fedf2283dfb9b1ba055022014e16da33b966e40e27c883b314341391b7f85ee3c1f272dae914533ba540c3a",id:"8a87ccc624c279197648fca4c03622ca87b4dbfac293377c260e536e6ca969f5"},{type:0,amount:"44103929088831",fee:"0",recipientId:"AUJWBJDUgY52u89unPzk5oV9e9xge7P1Kp",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207069312fd56f16680a836c2a45772777be38c18c6f86287f414e786b8f2095d202203f646bbd58f31c2618c31649f1c48bc1f4ee3ec791a1805d788497179564b72e",id:"ba49cc0e31cee0207d2f0211262dfcf9787a314f0ce63d3c292f8f20c596a821"},{type:0,amount:"44104664164117",fee:"0",recipientId:"AUTMnQD8ANkE1wtMnH3aoPCrYkVntiaRDc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402200bdcfb494ba5f808db740b6535ae3adf6719d3442d618e027314833aaa3fd7ef02200cd5039225a23be87af57866b6de9c0e005a643fdbb9d94e2bf0f1bc9eb4227e",id:"954643f48700f6776cecc0c8d28edd052b6ada807c4ed80d4020db027f8302a1"},{type:0,amount:"46581295003558",fee:"0",recipientId:"AM6bDiAfJMXdivdUiGaDy984KA97ZEcKWq",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f8bdac69ac19d78a7db5398b5bc643399689262446788af4805d85766e705480022066cc9169d1a7f9f53351ee695e2016ca5384d8f7069feebd59e8fb4a9788559d",id:"545bd5d745ede704e8c2a8d69a2eb6925610f37e7fa79ed9483266d860c7f512"},{type:0,amount:"47047758593474",fee:"0",recipientId:"AWvqcwdrJyDEfsbveh5F7Nh6F1KWD3KAHS",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d41cbcf3488a0246488bf2cf73bf1e4e797260d1a5250ed8f04957b31586b0fb022036ded1aad7477562792bb697ed03f86d158ecc8dc325f37ba3efbfc2fa7c1fa2",id:"45838af24957952037e376f81200350a6d795b8435613a4845adbec9dece4d66"},{type:0,amount:"47594373941014",fee:"0",recipientId:"AJUkMpMFt8Zny1v1rENN9ZPZYitfePBvyz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100c5d4aa1d91f3a0b7468a31097fc9613e9c3830e1b3c6dc3926217442fb605f6f02207efbbe01ac68387e6fe0719ee635b4574d7040595d086d7030f903070f7c3247",id:"bb58a2aa2a8048b937156f3618663c1015f1b9ae7527ba8a0bc351c6f0bda349"},{type:0,amount:"51199117149060",fee:"0",recipientId:"AZaAZmaQgY3JaUTK72WUJEp9ZEgQgW1r6z",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220060cdc83a40e3ec69b3359c304a0ac46d863617599e2de03fc9a022efdec329f022018cbb65aea9d099cf6cc372a6599525b1aaf8a9cba53edbc95235764d265b3c5",id:"97d3f0573caf2552f8f5a696bbdb7f95782b98e5057f26ff7eec8e152513a3d4"},{type:0,amount:"52274142846490",fee:"0",recipientId:"AMRYJaup1hTjCsV79HCTn4ySvhAzb8xSo7",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022070140fe92e3dcf59f0ae1a87bbb061cc4048a8489d47cc37a3f3ef489548dc2302206163dd3630b960269613c98ca886637f32efc495f6c4e593cdb8c91dbe696c44",id:"223bf57b085d5fb463d106ae666648acfa042952e7417e4d22f51a100e3bbdd1"},{type:0,amount:"56564297142251",fee:"0",recipientId:"ALy8rPTjEELHQbkkDfsQTWT1M4s1Q4NFDX",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b5f571f366492003d3c17ddbcdafddee27389907a33cf348f7ef0b4d6f4cdffb02207300a2d680dd5ff2fe2fc70d71e76c875ea15572be63fbd583a4de383f99c6da",id:"5333df7856532e4d8a13adf69376b48c986a46f773a3e8677b5722baa45bbda3"},{type:0,amount:"56945445022471",fee:"0",recipientId:"AVRGa6s7qAzChqfXrbJEhExzrTo1uscsf1",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d41baf4236b93dac1d8604596cbdabedd8081b8666d239f2a193b69e56acfe490220046d22d267e480523194aeb5890d54b5e161718ad754321aebe61a5a9a6a4947",id:"f466357fc462681688413511091b23148fa0271b2045dbd8b28aa591db29f850"},{type:0,amount:"58952449862348",fee:"0",recipientId:"AWeSiyLTbvHyfqmUNNcRZABWZkcd36oz7x",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100d8f5f18629c666ef1aad569544d581c9c6fe2beaa751658389ef260559f946ff02202da47ce0d71725b3004c43de69c0fe0a5fc94dd7296d16b5f64c2fb9ce1a515a",id:"edacc4e6c26a064c04742503524ac91012a87e77f6bf7186b4f591f3221b7b58"},{type:0,amount:"60406501374583",fee:"0",recipientId:"ARviCJv7BdnDHCxPgFa2uqRLXNNtBqc8Jv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b49e507c020746c9f70dcd26f52d071e05bfe9dbd303d528812a700883f7a0c4022009f6cbfd51b20e464451a6ebb5184c0abcfa758ca304bc88d031c8075c7d6902",id:"daa89776995d4fa94c6c64cd06b1c2d1036cfc9082151f9d3a70adf948c93939"},{type:0,amount:"61218300000000",fee:"0",recipientId:"ANLeC5wGgtqiDQcX5pmHiYayqMyWy3AYCQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022049a07caf745eafae488a242e5066c8d2220b99ec3127818ff9ccb2faf682fee6022072aab5d565ac05759ebdf6f896a53c584961a6c0a362a321cd0efb2e78cfa9e8",id:"789e6d917e48fa9a4538ce5948a1c4013c189d080b94275eb975299d3d22177c"},{type:0,amount:"61966258534201",fee:"0",recipientId:"ASaaFCmPG3yPUwngEFoPA12KnQYqjgVKnv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220449a94f1a85146353328281b937a9ce91b5644235ece1e2046a28d1199fc7f7d02200dd68146162a869688f44fddddb990bd2edb1c4194aa8c1edccd72cb1dfb7e03",id:"e09409c50d3ab8e86cec1216a5a8f971a8830c4bf6f847fa59c7eeff606ee9f5"},{type:0,amount:"63613272588492",fee:"0",recipientId:"AYpQxRNbaiEL6FT7YUNmjNjRvpUfvRh6xA",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100953475d0a8a1f5b26eeea7d4697faf1eba8f4a4e465b387f6c3550407c2adbef022047a7f4af1bbad90c076617319eed901196e46a692131fb1c8861c3ba2df2a23c",id:"311931514d05d2af41ba127a24dbc950f7476f78d9184469947d4b3b59561c4f"},{type:0,amount:"66966172832127",fee:"0",recipientId:"ATVwQWf1mpyRa7L4BAkSUxz9osCfBsBopT",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f571ced76143801d0760e47fdb4583bdd45d1dc46d03fe9195be5cbe0a9f44a402200f6a4cd36111e9b5dd06f966e3ebad05294ab03b5be9f6a231665ed4ae53a275",id:"28a7145ea1920ab8de9b6037f050627ffb2e37c9f9f1d16be8db7110f401fbd3"},{type:0,amount:"67622306078799",fee:"0",recipientId:"AKzAriWhTPPRXueXuSttRiBLkjP7i5wKpQ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100969e9376ec702a41b6da148d02603e8e1b4c1bfbf52e060aff80a89cab4eb3c9022076972f9de9cc4e883c63ab263cc76df952b0bc55dec80b958fa8069b94046f12",id:"7a6649786a864355ed73e0f194caab15593a11f93400b13ce6d0b7030057d903"},{type:0,amount:"80563884771309",fee:"0",recipientId:"AMFQ8md4BymLJ2ecw436fhyUyjyRM7ygzz",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220188dd6b6c7e1c09b420ea73ecb17db20d85848342cf45c65192c77f5390fded502205eb3a4304dd2ee62ec1fa9e848dcf2d695ed92162e13b52271e3430ebde7eeb3",id:"fdeba3a56077063853cfb940d036d3ba75e03b6fa68d45de52bf58d9165c4b96"},{type:0,amount:"81926947255471",fee:"0",recipientId:"AMMDbSvuBNCi1oAXvqgBguAeTehWRTjBrc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022043e6c8beefe6b5ab949adabed4830fd87d4639a6afd7fe8e1c3de3087f7f47b302202cce568aacb5bc2a416a20b6f940020b2e9c1f0404264230bf1b9c0086735ea7",id:"1630a5b12b69dc1317bce4ba97a2207c6bb4ff8c9e3b5af88d02f4b42829d51d"},{type:0,amount:"97831169789473",fee:"0",recipientId:"Ab6JpVxrytQhj4QpBJ3LGsLvEhVmgCKk6Q",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202b44c2bf60f8af0927f9a5c62fba3ceabb58e5944dedfbd37cef6368b219225502201c1074fb7303b8a88479009e3a36dda95d6c8d0bc60770bd7f12beafcf680c0d",id:"0c8a56b4a0aa03b2f49dce2fd0e7f367096065a51128950188b553b8a750d4c6"},{type:0,amount:"98443286091931",fee:"0",recipientId:"AMQEjpMh7o1sJT65Pdm1Wt829evGsTWCJ2",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304502210082a8b45a0e351baaefcdddee3583b1b5ed7af81fdc9e2aa7243696388a5d6b4302205bd1469c96a3494a9b0bc8cc4513cb3ca57b8cf3b3250c028346d42666daa02e",id:"564f7c69a9cacf987aaee9ecb5bb726d1ae26a26111f0f8364611984d18b300d"},{type:0,amount:"100568151043750",fee:"0",recipientId:"AZdsyiib53nWP1wG5wara6XfvmmqqBWxWR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100da0594484575e66f1eb34211a7d3249c15d0eb422be3e1b46ee364c4a377befc022041cd9cd4237cc8a1a7e9359adfe182da7edb24a69368ae1deb7e2fad26aa0312",id:"16a95bcd5ca6388de776cc01666f616f863f9dced646badfe97b53a266985bbd"},{type:0,amount:"110555322986976",fee:"0",recipientId:"APaRmUnSummHSAyHnYqd1BGvPqgYReEuWG",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100874c685c11233280806221994ce6ac3be8ca6f2dd88421991a1c9810614e9bb5022071ededd800067a5a3e6828ab6cec496b153c9331e5f08a417c09e583b05219d7",id:"a387aebbc8fefd8f0963f2ffbac837f5bed99137b19b19c356949bdf12c0d0cb"},{type:0,amount:"113717099151927",fee:"0",recipientId:"ALC5AHjaUUSaecu9R4wADbKdqzqf9U4e19",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100b5b9bf26d7020ca50abd010624a7443e7e4d0c5d17c50aaff12c2a357380a212022037b7e9e80dd9e5a092d99aaae3fe0722ff6e085b8ed42e4d47030e9497e6093a",id:"912d5b497042a6da16f4dc3fb0b7711f19aeadd1ebcb5aea32e2e49d6b2bcde0"},{type:0,amount:"115371683274712",fee:"0",recipientId:"AVNXBEcnwKmirrG3kcZSzHa6JvRkiCKqXc",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220401302e2773dfc0ef1a6b4b013d98fcbaca1838e9c688013989ad990a7eb51dc0220268eb491d53660b33ace47049d96e4c97dde689621044002f703425e17a3cc3e",id:"1dab66009d3db2e422824d6af3e727ff146c2b3bfb1daeef583742a920d51908"},{type:0,amount:"120262700000000",fee:"0",recipientId:"AHHpmXD7F8j1r5bftPMkp35ct9qGYiupwj",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100edfc8dbb54abcc1096194776c222e08fae1e125851b580f510ba5b6c6ea39f38022032b48c581a123b298838dba4a22b71ddfc51c0514f260fb07dcb2374bbfc8e92",id:"5ffd7c36deaef4295257fec15f27e451864538aeeae9b21ded6d4e579f19d7c8"},{type:0,amount:"123626090911753",fee:"0",recipientId:"AczFP54nMoafRABK4c7idxHpAC4RwmQsDE",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402207a3f7c3ecb0295f08a85e12af23156e0765ad1540047f68cd89be139307b5bb3022072be91d55a080d6e5fae0a327225dac4c63505b292dda6958a1207f9adadc8c4",id:"03b08987233a71d17b296c057e03821022e9b504b47471670ddad11080e1f4b2"},{type:0,amount:"125719320015809",fee:"0",recipientId:"AUq3S7bXMHmz9zBbz8YLN6LrSrshvxXTU5",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022033d2d418dae0c1c1ef89b1866258410008eb39a409c98f6ec3a73918f449ead102200ca603311c12cb4a5f050e0872e05a0e8f2953827b168b85211b179600154585",id:"82b2c63e0139fa52979e008e6a3d3086efc4aaf5e1799c57a29bdaaae9a50189"},{type:0,amount:"126273901505716",fee:"0",recipientId:"AdCXBbcpNrnMDHMar7Ebjxu959uwN2jt2y",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022078cb591e525902157b5736e798461266a2c7e32d7aa4d06d07f80d64244e0a2602202981d622da3539fd16efc0aa0ed8503ce2470ce8cc3235cc325904b9246dfb1d",id:"367b31d00256d8608bbe3b62f350bbbac10d896a3a3cc084e203493abf6f74b4"},{type:0,amount:"126299500000000",fee:"0",recipientId:"AeYkC4MJ24EF7yVkb8NfSryBw9xrTvSJ5o",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100f3fc2ad6305967410752b664c2d8bca041d552c013fa576e10889a69a6c4fce5022067ecc8de665c05a1594067f873e067db5e1884486d4815bd1cb3959c282cf0a0",id:"af6c2725034e35ca7dcf0b20a9161af2ece9d9e30d1d8f934661c2e121844832"},{type:0,amount:"126837200000000",fee:"0",recipientId:"AXx966jfTHUz4nSjZsFEKkpsgNoByhuMJo",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30440220025e2076ba6db9412d886925b4ccf810ff5aa45711ba9c9f049061f675560937022042ed7606e3f46bc5fb5b2ef2b36e894666c78804a1d95ba7916d6a41f92e36cf",id:"e274c6833dc8021404af6782020539329acda8f274ac2be31535eef95cd70668"},{type:0,amount:"127928194702051",fee:"0",recipientId:"ARwU8mRM9aM4KjwFLpNH8eHntj157LNAW8",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022050f8011fa9011b5b4501bcc1d4154864b6c5125e9a00f468a194e59edd32831c02200c9f77d38533ceaa8bbda2bbf9ddc73a7d6654d3d3a338a3e04a80f67fe16a59",id:"2debd1afcd9cbc2e3c57dc27258cb49d6ef21b10d36648efacc0053acf7cba19"},{type:0,amount:"128450700000000",fee:"0",recipientId:"AGto2VECRE2tGFr8X9pfhqHNgF2bdW5mgR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100aecdaf102f6d5a4b18ddeb17c8d5c00c18cfe0ec6382df8c972937a17e9271e0022074d6bf200487ee5c03800c2cc28e571bea6129c95ebffc2a1a8435fe6bb351d0",id:"7477beb697266fa054ab120b1381e293d8533d1a56eec29731525b857d05e8dd"},{type:0,amount:"136497083929386",fee:"0",recipientId:"Ac15ysDrQ3fvMYL8S2u52VSwXZPKZQs8MY",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402201e2a494e971932480c8286c2c12748daf90afd3234969cd720ac9346da94fff802203fdeef1aa6daffc70709e5c86bf53fec3169651671060b8e495e1c0c40c725d2",id:"811f46c52bc4e94cebb2c8a4053c13c3ac3f7df24134cc027a37f7614e935a7b"},{type:0,amount:"140099329287361",fee:"0",recipientId:"AZB965rP7y3PUs8RXqpkRy5Uu9dbQgu8mM",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221008fdc7606464939463c4c48ef06663b63e447db9b560fd323efe695b59832e792022048631bfebc37ff98d5d5089f607869eb05b86119830da14817cd31125a4910e8",id:"8bb29e211493fd3f3282498d749b55d5824e9ed9d5813a834258b002204a2cb7"},{type:0,amount:"150034082630911",fee:"0",recipientId:"AQK3Zu6VW2QMh6a3ckNzNsYduTV1MmDkyJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"304402202d42c892d4cd76cb582573977a7b2a294a945754dbd3de4411fe3a3ed814f0d402207c49588af322b49914a933cda46e2ade762f5bb9b9383cb690bded2f0a734d90",id:"7e1e33f30bf45a2b2b7be555693894171481a7cbdc48397575e6a99d98382138"},{type:0,amount:"151578069939920",fee:"0",recipientId:"ATUe1KJzRsHUW6rA8UnNNNo4yVEF6TqyEv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100e97f8bccc9e3f5e3c3a5b32987c64caf4b60faf4a282784ab3b1ade1579c3b0c02202041fb2375eb061fc3ddb64cf94edc614a690d6fa9e22e9964aab80a66eb5b34",id:"be993fc90ee11f5b9bcbeec1a272e94c1894b65804011f76d0d3227c71ba19e5"},{type:0,amount:"191573850243351",fee:"0",recipientId:"Abee76TtVambNDBmTTyoCYosWQ13MC9XEn",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bca5294ba5fd28e35afb067b328aa2469656158f4c8580d98bfea76ef925761102202ca7d152501f2999169ee65cac56b25f41d9b140d11708d236f9c4be972b0dcd",id:"2bec691439fdb6fd9a324f26d44e2ad64bd9e2ffd566d220e01c4aa12028fa91"},{type:0,amount:"196019568105246",fee:"0",recipientId:"AX1ZCuzNnVHfPvKikwsnsNRUxXfKq5g9dv",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3044022011856a7a6cf61478d183e18a4a7404241dc561629d7db7ac70d1ff385e85d724022003404898de3709cac4bd5a6aa718c7ada3c9d08219c60f034a45da8135ef4a51",id:"57b80107cf40b39135241aa92e7e254da815763735f0ac5a9919dd8485865d80"},{type:0,amount:"225493764614631",fee:"0",recipientId:"AbYwZ1DAUDLgJwusR9bCZoTfuUTwNq1C3c",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100bad48978061d554290cd1afd07851e3101aee65f3b7f9f677e85a28d6590df5f02204d7a721a90dcec6644bff0aecd2f1d5b506c334bad8810b1b2d123b6978d57aa",id:"5ffc47d5a0826f031d51f0502e45ddb9d7b8c4f4bf9b2d4bd7a60c4ab027b541"},{type:0,amount:"1034744897737528",fee:"0",recipientId:"AaFgAghGAmNWndDnaxkbcYFE7fxbxZn6dJ",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100a4489ad919a05f73c3be4de717a3b23115812c146caa1f33301485e1d9521dbd0220487441651432d5b34bbe7f383ee3a1bdf84dd22b82982d9566020a6033783685",id:"99a3fa3f91f257fd3e3ed284a9bbcc5eb007ca7e004372a5912bc3850d5ec9f7"},{type:0,amount:"1256766795179826",fee:"0",recipientId:"AUhVLSiqTnnzqhxp5RKzheuRyvh58TSCUR",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"30450221009e21a29b8428afdd7f140379d839d5ee75191c3e5add0582f58b9a3b2b3d69e30220749a0e7a3a8c63e877f1bdb0ec12987db8b138bb1746efe0b18d9ee817276cfc",id:"ac7ce9c3dcbee526a9f15af016fc15b6dabed5f8a61997c4de15fcc987926234"},{type:0,amount:"3141438227793004",fee:"0",recipientId:"AN7BURQn5oqBRBADeWhmmUMJGQTy5Seey3",timestamp:0,asset:{},senderPublicKey:"0235d486fea0193cbe77e955ab175b8f6eb9eaf784de689beffbd649989f5d6be3",signature:"3045022100df12738ec2164ce2d2ba980ab8499dae066149a1019f37ae5b17f28e9cc2aafb02202a0db97f9e012f2a8ed819d2cb02e5d9e63fda01754d6f42308c3cab4bf92e1a",id:"5222124556517be676fa67fccb07fd581ec2928140a72afdd65259dc3e5db921"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"033c9e5a710bff3131b406a8023a60e6b76a2ccf937cd85b56add7c4a33ae3090f",timestamp:0,asset:{delegate:{username:"genesis_26",publicKey:"033c9e5a710bff3131b406a8023a60e6b76a2ccf937cd85b56add7c4a33ae3090f"}},signature:"304402205532bc3fe7be805b4c8a0df2995158e634c7146c2467d05d75f754782b87bbbf02207164df69b13c9c3c46bb3c7d027e7ba81eeaf726f25e08d268c1507da4581b73",id:"8cc98e02422afa8a246faa66c1672b62996be356735b00614d8739ea3a5f73b6"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"031de61bd525abc902396bc66daf513eb20715180beb50be3a1c56a36dc73476a8",timestamp:0,asset:{delegate:{username:"genesis_50",publicKey:"031de61bd525abc902396bc66daf513eb20715180beb50be3a1c56a36dc73476a8"}},signature:"30440220125d7a0f64c0328590d67dd27eb5d8f209bdcce03d730c7469ab25a8943c8b920220027305ec4ac8d46b0c2e711274159ab2fffec7f5a5994aea775cd48260db93b4",id:"bf2641e6ffce5848282027221c7f43eedbd0b72a7ee2a56cee1472c5f69f194c"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02614722c83a05de882d887ad51bc5c687e747d6d19b58f5731d38223c58bb6ca0",timestamp:0,asset:{delegate:{username:"genesis_48",publicKey:"02614722c83a05de882d887ad51bc5c687e747d6d19b58f5731d38223c58bb6ca0"}},signature:"3044022078d5f10573deff4cf16ee4b253c6b985b8a16e5f7f4840493e2834809e26ce6f022020d6502389f7512ea3b8f9fa9ac296c153aabce8f9066cd42d854b94069f6f2d",id:"3625b2591f15394ea0dc6b26a113284b1b56de0cf3a21c3a1dd92f373f796982"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"029191a8ae0fe0561e3ddce562554e8ba5ba36cf9ecb389290a1a74acdc53ca89e",timestamp:0,asset:{delegate:{username:"genesis_47",publicKey:"029191a8ae0fe0561e3ddce562554e8ba5ba36cf9ecb389290a1a74acdc53ca89e"}},signature:"3045022100abd4ff196ac1fb56fdcc0f0b71a49ceca5da07b3631570e22626fb43a415a9e2022042d32e0fc05c6e2467b9749ad1f6bf5e1fb9cc8eb5c21a40baa1381cf58fa327",id:"05c1fd17a20d62c2740782097261b960f9ad353f68b94d4a13dcab05d08f9dd1"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"0204f8aca74a87f69432298b13555cf50aa0709e1a942aa3efb447620eb78bbcbe",timestamp:0,asset:{delegate:{username:"genesis_46",publicKey:"0204f8aca74a87f69432298b13555cf50aa0709e1a942aa3efb447620eb78bbcbe"}},signature:"3045022100d15eb20b58fb9a6e7659706d20c3deb26dc176cdaab02fff557dc5a8d65982a3022064686cae9101510295993e1d3663dffc88741bf1e2781021e28a7b2aa71ba80b",id:"6debf628e330726bee0f64d9fe7c56fe4024941b4394ad5c7cb08fa9a3abc0f5"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02c12428bb56ceb96e9c2a558e045df6b7b2c551fdb6a132ac6c3956d10f479f52",timestamp:0,asset:{delegate:{username:"genesis_45",publicKey:"02c12428bb56ceb96e9c2a558e045df6b7b2c551fdb6a132ac6c3956d10f479f52"}},signature:"30450221008c43c6f251517d972386adb42d69510ca59d882a89d7fffa55484ad7989a3bbd02200925d009f1183934e4be66ad48ce7149c990d0d87afe629c14551ed34e54ee1d",id:"557d5fb9b8b948ba2a6fd3d4dceb476e97e61faefde8eb11f4372028346c5aca"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03f11ddeca3845ea59c82120a7eca68558c99e4e7d373142ea0554408c58ca82be",timestamp:0,asset:{delegate:{username:"genesis_44",publicKey:"03f11ddeca3845ea59c82120a7eca68558c99e4e7d373142ea0554408c58ca82be"}},signature:"3045022100f04fdee2cc09b029d1bedea130174f21e24e673438655e71bd61998732debb040220439b36ecd46cf6ccc9c8a8fc44085733bb82427a760ab87bfee1166c7623813a",id:"6d8c04b24c24c9680b4e496b686c2a37cc05fcd9e6f2090cc945712199b2b8ae"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02c134247a5d54cd30a5e3080daa99c74f54e21ad0cffa60e7efdecece862898c9",timestamp:0,asset:{delegate:{username:"genesis_43",publicKey:"02c134247a5d54cd30a5e3080daa99c74f54e21ad0cffa60e7efdecece862898c9"}},signature:"304402201820565556e3039944c8c7240c567c5d8f96a8a34a05dc1d68577883a8025e94022011f55c1511627de25b4cd7410efea22ef2df50b3c1f4ed55a8ce8d4f3da91862",id:"e606ac6acbfd96fc4054131061a69e3d3f58e044636a6646227775c4e646a126"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03afac7e796d781e17600945010be34cb6760fa919be67baec2cfb691cf4ce5f33",timestamp:0,asset:{delegate:{username:"genesis_42",publicKey:"03afac7e796d781e17600945010be34cb6760fa919be67baec2cfb691cf4ce5f33"}},signature:"3045022100bd7e5550aecbd212d9fc13842c7ef586b146ce6f289199107af979eac6b61fe402204607eb502c9c8f2363e468e22afccd754e042e605199c92a93a0c29a19ec628a",id:"2cd3411cf5a52c717afca1f42cf97627fe81c0869f39ab494df0ce6e99f7e485"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"032879c56cfb96539f6a8c03a91b4a987e35973a79e62f9da438831b353066a84b",timestamp:0,asset:{delegate:{username:"genesis_41",publicKey:"032879c56cfb96539f6a8c03a91b4a987e35973a79e62f9da438831b353066a84b"}},signature:"3044022060dc174d40828324a18074db079ea300d382ed5c2f27a7ff782686e7e78002fb022072e809275cc872b3c4b430e3094268e0260aaf67ced17387ee17a207a9e2032e",id:"4b16c34911fac46716cf8ed383401f70657201763b54ecaa5904bc09fddc774d"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03bc7be5c8b1221beb63f6ed23d4b5e2748b64983087986c4953579fa7d9022a71",timestamp:0,asset:{delegate:{username:"genesis_40",publicKey:"03bc7be5c8b1221beb63f6ed23d4b5e2748b64983087986c4953579fa7d9022a71"}},signature:"3045022100c8901dbad46f6fd0ae9db39c7be5b002bc871906a80181ae45de6fa67eb4068a022068af82d46fd008c8efe5c3fe265313e01aca9262b1160a5c095c6b31d97f1579",id:"2d808f28b223999c1d652c01b2f22ceeca15d1abf2acb42c04570358ed176913"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03c5282b639d0e8f94cfac6c0ed242d1634d8a2c93cbd76c6ed2856a9f19cf6a13",timestamp:0,asset:{delegate:{username:"genesis_39",publicKey:"03c5282b639d0e8f94cfac6c0ed242d1634d8a2c93cbd76c6ed2856a9f19cf6a13"}},signature:"3044022051a8aa7906358589161956d1c182ef9ee5c77a144c2d9965eeff043ddc3b7a6b0220797a2475b5dcd8f0ef7a24a0fbe3d0185839e33f313b93b566b82be168d4ca33",id:"3f21a6f499292b9bf0c2970cac7d78953a977f7004d29446698c7a29da656fda"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"036c474d6b22e6d7c2cf054721ca73d0e2a904135b49bbf9dcc7ed7ce9718984ed",timestamp:0,asset:{delegate:{username:"genesis_38",publicKey:"036c474d6b22e6d7c2cf054721ca73d0e2a904135b49bbf9dcc7ed7ce9718984ed"}},signature:"3045022100d3ab1ee59bd1a45bf936867661f9fa9b22c161506bcd61ad17ac871ba4a17e130220114d37a98120cd1f2465c9700089101db7748ab0562561d4e01ec98c0e96750f",id:"337968b8f3e7ddb26ff3e6740df0b12c7be6bc427d9d570bd77a9312baafc80c"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"028bc0f094738f7699ab4432d13e3c18e09a462dca06960a1fd0eee82482f50be6",timestamp:0,asset:{delegate:{username:"genesis_37",publicKey:"028bc0f094738f7699ab4432d13e3c18e09a462dca06960a1fd0eee82482f50be6"}},signature:"304402200cd7121995da2f8fb24ef2aab15b8da97b050ff9aa600363305f2c0a0c8ca72602200099ab565497c84319dd91a34001b16a92211248652ee109fd28eb90112bf022",id:"061e51e451667ae7ea59e0d1cc66fe47700d6bed1dfa671efc028a2b580b71a3"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"038467e1dd4d138f007f70cb09afdd8439ea744b282cbba2d76fee8463dfd17e2b",timestamp:0,asset:{delegate:{username:"genesis_36",publicKey:"038467e1dd4d138f007f70cb09afdd8439ea744b282cbba2d76fee8463dfd17e2b"}},signature:"304402206772c6c4e2f58c1401570fb76ab87bf63865fcf32c5f9a5a3f88f4360f44e346022075710eb73a4303ecf5eb899019ee59c9c5ad206b6da902adf90f3df02f108512",id:"ee5347ef87ceaf28aefd8374f686725b8ffbbe55042dba0c59c625e4c822fbf5"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"023f425c88cfa289c28e5fefe120033c9beff72487dbc4722e900d6da59943b8d0",timestamp:0,asset:{delegate:{username:"genesis_35",publicKey:"023f425c88cfa289c28e5fefe120033c9beff72487dbc4722e900d6da59943b8d0"}},signature:"3045022100c185d867d976dff795ccba4654199f1b075bfd3441e045a2f6ac64c4fd0bb6d702202323d84585da2268276d6cce663e842ea5f8617e5e12cf4a20ed7436a1ff7f04",id:"592ee85d2922ef565fb02d649cdb2104caf06fb8747ba2425057f79518132b1c"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02d2a0fda621ac213ca51dfa8efe1772eab8659d8b8c7023a35dce48f2c88316ed",timestamp:0,asset:{delegate:{username:"genesis_34",publicKey:"02d2a0fda621ac213ca51dfa8efe1772eab8659d8b8c7023a35dce48f2c88316ed"}},signature:"3045022100da6c5c7945eb7dae41e7ed133a58e06e660fb8d012e9ba93df38b8b86a3aa7ca022007514624a32a5fd6f294bfd8d6fce6e8c75b20b7fcb8d3f8b82725c83fe43db6",id:"686baa6cda61403ce346c293a8f27e0dc3899eb4629d4b3bbbb9f02b41ea36bf"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"026ffd3c35c7ef08e3dcdde741994bfdf9cf6af75cdf9e6f4ef8c251b5eb321fd1",timestamp:0,asset:{delegate:{username:"genesis_33",publicKey:"026ffd3c35c7ef08e3dcdde741994bfdf9cf6af75cdf9e6f4ef8c251b5eb321fd1"}},signature:"30440220192c5a3433384ea1ec3f81473f18962a179fcdd067359accac33e8ee4e571a780220549fb42c1a5d40daca2fc97aa8e0379e041c28fa524505c0e43760f1022a1369",id:"bf1644830edb59dea6ea1f3fa107ce84546d14904715b84bf2d5e9648ad426d1"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"0295f1d78f3adae92f0c2d061367e0d06a3fcc9a838a725ccfe660b9c2024253fb",timestamp:0,asset:{delegate:{username:"genesis_32",publicKey:"0295f1d78f3adae92f0c2d061367e0d06a3fcc9a838a725ccfe660b9c2024253fb"}},signature:"304402207720c103e2c3000d867ce3073f9c5375d9f3cbc69dc6affd08d72cdf0322dd44022040ef700ba6c235af8b2e0b71b3b8a825a18f276a192ffdabc01118e2786eb567",id:"aa03f6eff50359838142b70634991e93d48480369f087d73cecd0b93847233d9"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02ac0a9348306d3dea50bde6b38791b2716f698044c207bf005788e13f35b46693",timestamp:0,asset:{delegate:{username:"genesis_31",publicKey:"02ac0a9348306d3dea50bde6b38791b2716f698044c207bf005788e13f35b46693"}},signature:"3044022070bf433e253fa69a33abf85559d804d1d0e055199c89abef5dba34e5cccf1952022023fd278d32b75f0465c777c39b0a616a4dd0a957b08e9723c1702dbf4d6a1ff7",id:"c64e9e47d8c7573dd97d2bb634eb7bcb141c156ab701044319e19ac0a7f55f3c"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03c075494ad044ab8c0b2dc7ccd19f649db844a4e558e539d3ac2610c4b90a5139",timestamp:0,asset:{delegate:{username:"genesis_1",publicKey:"03c075494ad044ab8c0b2dc7ccd19f649db844a4e558e539d3ac2610c4b90a5139"}},signature:"30440220470149adad4cf95460a3e02ce0fd79d933a1612ee9d8711d104efb5c708022c5022077eb9aee6dc62bafcb4217484cb2b892d8ddac8ba2a170390438cf47521a8d3a",id:"1a7f292a5f3df9f9a3ec97d7abace3d398adb943ff59da7c0b0eed8f19928ec7"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02afe652f7d14a877e73f00cca6c836efda1a05e79c6fbd7f92b600a4cd519f4f3",timestamp:0,asset:{delegate:{username:"genesis_30",publicKey:"02afe652f7d14a877e73f00cca6c836efda1a05e79c6fbd7f92b600a4cd519f4f3"}},signature:"3045022100a7aa2d57b6598379d04e9143542bf9abc4fb4899aff37ea7a7be0dd07c7317cd02201284a2101aa06dd7fa6e34006b666e4916bd76071032002302dde92610e04dc7",id:"e8afeca5ff2aa3ccd8c29f7249d93d465049bc31b3cd3fd6cdc6e09ca92ab921"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"024dd37755804e6dda0ddaff6691aa038c57d8db36d59fd1695a2519835a828072",timestamp:0,asset:{delegate:{username:"genesis_51",publicKey:"024dd37755804e6dda0ddaff6691aa038c57d8db36d59fd1695a2519835a828072"}},signature:"3045022100f5a4c4d258caffc712c9aa515f3e235b352a8d2250695e7570a14337be64cc410220446bbd588e8aab1f69c900e8472c8bbb61cb6b14aecd0e0d693f74714e8511be",id:"e77aac7c7d14794e86175a0b0e985a09dcc485c4e1117aba251dc3e45addf4fd"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02763591456b7d3ed76125e4b9d5b34c3926f5aa166200dd270e45ecb6a6b15d9a",timestamp:0,asset:{delegate:{username:"genesis_28",publicKey:"02763591456b7d3ed76125e4b9d5b34c3926f5aa166200dd270e45ecb6a6b15d9a"}},signature:"3045022100f6ee4060cfdac8c8a9dbc50b49b7cb59d4a587a5d14135fc7345594ac2b7e10102205594aaafae4f78415f01e0228b7233ec36356db4d73da92f6720502874bc1672",id:"4164cada2725a8e52f8713f8600b3d945bb3045fc956d79066974e3a012021ec"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"025e6a4c19af3228659e5aeb3638e78c50203d76a806d2e1ea938b79247a25a932",timestamp:0,asset:{delegate:{username:"genesis_27",publicKey:"025e6a4c19af3228659e5aeb3638e78c50203d76a806d2e1ea938b79247a25a932"}},signature:"3044022075186579fba3bb355622ca8e4e0470bc54e82ae15a16b5e1b16784b29087f70602203fabc6d8547b6eb07c59193e0b42f3bd6b5cc234ca5d415c791c9c5f4a4b7f90",id:"6aa2b74f026ff9cfb1e5e00a3b4a75f752f912337fdcb61ac9257d58fb406cce"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03916b256a6ff5c51bc0b7866678cdc40a2d06477fd022b61f79383b6cdf487bcf",timestamp:0,asset:{delegate:{username:"genesis_49",publicKey:"03916b256a6ff5c51bc0b7866678cdc40a2d06477fd022b61f79383b6cdf487bcf"}},signature:"304402207143545435e31741050f802e434d9559c486dcc19e136e6eb68c7881959f5f970220387f941b78ecbe29b209993bae101828daf5492cd2febf256a87d157b97af8cf",id:"d6805135ece218f780e604673b9946b789d4406553a5dcedee1c06575cc7c63b"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02b38e56ef8fb018fe914c484ea4b0aa18f1a938f46af1c394dfca40adf2771bde",timestamp:0,asset:{delegate:{username:"genesis_25",publicKey:"02b38e56ef8fb018fe914c484ea4b0aa18f1a938f46af1c394dfca40adf2771bde"}},signature:"304402203222d23708aaba6f4904fa04ff5cd88c9c9aeb91771754763be9206d79f2d85402206ce18e2b3bccb6fbca2e024b1bb38ecd859c27986a0bc123bcc29f99b0dcc6b1",id:"86367f56d8b4a1bc34cf1790b3a1f81cf794b9e9683b347b7a5a5110e63b9b34"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"034bef7fed4f718a450ec4672533d74ef95039cda85a1a0ff74e6b2dbb9e220d68",timestamp:0,asset:{delegate:{username:"genesis_24",publicKey:"034bef7fed4f718a450ec4672533d74ef95039cda85a1a0ff74e6b2dbb9e220d68"}},signature:"304402202b33813e4cdc7f97dd41747d53542803cc7c5ae7aae56cfef3e4b9d85e74302102203854d993b16efbf7b21454bcf44873969f35d033ee93866fd2293841f866441a",id:"65303140bae99aef3d68b36379acd8b9f4263f1d90887efc1fe7f0735c26b84f"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03d48d4160457b1fe8d76e2da68f33860ad2520836b5ddec8af925757690d93c21",timestamp:0,asset:{delegate:{username:"genesis_23",publicKey:"03d48d4160457b1fe8d76e2da68f33860ad2520836b5ddec8af925757690d93c21"}},signature:"304402202c43ebd655af5fb0e7336fa41f03977bc5b4c05a5a6f335e544a58acb5f5ff1d022074d415ad20703c67fed90e1d0bc970ebe1d55f31a1a3dede173362c3736ba6e5",id:"c529cb54924f221a3aba98b204f82c033b67375a15d52e52671bb526957baa3c"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"0384e505b25eaac812f8acbaa1ecd09e2ca4b5d973210189a39dc48d2a8f908780",timestamp:0,asset:{delegate:{username:"genesis_22",publicKey:"0384e505b25eaac812f8acbaa1ecd09e2ca4b5d973210189a39dc48d2a8f908780"}},signature:"304502210099161fc12c6ea658f382dfcbd495c84961d1f8f029edfb6c2746ddca918418400220556ffdde284f10b5ba62bdf6a67139bc56f7d0e44e87c651cad6e8c2f646aefc",id:"bb014f5d3ba5ecdf3dba9949673e1cea6eeb3771f41bd88881aa4f055307e4d4"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02c3709dda58fcf7e26f94e865458b08d95d398446f67f465387be56b03ec36f4b",timestamp:0,asset:{delegate:{username:"genesis_21",publicKey:"02c3709dda58fcf7e26f94e865458b08d95d398446f67f465387be56b03ec36f4b"}},signature:"30440220562a015669686e64c274be9823add0ce9da9bb8ea31e376c194b7e194c7306670220186b3482683572164588f2d89c8483eb6a789efaaf1945ba86b5333f23235254",id:"ee1933bf760161dfcce831d57e784e13f1e428bdf6ff59a0f06c778873172032"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"021c2280e462313d08fbe92bac59f43203cef4e21611d42747535ec2987a80e30b",timestamp:0,asset:{delegate:{username:"genesis_20",publicKey:"021c2280e462313d08fbe92bac59f43203cef4e21611d42747535ec2987a80e30b"}},signature:"304402207e28352abc1eab6c5405cf78c2c1fe406912d3b08c6e02bf44877dd94d117eea0220144013da4977b0517f8fd8b7dc6838185e25d0f6f272af17125f50feced46242",id:"658f84d6568a7f48295e9f25281c6ca71c404245ece501cbbebb0c60efd08f31"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"0212fc419fd5f4c88f73b8475ea676f3800f4bc96433a074462d827fc35f4fd883",timestamp:0,asset:{delegate:{username:"genesis_19",publicKey:"0212fc419fd5f4c88f73b8475ea676f3800f4bc96433a074462d827fc35f4fd883"}},signature:"3044022036cc85f65b9cd55c1a336cc02c06cbecbc90a70314ed2848dbb7bb9cb7f7fad302200b217996c20eca5c5eaafcdc4d2a27a39d8945f55cd39322a0070b180e7a923d",id:"b8a1791640f64e4c977bc2c6f8afae412f6d125db9791db33d979fd3f607976d"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02015ebd34b20a1c7bcbcff1d53e7d2bbcb2b4eacee494830409e1f84117b802a1",timestamp:0,asset:{delegate:{username:"genesis_18",publicKey:"02015ebd34b20a1c7bcbcff1d53e7d2bbcb2b4eacee494830409e1f84117b802a1"}},signature:"3044022023390c4ff70c6f02923b4f55ecd6ef41e93871b4e4eb21be80b5023f72f1095f02205c921d9051395cf7a4d335a00a89a9e0f0d7afaae699b371503d35eda7cd13aa",id:"fa9bb4c78bbcbc164ef4a630997199aa01b53bc93d49b9f3237efea13717f04b"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"030cbba2415349f8093539632fe26692411219c11e740e9a3e02b6c64415f056b4",timestamp:0,asset:{delegate:{username:"genesis_17",publicKey:"030cbba2415349f8093539632fe26692411219c11e740e9a3e02b6c64415f056b4"}},signature:"3045022100c0e0115ba685768aa3aa11b9d0e1149a63824f72a486efe2dfa16df93d8f8123022023b207efa969e876be02f87ec8085da800750c127edeee1fc481fe978029802a",id:"4bfcd5ae4f01935aedb2fed2d509698902a054456f7dcf5fce02da02f1c7d752"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03367a6969c0d62e9b0fb3439ff2574dbacd5d616cc57b08f7c5417d4ac6e94faf",timestamp:0,asset:{delegate:{username:"genesis_16",publicKey:"03367a6969c0d62e9b0fb3439ff2574dbacd5d616cc57b08f7c5417d4ac6e94faf"}},signature:"3045022100f9a6be773cea615ec0d0cf0e330f3ca1faaa86f7475d620f6ae1299ca58671d5022065ae6e660f1c80e935db4e66387fb44225ee73f671e54003c0780e435029acc3",id:"54f2abed7bbdedacff1decc7be229f6385561cc8f800676ea61deae358bb252e"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"0315ccdbcb0ec7bf484726f95bcb2b331cd976bd7d72f0e3f5c38fe4167d7c69fe",timestamp:0,asset:{delegate:{username:"genesis_15",publicKey:"0315ccdbcb0ec7bf484726f95bcb2b331cd976bd7d72f0e3f5c38fe4167d7c69fe"}},signature:"304402205a4959cab68877017ad4d4ac61a5b7c9a7cc674ec66b21e7463a8673b8d51ab002200fbdab9ab0e4601e1fccce869be1a1b3348d8127e4febeaab68228953a81cf04",id:"7348d455b5dae1aebd48b3668b571f5e44c0e8f612c1377a19de8f3e27c84644"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03477d8e77a43b443d401aeec8b32aec5429f8f453b93d5c4061cd17101e09b077",timestamp:0,asset:{delegate:{username:"genesis_14",publicKey:"03477d8e77a43b443d401aeec8b32aec5429f8f453b93d5c4061cd17101e09b077"}},signature:"304402201a4433b86c57e2701fdbf7640b13b21634b7cbd3319aa0c914e16b59fae45bfd022044dc7bec58897ddb36fadae3c52662aa228ae88b0ee6c467a52d1e476784a30b",id:"6f6fa4b601053f6fcf50e734d6caf590dc4d23980c32d9f1b62e10cda3241018"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"037d5887d9a9bb48e45404fc5c3149bbd53d82bb4572bf468f0da9b4e9f6c73ae7",timestamp:0,asset:{delegate:{username:"genesis_13",publicKey:"037d5887d9a9bb48e45404fc5c3149bbd53d82bb4572bf468f0da9b4e9f6c73ae7"}},signature:"3045022100c2f43505df18e7682ac36c16f6429764ad86339527e554a78ef44d0941cfc937022007118cfd9b51ea359ce4dcbbb5dcf06147fd219a38bf0eee9a220c507c5944de",id:"dca332856f06a5431c648f73f859b8f8286bac60d7f452eac42d7febef0fd7f2"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"026f1910d432c8ca8f04248e74c4b565a236d9851caeed4422550c3803b313bf39",timestamp:0,asset:{delegate:{username:"genesis_12",publicKey:"026f1910d432c8ca8f04248e74c4b565a236d9851caeed4422550c3803b313bf39"}},signature:"30450221009a73cbe01aba47c293914b2bd382e5715a611dc14714e225fe9287cf293fc34f02201b05843284b43452c1b779b6121be37b4459e96d6e1328f6ca4c076522f4351f",id:"49620d01436262018949d76325f7f7c974fe5419a32626c3ba1e7c3b2f0752e1"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"024eda8b8e70b93f87c1e18929a2ad789aad3f6b3fe4aa12b4f74513bc45916726",timestamp:0,asset:{delegate:{username:"genesis_11",publicKey:"024eda8b8e70b93f87c1e18929a2ad789aad3f6b3fe4aa12b4f74513bc45916726"}},signature:"30440220637254d742d5038797dd38323259ba4263c3e98eefae4a8c6717faec0e866a2f022075765f0a4036afbd297bb3bd10c7ee7f62731b45dfe708a04096947af7caf106",id:"63acffbbad5440dec99e17dd3eb4d501f44330f0d8c4db4cf161cc0992eae5c1"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02886a2ad45ba50edeffbb7447cc1baf1cdd16e3b91e5ed6ba8b16c687f03e01db",timestamp:0,asset:{delegate:{username:"genesis_10",publicKey:"02886a2ad45ba50edeffbb7447cc1baf1cdd16e3b91e5ed6ba8b16c687f03e01db"}},signature:"3045022100e78d6752036f323c61e78cefc4355a1dd7372fd782377052b5c80d30f81597c3022004b86acb40c52d91a1eea79d4de929c59a5e24fed6f243157088c1eed03f039e",id:"531ecd8620d51f46dc1140c8d8f0ec8344b4ebef61f17e8c304e5b3bd5e02586"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"037bd8595ad6b5787671c99921208284ac6f791a8ca55c6e49ca94a94731b6cba9",timestamp:0,asset:{delegate:{username:"genesis_9",publicKey:"037bd8595ad6b5787671c99921208284ac6f791a8ca55c6e49ca94a94731b6cba9"}},signature:"3044022066203d448724540f14a916591051ed79f57e3995af8cd9bab5ef003064c08dd002202a60f251bda6088ce8d43d6289ea2ded6442e95344654f02a17488f26c10a893",id:"eb253b77c4560b226d8edbfbb860717289258f4cd1ef15cee6da88f80029a33b"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03e8eeb0e5063caf214986fa2e085dc67897908cc2501ccdeefeef33722afde50a",timestamp:0,asset:{delegate:{username:"genesis_8",publicKey:"03e8eeb0e5063caf214986fa2e085dc67897908cc2501ccdeefeef33722afde50a"}},signature:"3045022100c6bcd9f75dbc9bafeb2e134028b2c4f8be77214611012f4d9b92bad5610d42c1022039923f93586e1976ae614fc90208352dac120505a08be0a2b9b82840622473a4",id:"5378c9044477765f44580a5f42ace617df524457315fe63ef9806e41de5e65fc"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"0307784cfc3d9002be47ffa32e8d99146869342254247df059452c5f92f7ae521a",timestamp:0,asset:{delegate:{username:"genesis_7",publicKey:"0307784cfc3d9002be47ffa32e8d99146869342254247df059452c5f92f7ae521a"}},signature:"30450221008ad9a84421282b28c6d4cabc42a7855bb3853a02edb0524fecc21b821216a6d702203b0558b44c659d52fa163f8941a61ae0b8cec81cdd3fdbc8e91577ede6815fcc",id:"20d635b856a468eefc0801853afd1d387d25fdbe69c677e56b850fc45a7c3029"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"028dc3fd930165f910571a159f574ab15ac740f48e68429a7fbfb42ba202c64a0d",timestamp:0,asset:{delegate:{username:"genesis_6",publicKey:"028dc3fd930165f910571a159f574ab15ac740f48e68429a7fbfb42ba202c64a0d"}},signature:"3045022100fdb6d70801c889e1173ae9de78a07e55bed999ef39107f2dac1e65d6bacbe89b022004557733f6fe0d96f67cf420691375a8ab23ab212365a96acb9b36aa54f8f415",id:"c7e1b81e3cb7f63eb947647fa572b5309b9f022d893e745baffa282f51e65dba"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03de80311e0ca23a780507fae2691b7c995cf36fb2b2d079b7c518e03302d56eff",timestamp:0,asset:{delegate:{username:"genesis_5",publicKey:"03de80311e0ca23a780507fae2691b7c995cf36fb2b2d079b7c518e03302d56eff"}},signature:"304402200bd5d223d887130a7a8b65f10e8f0a7eacda456257dc5eae4cf0f3f7068ed6e402207d6d5dd9cf0f69f592fa81bb117a83cd0e55a21b16abe048c1d4b603f295fcdc",id:"71debbd9fb57e0cdfcf42d9d012768a7d9ad85b4b6f32d520b424ef0e0893bc8"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"021780f82dfb6331cbcf35b9fc233cf3494e569a329b2966249c5632b0ecf53cb2",timestamp:0,asset:{delegate:{username:"genesis_4",publicKey:"021780f82dfb6331cbcf35b9fc233cf3494e569a329b2966249c5632b0ecf53cb2"}},signature:"30440220043a0359c3d68ff69877cbf2f116410bea908036f57c3aa1d51684ef9e4d1fa102202a55ae852b5e547c6733d8ea0fdf137f6525b4effda003e09289936be0f333e4",id:"3eee8478d002ba59f2ab94bd539c26f805005b24d8d0cdfda6f79ba576db55ce"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02d113acc492f613cfed6ec60fe31d0d0c1aa9787122070fb8dd76baf27f7a4766",timestamp:0,asset:{delegate:{username:"genesis_3",publicKey:"02d113acc492f613cfed6ec60fe31d0d0c1aa9787122070fb8dd76baf27f7a4766"}},signature:"304502210097b10f85338d39ca4dfda4baf9b86f97253cb06ff2c80d3d9a3e5023b2294f060220192986b55a91bf3c5d5ad1e8f7aebf69df89f022e1d8f8674ecb675faace1623",id:"69483bf341ab8e5ef989340da103a162b25e09ef205b53a7d2f6f8547bc7334c"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"03aa98d2a27ef50e34f6882a089d0915edc0d21c2c7eedc9bf3323f8ca8c260531",timestamp:0,asset:{delegate:{username:"genesis_2",publicKey:"03aa98d2a27ef50e34f6882a089d0915edc0d21c2c7eedc9bf3323f8ca8c260531"}},signature:"304402207f3b69c5fe22ec832246ff2e0318b361849cb8fb7250d9eee96639e17d112ecd02203a4d4010360992f4162f7ffd5361884d787a07580a579da11fee4a8b8b7e78d0",id:"d6424b437baef1b93e967a48b29313347e6a79cd93818528c9a7515ad167b917"},{type:2,amount:"0",fee:"0",recipientId:null,senderPublicKey:"02e83dae2b59ad7923d931f8d0ff96588b6f2b2183288c667bacf2888d5f9d80c9",timestamp:0,asset:{delegate:{username:"genesis_29",publicKey:"02e83dae2b59ad7923d931f8d0ff96588b6f2b2183288c667bacf2888d5f9d80c9"}},signature:"3045022100e6d497a3905baff592921a269d78882d787a03a4c67e7818a5c71aa57c00186e02205b54519080782485a6ca918a50bdac68c0cc1723259cededb1ae9f011a88b919",id:"fd90a8bf3d38e0fc81020705be347205da7006d4db889f8a5c28653069d060b8"}];var height$1=1;var id$1="4366553906931540162";var blockSignature$1="3045022100c442ef265f2a7fa102d61e9a180e335fd17e8e3224307dadf8ac856e569c5c5102201a34cb1302cf4e0887b45784bfbdaf5cfbc44f6d6dad638d56bafa82ec96fd45";var genesisBlock$1 = {version:version$2,totalAmount:totalAmount$1,totalFee:totalFee$1,reward:reward$1,payloadHash:payloadHash$1,timestamp:timestamp$1,numberOfTransactions:numberOfTransactions$1,payloadLength:payloadLength$1,previousBlock:previousBlock$1,generatorPublicKey:generatorPublicKey$1,transactions:transactions$3,height:height$1,id:id$1,blockSignature:blockSignature$1};

var milestones$1 = [{
  height: 1,
  reward: 0,
  activeDelegates: 51,
  blocktime: 8,
  block: {
    version: 0,
    maxTransactions: 50,
    maxPayload: 2097152,
    acceptExpiredTransactionTimestamps: true
  },
  epoch: "2017-03-21T13:00:00.000Z",
  fees: {
    staticFees: {
      transfer: 10000000,
      secondSignature: 500000000,
      delegateRegistration: 2500000000,
      vote: 100000000,
      multiSignature: 500000000,
      ipfs: 500000000,
      multiPayment: 10000000,
      delegateResignation: 2500000000,
      htlcLock: 10000000,
      htlcClaim: 0,
      htlcRefund: 0
    }
  },
  vendorFieldLength: 64,
  multiPaymentLimit: 64
}, {
  height: 75600,
  reward: 200000000
}, {
  height: 6600000,
  block: {
    maxTransactions: 150,
    maxPayload: 6300000
  }
}, {
  height: 8128000,
  vendorFieldLength: 255
}, {
  height: 8204000,
  block: {
    idFullSha256: true
  }
}, {
  height: 9000000,
  block: {
    acceptExpiredTransactionTimestamps: false
  }
}, {
  height: 11273000,
  aip11: true
}];

var name$1 = "mainnet";
var messagePrefix$1 = "ARK message:\n";
var bip32$1 = {
  "public": 46090600,
  "private": 46089520
};
var pubKeyHash$1 = 23;
var nethash$1 = "6e84d08bd299ed97c212c886c98a57e36545c8f5d645ca7eeae63a8bd62d8988";
var wif$1 = 170;
var slip44$1 = 111;
var aip20$1 = 0;
var client$1 = {
  token: "ARK",
  symbol: "Ѧ",
  explorer: "https://explorer.ark.io"
};
var network$1 = {
  name: name$1,
  messagePrefix: messagePrefix$1,
  bip32: bip32$1,
  pubKeyHash: pubKeyHash$1,
  nethash: nethash$1,
  wif: wif$1,
  slip44: slip44$1,
  aip20: aip20$1,
  client: client$1
};

var mainnet = {
  exceptions: exceptions$1,
  genesisBlock: genesisBlock$1,
  milestones: milestones$1,
  network: network$1
};

var exceptions$2 = {};

var version$3 = 0;
var totalAmount$2 = "12500000000000000";
var totalFee$2 = "0";
var reward$2 = "0";
var payloadHash$2 = "d9acd04bde4234a81addb8482333b4ac906bed7be5a9970ce8ada428bd083192";
var timestamp$2 = 0;
var numberOfTransactions$2 = 153;
var payloadLength$2 = 35960;
var previousBlock$2 = null;
var generatorPublicKey$2 = "03b47f6b6719c76bad46a302d9cff7be9b1c2b2a20602a0d880f139b5b8901f068";
var transactions$4 = [{
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AHXtmB84sTZ9Zd35h9Y1vfFvPE2Xzqj8ri",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402205fcb0677e06bde7aac3dc776665615f4b93ef8c3ed0fddecef9900e74fcb00f302206958a0c9868ea1b1f3d151bdfa92da1ce24de0b1fcd91933e64fb7971e92f48d",
  id: "db1aa687737858cc9199bfa336f9b1c035915c30aaee60b1e0f8afadfdb946bd"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AZFEPTWnn2Sn8wDZgCRF8ohwKkrmk2AZi1",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100ffff4e9ba62e5e3beb37deee052824da83c4030925bce09f190151652d0669b8022056a432e56a2e1b026d4b54f6c34ce88a0c9cebdccc730659c03449fe878c66f8",
  id: "0762007f825f02979a883396839d6f7425d5ab18f4b8c266bebe60212c793c6d"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AJjv7WztjJNYHrLAeveG5NgHWp6699ZJwD",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022001a6326e5d1eb06d0ba1fa39446bd6d56ea45f0c269ebbce5dfc6a649277cfcc02203b252d3a6ef2b22349d9d0a9110ce28a199c39dc8b911edfa82c297a02009d07",
  id: "3c39aca95ad807ce19c0325e3059d7b1cf967751c6929035214a4ef320fb8154"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ARAibxGqLQJTo1bWMJfu5fCc88rdWWjqgv",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304502210084d855eddfe616cf1dc238b19226c7959c2fc4027ae2e8aea6fd8e9eb8928e6b0220440f980e40c1c56348782fd69d49a96944df7ee5b68d18028600e0e7501d4000",
  id: "9fdf6ae86f7c005b3b7dc1b9fb6411219407ecaa93adff85fdb61710f5121638"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ASEJEDLfTxy6upQDWTuYucoVwMUcmhSGhp",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402205438b8b9058bbde5d30794e7681e400e52b5fbd22324c5b6b521f97bc8b8aabc022000fe04d7afbd2e668b1d4576988ed596dc92251e33efebc081e2cba14ad5a898",
  id: "1d7c68087c875d7ce555b2c3e71e1d91a1ad62d0c2497efe3cab91415e634041"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "APRiwbs17FdbaF8DYU9js2jChRehQc2e6P",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100b2e634a95b011a68489870f003e4bac4a4f0578bfdc6b9f645c934016c2c0463022022cd4ebf276dd627d98be4b697bae2df10b86d94e984da2eb7e011b08d6dffd2",
  id: "0c993e115ba26981b0be9d22e7c4a13b0f106e0cb472f9d34eabfc8e414dd528"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AdXbS4GKvV6TZVHrNzcYSQKfpenQnFGTxK",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100f965e5c280acb22d1cde405223fe9a6fcb765844adbc5321b17a268924e1f597022043d31b1edc5fe0cf60a960d84e3528472cdf34560c9463979043a409f37e7f29",
  id: "c279f2eb1f9e6e7d4b0ba7a98233a0f1a2536231976c99f56f64b248eb06a0c1"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "Ac9dCo9dFgAkkBdEBsoRAN4Mm6xMsgYdZx",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "30440220715463c316a75959dbfb6a59a013fbf914bef1ff739ac8000d49dabbf5118df9022019345ae1c34173dc214bae82f3cfbf438092f0fd2d277acafe3e9deb644b1a3b",
  id: "7e2fc9ecf23e909a3d0fbecd615445a0eed8c2cef18e01b1492d63f616f5d87d"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AReCSCQRssLGF4XyhTjxhQm6mBFAWTaDTz",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100fdd8aff26dceeb5abb6e5e8a8f468c8ac1997a587225298e3d8135d57dadf4dc022072ab80a81b301a162ed5cfa67d213d5a3980185088632f5f592351aff8aa0e9c",
  id: "511c0e1076104743f98932f8e7720bdb3f1539134edadd331914fd9ece1ebede"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AV6GP5qhhsZG6MHb4gShy22doUnVjEKHcN",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "30440220635e04ce278870f17fcd1883aa26c568e63dfbdd302add39aa30fd3637c79c2c02206fdd9e7b1f4d238a97d26ef1758927e2d39f121687490f2bd79831e36afdd43b",
  id: "0768d5016c53d884e3d68a09d1bab0d730b7067c71ef4ca1c4d61b3815f5ff66"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AdWRsk7Lbo97jxGBKzLAFwevVHbqVbW1Cj",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402200b1dac57ca6565ac31afb99686f2e0f0e8dc219b9860b295ca5444a1663cecfb02205787393561fe407449af4aaf2f621db9e4d3f11c7438666cd694d495c0a0c41f",
  id: "1aeb50080ea118165e5041f7a897974c2ed1ebde08add85dc78cc7cf73566a91"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AaUgne8txmQB1iBboiFVLVHwLaYChZiFVA",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304502210098dea25eccf31ce6f874a9528578805aaf07be8b41f1571865793f9e3e6e3c97022033ae9c73dad44c01fe6362665fccf63bb1a0ae8e26f77a1cf60b67dc96b05343",
  id: "254f0f4fa277cc651a746d6ac371eb27afc3ea155ba060552dd26b8e83d17b72"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AG8kwwk4TsYfA2HdwaWBVAJQBj6VhdcpMo",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402207f4bf346aac501e766156818089fb16905a9bdca69ff6d5a55ba918a08afc7ab02200ec2c25cc4bb30e2c176d55630d8e2679b899c14ab4ba43c3d62955dd940425b",
  id: "e5ebb02e8e8a6708e22ee5ef99fe1dd8b6eea1095be6b772aa21bf63cf7ade5a"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AFyf2qVpX2JbpKcy29XbusedCpFDeYFX8Q",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100a0bbc15bdad648bb9b439f1d34b12b853442d1cfd4ce7f569905082801fa58e8022036b4e73edf7ab7226f8007233f77b1d497cb6b4736f02721bf1b399312ebe114",
  id: "8a686b21477b64dfd85f08f8598a0f121ca1c7d65ccaca9e42326c75fb5f3abb"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AW8n3yvSAqUJkyfcG5u3bgRxsNKzXYPamN",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402205d77dfcde527dcc6669bcb01c27b92c1a6399e35ebac9e69415645f596ab1d2802204179497bfd952f44d5f9e295b2a3219a290a4a82841c084a18553b7712e26415",
  id: "21175347e2acfabc09a7593aae0682e39fe7152199a90561c11125f525211243"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AZuvQC5WuVpPE9jwMCJcA28X5e7Ni32WY2",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100cf77c16df9185727ff717b71a94f8b29ceeae1e5bb3a28da8cef9df5bc63b7c202207bca394ce9ebd344a548e5a5697f672dedbef640dc1f9105f7c063287bcd1840",
  id: "ce1d9b7377551f36568127f5b635b5443f5a58abba6566b50a8d4d7b53c8a874"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AHysG9CfbXvHtxev9eziTK8WUbnFKKLFR8",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100eb8daebb5484f3b0a738c9344fb28298c596f9486963f8fe36e2501ee6876f2a0220559df66986dc9a9a8e76982ef85f907c62745757990c69f0b17b6ae5a7ca4719",
  id: "b56702f5eddad0d8dbbb33b6b1ca3e07e4740def9c5dd2aaed9a70b90a4e31b7"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AMfyf9iRjXiKNcLQVTUE9oCESUPzmQ6iUT",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100d088e9bcd78978f2d67e7c7bccecfb73ddd0d1a2dad5b039390812320355722d02207affe83d815f04f6b11abf98eebe0488bfb87f8cd6513d44b829008ed1c15ceb",
  id: "a73c053c42e83a83498cf58e5b077b31443e265ddf8228081cb17a36bba366ae"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ANRNMPjQjJGVsVbyeqwShcxKTidYJ2S1Hm",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100db16a8e9682f07efb607bc7c75b654646ff449761ed146ab9358e69d29fadd7f0220436554ad78db0e04ae5b573258e2c8067848e89b55a6e8e1e25011a43882a643",
  id: "2dccb8b44ad2e598673628fd9d74e336b467a0c941d5e257dceb85c8e0a0000c"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AH39inbLsUBhC3k29NcvQP3zKZWnsQksvA",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100b03738eccce8ad0b8ac0a656119c2cdd202089c5650d8e1486bd13eb9c3158980220059079900c7fdc16e799c50dccc074726fbf0068044462faabdf1e73f9f9bc38",
  id: "b2cce30021d139f97925807da796722bf4d5459442523823388c259ca5ad73db"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ASqzCDRS5cTBwCmC5moQ34W4QZhtrj4pT1",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100becb49fe5edd6806d5ba6eddbbb34ca8eaf3a12dba123d1610b2b120ca8bd017022072972992ee0ca0f319ae754a2a5a10d715a08b23f8239f9d6d59774f790543ea",
  id: "9e4841f43ab355be7a4f93b09f3d82c17065fbe25387dd6c5eb4e2692ea05b0b"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AeooqGMJPE5UWRPkKW6kgLGZu3898vcLPV",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402207f1a3fe8c5aa7a77a58ed35c34f128b5df6fba89aa918af35eff432be7d1f8e00220460d4f2a457e1a477974157e33bf2974de6588d56e59729ae980720e9794827a",
  id: "2c7ca823be21724a4876de632dded3b9afca45df357819ed028488128d85d29e"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AWHGbGaz5FgvyChuAfWFmKY2LsbcwqPYL9",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022067266dfe9d8f2550b590e1eae2f73d28c6b80fecb24c3eb1b4539bc864b3b4f4022031e5122145c35874c0c48673d088e76fb3e11c308ffe9d5dee6431d3441d627e",
  id: "a91119f04e2201184761f7fdcb26e4aa81c7e1076cb11a58a422d351241d4e4a"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AWtD9W5LCv2TH3VcdzbGQBGaJBwvbzZNDQ",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100b970ec89927de0cb7805e614a742d42c2967db5a9c68d0892956dc89d68ca7d1022067fa30265dd2e1a2985980be2bf876748a7a8c7f3cde0382265b601fa658dc17",
  id: "94955e6bac6269fbd19e92d2292ac947225fc6f68c6216001b528596a961040c"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AJPicaX6vmokoK3x8abBMDpi8GMPc7rLiW",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402203671b82ddf8a824b8e5aac8bc28be4aef1c00aca1097d14ec1a55003d7a3f28d02203aacb6e7517e916478432b81399828ba7425183ce0fc43feb361bcf345fb0519",
  id: "df563ee9822bd3d7aada600d4800952743ec64fafdc7697428d7a19a60745885"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AbfQq8iRSf9TFQRzQWo33dHYU7HFMS17Zd",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100b77653317c93eb20ee19c71e64a7f9ecb985351bfb1fe351ac65a5738cb37ae202203d540395e1d55f87caaaa867afbfbaf98c553be0b4c7d1748418a76b0c258c89",
  id: "d21b6341e2b4be5ffdc3dd8fbcdf2c576ba02e2ef4ab5eab0e4bfc9da4e9e442"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AQBo4exLwyapRiDoDteh1fF2ctWWdxofSf",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022046239e39062a58925099b005888355b8cd6700af66972bf509a10123f9abdec60220202321ea74e56177606fc079d19c29851d832e6d00c93985ffbec3dba6f0d675",
  id: "df6bc7a17ad34f8e9faaa2646e8e5dd8bca35affba352537184f690e200e17b6"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ARMEiPQE55CfHfR8WmosiFykTAPGYUyYJv",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402204eeab87f7ecc2097b85606b986177964f3ae777535f6fc0cf08a55fec587d87602203779d59903b8de63511e4ed0a7967bd85e9cb1fc9d84bbc5091e3caa87d8bd52",
  id: "5f0d5f0dff464d0ad587da5bc93e600a8e2657d359d0a1224bdd4ccc3b6f376a"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ALHDQyTm7wALtwjmKwEejZjq7f6u6w5xCv",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402200a2b9d0f61066fa00a2a2882379aa8ee60e949bdc2a85103bbbb69ce3eafccd9022057364f349faceb3047fa95ada210c64fc4a81978d66925b37d3dbc21ede885af",
  id: "1b39e3702576e6ad7775e34d53e43210549d52a56b3f246031e6ba4121a66bf0"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AcmXmomxpP8NahbbFivq32QmLuKFkTkqRg",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304502210099e568d3d0c1b48410e0b85c74d04234dacfb2fdf2b1d4b51fca1cfb3445347a02207a2509645aae54560762a37422b66ba4b3ee1c42de35d58c36d2f9d8fdea11b4",
  id: "0f21e53dbb1edb1cfb4c31bb675aa4672b452a03ec363a2b3300a9dda49e3be3"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "Aa3mWTMFTXeTJukUgpeihQLBYDHBzdpWZX",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022026cc5f2b588a86241badca73cd9c1686916d516b8c6c397c66a9d5bb6b5d4cd402204ab5a8c8589ee954bda4a116999d2a0e4ab0e3e96f0c7fe131d7c57b9a1ede43",
  id: "410826c255a23a78ac5c3aa10dd48132693bc955845af16c20d9c6f69b05dfe9"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AGqSC7M137ctKtkAjd3J1haCEWNfayXnuJ",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402205fedd8d3b5c8d69cdd7db5ca8e9e7c5004f6ba751e45eb1b85b26d9e89800a2402202be56bb2cd824bccf325b6b11432bf6d0ddb5ec97fcc121839ac2ebf884c7173",
  id: "ddb57d8270b2b6c876191c1e1c5974388b9fb3ae0980cb2245d8a7c426237f47"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AcATpmcMU1tmLDX7TzR3wXop4tfLFR21Lf",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022053cd42ad147eea33801b2b57388b33f633b4bfe2ad902190e12480522250d07802203066dc0d0c2ffacc4c74cca1e0187fbea1cef7e78a78666d2ec7e4e87ef546eb",
  id: "29e1aedf98935c369946c8dadb2d6784f9ab5ce8d73b9b4de2466c7757e2557b"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AZeX3qaqdU8iCebAKYoLMR2QkiuG5CffgU",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100c10448b87e7176735c8ddfc8fb3c4d5d55c2d71d18b7ce3ab321209ec299fd41022013517a09e4b366ab386698286ec7bb20410bdfb7f6674fab25a739259083b297",
  id: "4cf04852529b5525f22cc540790e36e61ed36045ad1b5b788f61ebe42637391e"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AcFWyJRk5sRKagThYhk5e1jdkx3wzhL5cW",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402204cc1588b204ebc0c20f44a31ce53d15ab5e4d1f9c103c02dd4e4eaa1c33630b40220194b6e427b6def0783461cd8d765f97b105d048942be468be2ee9b0a2785d2ac",
  id: "35c6bc3f0799d9c79efc6515f232c58be0d03a3a797d066cba879eef4afaae2c"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AdT9FrWUksf99Lhkr9JGb8f2HLSg14kTqr",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100be44f7ea12e2ee89245fb474643ec6c2c75afa00276826a4ecd6fca4cad5ff30022071a2c083b353a821345e4bbf74d98db0760b8721856572572cc3436ebdb8f08c",
  id: "45f75a349f3b4d73434c0f2ac9c291d5d07278b79e6eaa0d38d6e005f66c4783"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AJQuCRxeJpzkoGSBMXtmuRMYg9mtCb4qHf",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402202090f506e8f18fde70b87a3fd6c470a23e9e262f20ec6268dd59b6362e51a29202202b838c598b33c6317c998dc179fad2b660b8a72bfaf8223d7cc82414ab4c6af4",
  id: "a8d9034d1091a4dbe595647ad5f64ca8b243e7842301aee48f7eaf8b8ae98119"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AJRf2oWusRmm8QEiZuwvMg3qLbMxpd7BJ2",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100be59b689a48e198267305f1ae7e116f69f7c360857ea0b1fa81db122278cad69022033436d24ec0103674522f0c559e2357f8696bd498deccad2e0f66b2cf7469538",
  id: "061cb438ba1216cfd5a0f268ce18e6f280557bc944d9aed3655e2bc5f08bdf51"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AWdRZPxQQvG1TP6hdxvQCn2t3skerq9Ky9",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402203b5d2aa7c4554d6d2dd6723043350df0199e6e7bbd9f21a1a20dbba8c63918cc022014a78064c5f9c5e2f43d3be36de2b5e2f17e9af557bb6c75e8d82d9f725d0188",
  id: "239f0640ddc3170a737ef349c07cb82b2493d207421b6f71b6b3dab856f16088"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ALJVm7EYiMtc1JJDG6BupFw3ttRR6Yewej",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022005eb29ad4cf79fd4f6898de19459e15cc816acb0975e53530a202e69c29d0d4a0220686cf6e0c14779d6d68dcb9d16358c0e859094d2eec8083598b7bb5869478bf2",
  id: "25d8eef755cfee7cab0d7f9fbbea0fad6d5f906c432d997ae8ef1c49d23735f5"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AJv5ZFmu6fuugsdTZNi6ukPgptbCmdW4AW",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100b93096a287d59545fa3a08593dfc740d9d47f3cfa3c4bd3c8ff8ef53d3a2e957022027eda62e47220774cf799f46916195e5a8b30015c56ceff4f4a1c10a918e3675",
  id: "aac25996e3be809ee88996b6b4063e2097d6306e77a067de8ebc8d7076a28d43"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ALs933qA9Cm3caRDei4ZXxnzXexpXNem8U",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022017282aa4fac7b18e834abc3ca37b2f60cf989c26b12e2f2398a66cb907015a760220428218d39db812a22cc138acc7d5d4d2d5713f0546751c02d2c3fabecca0e724",
  id: "b040f86b75750b49c83ca7eb8f2a458f16b44789796ff306c5f942ca5f19164d"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "Aa4M1zL3a74L51f1AvEsLmBTsKLKrkRScU",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402205970d53cb0921a62bbef540dc33189b2313f3574e44f046097067e6991d63b1102200a356c87642cc781df661a1fee21cce354a144463d37053280e000e1b75da7a5",
  id: "25ce96f951d7b7d886ef487331125b3413f655f9c5ee7fb4691a728c3cbce18f"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AMv3iLrvyvpi6d4wEfLqX8kzMxaRvxAcHT",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100aab0201c9d9a9641c11605d32353685cbaa051ecc276da1e6a3b309be9f20cf7022067aecbc7329bdf1770974e317a1243815511efa8c7af7801217a83c96d86eb0e",
  id: "285143b8b19cbde7c680b0f62ef51293e8f315c823ffbd97608c38c02045d831"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AX1M38eZC6TB1mzz33PxZBYBGrmE2zPdFK",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100dc7752f6f8acaa3a1ee2ed1bed306ee04556b3866db92a1e770c4b970c7a932e02202d137b312342f9d0708704833b26b6611d0464c87df97049ad8b616483e9d1f8",
  id: "87b06fccbb63809e976b3405cccec2eeaa3694d5510203f04c0e60bb6c2c0020"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ALiMCXj25VkGEAbj5PNbNez5NagZZJxLsy",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402205ccad5c77ea339f5e3f2b7900b4b1c409d3c8204273e89b6401314fb61f0d224022026a63fef86356de64fe571ff8488a951dcacab56e980fc044ef9f43b9d37439c",
  id: "5597ed52e4123756bea9307c09c916ff9d0f9fbce8d2e9a3a2ff719a87ad0966"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AeenH7EKK4Fo8Ebotorr9NrVfudukkXhof",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402207c91153f820f34228bec62772e0d78876bd3277912eacd866fe35b5c86a316c80220104529c6f786cb387ec1e3d5826271c837f0d0a6d0fa5731b9a5c6663cce7108",
  id: "d46fde78608fcc668246cc35336210b3c167ba55c82e91b0fd99df7e36872130"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "ARJWp8VJEieDA8h8YDiHq5LqU9vWcpWGG9",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3045022100acc0cf119c18861d3683bb3b0f6e209f2d62acfdd958f86dfbd35137ada814320220448f6f8adcd46204629b45a4a06f5dc7ccb4dbc2a1d702e107d91053847adf2f",
  id: "aa92faf5d80459b4e058dc8a8212608b589925052e22148384835ab687a4e875"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AU8hpb5QKJXBx6QhAzy3CJJR69pPfdvp5t",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "3044022055b6bbde5fa886db3cf1224a59f1fb43e850e2d9237db593368e1043698fe2c30220067dd20195e794af4152f1ff9e3ae4261698a86c54803ba1890bf176d97844d4",
  id: "432e67db0d5fc8c66376aa96c7324e5a1e6d00a415a9c8898b5e3bf25d8b083d"
}, {
  type: 0,
  amount: "245098000000000",
  fee: "0",
  recipientId: "AHXuTrYMxsdSvYJvRoBkM3kH8pS4QSq9i7",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "30450221009d6f38067264df8497d6888e4a8c316ec58ceba8a54c39ccb0ce261d114fbbab02200fae3f2f950f5c5e3387679f8ca341ec70cd90d0e32a30112f03cfb12cd9fc23",
  id: "9321e1b08faa544f592ad8dc7b60ff1cf845efcd28fedf8b445be3bda60434cb"
}, {
  type: 0,
  amount: "245100000000000",
  fee: "0",
  recipientId: "ANBkoGqWeTSiaEVgVzSKZd3jS7UWzv9PSo",
  timestamp: 0,
  asset: {},
  senderPublicKey: "035b63b4668ee261c16ca91443f3371e2fe349e131cb7bf5f8a3e93a3ddfdfc788",
  signature: "304402200aed5a4102bdafda00fda575294f149b393a798c510af8ba877b8c2d7ec8051e022004f7487c4f728c633aee5baa62ab0017f4b91cf2f494eb1c4cc9addc3e9155da",
  id: "0bbc9340798a18a81109bdfdbee9c9003f20a586dd9f80a39507c84588c1b4b1"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0377f81a18d25d77b100cb17e829a72259f08334d064f6c887298917a04df8f647",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_9",
      publicKey: "0377f81a18d25d77b100cb17e829a72259f08334d064f6c887298917a04df8f647"
    }
  },
  signature: "30440220072124721ba7c997f7c29ad3d4819515fae7a67be2bc395cb73f114eb8d4abe60220523ac295e114de30ce8a4300f4670db91ad2abe1268460e6ad3463fbe9834b84",
  id: "d2e70f9d2de57240571905aa81db0b6883e27a83be2422530722d76b56e63ecd"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02ad799c6bd670746892bd4331e1aebada26a2cc3ccaf0fde1e94942b20066b05a",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_18",
      publicKey: "02ad799c6bd670746892bd4331e1aebada26a2cc3ccaf0fde1e94942b20066b05a"
    }
  },
  signature: "304402204b93b06e08e71e3317f9426a1d3d450d6293fdbf5a6b3043fce27b3ce65431e20220683609720ea1d7d921238ca8b5098d3d9c0caab7b1e26efe42a6aebbc095471a",
  id: "8695bcb906f5fd81d858794f7d90447aadaa38418d312e33115a81e856b34d12"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "036f612457adc81041662e664ca4ae64f844b412065f2b7d2f9f7d305e59c908cd",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_47",
      publicKey: "036f612457adc81041662e664ca4ae64f844b412065f2b7d2f9f7d305e59c908cd"
    }
  },
  signature: "30450221009711559a43005c808113a1e9a01b1665495ff4bf30d635f7d98c752ead4cc3fc02207879e2a939914effe2b5c80cd515c4b3ff77a071b707c85c4444481878803db9",
  id: "55853d2d2a98def00c5ab842866a44d1db91678a07b6dd63d062508db28a00a5"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "026c598170201caf0357f202ff14f365a3b09322071e347873869f58d776bfc565",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_5",
      publicKey: "026c598170201caf0357f202ff14f365a3b09322071e347873869f58d776bfc565"
    }
  },
  signature: "3044022025ba51a588253524557547ec492d71bd485fe5b291e60eef681c39eaf8ee781702202bf24c3d295c7a2c9aed97a79fb835506797dcfe7e7a2853e2578e7773c7e134",
  id: "553298aadf692c9c5d0334c307dd4ac0e277a49ed165c97ce1362f8ec639ee3f"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0287a12b336fc781f2621aeb703ae47feca4d3ba6f30625f09ba03d225be6ee2bb",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_19",
      publicKey: "0287a12b336fc781f2621aeb703ae47feca4d3ba6f30625f09ba03d225be6ee2bb"
    }
  },
  signature: "3044022041291ba10ad30fb9ebcb0e13902e92d85e2c3e98493b6d369d7d1e70e8474e31022009083444460c415eab6b4beed9e0206eb0733bad5d2a476af4db4f5b5e74b835",
  id: "90af927db7b258538c8e21116b5a31418c88ecc163628b2b65fac92a5a949b14"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0311077c86a98b67850e7ed2c81775d094cf81c6991082ddc33fc7be5347dc765d",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_42",
      publicKey: "0311077c86a98b67850e7ed2c81775d094cf81c6991082ddc33fc7be5347dc765d"
    }
  },
  signature: "304402205d4111c87874e696b8f4b8897d0dfe68fabe4ad5c5769026c6ecdd04f09a1e2f02207b9c8a2a16b50164215eb1efea6d5d9f4e693cbb7eec8535e526cf8ba68bb796",
  id: "8a920ebf5255a102d0c9c5fd720e0d36a6a3539991a2267442facf1fea2d0b86"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02f7acb179ddfddb2e220aa600921574646ac59fd3f1ae6255ada40b9a7fab75fd",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_10",
      publicKey: "02f7acb179ddfddb2e220aa600921574646ac59fd3f1ae6255ada40b9a7fab75fd"
    }
  },
  signature: "3045022100f15ff048872020d9efc561b8c837f542d54d43b9b071f7a6cc09643c6d4180f002207d0e82153a30b66f43fc4cb4b9b3093bb3d5dfd70f96928c8780c838b1448c19",
  id: "30738f376aa40fb3c8d8849a5dc698786aeb1409fa801c18729f8da624631391"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02c1151ab35e371a333e73f72e9971cfc16782e421186cfff9325d3c3b9cf91751",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_20",
      publicKey: "02c1151ab35e371a333e73f72e9971cfc16782e421186cfff9325d3c3b9cf91751"
    }
  },
  signature: "3045022100babb7410d09215def98078bbab6b5e5690c2ebf54960d94527226ed3925877320220342576d1d8fd2d2fe3b6974cab48a2e16b4813f022b341b32f88e13f572bf060",
  id: "ccbe1c27eadc1b3b33f3f87f645be4f756021ee3d4c96f4f094e1f82d5728a3a"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "032c51f895ccdafae44e68baf283c50605d3f7dbba1c48011c6577383791f4a374",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_49",
      publicKey: "032c51f895ccdafae44e68baf283c50605d3f7dbba1c48011c6577383791f4a374"
    }
  },
  signature: "3044022032f2c350cc1319f5838d6880e91b49ae0438fb3a626ed9ab5e27ce8788e3347c02202cca18567c8491e0feea8a5f078e28605029346c509fac0c0a192e934f8c5326",
  id: "f99af0fbb4d65c2c3f2c1c558f0c0c0eac2724942802fcde02fa6da1d3a9000c"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "038082dad560a22ea003022015e3136b21ef1ffd9f2fd50049026cbe8e2258ca17",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_3",
      publicKey: "038082dad560a22ea003022015e3136b21ef1ffd9f2fd50049026cbe8e2258ca17"
    }
  },
  signature: "3045022100f0cb5d885ddf3bd4a58837f9b86486da4171652a5eb39228dfd0ff9d34d9c7c602202dc6e3d268d745a7e8633311a337ec097382342049672880c7c2215cf58e5da2",
  id: "2dca03aed08533585d8bc609da5deb9f17ac9be5a8352769d7ae63d0db16ff59"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0395ff46d07f197dd4d4cb5dbb46e164c1e7ca9896c33827f9d6f8003ea167917a",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_21",
      publicKey: "0395ff46d07f197dd4d4cb5dbb46e164c1e7ca9896c33827f9d6f8003ea167917a"
    }
  },
  signature: "3045022100999f19fbdc9a12eebbb8c748a4cfc6c91b2233f333a09cddfd49dfeab6aaf38602203d8dc9d1551d400572a88ee812f51f897f8b35508713b789b2c1bf6dd0e88945",
  id: "5d7e51d57b5914ec201ab65a019ecdf651c4f267cbffe403fd2170bb95145f9d"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03343930630f8235c2b3ae9ba013dbecd4d8bfc999d34bda33e18c8caf43772f1f",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_41",
      publicKey: "03343930630f8235c2b3ae9ba013dbecd4d8bfc999d34bda33e18c8caf43772f1f"
    }
  },
  signature: "3045022100e86e648add940a1e637e32ea9187497c281b843da09597e62d0c927d7f43235102200479f64ae63abb55e338f9ce1073a5c46907f7a2a82ea6f9bd9bc29811683515",
  id: "eaeed4133da26612c53550b6572722d8c3380d0a2344da1bd270eed1ea91fdf3"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0345ef2a1e4f64707044ba600efdc72aaad281c5a73195f930527c54d7cc891904",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_11",
      publicKey: "0345ef2a1e4f64707044ba600efdc72aaad281c5a73195f930527c54d7cc891904"
    }
  },
  signature: "3045022100bc3b2ebc58a92bf38672206e8311e7ef0e54912abce7338155b11e7d191b0b5d0220765a568c1fa4665c0ace6b4bd3b7ba0f8329e2f25af7a3cc0d78b2ea398084c3",
  id: "bb91e78e43c59a19ac06c015d8a7ef09d7c5b274c9f98505e5a978027354b71c"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03a46f2547d20b47003c1c376788db5a54d67264df2ae914f70bf453b6a1fa1b3a",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_22",
      publicKey: "03a46f2547d20b47003c1c376788db5a54d67264df2ae914f70bf453b6a1fa1b3a"
    }
  },
  signature: "3045022100aae4868ab75a33e4e77f9bf6c53b920c5e7c523a7cfe271d1afc472655f3d6a60220499f1bcb79bc0fa830dfa939898db5c9fa8571a2788c8de0da7e550bfc818bcc",
  id: "a6e687647dde9c1db68690090afc4fcf11833dd35fff3186b6b709a1e7d24260"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "034776bd6080a504b0f84f8d66b16af292dc253aa5f4be8b807746a82aa383bd3c",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_46",
      publicKey: "034776bd6080a504b0f84f8d66b16af292dc253aa5f4be8b807746a82aa383bd3c"
    }
  },
  signature: "3045022100c0cf1fc54705c13f70fde39c55a1703a4c612b8a919379cd5b1ada464c7cc8de022074ee62490a184010ad2418d3177ff2ab03d02d2589000176312b90422b1bd64b",
  id: "70262b0eec3ab5a60a736eb8a628cb600eae7522464a49791c0bf26e82318ec6"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0363550e2a3fe2153526effd4302045fa2c3027d0d9b30b19821a4870c8cb134bc",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_6",
      publicKey: "0363550e2a3fe2153526effd4302045fa2c3027d0d9b30b19821a4870c8cb134bc"
    }
  },
  signature: "3044022045db446b109215c6d3dfb0ee5869154a8a7624376c3760eec4fadc75a29033cf022003e524d64f3ccd0c6de4ca80a7327e2c47ffd16b3ad042bd25a02f5f64500ab7",
  id: "56048c449694964bee3d367609a7bc46c8da20f66878c09c01dcc53c3abd932e"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "034ff439276ab784098e66dca4075111008448a3b3519c10701bd2d1600ec1203a",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_23",
      publicKey: "034ff439276ab784098e66dca4075111008448a3b3519c10701bd2d1600ec1203a"
    }
  },
  signature: "3045022100f8f69f2957781ed02d64983744c8e51fae613ebe5bbb330d4f509bdcf4fc6b6602205568ad1fd840e01ec26a24ac9a0ff093e978172da55d494138d018a45eb67893",
  id: "e15dfc4e18106480083b3c6211349fd9c803e334e9ba5eb62cca19ae3f57d8e7"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "022b80e0d314928d93e48d1fe02190378384215237a5d42a86bc91580ba8c88689",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_40",
      publicKey: "022b80e0d314928d93e48d1fe02190378384215237a5d42a86bc91580ba8c88689"
    }
  },
  signature: "3044022021eeb9e1db8915a9adb99db72972cd17fc7b5b377fc532ac2c9deffcb2707edf022068b9e08f45bbebad89295f520ad40d7786fe64059d45df95551576e3acb736d1",
  id: "2bd0f888ccdeeca24a0134e3c1bf729582d284f32ee000d97f1417f1349a6594"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03c74d53dcfef0d79f249a812e95c1a58040b769867df036639f0c107d3b577b12",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_12",
      publicKey: "03c74d53dcfef0d79f249a812e95c1a58040b769867df036639f0c107d3b577b12"
    }
  },
  signature: "3044022040a9d0975f747df19792211546410d7c735aff2d26f367d1bf9233ffd1d993d702206890c66d4d0eb5de37df088c082d8fbd8da043817b48a76bd5d70f1e3f6b6529",
  id: "f75ac5ccd243e09fc9da2b3842a0654ca860d2dba5bb73866693a8a918937994"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "039f71d74e13cd8c4b7e134ad46e2c28f1bc8e6eacaa9839b5bf59eef5cea06f95",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_24",
      publicKey: "039f71d74e13cd8c4b7e134ad46e2c28f1bc8e6eacaa9839b5bf59eef5cea06f95"
    }
  },
  signature: "30440220550c0ab565ab2de649ca7a2aaf2975453a1e4ab8b0d392d69663c0c9b6b80b7b022039047d4d1bf4e9b167a95adcde0a5a8631aeca060dfd426da28a10d968fb3a64",
  id: "aa2ed932faf4832848356beaf87e5381ee56a1a84fb485ba975acb28f8fcf5df"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "030a9321ff83e384aef559e6030008c23a137e3b3c5d45028e46cccbaafce772b1",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_50",
      publicKey: "030a9321ff83e384aef559e6030008c23a137e3b3c5d45028e46cccbaafce772b1"
    }
  },
  signature: "3044022038df37ef25928d1a04516e982c99f49cbdc193603f814b48ab3802153bdd352002204c918915a3cbfa305c5f898ae4bcdd75394b57460f85c80daa0999751d466c08",
  id: "d30a726e1bb8d199d8f44700bc999c9a0a1a8be86e4be6a15764ecd424f9db1b"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02def27da9336e7fbf63131b8d7e5c9f45b296235db035f1f4242c507398f0f21d",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_2",
      publicKey: "02def27da9336e7fbf63131b8d7e5c9f45b296235db035f1f4242c507398f0f21d"
    }
  },
  signature: "3044022028dd44b9609b0b599c15a257757fd068f9014e33947c77776a6fcbe71879271b02200b46fd8eb0827da6de13f5efd63b17f29e8ba4600e4a690ec31eb08bf2d9af33",
  id: "1410b8b5f15c05528013378251bf5da30e04c8a6b7ac0f729b527664cfbdfbc4"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02be75b3862c454887da01b866972b4fb312e0b72fa7d5dda5c0e828c1f4d7f964",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_25",
      publicKey: "02be75b3862c454887da01b866972b4fb312e0b72fa7d5dda5c0e828c1f4d7f964"
    }
  },
  signature: "3044022038edfe34f7b89b4e69ea8b94e3335063b60deaee28246932147f53b2525924a402205b89f5e3d956aa49f24f81e2ba3447c19bd5c026568b3bef73a7a7d5160ad661",
  id: "58d14b74b71586e18f0499a50004ec2e0cc2e5b56aa53f4cf57084030ff90fa3"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03827628ae32074e284bcd660aec4f0504ba5d401586cb9566c887dd4da522c1d5",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_39",
      publicKey: "03827628ae32074e284bcd660aec4f0504ba5d401586cb9566c887dd4da522c1d5"
    }
  },
  signature: "3045022100bc1e477994bf4cbcdb5cbe2bd92c7d955a03adfe562f8e3bf04d2f62965e9f78022045512772d8453314361161b2bd2a39aa0a7fbb897a5a83f4c7ab54ced615b42c",
  id: "3ee53b3f1455ef0ddb52afe08854c9d87f42c7313babd3e05bb3ca4f94c495ef"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "021770413ad01c60b94e1d3ed44c00e0145fe7897e40f5f6265e220f4e65cf427f",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_13",
      publicKey: "021770413ad01c60b94e1d3ed44c00e0145fe7897e40f5f6265e220f4e65cf427f"
    }
  },
  signature: "3044022052fe00e8e9f05b1d890f6910beab0627c823eb2d5875b4b9813a33aed11edfb6022034a723b827ce0e73bfdc0f535b244ffc983f8d549ee72b4d432de90d658db72e",
  id: "4a3d204c2916c93360d7bb11390e355bc1a930e3cf503965a45253d65bfe928b"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03287bfebba4c7881a0509717e71b34b63f31e40021c321f89ae04f84be6d6ac37",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_1",
      publicKey: "03287bfebba4c7881a0509717e71b34b63f31e40021c321f89ae04f84be6d6ac37"
    }
  },
  signature: "3044022013b2798a4ab4d741850abac10d962360cd4ab6a47dfac7c1c806d6f9c3d810cc02202742414ad8a04ce679b445fcd040fb877bbfed3d2692b873dec8cb46c01c8c4c",
  id: "7d0c5a44a7517f6ad7a1253db45d58e85aa1c735a282a32f45d28efdb7869d7e"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02af50fcb5183b3f2c468fb4e75e573a6bf0a048a6fab095df6d70f9f91fd6651b",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_45",
      publicKey: "02af50fcb5183b3f2c468fb4e75e573a6bf0a048a6fab095df6d70f9f91fd6651b"
    }
  },
  signature: "304402202c372b7b9679a8fe66f952a1d47d4327968d6e98770b215ada2fed6a8d87ed5502205a797fb511cfba557255dd37e028fb40981b7b65ad2ce8fe0e559a46eb274bf8",
  id: "70bfe97ae7452dc752ab4de0e2a0e81bd18bef07392c56e7a101257683d4d932"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "022f2978d57f95c021b9d4bf082b482738ce392bcf6bc213710e7a21504cfeb5a0",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_7",
      publicKey: "022f2978d57f95c021b9d4bf082b482738ce392bcf6bc213710e7a21504cfeb5a0"
    }
  },
  signature: "3044022058851712200f7386d6b3c188444f9c8f05788667649ec17c71b9e514206eb105022061e6a4bc4cd11599792e03298f95509893d56af54d51e9f639981045e754b974",
  id: "f6f90ff09dee5be7d8f3d58d217772df7a95865bf8609d7d5b0b673e9a5bc953"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02589ffa5363e245f8068d823af8b721b6bf9742c17cdd7925bc9a1fefe66a243d",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_27",
      publicKey: "02589ffa5363e245f8068d823af8b721b6bf9742c17cdd7925bc9a1fefe66a243d"
    }
  },
  signature: "304402204878d69a166e60e0a779c31fbc48c67b70d2e4aed1d63c60beb9f070963e2894022078c46b6687f23493a4c2ed39709a183a0f7352568cc9cc2c1f0d7bf0d809a4a4",
  id: "f68809e407d20a50029fe460d411c866b79c7e09c076dada768a38d81f184aa3"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0232d790f7a6ac16f2581283a47d0dcfbb51ee100f92e46cea46a63a8a043cb294",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_38",
      publicKey: "0232d790f7a6ac16f2581283a47d0dcfbb51ee100f92e46cea46a63a8a043cb294"
    }
  },
  signature: "3045022100d5576393a1dea704cf79a5d0bc2757a3a5e66e1055103b52157fca05fc5693ec0220522832ce0e31b779decef83ac8ce764930de927df9ae1d6f6f99a3312d99c90c",
  id: "2ec6c6f33f00431ef063fbb8a79fb90eadb13a79bf46e6e1df36dd9434314df0"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03d27324bd4829f57d549bdb273bfd666d88f43d8429ba9a42a4fa1c9bd1032a24",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_14",
      publicKey: "03d27324bd4829f57d549bdb273bfd666d88f43d8429ba9a42a4fa1c9bd1032a24"
    }
  },
  signature: "3044022008a7d0bfe9c4c150566ddf701d08e84b4a5f84b07e3b1c91dde1cefa16d2a3c202200b787e898c0b2c68f4343e74f18ae7363f62b5f4ef2962386932aee09a9fa0d4",
  id: "e37b3efbf034bea4c852be7d7013978f8999eacc39549ceea775de197e14e8da"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03747096ce60f19e52e99f5d80ae1ddedf6fa88be4ff0669b33f75f3fd991cff28",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_28",
      publicKey: "03747096ce60f19e52e99f5d80ae1ddedf6fa88be4ff0669b33f75f3fd991cff28"
    }
  },
  signature: "3044022023b6fbfa5f4482a4dcc34411846696052b1592786ca87243b7d3344fc9fe9954022035402fbca22691de2497552c743f0f68c7591edd1bd7954ab7639548fcd558a3",
  id: "08268f5e6c15cf146523ca928f24aca65b162f363593d927c66144ee5df297cc"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03e59140fde881ac437ec3dc3e372bf25f7c19f0b471a5b35cc30f783e8a7b811b",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_48",
      publicKey: "03e59140fde881ac437ec3dc3e372bf25f7c19f0b471a5b35cc30f783e8a7b811b"
    }
  },
  signature: "3045022100b3cad169f29a3a95995b87e1b50b35583c1bff91d69cfa236f58ce452491c579022026775f4ef50b50ecf6d78b530b4633711394983456e6a45ec227b652c86e3014",
  id: "ad94ee2ae94813a638b93909930c7cc631c364b6c8528b2dcd6fa8f69260cc2d"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03832487ab0aa9450a4c223999bf4311b7b65c50c06baa90d19d4f65c27bfeeb93",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_4",
      publicKey: "03832487ab0aa9450a4c223999bf4311b7b65c50c06baa90d19d4f65c27bfeeb93"
    }
  },
  signature: "3044022007ac9ff2f272f3fda4947393b8688586cc8b2958ff5dc7931ac8f82c697bb76802202a66c28852bbff86ef17ac7f51e7eee52e611e825d91a9846f531ab3c3115c81",
  id: "76fb1984da9ef90fd7d588756163c97e00d3e4d6e9dfe78d9e3d3cb6d71ddd38"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0308c0d019cd9c0c59618e3b86afc584078b54a85a025c9f30a8bdc82cdc8e1252",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_29",
      publicKey: "0308c0d019cd9c0c59618e3b86afc584078b54a85a025c9f30a8bdc82cdc8e1252"
    }
  },
  signature: "304402204416e428688ad29928303fb2b00a26996cf79753fe70fb91c1f4635c644ba859022068ac5eab7d05f87c40ba36bd9dc149607c196778120c061698d7ab64aaade7ac",
  id: "0f442a91857061e87dd193b0b9f17a71719ca7e3da62841a63568713fc12b5e7"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "030d13c0a7f1433091a5730cfd7956175261bb9442d8c0c0beffeb3b5de32e5aa4",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_37",
      publicKey: "030d13c0a7f1433091a5730cfd7956175261bb9442d8c0c0beffeb3b5de32e5aa4"
    }
  },
  signature: "304402206a248caa5949024202f297c38cee18845e344c5f140be74349787097d3b0a33c02207ac84336e02592bb5e00dcd0c490d30eb856b34177ab9ac03410d82a355a7b0d",
  id: "eed30a45c350fdffc5877458f7fe29f28dc4bf81aa1a197d003c9433148b71aa"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02c39e352d0f3c4ea19842a5bca3114b4247cd56da72157963a5873ecfcd824aca",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_15",
      publicKey: "02c39e352d0f3c4ea19842a5bca3114b4247cd56da72157963a5873ecfcd824aca"
    }
  },
  signature: "3045022100c99336ce666cb4a6db3727a61c04c14d8746365f72280d9984441b7d2b568b5402201759e4f417f683743e1d4a14f8a7a215009321cdfa29834b2dbdbe54ee22c1d9",
  id: "ecfba14a58f9d79782c4f905646df28bf566e3e7d1f17b39df6fe6b52c11de59"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02532c68cd0842fb86b2202c1027eafc741bdd581517047d9d19319e6741c54883",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_30",
      publicKey: "02532c68cd0842fb86b2202c1027eafc741bdd581517047d9d19319e6741c54883"
    }
  },
  signature: "3044022070de7b4d4ce64bd605c9d008142544c2b113cc84df07ed1982e0adf3cf69f4520220211b01710a6533a270dc2814c7f968adf27eb6dbf437e7a72960b013b9651a0c",
  id: "36ce5323859a92f302f77f27bd08ee3485d720f55842ccba353a47ea96a964c2"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "022ebb110e9630377073d4f0e32897a5928a2c71f2941fb6d4b71251dbd62da98c",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_44",
      publicKey: "022ebb110e9630377073d4f0e32897a5928a2c71f2941fb6d4b71251dbd62da98c"
    }
  },
  signature: "3045022100a7c271633ecbf3c6641c7db36913b5fa0ea521f400a4848edf024648f3d7128002206a271f8a88644062b64d856407af9567c0b2937d4a3d89a3b3d07edbd3a0f177",
  id: "e120452e7c56a9327b2be7dfd3dcecae193f2e2e772903008b03cdf00146ebd1"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03691178f8610d0a295e650201b62345056c788d7f9ac7e8570b69c6c90091b564",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_8",
      publicKey: "03691178f8610d0a295e650201b62345056c788d7f9ac7e8570b69c6c90091b564"
    }
  },
  signature: "304402200394b6545015bcf2d0f291de57a4197cb6ef57b2ad5fa37f05e8a220913ba83502204d0d2f2206edba54ada5b8e5afd194ba83dd1bf15f744258409595251dbe3ff0",
  id: "7d15eee8e4e3be3d2c44acd51b87a816bdb593565d4ac358dab24ae9c8a5bae2"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03807f9abe33fb390546bb5dcab075dd1136d0b98c54420c8c463c4ed3545161b2",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_31",
      publicKey: "03807f9abe33fb390546bb5dcab075dd1136d0b98c54420c8c463c4ed3545161b2"
    }
  },
  signature: "3045022100989eb331951a13152aa03583efc765499e836c6fbafcafec4302b243ada8de5002203876fc4cf7fdeee4a095667e55a2fef84e5a7053e807b4d8e029883f0d578019",
  id: "baa686d521f95d265e7099cfd9ef14e0a9a92254dd94c16ce50c460bd013c588"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0282d4297584488b9c843face25f1816f95ccdd6660b1a2788fef259ed26a86e8e",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_36",
      publicKey: "0282d4297584488b9c843face25f1816f95ccdd6660b1a2788fef259ed26a86e8e"
    }
  },
  signature: "304402202be177dddfad323302565a866d38a3e7939e0234b16e7dc02075cf258502eba302200928a139ec1a82b4609fcc1bd6d1d027ad050e93fcd2eff94181936d2d43e39c",
  id: "9fcf7ec6fe98ed94710e212226d8b90df7e7467d66dd4c5c9d48474388be3099"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02dcb87d64ee2fdc6c2bcecdd841ad8e3b3163599214a818924fd433a8ffe7daf9",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_16",
      publicKey: "02dcb87d64ee2fdc6c2bcecdd841ad8e3b3163599214a818924fd433a8ffe7daf9"
    }
  },
  signature: "304402207b4f8c09a728acedf3b6ba0632e12d01670c683215053e49dde8598954d85a9a02202a7d7930baa17c2134b314e47dd6c334c828f78e573a2bf92fcbc1146d630541",
  id: "c35e4b1e7a2435664fc0939251c2052633ebf4b51fb22d15e71bfcab85b26de9"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "0305322487b6dfe8abe67f680bed2df70d92379a48840dd636b32a2c142baa1055",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_32",
      publicKey: "0305322487b6dfe8abe67f680bed2df70d92379a48840dd636b32a2c142baa1055"
    }
  },
  signature: "30440220127d27312345e015c681adb799c1a87d16fb0caaabd5020b39257d567816b91c022018b2388f6d2d9afb3714d84ed102b3ea61159772786033c855947613c7ce7b5b",
  id: "0d682a3a9c252a674043bee5240e456dae2685d76fbd3bdeda6ff50f0c442fff"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02275d8577a0ec2b75fc8683282d53c5db76ebc54514a80c2854e419b793ea259a",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_51",
      publicKey: "02275d8577a0ec2b75fc8683282d53c5db76ebc54514a80c2854e419b793ea259a"
    }
  },
  signature: "304402203d0ee691830e4d001553bf4e49b6d9669b3c959376f391410551c8adc679dac902203ba6e275bf6d543efd19d20428649f802d9396bb0967114a1f09c24827be1da7",
  id: "ec2373b0d609ae72fb400ffdfbffc59670ebbf1c15f59c0ac22a4030dae700e3"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "02292be0bf30b21cf57d55b20f9092a70dc1d1b71f51a91d2ccb2d2f8d8abe6983",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_26",
      publicKey: "02292be0bf30b21cf57d55b20f9092a70dc1d1b71f51a91d2ccb2d2f8d8abe6983"
    }
  },
  signature: "3045022100f2cf77b0510f589b5aaaf2b0027ffbce6ce8d4873cdc67dc8900865d156de3be02203c22e30945618683182f3d3873e6b3657e0900b062f866bab2705cd593669e79",
  id: "3cb2f0f7d05a515d4c5c873cbe96e33b1dfba1b7718e4548de7f9da54933b652"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03ba0fa7dd4760a15e46bc762ac39fc8cfb7022bdfef31d1fd73428404796c23fe",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_33",
      publicKey: "03ba0fa7dd4760a15e46bc762ac39fc8cfb7022bdfef31d1fd73428404796c23fe"
    }
  },
  signature: "304402201e328159172d543d2225c247c6b728800c52eb724f67c0e919f6b7215e6bd7f2022075fc02fe0b14a1499c5602d87ca2c99d6e789beaceed2b9702060dece872d14a",
  id: "2fd77e744399c9632cc8f106c39237f201dafda976f1040235359f99eea3b832"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "032b59ba992a9b8987b48606779d92101e4b332f6fcb47a4e61e9b49f2dbb45b2e",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_35",
      publicKey: "032b59ba992a9b8987b48606779d92101e4b332f6fcb47a4e61e9b49f2dbb45b2e"
    }
  },
  signature: "3044022063903d82e8bd15a6741a298b9a6007d0dc3626acfe2f072c3b624ccbf91ce3360220486ba4cc5591d8aa31b77dfde025b61691dbaad0feabe13e840d26e40010c5df",
  id: "5baf9e318c9e4cb0513a21eaea27e51c849f95fddc963207fb07aa2fd2b9f9d4"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "03d7dfe44e771039334f4712fb95ad355254f674c8f5d286503199157b7bf7c357",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_17",
      publicKey: "03d7dfe44e771039334f4712fb95ad355254f674c8f5d286503199157b7bf7c357"
    }
  },
  signature: "3045022100efc1bc16e0b646da48f84822543b62ef5253bfa98bed6613f2d6d4634076e61802200ef243f9dbac7633a8819ce45e2a85d0eacfdc9a33a92bd3a03e90cbd312b823",
  id: "b4a959ad75f81b7fdbb957c90a3a63a6c5589e7819e2c455733a3a2b4b034634"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "030fc33db3d3ab20d73bc6d52633a4f3cc26081ce307c89ab9fe493def7dba4b80",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_34",
      publicKey: "030fc33db3d3ab20d73bc6d52633a4f3cc26081ce307c89ab9fe493def7dba4b80"
    }
  },
  signature: "3044022012e52a479648990bfc1ed12bf901cad865708ff45962c3724ea67967be4f9d0102201901525ed8dd090af6a2637c123afb304e9fd178794addcb88d916227e66887d",
  id: "6439f2308efe31ac52ad06ef1caa45b9abf6c589118b7997da6a287325ca36e7"
}, {
  type: 2,
  amount: "0",
  fee: "0",
  recipientId: null,
  senderPublicKey: "034985f6f2167cc8c9df1204aaf6744bc97c0d7f3c07c43ee6c0978bc91b6c680e",
  timestamp: 0,
  asset: {
    delegate: {
      username: "genesis_43",
      publicKey: "034985f6f2167cc8c9df1204aaf6744bc97c0d7f3c07c43ee6c0978bc91b6c680e"
    }
  },
  signature: "3045022100a0874d1582ce210081f7ab30e7f951dfb9ce8f512d237f8a8cbd5d85569ef3b902200f0053c05de3d6e5ada4e4cf1403a836779d653573c2f374055645cc954c4c4a",
  id: "b0733072e98d3d6afe977e32f3dd118c15e79212232417743ffb551dc2a2ba55"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AJPicaX6vmokoK3x8abBMDpi8GMPc7rLiW",
  senderPublicKey: "03d7dfe44e771039334f4712fb95ad355254f674c8f5d286503199157b7bf7c357",
  timestamp: 0,
  asset: {
    votes: ["+03d7dfe44e771039334f4712fb95ad355254f674c8f5d286503199157b7bf7c357"]
  },
  signature: "30440220158ed59156e0eef2d2b94a296451dffe079be701b3d74f0443ef43bc266b334202205a2c39f57abfcd279d568608b90884b3ebe107316aa7552eca35c743b318a47c",
  id: "ea294b610e51efb3ceb4229f27bf773e87f41d21b6bb1f3bf68629ffd652c2d3"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AHXuTrYMxsdSvYJvRoBkM3kH8pS4QSq9i7",
  senderPublicKey: "030fc33db3d3ab20d73bc6d52633a4f3cc26081ce307c89ab9fe493def7dba4b80",
  timestamp: 0,
  asset: {
    votes: ["+030fc33db3d3ab20d73bc6d52633a4f3cc26081ce307c89ab9fe493def7dba4b80"]
  },
  signature: "3045022100898da9f693a458a6875344c6c4cb73069c4075904c75595ffbc665967d84b07002200f168aaf3ab1b52dfa74599394387dc4cf627a447fbc5a91000e9d251cdb20c0",
  id: "3639b5dc6d19d46d8254d941bf7ace0f3da8a7cf8a56361921b260820c7239cd"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AZFEPTWnn2Sn8wDZgCRF8ohwKkrmk2AZi1",
  senderPublicKey: "032b59ba992a9b8987b48606779d92101e4b332f6fcb47a4e61e9b49f2dbb45b2e",
  timestamp: 0,
  asset: {
    votes: ["+032b59ba992a9b8987b48606779d92101e4b332f6fcb47a4e61e9b49f2dbb45b2e"]
  },
  signature: "3044022055ed9a8b55ccb3bd0945a710269b6f243f1dbfaa28467d3218a17565eb0c962d02207d31561478f16d93a20f5454ad565dea24e8dda4ddc464cb011f4b6b360c4e81",
  id: "fe24509580cde0c2e2f49defedd3a0f7572d2f78f90b51a253b0d8cebd74c20d"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AeenH7EKK4Fo8Ebotorr9NrVfudukkXhof",
  senderPublicKey: "0305322487b6dfe8abe67f680bed2df70d92379a48840dd636b32a2c142baa1055",
  timestamp: 0,
  asset: {
    votes: ["+0305322487b6dfe8abe67f680bed2df70d92379a48840dd636b32a2c142baa1055"]
  },
  signature: "30440220092f367f833d677e8d0609ad1df65f389c2c35d1501c71c245c2982e6a832268022018e67445f525613d6cb6ac0c9683bd0f55bd40d9c929165649414f083c9041f9",
  id: "6a76553db794ebf4d5f60a7d7d71cfe29f4dbcaad9610106fbc578cdc7167cd4"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ALiMCXj25VkGEAbj5PNbNez5NagZZJxLsy",
  senderPublicKey: "03807f9abe33fb390546bb5dcab075dd1136d0b98c54420c8c463c4ed3545161b2",
  timestamp: 0,
  asset: {
    votes: ["+03807f9abe33fb390546bb5dcab075dd1136d0b98c54420c8c463c4ed3545161b2"]
  },
  signature: "304402203dc028b5013c36b03f97b111a8d7c05d0cd8e505b0b0d18747c0656c9b5cfe8102205e9ce8a78d1183b3e9880c69635d04218d94d17808bcc3f92e7af53195c23daf",
  id: "0f9d7e7708918b77afbdfffb63eef8fe87ba36e0131c88b44c1a7f81750cc025"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ARJWp8VJEieDA8h8YDiHq5LqU9vWcpWGG9",
  senderPublicKey: "0282d4297584488b9c843face25f1816f95ccdd6660b1a2788fef259ed26a86e8e",
  timestamp: 0,
  asset: {
    votes: ["+0282d4297584488b9c843face25f1816f95ccdd6660b1a2788fef259ed26a86e8e"]
  },
  signature: "3045022100a80ddd7c3adaf0e97ab938773fc78a716f3054d7e03afc1ddfcb5005badbd2810220231c0dabe2262149f994c939f9dc90d46b9bd7ca96b19aad6788cd3571e4f71a",
  id: "0ac77b2637fb25be42b3b60d1651bbbd788aeaba933a08ec4a417c7b4c54e087"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AMv3iLrvyvpi6d4wEfLqX8kzMxaRvxAcHT",
  senderPublicKey: "02532c68cd0842fb86b2202c1027eafc741bdd581517047d9d19319e6741c54883",
  timestamp: 0,
  asset: {
    votes: ["+02532c68cd0842fb86b2202c1027eafc741bdd581517047d9d19319e6741c54883"]
  },
  signature: "30440220772c9cd8b96f74fcddc429d57d466eca6fc40fc211845f59eeb78cb027e116c5022004cda291587eb118d622de21333d2a5783969794b5b0101ad8b1044c7d8058af",
  id: "4b0dda465564d53981c0e36d73caec888e3523633eaa80dfb99a9c81b2604c7d"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "Aa4M1zL3a74L51f1AvEsLmBTsKLKrkRScU",
  senderPublicKey: "0308c0d019cd9c0c59618e3b86afc584078b54a85a025c9f30a8bdc82cdc8e1252",
  timestamp: 0,
  asset: {
    votes: ["+0308c0d019cd9c0c59618e3b86afc584078b54a85a025c9f30a8bdc82cdc8e1252"]
  },
  signature: "30440220406d54714b6425ae4553ea8bec75f31fe52e9b1a9b6f6897151253ab7f637d3b022040a2df4b69840f4d9b0b67658c75efdae8d8269780d4cc50d055fa63922dbb9a",
  id: "c7db9d36d97ff0168d0d670ec695e1dc786dfb93f4081586870c8793b50e5f17"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AX1M38eZC6TB1mzz33PxZBYBGrmE2zPdFK",
  senderPublicKey: "030d13c0a7f1433091a5730cfd7956175261bb9442d8c0c0beffeb3b5de32e5aa4",
  timestamp: 0,
  asset: {
    votes: ["+030d13c0a7f1433091a5730cfd7956175261bb9442d8c0c0beffeb3b5de32e5aa4"]
  },
  signature: "3044022018b7e51118ec83c985fa4eb3d7f0cf0655753bcbde7e82bac521665fb1c0ffaf02204e2ace460b2542db8c77e41d05d5e02fa5514b746a0a1e947256925846ed19f1",
  id: "c41f4cffcdd523f1718154d5bd5f4f0bec0376076b5f8dd340337e9edb4821ae"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AJv5ZFmu6fuugsdTZNi6ukPgptbCmdW4AW",
  senderPublicKey: "03747096ce60f19e52e99f5d80ae1ddedf6fa88be4ff0669b33f75f3fd991cff28",
  timestamp: 0,
  asset: {
    votes: ["+03747096ce60f19e52e99f5d80ae1ddedf6fa88be4ff0669b33f75f3fd991cff28"]
  },
  signature: "304502210088dbe249503da43c157485bfd4f2c95babfe4d0b8bbefe44afa52529b824a79e022045239b6a374fd9aca52c27171ee66b4863c956ae4085c9760d863b1902596c1a",
  id: "b1736ec6a1ea4c6d4eb278430a8ee214c88daefe296ba98530e692f8b7a7434c"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ALJVm7EYiMtc1JJDG6BupFw3ttRR6Yewej",
  senderPublicKey: "02589ffa5363e245f8068d823af8b721b6bf9742c17cdd7925bc9a1fefe66a243d",
  timestamp: 0,
  asset: {
    votes: ["+02589ffa5363e245f8068d823af8b721b6bf9742c17cdd7925bc9a1fefe66a243d"]
  },
  signature: "3045022100fcdf750a775e728a31691a1b38908a7f990b579da510959cc2c63442f5ffde760220316ebb051d9fecb2486771dd39921fb12675b6d46b2441dd1db3c42fad0a59b0",
  id: "069271456015c2ff842771775993b8afc3404bc070572eeeb0f2fd72d58e18dc"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ALs933qA9Cm3caRDei4ZXxnzXexpXNem8U",
  senderPublicKey: "0232d790f7a6ac16f2581283a47d0dcfbb51ee100f92e46cea46a63a8a043cb294",
  timestamp: 0,
  asset: {
    votes: ["+0232d790f7a6ac16f2581283a47d0dcfbb51ee100f92e46cea46a63a8a043cb294"]
  },
  signature: "3044022034ce8f77ea9d0f5cf3a9135d7b72d0ba3b96ac6d7eaa3670e9956aef2c9a83cb0220626d1f269128f673a23f9993ce00ba78a08103e697298be29a4c8ee94f204e3a",
  id: "9a99bba8340e7ad4e05d8424a0977ebbde428d31ee066c9828bd06b42bb42a72"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AJRf2oWusRmm8QEiZuwvMg3qLbMxpd7BJ2",
  senderPublicKey: "02292be0bf30b21cf57d55b20f9092a70dc1d1b71f51a91d2ccb2d2f8d8abe6983",
  timestamp: 0,
  asset: {
    votes: ["+02292be0bf30b21cf57d55b20f9092a70dc1d1b71f51a91d2ccb2d2f8d8abe6983"]
  },
  signature: "3044022039ae1155f8b87a61c38b25cbbf30da6ecf6cfcc12b25c2e7fe576373754a41eb0220061a66a893129fbad5d48cdd19cf48b1a0d133dd2f3ecdc60ee7b87277e1f81d",
  id: "6c2c8926420ac269b50fa30127e0e791afb2131aff5821ca7aa80d38a0182048"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AJQuCRxeJpzkoGSBMXtmuRMYg9mtCb4qHf",
  senderPublicKey: "02be75b3862c454887da01b866972b4fb312e0b72fa7d5dda5c0e828c1f4d7f964",
  timestamp: 0,
  asset: {
    votes: ["+02be75b3862c454887da01b866972b4fb312e0b72fa7d5dda5c0e828c1f4d7f964"]
  },
  signature: "3045022100d0dac2b7691aa059b1048d7925a0c5d5099f6e9b0f2e321e6d4f128ab1b3272b02207e8c4f643f8f9d1c3f81f0cce6a698df2da2ab71d5b01042766bbe0f46f4a775",
  id: "9259193c5de72276ed7a99f9d507dd6ea9856411fda521074fb41a556294fdf7"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AWdRZPxQQvG1TP6hdxvQCn2t3skerq9Ky9",
  senderPublicKey: "03827628ae32074e284bcd660aec4f0504ba5d401586cb9566c887dd4da522c1d5",
  timestamp: 0,
  asset: {
    votes: ["+03827628ae32074e284bcd660aec4f0504ba5d401586cb9566c887dd4da522c1d5"]
  },
  signature: "3045022100d5496fec447367ab6b53956a8c40cd8566e050ebb3b92d2c0b2a9d09bef36c7402205e32367605372375801f7b9db39aaafb46ee763b1494f0aca144fb91f3415752",
  id: "2a41e5946ab0773ca2334bba9d3510184bdd258f1c651ff8ec95b7b64a01dc2e"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AcFWyJRk5sRKagThYhk5e1jdkx3wzhL5cW",
  senderPublicKey: "039f71d74e13cd8c4b7e134ad46e2c28f1bc8e6eacaa9839b5bf59eef5cea06f95",
  timestamp: 0,
  asset: {
    votes: ["+039f71d74e13cd8c4b7e134ad46e2c28f1bc8e6eacaa9839b5bf59eef5cea06f95"]
  },
  signature: "304502210099249695dc38826e04c8fcffd2570b98c43dec4788cc6a19737ed0872f17ec3302205301f645d803ad5df4ab1a700446e28c7cd76153607f6a2d68ae9168d46f3fe9",
  id: "e5c09b0fb2c24c57a4dcef0078953093800329ab4dc8e16a9d9f68215b5acd3d"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AZeX3qaqdU8iCebAKYoLMR2QkiuG5CffgU",
  senderPublicKey: "034ff439276ab784098e66dca4075111008448a3b3519c10701bd2d1600ec1203a",
  timestamp: 0,
  asset: {
    votes: ["+034ff439276ab784098e66dca4075111008448a3b3519c10701bd2d1600ec1203a"]
  },
  signature: "3045022100f983b03e319aaa6c6ab6381e3ef8c0c035d6e3cc2139cedf70fd4e385393e38a0220286f73577765eb3e89e362785ad8a6de572bebf41bbc1f515b0ea93e41801eb3",
  id: "00b2c0455ef6f508d65f11bb49e3cfe1e6062d5fd153cafdfdfd2ccbf9c646e5"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AdT9FrWUksf99Lhkr9JGb8f2HLSg14kTqr",
  senderPublicKey: "022b80e0d314928d93e48d1fe02190378384215237a5d42a86bc91580ba8c88689",
  timestamp: 0,
  asset: {
    votes: ["+022b80e0d314928d93e48d1fe02190378384215237a5d42a86bc91580ba8c88689"]
  },
  signature: "30440220103862ec51621ca27a0ec6b2817848e8824d2d09dbf7e6aac2f45aeea5d2dc9102205e8cce78b5cd7148aa4d406dc7b491dd7758047200e10cfe1e5fde5c56107ac5",
  id: "e25439ad11cb8db3d49ccb3b8b608c1bcb24cb29b2e5ea15101cce3e475224eb"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AGqSC7M137ctKtkAjd3J1haCEWNfayXnuJ",
  senderPublicKey: "03a46f2547d20b47003c1c376788db5a54d67264df2ae914f70bf453b6a1fa1b3a",
  timestamp: 0,
  asset: {
    votes: ["+03a46f2547d20b47003c1c376788db5a54d67264df2ae914f70bf453b6a1fa1b3a"]
  },
  signature: "304502210099241ced4a0fd1eb02f5cdcc880ae5f48eb3c7e490d4520c20124ecbf403893602204729dc6cacf3e87c97ca57c1be54d1e80791bf31ef022135e68fc06c950f6994",
  id: "1474f50815c6c7df41ab652414806d61abe15bee0d41f32d772f4e2793badce4"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "Aa3mWTMFTXeTJukUgpeihQLBYDHBzdpWZX",
  senderPublicKey: "0395ff46d07f197dd4d4cb5dbb46e164c1e7ca9896c33827f9d6f8003ea167917a",
  timestamp: 0,
  asset: {
    votes: ["+0395ff46d07f197dd4d4cb5dbb46e164c1e7ca9896c33827f9d6f8003ea167917a"]
  },
  signature: "3045022100eccf81d44992c49a5ee37c6fc2ccc4b6bee9aa44888513b3e18e79452ede3156022056b0ddf079d2918d72e8781d3af009c87e6058563591dfd6ee0117b7df5534b2",
  id: "b394e2a8b5c2d20a72ed288408b8f0d48aed922edbee6e16c1c5b0e67517214c"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AcATpmcMU1tmLDX7TzR3wXop4tfLFR21Lf",
  senderPublicKey: "03343930630f8235c2b3ae9ba013dbecd4d8bfc999d34bda33e18c8caf43772f1f",
  timestamp: 0,
  asset: {
    votes: ["+03343930630f8235c2b3ae9ba013dbecd4d8bfc999d34bda33e18c8caf43772f1f"]
  },
  signature: "3045022100bdb87894846eccc5a5473edaee1e6dca5f3469963e22f06123b6bde195aede0e02203d0c6833e87c5e60f4597ce624d4c2502a0562b4e54d943f82a4889e3cd69532",
  id: "6a399099bac6c74fa5e956512ef8b3a39f6f946d5d6996f192c2f1dd5ba172dc"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ALHDQyTm7wALtwjmKwEejZjq7f6u6w5xCv",
  senderPublicKey: "02c1151ab35e371a333e73f72e9971cfc16782e421186cfff9325d3c3b9cf91751",
  timestamp: 0,
  asset: {
    votes: ["+02c1151ab35e371a333e73f72e9971cfc16782e421186cfff9325d3c3b9cf91751"]
  },
  signature: "304402200785771ccf1a6a40b51183a190d4cb4ce76b9ffd4c2c736d7724e6c667113d020220649ecfe73017d8dda96a7914793470ee7e582693e4866df123b1032194c163b1",
  id: "f20a831a6bae0a85470e308fb66517e70db479657459f6bb39f2cd1783c565e6"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ARMEiPQE55CfHfR8WmosiFykTAPGYUyYJv",
  senderPublicKey: "0287a12b336fc781f2621aeb703ae47feca4d3ba6f30625f09ba03d225be6ee2bb",
  timestamp: 0,
  asset: {
    votes: ["+0287a12b336fc781f2621aeb703ae47feca4d3ba6f30625f09ba03d225be6ee2bb"]
  },
  signature: "3044022020b79e1f07bcb17cae9485b9f44e9f583ca235da4ddd363b905fafb884347f71022015a20481b43720ddb3b1e3ca64b1f47e59b5cc2016a62f43327ca14533384dd4",
  id: "7a1285be87dca9718bece5b84266c1bf6801a39cc111d534e660aef9e6d26929"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AcmXmomxpP8NahbbFivq32QmLuKFkTkqRg",
  senderPublicKey: "0311077c86a98b67850e7ed2c81775d094cf81c6991082ddc33fc7be5347dc765d",
  timestamp: 0,
  asset: {
    votes: ["+0311077c86a98b67850e7ed2c81775d094cf81c6991082ddc33fc7be5347dc765d"]
  },
  signature: "3045022100b1615d16763c46d42ca2aae967f04c1c07c119b5af7a378c262ba85515a8d35002202cf7df91676cd137943720e93f06c11907412a6bdc5ef2157cf536a203cf83a3",
  id: "76fb5a1de90f245b1eeb79cb11c7bea7c8b738add0fb8cd95191186a944b0229"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AHXtmB84sTZ9Zd35h9Y1vfFvPE2Xzqj8ri",
  senderPublicKey: "02ad799c6bd670746892bd4331e1aebada26a2cc3ccaf0fde1e94942b20066b05a",
  timestamp: 0,
  asset: {
    votes: ["+02ad799c6bd670746892bd4331e1aebada26a2cc3ccaf0fde1e94942b20066b05a"]
  },
  signature: "3045022100e3c7b5d6a72acde4d22e8c1c6cd864c549deba89683f4b84320407d6c380827c02202da57df0ab7cd381b776bdf85802aed371e7cea7269a84f911b1d8e9956badee",
  id: "8da75c8100e6248ab37cc92f72ed9facec3067f4f82f03db8bb8063791463fb3"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AU8hpb5QKJXBx6QhAzy3CJJR69pPfdvp5t",
  senderPublicKey: "03ba0fa7dd4760a15e46bc762ac39fc8cfb7022bdfef31d1fd73428404796c23fe",
  timestamp: 0,
  asset: {
    votes: ["+03ba0fa7dd4760a15e46bc762ac39fc8cfb7022bdfef31d1fd73428404796c23fe"]
  },
  signature: "304402205779b5d8acbfedfc105fedb6fcbd4636713ed27605faa9bd988598072640a958022042d8a8b3d7910c7c385f3707a317c5d445d56da250f8d127c71df2d9d4c5d86e",
  id: "fd26e265be88289828d0ce7ffc5faeb9849e1f4cb37a8f1dd5d6fcc436d910b7"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AQBo4exLwyapRiDoDteh1fF2ctWWdxofSf",
  senderPublicKey: "034985f6f2167cc8c9df1204aaf6744bc97c0d7f3c07c43ee6c0978bc91b6c680e",
  timestamp: 0,
  asset: {
    votes: ["+034985f6f2167cc8c9df1204aaf6744bc97c0d7f3c07c43ee6c0978bc91b6c680e"]
  },
  signature: "3045022100e18a89fe1fe0a8acaca2b6461314e784ffebbe7374f6aafdb06934e83985ccbf022027314b21a4a25b477bd7cc070b4e00ef8f3d69f3f1af028b96571dc245924c00",
  id: "41d92e128e6b8367cbf8fd111e5263d52e1abad553653f975dd60d7f7c5b637b"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AWHGbGaz5FgvyChuAfWFmKY2LsbcwqPYL9",
  senderPublicKey: "02dcb87d64ee2fdc6c2bcecdd841ad8e3b3163599214a818924fd433a8ffe7daf9",
  timestamp: 0,
  asset: {
    votes: ["+02dcb87d64ee2fdc6c2bcecdd841ad8e3b3163599214a818924fd433a8ffe7daf9"]
  },
  signature: "304402201c614c84dbae26f87973c9e2b38df883fe0c8c469080e31fe32a4c4946d50b67022075b8fb498fb1384aa6be785845da02813185ccf095597b5782618033828af4d5",
  id: "1e4a1f8aab6fbf8682c2b35e0d04e9e007ae717ce3f4a82894747e5807e3c759"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AeooqGMJPE5UWRPkKW6kgLGZu3898vcLPV",
  senderPublicKey: "02c39e352d0f3c4ea19842a5bca3114b4247cd56da72157963a5873ecfcd824aca",
  timestamp: 0,
  asset: {
    votes: ["+02c39e352d0f3c4ea19842a5bca3114b4247cd56da72157963a5873ecfcd824aca"]
  },
  signature: "3045022100b1ee6becc59d594776a40e5b3caec82390d273b703ecb0d7caece44953141449022016543cc29a28882845118afab6e51296cd216bc662260c28e5efd9597b6025b1",
  id: "2ce068bfccb3f967f4004e9a1e81614a738e55e45c80114c0af30a085f71a2e9"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AWtD9W5LCv2TH3VcdzbGQBGaJBwvbzZNDQ",
  senderPublicKey: "022ebb110e9630377073d4f0e32897a5928a2c71f2941fb6d4b71251dbd62da98c",
  timestamp: 0,
  asset: {
    votes: ["+022ebb110e9630377073d4f0e32897a5928a2c71f2941fb6d4b71251dbd62da98c"]
  },
  signature: "3044022036698a329d7f5f751f91ce02bc188a7527a377d01583b70427cfce64def945ec022079afafea10aa32394a1e42a80577de3869856656221d5f259e05fb44f01668b8",
  id: "3478d1ad3655e10fcc864f191972322c866616866bb1dbf66d7b66b31cd95de6"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AH39inbLsUBhC3k29NcvQP3zKZWnsQksvA",
  senderPublicKey: "03d27324bd4829f57d549bdb273bfd666d88f43d8429ba9a42a4fa1c9bd1032a24",
  timestamp: 0,
  asset: {
    votes: ["+03d27324bd4829f57d549bdb273bfd666d88f43d8429ba9a42a4fa1c9bd1032a24"]
  },
  signature: "3044022035fa7be80cf881eefefc12b11de04ffb2e2e92815cf05074afef54a3c5b2eccb022041f3347f59db0b3caadefcbfbc5ae275d3fe3e2a52fe1504b23628d4b79a43bf",
  id: "8adfd8e73e96188ed9fdec459d88db1fb041a2b25b3f64830476aec661ae5010"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ANRNMPjQjJGVsVbyeqwShcxKTidYJ2S1Hm",
  senderPublicKey: "021770413ad01c60b94e1d3ed44c00e0145fe7897e40f5f6265e220f4e65cf427f",
  timestamp: 0,
  asset: {
    votes: ["+021770413ad01c60b94e1d3ed44c00e0145fe7897e40f5f6265e220f4e65cf427f"]
  },
  signature: "30440220630da8a73979bd3988b7f84fe9e83a429cf3239f54c140c3dbcc407140513fc002203664ad54ed9f199f2683479b988bd97ad8fffb2c2d5dfdbdb10858aca4abfaca",
  id: "e306328ffefcd9e3809e7390a358199a62cf8ef037d57af1f5c7b54d728d427e"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ASqzCDRS5cTBwCmC5moQ34W4QZhtrj4pT1",
  senderPublicKey: "02af50fcb5183b3f2c468fb4e75e573a6bf0a048a6fab095df6d70f9f91fd6651b",
  timestamp: 0,
  asset: {
    votes: ["+02af50fcb5183b3f2c468fb4e75e573a6bf0a048a6fab095df6d70f9f91fd6651b"]
  },
  signature: "304402206f1df93f299ffedacc25aa201807df47d32c43369315cf9db280963c357be56302206a66acd553710f49bbb7b803a2bcb71128c8e617ffce66b37b7c968817349247",
  id: "dc69bc8f78502ba34655ed062987788939189709a4112760cd8807245d7461f5"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AHysG9CfbXvHtxev9eziTK8WUbnFKKLFR8",
  senderPublicKey: "03c74d53dcfef0d79f249a812e95c1a58040b769867df036639f0c107d3b577b12",
  timestamp: 0,
  asset: {
    votes: ["+03c74d53dcfef0d79f249a812e95c1a58040b769867df036639f0c107d3b577b12"]
  },
  signature: "30440220629e696a10e04d4fbc10a5ac443bf9bd40dd5d89d4b214224abe47d7ab5600340220643f361a24d9916e2c5aaec7bd7d8a6a0d3ffc5fc0b62c3ac4906eb799a862fa",
  id: "c3f49fb80c40f7779b32ba23616f5573a6ba58fc60c4629c2252933038dd89f0"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AZuvQC5WuVpPE9jwMCJcA28X5e7Ni32WY2",
  senderPublicKey: "0345ef2a1e4f64707044ba600efdc72aaad281c5a73195f930527c54d7cc891904",
  timestamp: 0,
  asset: {
    votes: ["+0345ef2a1e4f64707044ba600efdc72aaad281c5a73195f930527c54d7cc891904"]
  },
  signature: "30440220660f9604896dad2a97820b0d7524f0bce5a8b5766f150517d5061fd02bddf768022055e87c25891d4480e66e5d1a71e42cd5a4bef3ab2b2651cd72d44f30a4b32309",
  id: "8e8ac1b1a586e86867abbf25d63387bb6dfb793c691f0b06333c1581a9a568b3"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AMfyf9iRjXiKNcLQVTUE9oCESUPzmQ6iUT",
  senderPublicKey: "034776bd6080a504b0f84f8d66b16af292dc253aa5f4be8b807746a82aa383bd3c",
  timestamp: 0,
  asset: {
    votes: ["+034776bd6080a504b0f84f8d66b16af292dc253aa5f4be8b807746a82aa383bd3c"]
  },
  signature: "304402202e2ad64129f61ef1156c4c7e80ab862d4823d62dac502685f53028536ddfb41a02201a3ec777fdfe8fae9f7cd5251fac322c1b6a2a4d41b3ec456daed474986d4872",
  id: "ff73565c373f2cefebf86c72dda3a6a6205750eb03b69178cb83378620715e1d"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AFyf2qVpX2JbpKcy29XbusedCpFDeYFX8Q",
  senderPublicKey: "02f7acb179ddfddb2e220aa600921574646ac59fd3f1ae6255ada40b9a7fab75fd",
  timestamp: 0,
  asset: {
    votes: ["+02f7acb179ddfddb2e220aa600921574646ac59fd3f1ae6255ada40b9a7fab75fd"]
  },
  signature: "304402202e5c78cf21a088db10e1e1f64d98d84c8d3294fde7bc322d4af06bfe99d4c2e302207e7912a16a37b641a9f8c7c722f2b0d699917ca73e4d0f21584b717fb7f02f13",
  id: "3822273b496f2e253081cedf382e4f9937713fabb83449e1f892377cf536e68a"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AG8kwwk4TsYfA2HdwaWBVAJQBj6VhdcpMo",
  senderPublicKey: "0377f81a18d25d77b100cb17e829a72259f08334d064f6c887298917a04df8f647",
  timestamp: 0,
  asset: {
    votes: ["+0377f81a18d25d77b100cb17e829a72259f08334d064f6c887298917a04df8f647"]
  },
  signature: "3045022100a65ce45164c9bc3e018e26703370c9deb2933ee3b4e814619043cc37c4a39c4802205ae4931ac9e8dffd714c3b601fe248a49c0185c8367887205f497d951c52eb54",
  id: "430d6db0b87c25dce4ce14ac907c13bcc6efa5d95135f05aa4ba7596ea9d400c"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AW8n3yvSAqUJkyfcG5u3bgRxsNKzXYPamN",
  senderPublicKey: "036f612457adc81041662e664ca4ae64f844b412065f2b7d2f9f7d305e59c908cd",
  timestamp: 0,
  asset: {
    votes: ["+036f612457adc81041662e664ca4ae64f844b412065f2b7d2f9f7d305e59c908cd"]
  },
  signature: "3045022100f3cdd7f688ad2d7b6a5b9cc7e793cb8a6e6e07d3327bc67add64691a53fd2911022026ae1adc8f4fcfc01bcca3efc83019026755b443a504265ad1f46f69d1f5951c",
  id: "dda86ecc0332e6c4eed1c0a5af7424374089b85dd274a300fed51b86e2655587"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AdWRsk7Lbo97jxGBKzLAFwevVHbqVbW1Cj",
  senderPublicKey: "03691178f8610d0a295e650201b62345056c788d7f9ac7e8570b69c6c90091b564",
  timestamp: 0,
  asset: {
    votes: ["+03691178f8610d0a295e650201b62345056c788d7f9ac7e8570b69c6c90091b564"]
  },
  signature: "3045022100d419072a752acd55792257c96099fb14c56c29112a00535d39bca96fbd7951c902201abdf4db247dc956d79f4543c389823fbd1a9337f95d30df39603a3b52486bfb",
  id: "0998e9a055c53bf6697ee76af94c7a830c1364016d78fce889a21bc38ed70cd5"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AV6GP5qhhsZG6MHb4gShy22doUnVjEKHcN",
  senderPublicKey: "022f2978d57f95c021b9d4bf082b482738ce392bcf6bc213710e7a21504cfeb5a0",
  timestamp: 0,
  asset: {
    votes: ["+022f2978d57f95c021b9d4bf082b482738ce392bcf6bc213710e7a21504cfeb5a0"]
  },
  signature: "3045022100ba1e0ab761326d2a53cbda2a4a5135033c94d8166864d2ad3ceb963b4a0c046402207d755ecf4ada9fa2a598fd75e73a59d30cb83e01f510020b48b6bf162dc60b27",
  id: "be13743deb8486a575d1fb564d2b07d797ac77148d35793c9aca43c0d47aad61"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AaUgne8txmQB1iBboiFVLVHwLaYChZiFVA",
  senderPublicKey: "03e59140fde881ac437ec3dc3e372bf25f7c19f0b471a5b35cc30f783e8a7b811b",
  timestamp: 0,
  asset: {
    votes: ["+03e59140fde881ac437ec3dc3e372bf25f7c19f0b471a5b35cc30f783e8a7b811b"]
  },
  signature: "3044022038a491e2e13ac32025209d00aec1af31b73a8b6ee77ad9b8bb80a34f5df59dfc02200ce82c89fe9f88bd5af236ceeaa80f9954e3fb4af7bc884c447505751d49c134",
  id: "f1d3d44cc289837de9623cba8891a1ed1cde8918473a91e2daead29975afad22"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "Ac9dCo9dFgAkkBdEBsoRAN4Mm6xMsgYdZx",
  senderPublicKey: "0363550e2a3fe2153526effd4302045fa2c3027d0d9b30b19821a4870c8cb134bc",
  timestamp: 0,
  asset: {
    votes: ["+0363550e2a3fe2153526effd4302045fa2c3027d0d9b30b19821a4870c8cb134bc"]
  },
  signature: "304402202ae599ce389cd030b8ab48ef53113458b9ba8bf9c9ed09c662eba2849bf540f802202ed63f8af492dd0b67d1b451170a989418a42466a3a7ffe89c4c5a18337e8fb9",
  id: "65ab302a44ea7550891eabc3b4a8d5ecbcb80784c4666195d5d0b7e33394300d"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AdXbS4GKvV6TZVHrNzcYSQKfpenQnFGTxK",
  senderPublicKey: "026c598170201caf0357f202ff14f365a3b09322071e347873869f58d776bfc565",
  timestamp: 0,
  asset: {
    votes: ["+026c598170201caf0357f202ff14f365a3b09322071e347873869f58d776bfc565"]
  },
  signature: "304502210088a3a4e82d307c238e01ce154b57631d4429e0b591e828ec36839a783736e842022042c6e1d719781e2edca3dbfe84ad13b9e490821a47ccadfcff379decb9c873c0",
  id: "d26a7ea56f398634a81086bb15c2f0c863c71b8bd728304d324d8245a8fb6c73"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AReCSCQRssLGF4XyhTjxhQm6mBFAWTaDTz",
  senderPublicKey: "032c51f895ccdafae44e68baf283c50605d3f7dbba1c48011c6577383791f4a374",
  timestamp: 0,
  asset: {
    votes: ["+032c51f895ccdafae44e68baf283c50605d3f7dbba1c48011c6577383791f4a374"]
  },
  signature: "3045022100ae5805541f085a50076835422b2581d3b7a128a05b4f068ad7e3c14cd02799b802205f4bb40e06f90e02282ae74c0aba97923e601fd78234b9585468c4fb73f47893",
  id: "02504eae7ff4963c081219523bc48d7a07de4c29fdc1622224547f9a7c133abf"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ASEJEDLfTxy6upQDWTuYucoVwMUcmhSGhp",
  senderPublicKey: "03832487ab0aa9450a4c223999bf4311b7b65c50c06baa90d19d4f65c27bfeeb93",
  timestamp: 0,
  asset: {
    votes: ["+03832487ab0aa9450a4c223999bf4311b7b65c50c06baa90d19d4f65c27bfeeb93"]
  },
  signature: "3044022078d38cabd8f427ef381d0aa6a0b98c6a590cb18f47acc1d80b429a1c1959b0ab022022a70d4d93d650ca3121dde6065e80cd90d1e2e91cb90f0d0b2eadde609e0d75",
  id: "addb8c1baa833baa52a5b51d8a86f8524bde826b5c9f0a99e57070e6323e1dfc"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ARAibxGqLQJTo1bWMJfu5fCc88rdWWjqgv",
  senderPublicKey: "038082dad560a22ea003022015e3136b21ef1ffd9f2fd50049026cbe8e2258ca17",
  timestamp: 0,
  asset: {
    votes: ["+038082dad560a22ea003022015e3136b21ef1ffd9f2fd50049026cbe8e2258ca17"]
  },
  signature: "3044022076dd065e3fba825b77884a179d0231d7fc9e7d3a02e34bc6565fab81a84e559e02200a880c028e690a9d6f2c4c6576b1bf3e913817c834da8ec6afdbadfae78d341d",
  id: "72f31f9a829b93045ef2e860b24c33b9be6a2621c26914acd42121215c1d517e"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "APRiwbs17FdbaF8DYU9js2jChRehQc2e6P",
  senderPublicKey: "030a9321ff83e384aef559e6030008c23a137e3b3c5d45028e46cccbaafce772b1",
  timestamp: 0,
  asset: {
    votes: ["+030a9321ff83e384aef559e6030008c23a137e3b3c5d45028e46cccbaafce772b1"]
  },
  signature: "304402205261d9d8ded6364fda8b10bd477982be84990cb010f9214d52c492676814e1f40220489f441ffe2478d361a12ab96caa59da495fe62d61d0e2255aa5ec4ed789afb8",
  id: "1f17b4ba072d205761ed3f786491eaf684ed3601b69082e487e568aa74a319e8"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AbfQq8iRSf9TFQRzQWo33dHYU7HFMS17Zd",
  senderPublicKey: "02def27da9336e7fbf63131b8d7e5c9f45b296235db035f1f4242c507398f0f21d",
  timestamp: 0,
  asset: {
    votes: ["+02def27da9336e7fbf63131b8d7e5c9f45b296235db035f1f4242c507398f0f21d"]
  },
  signature: "3044022040219da41054a3eebd3122df7f09a62a4e8b4fdc287ae77221f2217b42f291ad02202b9a70c54bb546a604eafadcc086ef6b6570f57542374d87de02ad7f61fe51a4",
  id: "5fa837023159d6a3d6cf7c5b2ed6fe05ff7df19300226b2f0be5a48a06993780"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "ANBkoGqWeTSiaEVgVzSKZd3jS7UWzv9PSo",
  senderPublicKey: "03287bfebba4c7881a0509717e71b34b63f31e40021c321f89ae04f84be6d6ac37",
  timestamp: 0,
  asset: {
    votes: ["+03287bfebba4c7881a0509717e71b34b63f31e40021c321f89ae04f84be6d6ac37"]
  },
  signature: "3045022100ded426768f114f459485ba6ae293c9649b340cf2dcb15e8e887fbb5fed6f7e0b0220752297022de6e93ff64bb9e07b4efef8e946cd2872f84d9e1cb3165ff5c342cb",
  id: "0a16dc31514629a36d7237968ada6a95d6cbec027b7d26e1e0f0d7d4febe9494"
}, {
  type: 3,
  amount: "0",
  fee: "0",
  recipientId: "AJjv7WztjJNYHrLAeveG5NgHWp6699ZJwD",
  senderPublicKey: "02275d8577a0ec2b75fc8683282d53c5db76ebc54514a80c2854e419b793ea259a",
  timestamp: 0,
  asset: {
    votes: ["+02275d8577a0ec2b75fc8683282d53c5db76ebc54514a80c2854e419b793ea259a"]
  },
  signature: "304402203aa292e7aedcd62bb5a79c2521b666b8e1886b57923d98f51911b0461cfdb5db0220539657d5c1dcb78c2c86376da87cc0db428e03c53da3f4f64ebe7115998f00b6",
  id: "8816f8d8c257ea0c951deba911266394b0f2614df023f8b4ffd9da43d36efd9d"
}];
var height$2 = 1;
var id$2 = "17184958558311101492";
var blockSignature$2 = "304402202fe5de5697fa25d3d3c0cb24617ac02ddfb1c915ee9194a89f8392f948c6076402200d07c5244642fe36afa53fb2d048735f1adfa623e8fa4760487e5f72e17d253b";
var genesisBlock$2 = {
  version: version$3,
  totalAmount: totalAmount$2,
  totalFee: totalFee$2,
  reward: reward$2,
  payloadHash: payloadHash$2,
  timestamp: timestamp$2,
  numberOfTransactions: numberOfTransactions$2,
  payloadLength: payloadLength$2,
  previousBlock: previousBlock$2,
  generatorPublicKey: generatorPublicKey$2,
  transactions: transactions$4,
  height: height$2,
  id: id$2,
  blockSignature: blockSignature$2
};

var milestones$2 = [{
  height: 1,
  reward: 0,
  activeDelegates: 51,
  blocktime: 8,
  block: {
    version: 0,
    maxTransactions: 150,
    maxPayload: 2097152
  },
  epoch: "2017-03-21T13:00:00.000Z",
  fees: {
    staticFees: {
      transfer: 10000000,
      secondSignature: 500000000,
      delegateRegistration: 2500000000,
      vote: 100000000,
      multiSignature: 500000000,
      ipfs: 500000000,
      multiPayment: 10000000,
      delegateResignation: 2500000000,
      htlcLock: 10000000,
      htlcClaim: 0,
      htlcRefund: 0
    }
  },
  vendorFieldLength: 64,
  multiPaymentLimit: 256
}, {
  height: 2,
  aip11: true,
  htlcEnabled: true
}, {
  height: 75600,
  reward: 200000000
}, {
  height: 100000,
  vendorFieldLength: 255
}, {
  height: 1000000000,
  block: {
    idFullSha256: true
  }
}];

var name$2 = "testnet";
var messagePrefix$2 = "TEST message:\n";
var bip32$2 = {
  "public": 70617039,
  "private": 70615956
};
var pubKeyHash$2 = 23;
var nethash$2 = "d9acd04bde4234a81addb8482333b4ac906bed7be5a9970ce8ada428bd083192";
var wif$2 = 186;
var slip44$2 = 1;
var aip20$2 = 0;
var client$2 = {
  token: "TARK",
  symbol: "TѦ",
  explorer: "http://texplorer.ark.io"
};
var network$2 = {
  name: name$2,
  messagePrefix: messagePrefix$2,
  bip32: bip32$2,
  pubKeyHash: pubKeyHash$2,
  nethash: nethash$2,
  wif: wif$2,
  slip44: slip44$2,
  aip20: aip20$2,
  client: client$2
};

var testnet = {
  exceptions: exceptions$2,
  genesisBlock: genesisBlock$2,
  milestones: milestones$2,
  network: network$2
};

var exceptions$3 = {};

var version$4 = 0;
var totalAmount$3 = "153000000000000";
var totalFee$3 = "0";
var reward$3 = "0";
var payloadHash$3 = "a63b5a3858afbca23edefac885be74d59f1a26985548a4082f4f479e74fcc348";
var timestamp$3 = 0;
var numberOfTransactions$3 = 255;
var payloadLength$3 = 55608;
var previousBlock$3 = null;
var generatorPublicKey$3 = "03d04acca0ad922998d258438cc453ce50222b0e761ae9a499ead6a11f3a44b70b";
var transactions$5 = [{
  id: "0b127468138499138c9498d356975c2aac194f5a6963a59d025d1e46fc29241a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANZ4tvGqebEWKtXiHgzFVCsv6KEiEGNupr",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402204b965ee6b4d07758f4e792c4a51ebf922b7b3a88068d8c47233111f5273bb8a602204e23b4dfa9dbfee74f490a33eaaef08187ca5f59e182f6d7271db9fe47761a99"
}, {
  id: "dabb071285c1f29d0f1e04a60ae3ef13a4189f46f4330bf85cf5a0f7cfaa0f09",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbxSmnyBVzx3FGMjaFkE5tdXMZZvvuH8wd",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206c48cdf1a1b580e277c938c23106329e3638d1dfe0e6e8d68afa371bc892b74c02202d55a54e47a49c2afc167d926b3724ac22349cc79925152ea932361446af2506"
}, {
  id: "21f63109fd69efa99583249e1d8fe0fd794997186a0f8db3904459c2fc49a03c",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQoAJwxR9AzoaJfJWiuJ1S6mvLHfKtY5BJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022042387fd0c622e648451ec03f7ce461cbe3b5b29d8e151492be6c6cb25b71e39c02207dc9bb5a45ff4d65923e603e7e13020f4e0a738c4892c1a2d36c45432efcc100"
}, {
  id: "13ba85ffe79a702c667bcdbb0e01da654ea5c572180e2ef5a22b9abdf27bef7f",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AWoysqF1xm1LXYLQvmRDpfVNKzzaLVwPVM",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100fb4459a93cc115d9ad481c51d91c338496d583321fcbbcde86a4024ae0591f5f0220631339e3dbc001686db05dd7fb6bd7f2d043f6c83a0901d68699e0cd320a1643"
}, {
  id: "5aed9f79fe9addf50ee78b3602963177d251e8db0c815f167e31d3f970610045",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbsErLb34KfWNLV7ChC3QheZpqgxdp4Fxv",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022068925d76e16bd56c154bec93ff537bdfe50ba80dcbb3dd061873263d43080aef022069dfb2b36fa88fedc146c24f596f343c84dd7c0a10e3aa8a8722d6f32f95d2da"
}, {
  id: "be26cbdc41a2dfdbec7224b3b1ab5756532582fb4091552d9d1a7f351adf5512",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALvY3DscFkU4H5EXSRe59wpE2CHuHRSaqo",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100baa4d9be7e79b972fe59ea61336275503620ea59c619ee04022a8606280887ec02204a960f40fbb570b58c3777fc1794d19c8099a990284d3d842ce4bae5749a2e62"
}, {
  id: "8f693d75d3a9a4d637e260feb73a0f3642a9a61dc983f52972e9965693f2efb4",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALCLA26axFSNRsWHnECjAggxbkSEnU2ncB",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202b19f2266ed6c2319cb839bdc7d6eadaee9b3edebcdc8ce20afa16f556123fff02202bec70495af64a3f5064407b0fced6b5b800008af4cdad88bf6d8608c8c875c7"
}, {
  id: "1238a1a698374e5eb30a94fc2c4c5255b6a3376650590ca79d6e6fb218e5ae07",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdvTKR9AT1MSALnaiAmvRBukvomZDj86gx",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202ba92ed764c96f7cf64e921b040b7be00782eccd18eeb352bdbc251e57b1616202201ef137e8529403f5a1459c86895cfccedbbb0faba50458319f7151751539a607"
}, {
  id: "f1e5dc5b8939ba185b44ca246e1919983718b276822a8779728ebbdf76437d04",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZz7W8kf7FZPaHcTT4CHgUiiTUnKK8hxEg",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304502210096198013bdfc0de6adba0ba6034690e20c6ff9bb11b60c2b00cfa6bfdda7d909022072cb6ac164af87160cf81bb756d19a3d162261a2e3063b47bd26a407247e3ccd"
}, {
  id: "c27f4ee03afeb34d2fdb6d66848ce36744339515c8251c03d43d0e89a9615b87",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AV5DuSRJ7o37refVkVcFNkpCbYbsQQFfV1",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220634d0d5baf7cd36b4934172a0e944c53481df8fc11caf31932c1f8003b3d5b2002207aaaf8a0e260de26b1b786e654458e9665f4085935767600853a81e12e51d920"
}, {
  id: "fd4b0ae6b226aa21d03e8af8ca238377a85668868fe4f6dd4ec89680323250a0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQVGV9A42N9rBhgvMd7FDzRW4A7nzwzqMr",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201227ac283b17d6a7fa27bd3eef91f403c14565a29975c7c9626cc6580db4003202205f09749d61c4c2ec7bb517fc17aee2950d81564795357a432ca31144ef2b1aa7"
}, {
  id: "56747a89a8ef40e51a956ee432f2b4a2ec75a5fcd1df6f235e9001ddc59faf78",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANTzfMjau4R5cDdYZrbdbgkeXgYaAny7DP",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220546000ca4960ee70a3914a4425ce6cfbd22f7234354fe418bd1e32dee034d9bb02205eeb945c1a9e159a4001bb3543a835e4749e0c937da852c4775d46bef93c0150"
}, {
  id: "5884828e08e904645dae532544c347fabcdc01465ce59a2a926fa6f7ba960092",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AKA3HJAnRgJf6pRtuR8zyUXXkAygiY1gYE",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a34ce1541baa69ffc48d4d60dad3080b9cf80711597453c31468f96795c72e2f022061cf7fcf64d86735d7ab9967be6e447f82678ed720e00157ec6f0b1bde95c2ec"
}, {
  id: "6ed0ee7e2cc203ec731e0f53e8d6b4b806dfcf451041cf648274ecf51b3163e0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Af2hTgerw9M8GHuWLC7PjJQetsNKy96XG9",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100e0f5be9cd1a2a1df0755d12358668ca303d4485a51b27a445622aae8b1c135bc0220144a1c224c575e908a68cae09706083b7ce079627d6fad464d053c34630ad58e"
}, {
  id: "92884f8bcb1564bd547ce84e5ff278c4dce197b8640078f754151bd8bb84b97d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdHgri2tVkUto6CWb8pgsxyW9ouSteJULN",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022043134d6373c8c6d052aa76c9d85b587e40f66dfa7db2bd0b5d3aaf41410f45c6022025ec2034b8da1c70a208460213efa59bbcc138b58a124860d93f1128ac1d3e95"
}, {
  id: "69a7444676192bef05ee1e54f47cbb240690454effa660c6d1572242998d7bd4",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AFnRoALAnBAd2mZaZYGFT9bBr2Y7re8gCX",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022015ab48a2f57569412cfca817a20a22c98ba5581e5f39c85d06b77ef01322785e02203d95cbd6a11d1ac7978d13ba0bc61c75ee4d6f455cd57d11ec80d9f96ad88862"
}, {
  id: "a352d1b1aea8ca0f85d68c200f5c89af56657f9c4efae45d1e36275ef8b28b6a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALx5FYHiVKrUEogvVAaBHBWtKdrpY5u6Ur",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a6fd4821f57c09770f2fac5ea28d9301de531ae3d7f544335c8e603fc710ab33022007749a31e896285ab4f601800b7fe0e8e67ee3ef91b3bab0504fdafe9c8f3af5"
}, {
  id: "a56af285362aee68b103b6378f7a69fbf755a90ac3a82b0a0338e25b5fd97809",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AGYtkWXBUD3ohy7a8Yow2sqEuXZpmUWMA2",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220096ebcd8c8f202a79e8cd5d290449bf99f4bf2e79288d7c5981fef4bde5900df02200caf2765c08e80f7b328a0938118e95addeef950f32ac6ae66d03f351ba8a972"
}, {
  id: "5f6763e747c5ad03fe7688ba5b993f4588d811893a0a8b231317c67b5efc1325",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANpBNG2abwurGKggb8MhbiLYaoSqujaUfB",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220704878223a2d7e5dd8bf06ee62ad39368c3f61b4eb39cf065ee97cdc92b7185f02207bb4a2bae5c95964586fa6bc3141c44826f28b4c553e62172ee586ca32563161"
}, {
  id: "e7e958a1767ea6d2ec0fdd1ab11d38085027020e44de2322f6e0a831d7e44b2f",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbN7uVxpy8SPWQeCtF8dJWbHghUDU85NVb",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100b340f8880716565eaace21015e259349b0a4207b62d5eb0f60853f5bdc7f2cf6022028d7e45d4b06c390c014a8a154a2b63c4c16a8b79a99f9aa10fc0747712b3e59"
}, {
  id: "ce21f02fe0870d429a23e1bfc44a45d288ee3c74e405af5df4709028848b7716",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AGuv1r9zRCLhe2Tk2K5r8miaEq4gKvUhwp",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220787b6da60cb2ccdde0ac18f8fbdaea8cf41160f02a2597d71113ba2bfedbea9f02207b074a2147bd9e5032c32654360dc70927fbe9563349c3caeb86728885d0aa7e"
}, {
  id: "0a12fc0b242e630f3587ca32063d85885051b66c1afb6a2a9f4af8c084e7908a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASt5oBHKDW8AeJe2Ybc1RucMLS7mRCiuRe",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022022c6980430bdbbdcb264da73b1c5115b192c7506f2909d17c3b2b1faf545dc1d02200ac1a5d496279e0d2cb64a2ae6879446e8788bc0d752de6dfe5ecfea3e9cc252"
}, {
  id: "46214f9f017a321e0abb75331245698a74ff9f237523c9ce215ac65933cc1cfe",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "APazxbmv7XuY3HGPv78dKBrmVEcwM7WvQT",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022077b832c799ce580767d5cbecdb11931f275eea20dbebd52da9887b1d14f819fa02200d627285c77f4aef89a4af226a4ac6cea5e47555948693600aaa0fca6cce06bd"
}, {
  id: "6ed37d18b737bb47ebe3573f111d4e065cee44b0b464651afd7c6fd1a3ac64a0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Abr5cUc7zCXKAyTjz5irn4JcxEmihPG84U",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402203a5610a2f5004252ac2cecd7a96122e94df048da7e6827542710e52b0ef8e3d80220037cfb81f3ae8c30a590cf443cae92f7d8b8fb14e61cec9d9f9dcfda8e4e07f4"
}, {
  id: "2395164855b021ab8793d8fa437799f44c9c1dee5e8f1fafb194256fd455aedf",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "APCQx6efoAU2i9aALsmp7VtKcSgteuSwQR",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201f66a789fd8c0f3546e1e4c3138d0dfd08cc4f4b02ead17da6d271f691e3f8350220156c2eb3b114af58a4f479f21a7d5f3b9d42b27f68727bcd4e8d55e3eefcf556"
}, {
  id: "dabbefbd9c7abcf87ac1d02a63a93bf705851e2c18729c3eccc733e5f8a13fe0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AKcewanzTJGJ6akaUBV1zU8EVgFcZ6L6iJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200c59e7f29cedbc614272cc54db38900dfd2ed3e950c6b09b1e05351454ab18d7022058ba7ebfc4608b0c1dba7f738bfb9079ad312a2bcf582f7bbcfea2c9d9154512"
}, {
  id: "64fe150acc22603fe1ba7e2b36cb9079fc4416e98459bce373a50e12a470a2df",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASQqwPSZhBpeaMRt6FinqfDRLwQNUwdLou",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100ff5efda54a16a449738762ed1bfc3b827fc445b45d08d5f24bb7273b17679a0202205081d641f5439659141865d6326063dae072bad99653833dccd3140ea16361ba"
}, {
  id: "fd8c6ea2eda8883bde71e51afe1e6d41f38650cdc1086b4a2d22a8a754b9b0e9",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdyH7jMm8yK3QpucKYbrxWJBFfekmSkNtj",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200aac2082a2ff8f691a6e5fb78df2f5653aabaff8bc820b54df055cf08d1718d80220434d25749c41b440195a3a7a740783d77ffe651ab7dcb0bff87cb31517cf7b90"
}, {
  id: "d32ea8d330f50c1a9e9d2cea2848470567bf95cee87c7e149285af5da1004a75",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASChm8xtb6tHD75zfszZKsscQnjXk5KVo9",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220246bda16b8733b126c70ff18355dd415d67108e4e7f70ca655eed3acc5c5b7170220248fb5659db3536d85d5d81b8edf9e79bb3da9b8bdb27c30d1d7832d4b144114"
}, {
  id: "a1daec9a51eafcbfae35c716d9a2d923746e076d0ebec2807afbb2602fab34d4",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdAd7MpFF8HYVL5PkZ173wsYutFiWs3svS",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022028936c369540f3798b93534ef30af8b3598bddbf679a76b6ec6dc4dc23485852022043e69874473c54d8312981e08dddaa233d5c2bd9b1367da43605f7dfbdf16382"
}, {
  id: "bf0fb0bb99384b54e489e5d014ee7716e49827ecd186dae3f27e724b91eec56f",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AP5j7BWDUrncx8QRedbFKrxTmGxa3n4uSg",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100c199667870fa4cc632608940f31bb7b2b0cd203223859cb540fb5f0fd58277aa0220767087cb7e0c2a90516804ff7227886333c4948310f63e2bff57f139ac2abcb5"
}, {
  id: "d83bdd38633aeb434e88726c64efc21d974e1889bfa10bdf538987baa5247670",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AKFbuM4jtwfXCTqCJMXin6Mp3tTubSxPya",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402204ba60a594dda3c1a445908234096823af00ef0f2f7eb1da0aa94fd5a23989f170220342c45a45c0778242f6f1ef80f44446f8eaae6f2a3a4a085dc5976ee2bac9352"
}, {
  id: "e875a9deb0e058bae1685451373703479fc887abc0c26ddda6b132d12b10b33d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJXSVBkY4A65aDLudX8DohM6f7gyzYqLqF",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221008e9e915e490e7aa1d969752f4932b595e9a8d5883a17d87883235d44753d6b0002203ec87c347b447c8c998e62535897df5f93bc2a5428616db0b165c097358af4a4"
}, {
  id: "30a5c19cf5e938ec498f5225ce47aef762cb0b8c9f23663e6646eed890914d33",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AGPnbhUdoCoqdQWi6trWnCjJ3jxb1NuZYo",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200f4c408046d46d8b04deedfc2f21b1dbd7988c8c5d5354b4aa371ea77c5babc90220571bceba36616dc7691e29e6b12eb567e74e20182d3b8f9093737a9d69c7a8c2"
}, {
  id: "f84e2c788c3c1d5af4cb03d4743a1dd2fbd960f50ad3b35c4a20570388038c72",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMefC8bZdYZPgYjcnsEBgVqR4ZXGt3HEmJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100add36cbd0bb4f52721565c2d8df625965fce1b5f6a97943fa414a7918d51c429022072260aa30e9ceb9f59c5474db25885b8d888853b7a9af2a54d059907a3196583"
}, {
  id: "b8a9bb6ba45428ce26df1870e2c7815efcffb161a72e658ef5ef93c931516fbf",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AXysAKqGRaUaw3XrwXpj91b8CDPY8buvQA",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202f0d8cb3c4fac91a4c0da11f30a594433906638ecc37dd2877b14d5188d7e7de02205bd9aec0cbef58f02861c864be3b859acbc48863682d60e0714bc874bc5d65f7"
}, {
  id: "9e0b4329be5764791663357a363eaaaa453a51e0e6dadad385c891ebd9be4b0c",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ATF3vBJKFQPKjNyUxieoArZ8TQgso9GGMK",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100fe8b71f3cf816b0aec223486ad7a983449081d98c4a28cfb60524d1350eb28a2022030dd6b2b1b368e1709294cf05e1e6e2626e8eafa0e65cd4fdbb1a769c8b54d6e"
}, {
  id: "f6ad0edbbc1a13418950e41c5bd88732a5ba8f84e3ce79c5a2abf286d4ed8e80",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AH5S3Pc7it3gEzUUJN3bZePDzrNN6pEjcR",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100b1da007c36b376f58f4a9b2908a4ec443c83954ac2d24d513d5a848312486207022043251f92b524b5fdaf62a3b8b796df0d61151743dddc3d42e03f5b2844892567"
}, {
  id: "703926c801192eb4003dfb341269fc43cb71b7983cc789513d58e005cb37d528",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AUP95N5fHeqCuvXVXQZWZpxm8bj77FmASL",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022036cffb519c2d58623a5ce2793c49cfd2e064d6afe8b63f9bece927dd9be3337602206e445e277699f2c84e3a4b38ea9b3d63a542dcc88ffb313dae7d3b998b43296a"
}, {
  id: "fb5019c3134408882602ac82be0e33cb44de2adaa6d228818c55002e4de79308",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQko9usk8N7wGV6VF8QsxXtsqbsm5YdCDL",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100c5ccb793dab297ca6b9bf7aaf816492209cb6a4e76aa7ec669a8f4953436cb0f02205bb2764c5ce25e2fcd78bea82045a4d938ca97ad73b1cda2a0e217330677fe85"
}, {
  id: "9cc49b610292df5549f617559c717d9729d322e221cacc3edc133b7a9a445c89",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdYJP7AmU5DJfsmg1Lycc9ytGAbMz2wuf6",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100e9d0b9103e3b7039bd2af8c683d18b9fc80b3ee7a37fda7732eab83f134b9e6002204345e884a6b57e7a60dae33ca84037786982ff156ebca0b7242e46f7564dc087"
}, {
  id: "d6d58bc704c4af5aeb8099857f6924eee24ffe0a006245679bd9b3f2245150f2",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ARyFEoh7kXmPjDjZtbbGQEm3o8rz9bxmGa",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100f2eacfd6def9d0821cebe20d0a9ebc39300ef04123d6e400d43a1acc9fc395df02207eaecc1544bcdf2a7efe94e8a34658c8bf85bf5f5773cbe596d8420bdd08aaa3"
}, {
  id: "3127ba17809631c57c9eb3222f6d7d4f660e4d182485cd43bbcabec11add28b4",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJ9MXucUFg8wqPCNmd32iUZmYa5roXhYiW",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a3b5cd0f63a58b4f8ae324e2b36c2227d0473e4f9605850a8164670906432c3d022005ebcb4a9dca2084612261da00ff98cbabf26cdd34d0b2002ecb025958cb6439"
}, {
  id: "277ee179972217a706d3acef74d06d07e906ef596e916034855e4e7540dbf2e4",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdXg3Gchp8XBiPUdKCH9oqCgYSxbezXNdn",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100df31bdae55e88f356e6aa8cb25cbb4e15ff7f4193666fcfb7385d8a22963c860022063a7675978379b15e215c0ce6a0411070b750cfcc3b7c706f98a826317d0de3f"
}, {
  id: "b8b318753433e67f9a7947125cc32a14ae2cad94bd1896bd40677f4d4f4922ba",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AdFL6sbWYiJG2AFsAevb3juTiJseEH2rrr",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022004dd2f18f68f424c2c69e01156e39f222e26274b642c6cc5ee6b66062304796302201fa14951b0950a7234510da425d88a1199e9501f033ea4fa32c4c1e7bb1d3d78"
}, {
  id: "5df90252e3727693ed41b9be836ba413dfc471b1412283cccedce8555479cfd0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AFzhSbX7MMxZEeoz9mNFCvUeNX2iBxNK5o",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a0a9092f9b3514bc48eff7c6bfb43c0697eb48015fe7897ce48e8f386e051dbc02207108b1ef48e65ef7756ce002392a6f8cf59430c18ff7b3ce96ab8f23d755fe7a"
}, {
  id: "8012e6f2926c4ea1962cb329f19a1939fdf2d3896b66358605cb667cbf7f43ee",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AXYAfJVjupjT29R7g7V8ZQXGtfBAYnMFZn",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022032ab7465a76eda3028b3798a4b6c16885171e413d6bf3b072d4954cc09fd620a0220530fa60b84febc2c2a185aa911258730b35108b924b71b7754240af795a6f975"
}, {
  id: "75c5ac9d784bcb1ab2af4325de0844840ef0b08a56717ca85beb3aef7fa04c69",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJZeVY3wgx3VwbPs9MrVXWz1mK8quD6omE",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022023035af672aaca03ba8ae2a15e18a30565df3e4746e02acaf298291db0678188022048a7832778504c5764670543db3b3f5e587857623db2be66a6181b1cd8b3ddb3"
}, {
  id: "4c6995634cbfd7ec71c6017f4cd36b0f38d35d9dd2eb96069dc7cde68047e994",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AcnNYB6HhHzfwzfyquZTXmn9FCLPFsXugf",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220750b33fb08446db47bdc77cc7321ba9f108b077a7fe4f6c03db58e876ae07c050220054da7efa11bfbfc06fcbc04a0d704c6c8c3cf24fe113f4c5d25aacdd074dcd7"
}, {
  id: "c95be8065bfa8eb0bf7d475d4bde55a1f1a0b4f740c773ff05545317859ff6d7",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJ1bRNQ4onQPvs9AMWoKtheVStwcf528zh",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201487f7a73feb70885ce25cc5d5bc0f56da5dd6be347a752b64d77784d835312a022005733ce71d2fee65c95f80a62473a41dcfe4e5345dd5c141a6a72eff5da6baab"
}, {
  id: "301e915143b8edbbeeb7bb7333a38ffb1888318e57f3feefde3c2927ada0f635",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "APM5mRCaLXyifdsfmd3x2SKdnq324aW5xT",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202ed51c6076c602e665372e30e5c02591c3a901da816772d34be845e3928e467102201229bed0e277adbaa75722991c86ef2c5ca6c057ee8d22bf5de5ce2b9412a835"
}, {
  id: "86172795f61762d31fe2886372e97025199002f176479e9720102a7684ade9ca",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AUqfHo5psb2xs2vzfikJVkJgfUodjreDuk",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206f5eea1e2aab48a48269a3bfd45c976b8fb5ec2438a82607a23d058bd15277ce02203c234bc81ceb7e439418dc72fdea94802f4cde42ec0a74230910df6f9dbef130"
}, {
  id: "d1ce4a5803bfe9b5a193996a0baed2eb69fb25902e1af1972396634315afb8be",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJJqpHNtEs26scVRiwiLgnR4PSFKxjBmB9",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100b0d237f5e4d7fbc844fdf22b888732c7fdb34fef2b22eaea5f5891716ec69af202200a62c1183f994792796aead0299ea11374a1d06aa3fdc68f53793ab27f558fc8"
}, {
  id: "a12c680b5156c3d93ca836555385632d6d34198d80ea8e417db2f27b2d2298c0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASjr37NksJJunDrwkCPKyZRANPLPxFNGSJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220746df34e38555133a36968218c7cefb46e58e471139e11bdc4909cb18c4fad4d02206941a01b1a02c5bbf201fd82ba42c68bdabd34169292c3c372e36808d2194b15"
}, {
  id: "a3fd14746d1b31b010cfe35c904f80f70b538e3c2842866861b20667d2bc72a3",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AGvYueD6VRnE2D83cU8FLhUzKHmZXbS5Vo",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202af2052045ae608334dddfefa8d94fc1c8b994ddb6dd9876dde9f076c0f7227502200a5aba26a3170a5ce8ddb530e87527fc7a9f81ebe78019049ab37accd75a30e4"
}, {
  id: "01cef74d15bdf0f0889999bb2fde52bb9465ac60680ffad1c898a31129fc90b6",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AFv8tBd4biYfZrAYpgDmcvAqgdBi9y5k5c",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201c84d773fba9cbb0653ee64c07f0ee041761a3520c81988fd0afa8c58b1b57140220114fe2f3fae89e52838ee5556138706ba90c409ceac1ee091c3e3eebe9c138f9"
}, {
  id: "513cee5310e9357620b371d1a17aba3b5c360c44521c08602ad90222c43ab2b7",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbuQtgGCksfDowEg62W3R6fN8iUSKEuQ7p",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206780dc95400f62205fb1ff95b28fefdfa3e4f3bb1c2dd8b989ae0a9598710b110220788b984f9b6aa33772bdf10783e03d4ec8ac6a6330a7c29a61603f8d80f1a100"
}, {
  id: "671be425d8b568ef7e73102c7ff94306647fe83871a46d06929abb18d58fa2df",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AGkZtkcyh8i8wDoiGm2zHvfLzZrhWc5V3w",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100dd428faf70964c81d43252a59576fb09e9ae0597257c023563fd07a26b2fc17b022074e6f434aa1c58c4e025f1dbecc6c66d52dc423c2713a8ffd4631c5e538750f9"
}, {
  id: "d1976ad729fcd16e577c3ace4fc2f70dae590471b4668fcce6383a67d2ece5cc",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AYXnBEVyMzQ5ujJjyxrGnfexubnAdc3Xi5",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100da0dc3f1d42076c3e6b61294c1dc5484c9107ebb39d77a2f7929690f498a253d02202280b49313bd61e55c92e9b623fc74657e353bc7a62269888ebef38fe43a9539"
}, {
  id: "66ba43e050831bc5149b69908f494f4ac2945d42001d845d0d8c30f4ce9d58ec",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AUNdcLwCjM1n3oaqxMKmkZPWtdYPNS3FgM",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022024d56750e148d5ae545466dd42dd0eb18bfbbd0c07a2c6c4ae244b7b2286253302207ca7283b8f8b45269d99cd597b3dca72cddb897819330872f2567980da6dfe40"
}, {
  id: "8cd52e0c8077c04d8d8e8e8a50bb11aceb0b150b342cfdd32295746cceb2a56d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AYUTobeLMQdRv9mgoK3JSfBriNi9iGS1Ff",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200fa3d8377e738cdab0c4ef2d00395347261dec3af3ea06dea480dd747d3b4d3d02202c27c151b09f9088789bcb7afa5d98913c39940c3c82bf63c7ee5d859ebf6b56"
}, {
  id: "b5eff427afd510d0da18794e7e548091cccea4d1268135468ae7eead8349efd1",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbW8nwbHoDhtVsdVHVVQLy88vRHfySnEkU",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402203bc385dc273e65a5eff2284ba02ae88be7adc90555cbac01053fbb91a0d4ba71022039e5d47361eb2b6fd8d9f99c5ad8231d78b1f5c84ee9e3a023b5607a45ded74d"
}, {
  id: "2e8ef1ba0928cc8ed9a63f7ddc43df60ee9a556d4c151ac05446a3f50071d44c",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Aa11BRTWqZbeb4jXAJkGqaQ78SHmXikVrj",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100bef96c0c308b9dcfd73b3e8022438a3623e15b5ae3864956cd75ec80ae68ad03022019034b10ffa4aca438be4f5fe56639ddbb59a50994df187e5ed0bbe0856fe00a"
}, {
  id: "ee7dec36da049130d5d9310a391e24f75620ac5baa46fba1b1486fb3d242cbc5",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AWGWuovUFcxKNzNy5An8AFA2JfxfSnEGDK",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100bd6e15fc5e58445b9c5b0c67981a31206e697cc5a846fdd00cabb9cce556db5f022009b69719470f1ffe82da63a9f4f0a6219006cc769513d4709951cbbed801f5db"
}, {
  id: "bf902b9dfc89e78332e12a81b8ec7a017b6040bbe2e2d979969ce449937c5143",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZaos8cfC2u9TLw7mE3qMPJuEtuDLyxtVC",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206578ec80b033f4ac9a2ebce658fc7e096e49e4c60ae91aa191369ad3570b287302201b359dc9f191963ebad6dbf819ca0c03ac341373767153861c44c4cf68933e7d"
}, {
  id: "d7d4d20213df9e6410db4b22937a8d2926130ca4dad5c0a466edfc06a04f4519",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AaP3FYebrQXfLT64T2r52HsVEYXDU41QEk",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100aa0af940a123257c5d1e3f06d7dbd0f537e03374ec07a2e8cd00f1651618c1cc02203531bfc2578d9df5082f87f7ac86df4441157cecc6b451db69d2a09985e86f22"
}, {
  id: "7946eebeaa7b312f726d0ff3e4184f3087694c5567b9f4a218562ff0251256a7",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMnKgkf7DT6vcyjTBs3gPqPhTNJ2z4oY95",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221009cdb480847a9ba3559f5a1659ecb2d421e533759d04f5e85f7118e5749ca52e902200685560c698960d088a57b2dbaae13ba32ed8ee0c441e0ea23b45ac64e523ec8"
}, {
  id: "1d06a25bcf303c4717c1de9906e0266c27d1de70bc226e32e85dd6fd69cfd208",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Act3vdrPTWgJFoRaYdRtHCZAwfQ5cJpbF9",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402204f8ad4f936551545bbcbdc0e52de66dd7cc207f3740f4683b6b3d72a101865c30220546840e876e8332ad07272cddcad2bb1e1eabed705c7c3ffd6e4e7918770c536"
}, {
  id: "e876c22b4d6fe9b4df652e14b1446f5385e457ea8ac23993b0ad32aa8d352704",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AH9MHh829oyDk4f4sJhtEWvQTENY1P215p",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100df982190a2122f1fa4d64e450e717636d9135223e57983bb0c41624f7408f40402202704731d2e9d480475dcfe935adc9ac88c1e3eba28532b53de9d99640b0d8814"
}, {
  id: "d59f887b226f6e72876bfe8d2965eaa8938bbe64e90890500247ac81d9f2562c",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "APJYmiKAtvmPQmuibHB7qab8EhDoTHYeuj",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220728d51f31d5852429dee752acaccb34df20f47cbd65bf42820cb4d4e572b3230022071d16f6845ac42021e5f4a2e32ca6cf6d276525e177327cd6551f9b615f22f28"
}, {
  id: "91fcfb3f5f449cb13007e1f12e3939d08d41b220f0af1e32d7045f3454e82c97",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AXn57wj5CCcAts34twf1V9oTLVoNuRH1YN",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100afdcfc39831803e5e2d01d368e4d582657e1bfdf38ea2f87204fe30699dbe1d1022070c91f4b9072b56a3b8890a6fbc8dbbce5b291aa828da5c17fcc1f6c5d387c22"
}, {
  id: "8833bad42ff07fb0a8cb4faed234c9a3e1978ee22456afc3b30fbf9e688bd345",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AH8LYTdW45WTpKL4vE9TycXfoAYQvBstkn",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a247cbd500187e31317879baac09db3e9f5144b1267a20021357fd73ea7284bf022057e3df5c18fdc64fbc99d86650625a514f67955ac47ac482218dd42c4dc81305"
}, {
  id: "642b2728aad41b7a86fe457ffee0a709be9eda7caba04c2dc497b2daf6289f93",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMZ8udbpMyJPAj3qwWKGQmtTyfoorV79Yq",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100aaaf8083f7a3d13bd2f0222762b0a884fe25293d64f5ce7bf08967be13ff3c3402200acc5bd9620a8e033e0a4d11023b1ddfe6b76b0399575d80ebd7ad1d7df467db"
}, {
  id: "ef9abfaa8d8d816226eba4ac8bb90f89267b9f2bee5bf217171c478b1a7bdddd",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AeS8atkPDW2y7vXo5oPtK7ifTEYKytVi9i",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100bbef8d139a18877df8c9116dfae553c578e98bda4c74cdd95b5df3c54513b6b0022039a8aa83f664016fab85d86d45339d552aef25dbe427fb71819016fea0ad9819"
}, {
  id: "08de85ffbf62a6d50669373a68ac792008348ce88244c2c21b2afb1f720c47f1",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "APyHyZ16VgCEgLERv86jUx4qYjCZH1NWjq",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022058c38374dc01f83559503e3813cdaba2c75da25147b0e564a11df324b1a14cfb022037b1c9d030f8ffa0168b99a395129bece2cd7f21bbb86647a0d91a13cba1e523"
}, {
  id: "65300ad39080bd1f96bdf896a2537bd658594a13eebc6f218359c344441b166b",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AT447ubYEVkZjS6MesqrRkha1CKfUxVzmi",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220041760cfd3facf18334de6b79c24e6d1e7fdb0bfb4a2f827d0d255b63f68945f022004af0966e25d7acab8b9ed497a5a3420c03f8df10ccd23f09ff4dd5976d36d25"
}, {
  id: "75b22e9f34731518b93611f942174a4d3f93b34c47cc6f82c7a6c154f0f46313",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANwc3YQe3EBjuE5sNRacP7fhkngAPaBW4Y",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100df1ee811cc250d9df6a0b634164e7508edb09e98573dfd98d5df9461b28badd602205ab9815a56979e7838e8e539ba4c575357caa26ad9ade783686cafd350ed961b"
}, {
  id: "0510371b21bdacb08ce194fc533fa82aaaa31fddccbc439f2da8f93d5cbf34ac",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AWcwdfqduZx2SsdW6JDpvYqnDT7KbrQ7pZ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100c66b8540a76bd0c2d9cbd2ec0aed0ec31f7e648968c7180a26320072e9cc9c29022059f3a3f8aead4fcba621e77a59c709e89738e773a3e8650b243d0f5efb03e31c"
}, {
  id: "73ae2a136fe5085970a1ce9e1522cc07c0edffd0c65cf77984b264eb0b039d44",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AHsJaHCVtNbZHprRjZjutEFgQ4LVbxkGCJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220009d0a46ff621e3c73408a4babd9e165927401c150e11f3bcc88501f6842161c02201fd2cde89f1d7bcd524a6a0ba4c1be23e0dc45c8b3b2e7671d9dc11dc5235653"
}, {
  id: "06f4158caa35b8e3e10440f544585ecf91d73f78ad3f597570b5294826de9e05",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Adg7FvqeGvnNM9UsvcntypKQnrPEymXhQz",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206c213188492aa5958a932d675c529e77283fb73ae93c9e0e7618184daeb621de02201d38bd6792b71084ee757866eb4715f046e5bac784f1c7419850cbb385d73c3a"
}, {
  id: "f54bdd4e36662a5e8fb6d7453d84d4ea37ecb4741c9e8992d771abcd94c009df",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALQf9fK6iT4RSkwimHepPZ2p2jViAqeA5S",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402203ab6ba58ab71faa8d1557340b244b90f7f61541172e7d1dffd0de5475dd8d660022079cd78bd8ea40ec271db7ead0c2bdf65cb7334f9b00cfc523fef8bbbecb92786"
}, {
  id: "8476b2dde8f481cf18a74104c80bf47c04a473a64b2462fb89511da17e2866f0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AN2cyuquL84qWSQLhEXifdSHod3Nd2a8E3",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100af39fbe4d556c35b5832c8499daced22c6c25148a4c6491734eabf31bff455e1022058148961f68d8a5b94faf17f39947440850b3980de1b0a5d16d590fa9723e245"
}, {
  id: "4ae0f0533b136bb7bdfcef5bce6b9e380cfdb67e4b10f0eab90727cdde30ff00",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZiXrft2ugGCqhZSTEBgnqpJyL8Tv91ZsW",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022017b878789f1dc5e12970c3ec202acb7b6fd276aeed4ecc634ba66097356c468a022015109996017ac0e9cd3e58ec48c0c9ee76d1fef363110c0f0b95a1cab1cb236c"
}, {
  id: "5c918c703ddc1fc9c173dfeff61fe795f547f97f6a773b6523b8d7bf3a5496ea",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AXRk7ZtUZpswU1bKyPmKAyH4Qu7itHBRSK",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100f10f5e41f00518a078749daf819a5675f4fb365d165b4c9cc271aceea9143f3202201f3dd4c21117a34188b8684ea76b3f71fe618b9a6afe08e179fd331f0237a0ba"
}, {
  id: "c42ffd89413e3d7cd3d1497e28a4ce30898fa5ab48869c36640d78c18ff41470",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ARYSXqnkS5uC876GTEtfQF4RbJ6Bm9Ytm6",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221008c878960fa82bfc3f8494f66561735fa53ee107a85b3dc5ea71e90ff9fe2120f0220459efc529df7ff01f23d33aa521f93f18ecc7666fed4b93606de26101587d4e5"
}, {
  id: "2a1768cb587c810d09d97f08b73fe6e9e729d87833535b8e56e8ac3400cafd9e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQkf1rHnN3n5dtFsT6RVfEdrdFf1tzwjH6",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100e9d965630d1f329baaa6d1cbce306d2cc12dbf5bf825c3d68ad437f5473dce40022031e7f20890ca0028785df1b4eca780b7f70b6dc83042c10a3a2a79242cf65715"
}, {
  id: "952732a35e6fafeffb9f4a5eb64724a75a9c0a302a56607fad2f2d92463421aa",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJnvt6gphaN3Kr5gU51jEPkwdk1GFPnxAe",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402204acf6dd9d37fc95faf34c127e561a8046bc2c2f954f39837eb839e5275b333540220299f166d9ceac1190734744cfb2bf5ec4fd8c9a9f372a9edc77f58811a51c1ef"
}, {
  id: "216daae674a4ea45ce17330a777e33af2e9d2ecfa1fcf623746c01a85af601e9",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZKmryqiPiowe79yvVQ18vgRTLsfcXuZ86",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202d0a4ae36c491669ec7efd7d02bdba56e111bdc5c650829896344905ddd93cc3022064773b2a4399c2ee797a10fe152e23cae43b88db5619aa347823013e49d0cf23"
}, {
  id: "eb8278e2e2de773f041adcf4c875a011ea47d94d0809bfe691665723a12f8d33",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AWoGgnki5EqT6oKB2gB5xa2FSxnhwqtm3T",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022036fe1ac60836edfd0ed4c48514c980ed7b04cfaeb1415a5a2d186a3956d0e3dc022062ae95e9247fc245dbee957044c11cf68619631a4e8fb39880140f5f340edc05"
}, {
  id: "1434a6640960d6f35fd14f36d0bccfc1000106c67265a9f7632385003ad22861",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZRMoSEx5YBC7P2s78XzLStbRigMe96HrE",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221009357edab598aa46f07aaddf5aca8322adda62df4456d84c9f6a291f662571cdc022061d4ee2a09e39fb15e08c9b5024e5413ee9c4b76849290a8ee76efd9fcc0812c"
}, {
  id: "1f47a9994974e14e6b939b1081e8f61debcd71c6c351be1a8315216eea11d6cf",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AK3CFg4RFwRydgFb2woho9TCE21tRkzsB7",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200f0d1cbfffe14a34cb82a2ac093be93b501d82eb22ad9cc21ec2590034d83310022040a8947034b408244a8c5931409558422b762d225dddce2bf35977b30ecaadfd"
}, {
  id: "38d6938ce3c2dff20e5b041b792b0bedcf77d098f7b95f48a6417dcd367aea45",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZUANHK3Gkk9yGAXmebVkqqRokJuzDNZyE",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022029ae998756536639e8cf0d879e2be659a843ceb181b44c624b091d40b1e155f702207bda16f92084dca94e3270b977e09a17dd4f077d655ce9cba8471ca5927869a7"
}, {
  id: "fc6bd895f874e798cf41b20bc6def70dfbb7ef8cf1bcba29cd2e004bfe0c3085",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AYzLFs9vPy2wC8niqP4eEamt2eGmTjsyDk",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100b97b63cae8c1b39681724638990e30dbcc57542b2727bf65769e83f5872dbe82022038d55cf9bda1d3bcdf0c3c788eff3b3bda1f9400dfe47051142bdf6d0f81dc3c"
}, {
  id: "d96c14bc00afbd396696ac66b5601dafaf60a8afcb4206433074854718ea89ff",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AVuRN3XiwUTwTrwTAds3sVN1MVhHUhLn4X",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100bced1ebee9bb9bc7f654f95bd084582ea99c87a9ed0617ac98f1785d994c5e320220436d176b847fe6dfd139fc30dfef74346b7b1152f43791a61debb191afdeedbc"
}, {
  id: "4886ecf094a0b5134f84207e4832f114922efd93d920a612b0d87110e359d640",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AXRp7afm6g4ZYscTJkCmB9VfzrpwMyRr5h",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100ff42e460789d4ba65ee6a6211d1145235d5af1e7a38b58328fa9b7b8695bdac60220322370d83709a33f3f5a035a26ae07be26b340bc0832025ee9eaebda46870065"
}, {
  id: "76b352e8320d007d120b225b107a36e3ae290acd99e483a304649c39e0c28bfb",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AJn7wi5twb3D9UUPBjV1Y2XnCDhVot8RLp",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100d89c2028faaf114737a93afdd63f7baa6aee8335d904cce2f8314e50f3b7407502202dbaf317c685124c5402866f24b3091f2963b2c8f8955c005278bd2abaf4c020"
}, {
  id: "8967abfb69e7e25ec14ab8ddbdcfc983c20f6e40e297f8e2f05225cb1e806747",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AckcWKfPcT3xoYzFALHK7i7LYTTM4cHVq6",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100aecbf727a2766ac2322a8475702a40f1d15030ab97f1021d1da982e1122f2db70220709d8121129761b7f15234e3301dd13918b6fa881a111fee061c80b6ab10fd92"
}, {
  id: "5ddd6879bd58253855aa17e49fd6ffc8107fca1310b3566cad7322ac244ce3a7",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "APttZLM1BYZAvkxh9LVJt8XRwuJZTXnocM",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220605bca4598deeef380b50b6804e561b783cf53060172d5ff62833d817d94fb7f02202da5a575a7d1e9a2bd6d30771c6ea0abeff05159d47cd3c0de222e38330fbff6"
}, {
  id: "ccfe66336c2b54297cbf38059295f076a6d6e50df6ebf36ed650ca283ce9d30d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbHBVzCfCkwiNky9zDmZNNTHx7ZCnpgHCH",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022005646a217c3873e24e28fce61da19103e5bbf8916754fe03af204f7778753185022036f19ea6bdc73f3f7f72a007dee2fda49f9a016f9f47a3006f64d35235083bec"
}, {
  id: "07fdf03a4dc65793cca4dcc55c24e10443468097b8af85c48d781586d8fd031d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AS1dhJTJZMJHqea1zqy6h3VnLeDYEsW7Zq",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304502210096287ca81293bf79c425d5265cb438cf06967544a4a4de12b7ec7b2a71d0af4b022058ba5fb1af559e67671877ba2467d16b47c14665920fd07a51a53179a27ef841"
}, {
  id: "078d713affb765221a9e1c1277831b824d114baa2af9d6c0d128d85d7a83ff36",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMHwi4hvpkhSaet9VDoeCDYMMTh7hnV2Sa",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221009b3ba150626e719639bd4ecd82450ea5e95410f1dbd0b70a4c2e183e9909e275022051cb68725df2a26e0a63d3a3d60939d60435c7310d918e32fe7944baeadd2bca"
}, {
  id: "d01fd5d1d0ae1b12362288e5a0fbdfb4449c348d621e975ef546e8ed01e2f614",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQKURU7zdHs8tjEHWLt5ipAXaGCgYxknvM",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221009f4e8cbb5fb43bd8760d41fd338e7d75f263df3a4bc395d5cfa4f5d29e4bc2ae022065a9b07cabf68ad767f0c1159400b5a8f1ffb65be9c2c22758fc26b911a02a60"
}, {
  id: "f8afcd4d151b1086c0fe88e5ea1181aee6455052b01e41fd902d057c7e207df8",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AKR9GXZGUYqz441D359coxztJonviA2FRM",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201b8587b3030213230c38bd19163a1905cf8f0c8ffb78cad152cba66bff387e7502207614b30d9e6b3afab2fcc1d85b10437e44d09b4af90c1fe8fa5038bc1967b900"
}, {
  id: "a01ad978540a34e9b9c823e8160db6125487df5a70186ca0d28b9854618c7d13",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASn4LHMaH819aCuUwynTBZsaoUwG3uxAhC",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221008979c6c1670d77c84ee199a136c8766089ee29bd9fac227a646bfcc5d3f1a0fd022062aa994f7214530e86cc54d1e8d2c8bc33080576f94306451d1cc2bf5d5a8b6d"
}, {
  id: "2d1eacb315e29c888f6fdfc141174dd3096d68aec8b4dbacdd6685d2454bf4f3",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ATMnnCBtz4mYEi5oEqkCnDWk9RkaeNLvw8",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100bee18db9859f3eaef98cb5250751ebe583222f7d348a57295eaf66225f302f5a0220791cee851bd19bd1977d35c9fe5f0e6eb5e93093bc72257d0a42868fbc26fd7a"
}, {
  id: "d77f1ebcde44ed574f15837ca11c4a96003ce4c6269b6191d28945b8119eb027",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Abu8suR9L2tD7F4gAGHMaQqVbdvXdCFfXG",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402203fb66664a3865147d16440b6717c51f6bbe8ddb66823d2f747b40811613bf1ec0220032b2dc85a6ba32dae5f0f26b0c4bb1a5be946988b4db43e853642d7687a5aff"
}, {
  id: "4f8dca7f4891b8ef5f19a8143459162a60f169fb73e5b2eba3864b5d534916dd",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AL6sZNMWm2VGABvMX4F6eVFLUQJQyJup6i",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022014cfe7dae7e2b16c511d3d46ca0d5187b0d66eaef38fdcab4d3b4c0ed033e86c022031a57b2ce96e90ad18efd72977ef141d4f8c41d3ac65b3105acde652ec85fdb5"
}, {
  id: "8d47f1b6bf907d0a4d1519cc3bf0751af72f478c256b387de484956b892f3a58",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AFyrB1QJSh7enu2JpMUYEKUgv3xnJo5gUJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022062a1de80a33c3b11b033ffb5395201cc1a35966c5147bebf08b5e8cb25b3fce80220597ff97c23e9a0f476deb1ef544e560930d7f3b10d038598124b6dc997ea25b6"
}, {
  id: "94bb60eb4cd0c06c518deede1f34291641f690c9b9e8afb708e63229b2d11c66",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AVQ7sUZaTDi6MgKNuNxzzC1Sn3ee3KjdNg",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100cfdcf2052c8d9b7fc8cebcc95c0f478b7ae73c8f3c341c83ec8d53338d32092a02202746050a64e9f885b5a437ea15149564edfd95f5d64df42cc2ae2cc9d6c06a7d"
}, {
  id: "8d78bbdd92ec1f5a3155b35091e78efd2ea609390e89feb068ba8fb2daeba144",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALf5oWGQhq2xbTSZyCfDuvxbnDSjvYqiKE",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402205777cf25f8fc2b1e4f49956a184fea703cf8d23dc13d463b9ad00d203ac72a0902204c787fc03df8cb5d1b3a123883e75795906f7ab86c648981057ea9cbf6ad5216"
}, {
  id: "7f3ba8a2764ac7763b312502c288aa156fe03234b534505a14abc7a41bd97b1b",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ATHYUiLRifNafWrFLAVgQYo9dVxntZkow9",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100ec3a72421fb511b8862d6c57aa99e5f92ecae3663e2ecbfd18460f74a29dbdab022059b0ec463c271e1891a31dc30fdf8aea925f19c6ac94b8a6d4665acaded60e7a"
}, {
  id: "85b5107a1574d236ed625729c6e6f30fce0ed716c4713af97795b72ecdc25647",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALsRw7zX6PeYFVqHpJYeVoeBy3a5mjXCoL",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220572d28ae4915d0e4f3b7d0f067e804a3b26fca136f64e52e1c38104f63a9a30d022029e5e9b5ac89528b912aa10de9a82499a9c9804cae6490ad392aebe8202725d2"
}, {
  id: "9e8b2eafd2065f6d2b3cc9803539a91371308ec683d9ab555cd90d4f5336374d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMGsRHFRL8V6qbUz115q1Wc8pnXBScuS84",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200c85feb2cd8d220b3058310a8eb5211de3b447c7aef7362c9db6365782119b130220276a65cf28e5c13b10cba7356d5ecfa9d534d9519ede5c9bed6505f1f6b0daee"
}, {
  id: "bfa961e75f14d9c59a347785d2173375770edc0f1bf0be8e4b1f3489a4651c2e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANLm1RbdAqNcM5PMBS99ARjHrvBBfTykZM",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a1a0bb2a4673249f97ab09936ccb02741c9c26f34eddd73fbe411dc6b7763801022006aba02b3064692f4cef1da3407c422ef37b6b955b8523bf57b0f33184cc20db"
}, {
  id: "26451f460e007ce959cc3e3e523767cfacf7a38daae563154fa6d307e97057d6",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AK8aUnLmspWtccNwDEciSBf2BoxmpRPAow",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220519c73adc7d10d5dc255bbd99591c2de921876f7ffff166d4a844c8fddd9177e02202eea63bbf9895cd42e9161e68f0705cb1a948e6c92938afd66584980093837b6"
}, {
  id: "55d4f3059db31ba55349992c06edcb19fcc90d0774abeeb827232bc592a818b7",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AGJUdoyjXsfQNsDa1G2x3smFfdJEPB8kyn",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304502210081a95850fb03a338de66b910596f3a2393b71c9639b479f72da1f0bb9c8abd2e0220417847f1a9a9f580bbdb113e2c33a60c1e731f156ce1ccd68b998c1e78d35416"
}, {
  id: "cbdc3d4f2c8e6101071807b0a6e772bc70dd2fadd21773d2f7261076964ec89c",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Adm62zHj5cUuJQKsbrz467exSVVgk1bH5j",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100b483316f70425b107545431eaa5cda46401b90c058d424ebe7a3e79e669a3d700220449be77933d84d804620cdb86b03274ef48f2c6ce19551c7624a3b667467f094"
}, {
  id: "fbd8e580d89cb7ba39eb22dc563f4fba03262961481b21e2deded869753fa0a1",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AR7wLy5nU2kML3Wv9Fdot2RdHAZXn7ftTL",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a5fb7b61e2d383a183c3df3b5dcd35dc117817f773b0a559013265615b0f3ef102207bf3145303b739d03a178eed86d556f43f1e0d69ab5ebd775c0e204e7c0477f1"
}, {
  id: "4b06e580bf1fe51ba4e18edb8cc737bebd9037d3d5c47a3956dfb92dc6126c95",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AKTZGxPzLsr3jeaFbBRFJShzrBUpEZHbBA",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304502210094c4a199937fe607add75465fb4d897619afe089e2bb0540b52b0437f77649bf02205d4015b7a98403f2e630950fb617e62b0a201cf246c9f0c85dc4c2caf84f80a2"
}, {
  id: "412acb8eff340260f965bd3204818e8dd735ed3148a79320ed0c1cb51fa005c8",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AbJyaYJYZYS4uDwAy7sfNTTcjT1wUnVCew",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100bdfdeaa54eccf67f4b817884d749c616e8e8a0f31ebac750265dd29e319c3198022008befaf9d11fecaac276994f7d055efe2bd3eb062920c40726aa48f4afc912b5"
}, {
  id: "eb782b052f5293d3770f8b135230c899c65e6db03eb07df05c93658554bc9a9f",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AX9HUjeUfgZieGsbpkKmUBJLqvZiC7N2aL",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202a96e2fae0745187fede717b93002818fbb06f8626169f7b8a9a3efac3b83d7402204efdb6ac12e7da4283849cdbefefe352480b63753e028d76474d63c7ac038270"
}, {
  id: "c38959c42f58037a788a83f071848f591b8b6f5ed3093ab7464b164e2cabf32b",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AK9Adi5y1xEftjbr1WVyRCqUuptKsg7xGj",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206b832e0894327676b0ac1c045ccba3f6d382a0e117ad75e90a5612d9b81363b702204ef4cabe3c9930bc7d66d5c632d990a7e0cbd2212c48fc2eeedf33c061335b2b"
}, {
  id: "576f8af16460ade10e986db13c75d0527802d68befee6b621e44f9b78af234ae",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AVxjxrm3bnGSf4yo62f4bbLBWFwAeNhvTq",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201a863874f1973eaec68ea12b911d4c96d46e593874b3cf69228aa1ebc641c20e02206698e10529a352d8d120a1d02842eb7c937d0dad3be09f32942a47f87c6e58e2"
}, {
  id: "c2b3fb3874dd0ab647939456c4d6c4aee1b78391b03975065ad804559736972b",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AV4dc3U6awxGiRwxSEY4cgNSwNReBqeKFj",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a168e45bdd69a809def1211a68a1a75f15c8959ae7fd89d5bacc22c3f8ae2cca0220100e01bd865f361d6e0ccaac9c15841eca19556da5281b05d0a22e92aeea8367"
}, {
  id: "66a7b7b8589537edf28f5c604b8632a697f82acf4ded5257fefc58c337afffdb",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AH9qyvot8HnjcVCvz3s3vCZ3rgg7qumnj6",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100ddfbe135233d387ec88e199ed09f0e12f161a9e9081a9dfd7aedf2f67fb0d80202200ab29642f6298459e84b2e8c63efbe9e656d6888f6d38d9593397333612ed7a4"
}, {
  id: "ffa745c5bea46f6bf43495e73c4c73c9443fba611caecdb57747c107a8d99722",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASTDtbrw1i53dbMyaTr6WT4XEbTv81e7pi",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402206bcf836361511ecad0d952991d9e6c8a80079a9cca79f7f4500cc41da4c79c4302205377880c4ab4513c061a4423be280465d6dd519a4e08bd610268c758dfe6f1f3"
}, {
  id: "3be1aeecacd7c09d22aaa89fefe6048e2e547111e8ffa5da6416a2bfd381d25a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AeQwXXZEfMkp2zB9pUJzM85wn52EKX7cE8",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100e0579ee6a9cfff8fbfe9b3f379461f0501d24da51396647ffb4f999311437cfb022034064f6ed175a60d20004b811eda3823e24412414cd3eebaac2117335f05234e"
}, {
  id: "6a8ac0e6ff034f5b68a6337c3d3468779b5caf39b9794285e89e016cfd291dcb",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AWRDMAnZgZp5QEKkQ8fH8E26wtTgwoNUe2",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100d7e8754c4893018358665d0d24093ef6d46ccfbeae729a261cc2164ffcb04ca70220706ee9a83174b8d1007bbb8cfe0b33f181ce8e795ff3ee4606d2b6fb1aefe709"
}, {
  id: "a269129b91761a9b44e90545d8a4600cefa0445bd61fb57a691dc06ea152c897",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AHo8ciM7i3ro99RUcZMPV4Ytb5Esq8Xs1E",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100ded0a1779b8684fff05c59756ec6fb8628ea48c4554800a40fa346cb969ee6a3022051c763d13821ca260ec6dfb84d433e8036641cb847eb49eeb7b5989b655f3fa8"
}, {
  id: "8e2c8606b23ed885b2f0f4bda2526303bd62862e220a9763723781829324330e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AV184d6W1B171mb4KkXbmM5nhRQYf9qSYJ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100e17ecf694f779b77c4ab33bc05160b0426b14275545603ba1b5c0a93cba5b51502200b1620f080d3c9eab72418f0df74bd6f3be547c480161cc52e6c1dbff3979372"
}, {
  id: "1aeb70719ab7c6e149b7984a884f072b8934ab22ffd85f2228734b72cecc24bc",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AHpqfxf3EA6L4383nw2rq9i5GqoNJadjGD",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100da1d70c7ef34014a8992fc278d394cda2ba27f1e0fb27cd3af1691b691b9418002207c155fe5258ad0c72d0fd964d2caef6644272d1def04085be85086f3378be486"
}, {
  id: "f133840ad4f0618d7538205e9768815da99286b108de7f9e281ff4f925e7c77e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AUdygMQuvJQ1zBgiEF7EmbisnVN7AM5Aeg",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402204d1a6cd2ad8d056d84b81eba6fb62bed2e1fc7dce9ce52c95dfcc13be5dc7c23022065b2171d8b8ae7d16bac8c13140a73228f230e570503e49d5e2561c6bd12a018"
}, {
  id: "e745b9bc309d17e9322d46392598a64b9e7776ee2167121731936e18aa6c66d0",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANyRSjSGgb5Lf2bxFkdJG1DRXX5C2GLRwW",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220612a9b44211722b61e4dd299e3f1dda40175f36474ee657ab63cdb83a795475c02205040b4f18184a88ff2850d9fbffbe1a08bc9996824d0e987d537e3296a250523"
}, {
  id: "e0507bb6801b2fc35322859788aed6c36d9885f609cb3e70e9eb19058123375e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Aefdn5H3hQHMxfFAYjTXUzbn43HCi13zbF",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022017b920dfc1cd4f2866ca74fc29f94187b10f72442de97991750855cd1552fac302207504ed879538deafce89dcc1338ce04273be493e4b5b4473f4034f3fee4e18c4"
}, {
  id: "ab7f47667098ec957f98b68249ac32a22b3e40d38bffed42a7b5723308965a20",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AKRMzUmHeuHA6nRjW54FLcDFwyg6f4erVK",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30440220262fbb48893c3759c6c19bca588ac3df17819b88a14287c78b58077d8691a271022062c7c2c04b88c424a3fa5d9c3a7f34c896883017d74c64c2c2aad1c091e658b8"
}, {
  id: "34689da07514153041f8c1520e35abbde604b3e84101f54892728772a1ad5086",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ASdb1P1eikFmmZuywwSKcJ4iFa7LNBZdjC",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402205acf0bcfe01143871ed110d21fd6b2d69e1572f053a612e646473cb91a18273c02203665fe5328d7256e5630bee18816048c263d2cd4c16749ccdd88ed283c0ab596"
}, {
  id: "f6e3515d45b1d8fb060ae5216e574428e165e61893022848f36954a68a21bd3e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ARF2AUrWPyEMSY7w6SCqg6jeGgi6QxBUTT",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022025b82bdc0abd9ce35d67d8e45a08010fd63585bd9443ad3f83df8d8ad4abaa1f022002630834071f926d0e0f841f2c733dd6703513378d45b12bdf1dc603a38866e6"
}, {
  id: "5eee7b1993181729bef38d17f4578c8c726833289ef1a15a6b6914007415c77a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AK4MTqy8SoHsrATVDEkVDKTVDX12XcJzjo",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100ba3507c30d2732ceaad71f9e78bfd4f941c0cfbf2c76f1b7c763bcf88cfeb2c20220165b637442ba57c05cbd787fe99bf165e6ea2e365add2d67f423f464bdb4ed1b"
}, {
  id: "3fd3b767215cc7ec93691da2308e98cc39bdcf825dfc55a7043a0ca849c687f8",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "Ab3oWYGX4mMuXsNtE6MXJoPafHG1EbVkS2",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a984c45ea0f2529b8f70519d420c668d95674ebe137ae36eab222b6758acdd1902205e5c3380f6f6fa89dec7a54a17db33597f8209f99e98e74c2ebf198e345361bc"
}, {
  id: "16d7a16b5b79ff20dfcb71d4f48410416efc574eaa7fc18b37de7ac2954ea89a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQiMw9hxzdss2js4HN2L1jeEio8Pdpd9yB",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022027b0c0b08bb9cf60137ae89ecca629a3cfa954d8993bc4db473b74a76cd79ea5022018e9b9260e137fce64d31b55d6c307417023552be6720890dc5b3624bd5ae4a2"
}, {
  id: "5dcdeb5e8aebd4cd0e90782067bc9153f0bfc8f0756c07880d95dfbeb915ff67",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ARzo499fWcgSDomQdquwxt9DzcdkMYDQvw",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3044022062d3b9fd8bb8825f3e4d854041a6a6498a62fd7d0b9afeb8ca30a3d901aa6a3c022073d44fe06624066f7b493e50df17675bbaf95ee7f58d918a264a148d4301ab76"
}, {
  id: "c492f2910b1bb03da512e7de4fe9118572ad2fbc6bc50cc527f16578ab7cd567",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZHEyQWc4p15fKRhaK9zmV7gc3mAVa6AF1",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100902528a4b27f364e03c8b64ee440cb12a675c944a61354e785767ceef907aadf022071d2903350cf631d59731714f4023e8f0be3ee2a06bed6fbe003462867382bd8"
}, {
  id: "924906d74ec751189887708df2f871205aab83639822608aba5ac3ad8d365e8e",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AFnYJTirDrhEmadpc6pqq1sE55RreeiB8P",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304502210092f3e7a7a51f60b3bb066913db06af947de935bd3d2dca15aa4a50186dc55e6e02200f25c64eac24a656c81ced4cf2f52117c7b4c7a488d354e53ee1bdf9bdfed362"
}, {
  id: "44923020dd138a6aea4d524109e7209e33e9241e0ab46d55e8f8e6a2f7956467",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AST3nbdEcDc4uVWzDe9hpgZHJxCJxmmysY",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a6b930eb41963b041e2cd4d47c66c264c9a07a4e2c9322eddd5353221fa44c6202200870a6e4c05c03850958f5f9526040452398dde09fc93c750e8e7972f57cef7b"
}, {
  id: "4efc7395530379cd73b60350282be549a24ee820c31233e6f53697eee30cc2e2",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQRSAa6sFA9oCd1XV6ZbNg5KJwEiFaJH21",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100fb5e70beda3cbf396466465a7503a5a2caae8f6a6905ac2590e859351f6f9f1b02206a5a869c2a41bcb275bc9b446fec87490d2f151fefb958ea0d04347175f231e4"
}, {
  id: "adbc0691f2d644faeafadbfdca2674e1bd26a246296ec03c4784c771e577d39a",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ANzBg5Kw43X2CSQgaBeHHubzw1swY25Frz",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402203131c4f34b81744095aa9a651310ea6ff9cac0a88d38c4a05105c732816c2f79022020760518c29255e19cd30f677b9eef5a3c4d10c4085071b4ac69f6659e102b15"
}, {
  id: "7bdf981c420c4632b9958b0d99e955b4e4c723d99e9f9bbc4a47c935f8d498ff",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMzFowdfLaxLKNThawWEq3QyvDP2SfUv8b",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221008dcea7c514e22a165fbe1931fbf6859458417762c3ddfe02756b57c31779a803022030a651befb9afe798ab38f7b4dd9b8f473b292711ba3ebe38d5ff8b2abb08c2e"
}, {
  id: "ed0471000a0cdb90359cf94688b6c42f00f47cf4223ee670eeb268cbadb4fd7b",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AFrWisLirag5Upjiik6rnFVLptCpaE9yZj",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "30450221008c7c71fb49fe61b53fe678147be01d4c82b0d9f81189c4478512c30a58b67ef70220485c9bc14feec32aad01c79b65adc9ee20c356d5efce72a23ad7f658d20a9b4b"
}, {
  id: "22446441b1d6df010bbfe2efd34b6d3e73a3345784a6d4ecdacbf456ec02725d",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "ALtiFFMTVY7uL7hXUpAa2NiCcqUfAKkYqZ",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402201dee9b2181fb6c631e908c80b5e8f133edfb158bdbc04479ca509084c6cede5202200fa9b3a4dacd37b3bbdf270883219b236a16800353880eb708f8ea3e0bc816c4"
}, {
  id: "fcda2a2d21852bafa0dd63786dd664a03a707de946ed2caeea101b3ba4ae6099",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AMWaGRkxUMc7EnZVRGKxuihYjQxkXJTGv5",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402200955a4f98d719ba3f9cc6adeb62344631589a544548e62c6b0d5b444fc9d83cb022017323d3f7809b42b2bea159f6178b5db2bb46152ba0aa07eecba84a5dc810ffa"
}, {
  id: "0df9638f07dc701a9c6dcb415467ea128fe093bfaf1e865c57fe3d61701c2934",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AQuppbFyZJoY5D7H1vd2bdJdtG86jHhiHL",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100a472f360d3d2971f09017b8dfd0992eebc228d8332eda827c069e16481a749860220127469400183f8732bce62479335f4c71f49377ee4ee274afdd3c38c463783f3"
}, {
  id: "5554e8811b7ffddb8b046d9f7f56c1f78a28100e26dfa70a582aac4e14157ce4",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AZm1iZfCLyqAqnWMFhekpTeh6XAspxCUYY",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "3045022100f5a54138359baa3cf068b7b158b0fc12d54a98b6767bd91def4b37282197f0ab02205891142737810a31fa38343f8dca3a64eed666263a08b8fa629be7c87df9308b"
}, {
  id: "3ef7e5802a86f2d7888af2ee7ec9bc9870906adc419ffdd719049634edbc44f6",
  timestamp: 0,
  version: 1,
  type: 0,
  fee: "0",
  amount: "1000000000000",
  recipientId: "AYzQYGbwgcmrCgZM3xx5Mv7E9j2TEcAhAn",
  senderPublicKey: "032c1d9fa03f82460735b859cf1c5e1178bb03bc4373a311eacc1d570fcbf3f77f",
  expiration: 0,
  network: 23,
  signature: "304402202291196aa89541305c68dd4ef7cefba16648e71abadedb51fff6d5dd6816ea70022058aa3f59f0eae41d92f568c0d0b05a420ed04bee0cb2f96fb60bd80d1c1dfbde"
}, {
  id: "bb32309a08d91dbb8caa7aae4b19b373fbabb901b97753066a804da0db81a038",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "026039e8cb61e6050ea0ef22706eecf6f880fcf7581bafda135f0d496ed88e2bbe",
  asset: {
    signature: {
      publicKey: "0309a74e99521a5f4c3fef42a68a4b5c65b5ea89cfad444cfa11fd896009561708"
    }
  },
  signature: "3045022100b40c6bda165542258f7f54590bfbe792c652d3eb7a1367363d93cd4121020c9c0220190aa9126905e8199c7bde279a443901dda9b249bb95caf838a4512ad60c9bd6"
}, {
  id: "bba6d5be1970a5b24b94010b1fc624721d66ada2e67d5a545f1ea866902d711f",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02b717b22da94ce06e2b6f76b20df13cea230fa0c3f411dc45ea98b9a2e2674623",
  asset: {
    signature: {
      publicKey: "03b6d6299759f40d29760a9e2cbaff0fe8159b84a479d3865450e93adb9442239a"
    }
  },
  signature: "3045022100b56b35f9ea060ad1f61124a28bcb5909f516bf58727d70af9d9f1446795a28c602205142ae67d4c94b536d29f0a05308ff0e924ef30bd0c1f3bbb02fe448d1aa23a6"
}, {
  id: "47a96b97d3a1f6e2db5f2d77c61a419a2850bbde3ab51d97cb6faae6a1c3b4f3",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "032cb55adb5adc85a666b10b101e8ec595bcaa4993f3ce9119375f35ddad6c5104",
  asset: {
    signature: {
      publicKey: "020d5db68f8c33612971e0c8a00576e1516b344191b88b7edd608bce7c953a60ae"
    }
  },
  signature: "3045022100c0cec62e2a7a2d548df4b60401b747744711869fda9fdc1dd438bf639d74006302200c8523fd9bddf2597055480a965173cecb624ca8b42ebe1319b80cd937858841"
}, {
  id: "397db1ea74e602cc705c33855228cd3239bd18a63b85cdb156b43b613d2f16d8",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02e1714b7bf5c6101368bb47e68e8904b93ed5dd9e358eadee4bef89e1e25e5c76",
  asset: {
    signature: {
      publicKey: "02ae7019155478100138e458536f15dca4dfbb88e3f393185f52e9cd9edffa5bda"
    }
  },
  signature: "3045022100f359a27ffad33510cfd770e0b19867ef9c327a7cce9f40d47a0835097d65ac9102202e26caa61ac8ac11dfd150d86081724df8313d0ea5befd86376c46425dd8ad96"
}, {
  id: "513b4b98806ff1916ba9774007659a9e4881a73d5d50e6722410f4000bd881d6",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "022134c050b767b87991bdb17582302fa1ab6ae0549b0ff36fe1259cc348084e68",
  asset: {
    signature: {
      publicKey: "03708880de2a462cbc0077dabecc85ecbc27d5085cbde2f23186972b96d04abe0a"
    }
  },
  signature: "3045022100afc767fa625e0e055b239a6c040670457037195ed22b61ae95b72ed22800fdaa022071e70bf4b3d8b7b08a66caf00914e4dcf737ee9cb30aede12f69685503d78ec7"
}, {
  id: "14c63f36bc4086a5fc848f654c4def6fea8daeb4b6cdde91c07bd6e348299112",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0230dd82d88f144160176270f09ebe50f365d94837563ab7c47630759b45cb4121",
  asset: {
    signature: {
      publicKey: "032069ac5f3ea991c800da6a52efab48269d4bb1a287d449f75b4963e8b97aebe5"
    }
  },
  signature: "3045022100d15b5bafd3ac96e51e16263e05667ecbae694e726299983211892a6443b6628c02203d6e3e67f6b399e99b0819ef12c0ea9c713985ca412a38109165d2ff396014a1"
}, {
  id: "6dbd7c01b04d18fc5b503a943aaa9412f7e6d8bc60daae94ed62a71fce683787",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02e9725fb335e3e4a0163a43292428d696a71aa3e02a5d3bf1c400263360b13aa5",
  asset: {
    signature: {
      publicKey: "021aaad76814e52441b7d6c1119c731ca9e677804aaacaedaebed49ee5f1263843"
    }
  },
  signature: "3045022100a6f2eb6a9f96a8e80e0ad7e88a0cbbcaacdd31f6da8bebba1d94a615c4f3bb0802206ffd8effcdcd2f5dd67f79ff861173bd6d16baadd6a680141d40c3cffcbd1509"
}, {
  id: "5c43c5018379663b344fdad44a287b3d702b4ecb44eb1015b7431571044f4838",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "026f5418fc21d9300c51d4294c2482217db2f756b79899abfd68c57bb8cb7e6d33",
  asset: {
    signature: {
      publicKey: "036415c49027e08b725be09bee1df772a0f97967911944284553991f131cd53f52"
    }
  },
  signature: "30450221009e32b798c7da49bf26f19f6af2286e2a8454a9d698ec4f335ebd2d8c4634b2590220696032103713d41f0ee76814cd18eae9715e5362b60d1f38e7f253b1d7d239e4"
}, {
  id: "cedaddb346da1f549e538e5078f059706e06c260c07a523c19c29dca3963e9a4",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03bf66b51d43f9b373635a04dd785882d5b920463b845127dc50dc61323b6899fa",
  asset: {
    signature: {
      publicKey: "02da7401be77578c5816a686e490c2634958566ef4539a2ef8dbd99dfc3bbc1622"
    }
  },
  signature: "3045022100fdf1ecbb5500298ea3c365785e20a40b05b5ccbadc86ce9aa04536b1f1293d8e022029f6d6b8f586207959dd3f6699f22d353c3984c93a0402677884aa1288925ca5"
}, {
  id: "b149fc01e1fabcde67114ca832e7dea4a4afcc8fa8bf3ed8b08aabf2ed11b35c",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f8a36f6c492c081bbe1943764d962eee5dbae0b1b06b299751380a979c620e54",
  asset: {
    signature: {
      publicKey: "030fb10bbba9c58b60fe077151e60f5afa44ffff896b23953032f9c8a342ca74b2"
    }
  },
  signature: "304402201e7d7a8cbb170d58a6b5f6f7333d19305dd1de234aa8b7fbed087f3691cd947f02201ce02ddbacd7d7b0cb7d961157f1494227229198a3651505dfa4967fa4b96f13"
}, {
  id: "81b39fbe0126dc4f663f988c99d823c7a97438df0665a8e18fea7c3db6761688",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03167b1b5a15097c60d4510425c8cb9ba440f2d48cbedf184a66e40ef5adde1400",
  asset: {
    signature: {
      publicKey: "028902efe250d06bc09d89a3789ee754652bd2d57d28178563cf889e7ef158b0f3"
    }
  },
  signature: "3045022100be305b78d0257ae214c4c66a5862c64563e67326efb9291297a8671863f0b7f802205fa48e5abfb5eb07c259970344960c9b32c252e4817daced7667b4b810bcfca1"
}, {
  id: "85057fbb9dfb583406cce3a90d33ce438a51e854e176e96eed8969d551ee5077",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f9dd1b5a26d9c9919909ed33c3d832734c18e3bd876b24f0a74c96d35d2937d0",
  asset: {
    signature: {
      publicKey: "0201204f290bf5c8a826693dd85eadd514a752f788a3ae04027acf2fe91524fccf"
    }
  },
  signature: "3045022100a924a821e968651e8ee2c8b69a18514d89b0bbb21aed2ae406b15f7e20c6f583022018f062385e6862b04d2d37beb011debb5d8ceeae40b25426b2ce13765d3ba48d"
}, {
  id: "ff498fe16a3885ead3f447e6c1f12fa716591b053558a1f9aac50a117056a9e7",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02072106d6946a9de07cdfe30d70683ffcc7bae860fb29025fb8398b4de0e27f3e",
  asset: {
    signature: {
      publicKey: "0361416b34d1b9411119d19fe9fbabd92a3ffcb40f2f9809c5556d018a511a2090"
    }
  },
  signature: "30440220153a84425518156f836d2df4200913156019b890d05185b1f1d092135cf16942022054f886da164e14057dddf61e145a073e3151a1ffb4b53e226a98eea1e7be5564"
}, {
  id: "05ce849497a37c5d4a3d2f4a6e3f2ab0a03d668ebfca63e26c8670783c7f77fe",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "032994c3c42dbe940d4e1aa91beaff6b6746e917cbe1709a36def3389095afbd4a",
  asset: {
    signature: {
      publicKey: "028efcad1f72b84857d8459b326fcc213a1098c0b3c04a35b60bed46c20feaef5f"
    }
  },
  signature: "304502210099ada522fa643080d35ae0303f7bf9fd42f2bc0e82c345286f9ee09bc52a3b9502201a3cd043d51b79b5df6df4b334cd219e1981ada9675ba4117dbbc18e4d77f82e"
}, {
  id: "eb227e6876955d0b610566c4d76c3a3c5c0f0d439dc26a019015ccb918ac027a",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "036c1748887645da79305f6b62da3df56725355538b56a3072ddeb32ee228c016e",
  asset: {
    signature: {
      publicKey: "03a1be2ffb0c08b7747757ac30f491d680ece8c7aebf93244deff599b49e9ac091"
    }
  },
  signature: "3045022100f779704abe115d0a9450d98c740ca09c44f468f714ace07953d7efcd5ab5257902206206eac5e0ddb74a61724a8bd479480c92f5e6caa5be13d10d51389450fbc1fe"
}, {
  id: "be606de2880d97099af92d50a761dd79830505513b9e4f1f1b64e6ceb5932b44",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f30cdb63b466e72751b34ebc8f98c68dfcbfd842486128f98b81e8e54c14cf47",
  asset: {
    signature: {
      publicKey: "0337be3b271c1ad0ad619ad68b5df7974e964e7e0e48f86ae2a4e02c7533885d26"
    }
  },
  signature: "30440220513c70ebdee8dfeb6d5bdc6dd73b208b07040a09e820b5c8121a9b5ce2b387b3022055ef15a5214433bbfdcaf53eb5e4d74aed81fa04b1d92ce3b5c504ee0052f701"
}, {
  id: "3e10c5b31d8a467d6ef56d4dcdca12595987ded73ab368e134a314a69b398ee3",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "037a5ab54742b6088fec6c487c37d961de076999eeaa462a9b25fadd131a93a75f",
  asset: {
    signature: {
      publicKey: "02a0653d79f2315557161cf5a2805a2bd0453fddf5ff71671a17d5921e1e309d3c"
    }
  },
  signature: "304402204e76e4210b2439b57f6bbee6123abdd58bdc089069b6a76fa8f2793c8723f5bd02201eddfec1efccdc74fc0e3a6243dc53ce4c65896530a3003c9101bb51647b0c09"
}, {
  id: "8766e770f746dc80f9b037ed8a5ee5efefc91007c4f82e217607baa140f089c9",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f40978e58affc1bb5ae6746e1c481f6e4f2093b1fe4f627f33b2b677fc8b82a2",
  asset: {
    signature: {
      publicKey: "0389c87413dc7b58e8edcbdf31d30ac2085d1711272a29ceb84b352d1dd8cdc756"
    }
  },
  signature: "3044022069db71173d696853191c8850f04d31e363aa6eac9031fa796a4df697b5efad3e02202a40b3704f4fdc72e85e89e027e84ea66b075e76a5518556ef85c7eead101094"
}, {
  id: "226933126ae1fe568f8528ee2e703ebf31a341938255c80b4d4fae965d12bedb",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02d3e51bb756f2522139daccd06aacba36982536338210ac6f43b3dacaf22cde48",
  asset: {
    signature: {
      publicKey: "03ed895b981b6b7314f2bc6ccfa8aed69973be83bc0e8f0b37e861907110d744e3"
    }
  },
  signature: "3045022100e2939bf631d1774359e8d517af94249da7ca01f8cc5193eb4448ed187198bbd20220507204da957078aa0f70cd4b8d51b71b715b1cd7db3628014942abe0a03de90f"
}, {
  id: "3a6ef84e0713394c79cd3eb0f28e4f0bc9795fdeb120432ca231ed27c10c31a7",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "021b9a39a3281e7f4402021450f561b439fb2faa3b16a15c87b92fcfc5e4aac15c",
  asset: {
    signature: {
      publicKey: "03f0facc3075b52961d5eb6b5b8fc8a0653ee3e50749fab38cb30b8acb39423455"
    }
  },
  signature: "3044022063da2f47889a8a5e655959677db7fd05897d109da21f050ad0bd57715379c0730220670968331b43dcd853bb969b94092690f5ffdc9729ba91f371570774125b954b"
}, {
  id: "7ec6ca17804529e63147d4a35de323d4e8e4c9ed8c5fac4aaaebcc172a88203d",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "033425c8ebeda418aa1f0d2b7400923d53168e921a8be8ebd3c5584e793c17b038",
  asset: {
    signature: {
      publicKey: "02aba8f5cdabf7d5437590273c497ed4435703e4bc1af0e4018e5a670827fd6136"
    }
  },
  signature: "304402205ac5f2f7dfed6d6baa8424d7eac78d7456fafe412837955eb5a95c17a5516ebc02207d6c03c145b754caba9eccb4814da30977080cbaeb9c6d1b4e2c9683cb2fb42e"
}, {
  id: "20e49a49f39e0e581e1e5e2c9fb9435c45abaffd1c35340f27f084590e801caa",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03b2d0bc348b254f8bf98612e56af68b52ff84bf0daf35690b4d60455911092efb",
  asset: {
    signature: {
      publicKey: "0387fea8e631fd122838f8fcde005995f55865775b0ff9544f881245924873b5d9"
    }
  },
  signature: "30440220772d2631aa0628899ca37376cd875a0ec1154c026c7e533687aa3cbefa0f7efa0220577d0cd09926e60e3d57d886050e282f6bafd8abab239bc5dd168bf48f4dae58"
}, {
  id: "6a932b3ff1e7afbe114138c3939ee91b62a16ece4c8ec68722c0b7ef21fbc524",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02fb92a875f324b45c5168b0f19c4cd9f23041861640cf13abf07c8919e4754c31",
  asset: {
    signature: {
      publicKey: "0264f4c774094302809ec7674ac4b113174c2d937338a4fe175300f96882dbf385"
    }
  },
  signature: "3045022100fd3fd1eb2f934bb90c7c292de1abcfe5c73547654a815ae5fbb3f6de4fadd28502200e324eb03390b20be3668ddb53cf508393728003febb46e21f5266a48e04f2a8"
}, {
  id: "7e1c44418686926e9f19d17a0799173d8f5519cab9a12eb4b8e906e27a066f5c",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02aaafe40f4c7b541084802f4fc3d6ffe8e26061478898c3589d449e83de80dc91",
  asset: {
    signature: {
      publicKey: "03ad89ced7870b796e5c2ddfb4538f5c65d2d97ce3c9fe9df40758622027d2231c"
    }
  },
  signature: "3044022033a002c1cc78fb2d1c907de9f5ac8379f7aa10df9c49565aaf7321c35bfcfe66022028a7422a109b87e5e085a75195db9a8ad7ccdca9ba6e58f183f297fe12019d2c"
}, {
  id: "626d8158749179c7b3dfdf6baf34738e4ec2b6559a2fa3035a72db6b4f1ee52d",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "025acf14ffa2ec86954c252784cd6e3931bbffa5ab8a490afb36ea250c01b72694",
  asset: {
    signature: {
      publicKey: "02f29581ed2bbb9e124c925ee5695a327fc52579bb0ebc39db32d625ca527e8b19"
    }
  },
  signature: "3044022029ebd1d9db59978d59559b408770b738b80198ddc5020e523ec176003fb1e89a022074ff4088094885b1da1d44e4c4966b757c223908d994b879e27388e6924a96ee"
}, {
  id: "ebaa86c90419ca638c27b69bc9da17675b03d2c9b123893226845649972776f4",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "028e16ce65270805eb06a1671cc5ddcff9f8d8ffce13387118fa5ab0fe39616052",
  asset: {
    signature: {
      publicKey: "02e5c23a1023c43f52f3b4d142072f851bebca3550b4dd13b6462af62724d8ee0b"
    }
  },
  signature: "3044022034415ce70b229515b468865c5097aaa033316f3f6eeca2ca89e9483215f5c9c502205b711d05ed7636e01bb52735002838888bb2685a8a1e845b5d537de050257ce8"
}, {
  id: "e48d3f6d60e72f705d923730ebfa58b6f8dcdb0502fd647dfee17d198787bb5c",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "031639a30d2a92746da86629be2fa190cff2ba2871a4fbbee4badc9bfd466a0753",
  asset: {
    signature: {
      publicKey: "03a9baa9f916c6469d220266b6911c9feffb00734bd4a3bbc1cb09a98f0ef26ab3"
    }
  },
  signature: "3045022100869a1abca4f666df149ea61f7c22a1f1335a008414751df91c677dfceebea48b02200e2c0b403f9402a12fe5f40a5747d3372aba29e6ed994b6617640f8ed189f90e"
}, {
  id: "036eee5579480e1d4cb8fd33b4feb2d6b36ca87fc471b43ecc1e4878790b1a73",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f453fe29be65f3ae31b5c68554e777cf0ae6422fe48e598784adc293e0d1faad",
  asset: {
    signature: {
      publicKey: "039d12faf1218abc7ab623785367e4c4513678adc175940c5cc01283049d4ae0e4"
    }
  },
  signature: "3045022100bba24cc848902ca32bb4a56e8608c23c3a044b1b2cf4d0474fda127a3b2e1b1e02202153cc6058645ecefe945e05677d29bb4dba0a44a72610f2e92a106eabaa4074"
}, {
  id: "135d0cc36c89ea8155d27dad38112c51a84bfca6ba4e66d849588d1388e1973c",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02a146b249c588574ff70a2f40ccfd27b6cc324209f8858a8f7b5063930d869756",
  asset: {
    signature: {
      publicKey: "0387dc56838f7a454ffcd73aa44184d8b8280a76319750758c59ef1d830296670a"
    }
  },
  signature: "3044022000f885d9fedb98502b5b234da63c7960927677cef71b4a3ec9010de199064b4702203c0f1e103cb2a7b52a4a791d14ab1fcd9a278e841ab9fbe6c1d8a4307eee60c5"
}, {
  id: "aaf4767bd15bb77c4efbd09da9d3f63f4a0389488bcaa5debba23e2d29f365f8",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02dec8953912902e1ea7ca3c6d994b99dc0156165810656d1863e0a239a7ff2f72",
  asset: {
    signature: {
      publicKey: "02efb7cc98087861c1139edbf0cefd075750a110dc7e076de77812bbde9db70615"
    }
  },
  signature: "3044022051bafbe54508fd5ee33d0603c510e753939597807980705a031f6cd7f2bdd8e702204b4d83622763db7837234aac353bf902d92a13b959225c9ba297698cf50d303f"
}, {
  id: "96e8897859172603446d5643791b2b9dd82ae6520ca3faef1bac25a52717d4a2",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f4a9e1c98fd828d93e96ecc133187174c5d91566d09fa2701fbed36ac70fe445",
  asset: {
    signature: {
      publicKey: "02ea3a03e92f9c23e9c9cf5fd35c5a56233a1295f10b60c31d26bd36059e568933"
    }
  },
  signature: "3045022100cd70b956d91c4f50b1d30434a238c44d334a91f503d3f52ef70b997245019fec0220503427277d6396b1ab4f41ffdcfd5551f1c010af0c572aaa0dd5a0c95d445532"
}, {
  id: "c59fb20f57fa13ba4524b4c6ff55f15ede3042cc99c03b7ed5f7eb51ad4f09e2",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0363a68f9cf32ad3d323f4f09cbe883bbb45c8e419d0e54e519a665b135d9be7d9",
  asset: {
    signature: {
      publicKey: "0210f73be877105655825d824c7b89d65e07c09ab4cd8ab5870a5b3050a5a46516"
    }
  },
  signature: "30450221009a56f67b2210fec148fe11bd0ca24adb4e4e5bcc82c8d8ea77c6136921d0e46402204902536f1afba01e25cdbdf929873fece0abc1f749410b6bbce03c201e1429e9"
}, {
  id: "b98137e28210c509e00827ec41e51487ef535a5af21bf71c664998de29ec16ef",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "020c8b7e3c16f5a1819e047f4be56f7a95b23b1eeac9078f3917016c6c1c22ecf0",
  asset: {
    signature: {
      publicKey: "03f0342418258c74ac75ab2329939f9b897447a79ffd483825d977ac4fba5acf6f"
    }
  },
  signature: "3045022100dac7ef8efc848cafbe323c0af0234075d6d6946fa0748382a6e805965dbd2eac022026703ae9bd88e4af3c5c7ffebe6044582ee853b880312bbf5b8931ad9d7ac62c"
}, {
  id: "c1b9d9e12df90c6020e815267c2fa6c9e5c3b2a074287fc3cc327766fb122f38",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03a7d7272168c98037e9c3c01f5b4b6a53eb88efb06057bf82785bddae0ade39c5",
  asset: {
    signature: {
      publicKey: "02cec2ff64ac4173530ab9d171ca8965c8275ac3bbbf00ac9284d716d407098fbe"
    }
  },
  signature: "3044022031e4303e55ff6d0e4e69cdfabf8ac0c284d4a26c0faa1540b789c1fe83ebe9cb022032faa92f33bd2ade0e8ec8a28781e5ac0203a832fc9a707bae06bca61a75856f"
}, {
  id: "3ef0769da2b23e434c33364e4f43384caf3a3c08702f2288b0be46178632a346",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0294f19b7b5e338dc911810257a89277a487f35b0dc146fa78c2015d2489ba0db3",
  asset: {
    signature: {
      publicKey: "030f9f3e6fc33a40103e14d9981023b21b8f49ad95ad39adcb17449378cbe8ea24"
    }
  },
  signature: "3045022100d107c6b7419eb3d16a4e3d6560132ba9376f2229850f3d8a9e1b77ee773506f6022045f37269fc1fb3a1cd6fbd467823ae4800bd972fb903f26b81622960990ca636"
}, {
  id: "e47ed307eb694798005c0f378002e83d201d6f184467de1127479f43478d4bb7",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02c48118c725c269653cd46b2836ab1c2d8a89ad7ba214b0b309eec5174b7f590b",
  asset: {
    signature: {
      publicKey: "035317f6d364bb4b61a89deaebef594f5285db398d0cf18060118b7b9625a34dad"
    }
  },
  signature: "3045022100bc3414e2a2a411d40409b859e06b3b8a35682648c144eb1906ccd70ed975975102201fb43226e7e9b5fc1960ba4ae2157f0bf1e9a848abdded6e29ddcd5830a5b02e"
}, {
  id: "425cb8ef0b1b41aa6bba2bf53621a4c874ed00ad08ff026e4e61ccedd249d0e1",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "033401817bf6e94157e8c6ee248e39037d28e0b1fdb1cfab726b06220323e0f29e",
  asset: {
    signature: {
      publicKey: "03037ed3a91937416c47e4bb8366437758c5343c0dfa672a8dcab592754792fe13"
    }
  },
  signature: "30440220665c621aea56ba29768176b98f409871a1ac8a01c41e667a57552c814f96c297022028a05983e61c0f7d93bff39e226f7e52c3d663e185fe27d9c36276a131eed19c"
}, {
  id: "f82d1388cd7db45d81d6b7573e5952462f8a41423d28fce2231dd25ed5d4eef5",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02b4e3968198a714e9a2c81adfde1211a24fea24c578a7033312429a693a4e93c7",
  asset: {
    signature: {
      publicKey: "02394123b84cdb74f3e783523e372db0506245c9c73ced73ee93e53b06d5c2de80"
    }
  },
  signature: "3045022100b54fe851008f68eafa42b5df55a10a9836ad065b927b2969a06578f4dc5c65dd0220588745a145c3bbf0b2dc001127c8862c435c7a1e900721f8da49d1897bef863b"
}, {
  id: "7869c6f8f682e33db9b32fa0e40370ca7d36914a1a282903878268ac9dec42f8",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02f238b9dd9e43216c1e63390eb50adf9519d00c00541c29cce98f12ed3bab55fa",
  asset: {
    signature: {
      publicKey: "021093f23f1f74ba7c51f65f544c310be34014e348790accb81fc88f4f96a66056"
    }
  },
  signature: "3045022100db22661430e150600a394a15366afab10d9ba47bef72e9a88af052aed0a0d952022067e66f731b35389f973525316729e37447bf8dbc2ed77bde30775c649c69ebb4"
}, {
  id: "fe60ec2f0a4a8f33a168a8737962e17f421e98ad22425d4600d261b5867aa148",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03fcec41228c64a39dffbbe8466b23bc1db40efb1970e32de0360cc828ba953883",
  asset: {
    signature: {
      publicKey: "023f13954139fb1783ea9290606f2bc4973f697a0798e6b0976ed699662f11b045"
    }
  },
  signature: "30440220020ec39a9b9ccc91e7e0ff98055010a2da3c08728529f2d85b96444cea16f474022057ec7c1cd5fb7947edfcb6175dc50b22748da8e2fa1af4ae90a524137fb4771f"
}, {
  id: "3c7bbdb21be84ad8dea2c712bbbda704c0c33db905023ccc1f62d81972d606f5",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "037f4d9190cfa3c916820a3d410010226c399f6b4278eb07ecf22d41904c1d1217",
  asset: {
    signature: {
      publicKey: "02de982a6ad5c8bebdf3edce638747a4dfb065be8f631a3d20fbb63d172bf36cca"
    }
  },
  signature: "30450221008bd6e023179aabac29caaac75581bd7daa8085ebb99a7ab0fc7dbc533728645b022032411ff25b2c0f33978e7cfa838f2e506e6adea90bb0d89530f5150b805187ff"
}, {
  id: "1daa6e3e318479739f39ed7f6d9a165ad459756d89df7de46ff7f101eb0287df",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "023244209672266ac90bf64d0fbd9903028c2483b33f3cf1a0de41822a3628c749",
  asset: {
    signature: {
      publicKey: "02687dff0ce2d481f69d27bf91b372ea1f215b339c6ceba900d7be430bfb2ca564"
    }
  },
  signature: "304402201da228d0242749002721505a3db42435e4ade24621fe72c9d40d4926910bd19602201f871d5834995752d2419f05b2eadeca3913ea1eeaa5f29d183d571f2cebd047"
}, {
  id: "a66c450fa242b6bf2ebed8912f0b69ae2ab3c0efa73e3882709484ec2dee0f2d",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0384825d94953e85e3b6c3dc5ee27d363fec7c6dee2c1baa83dd6760458e05a402",
  asset: {
    signature: {
      publicKey: "02805584f70440601dbe3a89ecbfb3d93282c3acb8b2d3fe8dafe13c03bd4fff0a"
    }
  },
  signature: "304402202b1219ffc989d3dca8ece9b0021da0dacde95ff2578c60b5c1270ce693ad3fc102201305aa4f510910f922ddd3e2652a19f84af8a67c65713afd755694bd93c25630"
}, {
  id: "6a2be03d17d88936c9818f41aa474a2102dff7beff1760c4673cad20d3924276",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0264d678a13dddf54000ef95a38be00aa6e8698d82cbefa43c5c35808749d5053e",
  asset: {
    signature: {
      publicKey: "02ce8de343754d5b22fa7dfb72c383ba926b6b363e524cd35323f43090cf7bd2fa"
    }
  },
  signature: "304402206e2dee8deec4633e10389937c2959c7ecd1ee457ab0ac9d09570e516c8f7139302205b1eb9e49c142d5a38294a8af570c14fe19659c9553a19fe8795e3037791e636"
}, {
  id: "cca052b5e4a0010ee301ba166faeba8451bb8f4f5228c61cd39e6d1555227424",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03412d936ec21e8b69f43c4c4945e24defeb956c777d71b974740fe2f1b90dd4d1",
  asset: {
    signature: {
      publicKey: "02ecc545862c025a70bd0b1c1a2dd2798a46b64976d2a30670911d645fd1ae799d"
    }
  },
  signature: "304402201aa22e71c5903b1c9c933e25af1290dea0cdf928ca9b5bdfd69228fcf0fccd370220524d005d9a92eb65e3c1b12ba1a856377902de0df8665c721bb36c14cc91299f"
}, {
  id: "34aebfa8eddceaf9f55d82aa992753690ac46fb946f520f69f5281b89e763a8d",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03882346ba5e7e2874d1cfd1ec8d30f984be9f57021b72f56ec5b4d4aee79caebf",
  asset: {
    signature: {
      publicKey: "03099b500c089faa04a89ef29f23da9f056f0a217d4a4966c6f88b49719313de1f"
    }
  },
  signature: "3045022100c700dd147d1794d20023537c280334698c7122e05bd664741e8adcb1c2d0e77f0220529a8868e1044c524133e8a23461ce76983f1e918b1189bbee80140c4b2b5066"
}, {
  id: "faa3968c129583d6e46d1e3ca4cf4c912a34e900c5c0fd76053e32c81b2f7a8a",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "039c0311d587b5bf354c2d42965436048dfadaf9d5f6fce7c5f842e5480f298c5c",
  asset: {
    signature: {
      publicKey: "029ee9628cc63f01c63b7537688bdad4d51f10211e1ceaf6810bd046c7bba5c8f2"
    }
  },
  signature: "304502210084d61fa2e3afa0b17c4531196571a58e6c595ea94a12b47934ccbe24c7ad49c702204e1d2d02eb38ba653e23999d523b769bffca9466ce1992b066c8bd9b8a62565c"
}, {
  id: "8e29afde6c611dee82ca0e3f089794fcde2f928af7087b5c9d5b3f1b78f7d8b6",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02f4fc615d167b6e6e4ffd2c6d63ae7ff621341dacb8b0ab5809b82cd478304bc2",
  asset: {
    signature: {
      publicKey: "02ec72b44b00d8125a0b9a8baeada6d0d2642ff6c85885284b22b89326bef0fd78"
    }
  },
  signature: "3044022062a8769e33ee2d25e559c88f6e0e23981094687fe9590cd699d19c5003bf51cf022028685a95e7886123e301677bffd63dd20d024e5fd9e90e54c5748abe41faf2e7"
}, {
  id: "1ccc824939323375f439978517cce8e551a9e1e9a30fad3828dd985db2c8de06",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02d59edc9009c55f4b271e0880ccc2e710eff3a69b5e41ee8f0573d93c639e7cf2",
  asset: {
    signature: {
      publicKey: "02c4da308fb28ec9f23ddc8122115594b7a3dc407e341359ae1d0f4457d86b3175"
    }
  },
  signature: "3045022100b2f628b89a6c41edc6441546c93ace5aa289d7a5bd4731d3a58f48d8a592048702201282c7c3ecfb6be23001820c88fbd2e84c34dc2de8f65a73e5bd5bcf5bac3b70"
}, {
  id: "671a995a541bfeae7c908fb8f3b6d4ba48bf8868d69cd07d69f1b9c4431d35db",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0223566d2ee34ed38a542e6bab5aa82feada724c86322a42ba544ac0a0d3cb90be",
  asset: {
    signature: {
      publicKey: "034ae1df2c1aaf5cc67cf6952297fec13711a2753a13e236a3ae617c1cb4800960"
    }
  },
  signature: "3044022017df39dd35a0fb79d8b3e1e192c2ffe5c84546cceaf270811b48a2558928981b022046daf555ada51be01ff1e4528afd118484b28f9f6b88e31af19121df561c0f2b"
}, {
  id: "5f3a87e8640dc16175ed464fbe8c3a92e5769bf5d868713e0bd9391c92057888",
  timestamp: 0,
  version: 1,
  type: 1,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "032813004bc61bb9125232369724c23f5d0c417f1690f0beefdae359694ed49eaf",
  asset: {
    signature: {
      publicKey: "02600925a8c12aa769aa81222246fe1b392f68c08e3cfd6cb014ee472797c4d9e9"
    }
  },
  signature: "3045022100fe872625e0df7ce1a61bdd5e8b0a771a6ae71d8b4d74389574f2b2c093b1222b022008242b52199db1af7f2484cd47730ee7afc4cf496d762139219ff4bf0353dc95"
}, {
  id: "06fb5269ff12cb471119788c455d63c3decc9d04d58f0a15a6839d5ea97a1a78",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03a6a69602037a74be19103d7666270ec9898fb25ae9b1a1d7be4e2e3c7c21a4cd",
  asset: {
    delegate: {
      username: "genesis_27",
      publicKey: "03a6a69602037a74be19103d7666270ec9898fb25ae9b1a1d7be4e2e3c7c21a4cd"
    }
  },
  signature: "304402207bd968f7154cfe278823f6d4316f42126da1961fafd9125591212638d18589bb02204b04af0bb3980d4ff28a177d683933bc3515e5e754cfd22305264ac67ce61c85"
}, {
  id: "7e383f2c52a79957bef0a177151769a2f73bfffb02500bf80d37c4caa9a730f5",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02aed6613d71afac9c58f6d7dc50a8b83ef970a965134289b5fdb1316cb5ce4043",
  asset: {
    delegate: {
      username: "genesis_2",
      publicKey: "02aed6613d71afac9c58f6d7dc50a8b83ef970a965134289b5fdb1316cb5ce4043"
    }
  },
  signature: "304502210098430311b5d3284b92dc2f5a8aae2ec641973a88cdf4e70a294b799d043a26d202205900c0a9a701e77bdc15131b78b5f9607355177d1716e636c07e00b980179c94"
}, {
  id: "6c7226c00be70e01178baeecc39b91b9949ef2a48f452e7c2c0e8e057a5ff952",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0224696d2d359eb27ba7f303e2cdad6b205b16958887f297fbb1006862733b93f4",
  asset: {
    delegate: {
      username: "genesis_50",
      publicKey: "0224696d2d359eb27ba7f303e2cdad6b205b16958887f297fbb1006862733b93f4"
    }
  },
  signature: "3044022052a4a69430fe6bbfe5248a04d228445ff304341d7c3c2a71ecc89b6681521177022037f3c06b993ca2a85b5fdc5886f43845c15170b42b4779a4072ff69f890eed1b"
}, {
  id: "75154a668d529af7b8873acc7cca19ade919e75c94caf3747d6d980a64f8b18d",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0386b0158ffb50648b980feb1cdf8bcf7091c55b46f46a76e54ea53a31b0c10e25",
  asset: {
    delegate: {
      username: "genesis_49",
      publicKey: "0386b0158ffb50648b980feb1cdf8bcf7091c55b46f46a76e54ea53a31b0c10e25"
    }
  },
  signature: "3044022078bb479258bb419cfd683751913de3c34de6b073a7bba4c3d625e34aa879774102205cce0a6e1a781b77c3380d2bcc16cdb527f79c8782400dbd6f6a0922cbc163b7"
}, {
  id: "636addbe1c5dcab66f4cf232d433202fc1eb12280119a9e023bfd0af557af441",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03eef7da2ddb36f2becd143e94b96c9bdbcc855dc3a635f300473b692a27de1d0d",
  asset: {
    delegate: {
      username: "genesis_48",
      publicKey: "03eef7da2ddb36f2becd143e94b96c9bdbcc855dc3a635f300473b692a27de1d0d"
    }
  },
  signature: "3044022020472507dd7cae4477371c31d44bc158a784d644ddec9778f0c3eab7c1eafe8f0220478573d95c64ca73595826ecac04bbfeb94d228a38588facf6ae6031ac69f304"
}, {
  id: "57878a82635004330c65c383840322a03d1b5ee3f23140bc767b8af1e5f502ec",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0286f55873cbda98f6b56d6b63dcd837c86ee2e8effd329a99ad9f724ab913e71f",
  asset: {
    delegate: {
      username: "genesis_47",
      publicKey: "0286f55873cbda98f6b56d6b63dcd837c86ee2e8effd329a99ad9f724ab913e71f"
    }
  },
  signature: "3044022064c97e36960a2de0dadcd777747bd826259c469e993a68dd1e32db5ac8ee8d7b02207b2e0b8356e88c12de6f8bb695c44dc3c8ba5011dcdb884234d0bb5615e123fa"
}, {
  id: "73e44bc7a2f996a6b545ec3941626eb076e51beea67cac41e86e71cd01143171",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "036627ad7e990668b92abd09cd34cff49737ee5024f949b3cf060104bc26796dfa",
  asset: {
    delegate: {
      username: "genesis_46",
      publicKey: "036627ad7e990668b92abd09cd34cff49737ee5024f949b3cf060104bc26796dfa"
    }
  },
  signature: "304502210082371253e03d6b78ab733453f8b3271c6c8f016638824555d09c3494c1050e85022064249d21ce7253c62e60de0a1f2b98ecb4c9eec1cd08b4e68a82521923a6658f"
}, {
  id: "60eb7247c6d15dc51197109dbed260ff53164a01f12000d6ed49b32a115929e8",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0261861fce10c2d7329a7c5e9436ddc9f6e4cc7638a0313c365315d71c370aabcc",
  asset: {
    delegate: {
      username: "genesis_45",
      publicKey: "0261861fce10c2d7329a7c5e9436ddc9f6e4cc7638a0313c365315d71c370aabcc"
    }
  },
  signature: "3045022100a8b13c392f5b0ef3756e050af4502d565f93f0ac48ae55e192cc1ebd666ee15a0220049354377ba9b159c213b8a68c675f1e09f16fc93744717730577b4a8051dc00"
}, {
  id: "39ca94093ca3d0e9074b88268f7db06613aef065021079f8eb31e53e2c4956e8",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "026bf3b6a49b53bf2fb4c3f3bf129080ab16027748ca3eae99382785deb9f20e64",
  asset: {
    delegate: {
      username: "genesis_44",
      publicKey: "026bf3b6a49b53bf2fb4c3f3bf129080ab16027748ca3eae99382785deb9f20e64"
    }
  },
  signature: "304402204d0fc85a8c3a11b72ac1bcc87d3ceb31ff5a396c03ab4611cfa1fd482d71abed02200843a09a02dd48635d89778d20fa5c7b51478f1ceef93f58eb800ec87bd90ccf"
}, {
  id: "f0fc54085f308bb8b0eee9f765d6d19c1e05c3a1eb79454bbc1b92adeb56f969",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0340c96462c621b849ed19ccbb43ebc99702b36e39eb31df6427d1040148b3e7df",
  asset: {
    delegate: {
      username: "genesis_43",
      publicKey: "0340c96462c621b849ed19ccbb43ebc99702b36e39eb31df6427d1040148b3e7df"
    }
  },
  signature: "3044022026416a12b3486bce56842a71f5ace25fadbf1ae124c3d9f77b1c1b64e41831d502204621759bc9d06e54f4f5594e3b72f4d6dfe7b09075af26b986ffe373836d8fd3"
}, {
  id: "4bb8d39521a1b8182b3917c7f0167094d6878f79da8ee4913c97a6b562a43f47",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0355d22bdc0f63688b11924ae3819b8ef1036f7e74f5ad5f9c7fb508bc219d1793",
  asset: {
    delegate: {
      username: "genesis_42",
      publicKey: "0355d22bdc0f63688b11924ae3819b8ef1036f7e74f5ad5f9c7fb508bc219d1793"
    }
  },
  signature: "3045022100a28852e9cdd300a702122ebd211e6f2a94935dabd6c50b8723ccbdda361781cd02207faa2db4c25cf427b77cb7ffad058014e02f0a802198b627f3717ce6ddd0a642"
}, {
  id: "d8f77f20641273d42c747722749bc886b702dea8382ae8387a51cecf91919147",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "022f5905a84c78ab156196e220c4d816302d8ff121dca90d19c43b026c17a648f3",
  asset: {
    delegate: {
      username: "genesis_41",
      publicKey: "022f5905a84c78ab156196e220c4d816302d8ff121dca90d19c43b026c17a648f3"
    }
  },
  signature: "304402205c4a9c488fd269a10629466ed70ab6690ca8b5f62a0d748af17260919d75aafb022006ae186e2843af542e6cd7e4f70d2b7d082a954a5a27ea51447ffcfa70f401cc"
}, {
  id: "357fd501799d9402daa580449c1a977ff4ecc6186f36d4188eb427d1da56ccfb",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03743e523107e718ef752267f983fb5d97d033225dede131c1b910c842c6845371",
  asset: {
    delegate: {
      username: "genesis_40",
      publicKey: "03743e523107e718ef752267f983fb5d97d033225dede131c1b910c842c6845371"
    }
  },
  signature: "304402201fc0040151885d641fd7ef76d930c7860400c6723564b927cb081872f9d36cb50220174bbf8fab2dedecb6417f5c2c3cc8fd9ef5b31a92805811adea2e5d703aa6b6"
}, {
  id: "a0564512fed50a4a28d4456cdaab3528a08de330aa0e8318d05de8fe4a91fe7e",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03a8e79a66f9abd185f6d273895357bf7f70b9024ea9c6ba6992c70769d2bbcd36",
  asset: {
    delegate: {
      username: "genesis_39",
      publicKey: "03a8e79a66f9abd185f6d273895357bf7f70b9024ea9c6ba6992c70769d2bbcd36"
    }
  },
  signature: "3045022100a1140072e432e0b9192d6bba5ed46bc20593af38a7ad538a5321de19815b364f022060018e75a58d0a39eff9e8981beb767b4582f94478f9bd1172903009cc1d05e0"
}, {
  id: "c6267e48bd4e167c42c4bf95f459df6c3dcde1a3a9994523807a98ac5f05c30a",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "034e97723d50ff5a208279b95de3fa6c8d4cb719a8097bd42d7c35ca5df24d77aa",
  asset: {
    delegate: {
      username: "genesis_38",
      publicKey: "034e97723d50ff5a208279b95de3fa6c8d4cb719a8097bd42d7c35ca5df24d77aa"
    }
  },
  signature: "3044022065c542a6a9817f8835a6f938628d5ecc83b750549564547baa9cbb5791b7ae7902203646d3fc72e097b8296ab7198579bdfe7d412ecb09aa8cfd2b0dbe9318b0b81b"
}, {
  id: "cc0faa4b591b7b71dfee9f7512f31ebd48aea6888497cb726c3aedbd07ded68c",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "032998b64be9fec881c3026a5aca7c6a6a726ff9410cdb96d30296724b2822c49d",
  asset: {
    delegate: {
      username: "genesis_37",
      publicKey: "032998b64be9fec881c3026a5aca7c6a6a726ff9410cdb96d30296724b2822c49d"
    }
  },
  signature: "304402202ddd18aaa1f7114be4e4ef8c00e05d24e247c8ae7c8d8d653bfbfdacdac9a9bd02206721cf2f013fe3ccba01a97988cec6b196ddff64028f93893ef95b7f5ae19ea6"
}, {
  id: "e31313b483d887d858db651292ae92ee18b980cba27dc883d678517af47275f1",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "032bb244b81b8fe941f4f093c44185a4c4e8dd8aa06aea2c89cd31c5cb5095bbcf",
  asset: {
    delegate: {
      username: "genesis_36",
      publicKey: "032bb244b81b8fe941f4f093c44185a4c4e8dd8aa06aea2c89cd31c5cb5095bbcf"
    }
  },
  signature: "30450221009186d262e10ceadfa04535278ac4d3498365d26e7ca8c3acb68e2bce9a34179f02203daa360c21f3bc7dc6ac211428f44568019e3b43dafdeaac96fa05891d2c6185"
}, {
  id: "bf652a118da818f07efa545ec558e8dd051b45c96748516f78125cb6f459da53",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02e89dbafbcb5b131c7855063d403cc9342b4ec56453c7106d2a5fe09e36fee3b2",
  asset: {
    delegate: {
      username: "genesis_35",
      publicKey: "02e89dbafbcb5b131c7855063d403cc9342b4ec56453c7106d2a5fe09e36fee3b2"
    }
  },
  signature: "304402202bdff7b629061c9af9e5ca8c87eff0114e89ddc6085100f90cf161ff8248c94302204ecf909fe1ab09717e29d46afbe360b468d43797a97aec30645caa7887b5c54a"
}, {
  id: "b2baf710d2146778248d7c05a87bb993ea1dce47a0b91351aafe60debe5f33dd",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03492a56295d3074c25f2fd1aadbb5363bd8b771eee4d3fd1fd900b7dba0ee00e5",
  asset: {
    delegate: {
      username: "genesis_34",
      publicKey: "03492a56295d3074c25f2fd1aadbb5363bd8b771eee4d3fd1fd900b7dba0ee00e5"
    }
  },
  signature: "3045022100a0971ea6d4f3ea0488acf6921e01668ad7ddb82b0bb79fe6eeb4cf31ede039f302205c9330a7b539afced21037fd1a05fc507621bf5264295f200f72deb90aa3b565"
}, {
  id: "adf551c6dee08ea329d1d0afece90e5c22fbfc4ed05c5355a767b1a4773e43d7",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0254315ae8629f844cf258cfd85ee5143a1b63fbdff674c59f7e24650ab9912a14",
  asset: {
    delegate: {
      username: "genesis_33",
      publicKey: "0254315ae8629f844cf258cfd85ee5143a1b63fbdff674c59f7e24650ab9912a14"
    }
  },
  signature: "3045022100ef495e0da088d59b74dcbd7846d72617a03fdd5bc865a3b9914211047de30e860220386f587e904838af31d4c7cf1dde35714944fbe82cffea3b27a088c2f6fa1b3a"
}, {
  id: "1577b0e2c726bee7f8d32a580e40037470d9e387efdc69a8d125d0a24e8093b2",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03c636148f8fe31233ae945d442cb82bc98a9183bc6cad582a23135b7b5136ca11",
  asset: {
    delegate: {
      username: "genesis_32",
      publicKey: "03c636148f8fe31233ae945d442cb82bc98a9183bc6cad582a23135b7b5136ca11"
    }
  },
  signature: "304402202a8db9b5bd862268f1005d2ca517946a338e5c6fb7b478b94891b44e79a1e1bb022014fa1cc48efa8927c47a42708f6e6fe9ab2e61d34b057f9144e07cb4d77b4074"
}, {
  id: "3eb7ca7b8d2e52dd68da27b54b91573b54cf69c8d6472939a30e67a394592ab0",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0214bd8ac8fcbcb3d04085942a20e8b6294251c5a02e77315d42f48c6ba7c1cd9e",
  asset: {
    delegate: {
      username: "genesis_31",
      publicKey: "0214bd8ac8fcbcb3d04085942a20e8b6294251c5a02e77315d42f48c6ba7c1cd9e"
    }
  },
  signature: "3045022100c7d1fe468fea8c045c8c5e8cb874aa65b63e3a4d50d48a2c809921ec674128f50220151cc061c7f80a3740e9a58ddcd342c94f049fed44049e1dc841475b06797e6e"
}, {
  id: "20be520c39e7a5fddef6d596153ebbe9acc96af9956dfada460b301c42be9ac3",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03e01363edc5bd7ab7ff7d35485b376ce666270beb620900d928ee3b6a0cb10fb8",
  asset: {
    delegate: {
      username: "genesis_30",
      publicKey: "03e01363edc5bd7ab7ff7d35485b376ce666270beb620900d928ee3b6a0cb10fb8"
    }
  },
  signature: "304402201d2bcbffc0d798084495e8ae0380a4fa68d0eae725d608a0c749949e00eb373e02202dc70ddd3a8cadcef099141eeb52b9982103524ff28f08d3e867a2de5505f049"
}, {
  id: "923ccd9b5490b0d14afa70797cbfb56f529d12cb420934ed8c6fcd894eb5b2ed",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02f5dec188574f0b819cde2c0247b4f072f8f91ddf042d550921bc319050aed400",
  asset: {
    delegate: {
      username: "genesis_29",
      publicKey: "02f5dec188574f0b819cde2c0247b4f072f8f91ddf042d550921bc319050aed400"
    }
  },
  signature: "3045022100e8d332132ed581de7471caed3969f28407e8d9b7163bc37364bb62737400f10502207768680444b6d6764f0357b5dab89d9a53ed0c740b3a4eb983909c72b9540efe"
}, {
  id: "a0398a62b9600d93781a46ef14f04777399c441fb696206c9abee8931f213fca",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03f8b1935b22d42ed3b2127e60775299808437a0b641b841bc9376a2898c4f44a1",
  asset: {
    delegate: {
      username: "genesis_28",
      publicKey: "03f8b1935b22d42ed3b2127e60775299808437a0b641b841bc9376a2898c4f44a1"
    }
  },
  signature: "30450221009aa14486ae557e22ebadcab2f7226e0e03b85a235947d772949127478c0ac60a022049452d58b3f1a2f2cb883b6a30d96ee5bdfb103bccbf782f3457a131d12e6f4b"
}, {
  id: "7df3a30f9c5d27618c0d516b4bb5c862aaa31e95cbac726f56e895f2004e018c",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02b63f38feb83a17fad2aacf6f953c557f50c94de636b874da14290bbf63f1517e",
  asset: {
    delegate: {
      username: "genesis_51",
      publicKey: "02b63f38feb83a17fad2aacf6f953c557f50c94de636b874da14290bbf63f1517e"
    }
  },
  signature: "304502210085d8047d4535228b429ed85855839732dbf91f019fd75d3888b81e786d5e322f02207d3d10085abadece5bba681981cd66969ab6d448100e1445b90961f0dee979d7"
}, {
  id: "db6e50f672232615205267f3d77a260d0a1441654f598f86c2533dfc004d6c45",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02b5957878800178932dab3313d6723bbf506f211fcb83cfb1d5ee22f1274a4c68",
  asset: {
    delegate: {
      username: "genesis_26",
      publicKey: "02b5957878800178932dab3313d6723bbf506f211fcb83cfb1d5ee22f1274a4c68"
    }
  },
  signature: "304402206b12d4c69f9248c77f71ae5dd7365cebdad16c03cf4780786dc6bbf886eb64d702206abd91d3dceeee7b84444b9c04a747b122de677ec38c0c2495640e7e6fa268fe"
}, {
  id: "be19a8216ce30743a838d5343ab43427a735eb748604a55834d1d0bf27b623ea",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0281a4d86b3393af3011992b3f6be550aac7eee71993e1425562d260e83c6ead66",
  asset: {
    delegate: {
      username: "genesis_25",
      publicKey: "0281a4d86b3393af3011992b3f6be550aac7eee71993e1425562d260e83c6ead66"
    }
  },
  signature: "3045022100e48825377f2d2876ee85b36ec04ab55565a821e59e39cb4f42c4ad6333509372022079ec71df7ba0ce104b4194155e954f48053023104a075b8a0d9ee5c273b018c5"
}, {
  id: "ea72c392f6256e9ccba1687efc5df9a3116d58fe05e0e3f199b39660de0bf58a",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02de366d3711a1a5932022f27d6388e5e75d3c1b8d9440db599b2931b03780368d",
  asset: {
    delegate: {
      username: "genesis_24",
      publicKey: "02de366d3711a1a5932022f27d6388e5e75d3c1b8d9440db599b2931b03780368d"
    }
  },
  signature: "3045022100acf8e6c4bfd634100df7b5605110a2187363ca6569bbba16384ce12c79d83b4a022029f58f54ca9313f268b078d48cafb4d6a2f66ecd3dc2f02b768cd36e96421b3e"
}, {
  id: "95338770498b812527409cccf1f864c11b780cd20ab169bcabb995922da8c8ab",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "032292a0c76cbf0d24faf582afa6323dfe5384e3bfd2bdf0310d3107f02b0e47be",
  asset: {
    delegate: {
      username: "genesis_23",
      publicKey: "032292a0c76cbf0d24faf582afa6323dfe5384e3bfd2bdf0310d3107f02b0e47be"
    }
  },
  signature: "304402205ab26c60f8eb59a1dcb4f6e89d779df575ab91ce35fe2d04d90ddb0d959532de02205c43da266517a550b23c3929c8564be62ea6818aa9472c7a27110ab89ccb9067"
}, {
  id: "6d6d335d9f1b399b9ccf888c8bed12a8e77f74eb4c4b15cc9819589a318981c3",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "020d8cc9a44b3cb46316879146eef90584d37ea5af3c2aa0c169a3fd7232f0b282",
  asset: {
    delegate: {
      username: "genesis_22",
      publicKey: "020d8cc9a44b3cb46316879146eef90584d37ea5af3c2aa0c169a3fd7232f0b282"
    }
  },
  signature: "304402200dd0dcae3715024746a993282c9ca686953b5ef2c84551e05d5d4e4147595595022017708d03073a8993ba1c97e500ce262562ce8f4086dedf9f47a8e1c9fd4a9657"
}, {
  id: "fac36ab057bf4bdaa2d2a0820dd4704a94c0d1202563dbb946a64fe141ff3c6b",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0316510c1409d3307d9f205cac58f1a871499c3ffea3878ddbbb48c821cfbc079a",
  asset: {
    delegate: {
      username: "genesis_21",
      publicKey: "0316510c1409d3307d9f205cac58f1a871499c3ffea3878ddbbb48c821cfbc079a"
    }
  },
  signature: "304402207ba71a7ce535aac054211ffe95aeb6aedc8b555dc9365a28fb8e657c495c077a02204cc218e73621a06ee167b9093911d7aaca6a15ccb1415655e916f938b1cb0a9f"
}, {
  id: "598fa34389ac8b2ec8582f988a6c5e6d5a1cbd597669fd5ec379506393ae584a",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "036e5e9b5956c8f56d5ecaef8a24141aa0de681ad89a2318b6c2d4125676576866",
  asset: {
    delegate: {
      username: "genesis_20",
      publicKey: "036e5e9b5956c8f56d5ecaef8a24141aa0de681ad89a2318b6c2d4125676576866"
    }
  },
  signature: "3045022100d6d69dae087229727cdb034799d2dff9d83524b87a7c812a3cdcd0585686f1be0220056fa97bc4b37e5515d0c21fefa6b9af3b37243881796c1d1254b9ae74e1982e"
}, {
  id: "189ccd5e56fdfd5a4c3dc46cec1dc843bacdb83cf26ba287c0a1e4e90de935ea",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02f9ec59435f27d92667e7d6e8e929cb4f71cb441a2b403beff607a0894c3377d5",
  asset: {
    delegate: {
      username: "genesis_19",
      publicKey: "02f9ec59435f27d92667e7d6e8e929cb4f71cb441a2b403beff607a0894c3377d5"
    }
  },
  signature: "304502210095ddfb261e2201e4e47ffdc7015b2542cb5e29e93205e588c2b4edb40317698702204d84f60ba494660b1247408f23fa69cc9ecdd039484e5950074a1c50b8e1a73b"
}, {
  id: "d8027d83d251f8bdb2750843ecd14401184e7d66c63a8d2e7ed76806670c2e66",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "022cc19322e8a4edd93e5988b775b237692fe14e7475e520c757e1b32669faf3da",
  asset: {
    delegate: {
      username: "genesis_18",
      publicKey: "022cc19322e8a4edd93e5988b775b237692fe14e7475e520c757e1b32669faf3da"
    }
  },
  signature: "304402204a90de4583cab218eac30c05e73b63f978072ec102f080946de9abad3bf80fc1022005d19f67a73ac1550ef64e9a17c2384752231700f204caf97eab315d524c7dcd"
}, {
  id: "104e1ab044b094af536e08b372a6b645c42f9428f8faad0e7fcef73051cfe1b2",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0334cc485a8ff9fbf1ce5221153bec8bfa7f2ece3ce25ff31dacfa1eae91dcf143",
  asset: {
    delegate: {
      username: "genesis_17",
      publicKey: "0334cc485a8ff9fbf1ce5221153bec8bfa7f2ece3ce25ff31dacfa1eae91dcf143"
    }
  },
  signature: "3045022100a026b68b342e3128caefabeb2686a2144d8de1dfd4f9060835538f0b3e4e078902205ee6b7986d3c9f8e56dd1b3999f7f9fde5c438ef10725d91535e0d345fb49106"
}, {
  id: "2b874377024000078f489c26802852e71c3bb87c16f6d8334d593cd77e55fe68",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03a21fb105682f83a4149575fadabc16d836fc255d450bf4e15a6f9733a9c9e46a",
  asset: {
    delegate: {
      username: "genesis_16",
      publicKey: "03a21fb105682f83a4149575fadabc16d836fc255d450bf4e15a6f9733a9c9e46a"
    }
  },
  signature: "304402201bfba24659a4326d599cb34804496993b2777b4c3380108b3dc180815bca65200220010a5f16c9eef85c2586e4da6b5b92e3b5de12f9bdb993f843741ca8e4872b5d"
}, {
  id: "340ca8dcb274bb729b039d535509e219639556cbf62afec0ba6161c8147b243e",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0374b638d5909814023679e91511744d8be43e7ea92a96ac813fc54170956b9a72",
  asset: {
    delegate: {
      username: "genesis_15",
      publicKey: "0374b638d5909814023679e91511744d8be43e7ea92a96ac813fc54170956b9a72"
    }
  },
  signature: "3044022059d15e6aa1997ee07c16a7992a10d256a60b836be2f66fc37fd6a32a25b06c2d02207cfa37bf469eeba9aad77239f39deb2ba67de12c97224cfbf1c0d9154bb57507"
}, {
  id: "366061dc1f5cf15c1d4881834b18a5eb0a34da527dbd1240099490fa4a6a255d",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0325a3a8faff0d859d0e01d970b6da791c6d40980e6d999ebf50902add2db649ae",
  asset: {
    delegate: {
      username: "genesis_14",
      publicKey: "0325a3a8faff0d859d0e01d970b6da791c6d40980e6d999ebf50902add2db649ae"
    }
  },
  signature: "3045022100daa7ff5f6fd68c4be4106eaeebf6d863116ed1b937b6409d936a7d377b76220e0220179adc41168ec44f3d5b857f27d34dd916c6f477ae5ba221a4cd353fb4994463"
}, {
  id: "ec0b8642bea3659d5f3944692a8c18f379cd35ef56e38594592625e8b2ac2176",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0234b0c5728ad84f77c363893d8724c1030449dab292bf50985c1b4826116488d5",
  asset: {
    delegate: {
      username: "genesis_13",
      publicKey: "0234b0c5728ad84f77c363893d8724c1030449dab292bf50985c1b4826116488d5"
    }
  },
  signature: "304502210092d9331d84eb19a13bd508cd8850f5653cb4411a7b091a11d08ddaa18a8946ad02202bc063031e9749a42e41ea51846df5b5bac72c3e5ecd280c2d231ba0752007d0"
}, {
  id: "175db25ddfeb3c1d1bc062f4ffbd7ef34f9158c92c945ef5bffb2ba064427599",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "024fa1bc40902ce33ad42cce978299fdb9cfcd9e550e233713a005cc967fe43339",
  asset: {
    delegate: {
      username: "genesis_12",
      publicKey: "024fa1bc40902ce33ad42cce978299fdb9cfcd9e550e233713a005cc967fe43339"
    }
  },
  signature: "3045022100fd6766846b0615314f6d6be650cfcd1249c05b113343cbce868c37dc0c5043a0022070614d7bc62eb391596d5aa783fb3b8f86c44af19eafa7aff950aa7e216771b6"
}, {
  id: "12c83679491456b08126f56c22d2f020cd75a48c4601a5556bdfd0b8ded26a0b",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03bf04879563f0dfee9b9733af248847a03c5b9e89a9a81ca028fc0c44349c7170",
  asset: {
    delegate: {
      username: "genesis_11",
      publicKey: "03bf04879563f0dfee9b9733af248847a03c5b9e89a9a81ca028fc0c44349c7170"
    }
  },
  signature: "304502210094283aa8f0142d2cd3e41191f54b13496d74944953bc9d8faeb047aa55e01e3402200874890848d1319d58e9b2c39d88938567cf6b617c841378fd59a032ffaeeed9"
}, {
  id: "93d85a8e0f2eab120f5cd708189c891277ba22d21e96e1520b7bb68acb09bd42",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03e03e8ec4c1de10ec8b4fd9269cbf9584927b99fe2585c5cdd8791b06bd806d5b",
  asset: {
    delegate: {
      username: "genesis_10",
      publicKey: "03e03e8ec4c1de10ec8b4fd9269cbf9584927b99fe2585c5cdd8791b06bd806d5b"
    }
  },
  signature: "304502210097c4aa5a741b76f425c82c2c9a980bebb2619e538ee7570341ced6121a23de0d0220161403379c8348a4359c3ec555a85d9f29af41ef07620273cfed8fe3c4b82218"
}, {
  id: "7dda93252f1ad57c5f658b9f1bd15724e56ffd1609e2522888617295039ebeec",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03fe050cd6a95d41f5bf6f6286c7e0c8029a12ebf38101821842993a545fee0154",
  asset: {
    delegate: {
      username: "genesis_9",
      publicKey: "03fe050cd6a95d41f5bf6f6286c7e0c8029a12ebf38101821842993a545fee0154"
    }
  },
  signature: "3044022044c6a4fe59a94a040be667a6f41c98820abb364b39077bc28ad77c853d7c29f2022053f16744fdc2784ec21dd4a32c9fde339d314fd8efaa7c14e9f9f4764d76e78a"
}, {
  id: "8bc5a4be57e9d77b42aef6f0f779059e6ff8736ba7e5fcbf389aff00a6de2d22",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03069b9b610fc540de79e3e3ec75a237a055a0021cedaadde39c260b890eca6453",
  asset: {
    delegate: {
      username: "genesis_8",
      publicKey: "03069b9b610fc540de79e3e3ec75a237a055a0021cedaadde39c260b890eca6453"
    }
  },
  signature: "3044022000951abf3d20273b51ae33a4142ca64c4939bcb45963102980ac05352d97d7ac02201f7f6b1c1a61001568a41a20ea8f0c3ceace13ac2b6c6c492b5f5a2320a09dd7"
}, {
  id: "6ce884f4cd379476e988483ed41c5a5941765972617df44973970d8d3809b60b",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03852d45a7d7657c972fce42344d5be31166be83d227d757980c8edbd4944505ac",
  asset: {
    delegate: {
      username: "genesis_7",
      publicKey: "03852d45a7d7657c972fce42344d5be31166be83d227d757980c8edbd4944505ac"
    }
  },
  signature: "304402201eb3248466785fe74fa83a5fb317e8fcfcf1c332e24454f30cb951166622b63b0220073c686386cecd62f81cce1ddb5eeda9ad54e439eeb93dd8e43462b2a6781c6f"
}, {
  id: "dab21d6e4c577eb183ca33a78654b4ddc0d0447184087de10c8db1eda6bf61de",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "03aab25b27a4eedbcbcc8aa4f8e5a722f1ad03db9a107ef68465c6ea1d18337116",
  asset: {
    delegate: {
      username: "genesis_6",
      publicKey: "03aab25b27a4eedbcbcc8aa4f8e5a722f1ad03db9a107ef68465c6ea1d18337116"
    }
  },
  signature: "3045022100a7a9139985357e8dfa690be74c76eeffd7e7781cd53e09ec866c9f0bac96c9ea02202c48381a310d671a12d8a5210906d3ba75ba8bec783f5d0661da2defb1436676"
}, {
  id: "ad97ad8e2a19da3a48b784e75ea24f5f8e55f046cbe24657f55bc8a15eec7d61",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02d1a5ad2e0a094a430d5158447b9be383d1415c2678c890e39d2c811e27789359",
  asset: {
    delegate: {
      username: "genesis_5",
      publicKey: "02d1a5ad2e0a094a430d5158447b9be383d1415c2678c890e39d2c811e27789359"
    }
  },
  signature: "3045022100f8bf332d13c699f4dbc12446dc7a360096bf0698632bf8374d243fbf5b184f3a022007b806b1081f4555555e69bf99813e14ea900012deba396005d8a9aca33741b8"
}, {
  id: "a9d20c478a6eff3e1411c62356258eb625ae3986273b481c8cfc220352d69454",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "025d124dd255096ab185771bd9284c69bfea670a497b04a1bba054f8feda60fd3a",
  asset: {
    delegate: {
      username: "genesis_4",
      publicKey: "025d124dd255096ab185771bd9284c69bfea670a497b04a1bba054f8feda60fd3a"
    }
  },
  signature: "3045022100dba697809453a29db7aa55fa2ac912fb94249cde40eed4bc6364ab0c2eb69dc302207fbb59d91e874ff7d89f1f0e43d1c2b631f8a6725518e39bb3946d787bd52837"
}, {
  id: "d7b061c3912f7230a48d0e783da2ebf1903b848433c3bddc1417997760f0a397",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "0316b3dc139c1a35927ecbdcb8d8b628ad06bd4f1869fe3ad0e23c8106678a460f",
  asset: {
    delegate: {
      username: "genesis_3",
      publicKey: "0316b3dc139c1a35927ecbdcb8d8b628ad06bd4f1869fe3ad0e23c8106678a460f"
    }
  },
  signature: "304502210086b4b602e0ff8cc73c1a74fdc3aa25e81f3786a8d67f90481647e76b93c2c64702206bd52e147c1e247205c8fa0fbc83d6035727d52035cf08df62b29f3a7378c968"
}, {
  id: "bd507d6ffea6cc86c518b0111bbb0ce573ef558e95c5e88d3d70ecbe8183febc",
  timestamp: 0,
  version: 1,
  type: 2,
  fee: "0",
  amount: "0",
  recipientId: null,
  senderPublicKey: "02778aa3d5b332965ea2a5ef6ac479ce2478535bc681a098dff1d683ff6eccc417",
  asset: {
    delegate: {
      username: "genesis_1",
      publicKey: "02778aa3d5b332965ea2a5ef6ac479ce2478535bc681a098dff1d683ff6eccc417"
    }
  },
  signature: "3045022100ff6988ff42fef54d0afc6c0e83f120fa128948969ca5074ed95625dbcba526dc0220567856547a4984692a6d56fece27862eb747232d3969435c00c2798efba09c3a"
}];
var height$3 = 1;
var id$3 = "4881670189836572019";
var blockSignature$3 = "3045022100b0cbfdfabb77b7d431cb7fdc3acd148032898eb6b0026d4e8f6f08f8e5ca23b5022044cfad1c8e0df615b0969c5d1fe4965b2c18e6656becc2d5410c68ed19452770";
var genesisBlock$3 = {
  version: version$4,
  totalAmount: totalAmount$3,
  totalFee: totalFee$3,
  reward: reward$3,
  payloadHash: payloadHash$3,
  timestamp: timestamp$3,
  numberOfTransactions: numberOfTransactions$3,
  payloadLength: payloadLength$3,
  previousBlock: previousBlock$3,
  generatorPublicKey: generatorPublicKey$3,
  transactions: transactions$5,
  height: height$3,
  id: id$3,
  blockSignature: blockSignature$3
};

var milestones$3 = [{
  height: 1,
  reward: 0,
  activeDelegates: 51,
  blocktime: 8,
  block: {
    version: 0,
    maxTransactions: 150,
    maxPayload: 6300000
  },
  epoch: "2017-03-21T13:00:00.000Z",
  fees: {
    staticFees: {
      transfer: 10000000,
      secondSignature: 500000000,
      delegateRegistration: 2500000000,
      vote: 100000000,
      multiSignature: 500000000,
      ipfs: 500000000,
      multiPayment: 10000000,
      delegateResignation: 2500000000,
      htlcLock: 10000000,
      htlcClaim: 0,
      htlcRefund: 0
    }
  },
  vendorFieldLength: 64,
  multiPaymentLimit: 256,
  aip11: true,
  htlcEnabled: true
}, {
  height: 75600,
  reward: 200000000
}, {
  height: 100000,
  vendorFieldLength: 255
}, {
  height: 4000000,
  block: {
    idFullSha256: true
  }
}];

var name$3 = "unitnet";
var messagePrefix$3 = "UNIT message:\n";
var bip32$3 = {
  "public": 70617039,
  "private": 70615956
};
var pubKeyHash$3 = 23;
var nethash$3 = "a63b5a3858afbca23edefac885be74d59f1a26985548a4082f4f479e74fcc348";
var wif$3 = 186;
var slip44$3 = 1;
var aip20$3 = 0;
var client$3 = {
  token: "UARK",
  symbol: "UѦ",
  explorer: "http://uexplorer.ark.io"
};
var network$3 = {
  name: name$3,
  messagePrefix: messagePrefix$3,
  bip32: bip32$3,
  pubKeyHash: pubKeyHash$3,
  nethash: nethash$3,
  wif: wif$3,
  slip44: slip44$3,
  aip20: aip20$3,
  client: client$3
};

var unitnet = {
  exceptions: exceptions$3,
  genesisBlock: genesisBlock$3,
  milestones: milestones$3,
  network: network$3
};

var networks = /*#__PURE__*/Object.freeze({
  __proto__: null,
  devnet: devnet,
  mainnet: mainnet,
  testnet: testnet,
  unitnet: unitnet
});

class ConfigManager {
  constructor() {
    this.setConfig(devnet);
  }

  setConfig(config) {
    this.config = {
      network: config.network,
      exceptions: config.exceptions,
      milestones: config.milestones,
      genesisBlock: config.genesisBlock
    };
    this.validateMilestones();
    this.buildConstants();
  }

  setFromPreset(network) {
    this.setConfig(this.getPreset(network));
  }

  getPreset(network) {
    return networks[network.toLowerCase()];
  }

  all() {
    return this.config;
  }

  set(key, value) {
    lodash_set(this.config, key, value);
  }

  get(key) {
    return lodash_get(this.config, key);
  }

  setHeight(value) {
    this.height = value;
  }

  getHeight() {
    return this.height;
  }

  isNewMilestone(height) {
    height = height || this.height;
    return this.milestones.some(milestone => milestone.height === height);
  }

  getMilestone(height) {
    if (!height && this.height) {
      height = this.height;
    }

    if (!height) {
      height = 1;
    }

    while (this.milestone.index < this.milestones.length - 1 && height >= this.milestones[this.milestone.index + 1].height) {
      this.milestone.index++;
      this.milestone.data = this.milestones[this.milestone.index];
    }

    while (height < this.milestones[this.milestone.index].height) {
      this.milestone.index--;
      this.milestone.data = this.milestones[this.milestone.index];
    }

    return this.milestone.data;
  }

  getMilestones() {
    return this.milestones;
  }

  buildConstants() {
    this.milestones = this.config.milestones.sort((a, b) => a.height - b.height);
    this.milestone = {
      index: 0,
      data: this.milestones[0]
    };
    var lastMerged = 0;

    var overwriteMerge = (dest, source, options) => source;

    while (lastMerged < this.milestones.length - 1) {
      this.milestones[lastMerged + 1] = cjs(this.milestones[lastMerged], this.milestones[lastMerged + 1], {
        arrayMerge: overwriteMerge
      });
      lastMerged++;
    }
  }

  validateMilestones() {
    var delegateMilestones = this.config.milestones.sort((a, b) => a.height - b.height).filter(milestone => milestone.activeDelegates);

    for (var i = 1; i < delegateMilestones.length; i++) {
      var previous = delegateMilestones[i - 1];
      var current = delegateMilestones[i];

      if (previous.activeDelegates === current.activeDelegates) {
        continue;
      }

      if ((current.height - previous.height) % previous.activeDelegates !== 0) {
        throw new InvalidMilestoneConfigurationError("Bad milestone at height: ".concat(current.height, ". The number of delegates can only be changed at the beginning of a new round."));
      }
    }
  }

}
var configManager = new ConfigManager();

class NetworkManager {
  static all() {
    return networks;
  }

  static findByName(name) {
    return networks[name.toLowerCase()];
  }

}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  configManager: configManager,
  NetworkManager: NetworkManager
});

/*
 * Constants
 */


var CHARSET$5 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var TABLE$5 = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18, 19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, -1, -1, -1, -1, -1];
/**
 * Encode a base58 string.
 * @see https://github.com/bitcoin/bitcoin/blob/master/src/base58.cpp
 * @param {Buffer} data
 * @returns {String}
 */

var encode$8 = function encode(data) {
  assert_1(Buffer.isBuffer(data));
  var zeroes = 0;
  var i = 0;

  for (; i < data.length; i++) {
    if (data[i] !== 0) break;
    zeroes += 1;
  }

  var b58 = Buffer.allocUnsafe((data.length * 138 / 100 | 0) + 1);
  b58.fill(0);
  var length = 0;

  for (; i < data.length; i++) {
    var carry = data[i];
    var j = 0;

    for (var k = b58.length - 1; k >= 0; k--, j++) {
      if (carry === 0 && j >= length) break;
      carry += 256 * b58[k];
      b58[k] = carry % 58;
      carry = carry / 58 | 0;
    }

    assert_1(carry === 0);
    length = j;
  }

  i = b58.length - length;

  while (i < b58.length && b58[i] === 0) {
    i += 1;
  }

  var str = '';

  for (var _j = 0; _j < zeroes; _j++) {
    str += '1';
  }

  for (; i < b58.length; i++) {
    str += CHARSET$5[b58[i]];
  }

  return str;
};
/**
 * Decode a base58 string.
 * @see https://github.com/bitcoin/bitcoin/blob/master/src/base58.cpp
 * @param {String} str
 * @returns {Buffer}
 * @throws on non-base58 character.
 */


var decode$8 = function decode(str) {
  assert_1(typeof str === 'string');
  var zeroes = 0;
  var i = 0;

  for (; i < str.length; i++) {
    if (str[i] !== '1') break;
    zeroes += 1;
  }

  var b256 = Buffer.allocUnsafe((str.length * 733 / 1000 | 0) + 1);
  b256.fill(0);
  var length = 0;

  for (; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    var v = ch & 0xff80 ? -1 : TABLE$5[ch];
    if (v === -1) throw new Error('Non-base58 character.');
    var carry = v;
    var _j2 = 0;

    for (var k = b256.length - 1; k >= 0; k--, _j2++) {
      if (carry === 0 && _j2 >= length) break;
      carry += 58 * b256[k];
      b256[k] = carry & 0xff;
      carry >>>= 8;
    }

    assert_1(carry === 0);
    length = _j2;
  }

  i = 0;

  while (i < b256.length && b256[i] === 0) {
    i += 1;
  }

  var out = Buffer.allocUnsafe(zeroes + (b256.length - i));
  var j;

  for (j = 0; j < zeroes; j++) {
    out[j] = 0;
  }

  while (i < b256.length) {
    out[j++] = b256[i++];
  }

  return out;
};
/**
 * Test whether the string is a base58 string.
 * @param {String} str
 * @returns {Buffer}
 */


var test$6 = function test(str) {
  if (typeof str !== 'string') return false;

  for (var i = 0; i < str.length; i++) {
    var ch = str.charCodeAt(i);
    if (ch & 0xff80) return false;
    if (TABLE$5[ch] === -1) return false;
  }

  return true;
};

var base58Browser$1 = {
  encode: encode$8,
  decode: decode$8,
  test: test$6
};

/**
 * Constants
 */


var POOL66$1 = Buffer.allocUnsafe(66);

/**
 * Constants
 */


var POOL105$1 = Buffer.allocUnsafe(105);

var base58$2 = base58Browser$1;

//
// Main
//
function memoize$2(fn, options) {
  var cache = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn, {
    cache: cache,
    serializer: serializer
  });
} //
// Strategy
//


function isPrimitive(value) {
  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === "string" 'unsafe' primitive for our needs
}

function monadic(fn, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);

  if (typeof computedValue === 'undefined') {
    computedValue = fn.call(this, arg);
    cache.set(cacheKey, computedValue);
  }

  return computedValue;
}

function variadic(fn, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);

  if (typeof computedValue === 'undefined') {
    computedValue = fn.apply(this, args);
    cache.set(cacheKey, computedValue);
  }

  return computedValue;
}

function assemble(fn, context, strategy, cache, serialize) {
  return strategy.bind(context, fn, cache, serialize);
}

function strategyDefault(fn, options) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}

function strategyVariadic(fn, options) {
  var strategy = variadic;
  return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}

function strategyMonadic(fn, options) {
  var strategy = monadic;
  return assemble(fn, this, strategy, options.cache.create(), options.serializer);
} //
// Serializer
//


function serializerDefault() {
  return JSON.stringify(arguments);
} //
// Cache
//


function ObjectWithoutPrototypeCache() {
  this.cache = Object.create(null);
}

ObjectWithoutPrototypeCache.prototype.has = function (key) {
  return key in this.cache;
};

ObjectWithoutPrototypeCache.prototype.get = function (key) {
  return this.cache[key];
};

ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
  this.cache[key] = value;
};

var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
}; //
// API
//

var src = memoize$2;
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};
src.strategies = strategies;

var encodeCheck = buffer => {
  var checksum = HashAlgorithms.hash256(buffer);
  return base58$2.encode(Buffer.concat([buffer, checksum], buffer.length + 4));
};

var decodeCheck = address => {
  var buffer = base58$2.decode(address);
  var payload = buffer.slice(0, -4);
  var checksum = HashAlgorithms.hash256(payload);

  if (checksum.readUInt32LE(0) !== buffer.slice(-4).readUInt32LE(0)) {
    throw new Error("Invalid checksum");
  }

  return payload;
};

var Base58 = {
  encodeCheck: src(encodeCheck),
  decodeCheck: src(decodeCheck)
};

var Buffer$g = buffer.Buffer;
var ARRAY16$1 = new Array(16);
var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

function RIPEMD160$1() {
  hashBase.call(this, 64); // state

  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
}

inherits_browser(RIPEMD160$1, hashBase);

RIPEMD160$1.prototype._update = function () {
  var words = ARRAY16$1;

  for (var j = 0; j < 16; ++j) {
    words[j] = this._block.readInt32LE(j * 4);
  }

  var al = this._a | 0;
  var bl = this._b | 0;
  var cl = this._c | 0;
  var dl = this._d | 0;
  var el = this._e | 0;
  var ar = this._a | 0;
  var br = this._b | 0;
  var cr = this._c | 0;
  var dr = this._d | 0;
  var er = this._e | 0; // computation

  for (var i = 0; i < 80; i += 1) {
    var tl;
    var tr;

    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
    } else {
      // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
    }

    al = el;
    el = dl;
    dl = rotl$2(cl, 10);
    cl = bl;
    bl = tl;
    ar = er;
    er = dr;
    dr = rotl$2(cr, 10);
    cr = br;
    br = tr;
  } // update state


  var t = this._b + cl + dr | 0;
  this._b = this._c + dl + er | 0;
  this._c = this._d + el + ar | 0;
  this._d = this._e + al + br | 0;
  this._e = this._a + bl + cr | 0;
  this._a = t;
};

RIPEMD160$1.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;

  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);

    this._update();

    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);

  this._block.writeUInt32LE(this._length[0], 56);

  this._block.writeUInt32LE(this._length[1], 60);

  this._update(); // produce result


  var buffer = Buffer$g.alloc ? Buffer$g.alloc(20) : new Buffer$g(20);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  buffer.writeInt32LE(this._e, 16);
  return buffer;
};

function rotl$2(x, n) {
  return x << n | x >>> 32 - n;
}

function fn1(a, b, c, d, e, m, k, s) {
  return rotl$2(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}

function fn2(a, b, c, d, e, m, k, s) {
  return rotl$2(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}

function fn3(a, b, c, d, e, m, k, s) {
  return rotl$2(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}

function fn4(a, b, c, d, e, m, k, s) {
  return rotl$2(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}

function fn5(a, b, c, d, e, m, k, s) {
  return rotl$2(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}

var ripemd160$1 = RIPEMD160$1;

var Buffer$h = safeBuffer.Buffer; // prototype class for hash functions

function Hash$2(blockSize, finalSize) {
  this._block = Buffer$h.alloc(blockSize);
  this._finalSize = finalSize;
  this._blockSize = blockSize;
  this._len = 0;
}

Hash$2.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8';
    data = Buffer$h.from(data, enc);
  }

  var block = this._block;
  var blockSize = this._blockSize;
  var length = data.length;
  var accum = this._len;

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize;
    var remainder = Math.min(length - offset, blockSize - assigned);

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i];
    }

    accum += remainder;
    offset += remainder;

    if (accum % blockSize === 0) {
      this._update(block);
    }
  }

  this._len += length;
  return this;
};

Hash$2.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize;
  this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

  this._block.fill(0, rem + 1);

  if (rem >= this._finalSize) {
    this._update(this._block);

    this._block.fill(0);
  }

  var bits = this._len * 8; // uint32

  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64

  } else {
    var lowBits = (bits & 0xffffffff) >>> 0;
    var highBits = (bits - lowBits) / 0x100000000;

    this._block.writeUInt32BE(highBits, this._blockSize - 8);

    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
  }

  this._update(this._block);

  var hash = this._hash();

  return enc ? hash.toString(enc) : hash;
};

Hash$2.prototype._update = function () {
  throw new Error('_update must be implemented by subclass');
};

var hash = Hash$2;

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var Buffer$i = safeBuffer.Buffer;
var K$6 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
var W = new Array(80);

function Sha() {
  this.init();
  this._w = W;
  hash.call(this, 64, 56);
}

inherits_browser(Sha, hash);

Sha.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
  return this;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }

  for (; i < 80; ++i) {
    W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
  }

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K$6[s] | 0;
    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha.prototype._hash = function () {
  var H = Buffer$i.allocUnsafe(20);
  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);
  return H;
};

var sha = Sha;

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var Buffer$j = safeBuffer.Buffer;
var K$7 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
var W$1 = new Array(80);

function Sha1() {
  this.init();
  this._w = W$1;
  hash.call(this, 64, 56);
}

inherits_browser(Sha1, hash);

Sha1.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
  return this;
};

function rotl1(num) {
  return num << 1 | num >>> 31;
}

function rotl5$1(num) {
  return num << 5 | num >>> 27;
}

function rotl30$1(num) {
  return num << 30 | num >>> 2;
}

function ft$1(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }

  for (; i < 80; ++i) {
    W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
  }

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$7[s] | 0;
    e = d;
    d = c;
    c = rotl30$1(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha1.prototype._hash = function () {
  var H = Buffer$j.allocUnsafe(20);
  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);
  return H;
};

var sha1$1 = Sha1;

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var Buffer$k = safeBuffer.Buffer;
var K$8 = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
var W$2 = new Array(64);

function Sha256() {
  this.init();
  this._w = W$2; // new Array(64)

  hash.call(this, 64, 56);
}

inherits_browser(Sha256, hash);

Sha256.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;
  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0$1(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1$1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }

  for (; i < 64; ++i) {
    W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
  }

  for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1$1(e) + ch(e, f, g) + K$8[j] + W[j] | 0;
    var T2 = sigma0$1(a) + maj(a, b, c) | 0;
    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256.prototype._hash = function () {
  var H = Buffer$k.allocUnsafe(32);
  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);
  return H;
};

var sha256$1 = Sha256;

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var Buffer$l = safeBuffer.Buffer;
var W$3 = new Array(64);

function Sha224() {
  this.init();
  this._w = W$3; // new Array(64)

  hash.call(this, 64, 56);
}

inherits_browser(Sha224, sha256$1);

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8;
  this._b = 0x367cd507;
  this._c = 0x3070dd17;
  this._d = 0xf70e5939;
  this._e = 0xffc00b31;
  this._f = 0x68581511;
  this._g = 0x64f98fa7;
  this._h = 0xbefa4fa4;
  return this;
};

Sha224.prototype._hash = function () {
  var H = Buffer$l.allocUnsafe(28);
  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  return H;
};

var sha224$1 = Sha224;

var Buffer$m = safeBuffer.Buffer;
var K$9 = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
var W$4 = new Array(160);

function Sha512() {
  this.init();
  this._w = W$4;
  hash.call(this, 128, 112);
}

inherits_browser(Sha512, hash);

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667;
  this._bh = 0xbb67ae85;
  this._ch = 0x3c6ef372;
  this._dh = 0xa54ff53a;
  this._eh = 0x510e527f;
  this._fh = 0x9b05688c;
  this._gh = 0x1f83d9ab;
  this._hh = 0x5be0cd19;
  this._al = 0xf3bcc908;
  this._bl = 0x84caa73b;
  this._cl = 0xfe94f82b;
  this._dl = 0x5f1d36f1;
  this._el = 0xade682d1;
  this._fl = 0x2b3e6c1f;
  this._gl = 0xfb41bd6b;
  this._hl = 0x137e2179;
  return this;
};

function Ch$1(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj$1(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0$2(x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}

function sigma1$2(x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}

function Gamma0(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}

function Gamma0l(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}

function Gamma1(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}

function Gamma1l(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}

function getCarry(a, b) {
  return a >>> 0 < b >>> 0 ? 1 : 0;
}

Sha512.prototype._update = function (M) {
  var W = this._w;
  var ah = this._ah | 0;
  var bh = this._bh | 0;
  var ch = this._ch | 0;
  var dh = this._dh | 0;
  var eh = this._eh | 0;
  var fh = this._fh | 0;
  var gh = this._gh | 0;
  var hh = this._hh | 0;
  var al = this._al | 0;
  var bl = this._bl | 0;
  var cl = this._cl | 0;
  var dl = this._dl | 0;
  var el = this._el | 0;
  var fl = this._fl | 0;
  var gl = this._gl | 0;
  var hl = this._hl | 0;

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4);
    W[i + 1] = M.readInt32BE(i * 4 + 4);
  }

  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2];
    var xl = W[i - 15 * 2 + 1];
    var gamma0 = Gamma0(xh, xl);
    var gamma0l = Gamma0l(xl, xh);
    xh = W[i - 2 * 2];
    xl = W[i - 2 * 2 + 1];
    var gamma1 = Gamma1(xh, xl);
    var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

    var Wi7h = W[i - 7 * 2];
    var Wi7l = W[i - 7 * 2 + 1];
    var Wi16h = W[i - 16 * 2];
    var Wi16l = W[i - 16 * 2 + 1];
    var Wil = gamma0l + Wi7l | 0;
    var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
    Wil = Wil + gamma1l | 0;
    Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
    Wil = Wil + Wi16l | 0;
    Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
    W[i] = Wih;
    W[i + 1] = Wil;
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j];
    Wil = W[j + 1];
    var majh = maj$1(ah, bh, ch);
    var majl = maj$1(al, bl, cl);
    var sigma0h = sigma0$2(ah, al);
    var sigma0l = sigma0$2(al, ah);
    var sigma1h = sigma1$2(eh, el);
    var sigma1l = sigma1$2(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]

    var Kih = K$9[j];
    var Kil = K$9[j + 1];
    var chh = Ch$1(eh, fh, gh);
    var chl = Ch$1(el, fl, gl);
    var t1l = hl + sigma1l | 0;
    var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
    t1l = t1l + chl | 0;
    t1h = t1h + chh + getCarry(t1l, chl) | 0;
    t1l = t1l + Kil | 0;
    t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
    t1l = t1l + Wil | 0;
    t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj

    var t2l = sigma0l + majl | 0;
    var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    el = dl + t1l | 0;
    eh = dh + t1h + getCarry(el, dl) | 0;
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    al = t1l + t2l | 0;
    ah = t1h + t2h + getCarry(al, t1l) | 0;
  }

  this._al = this._al + al | 0;
  this._bl = this._bl + bl | 0;
  this._cl = this._cl + cl | 0;
  this._dl = this._dl + dl | 0;
  this._el = this._el + el | 0;
  this._fl = this._fl + fl | 0;
  this._gl = this._gl + gl | 0;
  this._hl = this._hl + hl | 0;
  this._ah = this._ah + ah + getCarry(this._al, al) | 0;
  this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
  this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
  this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
  this._eh = this._eh + eh + getCarry(this._el, el) | 0;
  this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
  this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
  this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};

Sha512.prototype._hash = function () {
  var H = Buffer$m.allocUnsafe(64);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  writeInt64BE(this._gh, this._gl, 48);
  writeInt64BE(this._hh, this._hl, 56);
  return H;
};

var sha512$1 = Sha512;

var Buffer$n = safeBuffer.Buffer;
var W$5 = new Array(160);

function Sha384() {
  this.init();
  this._w = W$5;
  hash.call(this, 128, 112);
}

inherits_browser(Sha384, sha512$1);

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d;
  this._bh = 0x629a292a;
  this._ch = 0x9159015a;
  this._dh = 0x152fecd8;
  this._eh = 0x67332667;
  this._fh = 0x8eb44a87;
  this._gh = 0xdb0c2e0d;
  this._hh = 0x47b5481d;
  this._al = 0xc1059ed8;
  this._bl = 0x367cd507;
  this._cl = 0x3070dd17;
  this._dl = 0xf70e5939;
  this._el = 0xffc00b31;
  this._fl = 0x68581511;
  this._gl = 0x64f98fa7;
  this._hl = 0xbefa4fa4;
  return this;
};

Sha384.prototype._hash = function () {
  var H = Buffer$n.allocUnsafe(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  return H;
};

var sha384$1 = Sha384;

var sha_js = createCommonjsModule(function (module) {
  var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
  };

  exports.sha = sha;
  exports.sha1 = sha1$1;
  exports.sha224 = sha224$1;
  exports.sha256 = sha256$1;
  exports.sha384 = sha384$1;
  exports.sha512 = sha512$1;
});

function Hash$3(hash) {
  cipherBase.call(this, 'digest');
  this._hash = hash;
}

inherits_browser(Hash$3, cipherBase);

Hash$3.prototype._update = function (data) {
  this._hash.update(data);
};

Hash$3.prototype._final = function () {
  return this._hash.digest();
};

var browser$2 = function createHash(alg) {
  alg = alg.toLowerCase();
  if (alg === 'md5') return new md5_js();
  if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160$1();
  return new Hash$3(sha_js(alg));
};

// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
// @ts-ignore


var _Buffer = safeBuffer.Buffer;

function base(ALPHABET) {
  if (ALPHABET.length >= 255) {
    throw new TypeError('Alphabet too long');
  }

  var BASE_MAP = new Uint8Array(256);
  BASE_MAP.fill(255);

  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);

    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + ' is ambiguous');
    }

    BASE_MAP[xc] = i;
  }

  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

  function encode(source) {
    if (!_Buffer.isBuffer(source)) {
      throw new TypeError('Expected Buffer');
    }

    if (source.length === 0) {
      return '';
    } // Skip & count leading zeroes.


    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;

    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    } // Allocate enough space in big-endian base58 representation.


    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size); // Process the bytes.

    while (pbegin !== pend) {
      var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

      var i = 0;

      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }

      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }

      length = i;
      pbegin++;
    } // Skip leading zeroes in base58 result.


    var it2 = size - length;

    while (it2 !== size && b58[it2] === 0) {
      it2++;
    } // Translate the result into a string.


    var str = LEADER.repeat(zeroes);

    for (; it2 < size; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }

    return str;
  }

  function decodeUnsafe(source) {
    if (typeof source !== 'string') {
      throw new TypeError('Expected String');
    }

    if (source.length === 0) {
      return _Buffer.alloc(0);
    }

    var psz = 0; // Skip leading spaces.

    if (source[psz] === ' ') {
      return;
    } // Skip and count leading '1's.


    var zeroes = 0;
    var length = 0;

    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    } // Allocate enough space in big-endian base256 representation.


    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

    var b256 = new Uint8Array(size); // Process the characters.

    while (source[psz]) {
      // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

      if (carry === 255) {
        return;
      }

      var i = 0;

      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }

      if (carry !== 0) {
        throw new Error('Non-zero carry');
      }

      length = i;
      psz++;
    } // Skip trailing spaces.


    if (source[psz] === ' ') {
      return;
    } // Skip leading zeroes in b256.


    var it4 = size - length;

    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }

    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));

    vch.fill(0x00, 0, zeroes);
    var j = zeroes;

    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }

    return vch;
  }

  function decode(string) {
    var buffer = decodeUnsafe(string);

    if (buffer) {
      return buffer;
    }

    throw new Error('Non-base' + BASE + ' character');
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
}

var src$1 = base;

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var bs58 = src$1(ALPHABET);

var Buffer$o = safeBuffer.Buffer;

var base$1 = function base(checksumFn) {
  // Encode a buffer as a base58-check encoded string
  function encode(payload) {
    var checksum = checksumFn(payload);
    return bs58.encode(Buffer$o.concat([payload, checksum], payload.length + 4));
  }

  function decodeRaw(buffer) {
    var payload = buffer.slice(0, -4);
    var checksum = buffer.slice(-4);
    var newChecksum = checksumFn(payload);
    if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
    return payload;
  } // Decode a base58-check encoded string to a buffer, no result if checksum is wrong


  function decodeUnsafe(string) {
    var buffer = bs58.decodeUnsafe(string);
    if (!buffer) return;
    return decodeRaw(buffer);
  }

  function decode(string) {
    var buffer = bs58.decode(string);
    var payload = decodeRaw(buffer);
    if (!payload) throw new Error('Invalid checksum');
    return payload;
  }

  return {
    encode: encode,
    decode: decode,
    decodeUnsafe: decodeUnsafe
  };
};

function sha256x2(buffer) {
  var tmp = browser$2('sha256').update(buffer).digest();
  return browser$2('sha256').update(tmp).digest();
}

var bs58check = base$1(sha256x2);

function decodeRaw(buffer, version) {
  // check version only if defined
  if (version !== undefined && buffer[0] !== version) throw new Error('Invalid network version'); // uncompressed

  if (buffer.length === 33) {
    return {
      version: buffer[0],
      privateKey: buffer.slice(1, 33),
      compressed: false
    };
  } // invalid length


  if (buffer.length !== 34) throw new Error('Invalid WIF length'); // invalid compression flag

  if (buffer[33] !== 0x01) throw new Error('Invalid compression flag');
  return {
    version: buffer[0],
    privateKey: buffer.slice(1, 33),
    compressed: true
  };
}

function encodeRaw(version, privateKey, compressed) {
  var result = new Buffer(compressed ? 34 : 33);
  result.writeUInt8(version, 0);
  privateKey.copy(result, 1);

  if (compressed) {
    result[33] = 0x01;
  }

  return result;
}

function decode$9(string, version) {
  return decodeRaw(bs58check.decode(string), version);
}

function encode$9(version, privateKey, compressed) {
  if (typeof version === 'number') return bs58check.encode(encodeRaw(version, privateKey, compressed));
  return bs58check.encode(encodeRaw(version.version, version.privateKey, version.compressed));
}

var wif$4 = {
  decode: decode$9,
  decodeRaw: decodeRaw,
  encode: encode$9,
  encodeRaw: encodeRaw
};

class Keys {
  static fromPassphrase(passphrase) {
    var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return Keys.fromPrivateKey(HashAlgorithms.sha256(Buffer.from(passphrase, "utf8")), compressed);
  }

  static fromPrivateKey(privateKey) {
    var compressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    privateKey = privateKey instanceof Buffer ? privateKey : Buffer.from(privateKey, "hex");
    return {
      publicKey: bcrypto.secp256k1.publicKeyCreate(privateKey, compressed).toString("hex"),
      privateKey: privateKey.toString("hex"),
      compressed
    };
  }

  static fromWIF(wifKey, network) {
    if (!network) {
      network = configManager.get("network");
    }

    var {
      version,
      compressed,
      privateKey
    } = wif$4.decode(wifKey, network.wif);

    if (version !== network.wif) {
      throw new NetworkVersionError(network.wif, version);
    }

    return {
      publicKey: bcrypto.secp256k1.publicKeyCreate(privateKey, compressed).toString("hex"),
      privateKey: privateKey.toString("hex"),
      compressed
    };
  }

}

class PublicKey {
  static fromPassphrase(passphrase) {
    return Keys.fromPassphrase(passphrase).publicKey;
  }

  static fromWIF(wif, network) {
    return Keys.fromWIF(wif, network).publicKey;
  }

  static fromMultiSignatureAsset(asset) {
    var {
      min,
      publicKeys
    } = asset;

    for (var publicKey of publicKeys) {
      if (!/^[0-9A-Fa-f]{66}$/.test(publicKey)) {
        throw new PublicKeyError(publicKey);
      }
    }

    if (min < 1 || min > publicKeys.length) {
      throw new InvalidMultiSignatureAssetError();
    }

    var minKey = PublicKey.fromPassphrase(numberToHex$1(min));
    var keys = [minKey, ...publicKeys];
    return keys.reduce((previousValue, currentValue) => bcrypto.secp256k1.publicKeyAdd(Buffer.from(previousValue, "hex"), Buffer.from(currentValue, "hex"), true).toString("hex"));
  }

  static validate(publicKey, networkVersion) {
    if (!networkVersion) {
      networkVersion = configManager.get("network.pubKeyHash");
    }

    try {
      return Address.fromPublicKey(publicKey, networkVersion).length === 34;
    } catch (e) {
      return false;
    }
  }

}

class Address {
  static fromPassphrase(passphrase, networkVersion) {
    return Address.fromPublicKey(PublicKey.fromPassphrase(passphrase), networkVersion);
  }

  static fromPublicKey(publicKey, networkVersion) {
    if (!/^[0-9A-Fa-f]{66}$/.test(publicKey)) {
      throw new PublicKeyError(publicKey);
    }

    if (!networkVersion) {
      networkVersion = configManager.get("network.pubKeyHash");
    }

    var buffer = HashAlgorithms.ripemd160(Buffer.from(publicKey, "hex"));
    var payload = Buffer.alloc(21);
    payload.writeUInt8(networkVersion, 0);
    buffer.copy(payload, 1);
    return this.fromBuffer(payload);
  }

  static fromWIF(wif, network) {
    return Address.fromPublicKey(PublicKey.fromWIF(wif, network));
  }

  static fromMultiSignatureAsset(asset, networkVersion) {
    return this.fromPublicKey(PublicKey.fromMultiSignatureAsset(asset), networkVersion);
  }

  static fromPrivateKey(privateKey, networkVersion) {
    return Address.fromPublicKey(privateKey.publicKey, networkVersion);
  }

  static fromBuffer(buffer) {
    return Base58.encodeCheck(buffer);
  }

  static toBuffer(address) {
    var buffer = Base58.decodeCheck(address);
    var networkVersion = configManager.get("network.pubKeyHash");
    var result = {
      addressBuffer: buffer
    };

    if (buffer[0] !== networkVersion) {
      result.addressError = "Expected address network byte ".concat(networkVersion, ", but got ").concat(buffer[0], ".");
    }

    return result;
  }

  static validate(address, networkVersion) {
    if (!networkVersion) {
      networkVersion = configManager.get("network.pubKeyHash");
    }

    try {
      return Base58.decodeCheck(address)[0] === networkVersion;
    } catch (err) {
      return false;
    }
  }

}

class PrivateKey {
  static fromPassphrase(passphrase) {
    return Keys.fromPassphrase(passphrase).privateKey;
  }

  static fromWIF(wif, network) {
    return Keys.fromWIF(wif, network).privateKey;
  }

}

class WIF {
  static fromPassphrase(passphrase, network) {
    var keys = Keys.fromPassphrase(passphrase);

    if (!network) {
      network = configManager.get("network");
    }

    return wif$4.encode(network.wif, Buffer.from(keys.privateKey, "hex"), keys.compressed);
  }

  static fromKeys(keys, network) {
    if (!network) {
      network = configManager.get("network");
    }

    return wif$4.encode(network.wif, Buffer.from(keys.privateKey, "hex"), keys.compressed);
  }

}

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Address: Address,
  Keys: Keys,
  PrivateKey: PrivateKey,
  PublicKey: PublicKey,
  WIF: WIF
});

var SCRYPT_PARAMS = {
  N: 16384,
  r: 8,
  p: 8
};
var NULL$1 = Buffer.alloc(0);

var getPublicKey = (buffer, compressed) => {
  return Buffer.from(Keys.fromPrivateKey(buffer, compressed).publicKey, "hex");
};

var getAddressPrivate = (privateKey, compressed) => {
  var publicKey = getPublicKey(privateKey, compressed);
  var buffer = HashAlgorithms.hash160(publicKey);
  var payload = Buffer.alloc(21);
  payload.writeUInt8(0x00, 0);
  buffer.copy(payload, 1);
  return Base58.encodeCheck(payload);
};

var verify$3 = bip38 => {
  var decoded;

  try {
    decoded = Base58.decodeCheck(bip38);
  } catch (_unused) {
    return false;
  }

  if (!decoded) {
    return false;
  }

  if (decoded.length !== 39) {
    return false;
  }

  if (decoded.readUInt8(0) !== 0x01) {
    return false;
  }

  var type = decoded.readUInt8(1);
  var flag = decoded.readUInt8(2); // encrypted WIF

  if (type === 0x42) {
    if (flag !== 0xc0 && flag !== 0xe0) {
      return false;
    } // EC mult

  } else if (type === 0x43) {
    if (flag & ~0x24) {
      return false;
    }
  } else {
    return false;
  }

  return true;
};

var encryptRaw$1 = (buffer, compressed, passphrase) => {
  if (buffer.length !== 32) {
    throw new PrivateKeyLengthError(32, buffer.length);
  }

  var address = getAddressPrivate(buffer, compressed);
  var secret = Buffer.from(passphrase, "utf8");
  var salt = HashAlgorithms.hash256(address).slice(0, 4);
  var scryptBuf = crypto_1.scryptSync(secret, salt, 64, SCRYPT_PARAMS);
  var derivedHalf1 = scryptBuf.slice(0, 32);
  var derivedHalf2 = scryptBuf.slice(32, 64);
  var xorBuf = inplace(derivedHalf1, buffer);
  var cipher = browser$1.createCipheriv("aes-256-ecb", derivedHalf2, NULL$1);
  cipher.setAutoPadding(false);
  cipher.end(xorBuf);
  var cipherText = cipher.read(); // 0x01 | 0x42 | flagByte | salt (4) | cipherText (32)

  var result = Buffer.allocUnsafe(7 + 32);
  result.writeUInt8(0x01, 0);
  result.writeUInt8(0x42, 1);
  result.writeUInt8(compressed ? 0xe0 : 0xc0, 2);
  salt.copy(result, 3);
  cipherText.copy(result, 7);
  return result;
};

var decryptECMult = (buffer, passphrase) => {
  buffer = buffer.slice(1);
  var flag = buffer.readUInt8(1);
  var compressed = (flag & 0x20) !== 0;
  var hasLotSeq = (flag & 0x04) !== 0;
  assert.strictEqual(flag & 0x24, flag, "Invalid private key.");
  var addressHash = buffer.slice(2, 6);
  var ownerEntropy = buffer.slice(6, 14);
  var ownerSalt; // 4 bytes ownerSalt if 4 bytes lot/sequence

  if (hasLotSeq) {
    ownerSalt = ownerEntropy.slice(0, 4); // else, 8 bytes ownerSalt
  } else {
    ownerSalt = ownerEntropy;
  }

  var encryptedPart1 = buffer.slice(14, 22); // First 8 bytes

  var encryptedPart2 = buffer.slice(22, 38); // 16 bytes

  var preFactor = crypto_1.scryptSync(passphrase, ownerSalt, 32, SCRYPT_PARAMS);
  var passFactor;

  if (hasLotSeq) {
    var hashTarget = Buffer.concat([preFactor, ownerEntropy]);
    passFactor = HashAlgorithms.hash256(hashTarget);
  } else {
    passFactor = preFactor;
  }

  var publicKey = getPublicKey(passFactor, true);
  var seedBPass = crypto_1.scryptSync(publicKey, Buffer.concat([addressHash, ownerEntropy]), 64, {
    N: 1024,
    r: 1,
    p: 1
  });
  var derivedHalf1 = seedBPass.slice(0, 32);
  var derivedHalf2 = seedBPass.slice(32, 64);
  var decipher = browser$1.createDecipheriv("aes-256-ecb", derivedHalf2, Buffer.alloc(0));
  decipher.setAutoPadding(false);
  decipher.end(encryptedPart2);
  var decryptedPart2 = decipher.read();
  var tmp = inplace(decryptedPart2, derivedHalf1.slice(16, 32));
  var seedBPart2 = tmp.slice(8, 16);
  var decipher2 = browser$1.createDecipheriv("aes-256-ecb", derivedHalf2, Buffer.alloc(0));
  decipher2.setAutoPadding(false);
  decipher2.write(encryptedPart1); // first 8 bytes

  decipher2.end(tmp.slice(0, 8)); // last 8 bytes

  var seedBPart1 = inplace(decipher2.read(), derivedHalf1.slice(0, 16));
  var seedB = Buffer.concat([seedBPart1, seedBPart2], 24);
  var privateKey = bcrypto.secp256k1.privateKeyTweakMul(HashAlgorithms.hash256(seedB), passFactor);
  return {
    privateKey,
    compressed
  };
}; // some of the techniques borrowed from: https://github.com/pointbiz/bitaddress.org


var decryptRaw$1 = (buffer, passphrase) => {
  // 39 bytes: 2 bytes prefix, 37 bytes payload
  if (buffer.length !== 39) {
    throw new Bip38LengthError(39, buffer.length);
  }

  if (buffer.readUInt8(0) !== 0x01) {
    throw new Bip38PrefixError(0x01, buffer.readUInt8(0));
  } // check if BIP38 EC multiply


  var type = buffer.readUInt8(1);

  if (type === 0x43) {
    return decryptECMult(buffer, passphrase);
  }

  if (type !== 0x42) {
    throw new Bip38TypeError(0x42, type);
  }

  var flagByte = buffer.readUInt8(2);
  var compressed = flagByte === 0xe0;

  if (!compressed && flagByte !== 0xc0) {
    throw new Bip38CompressionError(0xc0, flagByte);
  }

  var salt = buffer.slice(3, 7);
  var scryptBuf = crypto_1.scryptSync(passphrase, salt, 64, SCRYPT_PARAMS);
  var derivedHalf1 = scryptBuf.slice(0, 32);
  var derivedHalf2 = scryptBuf.slice(32, 64);
  var privKeyBuf = buffer.slice(7, 7 + 32);
  var decipher = browser$1.createDecipheriv("aes-256-ecb", derivedHalf2, NULL$1);
  decipher.setAutoPadding(false);
  decipher.end(privKeyBuf);
  var plainText = decipher.read();
  var privateKey = inplace(derivedHalf1, plainText); // verify salt matches address

  var address = getAddressPrivate(privateKey, compressed);
  var checksum = HashAlgorithms.hash256(address).slice(0, 4);
  assert.deepEqual(salt, checksum);
  return {
    privateKey,
    compressed
  };
};

var encrypt$c = (privateKey, compressed, passphrase) => {
  return Base58.encodeCheck(encryptRaw$1(privateKey, compressed, passphrase));
};
var decrypt$6 = (bip38, passphrase) => {
  return decryptRaw$1(Base58.decodeCheck(bip38), passphrase);
};

var bip38 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  verify: verify$3,
  encrypt: encrypt$c,
  decrypt: decrypt$6
});

class Hash$4 {
  static signECDSA(hash, keys) {
    return bcrypto.secp256k1.signatureExport(bcrypto.secp256k1.sign(hash, Buffer.from(keys.privateKey, "hex"))).toString("hex");
  }

  static verifyECDSA(hash, signature, publicKey) {
    var signatureRS = bcrypto.secp256k1.signatureImport(signature instanceof Buffer ? signature : Buffer.from(signature, "hex"));

    if (!bcrypto.secp256k1.isLowS(signatureRS)) {
      return false;
    }

    return bcrypto.secp256k1.verify(hash, signatureRS, publicKey instanceof Buffer ? publicKey : Buffer.from(publicKey, "hex"));
  }

  static signSchnorr(hash, keys) {
    return bcrypto.secp256k1.schnorrSign(hash, Buffer.from(keys.privateKey, "hex")).toString("hex");
  }

  static verifySchnorr(hash, signature, publicKey) {
    return bcrypto.secp256k1.schnorrVerify(hash, signature instanceof Buffer ? signature : Buffer.from(signature, "hex"), publicKey instanceof Buffer ? publicKey : Buffer.from(publicKey, "hex"));
  }

}

class HashAlgorithms {
  static ripemd160(buffer) {
    return bcrypto.RIPEMD160.digest(this.bufferize(buffer));
  }

  static sha1(buffer) {
    return bcrypto.SHA1.digest(this.bufferize(buffer));
  }

  static sha256(buffer) {
    if (Array.isArray(buffer)) {
      var sha256 = bcrypto.SHA256.ctx;
      sha256.init();

      for (var element of buffer) {
        sha256 = sha256.update(element);
      }

      return sha256.final();
    }

    return bcrypto.SHA256.digest(this.bufferize(buffer));
  }

  static hash160(buffer) {
    return bcrypto.Hash160.digest(this.bufferize(buffer));
  }

  static hash256(buffer) {
    return bcrypto.Hash256.digest(this.bufferize(buffer));
  }

  static bufferize(buffer) {
    return buffer instanceof Buffer ? buffer : Buffer.from(buffer);
  }

}

var Buffer$p = safeBuffer.Buffer;
var ZEROS = Buffer$p.alloc(128);
var blocksize = 64;

function Hmac(alg, key) {
  cipherBase.call(this, 'digest');

  if (typeof key === 'string') {
    key = Buffer$p.from(key);
  }

  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    key = alg(key);
  } else if (key.length < blocksize) {
    key = Buffer$p.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer$p.allocUnsafe(blocksize);
  var opad = this._opad = Buffer$p.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = [ipad];
}

inherits_browser(Hmac, cipherBase);

Hmac.prototype._update = function (data) {
  this._hash.push(data);
};

Hmac.prototype._final = function () {
  var h = this._alg(Buffer$p.concat(this._hash));

  return this._alg(Buffer$p.concat([this._opad, h]));
};

var legacy = Hmac;

var md5$1 = function md5(buffer) {
  return new md5_js().update(buffer).digest();
};

var Buffer$q = safeBuffer.Buffer;
var ZEROS$1 = Buffer$q.alloc(128);

function Hmac$1(alg, key) {
  cipherBase.call(this, 'digest');

  if (typeof key === 'string') {
    key = Buffer$q.from(key);
  }

  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new ripemd160$1() : sha_js(alg);
    key = hash.update(key).digest();
  } else if (key.length < blocksize) {
    key = Buffer$q.concat([key, ZEROS$1], blocksize);
  }

  var ipad = this._ipad = Buffer$q.allocUnsafe(blocksize);
  var opad = this._opad = Buffer$q.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = alg === 'rmd160' ? new ripemd160$1() : sha_js(alg);

  this._hash.update(ipad);
}

inherits_browser(Hmac$1, cipherBase);

Hmac$1.prototype._update = function (data) {
  this._hash.update(data);
};

Hmac$1.prototype._final = function () {
  var h = this._hash.digest();

  var hash = this._alg === 'rmd160' ? new ripemd160$1() : sha_js(this._alg);
  return hash.update(this._opad).update(h).digest();
};

var browser$3 = function createHmac(alg, key) {
  alg = alg.toLowerCase();

  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac$1('rmd160', key);
  }

  if (alg === 'md5') {
    return new legacy(md5$1, key);
  }

  return new Hmac$1(alg, key);
};

var crypto$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function hash160(buffer) {
    var sha256Hash = browser$2('sha256').update(buffer).digest();

    try {
      return browser$2('rmd160').update(sha256Hash).digest();
    } catch (err) {
      return browser$2('ripemd160').update(sha256Hash).digest();
    }
  }

  exports.hash160 = hash160;

  function hmacSHA512(key, data) {
    return browser$3('sha512', key).update(data).digest();
  }

  exports.hmacSHA512 = hmacSHA512;
});

var _nodeResolve_empty = {};

var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': _nodeResolve_empty
});

var require$$0 = getCjsExportFromNamespace(_nodeResolve_empty$1);

var bn$1 = createCommonjsModule(function (module) {
  (function (module, exports) {

    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    } // Could use `inherits` module, but don't want to move from single file
    // architecture yet.


    function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    } // BN


    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0; // Reduction context

      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }

    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;

    try {
      Buffer = require$$0.Buffer;
    } catch (e) {}

    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max(left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min(left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init(number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }

      assert(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, '');
      var start = 0;

      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();
      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }

      if (number < 0x4000000) {
        this.words = [number & 0x3ffffff];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
        this.length = 3;
      }

      if (endian !== 'le') return; // Reverse the bytes

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray(number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');

      if (number.length <= 0) {
        this.words = [0];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);

      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;

      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;

          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
          this.words[j] |= w << off & 0x3ffffff;
          this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
          off += 24;

          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }

      return this.strip();
    };

    function parseHex(str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);

      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r <<= 4; // 'a' - 'f'

        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa; // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa; // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }

      return r;
    }

    BN.prototype._parseHex = function _parseHex(number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);

      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w; // Scan 24-bit chunks and add them to the number

      var off = 0;

      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }

      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      }

      this.strip();
    };

    function parseBase(str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);

      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;
        r *= mul; // 'a'

        if (c >= 49) {
          r += c - 49 + 0xa; // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa; // '0' - '9'
        } else {
          r += c;
        }
      }

      return r;
    }

    BN.prototype._parseBase = function _parseBase(number, base, start) {
      // Initialize as zero
      this.words = [0];
      this.length = 1; // Find length of limb in base

      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }

      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;

      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);
        this.imuln(limbPow);

        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);

        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy(dest) {
      dest.words = new Array(this.length);

      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }

      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone() {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand(size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }

      return this;
    }; // Remove leading `0` from `this`


    BN.prototype.strip = function strip() {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }

      return this._normSign();
    };

    BN.prototype._normSign = function _normSign() {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }

      return this;
    };

    BN.prototype.inspect = function inspect() {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*
     var zeros = [];
    var groupSizes = [];
    var groupBases = [];
     var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }
     */


    var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

    BN.prototype.toString = function toString(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;

      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;

        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = ((w << off | carry) & 0xffffff).toString(16);
          carry = w >>> 24 - off & 0xffffff;

          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }

          off += 2;

          if (off >= 26) {
            off -= 26;
            i--;
          }
        }

        if (carry !== 0) {
          out = carry.toString(16) + out;
        }

        while (out.length % padding !== 0) {
          out = '0' + out;
        }

        if (this.negative !== 0) {
          out = '-' + out;
        }

        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;

        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }

        if (this.isZero()) {
          out = '0' + out;
        }

        while (out.length % padding !== 0) {
          out = '0' + out;
        }

        if (this.negative !== 0) {
          out = '-' + out;
        }

        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber() {
      var ret = this.words[0];

      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }

      return this.negative !== 0 ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON() {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');
      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);
      var b, i;
      var q = this.clone();

      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);
          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;

        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }

        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }

        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }

        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }

        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits(w) {
      // Short-cut
      if (w === 0) return 26;
      var t = w;
      var r = 0;

      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }

      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }

      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }

      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }

      if ((t & 0x1) === 0) {
        r++;
      }

      return r;
    }; // Return number of used bits in a BN


    BN.prototype.bitLength = function bitLength() {
      var w = this.words[this.length - 1];

      var hi = this._countBits(w);

      return (this.length - 1) * 26 + hi;
    };

    function toBitArray(num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
      }

      return w;
    } // Number of trailing zero bits


    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero()) return 0;
      var r = 0;

      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);

        r += b;
        if (b !== 26) break;
      }

      return r;
    };

    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos(width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }

      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }

      return this.clone();
    };

    BN.prototype.isNeg = function isNeg() {
      return this.negative !== 0;
    }; // Return negative clone of `this`


    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    }; // Or `num` with `this` in-place


    BN.prototype.iuor = function iuor(num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    }; // Or `num` with `this`


    BN.prototype.or = function or(num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor(num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    }; // And `num` with `this` in-place


    BN.prototype.iuand = function iuand(num) {
      // b = min-length(num, this)
      var b;

      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;
      return this.strip();
    };

    BN.prototype.iand = function iand(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    }; // And `num` with `this`


    BN.prototype.and = function and(num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand(num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    }; // Xor `num` with `this` in-place


    BN.prototype.iuxor = function iuxor(num) {
      // a.length > b.length
      var a;
      var b;

      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;
      return this.strip();
    };

    BN.prototype.ixor = function ixor(num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    }; // Xor `num` with `this`


    BN.prototype.xor = function xor(num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor(num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    }; // Not ``this`` with ``width`` bitwidth


    BN.prototype.inotn = function inotn(width) {
      assert(typeof width === 'number' && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26; // Extend the buffer with leading zeroes

      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      } // Handle complete words


      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      } // Handle the residue


      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
      } // And remove leading zeroes


      return this.strip();
    };

    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    }; // Set `bit` of `this`


    BN.prototype.setn = function setn(bit, val) {
      assert(typeof bit === 'number' && bit >= 0);
      var off = bit / 26 | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | 1 << wbit;
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    }; // Add `num` to `this` in-place


    BN.prototype.iadd = function iadd(num) {
      var r; // negative + positive

      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign(); // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      } // a.length > b.length


      var a, b;

      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;

      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;

      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++; // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    }; // Add `num` to `this`


    BN.prototype.add = function add(num) {
      var res;

      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);
      return num.clone().iadd(this);
    }; // Subtract `num` from `this` in-place


    BN.prototype.isub = function isub(num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign(); // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      } // At this point both numbers are positive


      var cmp = this.cmp(num); // Optimization - zeroify

      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      } // a > b


      var a, b;

      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;

      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      } // Copy rest of the words


      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    }; // Subtract `num` from `this`


    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };

    function smallMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = self.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;
      var lo = r & 0x3ffffff;
      var carry = r / 0x4000000 | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);

        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += r / 0x4000000 | 0;
          rword = r & 0x3ffffff;
        }

        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }

      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    } // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).


    var comb10MulTo = function comb10MulTo(self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;
      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */

      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */

      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */

      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */

      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */

      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */

      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */

      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */

      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */

      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */

      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */

      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */

      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */

      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */

      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */

      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */

      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */

      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */

      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */

      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
      c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;

      if (c !== 0) {
        o[19] = c;
        out.length++;
      }

      return out;
    }; // Polyfill comb


    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo(self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;
      var carry = 0;
      var hncarry = 0;

      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);

        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;
          var lo = r & 0x3ffffff;
          ncarry = ncarry + (r / 0x4000000 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 0x3ffffff;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }

        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }

      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo(self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = this.length + num.length;

      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    }; // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion


    function FFTM(x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT(N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;

      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    }; // Returns binary-reversed representation of `x`


    FFTM.prototype.revBin = function revBin(x, l, N) {
      if (x === 0 || x === N - 1) return x;
      var rb = 0;

      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << l - i - 1;
        x >>= 1;
      }

      return rb;
    }; // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm


    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;
        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];
            var ro = rtws[p + j + s];
            var io = itws[p + j + s];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;
            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;
            /* jshint maxdepth : false */

            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;

      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];
        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;
        t = iws[i];
        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
      var carry = 0;

      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
      var carry = 0;

      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);
        rws[2 * i] = carry & 0x1fff;
        carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff;
        carry = carry >>> 13;
      } // Pad with zeroes


      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub(N) {
      var ph = new Array(N);

      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp(x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);
      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);
      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);
      var rmws = out.words;
      rmws.length = N;
      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);
      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);
      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    }; // Multiply `this` by `num`


    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    }; // Multiply employing FFT


    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    }; // In-place Multiplication


    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000); // Carry

      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    }; // `this` * `this`


    BN.prototype.sqr = function sqr() {
      return this.mul(this);
    }; // `this` * `this` in-place


    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    }; // Math.pow(`this`, `num`)


    BN.prototype.pow = function pow(num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1); // Skip leading zeroes

      var res = this;

      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;
          res = res.mul(q);
        }
      }

      return res;
    }; // Shift-left in-place


    BN.prototype.iushln = function iushln(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = (this.words[i] | 0) - newCarry << r;
          this.words[i] = c | carry;
          carry = newCarry >>> 26 - r;
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln(bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    }; // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits


    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;

      if (hint) {
        h = (hint - hint % 26) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      var maskedWords = extended;
      h -= s;
      h = Math.max(0, h); // Extended mode, copy masked part

      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }

        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;

        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;

      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = carry << 26 - r | word >>> r;
        carry = word & mask;
      } // Push carried bits as a mask


      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    }; // Shift-left


    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    }; // Shift-right


    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    }; // Test if n bit is set


    BN.prototype.testn = function testn(bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r; // Fast case: bit is much higher than all existing words

      if (this.length <= s) return false; // Check bit and return

      var w = this.words[s];
      return !!(w & q);
    }; // Return only lowers bits of number (in-place)


    BN.prototype.imaskn = function imaskn(bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }

      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    }; // Return only lowers bits of number


    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    }; // Add plain number `num` to `this`


    BN.prototype.iaddn = function iaddn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num); // Possible sign change

      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      } // Add without checks


      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn(num) {
      this.words[0] += num; // Carry

      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;

        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }

      this.length = Math.max(this.length, i + 1);
      return this;
    }; // Subtract plain number `num` from `this`


    BN.prototype.isubn = function isubn(num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs() {
      this.negative = 0;
      return this;
    };

    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;

      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - (right / 0x4000000 | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }

      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip(); // Subtraction overflow

      assert(carry === -1);
      carry = 0;

      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }

      this.negative = 1;
      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = this.length - num.length;
      var a = this.clone();
      var b = num; // Normalize

      var bhi = b.words[b.length - 1] | 0;

      var bhiBits = this._countBits(bhi);

      shift = 26 - bhiBits;

      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      } // Initialize quotient


      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);

        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);

      if (diff.negative === 0) {
        a = diff;

        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)

        qj = Math.min(qj / bhi | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);

        while (a.negative !== 0) {
          qj--;
          a.negative = 0;

          a._ishlnsubmul(b, 1, j);

          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }

        if (q) {
          q.words[j] = qj;
        }
      }

      if (q) {
        q.strip();
      }

      a.strip(); // Denormalize

      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested


    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;

      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();

          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();

          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      } // Both numbers are positive at this point
      // Strip both numbers to approximate shift value


      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      } // Very short reduction


      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    }; // Find `this` / `num`


    BN.prototype.div = function div(num) {
      return this.divmod(num, 'div', false).div;
    }; // Find `this` % `num`


    BN.prototype.mod = function mod(num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod(num) {
      return this.divmod(num, 'mod', true).mod;
    }; // Find Round(`this` / `num`)


    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num); // Fast case - exact division

      if (dm.mod.isZero()) return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half); // Round down

      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn(num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;
      var acc = 0;

      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    }; // In-place division by number


    BN.prototype.idivn = function idivn(num) {
      assert(num <= 0x3ffffff);
      var carry = 0;

      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = w / num | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      } // A * x + B * y = x


      var A = new BN(1);
      var B = new BN(0); // C * x + D * y = y

      var C = new BN(0);
      var D = new BN(1);
      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
        }

        if (i > 0) {
          x.iushrn(i);

          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
        }

        if (j > 0) {
          y.iushrn(j);

          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    }; // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed


    BN.prototype._invmp = function _invmp(p) {
      assert(p.negative === 0);
      assert(!p.isZero());
      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);
      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
        }

        if (i > 0) {
          a.iushrn(i);

          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
        }

        if (j > 0) {
          b.iushrn(j);

          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;

      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd(num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();
      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0; // Remove common factor of two

      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }

        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);

        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    }; // Invert number in the field F(num)


    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven() {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd() {
      return (this.words[0] & 1) === 1;
    }; // And first word and num


    BN.prototype.andln = function andln(num) {
      return this.words[0] & num;
    }; // Increment at the bit position in-line


    BN.prototype.bincn = function bincn(bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r; // Fast case: bit is much higher than all existing words

      if (this.length <= s) {
        this._expand(s + 1);

        this.words[s] |= q;
        return this;
      } // Add bit and propagate, if needed


      var carry = q;

      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.isZero = function isZero() {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;
      this.strip();
      var res;

      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');
        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }

      if (this.negative !== 0) return -res | 0;
      return res;
    }; // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`


    BN.prototype.cmp = function cmp(num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;
      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    }; // Unsigned comparison


    BN.prototype.ucmp = function ucmp(num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;
      var res = 0;

      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;
        if (a === b) continue;

        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }

        break;
      }

      return res;
    };

    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    }; //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //


    BN.red = function red(num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed() {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed(ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed(ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd(num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd(num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub(num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub(num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl(num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul(num) {
      assert(this.red, 'redMul works only with red numbers');

      this.red._verify2(this, num);

      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul(num) {
      assert(this.red, 'redMul works only with red numbers');

      this.red._verify2(this, num);

      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr() {
      assert(this.red, 'redSqr works only with red numbers');

      this.red._verify1(this);

      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr() {
      assert(this.red, 'redISqr works only with red numbers');

      this.red._verify1(this);

      return this.red.isqr(this);
    }; // Square root over p


    BN.prototype.redSqrt = function redSqrt() {
      assert(this.red, 'redSqrt works only with red numbers');

      this.red._verify1(this);

      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm() {
      assert(this.red, 'redInvm works only with red numbers');

      this.red._verify1(this);

      return this.red.invm(this);
    }; // Return negative clone of `this` % `red modulo`


    BN.prototype.redNeg = function redNeg() {
      assert(this.red, 'redNeg works only with red numbers');

      this.red._verify1(this);

      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow(num) {
      assert(this.red && !num.red, 'redPow(normalNum)');

      this.red._verify1(this);

      return this.red.pow(this, num);
    }; // Prime numbers with efficient reduction


    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    }; // Pseudo-Mersenne prime

    function MPrime(name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);
      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce(num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split(input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK(num) {
      return num.imul(this.k);
    };

    function K256() {
      MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }

    inherits(K256, MPrime);

    K256.prototype.split = function split(input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;
      var outLen = Math.min(input.length, 9);

      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }

      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      } // Shift by 9 limbs


      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }

      prev >>>= 22;
      input.words[i - 10] = prev;

      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK(num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

      var lo = 0;

      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + (lo / 0x4000000 | 0);
      } // Fast length reduction


      if (num.words[num.length - 1] === 0) {
        num.length--;

        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }

      return num;
    };

    function P224() {
      MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }

    inherits(P224, MPrime);

    function P192() {
      MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }

    inherits(P192, MPrime);

    function P25519() {
      // 2 ^ 255 - 19
      MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }

    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK(num) {
      // K = 0x13
      var carry = 0;

      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;
        num.words[i] = lo;
        carry = hi;
      }

      if (carry !== 0) {
        num.words[num.length++] = carry;
      }

      return num;
    }; // Exported mostly for testing purposes, use plain name instead


    BN._prime = function prime(name) {
      // Cached version of prime
      if (primes[name]) return primes[name];
      var prime;

      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }

      primes[name] = prime;
      return prime;
    }; //
    // Base reduction engine
    //


    function Red(m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);

        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1(a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2(a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red, 'red works only with red numbers');
    };

    Red.prototype.imod = function imod(a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg(a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add(a, b) {
      this._verify2(a, b);

      var res = a.add(b);

      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }

      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd(a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);

      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }

      return res;
    };

    Red.prototype.sub = function sub(a, b) {
      this._verify2(a, b);

      var res = a.sub(b);

      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Red.prototype.isub = function isub(a, b) {
      this._verify2(a, b);

      var res = a.isub(b);

      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }

      return res;
    };

    Red.prototype.shl = function shl(a, num) {
      this._verify1(a);

      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul(a, b) {
      this._verify2(a, b);

      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul(a, b) {
      this._verify2(a, b);

      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr(a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr(a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt(a) {
      if (a.isZero()) return a.clone();
      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1); // Fast case

      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)


      var q = this.m.subn(1);
      var s = 0;

      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }

      assert(!q.isZero());
      var one = new BN(1).toRed(this);
      var nOne = one.redNeg(); // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.

      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;

      while (t.cmp(one) !== 0) {
        var tmp = t;

        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }

        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));
        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm(a) {
      var inv = a._invmp(this.m);

      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow(a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;

      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;

      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];

        for (var j = start - 1; j >= 0; j--) {
          var bit = word >> j & 1;

          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }

        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo(num) {
      var r = num.umod(this.m);
      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    }; //
    // Montgomery method engine
    //


    BN.mont = function mont(num) {
      return new Mont(num);
    };

    function Mont(m) {
      Red.call(this, m);
      this.shift = this.m.bitLength();

      if (this.shift % 26 !== 0) {
        this.shift += 26 - this.shift % 26;
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);
      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }

    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom(num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul(a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul(a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm(a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })( module, commonjsGlobal);
});

var name$4 = "elliptic";
var version$5 = "6.5.1";
var description = "EC cryptography";
var main = "lib/elliptic.js";
var files = ["lib"];
var scripts = {
  jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
  jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
  lint: "npm run jscs && npm run jshint",
  unit: "istanbul test _mocha --reporter=spec test/index.js",
  test: "npm run lint && npm run unit",
  version: "grunt dist && git add dist/"
};
var repository = {
  type: "git",
  url: "git@github.com:indutny/elliptic"
};
var keywords = ["EC", "Elliptic", "curve", "Cryptography"];
var author = "Fedor Indutny <fedor@indutny.com>";
var license = "MIT";
var bugs = {
  url: "https://github.com/indutny/elliptic/issues"
};
var homepage = "https://github.com/indutny/elliptic";
var devDependencies = {
  brfs: "^1.4.3",
  coveralls: "^3.0.4",
  grunt: "^1.0.4",
  "grunt-browserify": "^5.0.0",
  "grunt-cli": "^1.2.0",
  "grunt-contrib-connect": "^1.0.0",
  "grunt-contrib-copy": "^1.0.0",
  "grunt-contrib-uglify": "^1.0.1",
  "grunt-mocha-istanbul": "^3.0.1",
  "grunt-saucelabs": "^9.0.1",
  istanbul: "^0.4.2",
  jscs: "^3.0.7",
  jshint: "^2.6.0",
  mocha: "^6.1.4"
};
var dependencies = {
  "bn.js": "^4.4.0",
  brorand: "^1.0.1",
  "hash.js": "^1.0.0",
  "hmac-drbg": "^1.0.0",
  inherits: "^2.0.1",
  "minimalistic-assert": "^1.0.0",
  "minimalistic-crypto-utils": "^1.0.0"
};
var _package = {
  name: name$4,
  version: version$5,
  description: description,
  main: main,
  files: files,
  scripts: scripts,
  repository: repository,
  keywords: keywords,
  author: author,
  license: license,
  bugs: bugs,
  homepage: homepage,
  devDependencies: devDependencies,
  dependencies: dependencies
};

var _package$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  name: name$4,
  version: version$5,
  description: description,
  main: main,
  files: files,
  scripts: scripts,
  repository: repository,
  keywords: keywords,
  author: author,
  license: license,
  bugs: bugs,
  homepage: homepage,
  devDependencies: devDependencies,
  dependencies: dependencies,
  'default': _package
});

var minimalisticAssert = assert$4;

function assert$4(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert$4.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

var utils_1 = createCommonjsModule(function (module, exports) {

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];

    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++) {
        res[i] = msg[i] | 0;
      }

      return res;
    }

    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;

      for (var i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    }

    return res;
  }

  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1) return '0' + word;else return word;
  }

  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';

    for (var i = 0; i < msg.length; i++) {
      res += zero2(msg[i].toString(16));
    }

    return res;
  }

  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);else return arr;
  };
});

var utils_1$1 = createCommonjsModule(function (module, exports) {

  var utils = exports;
  utils.assert = minimalisticAssert;
  utils.toArray = utils_1.toArray;
  utils.zero2 = utils_1.zero2;
  utils.toHex = utils_1.toHex;
  utils.encode = utils_1.encode; // Represent num in a w-NAF form

  function getNAF(num, w) {
    var naf = [];
    var ws = 1 << w + 1;
    var k = num.clone();

    while (k.cmpn(1) >= 0) {
      var z;

      if (k.isOdd()) {
        var mod = k.andln(ws - 1);
        if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }

      naf.push(z); // Optimization, shift by word if possible

      var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;

      for (var i = 1; i < shift; i++) {
        naf.push(0);
      }

      k.iushrn(shift);
    }

    return naf;
  }

  utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

  function getJSF(k1, k2) {
    var jsf = [[], []];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;

    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      // First phase
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k2.andln(3) + d2 & 3;
      if (m14 === 3) m14 = -1;
      if (m24 === 3) m24 = -1;
      var u1;

      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
      }

      jsf[0].push(u1);
      var u2;

      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = k2.andln(7) + d2 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
      }

      jsf[1].push(u2); // Second phase

      if (2 * d1 === u1 + 1) d1 = 1 - d1;
      if (2 * d2 === u2 + 1) d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }

  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;

    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
  }

  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
  }

  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new bn$1(bytes, 'hex', 'le');
  }

  utils.intFromLE = intFromLE;
});

var r$1;

var brorand = function rand(len) {
  if (!r$1) r$1 = new Rand(null);
  return r$1.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}

var Rand_1 = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
}; // Emulate crypto API using randy


Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes) return this.rand.getBytes(n);
  var res = new Uint8Array(n);

  for (var i = 0; i < res.length; i++) {
    res[i] = this.rand.getByte();
  }

  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    }; // Safari's WebWorkers do not have `crypto`

  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function () {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto$2 = require$$0;
    if (typeof crypto$2.randomBytes !== 'function') throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto$2.randomBytes(n);
    };
  } catch (e) {}
}
brorand.Rand = Rand_1;

var getNAF$1 = utils_1$1.getNAF;
var getJSF$1 = utils_1$1.getJSF;
var assert$5 = utils_1$1.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn$1(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

  this.red = conf.prime ? bn$1.red(conf.prime) : bn$1.mont(this.p); // Useful for many curves

  this.zero = new bn$1(0).toRed(this.red);
  this.one = new bn$1(1).toRed(this.red);
  this.two = new bn$1(2).toRed(this.red); // Curve configuration, optional

  this.n = conf.n && new bn$1(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick

  var adjustCount = this.n && this.p.div(this.n);

  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}

var base$2 = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert$5(p.precomputed);

  var doubles = p._getDoubles();

  var naf = getNAF$1(k, 1);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3; // Translate into more windowed form

  var repr = [];

  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;

    for (var k = j + doubles.step - 1; k >= j; k--) {
      nafW = (nafW << 1) + naf[k];
    }

    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);

  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }

    a = a.add(b);
  }

  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4; // Precompute window

  var nafPoints = p._getNAFPoints(w);

  w = nafPoints.wnd;
  var wnd = nafPoints.points; // Get NAF form

  var naf = getNAF$1(k, w); // Add `this`*(N+1) for every w-NAF index

  var acc = this.jpoint(null, null, null);

  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--) {
      k++;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;
    var z = naf[i];
    assert$5(z !== 0);

    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }

  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3; // Fill all arrays

  var max = 0;

  for (var i = 0; i < len; i++) {
    var p = points[i];

    var nafPoints = p._getNAFPoints(defW);

    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  } // Comb small window NAFs


  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;

    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF$1(coeffs[a], wndWidth[a]);
      naf[b] = getNAF$1(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a],
    /* 1 */
    null,
    /* 3 */
    null,
    /* 5 */
    points[b]
    /* 7 */
    ]; // Try to avoid Projective points, if possible

    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3,
    /* -1 -1 */
    -1,
    /* -1 0 */
    -5,
    /* -1 1 */
    -7,
    /* 0 -1 */
    0,
    /* 0 0 */
    7,
    /* 0 1 */
    5,
    /* 1 -1 */
    1,
    /* 1 0 */
    3
    /* 1 1 */
    ];
    var jsf = getJSF$1(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);

    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;
      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;

  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;

      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }

      if (!zero) break;
      k++;
      i--;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  } // Zeroify references


  for (var i = 0; i < len; i++) {
    wnd[i] = null;
  }

  if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}

BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq()
/*other*/
{
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils_1$1.toArray(bytes, enc);
  var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert$5(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$5(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }

  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);
  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;
  var doubles = this.precomputed.doubles;
  if (!doubles) return false;
  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;

  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }

    doubles.push(acc);
  }

  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();

  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }

  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;

  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }

  return r;
};

var assert$6 = utils_1$1.assert;

function ShortCurve$1(conf) {
  base$2.call(this, 'short', conf);
  this.a = new bn$1(conf.a, 16).toRed(this.red);
  this.b = new bn$1(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}

inherits_browser(ShortCurve$1, base$2);
var short_1 = ShortCurve$1;

ShortCurve$1.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

  var beta;
  var lambda;

  if (conf.beta) {
    beta = new bn$1(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p); // Choose the smallest beta


    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }

  if (conf.lambda) {
    lambda = new bn$1(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);

    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$6(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  } // Get basis vectors, used for balanced length-two representation


  var basis;

  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new bn$1(vec.a, 16),
        b: new bn$1(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve$1.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn$1.mont(num);
  var tinv = new bn$1(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s = new bn$1(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve$1.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt

  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn$1(1);
  var y1 = new bn$1(0);
  var x2 = new bn$1(0);
  var y2 = new bn$1(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

  var a0;
  var b0; // First vector

  var a1;
  var b1; // Second vector

  var a2;
  var b2;
  var prevR;
  var i = 0;
  var r;
  var x;

  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }

    prevR = r;
    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }

  a2 = r.neg();
  b2 = x;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());

  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  } // Normalize signs


  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }

  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{
    a: a1,
    b: b1
  }, {
    a: a2,
    b: b2
  }];
};

ShortCurve$1.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];
  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b); // Calculate answer

  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return {
    k1: k1,
    k2: k2
  };
};

ShortCurve$1.prototype.pointFromX = function pointFromX(x, odd) {
  x = new bn$1(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

ShortCurve$1.prototype.validate = function validate(point) {
  if (point.inf) return true;
  var x = point.x;
  var y = point.y;
  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve$1.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;

  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);

    var p = points[i];

    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }

    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }

  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }

  return res;
};

function Point$1(curve, x, y, isRed) {
  base$2.BasePoint.call(this, curve, 'affine');

  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn$1(x, 16);
    this.y = new bn$1(y, 16); // Force redgomery representation when loading from JSON

    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }

    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}

inherits_browser(Point$1, base$2.BasePoint);

ShortCurve$1.prototype.point = function point(x, y, isRed) {
  return new Point$1(this, x, y, isRed);
};

ShortCurve$1.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point$1.fromJSON(this, obj, red);
};

Point$1.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;
  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

  if (pre) {
    var curve = this.curve;

    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };

    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }

  return beta;
};

Point$1.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point$1.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point$1.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point$1.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point$1.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p; // P + O = P

  if (p.inf) return this; // P + P = 2P

  if (this.eq(p)) return this.dbl(); // P + (-P) = O

  if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point$1.prototype.dbl = function dbl() {
  if (this.inf) return this; // 2P = O

  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
  var a = this.curve.a;
  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point$1.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point$1.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point$1.prototype.mul = function mul(k) {
  k = new bn$1(k, 16);
  if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point$1.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point$1.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point$1.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point$1.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;
  var res = this.curve.point(this.x, this.y.redNeg());

  if (_precompute && this.precomputed) {
    var pre = this.precomputed;

    var negate = function negate(p) {
      return p.neg();
    };

    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }

  return res;
};

Point$1.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint$1(curve, x, y, z) {
  base$2.BasePoint.call(this, curve, 'jacobian');

  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn$1(0);
  } else {
    this.x = new bn$1(x, 16);
    this.y = new bn$1(y, 16);
    this.z = new bn$1(z, 16);
  }

  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}

inherits_browser(JPoint$1, base$2.BasePoint);

ShortCurve$1.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint$1(this, x, y, z);
};

JPoint$1.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};

JPoint$1.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint$1.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p; // P + O = P

  if (p.isInfinity()) return this; // 12M + 4S + 7A

  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint$1.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ(); // P + O = P

  if (p.isInfinity()) return this; // 8M + 3S + 7A

  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint$1.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;

    for (var i = 0; i < pow; i++) {
      r = r.dbl();
    }

    return r;
  } // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A


  var a = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr(); // Reuse results

  var jyd = jy.redAdd(jy);

  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint$1.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;
  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint$1.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a; a = 0

    var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

    var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A
    // A = X1^2
    var a = this.x.redSqr(); // B = Y1^2

    var b = this.y.redSqr(); // C = B^2

    var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d); // E = 3 * A

    var e = a.redAdd(a).redIAdd(a); // F = E^2

    var f = e.redSqr(); // 8 * C

    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8); // X3 = F - 2 * D

    nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

    ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint$1.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a

    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

    var t = m.redSqr().redISub(s).redISub(s); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S
    // delta = Z1^2
    var delta = this.z.redSqr(); // gamma = Y1^2

    var gamma = this.y.redSqr(); // beta = X1 * gamma

    var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint$1.prototype._dbl = function _dbl() {
  var a = this.curve.a; // 4M + 6S + 10A

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint$1.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...
  // XX = X1^2

  var xx = this.x.redSqr(); // YY = Y1^2

  var yy = this.y.redSqr(); // ZZ = Z1^2

  var zz = this.z.redSqr(); // YYYY = YY^2

  var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

  var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

  var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm); // EE = E^2

  var ee = e.redSqr(); // T = 16*YYYY

  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint$1.prototype.mul = function mul(k, kbase) {
  k = new bn$1(k, kbase);
  return this.curve._wnafMul(this, k);
};

JPoint$1.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());
  if (this === p) return true; // x1 * z2^2 == x2 * z1^2

  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint$1.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
};

JPoint$1.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint$1.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

function MontCurve$1(conf) {
  base$2.call(this, 'mont', conf);
  this.a = new bn$1(conf.a, 16).toRed(this.red);
  this.b = new bn$1(conf.b, 16).toRed(this.red);
  this.i4 = new bn$1(4).toRed(this.red).redInvm();
  this.two = new bn$1(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}

inherits_browser(MontCurve$1, base$2);
var mont$1 = MontCurve$1;

MontCurve$1.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();
  return y.redSqr().cmp(rhs) === 0;
};

function Point$2(curve, x, z) {
  base$2.BasePoint.call(this, curve, 'projective');

  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn$1(x, 16);
    this.z = new bn$1(z, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }
}

inherits_browser(Point$2, base$2.BasePoint);

MontCurve$1.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils_1$1.toArray(bytes, enc), 1);
};

MontCurve$1.prototype.point = function point(x, z) {
  return new Point$2(this, x, z);
};

MontCurve$1.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point$2.fromJSON(this, obj);
};

Point$2.prototype.precompute = function precompute() {// No-op
};

Point$2.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point$2.fromJSON = function fromJSON(curve, obj) {
  return new Point$2(curve, obj[0], obj[1] || curve.one);
};

Point$2.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point$2.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point$2.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A
  // A = X1 + Z1
  var a = this.x.redAdd(this.z); // AA = A^2

  var aa = a.redSqr(); // B = X1 - Z1

  var b = this.x.redSub(this.z); // BB = B^2

  var bb = b.redSqr(); // C = AA - BB

  var c = aa.redSub(bb); // X3 = AA * BB

  var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point$2.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point$2.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A
  // A = X2 + Z2
  var a = this.x.redAdd(this.z); // B = X2 - Z2

  var b = this.x.redSub(this.z); // C = X3 + Z3

  var c = p.x.redAdd(p.z); // D = X3 - Z3

  var d = p.x.redSub(p.z); // DA = D * A

  var da = d.redMul(a); // CB = C * B

  var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

  var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point$2.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q

  var b = this.curve.point(null, null); // (N / 2) * Q

  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
    bits.push(t.andln(1));
  }

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

      a = a.dbl();
    }
  }

  return b;
};

Point$2.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point$2.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point$2.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point$2.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point$2.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();
  return this.x.fromRed();
};

var assert$7 = utils_1$1.assert;

function EdwardsCurve$1(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;
  base$2.call(this, 'edwards', conf);
  this.a = new bn$1(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new bn$1(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn$1(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);
  assert$7(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}

inherits_browser(EdwardsCurve$1, base$2);
var edwards = EdwardsCurve$1;

EdwardsCurve$1.prototype._mulA = function _mulA(num) {
  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
};

EdwardsCurve$1.prototype._mulC = function _mulC(num) {
  if (this.oneC) return num;else return this.c.redMul(num);
}; // Just for compatibility with Short curve


EdwardsCurve$1.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve$1.prototype.pointFromX = function pointFromX(x, odd) {
  x = new bn$1(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

EdwardsCurve$1.prototype.pointFromY = function pointFromY(y, odd) {
  y = new bn$1(y, 16);
  if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
  if (x.fromRed().isOdd() !== odd) x = x.redNeg();
  return this.point(x, y);
};

EdwardsCurve$1.prototype.validate = function validate(point) {
  if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

  point.normalize();
  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
  return lhs.cmp(rhs) === 0;
};

function Point$3(curve, x, y, z, t) {
  base$2.BasePoint.call(this, curve, 'projective');

  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn$1(x, 16);
    this.y = new bn$1(y, 16);
    this.z = z ? new bn$1(z, 16) : this.curve.one;
    this.t = t && new bn$1(t, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one; // Use extended coordinates

    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
    }
  }
}

inherits_browser(Point$3, base$2.BasePoint);

EdwardsCurve$1.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point$3.fromJSON(this, obj);
};

EdwardsCurve$1.prototype.point = function point(x, y, z, t) {
  return new Point$3(this, x, y, z, t);
};

Point$3.fromJSON = function fromJSON(curve, obj) {
  return new Point$3(curve, obj[0], obj[1], obj[2]);
};

Point$3.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point$3.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};

Point$3.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S
  // A = X1^2
  var a = this.x.redSqr(); // B = Y1^2

  var b = this.y.redSqr(); // C = 2 * Z1^2

  var c = this.z.redSqr();
  c = c.redIAdd(c); // D = a * A

  var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

  var g = d.redAdd(b); // F = G - C

  var f = g.redSub(c); // H = D - B

  var h = d.redSub(b); // X3 = E * F

  var nx = e.redMul(f); // Y3 = G * H

  var ny = g.redMul(h); // T3 = E * H

  var nt = e.redMul(h); // Z3 = F * G

  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point$3.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S
  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

  var c = this.x.redSqr(); // D = Y1^2

  var d = this.y.redSqr();
  var nx;
  var ny;
  var nz;

  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c); // F = E + D


    var f = e.redAdd(d);

    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

      ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F

      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr(); // J = F - 2 * H

      var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

      nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

      ny = f.redMul(e.redSub(d)); // Z3 = F * J

      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d); // H = (c * Z1)^2

    var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


    var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J

    nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)

    ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J

    nz = e.redMul(j);
  }

  return this.curve.point(nx, ny, nz);
};

Point$3.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this; // Double in extended coordinates

  if (this.curve.extended) return this._extDbl();else return this._projDbl();
};

Point$3.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M
  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

  var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

  var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

  var e = b.redSub(a); // F = D - C

  var f = d.redSub(c); // G = D + C

  var g = d.redAdd(c); // H = B + A

  var h = b.redAdd(a); // X3 = E * F

  var nx = e.redMul(f); // Y3 = G * H

  var ny = g.redMul(h); // T3 = E * H

  var nt = e.redMul(h); // Z3 = F * G

  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point$3.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S
  // A = Z1 * Z2
  var a = this.z.redMul(p.z); // B = A^2

  var b = a.redSqr(); // C = X1 * X2

  var c = this.x.redMul(p.x); // D = Y1 * Y2

  var d = this.y.redMul(p.y); // E = d * C * D

  var e = this.curve.d.redMul(c).redMul(d); // F = B - E

  var f = b.redSub(e); // G = B + E

  var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;

  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G

    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G

    nz = this.curve._mulC(f).redMul(g);
  }

  return this.curve.point(nx, ny, nz);
};

Point$3.prototype.add = function add(p) {
  if (this.isInfinity()) return p;
  if (p.isInfinity()) return this;
  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
};

Point$3.prototype.mul = function mul(k) {
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
};

Point$3.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point$3.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point$3.prototype.normalize = function normalize() {
  if (this.zOne) return this; // Normalize coordinates

  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t) this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point$3.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point$3.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point$3.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point$3.prototype.eq = function eq(other) {
  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};

Point$3.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
}; // Compatibility with BaseCurve


Point$3.prototype.toP = Point$3.prototype.normalize;
Point$3.prototype.mixedAdd = Point$3.prototype.add;

var curve_1 = createCommonjsModule(function (module, exports) {

  var curve = exports;
  curve.base = base$2;
  curve.short = short_1;
  curve.mont = mont$1;
  curve.edwards = edwards;
});

var inherits_1 = inherits_browser;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }

  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }

  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray$1(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];

  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;

      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);

        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = c >> 6 | 192;
          res[p++] = c & 63 | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = c >> 18 | 240;
          res[p++] = c >> 12 & 63 | 128;
          res[p++] = c >> 6 & 63 | 128;
          res[p++] = c & 63 | 128;
        } else {
          res[p++] = c >> 12 | 224;
          res[p++] = c >> 6 & 63 | 128;
          res[p++] = c & 63 | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;

      for (i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }

  return res;
}

var toArray_1 = toArray$1;

function toHex$1(msg) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }

  return res;
}

var toHex_1 = toHex$1;

function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}

var htonl_1 = htonl;

function toHex32(msg, endian) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }

  return res;
}

var toHex32_1 = toHex32;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}

var zero2_1 = zero2;

function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}

var zero8_1 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  minimalisticAssert(len % 4 === 0);
  var res = new Array(len / 4);

  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }

  return res;
}

var join32_1 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);

  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];

    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }

  return res;
}

var split32_1 = split32;

function rotr32$1(w, b) {
  return w >>> b | w << 32 - b;
}

var rotr32_1 = rotr32$1;

function rotl32$8(w, b) {
  return w << b | w >>> 32 - b;
}

var rotl32_1 = rotl32$8;

function sum32(a, b) {
  return a + b >>> 0;
}

var sum32_1 = sum32;

function sum32_3(a, b, c) {
  return a + b + c >>> 0;
}

var sum32_3_1 = sum32_3;

function sum32_4(a, b, c, d) {
  return a + b + c + d >>> 0;
}

var sum32_4_1 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}

var sum32_5_1 = sum32_5;

function sum64$2(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}

var sum64_1 = sum64$2;

function sum64_hi$1(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}

var sum64_hi_1 = sum64_hi$1;

function sum64_lo$1(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}

var sum64_lo_1 = sum64_lo$1;

function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}

var sum64_4_hi_1 = sum64_4_hi$1;

function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}

var sum64_4_lo_1 = sum64_4_lo$1;

function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;
  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}

var sum64_5_hi_1 = sum64_5_hi$1;

function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;
  return lo >>> 0;
}

var sum64_5_lo_1 = sum64_5_lo$1;

function rotr64_hi$1(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}

var rotr64_hi_1 = rotr64_hi$1;

function rotr64_lo$1(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

var rotr64_lo_1 = rotr64_lo$1;

function shr64_hi$1(ah, al, num) {
  return ah >>> num;
}

var shr64_hi_1 = shr64_hi$1;

function shr64_lo$1(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

var shr64_lo_1 = shr64_lo$1;
var utils = {
  inherits: inherits_1,
  toArray: toArray_1,
  toHex: toHex_1,
  htonl: htonl_1,
  toHex32: toHex32_1,
  zero2: zero2_1,
  zero8: zero8_1,
  join32: join32_1,
  split32: split32_1,
  rotr32: rotr32_1,
  rotl32: rotl32_1,
  sum32: sum32_1,
  sum32_3: sum32_3_1,
  sum32_4: sum32_4_1,
  sum32_5: sum32_5_1,
  sum64: sum64_1,
  sum64_hi: sum64_hi_1,
  sum64_lo: sum64_lo_1,
  sum64_4_hi: sum64_4_hi_1,
  sum64_4_lo: sum64_4_lo_1,
  sum64_5_hi: sum64_5_hi_1,
  sum64_5_lo: sum64_5_lo_1,
  rotr64_hi: rotr64_hi_1,
  rotr64_lo: rotr64_lo_1,
  shr64_hi: shr64_hi_1,
  shr64_lo: shr64_lo_1
};

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';
  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}

var BlockHash_1 = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length; // Enough data, try updating

  if (this.pending.length >= this._delta8) {
    msg = this.pending; // Process pending data in blocks

    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;
    msg = utils.join32(msg, 0, msg.length - r, this.endian);

    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  minimalisticAssert(this.pending === null);
  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;

  for (var i = 1; i < k; i++) {
    res[i] = 0;
  } // Append length


  len <<= 3;

  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }

  return res;
};

var common = {
  BlockHash: BlockHash_1
};

var rotr32$2 = utils.rotr32;

function ft_1$1(s, x, y, z) {
  if (s === 0) return ch32$1(x, y, z);
  if (s === 1 || s === 3) return p32$1(x, y, z);
  if (s === 2) return maj32$1(x, y, z);
}

var ft_1_1 = ft_1$1;

function ch32$1(x, y, z) {
  return x & y ^ ~x & z;
}

var ch32_1 = ch32$1;

function maj32$1(x, y, z) {
  return x & y ^ x & z ^ y & z;
}

var maj32_1 = maj32$1;

function p32$1(x, y, z) {
  return x ^ y ^ z;
}

var p32_1 = p32$1;

function s0_256(x) {
  return rotr32$2(x, 2) ^ rotr32$2(x, 13) ^ rotr32$2(x, 22);
}

var s0_256_1 = s0_256;

function s1_256(x) {
  return rotr32$2(x, 6) ^ rotr32$2(x, 11) ^ rotr32$2(x, 25);
}

var s1_256_1 = s1_256;

function g0_256(x) {
  return rotr32$2(x, 7) ^ rotr32$2(x, 18) ^ x >>> 3;
}

var g0_256_1 = g0_256;

function g1_256(x) {
  return rotr32$2(x, 17) ^ rotr32$2(x, 19) ^ x >>> 10;
}

var g1_256_1 = g1_256;
var common$1 = {
  ft_1: ft_1_1,
  ch32: ch32_1,
  maj32: maj32_1,
  p32: p32_1,
  s0_256: s0_256_1,
  s1_256: s1_256_1,
  g0_256: g0_256_1,
  g1_256: g1_256_1
};

var rotl32$9 = utils.rotl32;
var sum32$1 = utils.sum32;
var sum32_5$1 = utils.sum32_5;
var ft_1$2 = common$1.ft_1;
var BlockHash$1 = common.BlockHash;
var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

function SHA1$1() {
  if (!(this instanceof SHA1$1)) return new SHA1$1();
  BlockHash$1.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}

utils.inherits(SHA1$1, BlockHash$1);
var _1 = SHA1$1;
SHA1$1.blockSize = 512;
SHA1$1.outSize = 160;
SHA1$1.hmacStrength = 80;
SHA1$1.padLength = 64;

SHA1$1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i++) {
    W[i] = rotl32$9(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5$1(rotl32$9(a, 5), ft_1$2(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32$9(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32$1(this.h[0], a);
  this.h[1] = sum32$1(this.h[1], b);
  this.h[2] = sum32$1(this.h[2], c);
  this.h[3] = sum32$1(this.h[3], d);
  this.h[4] = sum32$1(this.h[4], e);
};

SHA1$1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

var sum32$2 = utils.sum32;
var sum32_4$1 = utils.sum32_4;
var sum32_5$2 = utils.sum32_5;
var ch32$2 = common$1.ch32;
var maj32$2 = common$1.maj32;
var s0_256$1 = common$1.s0_256;
var s1_256$1 = common$1.s1_256;
var g0_256$1 = common$1.g0_256;
var g1_256$1 = common$1.g1_256;
var BlockHash$2 = common.BlockHash;
var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

function SHA256$1() {
  if (!(this instanceof SHA256$1)) return new SHA256$1();
  BlockHash$2.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}

utils.inherits(SHA256$1, BlockHash$2);
var _256 = SHA256$1;
SHA256$1.blockSize = 512;
SHA256$1.outSize = 256;
SHA256$1.hmacStrength = 192;
SHA256$1.padLength = 64;

SHA256$1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i++) {
    W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);
  }

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];
  minimalisticAssert(this.k.length === W.length);

  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5$2(h, s1_256$1(e), ch32$2(e, f, g), this.k[i], W[i]);
    var T2 = sum32$2(s0_256$1(a), maj32$2(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32$2(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32$2(T1, T2);
  }

  this.h[0] = sum32$2(this.h[0], a);
  this.h[1] = sum32$2(this.h[1], b);
  this.h[2] = sum32$2(this.h[2], c);
  this.h[3] = sum32$2(this.h[3], d);
  this.h[4] = sum32$2(this.h[4], e);
  this.h[5] = sum32$2(this.h[5], f);
  this.h[6] = sum32$2(this.h[6], g);
  this.h[7] = sum32$2(this.h[7], h);
};

SHA256$1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function SHA224$1() {
  if (!(this instanceof SHA224$1)) return new SHA224$1();
  _256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}

utils.inherits(SHA224$1, _256);
var _224 = SHA224$1;
SHA224$1.blockSize = 512;
SHA224$1.outSize = 224;
SHA224$1.hmacStrength = 192;
SHA224$1.padLength = 64;

SHA224$1.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
};

var rotr64_hi$2 = utils.rotr64_hi;
var rotr64_lo$2 = utils.rotr64_lo;
var shr64_hi$2 = utils.shr64_hi;
var shr64_lo$2 = utils.shr64_lo;
var sum64$3 = utils.sum64;
var sum64_hi$2 = utils.sum64_hi;
var sum64_lo$2 = utils.sum64_lo;
var sum64_4_hi$2 = utils.sum64_4_hi;
var sum64_4_lo$2 = utils.sum64_4_lo;
var sum64_5_hi$2 = utils.sum64_5_hi;
var sum64_5_lo$2 = utils.sum64_5_lo;
var BlockHash$3 = common.BlockHash;
var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

function SHA512$1() {
  if (!(this instanceof SHA512$1)) return new SHA512$1();
  BlockHash$3.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}

utils.inherits(SHA512$1, BlockHash$3);
var _512 = SHA512$1;
SHA512$1.blockSize = 1024;
SHA512$1.outSize = 512;
SHA512$1.hmacStrength = 192;
SHA512$1.padLength = 128;

SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W; // 32 x 32bit words

  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi$1(W[i - 4], W[i - 3]); // i - 2

    var c0_lo = g1_512_lo$1(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7

    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi$1(W[i - 30], W[i - 29]); // i - 15

    var c2_lo = g0_512_lo$1(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16

    var c3_lo = W[i - 31];
    W[i] = sum64_4_hi$2(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo$2(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};

SHA512$1.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;
  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];
  minimalisticAssert(this.k.length === W.length);

  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi$1(eh, el);
    var c1_lo = s1_512_lo$1(eh, el);
    var c2_hi = ch64_hi$1(eh, el, fh, fl, gh);
    var c2_lo = ch64_lo$1(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];
    var T1_hi = sum64_5_hi$2(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo$2(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    c0_hi = s0_512_hi$1(ah, al);
    c0_lo = s0_512_lo$1(ah, al);
    c1_hi = maj64_hi$1(ah, al, bh, bl, ch);
    c1_lo = maj64_lo$1(ah, al, bh, bl, ch, cl);
    var T2_hi = sum64_hi$2(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo$2(c0_hi, c0_lo, c1_hi, c1_lo);
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    eh = sum64_hi$2(dh, dl, T1_hi, T1_lo);
    el = sum64_lo$2(dl, dl, T1_hi, T1_lo);
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    ah = sum64_hi$2(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo$2(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64$3(this.h, 0, ah, al);
  sum64$3(this.h, 2, bh, bl);
  sum64$3(this.h, 4, ch, cl);
  sum64$3(this.h, 6, dh, dl);
  sum64$3(this.h, 8, eh, el);
  sum64$3(this.h, 10, fh, fl);
  sum64$3(this.h, 12, gh, gl);
  sum64$3(this.h, 14, hh, hl);
};

SHA512$1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function ch64_hi$1(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function ch64_lo$1(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_hi$1(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_lo$1(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_hi$1(xh, xl) {
  var c0_hi = rotr64_hi$2(xh, xl, 28);
  var c1_hi = rotr64_hi$2(xl, xh, 2); // 34

  var c2_hi = rotr64_hi$2(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_lo$1(xh, xl) {
  var c0_lo = rotr64_lo$2(xh, xl, 28);
  var c1_lo = rotr64_lo$2(xl, xh, 2); // 34

  var c2_lo = rotr64_lo$2(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_hi$1(xh, xl) {
  var c0_hi = rotr64_hi$2(xh, xl, 14);
  var c1_hi = rotr64_hi$2(xh, xl, 18);
  var c2_hi = rotr64_hi$2(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_lo$1(xh, xl) {
  var c0_lo = rotr64_lo$2(xh, xl, 14);
  var c1_lo = rotr64_lo$2(xh, xl, 18);
  var c2_lo = rotr64_lo$2(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_hi$1(xh, xl) {
  var c0_hi = rotr64_hi$2(xh, xl, 1);
  var c1_hi = rotr64_hi$2(xh, xl, 8);
  var c2_hi = shr64_hi$2(xh, xl, 7);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_lo$1(xh, xl) {
  var c0_lo = rotr64_lo$2(xh, xl, 1);
  var c1_lo = rotr64_lo$2(xh, xl, 8);
  var c2_lo = shr64_lo$2(xh, xl, 7);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_hi$1(xh, xl) {
  var c0_hi = rotr64_hi$2(xh, xl, 19);
  var c1_hi = rotr64_hi$2(xl, xh, 29); // 61

  var c2_hi = shr64_hi$2(xh, xl, 6);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_lo$1(xh, xl) {
  var c0_lo = rotr64_lo$2(xh, xl, 19);
  var c1_lo = rotr64_lo$2(xl, xh, 29); // 61

  var c2_lo = shr64_lo$2(xh, xl, 6);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function SHA384$1() {
  if (!(this instanceof SHA384$1)) return new SHA384$1();
  _512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}

utils.inherits(SHA384$1, _512);
var _384 = SHA384$1;
SHA384$1.blockSize = 1024;
SHA384$1.outSize = 384;
SHA384$1.hmacStrength = 192;
SHA384$1.padLength = 128;

SHA384$1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
};

var sha1$2 = _1;
var sha224$2 = _224;
var sha256$2 = _256;
var sha384$2 = _384;
var sha512$2 = _512;
var sha$1 = {
  sha1: sha1$2,
  sha224: sha224$2,
  sha256: sha256$2,
  sha384: sha384$2,
  sha512: sha512$2
};

var rotl32$a = utils.rotl32;
var sum32$3 = utils.sum32;
var sum32_3$1 = utils.sum32_3;
var sum32_4$2 = utils.sum32_4;
var BlockHash$4 = common.BlockHash;

function RIPEMD160$2() {
  if (!(this instanceof RIPEMD160$2)) return new RIPEMD160$2();
  BlockHash$4.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}

utils.inherits(RIPEMD160$2, BlockHash$4);
var ripemd160$2 = RIPEMD160$2;
RIPEMD160$2.blockSize = 512;
RIPEMD160$2.outSize = 160;
RIPEMD160$2.hmacStrength = 192;
RIPEMD160$2.padLength = 64;

RIPEMD160$2.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;

  for (var j = 0; j < 80; j++) {
    var T = sum32$3(rotl32$a(sum32_4$2(A, f$2(j, B, C, D), msg[r$2[j] + start], K$a(j)), s$1[j]), E);
    A = E;
    E = D;
    D = rotl32$a(C, 10);
    C = B;
    B = T;
    T = sum32$3(rotl32$a(sum32_4$2(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh$1[j] + start], Kh$1(j)), sh$1[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32$a(Ch, 10);
    Ch = Bh;
    Bh = T;
  }

  T = sum32_3$1(this.h[1], C, Dh);
  this.h[1] = sum32_3$1(this.h[2], D, Eh);
  this.h[2] = sum32_3$1(this.h[3], E, Ah);
  this.h[3] = sum32_3$1(this.h[4], A, Bh);
  this.h[4] = sum32_3$1(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160$2.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
};

function f$2(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}

function K$a(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}

function Kh$1(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}

var r$2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var rh$1 = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var s$1 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sh$1 = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
var ripemd = {
  ripemd160: ripemd160$2
};

function Hmac$2(hash, key, enc) {
  if (!(this instanceof Hmac$2)) return new Hmac$2(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}

var hmac$1 = Hmac$2;

Hmac$2.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  minimalisticAssert(key.length <= this.blockSize); // Add padding to key

  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }

  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }

  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }

  this.outer = new this.Hash().update(key);
};

Hmac$2.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac$2.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

var hash_1 = createCommonjsModule(function (module, exports) {
  var hash = exports;
  hash.utils = utils;
  hash.common = common;
  hash.sha = sha$1;
  hash.ripemd = ripemd;
  hash.hmac = hmac$1; // Proxy hash functions to the main object

  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
});

var secp256k1$3 = {
  doubles: {
    step: 4,
    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
  },
  naf: {
    wnd: 7,
    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
  }
};

var curves_1$1 = createCommonjsModule(function (module, exports) {

  var curves = exports;
  var assert = utils_1$1.assert;

  function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve_1.short(options);else if (options.type === 'edwards') this.curve = new curve_1.edwards(options);else this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }

  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function get() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash_1.sha256,
    gRed: false,
    g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
  });
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash_1.sha256,
    gRed: false,
    g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
  });
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash_1.sha256,
    gRed: false,
    g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
  });
  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash_1.sha384,
    gRed: false,
    g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
  });
  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash_1.sha512,
    gRed: false,
    g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
  });
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1.sha256,
    gRed: false,
    g: ['9']
  });
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1.sha256,
    gRed: false,
    g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658']
  });
  var pre;

  try {
    pre = secp256k1$3;
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash_1.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [{
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    }, {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }],
    gRed: false,
    g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
  });
});

function HmacDRBG$1(options) {
  if (!(this instanceof HmacDRBG$1)) return new HmacDRBG$1(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
  minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._init(entropy, nonce, pers);
}

var hmacDrbg$1 = HmacDRBG$1;

HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);

  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);

  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG$1.prototype._hmac = function hmac() {
  return new hash_1.hmac(this.hash, this.K);
};

HmacDRBG$1.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);

  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;
  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils_1.toArray(entropy, entropyEnc);
  add = utils_1.toArray(add, addEnc);
  minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));

  this._reseed = 1;
};

HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  } // Optional additional data


  if (add) {
    add = utils_1.toArray(add, addEnc || 'hex');

    this._update(add);
  }

  var temp = [];

  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);

  this._update(add);

  this._reseed++;
  return utils_1.encode(res, enc);
};

var assert$8 = utils_1$1.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}

var key$1 = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;
  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();
  if (pub.isInfinity()) return {
    result: false,
    reason: 'Invalid public key'
  };
  if (!pub.validate()) return {
    result: false,
    reason: 'Public key is not a point'
  };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return {
    result: false,
    reason: 'Public key * N != O'
  };
  return {
    result: true,
    reason: null
  };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub) this.pub = this.ec.g.mul(this.priv);
  if (!enc) return this.pub;
  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn$1(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method

  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert$8(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert$8(key.x && key.y, 'Need both x and y coordinate');
    }

    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  this.pub = this.ec.curve.decodePoint(key, enc);
}; // ECDH


KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
}; // ECDSA


KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

var assert$9 = utils_1$1.assert;

function Signature$1(options, enc) {
  if (options instanceof Signature$1) return options;
  if (this._importDER(options, enc)) return;
  assert$9(options.r && options.s, 'Signature without r or s');
  this.r = new bn$1(options.r, 16);
  this.s = new bn$1(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}

var signature$1 = Signature$1;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];

  if (!(initial & 0x80)) {
    return initial;
  }

  var octetLen = initial & 0xf;
  var val = 0;

  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;

  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }

  if (i === 0) {
    return buf;
  }

  return buf.slice(i);
}

Signature$1.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p = new Position();

  if (data[p.place++] !== 0x30) {
    return false;
  }

  var len = getLength(data, p);

  if (len + p.place !== data.length) {
    return false;
  }

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var slen = getLength(data, p);

  if (data.length !== slen + p.place) {
    return false;
  }

  var s = data.slice(p.place, slen + p.place);

  if (r[0] === 0 && r[1] & 0x80) {
    r = r.slice(1);
  }

  if (s[0] === 0 && s[1] & 0x80) {
    s = s.slice(1);
  }

  this.r = new bn$1(r);
  this.s = new bn$1(s);
  this.recoveryParam = null;
  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }

  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);

  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }

  arr.push(len);
}

Signature$1.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray(); // Pad values

  if (r[0] & 0x80) r = [0].concat(r); // Pad values

  if (s[0] & 0x80) s = [0].concat(s);
  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }

  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};

var assert$a = utils_1$1.assert;

function EC(options) {
  if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`

  if (typeof options === 'string') {
    assert$a(curves_1$1.hasOwnProperty(options), 'Unknown curve ' + options);
    options = curves_1$1[options];
  } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


  if (options instanceof curves_1$1.PresetCurve) options = {
    curve: options
  };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g; // Point on curve

  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG

  this.hash = options.hash || options.curve.hash;
}

var ec = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new key$1(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key$1.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key$1.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {}; // Instantiate Hmac_DRBG

  var drbg = new hmacDrbg$1({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || brorand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });
  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn$1(2));

  do {
    var priv = new bn$1(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }

  if (!options) options = {};
  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn$1(msg, 16)); // Zero-extend key to provide enough entropy

  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

  var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

  var drbg = new hmacDrbg$1({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  }); // Number of bytes to generate

  var ns1 = this.n.sub(new bn$1(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ? options.k(iter) : new bn$1(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;
    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;
    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new signature$1({
      r: r,
      s: s,
      recoveryParam: recoveryParam
    });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn$1(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new signature$1(signature, 'hex'); // Perform primitive values validation

  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.getX().umod(this.n).cmp(r) === 0;
  } // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K


  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`

  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
  assert$a((3 & j) === j, 'The recovery param is more than two bits');
  signature = new signature$1(signature, enc);
  var n = this.n;
  var e = new bn$1(msg);
  var r = signature.r;
  var s = signature.s; // A set LSB signifies that the y-coordinate is odd

  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)

  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
  signature = new signature$1(signature, enc);
  if (signature.recoveryParam !== null) return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;

    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }

  throw new Error('Unable to find valid recovery factor');
};

var assert$b = utils_1$1.assert;
var parseBytes = utils_1$1.parseBytes;
var cachedProperty = utils_1$1.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/

function KeyPair$1(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
}

KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair$1) return pub;
  return new KeyPair$1(eddsa, {
    pub: pub
  });
};

KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair$1) return secret;
  return new KeyPair$1(eddsa, {
    secret: secret
  });
};

KeyPair$1.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair$1, 'pub', function pub() {
  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair$1, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;
  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;
  return a;
});
cachedProperty(KeyPair$1, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair$1, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair$1.prototype.sign = function sign(message) {
  assert$b(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair$1.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair$1.prototype.getSecret = function getSecret(enc) {
  assert$b(this._secret, 'KeyPair is public only');
  return utils_1$1.encode(this.secret(), enc);
};

KeyPair$1.prototype.getPublic = function getPublic(enc) {
  return utils_1$1.encode(this.pubBytes(), enc);
};

var key$2 = KeyPair$1;

var assert$c = utils_1$1.assert;
var cachedProperty$1 = utils_1$1.cachedProperty;
var parseBytes$1 = utils_1$1.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/

function Signature$2(eddsa, sig) {
  this.eddsa = eddsa;
  if (typeof sig !== 'object') sig = parseBytes$1(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert$c(sig.R && sig.S, 'Signature without R or S');
  if (eddsa.isPoint(sig.R)) this._R = sig.R;
  if (sig.S instanceof bn$1) this._S = sig.S;
  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty$1(Signature$2, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty$1(Signature$2, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty$1(Signature$2, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});
cachedProperty$1(Signature$2, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature$2.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature$2.prototype.toHex = function toHex() {
  return utils_1$1.encode(this.toBytes(), 'hex').toUpperCase();
};

var signature$2 = Signature$2;

var assert$d = utils_1$1.assert;
var parseBytes$2 = utils_1$1.parseBytes;

function EDDSA$1(curve) {
  assert$d(curve === 'ed25519', 'only tested with ed25519 so far');
  if (!(this instanceof EDDSA$1)) return new EDDSA$1(curve);
  var curve = curves_1$1[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);
  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash_1.sha512;
}

var eddsa$1 = EDDSA$1;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/

EDDSA$1.prototype.sign = function sign(message, secret) {
  message = parseBytes$2(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({
    R: R,
    S: S,
    Rencoded: Rencoded
  });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/


EDDSA$1.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes$2(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA$1.prototype.hashInt = function hashInt() {
  var hash = this.hash();

  for (var i = 0; i < arguments.length; i++) {
    hash.update(arguments[i]);
  }

  return utils_1$1.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA$1.prototype.keyFromPublic = function keyFromPublic(pub) {
  return key$2.fromPublic(this, pub);
};

EDDSA$1.prototype.keyFromSecret = function keyFromSecret(secret) {
  return key$2.fromSecret(this, secret);
};

EDDSA$1.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof signature$2) return sig;
  return new signature$2(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/


EDDSA$1.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA$1.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils_1$1.parseBytes(bytes);
  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
  var y = utils_1$1.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA$1.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA$1.prototype.decodeInt = function decodeInt(bytes) {
  return utils_1$1.intFromLE(bytes);
};

EDDSA$1.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

var require$$0$1 = getCjsExportFromNamespace(_package$1);

var elliptic_1 = createCommonjsModule(function (module, exports) {

  var elliptic = exports;
  elliptic.version = require$$0$1.version;
  elliptic.utils = utils_1$1;
  elliptic.rand = brorand;
  elliptic.curve = curve_1;
  elliptic.curves = curves_1$1; // Protocols

  elliptic.ec = ec;
  elliptic.eddsa = eddsa$1;
});

var ONE1 = Buffer.alloc(1, 1);
var ZERO1 = Buffer.alloc(1, 0); // https://tools.ietf.org/html/rfc6979#section-3.2

function deterministicGenerateK(hash, x, checkSig, isPrivate, extraEntropy) {
  // Step A, ignored as hash already provided
  // Step B
  // Step C
  var k = Buffer.alloc(32, 0);
  var v = Buffer.alloc(32, 1); // Step D

  k = browser$3('sha256', k).update(v).update(ZERO1).update(x).update(hash).update(extraEntropy || '').digest(); // Step E

  v = browser$3('sha256', k).update(v).digest(); // Step F

  k = browser$3('sha256', k).update(v).update(ONE1).update(x).update(hash).update(extraEntropy || '').digest(); // Step G

  v = browser$3('sha256', k).update(v).digest(); // Step H1/H2a, ignored as tlen === qlen (256 bit)
  // Step H2b

  v = browser$3('sha256', k).update(v).digest();
  var T = v; // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA

  while (!isPrivate(T) || !checkSig(T)) {
    k = browser$3('sha256', k).update(v).update(ZERO1).digest();
    v = browser$3('sha256', k).update(v).digest(); // Step H1/H2a, again, ignored as tlen === qlen (256 bit)
    // Step H2b again

    v = browser$3('sha256', k).update(v).digest();
    T = v;
  }

  return T;
}

var rfc6979 = deterministicGenerateK;

var EC$1 = elliptic_1.ec;
var secp256k1$4 = new EC$1('secp256k1');
var ZERO32$1 = Buffer.alloc(32, 0);
var EC_GROUP_ORDER = Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');
var EC_P = Buffer.from('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f', 'hex');
var n = secp256k1$4.curve.n;
var nDiv2 = n.shrn(1);
var G$4 = secp256k1$4.curve.g;
var THROW_BAD_PRIVATE = 'Expected Private';
var THROW_BAD_POINT = 'Expected Point';
var THROW_BAD_TWEAK = 'Expected Tweak';
var THROW_BAD_HASH = 'Expected Hash';
var THROW_BAD_SIGNATURE = 'Expected Signature';
var THROW_BAD_EXTRA_DATA = 'Expected Extra Data (32 bytes)';

function isScalar(x) {
  return Buffer.isBuffer(x) && x.length === 32;
}

function isOrderScalar(x) {
  if (!isScalar(x)) return false;
  return x.compare(EC_GROUP_ORDER) < 0; // < G
}

function isPoint(p) {
  if (!Buffer.isBuffer(p)) return false;
  if (p.length < 33) return false;
  var t = p[0];
  var x = p.slice(1, 33);
  if (x.compare(ZERO32$1) === 0) return false;
  if (x.compare(EC_P) >= 0) return false;

  if ((t === 0x02 || t === 0x03) && p.length === 33) {
    try {
      decodeFrom(p);
    } catch (e) {
      return false;
    } // TODO: temporary


    return true;
  }

  var y = p.slice(33);
  if (y.compare(ZERO32$1) === 0) return false;
  if (y.compare(EC_P) >= 0) return false;
  if (t === 0x04 && p.length === 65) return true;
  return false;
}

function __isPointCompressed(p) {
  return p[0] !== 0x04;
}

function isPointCompressed(p) {
  if (!isPoint(p)) return false;
  return __isPointCompressed(p);
}

function isPrivate(x) {
  if (!isScalar(x)) return false;
  return x.compare(ZERO32$1) > 0 && // > 0
  x.compare(EC_GROUP_ORDER) < 0; // < G
}

function isSignature(value) {
  var r = value.slice(0, 32);
  var s = value.slice(32, 64);
  return Buffer.isBuffer(value) && value.length === 64 && r.compare(EC_GROUP_ORDER) < 0 && s.compare(EC_GROUP_ORDER) < 0;
}

function assumeCompression(value, pubkey) {
  if (value === undefined && pubkey !== undefined) return __isPointCompressed(pubkey);
  if (value === undefined) return true;
  return value;
}

function fromBuffer(d) {
  return new bn$1(d);
}

function toBuffer(d) {
  return d.toArrayLike(Buffer, 'be', 32);
}

function decodeFrom(P) {
  return secp256k1$4.curve.decodePoint(P);
}

function getEncoded(P, compressed) {
  return Buffer.from(P._encode(compressed));
}

function pointAdd(pA, pB, __compressed) {
  if (!isPoint(pA)) throw new TypeError(THROW_BAD_POINT);
  if (!isPoint(pB)) throw new TypeError(THROW_BAD_POINT);
  var a = decodeFrom(pA);
  var b = decodeFrom(pB);
  var pp = a.add(b);
  if (pp.isInfinity()) return null;
  var compressed = assumeCompression(__compressed, pA);
  return getEncoded(pp, compressed);
}

function pointAddScalar(p, tweak, __compressed) {
  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
  var compressed = assumeCompression(__compressed, p);
  var pp = decodeFrom(p);
  if (tweak.compare(ZERO32$1) === 0) return getEncoded(pp, compressed);
  var tt = fromBuffer(tweak);
  var qq = G$4.mul(tt);
  var uu = pp.add(qq);
  if (uu.isInfinity()) return null;
  return getEncoded(uu, compressed);
}

function pointCompress(p, compressed) {
  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
  var pp = decodeFrom(p);
  if (pp.isInfinity()) throw new TypeError(THROW_BAD_POINT);
  return getEncoded(pp, compressed);
}

function pointFromScalar(d, __compressed) {
  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
  var dd = fromBuffer(d);
  var pp = G$4.mul(dd);
  if (pp.isInfinity()) return null;
  var compressed = assumeCompression(__compressed);
  return getEncoded(pp, compressed);
}

function pointMultiply(p, tweak, __compressed) {
  if (!isPoint(p)) throw new TypeError(THROW_BAD_POINT);
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
  var compressed = assumeCompression(__compressed, p);
  var pp = decodeFrom(p);
  var tt = fromBuffer(tweak);
  var qq = pp.mul(tt);
  if (qq.isInfinity()) return null;
  return getEncoded(qq, compressed);
}

function privateAdd(d, tweak) {
  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
  var dd = fromBuffer(d);
  var tt = fromBuffer(tweak);
  var dt = toBuffer(dd.add(tt).umod(n));
  if (!isPrivate(dt)) return null;
  return dt;
}

function privateSub(d, tweak) {
  if (!isPrivate(d)) throw new TypeError(THROW_BAD_PRIVATE);
  if (!isOrderScalar(tweak)) throw new TypeError(THROW_BAD_TWEAK);
  var dd = fromBuffer(d);
  var tt = fromBuffer(tweak);
  var dt = toBuffer(dd.sub(tt).umod(n));
  if (!isPrivate(dt)) return null;
  return dt;
}

function sign$2(hash, x) {
  return __sign(hash, x);
}

function signWithEntropy(hash, x, addData) {
  return __sign(hash, x, addData);
}

function __sign(hash, x, addData) {
  if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);
  if (!isPrivate(x)) throw new TypeError(THROW_BAD_PRIVATE);
  if (addData !== undefined && !isScalar(addData)) throw new TypeError(THROW_BAD_EXTRA_DATA);
  var d = fromBuffer(x);
  var e = fromBuffer(hash);
  var r, s;

  var checkSig = function checkSig(k) {
    var kI = fromBuffer(k);
    var Q = G$4.mul(kI);
    if (Q.isInfinity()) return false;
    r = Q.x.umod(n);
    if (r.isZero() === 0) return false;
    s = kI.invm(n).mul(e.add(d.mul(r))).umod(n);
    if (s.isZero() === 0) return false;
    return true;
  };

  rfc6979(hash, x, checkSig, isPrivate, addData); // enforce low S values, see bip62: 'low s values in signatures'

  if (s.cmp(nDiv2) > 0) {
    s = n.sub(s);
  }

  var buffer = Buffer.allocUnsafe(64);
  toBuffer(r).copy(buffer, 0);
  toBuffer(s).copy(buffer, 32);
  return buffer;
}

function verify$4(hash, q, signature) {
  if (!isScalar(hash)) throw new TypeError(THROW_BAD_HASH);
  if (!isPoint(q)) throw new TypeError(THROW_BAD_POINT); // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (1, isSignature enforces '< n - 1')

  if (!isSignature(signature)) throw new TypeError(THROW_BAD_SIGNATURE);
  var Q = decodeFrom(q);
  var r = fromBuffer(signature.slice(0, 32));
  var s = fromBuffer(signature.slice(32, 64)); // 1.4.1 Enforce r and s are both integers in the interval [1, n − 1] (2, enforces '> 0')

  if (r.gtn(0) <= 0
  /* || r.compareTo(n) >= 0 */
  ) return false;
  if (s.gtn(0) <= 0
  /* || s.compareTo(n) >= 0 */
  ) return false; // 1.4.2 H = Hash(M), already done by the user
  // 1.4.3 e = H

  var e = fromBuffer(hash); // Compute s^-1

  var sInv = s.invm(n); // 1.4.4 Compute u1 = es^−1 mod n
  //               u2 = rs^−1 mod n

  var u1 = e.mul(sInv).umod(n);
  var u2 = r.mul(sInv).umod(n); // 1.4.5 Compute R = (xR, yR)
  //               R = u1G + u2Q

  var R = G$4.mulAdd(u1, Q, u2); // 1.4.5 (cont.) Enforce R is not at infinity

  if (R.isInfinity()) return false; // 1.4.6 Convert the field element R.x to an integer

  var xR = R.x; // 1.4.7 Set v = xR mod n

  var v = xR.umod(n); // 1.4.8 If v = r, output "valid", and if v != r, output "invalid"

  return v.eq(r);
}

var js = {
  isPoint,
  isPointCompressed,
  isPrivate,
  pointAdd,
  pointAddScalar,
  pointCompress,
  pointFromScalar,
  pointMultiply,
  privateAdd,
  privateSub,
  sign: sign$2,
  signWithEntropy,
  verify: verify$4
};

var types$4 = {
  Array: function (_Array) {
    function Array(_x) {
      return _Array.apply(this, arguments);
    }

    Array.toString = function () {
      return _Array.toString();
    };

    return Array;
  }(function (value) {
    return value !== null && value !== undefined && value.constructor === Array;
  }),
  Boolean: function Boolean(value) {
    return typeof value === 'boolean';
  },
  Function: function Function(value) {
    return typeof value === 'function';
  },
  Nil: function Nil(value) {
    return value === undefined || value === null;
  },
  Number: function Number(value) {
    return typeof value === 'number';
  },
  Object: function Object(value) {
    return typeof value === 'object';
  },
  String: function String(value) {
    return typeof value === 'string';
  },
  '': function _() {
    return true;
  }
}; // TODO: deprecate

types$4.Null = types$4.Nil;

for (var typeName in types$4) {
  types$4[typeName].toJSON = function (t) {
    return t;
  }.bind(null, typeName);
}

var native_1$g = types$4;

function getTypeName(fn) {
  return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
}

function getValueTypeName(value) {
  return native_1$g.Nil(value) ? '' : getTypeName(value.constructor);
}

function getValue$2(value) {
  if (native_1$g.Function(value)) return '';
  if (native_1$g.String(value)) return JSON.stringify(value);
  if (value && native_1$g.Object(value)) return '';
  return value;
}

function captureStackTrace(e, t) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(e, t);
  }
}

function tfJSON(type) {
  if (native_1$g.Function(type)) return type.toJSON ? type.toJSON() : getTypeName(type);
  if (native_1$g.Array(type)) return 'Array';
  if (type && native_1$g.Object(type)) return 'Object';
  return type !== undefined ? type : '';
}

function tfErrorString(type, value, valueTypeName) {
  var valueJson = getValue$2(value);
  return 'Expected ' + tfJSON(type) + ', got' + (valueTypeName !== '' ? ' ' + valueTypeName : '') + (valueJson !== '' ? ' ' + valueJson : '');
}

function TfTypeError(type, value, valueTypeName) {
  valueTypeName = valueTypeName || getValueTypeName(value);
  this.message = tfErrorString(type, value, valueTypeName);
  captureStackTrace(this, TfTypeError);
  this.__type = type;
  this.__value = value;
  this.__valueTypeName = valueTypeName;
}

TfTypeError.prototype = Object.create(Error.prototype);
TfTypeError.prototype.constructor = TfTypeError;

function tfPropertyErrorString(type, label, name, value, valueTypeName) {
  var description = '" of type ';
  if (label === 'key') description = '" with key type ';
  return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName);
}

function TfPropertyTypeError(type, property, label, value, valueTypeName) {
  if (type) {
    valueTypeName = valueTypeName || getValueTypeName(value);
    this.message = tfPropertyErrorString(type, label, property, value, valueTypeName);
  } else {
    this.message = 'Unexpected property "' + property + '"';
  }

  captureStackTrace(this, TfTypeError);
  this.__label = label;
  this.__property = property;
  this.__type = type;
  this.__value = value;
  this.__valueTypeName = valueTypeName;
}

TfPropertyTypeError.prototype = Object.create(Error.prototype);
TfPropertyTypeError.prototype.constructor = TfTypeError;

function tfCustomError(expected, actual) {
  return new TfTypeError(expected, {}, actual);
}

function tfSubError(e, property, label) {
  // sub child?
  if (e instanceof TfPropertyTypeError) {
    property = property + '.' + e.__property;
    e = new TfPropertyTypeError(e.__type, property, e.__label, e.__value, e.__valueTypeName); // child?
  } else if (e instanceof TfTypeError) {
    e = new TfPropertyTypeError(e.__type, property, label, e.__value, e.__valueTypeName);
  }

  captureStackTrace(e);
  return e;
}

var errors$1 = {
  TfTypeError: TfTypeError,
  TfPropertyTypeError: TfPropertyTypeError,
  tfCustomError: tfCustomError,
  tfSubError: tfSubError,
  tfJSON: tfJSON,
  getValueTypeName: getValueTypeName
};

function _Buffer$1(value) {
  return Buffer.isBuffer(value);
}

function Hex(value) {
  return typeof value === 'string' && /^([0-9a-f]{2})+$/i.test(value);
}

function _LengthN(type, length) {
  var name = type.toJSON();

  function Length(value) {
    if (!type(value)) return false;
    if (value.length === length) return true;
    throw errors$1.tfCustomError(name + '(Length: ' + length + ')', name + '(Length: ' + value.length + ')');
  }

  Length.toJSON = function () {
    return name;
  };

  return Length;
}

var _ArrayN = _LengthN.bind(null, native_1$g.Array);

var _BufferN = _LengthN.bind(null, _Buffer$1);

var _HexN = _LengthN.bind(null, Hex);

var _StringN = _LengthN.bind(null, native_1$g.String);

function Range(a, b, f) {
  f = f || native_1$g.Number;

  function _range(value, strict) {
    return f(value, strict) && value > a && value < b;
  }

  _range.toJSON = function () {
    return "".concat(f.toJSON(), " between [").concat(a, ", ").concat(b, "]");
  };

  return _range;
}

var INT53_MAX = Math.pow(2, 53) - 1;

function Finite(value) {
  return typeof value === 'number' && isFinite(value);
}

function Int8(value) {
  return value << 24 >> 24 === value;
}

function Int16(value) {
  return value << 16 >> 16 === value;
}

function Int32(value) {
  return (value | 0) === value;
}

function Int53(value) {
  return typeof value === 'number' && value >= -INT53_MAX && value <= INT53_MAX && Math.floor(value) === value;
}

function UInt8(value) {
  return (value & 0xff) === value;
}

function UInt16(value) {
  return (value & 0xffff) === value;
}

function UInt32(value) {
  return value >>> 0 === value;
}

function UInt53(value) {
  return typeof value === 'number' && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;
}

var types$5 = {
  ArrayN: _ArrayN,
  Buffer: _Buffer$1,
  BufferN: _BufferN,
  Finite: Finite,
  Hex: Hex,
  HexN: _HexN,
  Int8: Int8,
  Int16: Int16,
  Int32: Int32,
  Int53: Int53,
  Range: Range,
  StringN: _StringN,
  UInt8: UInt8,
  UInt16: UInt16,
  UInt32: UInt32,
  UInt53: UInt53
};

for (var typeName$1 in types$5) {
  types$5[typeName$1].toJSON = function (t) {
    return t;
  }.bind(null, typeName$1);
}

var extra = types$5;

var tfJSON$1 = errors$1.tfJSON;
var TfTypeError$1 = errors$1.TfTypeError;
var TfPropertyTypeError$1 = errors$1.TfPropertyTypeError;
var tfSubError$1 = errors$1.tfSubError;
var getValueTypeName$1 = errors$1.getValueTypeName;
var TYPES = {
  arrayOf: function arrayOf(type, options) {
    type = compile(type);
    options = options || {};

    function _arrayOf(array, strict) {
      if (!native_1$g.Array(array)) return false;
      if (native_1$g.Nil(array)) return false;
      if (options.minLength !== undefined && array.length < options.minLength) return false;
      if (options.maxLength !== undefined && array.length > options.maxLength) return false;
      if (options.length !== undefined && array.length !== options.length) return false;
      return array.every(function (value, i) {
        try {
          return typeforce(type, value, strict);
        } catch (e) {
          throw tfSubError$1(e, i);
        }
      });
    }

    _arrayOf.toJSON = function () {
      var str = '[' + tfJSON$1(type) + ']';

      if (options.length !== undefined) {
        str += '{' + options.length + '}';
      } else if (options.minLength !== undefined || options.maxLength !== undefined) {
        str += '{' + (options.minLength === undefined ? 0 : options.minLength) + ',' + (options.maxLength === undefined ? Infinity : options.maxLength) + '}';
      }

      return str;
    };

    return _arrayOf;
  },
  maybe: function maybe(type) {
    type = compile(type);

    function _maybe(value, strict) {
      return native_1$g.Nil(value) || type(value, strict, maybe);
    }

    _maybe.toJSON = function () {
      return '?' + tfJSON$1(type);
    };

    return _maybe;
  },
  map: function map(propertyType, propertyKeyType) {
    propertyType = compile(propertyType);
    if (propertyKeyType) propertyKeyType = compile(propertyKeyType);

    function _map(value, strict) {
      if (!native_1$g.Object(value)) return false;
      if (native_1$g.Nil(value)) return false;

      for (var propertyName in value) {
        try {
          if (propertyKeyType) {
            typeforce(propertyKeyType, propertyName, strict);
          }
        } catch (e) {
          throw tfSubError$1(e, propertyName, 'key');
        }

        try {
          var propertyValue = value[propertyName];
          typeforce(propertyType, propertyValue, strict);
        } catch (e) {
          throw tfSubError$1(e, propertyName);
        }
      }

      return true;
    }

    if (propertyKeyType) {
      _map.toJSON = function () {
        return '{' + tfJSON$1(propertyKeyType) + ': ' + tfJSON$1(propertyType) + '}';
      };
    } else {
      _map.toJSON = function () {
        return '{' + tfJSON$1(propertyType) + '}';
      };
    }

    return _map;
  },
  object: function object(uncompiled) {
    var type = {};

    for (var typePropertyName in uncompiled) {
      type[typePropertyName] = compile(uncompiled[typePropertyName]);
    }

    function _object(value, strict) {
      if (!native_1$g.Object(value)) return false;
      if (native_1$g.Nil(value)) return false;
      var propertyName;

      try {
        for (propertyName in type) {
          var propertyType = type[propertyName];
          var propertyValue = value[propertyName];
          typeforce(propertyType, propertyValue, strict);
        }
      } catch (e) {
        throw tfSubError$1(e, propertyName);
      }

      if (strict) {
        for (propertyName in value) {
          if (type[propertyName]) continue;
          throw new TfPropertyTypeError$1(undefined, propertyName);
        }
      }

      return true;
    }

    _object.toJSON = function () {
      return tfJSON$1(type);
    };

    return _object;
  },
  anyOf: function anyOf() {
    var types = [].slice.call(arguments).map(compile);

    function _anyOf(value, strict) {
      return types.some(function (type) {
        try {
          return typeforce(type, value, strict);
        } catch (e) {
          return false;
        }
      });
    }

    _anyOf.toJSON = function () {
      return types.map(tfJSON$1).join('|');
    };

    return _anyOf;
  },
  allOf: function allOf() {
    var types = [].slice.call(arguments).map(compile);

    function _allOf(value, strict) {
      return types.every(function (type) {
        try {
          return typeforce(type, value, strict);
        } catch (e) {
          return false;
        }
      });
    }

    _allOf.toJSON = function () {
      return types.map(tfJSON$1).join(' & ');
    };

    return _allOf;
  },
  quacksLike: function quacksLike(type) {
    function _quacksLike(value) {
      return type === getValueTypeName$1(value);
    }

    _quacksLike.toJSON = function () {
      return type;
    };

    return _quacksLike;
  },
  tuple: function tuple() {
    var types = [].slice.call(arguments).map(compile);

    function _tuple(values, strict) {
      if (native_1$g.Nil(values)) return false;
      if (native_1$g.Nil(values.length)) return false;
      if (strict && values.length !== types.length) return false;
      return types.every(function (type, i) {
        try {
          return typeforce(type, values[i], strict);
        } catch (e) {
          throw tfSubError$1(e, i);
        }
      });
    }

    _tuple.toJSON = function () {
      return '(' + types.map(tfJSON$1).join(', ') + ')';
    };

    return _tuple;
  },
  value: function value(expected) {
    function _value(actual) {
      return actual === expected;
    }

    _value.toJSON = function () {
      return expected;
    };

    return _value;
  }
}; // TODO: deprecate

TYPES.oneOf = TYPES.anyOf;

function compile(type) {
  if (native_1$g.String(type)) {
    if (type[0] === '?') return TYPES.maybe(type.slice(1));
    return native_1$g[type] || TYPES.quacksLike(type);
  } else if (type && native_1$g.Object(type)) {
    if (native_1$g.Array(type)) {
      if (type.length !== 1) throw new TypeError('Expected compile() parameter of type Array of length 1');
      return TYPES.arrayOf(type[0]);
    }

    return TYPES.object(type);
  } else if (native_1$g.Function(type)) {
    return type;
  }

  return TYPES.value(type);
}

function typeforce(type, value, strict, surrogate) {
  if (native_1$g.Function(type)) {
    if (type(value, strict)) return true;
    throw new TfTypeError$1(surrogate || type, value);
  } // JIT


  return typeforce(compile(type), value, strict);
} // assign types to typeforce function


for (var typeName$2 in native_1$g) {
  typeforce[typeName$2] = native_1$g[typeName$2];
}

for (typeName$2 in TYPES) {
  typeforce[typeName$2] = TYPES[typeName$2];
}

for (typeName$2 in extra) {
  typeforce[typeName$2] = extra[typeName$2];
}

typeforce.compile = compile;
typeforce.TfTypeError = TfTypeError$1;
typeforce.TfPropertyTypeError = TfPropertyTypeError$1;
var typeforce_1 = typeforce;

var bip32$4 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var UINT256_TYPE = typeforce_1.BufferN(32);
  var NETWORK_TYPE = typeforce_1.compile({
    wif: typeforce_1.UInt8,
    bip32: {
      public: typeforce_1.UInt32,
      private: typeforce_1.UInt32
    }
  });
  var BITCOIN = {
    wif: 0x80,
    bip32: {
      public: 0x0488b21e,
      private: 0x0488ade4
    }
  };
  var HIGHEST_BIT = 0x80000000;
  var UINT31_MAX = Math.pow(2, 31) - 1;

  function BIP32Path(value) {
    return typeforce_1.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null;
  }

  function UInt31(value) {
    return typeforce_1.UInt32(value) && value <= UINT31_MAX;
  }

  class BIP32 {
    constructor(__D, __Q, chainCode, network) {
      var __DEPTH = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

      var __INDEX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

      var __PARENT_FINGERPRINT = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0x00000000;

      this.__D = __D;
      this.__Q = __Q;
      this.chainCode = chainCode;
      this.network = network;
      this.__DEPTH = __DEPTH;
      this.__INDEX = __INDEX;
      this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
      typeforce_1(NETWORK_TYPE, network);
      this.lowR = false;
    }

    get depth() {
      return this.__DEPTH;
    }

    get index() {
      return this.__INDEX;
    }

    get parentFingerprint() {
      return this.__PARENT_FINGERPRINT;
    }

    get publicKey() {
      if (this.__Q === undefined) this.__Q = js.pointFromScalar(this.__D, true);
      return this.__Q;
    }

    get privateKey() {
      return this.__D;
    }

    get identifier() {
      return crypto$1.hash160(this.publicKey);
    }

    get fingerprint() {
      return this.identifier.slice(0, 4);
    } // Private === not neutered
    // Public === neutered


    isNeutered() {
      return this.__D === undefined;
    }

    neutered() {
      return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
    }

    toBase58() {
      var network = this.network;
      var version = !this.isNeutered() ? network.bip32.private : network.bip32.public;
      var buffer = Buffer.allocUnsafe(78); // 4 bytes: version bytes

      buffer.writeUInt32BE(version, 0); // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ....

      buffer.writeUInt8(this.depth, 4); // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)

      buffer.writeUInt32BE(this.parentFingerprint, 5); // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
      // This is encoded in big endian. (0x00000000 if master key)

      buffer.writeUInt32BE(this.index, 9); // 32 bytes: the chain code

      this.chainCode.copy(buffer, 13); // 33 bytes: the public key or private key data

      if (!this.isNeutered()) {
        // 0x00 + k for private keys
        buffer.writeUInt8(0, 45);
        this.privateKey.copy(buffer, 46); // 33 bytes: the public key
      } else {
        // X9.62 encoding for public keys
        this.publicKey.copy(buffer, 45);
      }

      return bs58check.encode(buffer);
    }

    toWIF() {
      if (!this.privateKey) throw new TypeError('Missing private key');
      return wif$4.encode(this.network.wif, this.privateKey, true);
    } // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions


    derive(index) {
      typeforce_1(typeforce_1.UInt32, index);
      var isHardened = index >= HIGHEST_BIT;
      var data = Buffer.allocUnsafe(37); // Hardened child

      if (isHardened) {
        if (this.isNeutered()) throw new TypeError('Missing private key for hardened child key'); // data = 0x00 || ser256(kpar) || ser32(index)

        data[0] = 0x00;
        this.privateKey.copy(data, 1);
        data.writeUInt32BE(index, 33); // Normal child
      } else {
        // data = serP(point(kpar)) || ser32(index)
        //      = serP(Kpar) || ser32(index)
        this.publicKey.copy(data, 0);
        data.writeUInt32BE(index, 33);
      }

      var I = crypto$1.hmacSHA512(this.chainCode, data);
      var IL = I.slice(0, 32);
      var IR = I.slice(32); // if parse256(IL) >= n, proceed with the next value for i

      if (!js.isPrivate(IL)) return this.derive(index + 1); // Private parent key -> private child key

      var hd;

      if (!this.isNeutered()) {
        // ki = parse256(IL) + kpar (mod n)
        var ki = js.privateAdd(this.privateKey, IL); // In case ki == 0, proceed with the next value for i

        if (ki == null) return this.derive(index + 1);
        hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0)); // Public parent key -> public child key
      } else {
        // Ki = point(parse256(IL)) + Kpar
        //    = G*IL + Kpar
        var Ki = js.pointAddScalar(this.publicKey, IL, true); // In case Ki is the point at infinity, proceed with the next value for i

        if (Ki === null) return this.derive(index + 1);
        hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
      }

      return hd;
    }

    deriveHardened(index) {
      typeforce_1(UInt31, index); // Only derives hardened private keys by default

      return this.derive(index + HIGHEST_BIT);
    }

    derivePath(path) {
      typeforce_1(BIP32Path, path);
      var splitPath = path.split('/');

      if (splitPath[0] === 'm') {
        if (this.parentFingerprint) throw new TypeError('Expected master, got child');
        splitPath = splitPath.slice(1);
      }

      return splitPath.reduce((prevHd, indexStr) => {
        var index;

        if (indexStr.slice(-1) === "'") {
          index = parseInt(indexStr.slice(0, -1), 10);
          return prevHd.deriveHardened(index);
        } else {
          index = parseInt(indexStr, 10);
          return prevHd.derive(index);
        }
      }, this);
    }

    sign(hash, lowR) {
      if (!this.privateKey) throw new Error('Missing private key');
      if (lowR === undefined) lowR = this.lowR;

      if (lowR === false) {
        return js.sign(hash, this.privateKey);
      } else {
        var sig = js.sign(hash, this.privateKey);
        var extraData = Buffer.alloc(32, 0);
        var counter = 0; // if first try is lowR, skip the loop
        // for second try and on, add extra entropy counting up

        while (sig[0] > 0x7f) {
          counter++;
          extraData.writeUIntLE(counter, 0, 6);
          sig = js.signWithEntropy(hash, this.privateKey, extraData);
        }

        return sig;
      }
    }

    verify(hash, signature) {
      return js.verify(hash, this.publicKey, signature);
    }

  }

  function fromBase58(inString, network) {
    var buffer = bs58check.decode(inString);
    if (buffer.length !== 78) throw new TypeError('Invalid buffer length');
    network = network || BITCOIN; // 4 bytes: version bytes

    var version = buffer.readUInt32BE(0);
    if (version !== network.bip32.private && version !== network.bip32.public) throw new TypeError('Invalid network version'); // 1 byte: depth: 0x00 for master nodes, 0x01 for level-1 descendants, ...

    var depth = buffer[4]; // 4 bytes: the fingerprint of the parent's key (0x00000000 if master key)

    var parentFingerprint = buffer.readUInt32BE(5);

    if (depth === 0) {
      if (parentFingerprint !== 0x00000000) throw new TypeError('Invalid parent fingerprint');
    } // 4 bytes: child number. This is the number i in xi = xpar/i, with xi the key being serialized.
    // This is encoded in MSB order. (0x00000000 if master key)


    var index = buffer.readUInt32BE(9);
    if (depth === 0 && index !== 0) throw new TypeError('Invalid index'); // 32 bytes: the chain code

    var chainCode = buffer.slice(13, 45);
    var hd; // 33 bytes: private key data (0x00 + k)

    if (version === network.bip32.private) {
      if (buffer.readUInt8(45) !== 0x00) throw new TypeError('Invalid private key');
      var k = buffer.slice(46, 78);
      hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint); // 33 bytes: public key data (0x02 + X or 0x03 + X)
    } else {
      var X = buffer.slice(45, 78);
      hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);
    }

    return hd;
  }

  exports.fromBase58 = fromBase58;

  function fromPrivateKey(privateKey, chainCode, network) {
    return fromPrivateKeyLocal(privateKey, chainCode, network);
  }

  exports.fromPrivateKey = fromPrivateKey;

  function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce_1({
      privateKey: UINT256_TYPE,
      chainCode: UINT256_TYPE
    }, {
      privateKey,
      chainCode
    });
    network = network || BITCOIN;
    if (!js.isPrivate(privateKey)) throw new TypeError('Private key not in range [1, n)');
    return new BIP32(privateKey, undefined, chainCode, network, depth, index, parentFingerprint);
  }

  function fromPublicKey(publicKey, chainCode, network) {
    return fromPublicKeyLocal(publicKey, chainCode, network);
  }

  exports.fromPublicKey = fromPublicKey;

  function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce_1({
      publicKey: typeforce_1.BufferN(33),
      chainCode: UINT256_TYPE
    }, {
      publicKey,
      chainCode
    });
    network = network || BITCOIN; // verify the X coordinate is a point on the curve

    if (!js.isPoint(publicKey)) throw new TypeError('Point is not on the curve');
    return new BIP32(undefined, publicKey, chainCode, network, depth, index, parentFingerprint);
  }

  function fromSeed(seed, network) {
    typeforce_1(typeforce_1.Buffer, seed);
    if (seed.length < 16) throw new TypeError('Seed should be at least 128 bits');
    if (seed.length > 64) throw new TypeError('Seed should be at most 512 bits');
    network = network || BITCOIN;
    var I = crypto$1.hmacSHA512(Buffer.from('Bitcoin seed', 'utf8'), seed);
    var IL = I.slice(0, 32);
    var IR = I.slice(32);
    return fromPrivateKey(IL, IR, network);
  }

  exports.fromSeed = fromSeed;
});

var src$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fromSeed = bip32$4.fromSeed;
  exports.fromBase58 = bip32$4.fromBase58;
  exports.fromPublicKey = bip32$4.fromPublicKey;
  exports.fromPrivateKey = bip32$4.fromPrivateKey;
});
var index$2 = /*@__PURE__*/unwrapExports(src$2);

var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

function checkBuffer(buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string');
  }
}

var precondition = function precondition(password, salt, iterations, keylen) {
  checkBuffer(password, 'Password');
  checkBuffer(salt, 'Salt');

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};

var defaultEncoding;
/* istanbul ignore next */

if (process.browser) {
  defaultEncoding = 'utf-8';
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
}

var defaultEncoding_1 = defaultEncoding;

var Buffer$r = safeBuffer.Buffer;
var ZEROS$2 = Buffer$r.alloc(128);
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};

function Hmac$3(alg, key, saltLen) {
  var hash = getDigest(alg);
  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  if (key.length > blocksize) {
    key = hash(key);
  } else if (key.length < blocksize) {
    key = Buffer$r.concat([key, ZEROS$2], blocksize);
  }

  var ipad = Buffer$r.allocUnsafe(blocksize + sizes[alg]);
  var opad = Buffer$r.allocUnsafe(blocksize + sizes[alg]);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  var ipad1 = Buffer$r.allocUnsafe(blocksize + saltLen + 4);
  ipad.copy(ipad1, 0, 0, blocksize);
  this.ipad1 = ipad1;
  this.ipad2 = ipad;
  this.opad = opad;
  this.alg = alg;
  this.blocksize = blocksize;
  this.hash = hash;
  this.size = sizes[alg];
}

Hmac$3.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize);
  var h = this.hash(ipad);
  h.copy(this.opad, this.blocksize);
  return this.hash(this.opad);
};

function getDigest(alg) {
  function shaFunc(data) {
    return sha_js(alg).update(data).digest();
  }

  function rmd160Func(data) {
    return new ripemd160$1().update(data).digest();
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
  if (alg === 'md5') return md5$1;
  return shaFunc;
}

function pbkdf2$1(password, salt, iterations, keylen, digest) {
  precondition(password, salt, iterations, keylen);
  if (!Buffer$r.isBuffer(password)) password = Buffer$r.from(password, defaultEncoding_1);
  if (!Buffer$r.isBuffer(salt)) salt = Buffer$r.from(salt, defaultEncoding_1);
  digest = digest || 'sha1';
  var hmac = new Hmac$3(digest, password, salt.length);
  var DK = Buffer$r.allocUnsafe(keylen);
  var block1 = Buffer$r.allocUnsafe(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);
  var destPos = 0;
  var hLen = sizes[digest];
  var l = Math.ceil(keylen / hLen);

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);
    var T = hmac.run(block1, hmac.ipad1);
    var U = T;

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2);

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k];
      }
    }

    T.copy(DK, destPos);
    destPos += hLen;
  }

  return DK;
}

var syncBrowser = pbkdf2$1;

var Buffer$s = safeBuffer.Buffer;
var ZERO_BUF;
var subtle$1 = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
};
var checks = [];

function checkNative(algo) {
  if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
    return Promise.resolve(false);
  }

  if (!subtle$1 || !subtle$1.importKey || !subtle$1.deriveBits) {
    return Promise.resolve(false);
  }

  if (checks[algo] !== undefined) {
    return checks[algo];
  }

  ZERO_BUF = ZERO_BUF || Buffer$s.alloc(8);
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
  checks[algo] = prom;
  return prom;
}

function browserPbkdf2(password, salt, iterations, length, algo) {
  return subtle$1.importKey('raw', password, {
    name: 'PBKDF2'
  }, false, ['deriveBits']).then(function (key) {
    return subtle$1.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3);
  }).then(function (res) {
    return Buffer$s.from(res);
  });
}

function resolvePromise(promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out);
    });
  }, function (e) {
    process.nextTick(function () {
      callback(e);
    });
  });
}

var async = function async(password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }

  digest = digest || 'sha1';
  var algo = toBrowser[digest.toLowerCase()];

  if (!algo || typeof commonjsGlobal.Promise !== 'function') {
    return process.nextTick(function () {
      var out;

      try {
        out = syncBrowser(password, salt, iterations, keylen, digest);
      } catch (e) {
        return callback(e);
      }

      callback(null, out);
    });
  }

  precondition(password, salt, iterations, keylen);
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
  if (!Buffer$s.isBuffer(password)) password = Buffer$s.from(password, defaultEncoding_1);
  if (!Buffer$s.isBuffer(salt)) salt = Buffer$s.from(salt, defaultEncoding_1);
  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
    return syncBrowser(password, salt, iterations, keylen, digest);
  }), callback);
};

var pbkdf2$2 = async;
var pbkdf2Sync = syncBrowser;
var browser$4 = {
  pbkdf2: pbkdf2$2,
  pbkdf2Sync: pbkdf2Sync
};

var browser$5 = createCommonjsModule(function (module) {
  // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues

  var MAX_BYTES = 65536; // Node supports requesting up to this number of bytes
  // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48

  var MAX_UINT32 = 4294967295;

  function oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
  }

  var Buffer = safeBuffer.Buffer;
  var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

  if (crypto && crypto.getRandomValues) {
    module.exports = randomBytes;
  } else {
    module.exports = oldBrowser;
  }

  function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = Buffer.allocUnsafe(size);

    if (size > 0) {
      // getRandomValues fails on IE if size == 0
      if (size > MAX_BYTES) {
        // this is the max bytes crypto.getRandomValues
        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for (var generated = 0; generated < size; generated += MAX_BYTES) {
          // buffer.slice automatically checks if the end is past the end of
          // the buffer so we don't have to here
          crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        }
      } else {
        crypto.getRandomValues(bytes);
      }
    }

    if (typeof cb === 'function') {
      return process.nextTick(function () {
        cb(null, bytes);
      });
    }

    return bytes;
  }
});

var chinese_simplified = ["的", "一", "是", "在", "不", "了", "有", "和", "人", "这", "中", "大", "为", "上", "个", "国", "我", "以", "要", "他", "时", "来", "用", "们", "生", "到", "作", "地", "于", "出", "就", "分", "对", "成", "会", "可", "主", "发", "年", "动", "同", "工", "也", "能", "下", "过", "子", "说", "产", "种", "面", "而", "方", "后", "多", "定", "行", "学", "法", "所", "民", "得", "经", "十", "三", "之", "进", "着", "等", "部", "度", "家", "电", "力", "里", "如", "水", "化", "高", "自", "二", "理", "起", "小", "物", "现", "实", "加", "量", "都", "两", "体", "制", "机", "当", "使", "点", "从", "业", "本", "去", "把", "性", "好", "应", "开", "它", "合", "还", "因", "由", "其", "些", "然", "前", "外", "天", "政", "四", "日", "那", "社", "义", "事", "平", "形", "相", "全", "表", "间", "样", "与", "关", "各", "重", "新", "线", "内", "数", "正", "心", "反", "你", "明", "看", "原", "又", "么", "利", "比", "或", "但", "质", "气", "第", "向", "道", "命", "此", "变", "条", "只", "没", "结", "解", "问", "意", "建", "月", "公", "无", "系", "军", "很", "情", "者", "最", "立", "代", "想", "已", "通", "并", "提", "直", "题", "党", "程", "展", "五", "果", "料", "象", "员", "革", "位", "入", "常", "文", "总", "次", "品", "式", "活", "设", "及", "管", "特", "件", "长", "求", "老", "头", "基", "资", "边", "流", "路", "级", "少", "图", "山", "统", "接", "知", "较", "将", "组", "见", "计", "别", "她", "手", "角", "期", "根", "论", "运", "农", "指", "几", "九", "区", "强", "放", "决", "西", "被", "干", "做", "必", "战", "先", "回", "则", "任", "取", "据", "处", "队", "南", "给", "色", "光", "门", "即", "保", "治", "北", "造", "百", "规", "热", "领", "七", "海", "口", "东", "导", "器", "压", "志", "世", "金", "增", "争", "济", "阶", "油", "思", "术", "极", "交", "受", "联", "什", "认", "六", "共", "权", "收", "证", "改", "清", "美", "再", "采", "转", "更", "单", "风", "切", "打", "白", "教", "速", "花", "带", "安", "场", "身", "车", "例", "真", "务", "具", "万", "每", "目", "至", "达", "走", "积", "示", "议", "声", "报", "斗", "完", "类", "八", "离", "华", "名", "确", "才", "科", "张", "信", "马", "节", "话", "米", "整", "空", "元", "况", "今", "集", "温", "传", "土", "许", "步", "群", "广", "石", "记", "需", "段", "研", "界", "拉", "林", "律", "叫", "且", "究", "观", "越", "织", "装", "影", "算", "低", "持", "音", "众", "书", "布", "复", "容", "儿", "须", "际", "商", "非", "验", "连", "断", "深", "难", "近", "矿", "千", "周", "委", "素", "技", "备", "半", "办", "青", "省", "列", "习", "响", "约", "支", "般", "史", "感", "劳", "便", "团", "往", "酸", "历", "市", "克", "何", "除", "消", "构", "府", "称", "太", "准", "精", "值", "号", "率", "族", "维", "划", "选", "标", "写", "存", "候", "毛", "亲", "快", "效", "斯", "院", "查", "江", "型", "眼", "王", "按", "格", "养", "易", "置", "派", "层", "片", "始", "却", "专", "状", "育", "厂", "京", "识", "适", "属", "圆", "包", "火", "住", "调", "满", "县", "局", "照", "参", "红", "细", "引", "听", "该", "铁", "价", "严", "首", "底", "液", "官", "德", "随", "病", "苏", "失", "尔", "死", "讲", "配", "女", "黄", "推", "显", "谈", "罪", "神", "艺", "呢", "席", "含", "企", "望", "密", "批", "营", "项", "防", "举", "球", "英", "氧", "势", "告", "李", "台", "落", "木", "帮", "轮", "破", "亚", "师", "围", "注", "远", "字", "材", "排", "供", "河", "态", "封", "另", "施", "减", "树", "溶", "怎", "止", "案", "言", "士", "均", "武", "固", "叶", "鱼", "波", "视", "仅", "费", "紧", "爱", "左", "章", "早", "朝", "害", "续", "轻", "服", "试", "食", "充", "兵", "源", "判", "护", "司", "足", "某", "练", "差", "致", "板", "田", "降", "黑", "犯", "负", "击", "范", "继", "兴", "似", "余", "坚", "曲", "输", "修", "故", "城", "夫", "够", "送", "笔", "船", "占", "右", "财", "吃", "富", "春", "职", "觉", "汉", "画", "功", "巴", "跟", "虽", "杂", "飞", "检", "吸", "助", "升", "阳", "互", "初", "创", "抗", "考", "投", "坏", "策", "古", "径", "换", "未", "跑", "留", "钢", "曾", "端", "责", "站", "简", "述", "钱", "副", "尽", "帝", "射", "草", "冲", "承", "独", "令", "限", "阿", "宣", "环", "双", "请", "超", "微", "让", "控", "州", "良", "轴", "找", "否", "纪", "益", "依", "优", "顶", "础", "载", "倒", "房", "突", "坐", "粉", "敌", "略", "客", "袁", "冷", "胜", "绝", "析", "块", "剂", "测", "丝", "协", "诉", "念", "陈", "仍", "罗", "盐", "友", "洋", "错", "苦", "夜", "刑", "移", "频", "逐", "靠", "混", "母", "短", "皮", "终", "聚", "汽", "村", "云", "哪", "既", "距", "卫", "停", "烈", "央", "察", "烧", "迅", "境", "若", "印", "洲", "刻", "括", "激", "孔", "搞", "甚", "室", "待", "核", "校", "散", "侵", "吧", "甲", "游", "久", "菜", "味", "旧", "模", "湖", "货", "损", "预", "阻", "毫", "普", "稳", "乙", "妈", "植", "息", "扩", "银", "语", "挥", "酒", "守", "拿", "序", "纸", "医", "缺", "雨", "吗", "针", "刘", "啊", "急", "唱", "误", "训", "愿", "审", "附", "获", "茶", "鲜", "粮", "斤", "孩", "脱", "硫", "肥", "善", "龙", "演", "父", "渐", "血", "欢", "械", "掌", "歌", "沙", "刚", "攻", "谓", "盾", "讨", "晚", "粒", "乱", "燃", "矛", "乎", "杀", "药", "宁", "鲁", "贵", "钟", "煤", "读", "班", "伯", "香", "介", "迫", "句", "丰", "培", "握", "兰", "担", "弦", "蛋", "沉", "假", "穿", "执", "答", "乐", "谁", "顺", "烟", "缩", "征", "脸", "喜", "松", "脚", "困", "异", "免", "背", "星", "福", "买", "染", "井", "概", "慢", "怕", "磁", "倍", "祖", "皇", "促", "静", "补", "评", "翻", "肉", "践", "尼", "衣", "宽", "扬", "棉", "希", "伤", "操", "垂", "秋", "宜", "氢", "套", "督", "振", "架", "亮", "末", "宪", "庆", "编", "牛", "触", "映", "雷", "销", "诗", "座", "居", "抓", "裂", "胞", "呼", "娘", "景", "威", "绿", "晶", "厚", "盟", "衡", "鸡", "孙", "延", "危", "胶", "屋", "乡", "临", "陆", "顾", "掉", "呀", "灯", "岁", "措", "束", "耐", "剧", "玉", "赵", "跳", "哥", "季", "课", "凯", "胡", "额", "款", "绍", "卷", "齐", "伟", "蒸", "殖", "永", "宗", "苗", "川", "炉", "岩", "弱", "零", "杨", "奏", "沿", "露", "杆", "探", "滑", "镇", "饭", "浓", "航", "怀", "赶", "库", "夺", "伊", "灵", "税", "途", "灭", "赛", "归", "召", "鼓", "播", "盘", "裁", "险", "康", "唯", "录", "菌", "纯", "借", "糖", "盖", "横", "符", "私", "努", "堂", "域", "枪", "润", "幅", "哈", "竟", "熟", "虫", "泽", "脑", "壤", "碳", "欧", "遍", "侧", "寨", "敢", "彻", "虑", "斜", "薄", "庭", "纳", "弹", "饲", "伸", "折", "麦", "湿", "暗", "荷", "瓦", "塞", "床", "筑", "恶", "户", "访", "塔", "奇", "透", "梁", "刀", "旋", "迹", "卡", "氯", "遇", "份", "毒", "泥", "退", "洗", "摆", "灰", "彩", "卖", "耗", "夏", "择", "忙", "铜", "献", "硬", "予", "繁", "圈", "雪", "函", "亦", "抽", "篇", "阵", "阴", "丁", "尺", "追", "堆", "雄", "迎", "泛", "爸", "楼", "避", "谋", "吨", "野", "猪", "旗", "累", "偏", "典", "馆", "索", "秦", "脂", "潮", "爷", "豆", "忽", "托", "惊", "塑", "遗", "愈", "朱", "替", "纤", "粗", "倾", "尚", "痛", "楚", "谢", "奋", "购", "磨", "君", "池", "旁", "碎", "骨", "监", "捕", "弟", "暴", "割", "贯", "殊", "释", "词", "亡", "壁", "顿", "宝", "午", "尘", "闻", "揭", "炮", "残", "冬", "桥", "妇", "警", "综", "招", "吴", "付", "浮", "遭", "徐", "您", "摇", "谷", "赞", "箱", "隔", "订", "男", "吹", "园", "纷", "唐", "败", "宋", "玻", "巨", "耕", "坦", "荣", "闭", "湾", "键", "凡", "驻", "锅", "救", "恩", "剥", "凝", "碱", "齿", "截", "炼", "麻", "纺", "禁", "废", "盛", "版", "缓", "净", "睛", "昌", "婚", "涉", "筒", "嘴", "插", "岸", "朗", "庄", "街", "藏", "姑", "贸", "腐", "奴", "啦", "惯", "乘", "伙", "恢", "匀", "纱", "扎", "辩", "耳", "彪", "臣", "亿", "璃", "抵", "脉", "秀", "萨", "俄", "网", "舞", "店", "喷", "纵", "寸", "汗", "挂", "洪", "贺", "闪", "柬", "爆", "烯", "津", "稻", "墙", "软", "勇", "像", "滚", "厘", "蒙", "芳", "肯", "坡", "柱", "荡", "腿", "仪", "旅", "尾", "轧", "冰", "贡", "登", "黎", "削", "钻", "勒", "逃", "障", "氨", "郭", "峰", "币", "港", "伏", "轨", "亩", "毕", "擦", "莫", "刺", "浪", "秘", "援", "株", "健", "售", "股", "岛", "甘", "泡", "睡", "童", "铸", "汤", "阀", "休", "汇", "舍", "牧", "绕", "炸", "哲", "磷", "绩", "朋", "淡", "尖", "启", "陷", "柴", "呈", "徒", "颜", "泪", "稍", "忘", "泵", "蓝", "拖", "洞", "授", "镜", "辛", "壮", "锋", "贫", "虚", "弯", "摩", "泰", "幼", "廷", "尊", "窗", "纲", "弄", "隶", "疑", "氏", "宫", "姐", "震", "瑞", "怪", "尤", "琴", "循", "描", "膜", "违", "夹", "腰", "缘", "珠", "穷", "森", "枝", "竹", "沟", "催", "绳", "忆", "邦", "剩", "幸", "浆", "栏", "拥", "牙", "贮", "礼", "滤", "钠", "纹", "罢", "拍", "咱", "喊", "袖", "埃", "勤", "罚", "焦", "潜", "伍", "墨", "欲", "缝", "姓", "刊", "饱", "仿", "奖", "铝", "鬼", "丽", "跨", "默", "挖", "链", "扫", "喝", "袋", "炭", "污", "幕", "诸", "弧", "励", "梅", "奶", "洁", "灾", "舟", "鉴", "苯", "讼", "抱", "毁", "懂", "寒", "智", "埔", "寄", "届", "跃", "渡", "挑", "丹", "艰", "贝", "碰", "拔", "爹", "戴", "码", "梦", "芽", "熔", "赤", "渔", "哭", "敬", "颗", "奔", "铅", "仲", "虎", "稀", "妹", "乏", "珍", "申", "桌", "遵", "允", "隆", "螺", "仓", "魏", "锐", "晓", "氮", "兼", "隐", "碍", "赫", "拨", "忠", "肃", "缸", "牵", "抢", "博", "巧", "壳", "兄", "杜", "讯", "诚", "碧", "祥", "柯", "页", "巡", "矩", "悲", "灌", "龄", "伦", "票", "寻", "桂", "铺", "圣", "恐", "恰", "郑", "趣", "抬", "荒", "腾", "贴", "柔", "滴", "猛", "阔", "辆", "妻", "填", "撤", "储", "签", "闹", "扰", "紫", "砂", "递", "戏", "吊", "陶", "伐", "喂", "疗", "瓶", "婆", "抚", "臂", "摸", "忍", "虾", "蜡", "邻", "胸", "巩", "挤", "偶", "弃", "槽", "劲", "乳", "邓", "吉", "仁", "烂", "砖", "租", "乌", "舰", "伴", "瓜", "浅", "丙", "暂", "燥", "橡", "柳", "迷", "暖", "牌", "秧", "胆", "详", "簧", "踏", "瓷", "谱", "呆", "宾", "糊", "洛", "辉", "愤", "竞", "隙", "怒", "粘", "乃", "绪", "肩", "籍", "敏", "涂", "熙", "皆", "侦", "悬", "掘", "享", "纠", "醒", "狂", "锁", "淀", "恨", "牲", "霸", "爬", "赏", "逆", "玩", "陵", "祝", "秒", "浙", "貌", "役", "彼", "悉", "鸭", "趋", "凤", "晨", "畜", "辈", "秩", "卵", "署", "梯", "炎", "滩", "棋", "驱", "筛", "峡", "冒", "啥", "寿", "译", "浸", "泉", "帽", "迟", "硅", "疆", "贷", "漏", "稿", "冠", "嫩", "胁", "芯", "牢", "叛", "蚀", "奥", "鸣", "岭", "羊", "凭", "串", "塘", "绘", "酵", "融", "盆", "锡", "庙", "筹", "冻", "辅", "摄", "袭", "筋", "拒", "僚", "旱", "钾", "鸟", "漆", "沈", "眉", "疏", "添", "棒", "穗", "硝", "韩", "逼", "扭", "侨", "凉", "挺", "碗", "栽", "炒", "杯", "患", "馏", "劝", "豪", "辽", "勃", "鸿", "旦", "吏", "拜", "狗", "埋", "辊", "掩", "饮", "搬", "骂", "辞", "勾", "扣", "估", "蒋", "绒", "雾", "丈", "朵", "姆", "拟", "宇", "辑", "陕", "雕", "偿", "蓄", "崇", "剪", "倡", "厅", "咬", "驶", "薯", "刷", "斥", "番", "赋", "奉", "佛", "浇", "漫", "曼", "扇", "钙", "桃", "扶", "仔", "返", "俗", "亏", "腔", "鞋", "棱", "覆", "框", "悄", "叔", "撞", "骗", "勘", "旺", "沸", "孤", "吐", "孟", "渠", "屈", "疾", "妙", "惜", "仰", "狠", "胀", "谐", "抛", "霉", "桑", "岗", "嘛", "衰", "盗", "渗", "脏", "赖", "涌", "甜", "曹", "阅", "肌", "哩", "厉", "烃", "纬", "毅", "昨", "伪", "症", "煮", "叹", "钉", "搭", "茎", "笼", "酷", "偷", "弓", "锥", "恒", "杰", "坑", "鼻", "翼", "纶", "叙", "狱", "逮", "罐", "络", "棚", "抑", "膨", "蔬", "寺", "骤", "穆", "冶", "枯", "册", "尸", "凸", "绅", "坯", "牺", "焰", "轰", "欣", "晋", "瘦", "御", "锭", "锦", "丧", "旬", "锻", "垄", "搜", "扑", "邀", "亭", "酯", "迈", "舒", "脆", "酶", "闲", "忧", "酚", "顽", "羽", "涨", "卸", "仗", "陪", "辟", "惩", "杭", "姚", "肚", "捉", "飘", "漂", "昆", "欺", "吾", "郎", "烷", "汁", "呵", "饰", "萧", "雅", "邮", "迁", "燕", "撒", "姻", "赴", "宴", "烦", "债", "帐", "斑", "铃", "旨", "醇", "董", "饼", "雏", "姿", "拌", "傅", "腹", "妥", "揉", "贤", "拆", "歪", "葡", "胺", "丢", "浩", "徽", "昂", "垫", "挡", "览", "贪", "慰", "缴", "汪", "慌", "冯", "诺", "姜", "谊", "凶", "劣", "诬", "耀", "昏", "躺", "盈", "骑", "乔", "溪", "丛", "卢", "抹", "闷", "咨", "刮", "驾", "缆", "悟", "摘", "铒", "掷", "颇", "幻", "柄", "惠", "惨", "佳", "仇", "腊", "窝", "涤", "剑", "瞧", "堡", "泼", "葱", "罩", "霍", "捞", "胎", "苍", "滨", "俩", "捅", "湘", "砍", "霞", "邵", "萄", "疯", "淮", "遂", "熊", "粪", "烘", "宿", "档", "戈", "驳", "嫂", "裕", "徙", "箭", "捐", "肠", "撑", "晒", "辨", "殿", "莲", "摊", "搅", "酱", "屏", "疫", "哀", "蔡", "堵", "沫", "皱", "畅", "叠", "阁", "莱", "敲", "辖", "钩", "痕", "坝", "巷", "饿", "祸", "丘", "玄", "溜", "曰", "逻", "彭", "尝", "卿", "妨", "艇", "吞", "韦", "怨", "矮", "歇"];

var chinese_simplified$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': chinese_simplified
});

var chinese_traditional = ["的", "一", "是", "在", "不", "了", "有", "和", "人", "這", "中", "大", "為", "上", "個", "國", "我", "以", "要", "他", "時", "來", "用", "們", "生", "到", "作", "地", "於", "出", "就", "分", "對", "成", "會", "可", "主", "發", "年", "動", "同", "工", "也", "能", "下", "過", "子", "說", "產", "種", "面", "而", "方", "後", "多", "定", "行", "學", "法", "所", "民", "得", "經", "十", "三", "之", "進", "著", "等", "部", "度", "家", "電", "力", "裡", "如", "水", "化", "高", "自", "二", "理", "起", "小", "物", "現", "實", "加", "量", "都", "兩", "體", "制", "機", "當", "使", "點", "從", "業", "本", "去", "把", "性", "好", "應", "開", "它", "合", "還", "因", "由", "其", "些", "然", "前", "外", "天", "政", "四", "日", "那", "社", "義", "事", "平", "形", "相", "全", "表", "間", "樣", "與", "關", "各", "重", "新", "線", "內", "數", "正", "心", "反", "你", "明", "看", "原", "又", "麼", "利", "比", "或", "但", "質", "氣", "第", "向", "道", "命", "此", "變", "條", "只", "沒", "結", "解", "問", "意", "建", "月", "公", "無", "系", "軍", "很", "情", "者", "最", "立", "代", "想", "已", "通", "並", "提", "直", "題", "黨", "程", "展", "五", "果", "料", "象", "員", "革", "位", "入", "常", "文", "總", "次", "品", "式", "活", "設", "及", "管", "特", "件", "長", "求", "老", "頭", "基", "資", "邊", "流", "路", "級", "少", "圖", "山", "統", "接", "知", "較", "將", "組", "見", "計", "別", "她", "手", "角", "期", "根", "論", "運", "農", "指", "幾", "九", "區", "強", "放", "決", "西", "被", "幹", "做", "必", "戰", "先", "回", "則", "任", "取", "據", "處", "隊", "南", "給", "色", "光", "門", "即", "保", "治", "北", "造", "百", "規", "熱", "領", "七", "海", "口", "東", "導", "器", "壓", "志", "世", "金", "增", "爭", "濟", "階", "油", "思", "術", "極", "交", "受", "聯", "什", "認", "六", "共", "權", "收", "證", "改", "清", "美", "再", "採", "轉", "更", "單", "風", "切", "打", "白", "教", "速", "花", "帶", "安", "場", "身", "車", "例", "真", "務", "具", "萬", "每", "目", "至", "達", "走", "積", "示", "議", "聲", "報", "鬥", "完", "類", "八", "離", "華", "名", "確", "才", "科", "張", "信", "馬", "節", "話", "米", "整", "空", "元", "況", "今", "集", "溫", "傳", "土", "許", "步", "群", "廣", "石", "記", "需", "段", "研", "界", "拉", "林", "律", "叫", "且", "究", "觀", "越", "織", "裝", "影", "算", "低", "持", "音", "眾", "書", "布", "复", "容", "兒", "須", "際", "商", "非", "驗", "連", "斷", "深", "難", "近", "礦", "千", "週", "委", "素", "技", "備", "半", "辦", "青", "省", "列", "習", "響", "約", "支", "般", "史", "感", "勞", "便", "團", "往", "酸", "歷", "市", "克", "何", "除", "消", "構", "府", "稱", "太", "準", "精", "值", "號", "率", "族", "維", "劃", "選", "標", "寫", "存", "候", "毛", "親", "快", "效", "斯", "院", "查", "江", "型", "眼", "王", "按", "格", "養", "易", "置", "派", "層", "片", "始", "卻", "專", "狀", "育", "廠", "京", "識", "適", "屬", "圓", "包", "火", "住", "調", "滿", "縣", "局", "照", "參", "紅", "細", "引", "聽", "該", "鐵", "價", "嚴", "首", "底", "液", "官", "德", "隨", "病", "蘇", "失", "爾", "死", "講", "配", "女", "黃", "推", "顯", "談", "罪", "神", "藝", "呢", "席", "含", "企", "望", "密", "批", "營", "項", "防", "舉", "球", "英", "氧", "勢", "告", "李", "台", "落", "木", "幫", "輪", "破", "亞", "師", "圍", "注", "遠", "字", "材", "排", "供", "河", "態", "封", "另", "施", "減", "樹", "溶", "怎", "止", "案", "言", "士", "均", "武", "固", "葉", "魚", "波", "視", "僅", "費", "緊", "愛", "左", "章", "早", "朝", "害", "續", "輕", "服", "試", "食", "充", "兵", "源", "判", "護", "司", "足", "某", "練", "差", "致", "板", "田", "降", "黑", "犯", "負", "擊", "范", "繼", "興", "似", "餘", "堅", "曲", "輸", "修", "故", "城", "夫", "夠", "送", "筆", "船", "佔", "右", "財", "吃", "富", "春", "職", "覺", "漢", "畫", "功", "巴", "跟", "雖", "雜", "飛", "檢", "吸", "助", "昇", "陽", "互", "初", "創", "抗", "考", "投", "壞", "策", "古", "徑", "換", "未", "跑", "留", "鋼", "曾", "端", "責", "站", "簡", "述", "錢", "副", "盡", "帝", "射", "草", "衝", "承", "獨", "令", "限", "阿", "宣", "環", "雙", "請", "超", "微", "讓", "控", "州", "良", "軸", "找", "否", "紀", "益", "依", "優", "頂", "礎", "載", "倒", "房", "突", "坐", "粉", "敵", "略", "客", "袁", "冷", "勝", "絕", "析", "塊", "劑", "測", "絲", "協", "訴", "念", "陳", "仍", "羅", "鹽", "友", "洋", "錯", "苦", "夜", "刑", "移", "頻", "逐", "靠", "混", "母", "短", "皮", "終", "聚", "汽", "村", "雲", "哪", "既", "距", "衛", "停", "烈", "央", "察", "燒", "迅", "境", "若", "印", "洲", "刻", "括", "激", "孔", "搞", "甚", "室", "待", "核", "校", "散", "侵", "吧", "甲", "遊", "久", "菜", "味", "舊", "模", "湖", "貨", "損", "預", "阻", "毫", "普", "穩", "乙", "媽", "植", "息", "擴", "銀", "語", "揮", "酒", "守", "拿", "序", "紙", "醫", "缺", "雨", "嗎", "針", "劉", "啊", "急", "唱", "誤", "訓", "願", "審", "附", "獲", "茶", "鮮", "糧", "斤", "孩", "脫", "硫", "肥", "善", "龍", "演", "父", "漸", "血", "歡", "械", "掌", "歌", "沙", "剛", "攻", "謂", "盾", "討", "晚", "粒", "亂", "燃", "矛", "乎", "殺", "藥", "寧", "魯", "貴", "鐘", "煤", "讀", "班", "伯", "香", "介", "迫", "句", "豐", "培", "握", "蘭", "擔", "弦", "蛋", "沉", "假", "穿", "執", "答", "樂", "誰", "順", "煙", "縮", "徵", "臉", "喜", "松", "腳", "困", "異", "免", "背", "星", "福", "買", "染", "井", "概", "慢", "怕", "磁", "倍", "祖", "皇", "促", "靜", "補", "評", "翻", "肉", "踐", "尼", "衣", "寬", "揚", "棉", "希", "傷", "操", "垂", "秋", "宜", "氫", "套", "督", "振", "架", "亮", "末", "憲", "慶", "編", "牛", "觸", "映", "雷", "銷", "詩", "座", "居", "抓", "裂", "胞", "呼", "娘", "景", "威", "綠", "晶", "厚", "盟", "衡", "雞", "孫", "延", "危", "膠", "屋", "鄉", "臨", "陸", "顧", "掉", "呀", "燈", "歲", "措", "束", "耐", "劇", "玉", "趙", "跳", "哥", "季", "課", "凱", "胡", "額", "款", "紹", "卷", "齊", "偉", "蒸", "殖", "永", "宗", "苗", "川", "爐", "岩", "弱", "零", "楊", "奏", "沿", "露", "桿", "探", "滑", "鎮", "飯", "濃", "航", "懷", "趕", "庫", "奪", "伊", "靈", "稅", "途", "滅", "賽", "歸", "召", "鼓", "播", "盤", "裁", "險", "康", "唯", "錄", "菌", "純", "借", "糖", "蓋", "橫", "符", "私", "努", "堂", "域", "槍", "潤", "幅", "哈", "竟", "熟", "蟲", "澤", "腦", "壤", "碳", "歐", "遍", "側", "寨", "敢", "徹", "慮", "斜", "薄", "庭", "納", "彈", "飼", "伸", "折", "麥", "濕", "暗", "荷", "瓦", "塞", "床", "築", "惡", "戶", "訪", "塔", "奇", "透", "梁", "刀", "旋", "跡", "卡", "氯", "遇", "份", "毒", "泥", "退", "洗", "擺", "灰", "彩", "賣", "耗", "夏", "擇", "忙", "銅", "獻", "硬", "予", "繁", "圈", "雪", "函", "亦", "抽", "篇", "陣", "陰", "丁", "尺", "追", "堆", "雄", "迎", "泛", "爸", "樓", "避", "謀", "噸", "野", "豬", "旗", "累", "偏", "典", "館", "索", "秦", "脂", "潮", "爺", "豆", "忽", "托", "驚", "塑", "遺", "愈", "朱", "替", "纖", "粗", "傾", "尚", "痛", "楚", "謝", "奮", "購", "磨", "君", "池", "旁", "碎", "骨", "監", "捕", "弟", "暴", "割", "貫", "殊", "釋", "詞", "亡", "壁", "頓", "寶", "午", "塵", "聞", "揭", "炮", "殘", "冬", "橋", "婦", "警", "綜", "招", "吳", "付", "浮", "遭", "徐", "您", "搖", "谷", "贊", "箱", "隔", "訂", "男", "吹", "園", "紛", "唐", "敗", "宋", "玻", "巨", "耕", "坦", "榮", "閉", "灣", "鍵", "凡", "駐", "鍋", "救", "恩", "剝", "凝", "鹼", "齒", "截", "煉", "麻", "紡", "禁", "廢", "盛", "版", "緩", "淨", "睛", "昌", "婚", "涉", "筒", "嘴", "插", "岸", "朗", "莊", "街", "藏", "姑", "貿", "腐", "奴", "啦", "慣", "乘", "夥", "恢", "勻", "紗", "扎", "辯", "耳", "彪", "臣", "億", "璃", "抵", "脈", "秀", "薩", "俄", "網", "舞", "店", "噴", "縱", "寸", "汗", "掛", "洪", "賀", "閃", "柬", "爆", "烯", "津", "稻", "牆", "軟", "勇", "像", "滾", "厘", "蒙", "芳", "肯", "坡", "柱", "盪", "腿", "儀", "旅", "尾", "軋", "冰", "貢", "登", "黎", "削", "鑽", "勒", "逃", "障", "氨", "郭", "峰", "幣", "港", "伏", "軌", "畝", "畢", "擦", "莫", "刺", "浪", "秘", "援", "株", "健", "售", "股", "島", "甘", "泡", "睡", "童", "鑄", "湯", "閥", "休", "匯", "舍", "牧", "繞", "炸", "哲", "磷", "績", "朋", "淡", "尖", "啟", "陷", "柴", "呈", "徒", "顏", "淚", "稍", "忘", "泵", "藍", "拖", "洞", "授", "鏡", "辛", "壯", "鋒", "貧", "虛", "彎", "摩", "泰", "幼", "廷", "尊", "窗", "綱", "弄", "隸", "疑", "氏", "宮", "姐", "震", "瑞", "怪", "尤", "琴", "循", "描", "膜", "違", "夾", "腰", "緣", "珠", "窮", "森", "枝", "竹", "溝", "催", "繩", "憶", "邦", "剩", "幸", "漿", "欄", "擁", "牙", "貯", "禮", "濾", "鈉", "紋", "罷", "拍", "咱", "喊", "袖", "埃", "勤", "罰", "焦", "潛", "伍", "墨", "欲", "縫", "姓", "刊", "飽", "仿", "獎", "鋁", "鬼", "麗", "跨", "默", "挖", "鏈", "掃", "喝", "袋", "炭", "污", "幕", "諸", "弧", "勵", "梅", "奶", "潔", "災", "舟", "鑑", "苯", "訟", "抱", "毀", "懂", "寒", "智", "埔", "寄", "屆", "躍", "渡", "挑", "丹", "艱", "貝", "碰", "拔", "爹", "戴", "碼", "夢", "芽", "熔", "赤", "漁", "哭", "敬", "顆", "奔", "鉛", "仲", "虎", "稀", "妹", "乏", "珍", "申", "桌", "遵", "允", "隆", "螺", "倉", "魏", "銳", "曉", "氮", "兼", "隱", "礙", "赫", "撥", "忠", "肅", "缸", "牽", "搶", "博", "巧", "殼", "兄", "杜", "訊", "誠", "碧", "祥", "柯", "頁", "巡", "矩", "悲", "灌", "齡", "倫", "票", "尋", "桂", "鋪", "聖", "恐", "恰", "鄭", "趣", "抬", "荒", "騰", "貼", "柔", "滴", "猛", "闊", "輛", "妻", "填", "撤", "儲", "簽", "鬧", "擾", "紫", "砂", "遞", "戲", "吊", "陶", "伐", "餵", "療", "瓶", "婆", "撫", "臂", "摸", "忍", "蝦", "蠟", "鄰", "胸", "鞏", "擠", "偶", "棄", "槽", "勁", "乳", "鄧", "吉", "仁", "爛", "磚", "租", "烏", "艦", "伴", "瓜", "淺", "丙", "暫", "燥", "橡", "柳", "迷", "暖", "牌", "秧", "膽", "詳", "簧", "踏", "瓷", "譜", "呆", "賓", "糊", "洛", "輝", "憤", "競", "隙", "怒", "粘", "乃", "緒", "肩", "籍", "敏", "塗", "熙", "皆", "偵", "懸", "掘", "享", "糾", "醒", "狂", "鎖", "淀", "恨", "牲", "霸", "爬", "賞", "逆", "玩", "陵", "祝", "秒", "浙", "貌", "役", "彼", "悉", "鴨", "趨", "鳳", "晨", "畜", "輩", "秩", "卵", "署", "梯", "炎", "灘", "棋", "驅", "篩", "峽", "冒", "啥", "壽", "譯", "浸", "泉", "帽", "遲", "矽", "疆", "貸", "漏", "稿", "冠", "嫩", "脅", "芯", "牢", "叛", "蝕", "奧", "鳴", "嶺", "羊", "憑", "串", "塘", "繪", "酵", "融", "盆", "錫", "廟", "籌", "凍", "輔", "攝", "襲", "筋", "拒", "僚", "旱", "鉀", "鳥", "漆", "沈", "眉", "疏", "添", "棒", "穗", "硝", "韓", "逼", "扭", "僑", "涼", "挺", "碗", "栽", "炒", "杯", "患", "餾", "勸", "豪", "遼", "勃", "鴻", "旦", "吏", "拜", "狗", "埋", "輥", "掩", "飲", "搬", "罵", "辭", "勾", "扣", "估", "蔣", "絨", "霧", "丈", "朵", "姆", "擬", "宇", "輯", "陝", "雕", "償", "蓄", "崇", "剪", "倡", "廳", "咬", "駛", "薯", "刷", "斥", "番", "賦", "奉", "佛", "澆", "漫", "曼", "扇", "鈣", "桃", "扶", "仔", "返", "俗", "虧", "腔", "鞋", "棱", "覆", "框", "悄", "叔", "撞", "騙", "勘", "旺", "沸", "孤", "吐", "孟", "渠", "屈", "疾", "妙", "惜", "仰", "狠", "脹", "諧", "拋", "黴", "桑", "崗", "嘛", "衰", "盜", "滲", "臟", "賴", "湧", "甜", "曹", "閱", "肌", "哩", "厲", "烴", "緯", "毅", "昨", "偽", "症", "煮", "嘆", "釘", "搭", "莖", "籠", "酷", "偷", "弓", "錐", "恆", "傑", "坑", "鼻", "翼", "綸", "敘", "獄", "逮", "罐", "絡", "棚", "抑", "膨", "蔬", "寺", "驟", "穆", "冶", "枯", "冊", "屍", "凸", "紳", "坯", "犧", "焰", "轟", "欣", "晉", "瘦", "禦", "錠", "錦", "喪", "旬", "鍛", "壟", "搜", "撲", "邀", "亭", "酯", "邁", "舒", "脆", "酶", "閒", "憂", "酚", "頑", "羽", "漲", "卸", "仗", "陪", "闢", "懲", "杭", "姚", "肚", "捉", "飄", "漂", "昆", "欺", "吾", "郎", "烷", "汁", "呵", "飾", "蕭", "雅", "郵", "遷", "燕", "撒", "姻", "赴", "宴", "煩", "債", "帳", "斑", "鈴", "旨", "醇", "董", "餅", "雛", "姿", "拌", "傅", "腹", "妥", "揉", "賢", "拆", "歪", "葡", "胺", "丟", "浩", "徽", "昂", "墊", "擋", "覽", "貪", "慰", "繳", "汪", "慌", "馮", "諾", "姜", "誼", "兇", "劣", "誣", "耀", "昏", "躺", "盈", "騎", "喬", "溪", "叢", "盧", "抹", "悶", "諮", "刮", "駕", "纜", "悟", "摘", "鉺", "擲", "頗", "幻", "柄", "惠", "慘", "佳", "仇", "臘", "窩", "滌", "劍", "瞧", "堡", "潑", "蔥", "罩", "霍", "撈", "胎", "蒼", "濱", "倆", "捅", "湘", "砍", "霞", "邵", "萄", "瘋", "淮", "遂", "熊", "糞", "烘", "宿", "檔", "戈", "駁", "嫂", "裕", "徙", "箭", "捐", "腸", "撐", "曬", "辨", "殿", "蓮", "攤", "攪", "醬", "屏", "疫", "哀", "蔡", "堵", "沫", "皺", "暢", "疊", "閣", "萊", "敲", "轄", "鉤", "痕", "壩", "巷", "餓", "禍", "丘", "玄", "溜", "曰", "邏", "彭", "嘗", "卿", "妨", "艇", "吞", "韋", "怨", "矮", "歇"];

var chinese_traditional$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': chinese_traditional
});

var korean = ["가격", "가끔", "가난", "가능", "가득", "가르침", "가뭄", "가방", "가상", "가슴", "가운데", "가을", "가이드", "가입", "가장", "가정", "가족", "가죽", "각오", "각자", "간격", "간부", "간섭", "간장", "간접", "간판", "갈등", "갈비", "갈색", "갈증", "감각", "감기", "감소", "감수성", "감자", "감정", "갑자기", "강남", "강당", "강도", "강력히", "강변", "강북", "강사", "강수량", "강아지", "강원도", "강의", "강제", "강조", "같이", "개구리", "개나리", "개방", "개별", "개선", "개성", "개인", "객관적", "거실", "거액", "거울", "거짓", "거품", "걱정", "건강", "건물", "건설", "건조", "건축", "걸음", "검사", "검토", "게시판", "게임", "겨울", "견해", "결과", "결국", "결론", "결석", "결승", "결심", "결정", "결혼", "경계", "경고", "경기", "경력", "경복궁", "경비", "경상도", "경영", "경우", "경쟁", "경제", "경주", "경찰", "경치", "경향", "경험", "계곡", "계단", "계란", "계산", "계속", "계약", "계절", "계층", "계획", "고객", "고구려", "고궁", "고급", "고등학생", "고무신", "고민", "고양이", "고장", "고전", "고집", "고춧가루", "고통", "고향", "곡식", "골목", "골짜기", "골프", "공간", "공개", "공격", "공군", "공급", "공기", "공동", "공무원", "공부", "공사", "공식", "공업", "공연", "공원", "공장", "공짜", "공책", "공통", "공포", "공항", "공휴일", "과목", "과일", "과장", "과정", "과학", "관객", "관계", "관광", "관념", "관람", "관련", "관리", "관습", "관심", "관점", "관찰", "광경", "광고", "광장", "광주", "괴로움", "굉장히", "교과서", "교문", "교복", "교실", "교양", "교육", "교장", "교직", "교통", "교환", "교훈", "구경", "구름", "구멍", "구별", "구분", "구석", "구성", "구속", "구역", "구입", "구청", "구체적", "국가", "국기", "국내", "국립", "국물", "국민", "국수", "국어", "국왕", "국적", "국제", "국회", "군대", "군사", "군인", "궁극적", "권리", "권위", "권투", "귀국", "귀신", "규정", "규칙", "균형", "그날", "그냥", "그늘", "그러나", "그룹", "그릇", "그림", "그제서야", "그토록", "극복", "극히", "근거", "근교", "근래", "근로", "근무", "근본", "근원", "근육", "근처", "글씨", "글자", "금강산", "금고", "금년", "금메달", "금액", "금연", "금요일", "금지", "긍정적", "기간", "기관", "기념", "기능", "기독교", "기둥", "기록", "기름", "기법", "기본", "기분", "기쁨", "기숙사", "기술", "기억", "기업", "기온", "기운", "기원", "기적", "기준", "기침", "기혼", "기획", "긴급", "긴장", "길이", "김밥", "김치", "김포공항", "깍두기", "깜빡", "깨달음", "깨소금", "껍질", "꼭대기", "꽃잎", "나들이", "나란히", "나머지", "나물", "나침반", "나흘", "낙엽", "난방", "날개", "날씨", "날짜", "남녀", "남대문", "남매", "남산", "남자", "남편", "남학생", "낭비", "낱말", "내년", "내용", "내일", "냄비", "냄새", "냇물", "냉동", "냉면", "냉방", "냉장고", "넥타이", "넷째", "노동", "노란색", "노력", "노인", "녹음", "녹차", "녹화", "논리", "논문", "논쟁", "놀이", "농구", "농담", "농민", "농부", "농업", "농장", "농촌", "높이", "눈동자", "눈물", "눈썹", "뉴욕", "느낌", "늑대", "능동적", "능력", "다방", "다양성", "다음", "다이어트", "다행", "단계", "단골", "단독", "단맛", "단순", "단어", "단위", "단점", "단체", "단추", "단편", "단풍", "달걀", "달러", "달력", "달리", "닭고기", "담당", "담배", "담요", "담임", "답변", "답장", "당근", "당분간", "당연히", "당장", "대규모", "대낮", "대단히", "대답", "대도시", "대략", "대량", "대륙", "대문", "대부분", "대신", "대응", "대장", "대전", "대접", "대중", "대책", "대출", "대충", "대통령", "대학", "대한민국", "대합실", "대형", "덩어리", "데이트", "도대체", "도덕", "도둑", "도망", "도서관", "도심", "도움", "도입", "도자기", "도저히", "도전", "도중", "도착", "독감", "독립", "독서", "독일", "독창적", "동화책", "뒷모습", "뒷산", "딸아이", "마누라", "마늘", "마당", "마라톤", "마련", "마무리", "마사지", "마약", "마요네즈", "마을", "마음", "마이크", "마중", "마지막", "마찬가지", "마찰", "마흔", "막걸리", "막내", "막상", "만남", "만두", "만세", "만약", "만일", "만점", "만족", "만화", "많이", "말기", "말씀", "말투", "맘대로", "망원경", "매년", "매달", "매력", "매번", "매스컴", "매일", "매장", "맥주", "먹이", "먼저", "먼지", "멀리", "메일", "며느리", "며칠", "면담", "멸치", "명단", "명령", "명예", "명의", "명절", "명칭", "명함", "모금", "모니터", "모델", "모든", "모범", "모습", "모양", "모임", "모조리", "모집", "모퉁이", "목걸이", "목록", "목사", "목소리", "목숨", "목적", "목표", "몰래", "몸매", "몸무게", "몸살", "몸속", "몸짓", "몸통", "몹시", "무관심", "무궁화", "무더위", "무덤", "무릎", "무슨", "무엇", "무역", "무용", "무조건", "무지개", "무척", "문구", "문득", "문법", "문서", "문제", "문학", "문화", "물가", "물건", "물결", "물고기", "물론", "물리학", "물음", "물질", "물체", "미국", "미디어", "미사일", "미술", "미역", "미용실", "미움", "미인", "미팅", "미혼", "민간", "민족", "민주", "믿음", "밀가루", "밀리미터", "밑바닥", "바가지", "바구니", "바나나", "바늘", "바닥", "바닷가", "바람", "바이러스", "바탕", "박물관", "박사", "박수", "반대", "반드시", "반말", "반발", "반성", "반응", "반장", "반죽", "반지", "반찬", "받침", "발가락", "발걸음", "발견", "발달", "발레", "발목", "발바닥", "발생", "발음", "발자국", "발전", "발톱", "발표", "밤하늘", "밥그릇", "밥맛", "밥상", "밥솥", "방금", "방면", "방문", "방바닥", "방법", "방송", "방식", "방안", "방울", "방지", "방학", "방해", "방향", "배경", "배꼽", "배달", "배드민턴", "백두산", "백색", "백성", "백인", "백제", "백화점", "버릇", "버섯", "버튼", "번개", "번역", "번지", "번호", "벌금", "벌레", "벌써", "범위", "범인", "범죄", "법률", "법원", "법적", "법칙", "베이징", "벨트", "변경", "변동", "변명", "변신", "변호사", "변화", "별도", "별명", "별일", "병실", "병아리", "병원", "보관", "보너스", "보라색", "보람", "보름", "보상", "보안", "보자기", "보장", "보전", "보존", "보통", "보편적", "보험", "복도", "복사", "복숭아", "복습", "볶음", "본격적", "본래", "본부", "본사", "본성", "본인", "본질", "볼펜", "봉사", "봉지", "봉투", "부근", "부끄러움", "부담", "부동산", "부문", "부분", "부산", "부상", "부엌", "부인", "부작용", "부장", "부정", "부족", "부지런히", "부친", "부탁", "부품", "부회장", "북부", "북한", "분노", "분량", "분리", "분명", "분석", "분야", "분위기", "분필", "분홍색", "불고기", "불과", "불교", "불꽃", "불만", "불법", "불빛", "불안", "불이익", "불행", "브랜드", "비극", "비난", "비닐", "비둘기", "비디오", "비로소", "비만", "비명", "비밀", "비바람", "비빔밥", "비상", "비용", "비율", "비중", "비타민", "비판", "빌딩", "빗물", "빗방울", "빗줄기", "빛깔", "빨간색", "빨래", "빨리", "사건", "사계절", "사나이", "사냥", "사람", "사랑", "사립", "사모님", "사물", "사방", "사상", "사생활", "사설", "사슴", "사실", "사업", "사용", "사월", "사장", "사전", "사진", "사촌", "사춘기", "사탕", "사투리", "사흘", "산길", "산부인과", "산업", "산책", "살림", "살인", "살짝", "삼계탕", "삼국", "삼십", "삼월", "삼촌", "상관", "상금", "상대", "상류", "상반기", "상상", "상식", "상업", "상인", "상자", "상점", "상처", "상추", "상태", "상표", "상품", "상황", "새벽", "색깔", "색연필", "생각", "생명", "생물", "생방송", "생산", "생선", "생신", "생일", "생활", "서랍", "서른", "서명", "서민", "서비스", "서양", "서울", "서적", "서점", "서쪽", "서클", "석사", "석유", "선거", "선물", "선배", "선생", "선수", "선원", "선장", "선전", "선택", "선풍기", "설거지", "설날", "설렁탕", "설명", "설문", "설사", "설악산", "설치", "설탕", "섭씨", "성공", "성당", "성명", "성별", "성인", "성장", "성적", "성질", "성함", "세금", "세미나", "세상", "세월", "세종대왕", "세탁", "센터", "센티미터", "셋째", "소규모", "소극적", "소금", "소나기", "소년", "소득", "소망", "소문", "소설", "소속", "소아과", "소용", "소원", "소음", "소중히", "소지품", "소질", "소풍", "소형", "속담", "속도", "속옷", "손가락", "손길", "손녀", "손님", "손등", "손목", "손뼉", "손실", "손질", "손톱", "손해", "솔직히", "솜씨", "송아지", "송이", "송편", "쇠고기", "쇼핑", "수건", "수년", "수단", "수돗물", "수동적", "수면", "수명", "수박", "수상", "수석", "수술", "수시로", "수업", "수염", "수영", "수입", "수준", "수집", "수출", "수컷", "수필", "수학", "수험생", "수화기", "숙녀", "숙소", "숙제", "순간", "순서", "순수", "순식간", "순위", "숟가락", "술병", "술집", "숫자", "스님", "스물", "스스로", "스승", "스웨터", "스위치", "스케이트", "스튜디오", "스트레스", "스포츠", "슬쩍", "슬픔", "습관", "습기", "승객", "승리", "승부", "승용차", "승진", "시각", "시간", "시골", "시금치", "시나리오", "시댁", "시리즈", "시멘트", "시민", "시부모", "시선", "시설", "시스템", "시아버지", "시어머니", "시월", "시인", "시일", "시작", "시장", "시절", "시점", "시중", "시즌", "시집", "시청", "시합", "시험", "식구", "식기", "식당", "식량", "식료품", "식물", "식빵", "식사", "식생활", "식초", "식탁", "식품", "신고", "신규", "신념", "신문", "신발", "신비", "신사", "신세", "신용", "신제품", "신청", "신체", "신화", "실감", "실내", "실력", "실례", "실망", "실수", "실습", "실시", "실장", "실정", "실질적", "실천", "실체", "실컷", "실태", "실패", "실험", "실현", "심리", "심부름", "심사", "심장", "심정", "심판", "쌍둥이", "씨름", "씨앗", "아가씨", "아나운서", "아드님", "아들", "아쉬움", "아스팔트", "아시아", "아울러", "아저씨", "아줌마", "아직", "아침", "아파트", "아프리카", "아픔", "아홉", "아흔", "악기", "악몽", "악수", "안개", "안경", "안과", "안내", "안녕", "안동", "안방", "안부", "안주", "알루미늄", "알코올", "암시", "암컷", "압력", "앞날", "앞문", "애인", "애정", "액수", "앨범", "야간", "야단", "야옹", "약간", "약국", "약속", "약수", "약점", "약품", "약혼녀", "양념", "양력", "양말", "양배추", "양주", "양파", "어둠", "어려움", "어른", "어젯밤", "어쨌든", "어쩌다가", "어쩐지", "언니", "언덕", "언론", "언어", "얼굴", "얼른", "얼음", "얼핏", "엄마", "업무", "업종", "업체", "엉덩이", "엉망", "엉터리", "엊그제", "에너지", "에어컨", "엔진", "여건", "여고생", "여관", "여군", "여권", "여대생", "여덟", "여동생", "여든", "여론", "여름", "여섯", "여성", "여왕", "여인", "여전히", "여직원", "여학생", "여행", "역사", "역시", "역할", "연결", "연구", "연극", "연기", "연락", "연설", "연세", "연속", "연습", "연애", "연예인", "연인", "연장", "연주", "연출", "연필", "연합", "연휴", "열기", "열매", "열쇠", "열심히", "열정", "열차", "열흘", "염려", "엽서", "영국", "영남", "영상", "영양", "영역", "영웅", "영원히", "영하", "영향", "영혼", "영화", "옆구리", "옆방", "옆집", "예감", "예금", "예방", "예산", "예상", "예선", "예술", "예습", "예식장", "예약", "예전", "예절", "예정", "예컨대", "옛날", "오늘", "오락", "오랫동안", "오렌지", "오로지", "오른발", "오븐", "오십", "오염", "오월", "오전", "오직", "오징어", "오페라", "오피스텔", "오히려", "옥상", "옥수수", "온갖", "온라인", "온몸", "온종일", "온통", "올가을", "올림픽", "올해", "옷차림", "와이셔츠", "와인", "완성", "완전", "왕비", "왕자", "왜냐하면", "왠지", "외갓집", "외국", "외로움", "외삼촌", "외출", "외침", "외할머니", "왼발", "왼손", "왼쪽", "요금", "요일", "요즘", "요청", "용기", "용서", "용어", "우산", "우선", "우승", "우연히", "우정", "우체국", "우편", "운동", "운명", "운반", "운전", "운행", "울산", "울음", "움직임", "웃어른", "웃음", "워낙", "원고", "원래", "원서", "원숭이", "원인", "원장", "원피스", "월급", "월드컵", "월세", "월요일", "웨이터", "위반", "위법", "위성", "위원", "위험", "위협", "윗사람", "유난히", "유럽", "유명", "유물", "유산", "유적", "유치원", "유학", "유행", "유형", "육군", "육상", "육십", "육체", "은행", "음력", "음료", "음반", "음성", "음식", "음악", "음주", "의견", "의논", "의문", "의복", "의식", "의심", "의외로", "의욕", "의원", "의학", "이것", "이곳", "이념", "이놈", "이달", "이대로", "이동", "이렇게", "이력서", "이론적", "이름", "이민", "이발소", "이별", "이불", "이빨", "이상", "이성", "이슬", "이야기", "이용", "이웃", "이월", "이윽고", "이익", "이전", "이중", "이튿날", "이틀", "이혼", "인간", "인격", "인공", "인구", "인근", "인기", "인도", "인류", "인물", "인생", "인쇄", "인연", "인원", "인재", "인종", "인천", "인체", "인터넷", "인하", "인형", "일곱", "일기", "일단", "일대", "일등", "일반", "일본", "일부", "일상", "일생", "일손", "일요일", "일월", "일정", "일종", "일주일", "일찍", "일체", "일치", "일행", "일회용", "임금", "임무", "입대", "입력", "입맛", "입사", "입술", "입시", "입원", "입장", "입학", "자가용", "자격", "자극", "자동", "자랑", "자부심", "자식", "자신", "자연", "자원", "자율", "자전거", "자정", "자존심", "자판", "작가", "작년", "작성", "작업", "작용", "작은딸", "작품", "잔디", "잔뜩", "잔치", "잘못", "잠깐", "잠수함", "잠시", "잠옷", "잠자리", "잡지", "장관", "장군", "장기간", "장래", "장례", "장르", "장마", "장면", "장모", "장미", "장비", "장사", "장소", "장식", "장애인", "장인", "장점", "장차", "장학금", "재능", "재빨리", "재산", "재생", "재작년", "재정", "재채기", "재판", "재학", "재활용", "저것", "저고리", "저곳", "저녁", "저런", "저렇게", "저번", "저울", "저절로", "저축", "적극", "적당히", "적성", "적용", "적응", "전개", "전공", "전기", "전달", "전라도", "전망", "전문", "전반", "전부", "전세", "전시", "전용", "전자", "전쟁", "전주", "전철", "전체", "전통", "전혀", "전후", "절대", "절망", "절반", "절약", "절차", "점검", "점수", "점심", "점원", "점점", "점차", "접근", "접시", "접촉", "젓가락", "정거장", "정도", "정류장", "정리", "정말", "정면", "정문", "정반대", "정보", "정부", "정비", "정상", "정성", "정오", "정원", "정장", "정지", "정치", "정확히", "제공", "제과점", "제대로", "제목", "제발", "제법", "제삿날", "제안", "제일", "제작", "제주도", "제출", "제품", "제한", "조각", "조건", "조금", "조깅", "조명", "조미료", "조상", "조선", "조용히", "조절", "조정", "조직", "존댓말", "존재", "졸업", "졸음", "종교", "종로", "종류", "종소리", "종업원", "종종", "종합", "좌석", "죄인", "주관적", "주름", "주말", "주머니", "주먹", "주문", "주민", "주방", "주변", "주식", "주인", "주일", "주장", "주전자", "주택", "준비", "줄거리", "줄기", "줄무늬", "중간", "중계방송", "중국", "중년", "중단", "중독", "중반", "중부", "중세", "중소기업", "중순", "중앙", "중요", "중학교", "즉석", "즉시", "즐거움", "증가", "증거", "증권", "증상", "증세", "지각", "지갑", "지경", "지극히", "지금", "지급", "지능", "지름길", "지리산", "지방", "지붕", "지식", "지역", "지우개", "지원", "지적", "지점", "지진", "지출", "직선", "직업", "직원", "직장", "진급", "진동", "진로", "진료", "진리", "진짜", "진찰", "진출", "진통", "진행", "질문", "질병", "질서", "짐작", "집단", "집안", "집중", "짜증", "찌꺼기", "차남", "차라리", "차량", "차림", "차별", "차선", "차츰", "착각", "찬물", "찬성", "참가", "참기름", "참새", "참석", "참여", "참외", "참조", "찻잔", "창가", "창고", "창구", "창문", "창밖", "창작", "창조", "채널", "채점", "책가방", "책방", "책상", "책임", "챔피언", "처벌", "처음", "천국", "천둥", "천장", "천재", "천천히", "철도", "철저히", "철학", "첫날", "첫째", "청년", "청바지", "청소", "청춘", "체계", "체력", "체온", "체육", "체중", "체험", "초등학생", "초반", "초밥", "초상화", "초순", "초여름", "초원", "초저녁", "초점", "초청", "초콜릿", "촛불", "총각", "총리", "총장", "촬영", "최근", "최상", "최선", "최신", "최악", "최종", "추석", "추억", "추진", "추천", "추측", "축구", "축소", "축제", "축하", "출근", "출발", "출산", "출신", "출연", "출입", "출장", "출판", "충격", "충고", "충돌", "충분히", "충청도", "취업", "취직", "취향", "치약", "친구", "친척", "칠십", "칠월", "칠판", "침대", "침묵", "침실", "칫솔", "칭찬", "카메라", "카운터", "칼국수", "캐릭터", "캠퍼스", "캠페인", "커튼", "컨디션", "컬러", "컴퓨터", "코끼리", "코미디", "콘서트", "콜라", "콤플렉스", "콩나물", "쾌감", "쿠데타", "크림", "큰길", "큰딸", "큰소리", "큰아들", "큰어머니", "큰일", "큰절", "클래식", "클럽", "킬로", "타입", "타자기", "탁구", "탁자", "탄생", "태권도", "태양", "태풍", "택시", "탤런트", "터널", "터미널", "테니스", "테스트", "테이블", "텔레비전", "토론", "토마토", "토요일", "통계", "통과", "통로", "통신", "통역", "통일", "통장", "통제", "통증", "통합", "통화", "퇴근", "퇴원", "퇴직금", "튀김", "트럭", "특급", "특별", "특성", "특수", "특징", "특히", "튼튼히", "티셔츠", "파란색", "파일", "파출소", "판결", "판단", "판매", "판사", "팔십", "팔월", "팝송", "패션", "팩스", "팩시밀리", "팬티", "퍼센트", "페인트", "편견", "편의", "편지", "편히", "평가", "평균", "평생", "평소", "평양", "평일", "평화", "포스터", "포인트", "포장", "포함", "표면", "표정", "표준", "표현", "품목", "품질", "풍경", "풍속", "풍습", "프랑스", "프린터", "플라스틱", "피곤", "피망", "피아노", "필름", "필수", "필요", "필자", "필통", "핑계", "하느님", "하늘", "하드웨어", "하룻밤", "하반기", "하숙집", "하순", "하여튼", "하지만", "하천", "하품", "하필", "학과", "학교", "학급", "학기", "학년", "학력", "학번", "학부모", "학비", "학생", "학술", "학습", "학용품", "학원", "학위", "학자", "학점", "한계", "한글", "한꺼번에", "한낮", "한눈", "한동안", "한때", "한라산", "한마디", "한문", "한번", "한복", "한식", "한여름", "한쪽", "할머니", "할아버지", "할인", "함께", "함부로", "합격", "합리적", "항공", "항구", "항상", "항의", "해결", "해군", "해답", "해당", "해물", "해석", "해설", "해수욕장", "해안", "핵심", "핸드백", "햄버거", "햇볕", "햇살", "행동", "행복", "행사", "행운", "행위", "향기", "향상", "향수", "허락", "허용", "헬기", "현관", "현금", "현대", "현상", "현실", "현장", "현재", "현지", "혈액", "협력", "형부", "형사", "형수", "형식", "형제", "형태", "형편", "혜택", "호기심", "호남", "호랑이", "호박", "호텔", "호흡", "혹시", "홀로", "홈페이지", "홍보", "홍수", "홍차", "화면", "화분", "화살", "화요일", "화장", "화학", "확보", "확인", "확장", "확정", "환갑", "환경", "환영", "환율", "환자", "활기", "활동", "활발히", "활용", "활짝", "회견", "회관", "회복", "회색", "회원", "회장", "회전", "횟수", "횡단보도", "효율적", "후반", "후춧가루", "훈련", "훨씬", "휴식", "휴일", "흉내", "흐름", "흑백", "흑인", "흔적", "흔히", "흥미", "흥분", "희곡", "희망", "희생", "흰색", "힘껏"];

var korean$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': korean
});

var french = ["abaisser", "abandon", "abdiquer", "abeille", "abolir", "aborder", "aboutir", "aboyer", "abrasif", "abreuver", "abriter", "abroger", "abrupt", "absence", "absolu", "absurde", "abusif", "abyssal", "académie", "acajou", "acarien", "accabler", "accepter", "acclamer", "accolade", "accroche", "accuser", "acerbe", "achat", "acheter", "aciduler", "acier", "acompte", "acquérir", "acronyme", "acteur", "actif", "actuel", "adepte", "adéquat", "adhésif", "adjectif", "adjuger", "admettre", "admirer", "adopter", "adorer", "adoucir", "adresse", "adroit", "adulte", "adverbe", "aérer", "aéronef", "affaire", "affecter", "affiche", "affreux", "affubler", "agacer", "agencer", "agile", "agiter", "agrafer", "agréable", "agrume", "aider", "aiguille", "ailier", "aimable", "aisance", "ajouter", "ajuster", "alarmer", "alchimie", "alerte", "algèbre", "algue", "aliéner", "aliment", "alléger", "alliage", "allouer", "allumer", "alourdir", "alpaga", "altesse", "alvéole", "amateur", "ambigu", "ambre", "aménager", "amertume", "amidon", "amiral", "amorcer", "amour", "amovible", "amphibie", "ampleur", "amusant", "analyse", "anaphore", "anarchie", "anatomie", "ancien", "anéantir", "angle", "angoisse", "anguleux", "animal", "annexer", "annonce", "annuel", "anodin", "anomalie", "anonyme", "anormal", "antenne", "antidote", "anxieux", "apaiser", "apéritif", "aplanir", "apologie", "appareil", "appeler", "apporter", "appuyer", "aquarium", "aqueduc", "arbitre", "arbuste", "ardeur", "ardoise", "argent", "arlequin", "armature", "armement", "armoire", "armure", "arpenter", "arracher", "arriver", "arroser", "arsenic", "artériel", "article", "aspect", "asphalte", "aspirer", "assaut", "asservir", "assiette", "associer", "assurer", "asticot", "astre", "astuce", "atelier", "atome", "atrium", "atroce", "attaque", "attentif", "attirer", "attraper", "aubaine", "auberge", "audace", "audible", "augurer", "aurore", "automne", "autruche", "avaler", "avancer", "avarice", "avenir", "averse", "aveugle", "aviateur", "avide", "avion", "aviser", "avoine", "avouer", "avril", "axial", "axiome", "badge", "bafouer", "bagage", "baguette", "baignade", "balancer", "balcon", "baleine", "balisage", "bambin", "bancaire", "bandage", "banlieue", "bannière", "banquier", "barbier", "baril", "baron", "barque", "barrage", "bassin", "bastion", "bataille", "bateau", "batterie", "baudrier", "bavarder", "belette", "bélier", "belote", "bénéfice", "berceau", "berger", "berline", "bermuda", "besace", "besogne", "bétail", "beurre", "biberon", "bicycle", "bidule", "bijou", "bilan", "bilingue", "billard", "binaire", "biologie", "biopsie", "biotype", "biscuit", "bison", "bistouri", "bitume", "bizarre", "blafard", "blague", "blanchir", "blessant", "blinder", "blond", "bloquer", "blouson", "bobard", "bobine", "boire", "boiser", "bolide", "bonbon", "bondir", "bonheur", "bonifier", "bonus", "bordure", "borne", "botte", "boucle", "boueux", "bougie", "boulon", "bouquin", "bourse", "boussole", "boutique", "boxeur", "branche", "brasier", "brave", "brebis", "brèche", "breuvage", "bricoler", "brigade", "brillant", "brioche", "brique", "brochure", "broder", "bronzer", "brousse", "broyeur", "brume", "brusque", "brutal", "bruyant", "buffle", "buisson", "bulletin", "bureau", "burin", "bustier", "butiner", "butoir", "buvable", "buvette", "cabanon", "cabine", "cachette", "cadeau", "cadre", "caféine", "caillou", "caisson", "calculer", "calepin", "calibre", "calmer", "calomnie", "calvaire", "camarade", "caméra", "camion", "campagne", "canal", "caneton", "canon", "cantine", "canular", "capable", "caporal", "caprice", "capsule", "capter", "capuche", "carabine", "carbone", "caresser", "caribou", "carnage", "carotte", "carreau", "carton", "cascade", "casier", "casque", "cassure", "causer", "caution", "cavalier", "caverne", "caviar", "cédille", "ceinture", "céleste", "cellule", "cendrier", "censurer", "central", "cercle", "cérébral", "cerise", "cerner", "cerveau", "cesser", "chagrin", "chaise", "chaleur", "chambre", "chance", "chapitre", "charbon", "chasseur", "chaton", "chausson", "chavirer", "chemise", "chenille", "chéquier", "chercher", "cheval", "chien", "chiffre", "chignon", "chimère", "chiot", "chlorure", "chocolat", "choisir", "chose", "chouette", "chrome", "chute", "cigare", "cigogne", "cimenter", "cinéma", "cintrer", "circuler", "cirer", "cirque", "citerne", "citoyen", "citron", "civil", "clairon", "clameur", "claquer", "classe", "clavier", "client", "cligner", "climat", "clivage", "cloche", "clonage", "cloporte", "cobalt", "cobra", "cocasse", "cocotier", "coder", "codifier", "coffre", "cogner", "cohésion", "coiffer", "coincer", "colère", "colibri", "colline", "colmater", "colonel", "combat", "comédie", "commande", "compact", "concert", "conduire", "confier", "congeler", "connoter", "consonne", "contact", "convexe", "copain", "copie", "corail", "corbeau", "cordage", "corniche", "corpus", "correct", "cortège", "cosmique", "costume", "coton", "coude", "coupure", "courage", "couteau", "couvrir", "coyote", "crabe", "crainte", "cravate", "crayon", "créature", "créditer", "crémeux", "creuser", "crevette", "cribler", "crier", "cristal", "critère", "croire", "croquer", "crotale", "crucial", "cruel", "crypter", "cubique", "cueillir", "cuillère", "cuisine", "cuivre", "culminer", "cultiver", "cumuler", "cupide", "curatif", "curseur", "cyanure", "cycle", "cylindre", "cynique", "daigner", "damier", "danger", "danseur", "dauphin", "débattre", "débiter", "déborder", "débrider", "débutant", "décaler", "décembre", "déchirer", "décider", "déclarer", "décorer", "décrire", "décupler", "dédale", "déductif", "déesse", "défensif", "défiler", "défrayer", "dégager", "dégivrer", "déglutir", "dégrafer", "déjeuner", "délice", "déloger", "demander", "demeurer", "démolir", "dénicher", "dénouer", "dentelle", "dénuder", "départ", "dépenser", "déphaser", "déplacer", "déposer", "déranger", "dérober", "désastre", "descente", "désert", "désigner", "désobéir", "dessiner", "destrier", "détacher", "détester", "détourer", "détresse", "devancer", "devenir", "deviner", "devoir", "diable", "dialogue", "diamant", "dicter", "différer", "digérer", "digital", "digne", "diluer", "dimanche", "diminuer", "dioxyde", "directif", "diriger", "discuter", "disposer", "dissiper", "distance", "divertir", "diviser", "docile", "docteur", "dogme", "doigt", "domaine", "domicile", "dompter", "donateur", "donjon", "donner", "dopamine", "dortoir", "dorure", "dosage", "doseur", "dossier", "dotation", "douanier", "double", "douceur", "douter", "doyen", "dragon", "draper", "dresser", "dribbler", "droiture", "duperie", "duplexe", "durable", "durcir", "dynastie", "éblouir", "écarter", "écharpe", "échelle", "éclairer", "éclipse", "éclore", "écluse", "école", "économie", "écorce", "écouter", "écraser", "écrémer", "écrivain", "écrou", "écume", "écureuil", "édifier", "éduquer", "effacer", "effectif", "effigie", "effort", "effrayer", "effusion", "égaliser", "égarer", "éjecter", "élaborer", "élargir", "électron", "élégant", "éléphant", "élève", "éligible", "élitisme", "éloge", "élucider", "éluder", "emballer", "embellir", "embryon", "émeraude", "émission", "emmener", "émotion", "émouvoir", "empereur", "employer", "emporter", "emprise", "émulsion", "encadrer", "enchère", "enclave", "encoche", "endiguer", "endosser", "endroit", "enduire", "énergie", "enfance", "enfermer", "enfouir", "engager", "engin", "englober", "énigme", "enjamber", "enjeu", "enlever", "ennemi", "ennuyeux", "enrichir", "enrobage", "enseigne", "entasser", "entendre", "entier", "entourer", "entraver", "énumérer", "envahir", "enviable", "envoyer", "enzyme", "éolien", "épaissir", "épargne", "épatant", "épaule", "épicerie", "épidémie", "épier", "épilogue", "épine", "épisode", "épitaphe", "époque", "épreuve", "éprouver", "épuisant", "équerre", "équipe", "ériger", "érosion", "erreur", "éruption", "escalier", "espadon", "espèce", "espiègle", "espoir", "esprit", "esquiver", "essayer", "essence", "essieu", "essorer", "estime", "estomac", "estrade", "étagère", "étaler", "étanche", "étatique", "éteindre", "étendoir", "éternel", "éthanol", "éthique", "ethnie", "étirer", "étoffer", "étoile", "étonnant", "étourdir", "étrange", "étroit", "étude", "euphorie", "évaluer", "évasion", "éventail", "évidence", "éviter", "évolutif", "évoquer", "exact", "exagérer", "exaucer", "exceller", "excitant", "exclusif", "excuse", "exécuter", "exemple", "exercer", "exhaler", "exhorter", "exigence", "exiler", "exister", "exotique", "expédier", "explorer", "exposer", "exprimer", "exquis", "extensif", "extraire", "exulter", "fable", "fabuleux", "facette", "facile", "facture", "faiblir", "falaise", "fameux", "famille", "farceur", "farfelu", "farine", "farouche", "fasciner", "fatal", "fatigue", "faucon", "fautif", "faveur", "favori", "fébrile", "féconder", "fédérer", "félin", "femme", "fémur", "fendoir", "féodal", "fermer", "féroce", "ferveur", "festival", "feuille", "feutre", "février", "fiasco", "ficeler", "fictif", "fidèle", "figure", "filature", "filetage", "filière", "filleul", "filmer", "filou", "filtrer", "financer", "finir", "fiole", "firme", "fissure", "fixer", "flairer", "flamme", "flasque", "flatteur", "fléau", "flèche", "fleur", "flexion", "flocon", "flore", "fluctuer", "fluide", "fluvial", "folie", "fonderie", "fongible", "fontaine", "forcer", "forgeron", "formuler", "fortune", "fossile", "foudre", "fougère", "fouiller", "foulure", "fourmi", "fragile", "fraise", "franchir", "frapper", "frayeur", "frégate", "freiner", "frelon", "frémir", "frénésie", "frère", "friable", "friction", "frisson", "frivole", "froid", "fromage", "frontal", "frotter", "fruit", "fugitif", "fuite", "fureur", "furieux", "furtif", "fusion", "futur", "gagner", "galaxie", "galerie", "gambader", "garantir", "gardien", "garnir", "garrigue", "gazelle", "gazon", "géant", "gélatine", "gélule", "gendarme", "général", "génie", "genou", "gentil", "géologie", "géomètre", "géranium", "germe", "gestuel", "geyser", "gibier", "gicler", "girafe", "givre", "glace", "glaive", "glisser", "globe", "gloire", "glorieux", "golfeur", "gomme", "gonfler", "gorge", "gorille", "goudron", "gouffre", "goulot", "goupille", "gourmand", "goutte", "graduel", "graffiti", "graine", "grand", "grappin", "gratuit", "gravir", "grenat", "griffure", "griller", "grimper", "grogner", "gronder", "grotte", "groupe", "gruger", "grutier", "gruyère", "guépard", "guerrier", "guide", "guimauve", "guitare", "gustatif", "gymnaste", "gyrostat", "habitude", "hachoir", "halte", "hameau", "hangar", "hanneton", "haricot", "harmonie", "harpon", "hasard", "hélium", "hématome", "herbe", "hérisson", "hermine", "héron", "hésiter", "heureux", "hiberner", "hibou", "hilarant", "histoire", "hiver", "homard", "hommage", "homogène", "honneur", "honorer", "honteux", "horde", "horizon", "horloge", "hormone", "horrible", "houleux", "housse", "hublot", "huileux", "humain", "humble", "humide", "humour", "hurler", "hydromel", "hygiène", "hymne", "hypnose", "idylle", "ignorer", "iguane", "illicite", "illusion", "image", "imbiber", "imiter", "immense", "immobile", "immuable", "impact", "impérial", "implorer", "imposer", "imprimer", "imputer", "incarner", "incendie", "incident", "incliner", "incolore", "indexer", "indice", "inductif", "inédit", "ineptie", "inexact", "infini", "infliger", "informer", "infusion", "ingérer", "inhaler", "inhiber", "injecter", "injure", "innocent", "inoculer", "inonder", "inscrire", "insecte", "insigne", "insolite", "inspirer", "instinct", "insulter", "intact", "intense", "intime", "intrigue", "intuitif", "inutile", "invasion", "inventer", "inviter", "invoquer", "ironique", "irradier", "irréel", "irriter", "isoler", "ivoire", "ivresse", "jaguar", "jaillir", "jambe", "janvier", "jardin", "jauger", "jaune", "javelot", "jetable", "jeton", "jeudi", "jeunesse", "joindre", "joncher", "jongler", "joueur", "jouissif", "journal", "jovial", "joyau", "joyeux", "jubiler", "jugement", "junior", "jupon", "juriste", "justice", "juteux", "juvénile", "kayak", "kimono", "kiosque", "label", "labial", "labourer", "lacérer", "lactose", "lagune", "laine", "laisser", "laitier", "lambeau", "lamelle", "lampe", "lanceur", "langage", "lanterne", "lapin", "largeur", "larme", "laurier", "lavabo", "lavoir", "lecture", "légal", "léger", "légume", "lessive", "lettre", "levier", "lexique", "lézard", "liasse", "libérer", "libre", "licence", "licorne", "liège", "lièvre", "ligature", "ligoter", "ligue", "limer", "limite", "limonade", "limpide", "linéaire", "lingot", "lionceau", "liquide", "lisière", "lister", "lithium", "litige", "littoral", "livreur", "logique", "lointain", "loisir", "lombric", "loterie", "louer", "lourd", "loutre", "louve", "loyal", "lubie", "lucide", "lucratif", "lueur", "lugubre", "luisant", "lumière", "lunaire", "lundi", "luron", "lutter", "luxueux", "machine", "magasin", "magenta", "magique", "maigre", "maillon", "maintien", "mairie", "maison", "majorer", "malaxer", "maléfice", "malheur", "malice", "mallette", "mammouth", "mandater", "maniable", "manquant", "manteau", "manuel", "marathon", "marbre", "marchand", "mardi", "maritime", "marqueur", "marron", "marteler", "mascotte", "massif", "matériel", "matière", "matraque", "maudire", "maussade", "mauve", "maximal", "méchant", "méconnu", "médaille", "médecin", "méditer", "méduse", "meilleur", "mélange", "mélodie", "membre", "mémoire", "menacer", "mener", "menhir", "mensonge", "mentor", "mercredi", "mérite", "merle", "messager", "mesure", "métal", "météore", "méthode", "métier", "meuble", "miauler", "microbe", "miette", "mignon", "migrer", "milieu", "million", "mimique", "mince", "minéral", "minimal", "minorer", "minute", "miracle", "miroiter", "missile", "mixte", "mobile", "moderne", "moelleux", "mondial", "moniteur", "monnaie", "monotone", "monstre", "montagne", "monument", "moqueur", "morceau", "morsure", "mortier", "moteur", "motif", "mouche", "moufle", "moulin", "mousson", "mouton", "mouvant", "multiple", "munition", "muraille", "murène", "murmure", "muscle", "muséum", "musicien", "mutation", "muter", "mutuel", "myriade", "myrtille", "mystère", "mythique", "nageur", "nappe", "narquois", "narrer", "natation", "nation", "nature", "naufrage", "nautique", "navire", "nébuleux", "nectar", "néfaste", "négation", "négliger", "négocier", "neige", "nerveux", "nettoyer", "neurone", "neutron", "neveu", "niche", "nickel", "nitrate", "niveau", "noble", "nocif", "nocturne", "noirceur", "noisette", "nomade", "nombreux", "nommer", "normatif", "notable", "notifier", "notoire", "nourrir", "nouveau", "novateur", "novembre", "novice", "nuage", "nuancer", "nuire", "nuisible", "numéro", "nuptial", "nuque", "nutritif", "obéir", "objectif", "obliger", "obscur", "observer", "obstacle", "obtenir", "obturer", "occasion", "occuper", "océan", "octobre", "octroyer", "octupler", "oculaire", "odeur", "odorant", "offenser", "officier", "offrir", "ogive", "oiseau", "oisillon", "olfactif", "olivier", "ombrage", "omettre", "onctueux", "onduler", "onéreux", "onirique", "opale", "opaque", "opérer", "opinion", "opportun", "opprimer", "opter", "optique", "orageux", "orange", "orbite", "ordonner", "oreille", "organe", "orgueil", "orifice", "ornement", "orque", "ortie", "osciller", "osmose", "ossature", "otarie", "ouragan", "ourson", "outil", "outrager", "ouvrage", "ovation", "oxyde", "oxygène", "ozone", "paisible", "palace", "palmarès", "palourde", "palper", "panache", "panda", "pangolin", "paniquer", "panneau", "panorama", "pantalon", "papaye", "papier", "papoter", "papyrus", "paradoxe", "parcelle", "paresse", "parfumer", "parler", "parole", "parrain", "parsemer", "partager", "parure", "parvenir", "passion", "pastèque", "paternel", "patience", "patron", "pavillon", "pavoiser", "payer", "paysage", "peigne", "peintre", "pelage", "pélican", "pelle", "pelouse", "peluche", "pendule", "pénétrer", "pénible", "pensif", "pénurie", "pépite", "péplum", "perdrix", "perforer", "période", "permuter", "perplexe", "persil", "perte", "peser", "pétale", "petit", "pétrir", "peuple", "pharaon", "phobie", "phoque", "photon", "phrase", "physique", "piano", "pictural", "pièce", "pierre", "pieuvre", "pilote", "pinceau", "pipette", "piquer", "pirogue", "piscine", "piston", "pivoter", "pixel", "pizza", "placard", "plafond", "plaisir", "planer", "plaque", "plastron", "plateau", "pleurer", "plexus", "pliage", "plomb", "plonger", "pluie", "plumage", "pochette", "poésie", "poète", "pointe", "poirier", "poisson", "poivre", "polaire", "policier", "pollen", "polygone", "pommade", "pompier", "ponctuel", "pondérer", "poney", "portique", "position", "posséder", "posture", "potager", "poteau", "potion", "pouce", "poulain", "poumon", "pourpre", "poussin", "pouvoir", "prairie", "pratique", "précieux", "prédire", "préfixe", "prélude", "prénom", "présence", "prétexte", "prévoir", "primitif", "prince", "prison", "priver", "problème", "procéder", "prodige", "profond", "progrès", "proie", "projeter", "prologue", "promener", "propre", "prospère", "protéger", "prouesse", "proverbe", "prudence", "pruneau", "psychose", "public", "puceron", "puiser", "pulpe", "pulsar", "punaise", "punitif", "pupitre", "purifier", "puzzle", "pyramide", "quasar", "querelle", "question", "quiétude", "quitter", "quotient", "racine", "raconter", "radieux", "ragondin", "raideur", "raisin", "ralentir", "rallonge", "ramasser", "rapide", "rasage", "ratisser", "ravager", "ravin", "rayonner", "réactif", "réagir", "réaliser", "réanimer", "recevoir", "réciter", "réclamer", "récolter", "recruter", "reculer", "recycler", "rédiger", "redouter", "refaire", "réflexe", "réformer", "refrain", "refuge", "régalien", "région", "réglage", "régulier", "réitérer", "rejeter", "rejouer", "relatif", "relever", "relief", "remarque", "remède", "remise", "remonter", "remplir", "remuer", "renard", "renfort", "renifler", "renoncer", "rentrer", "renvoi", "replier", "reporter", "reprise", "reptile", "requin", "réserve", "résineux", "résoudre", "respect", "rester", "résultat", "rétablir", "retenir", "réticule", "retomber", "retracer", "réunion", "réussir", "revanche", "revivre", "révolte", "révulsif", "richesse", "rideau", "rieur", "rigide", "rigoler", "rincer", "riposter", "risible", "risque", "rituel", "rival", "rivière", "rocheux", "romance", "rompre", "ronce", "rondin", "roseau", "rosier", "rotatif", "rotor", "rotule", "rouge", "rouille", "rouleau", "routine", "royaume", "ruban", "rubis", "ruche", "ruelle", "rugueux", "ruiner", "ruisseau", "ruser", "rustique", "rythme", "sabler", "saboter", "sabre", "sacoche", "safari", "sagesse", "saisir", "salade", "salive", "salon", "saluer", "samedi", "sanction", "sanglier", "sarcasme", "sardine", "saturer", "saugrenu", "saumon", "sauter", "sauvage", "savant", "savonner", "scalpel", "scandale", "scélérat", "scénario", "sceptre", "schéma", "science", "scinder", "score", "scrutin", "sculpter", "séance", "sécable", "sécher", "secouer", "sécréter", "sédatif", "séduire", "seigneur", "séjour", "sélectif", "semaine", "sembler", "semence", "séminal", "sénateur", "sensible", "sentence", "séparer", "séquence", "serein", "sergent", "sérieux", "serrure", "sérum", "service", "sésame", "sévir", "sevrage", "sextuple", "sidéral", "siècle", "siéger", "siffler", "sigle", "signal", "silence", "silicium", "simple", "sincère", "sinistre", "siphon", "sirop", "sismique", "situer", "skier", "social", "socle", "sodium", "soigneux", "soldat", "soleil", "solitude", "soluble", "sombre", "sommeil", "somnoler", "sonde", "songeur", "sonnette", "sonore", "sorcier", "sortir", "sosie", "sottise", "soucieux", "soudure", "souffle", "soulever", "soupape", "source", "soutirer", "souvenir", "spacieux", "spatial", "spécial", "sphère", "spiral", "stable", "station", "sternum", "stimulus", "stipuler", "strict", "studieux", "stupeur", "styliste", "sublime", "substrat", "subtil", "subvenir", "succès", "sucre", "suffixe", "suggérer", "suiveur", "sulfate", "superbe", "supplier", "surface", "suricate", "surmener", "surprise", "sursaut", "survie", "suspect", "syllabe", "symbole", "symétrie", "synapse", "syntaxe", "système", "tabac", "tablier", "tactile", "tailler", "talent", "talisman", "talonner", "tambour", "tamiser", "tangible", "tapis", "taquiner", "tarder", "tarif", "tartine", "tasse", "tatami", "tatouage", "taupe", "taureau", "taxer", "témoin", "temporel", "tenaille", "tendre", "teneur", "tenir", "tension", "terminer", "terne", "terrible", "tétine", "texte", "thème", "théorie", "thérapie", "thorax", "tibia", "tiède", "timide", "tirelire", "tiroir", "tissu", "titane", "titre", "tituber", "toboggan", "tolérant", "tomate", "tonique", "tonneau", "toponyme", "torche", "tordre", "tornade", "torpille", "torrent", "torse", "tortue", "totem", "toucher", "tournage", "tousser", "toxine", "traction", "trafic", "tragique", "trahir", "train", "trancher", "travail", "trèfle", "tremper", "trésor", "treuil", "triage", "tribunal", "tricoter", "trilogie", "triomphe", "tripler", "triturer", "trivial", "trombone", "tronc", "tropical", "troupeau", "tuile", "tulipe", "tumulte", "tunnel", "turbine", "tuteur", "tutoyer", "tuyau", "tympan", "typhon", "typique", "tyran", "ubuesque", "ultime", "ultrason", "unanime", "unifier", "union", "unique", "unitaire", "univers", "uranium", "urbain", "urticant", "usage", "usine", "usuel", "usure", "utile", "utopie", "vacarme", "vaccin", "vagabond", "vague", "vaillant", "vaincre", "vaisseau", "valable", "valise", "vallon", "valve", "vampire", "vanille", "vapeur", "varier", "vaseux", "vassal", "vaste", "vecteur", "vedette", "végétal", "véhicule", "veinard", "véloce", "vendredi", "vénérer", "venger", "venimeux", "ventouse", "verdure", "vérin", "vernir", "verrou", "verser", "vertu", "veston", "vétéran", "vétuste", "vexant", "vexer", "viaduc", "viande", "victoire", "vidange", "vidéo", "vignette", "vigueur", "vilain", "village", "vinaigre", "violon", "vipère", "virement", "virtuose", "virus", "visage", "viseur", "vision", "visqueux", "visuel", "vital", "vitesse", "viticole", "vitrine", "vivace", "vivipare", "vocation", "voguer", "voile", "voisin", "voiture", "volaille", "volcan", "voltiger", "volume", "vorace", "vortex", "voter", "vouloir", "voyage", "voyelle", "wagon", "xénon", "yacht", "zèbre", "zénith", "zeste", "zoologie"];

var french$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': french
});

var italian = ["abaco", "abbaglio", "abbinato", "abete", "abisso", "abolire", "abrasivo", "abrogato", "accadere", "accenno", "accusato", "acetone", "achille", "acido", "acqua", "acre", "acrilico", "acrobata", "acuto", "adagio", "addebito", "addome", "adeguato", "aderire", "adipe", "adottare", "adulare", "affabile", "affetto", "affisso", "affranto", "aforisma", "afoso", "africano", "agave", "agente", "agevole", "aggancio", "agire", "agitare", "agonismo", "agricolo", "agrumeto", "aguzzo", "alabarda", "alato", "albatro", "alberato", "albo", "albume", "alce", "alcolico", "alettone", "alfa", "algebra", "aliante", "alibi", "alimento", "allagato", "allegro", "allievo", "allodola", "allusivo", "almeno", "alogeno", "alpaca", "alpestre", "altalena", "alterno", "alticcio", "altrove", "alunno", "alveolo", "alzare", "amalgama", "amanita", "amarena", "ambito", "ambrato", "ameba", "america", "ametista", "amico", "ammasso", "ammenda", "ammirare", "ammonito", "amore", "ampio", "ampliare", "amuleto", "anacardo", "anagrafe", "analista", "anarchia", "anatra", "anca", "ancella", "ancora", "andare", "andrea", "anello", "angelo", "angolare", "angusto", "anima", "annegare", "annidato", "anno", "annuncio", "anonimo", "anticipo", "anzi", "apatico", "apertura", "apode", "apparire", "appetito", "appoggio", "approdo", "appunto", "aprile", "arabica", "arachide", "aragosta", "araldica", "arancio", "aratura", "arazzo", "arbitro", "archivio", "ardito", "arenile", "argento", "argine", "arguto", "aria", "armonia", "arnese", "arredato", "arringa", "arrosto", "arsenico", "arso", "artefice", "arzillo", "asciutto", "ascolto", "asepsi", "asettico", "asfalto", "asino", "asola", "aspirato", "aspro", "assaggio", "asse", "assoluto", "assurdo", "asta", "astenuto", "astice", "astratto", "atavico", "ateismo", "atomico", "atono", "attesa", "attivare", "attorno", "attrito", "attuale", "ausilio", "austria", "autista", "autonomo", "autunno", "avanzato", "avere", "avvenire", "avviso", "avvolgere", "azione", "azoto", "azzimo", "azzurro", "babele", "baccano", "bacino", "baco", "badessa", "badilata", "bagnato", "baita", "balcone", "baldo", "balena", "ballata", "balzano", "bambino", "bandire", "baraonda", "barbaro", "barca", "baritono", "barlume", "barocco", "basilico", "basso", "batosta", "battuto", "baule", "bava", "bavosa", "becco", "beffa", "belgio", "belva", "benda", "benevole", "benigno", "benzina", "bere", "berlina", "beta", "bibita", "bici", "bidone", "bifido", "biga", "bilancia", "bimbo", "binocolo", "biologo", "bipede", "bipolare", "birbante", "birra", "biscotto", "bisesto", "bisnonno", "bisonte", "bisturi", "bizzarro", "blando", "blatta", "bollito", "bonifico", "bordo", "bosco", "botanico", "bottino", "bozzolo", "braccio", "bradipo", "brama", "branca", "bravura", "bretella", "brevetto", "brezza", "briglia", "brillante", "brindare", "broccolo", "brodo", "bronzina", "brullo", "bruno", "bubbone", "buca", "budino", "buffone", "buio", "bulbo", "buono", "burlone", "burrasca", "bussola", "busta", "cadetto", "caduco", "calamaro", "calcolo", "calesse", "calibro", "calmo", "caloria", "cambusa", "camerata", "camicia", "cammino", "camola", "campale", "canapa", "candela", "cane", "canino", "canotto", "cantina", "capace", "capello", "capitolo", "capogiro", "cappero", "capra", "capsula", "carapace", "carcassa", "cardo", "carisma", "carovana", "carretto", "cartolina", "casaccio", "cascata", "caserma", "caso", "cassone", "castello", "casuale", "catasta", "catena", "catrame", "cauto", "cavillo", "cedibile", "cedrata", "cefalo", "celebre", "cellulare", "cena", "cenone", "centesimo", "ceramica", "cercare", "certo", "cerume", "cervello", "cesoia", "cespo", "ceto", "chela", "chiaro", "chicca", "chiedere", "chimera", "china", "chirurgo", "chitarra", "ciao", "ciclismo", "cifrare", "cigno", "cilindro", "ciottolo", "circa", "cirrosi", "citrico", "cittadino", "ciuffo", "civetta", "civile", "classico", "clinica", "cloro", "cocco", "codardo", "codice", "coerente", "cognome", "collare", "colmato", "colore", "colposo", "coltivato", "colza", "coma", "cometa", "commando", "comodo", "computer", "comune", "conciso", "condurre", "conferma", "congelare", "coniuge", "connesso", "conoscere", "consumo", "continuo", "convegno", "coperto", "copione", "coppia", "copricapo", "corazza", "cordata", "coricato", "cornice", "corolla", "corpo", "corredo", "corsia", "cortese", "cosmico", "costante", "cottura", "covato", "cratere", "cravatta", "creato", "credere", "cremoso", "crescita", "creta", "criceto", "crinale", "crisi", "critico", "croce", "cronaca", "crostata", "cruciale", "crusca", "cucire", "cuculo", "cugino", "cullato", "cupola", "curatore", "cursore", "curvo", "cuscino", "custode", "dado", "daino", "dalmata", "damerino", "daniela", "dannoso", "danzare", "datato", "davanti", "davvero", "debutto", "decennio", "deciso", "declino", "decollo", "decreto", "dedicato", "definito", "deforme", "degno", "delegare", "delfino", "delirio", "delta", "demenza", "denotato", "dentro", "deposito", "derapata", "derivare", "deroga", "descritto", "deserto", "desiderio", "desumere", "detersivo", "devoto", "diametro", "dicembre", "diedro", "difeso", "diffuso", "digerire", "digitale", "diluvio", "dinamico", "dinnanzi", "dipinto", "diploma", "dipolo", "diradare", "dire", "dirotto", "dirupo", "disagio", "discreto", "disfare", "disgelo", "disposto", "distanza", "disumano", "dito", "divano", "divelto", "dividere", "divorato", "doblone", "docente", "doganale", "dogma", "dolce", "domato", "domenica", "dominare", "dondolo", "dono", "dormire", "dote", "dottore", "dovuto", "dozzina", "drago", "druido", "dubbio", "dubitare", "ducale", "duna", "duomo", "duplice", "duraturo", "ebano", "eccesso", "ecco", "eclissi", "economia", "edera", "edicola", "edile", "editoria", "educare", "egemonia", "egli", "egoismo", "egregio", "elaborato", "elargire", "elegante", "elencato", "eletto", "elevare", "elfico", "elica", "elmo", "elsa", "eluso", "emanato", "emblema", "emesso", "emiro", "emotivo", "emozione", "empirico", "emulo", "endemico", "enduro", "energia", "enfasi", "enoteca", "entrare", "enzima", "epatite", "epilogo", "episodio", "epocale", "eppure", "equatore", "erario", "erba", "erboso", "erede", "eremita", "erigere", "ermetico", "eroe", "erosivo", "errante", "esagono", "esame", "esanime", "esaudire", "esca", "esempio", "esercito", "esibito", "esigente", "esistere", "esito", "esofago", "esortato", "esoso", "espanso", "espresso", "essenza", "esso", "esteso", "estimare", "estonia", "estroso", "esultare", "etilico", "etnico", "etrusco", "etto", "euclideo", "europa", "evaso", "evidenza", "evitato", "evoluto", "evviva", "fabbrica", "faccenda", "fachiro", "falco", "famiglia", "fanale", "fanfara", "fango", "fantasma", "fare", "farfalla", "farinoso", "farmaco", "fascia", "fastoso", "fasullo", "faticare", "fato", "favoloso", "febbre", "fecola", "fede", "fegato", "felpa", "feltro", "femmina", "fendere", "fenomeno", "fermento", "ferro", "fertile", "fessura", "festivo", "fetta", "feudo", "fiaba", "fiducia", "fifa", "figurato", "filo", "finanza", "finestra", "finire", "fiore", "fiscale", "fisico", "fiume", "flacone", "flamenco", "flebo", "flemma", "florido", "fluente", "fluoro", "fobico", "focaccia", "focoso", "foderato", "foglio", "folata", "folclore", "folgore", "fondente", "fonetico", "fonia", "fontana", "forbito", "forchetta", "foresta", "formica", "fornaio", "foro", "fortezza", "forzare", "fosfato", "fosso", "fracasso", "frana", "frassino", "fratello", "freccetta", "frenata", "fresco", "frigo", "frollino", "fronde", "frugale", "frutta", "fucilata", "fucsia", "fuggente", "fulmine", "fulvo", "fumante", "fumetto", "fumoso", "fune", "funzione", "fuoco", "furbo", "furgone", "furore", "fuso", "futile", "gabbiano", "gaffe", "galateo", "gallina", "galoppo", "gambero", "gamma", "garanzia", "garbo", "garofano", "garzone", "gasdotto", "gasolio", "gastrico", "gatto", "gaudio", "gazebo", "gazzella", "geco", "gelatina", "gelso", "gemello", "gemmato", "gene", "genitore", "gennaio", "genotipo", "gergo", "ghepardo", "ghiaccio", "ghisa", "giallo", "gilda", "ginepro", "giocare", "gioiello", "giorno", "giove", "girato", "girone", "gittata", "giudizio", "giurato", "giusto", "globulo", "glutine", "gnomo", "gobba", "golf", "gomito", "gommone", "gonfio", "gonna", "governo", "gracile", "grado", "grafico", "grammo", "grande", "grattare", "gravoso", "grazia", "greca", "gregge", "grifone", "grigio", "grinza", "grotta", "gruppo", "guadagno", "guaio", "guanto", "guardare", "gufo", "guidare", "ibernato", "icona", "identico", "idillio", "idolo", "idra", "idrico", "idrogeno", "igiene", "ignaro", "ignorato", "ilare", "illeso", "illogico", "illudere", "imballo", "imbevuto", "imbocco", "imbuto", "immane", "immerso", "immolato", "impacco", "impeto", "impiego", "importo", "impronta", "inalare", "inarcare", "inattivo", "incanto", "incendio", "inchino", "incisivo", "incluso", "incontro", "incrocio", "incubo", "indagine", "india", "indole", "inedito", "infatti", "infilare", "inflitto", "ingaggio", "ingegno", "inglese", "ingordo", "ingrosso", "innesco", "inodore", "inoltrare", "inondato", "insano", "insetto", "insieme", "insonnia", "insulina", "intasato", "intero", "intonaco", "intuito", "inumidire", "invalido", "invece", "invito", "iperbole", "ipnotico", "ipotesi", "ippica", "iride", "irlanda", "ironico", "irrigato", "irrorare", "isolato", "isotopo", "isterico", "istituto", "istrice", "italia", "iterare", "labbro", "labirinto", "lacca", "lacerato", "lacrima", "lacuna", "laddove", "lago", "lampo", "lancetta", "lanterna", "lardoso", "larga", "laringe", "lastra", "latenza", "latino", "lattuga", "lavagna", "lavoro", "legale", "leggero", "lembo", "lentezza", "lenza", "leone", "lepre", "lesivo", "lessato", "lesto", "letterale", "leva", "levigato", "libero", "lido", "lievito", "lilla", "limatura", "limitare", "limpido", "lineare", "lingua", "liquido", "lira", "lirica", "lisca", "lite", "litigio", "livrea", "locanda", "lode", "logica", "lombare", "londra", "longevo", "loquace", "lorenzo", "loto", "lotteria", "luce", "lucidato", "lumaca", "luminoso", "lungo", "lupo", "luppolo", "lusinga", "lusso", "lutto", "macabro", "macchina", "macero", "macinato", "madama", "magico", "maglia", "magnete", "magro", "maiolica", "malafede", "malgrado", "malinteso", "malsano", "malto", "malumore", "mana", "mancia", "mandorla", "mangiare", "manifesto", "mannaro", "manovra", "mansarda", "mantide", "manubrio", "mappa", "maratona", "marcire", "maretta", "marmo", "marsupio", "maschera", "massaia", "mastino", "materasso", "matricola", "mattone", "maturo", "mazurca", "meandro", "meccanico", "mecenate", "medesimo", "meditare", "mega", "melassa", "melis", "melodia", "meninge", "meno", "mensola", "mercurio", "merenda", "merlo", "meschino", "mese", "messere", "mestolo", "metallo", "metodo", "mettere", "miagolare", "mica", "micelio", "michele", "microbo", "midollo", "miele", "migliore", "milano", "milite", "mimosa", "minerale", "mini", "minore", "mirino", "mirtillo", "miscela", "missiva", "misto", "misurare", "mitezza", "mitigare", "mitra", "mittente", "mnemonico", "modello", "modifica", "modulo", "mogano", "mogio", "mole", "molosso", "monastero", "monco", "mondina", "monetario", "monile", "monotono", "monsone", "montato", "monviso", "mora", "mordere", "morsicato", "mostro", "motivato", "motosega", "motto", "movenza", "movimento", "mozzo", "mucca", "mucosa", "muffa", "mughetto", "mugnaio", "mulatto", "mulinello", "multiplo", "mummia", "munto", "muovere", "murale", "musa", "muscolo", "musica", "mutevole", "muto", "nababbo", "nafta", "nanometro", "narciso", "narice", "narrato", "nascere", "nastrare", "naturale", "nautica", "naviglio", "nebulosa", "necrosi", "negativo", "negozio", "nemmeno", "neofita", "neretto", "nervo", "nessuno", "nettuno", "neutrale", "neve", "nevrotico", "nicchia", "ninfa", "nitido", "nobile", "nocivo", "nodo", "nome", "nomina", "nordico", "normale", "norvegese", "nostrano", "notare", "notizia", "notturno", "novella", "nucleo", "nulla", "numero", "nuovo", "nutrire", "nuvola", "nuziale", "oasi", "obbedire", "obbligo", "obelisco", "oblio", "obolo", "obsoleto", "occasione", "occhio", "occidente", "occorrere", "occultare", "ocra", "oculato", "odierno", "odorare", "offerta", "offrire", "offuscato", "oggetto", "oggi", "ognuno", "olandese", "olfatto", "oliato", "oliva", "ologramma", "oltre", "omaggio", "ombelico", "ombra", "omega", "omissione", "ondoso", "onere", "onice", "onnivoro", "onorevole", "onta", "operato", "opinione", "opposto", "oracolo", "orafo", "ordine", "orecchino", "orefice", "orfano", "organico", "origine", "orizzonte", "orma", "ormeggio", "ornativo", "orologio", "orrendo", "orribile", "ortensia", "ortica", "orzata", "orzo", "osare", "oscurare", "osmosi", "ospedale", "ospite", "ossa", "ossidare", "ostacolo", "oste", "otite", "otre", "ottagono", "ottimo", "ottobre", "ovale", "ovest", "ovino", "oviparo", "ovocito", "ovunque", "ovviare", "ozio", "pacchetto", "pace", "pacifico", "padella", "padrone", "paese", "paga", "pagina", "palazzina", "palesare", "pallido", "palo", "palude", "pandoro", "pannello", "paolo", "paonazzo", "paprica", "parabola", "parcella", "parere", "pargolo", "pari", "parlato", "parola", "partire", "parvenza", "parziale", "passivo", "pasticca", "patacca", "patologia", "pattume", "pavone", "peccato", "pedalare", "pedonale", "peggio", "peloso", "penare", "pendice", "penisola", "pennuto", "penombra", "pensare", "pentola", "pepe", "pepita", "perbene", "percorso", "perdonato", "perforare", "pergamena", "periodo", "permesso", "perno", "perplesso", "persuaso", "pertugio", "pervaso", "pesatore", "pesista", "peso", "pestifero", "petalo", "pettine", "petulante", "pezzo", "piacere", "pianta", "piattino", "piccino", "picozza", "piega", "pietra", "piffero", "pigiama", "pigolio", "pigro", "pila", "pilifero", "pillola", "pilota", "pimpante", "pineta", "pinna", "pinolo", "pioggia", "piombo", "piramide", "piretico", "pirite", "pirolisi", "pitone", "pizzico", "placebo", "planare", "plasma", "platano", "plenario", "pochezza", "poderoso", "podismo", "poesia", "poggiare", "polenta", "poligono", "pollice", "polmonite", "polpetta", "polso", "poltrona", "polvere", "pomice", "pomodoro", "ponte", "popoloso", "porfido", "poroso", "porpora", "porre", "portata", "posa", "positivo", "possesso", "postulato", "potassio", "potere", "pranzo", "prassi", "pratica", "precluso", "predica", "prefisso", "pregiato", "prelievo", "premere", "prenotare", "preparato", "presenza", "pretesto", "prevalso", "prima", "principe", "privato", "problema", "procura", "produrre", "profumo", "progetto", "prolunga", "promessa", "pronome", "proposta", "proroga", "proteso", "prova", "prudente", "prugna", "prurito", "psiche", "pubblico", "pudica", "pugilato", "pugno", "pulce", "pulito", "pulsante", "puntare", "pupazzo", "pupilla", "puro", "quadro", "qualcosa", "quasi", "querela", "quota", "raccolto", "raddoppio", "radicale", "radunato", "raffica", "ragazzo", "ragione", "ragno", "ramarro", "ramingo", "ramo", "randagio", "rantolare", "rapato", "rapina", "rappreso", "rasatura", "raschiato", "rasente", "rassegna", "rastrello", "rata", "ravveduto", "reale", "recepire", "recinto", "recluta", "recondito", "recupero", "reddito", "redimere", "regalato", "registro", "regola", "regresso", "relazione", "remare", "remoto", "renna", "replica", "reprimere", "reputare", "resa", "residente", "responso", "restauro", "rete", "retina", "retorica", "rettifica", "revocato", "riassunto", "ribadire", "ribelle", "ribrezzo", "ricarica", "ricco", "ricevere", "riciclato", "ricordo", "ricreduto", "ridicolo", "ridurre", "rifasare", "riflesso", "riforma", "rifugio", "rigare", "rigettato", "righello", "rilassato", "rilevato", "rimanere", "rimbalzo", "rimedio", "rimorchio", "rinascita", "rincaro", "rinforzo", "rinnovo", "rinomato", "rinsavito", "rintocco", "rinuncia", "rinvenire", "riparato", "ripetuto", "ripieno", "riportare", "ripresa", "ripulire", "risata", "rischio", "riserva", "risibile", "riso", "rispetto", "ristoro", "risultato", "risvolto", "ritardo", "ritegno", "ritmico", "ritrovo", "riunione", "riva", "riverso", "rivincita", "rivolto", "rizoma", "roba", "robotico", "robusto", "roccia", "roco", "rodaggio", "rodere", "roditore", "rogito", "rollio", "romantico", "rompere", "ronzio", "rosolare", "rospo", "rotante", "rotondo", "rotula", "rovescio", "rubizzo", "rubrica", "ruga", "rullino", "rumine", "rumoroso", "ruolo", "rupe", "russare", "rustico", "sabato", "sabbiare", "sabotato", "sagoma", "salasso", "saldatura", "salgemma", "salivare", "salmone", "salone", "saltare", "saluto", "salvo", "sapere", "sapido", "saporito", "saraceno", "sarcasmo", "sarto", "sassoso", "satellite", "satira", "satollo", "saturno", "savana", "savio", "saziato", "sbadiglio", "sbalzo", "sbancato", "sbarra", "sbattere", "sbavare", "sbendare", "sbirciare", "sbloccato", "sbocciato", "sbrinare", "sbruffone", "sbuffare", "scabroso", "scadenza", "scala", "scambiare", "scandalo", "scapola", "scarso", "scatenare", "scavato", "scelto", "scenico", "scettro", "scheda", "schiena", "sciarpa", "scienza", "scindere", "scippo", "sciroppo", "scivolo", "sclerare", "scodella", "scolpito", "scomparto", "sconforto", "scoprire", "scorta", "scossone", "scozzese", "scriba", "scrollare", "scrutinio", "scuderia", "scultore", "scuola", "scuro", "scusare", "sdebitare", "sdoganare", "seccatura", "secondo", "sedano", "seggiola", "segnalato", "segregato", "seguito", "selciato", "selettivo", "sella", "selvaggio", "semaforo", "sembrare", "seme", "seminato", "sempre", "senso", "sentire", "sepolto", "sequenza", "serata", "serbato", "sereno", "serio", "serpente", "serraglio", "servire", "sestina", "setola", "settimana", "sfacelo", "sfaldare", "sfamato", "sfarzoso", "sfaticato", "sfera", "sfida", "sfilato", "sfinge", "sfocato", "sfoderare", "sfogo", "sfoltire", "sforzato", "sfratto", "sfruttato", "sfuggito", "sfumare", "sfuso", "sgabello", "sgarbato", "sgonfiare", "sgorbio", "sgrassato", "sguardo", "sibilo", "siccome", "sierra", "sigla", "signore", "silenzio", "sillaba", "simbolo", "simpatico", "simulato", "sinfonia", "singolo", "sinistro", "sino", "sintesi", "sinusoide", "sipario", "sisma", "sistole", "situato", "slitta", "slogatura", "sloveno", "smarrito", "smemorato", "smentito", "smeraldo", "smilzo", "smontare", "smottato", "smussato", "snellire", "snervato", "snodo", "sobbalzo", "sobrio", "soccorso", "sociale", "sodale", "soffitto", "sogno", "soldato", "solenne", "solido", "sollazzo", "solo", "solubile", "solvente", "somatico", "somma", "sonda", "sonetto", "sonnifero", "sopire", "soppeso", "sopra", "sorgere", "sorpasso", "sorriso", "sorso", "sorteggio", "sorvolato", "sospiro", "sosta", "sottile", "spada", "spalla", "spargere", "spatola", "spavento", "spazzola", "specie", "spedire", "spegnere", "spelatura", "speranza", "spessore", "spettrale", "spezzato", "spia", "spigoloso", "spillato", "spinoso", "spirale", "splendido", "sportivo", "sposo", "spranga", "sprecare", "spronato", "spruzzo", "spuntino", "squillo", "sradicare", "srotolato", "stabile", "stacco", "staffa", "stagnare", "stampato", "stantio", "starnuto", "stasera", "statuto", "stelo", "steppa", "sterzo", "stiletto", "stima", "stirpe", "stivale", "stizzoso", "stonato", "storico", "strappo", "stregato", "stridulo", "strozzare", "strutto", "stuccare", "stufo", "stupendo", "subentro", "succoso", "sudore", "suggerito", "sugo", "sultano", "suonare", "superbo", "supporto", "surgelato", "surrogato", "sussurro", "sutura", "svagare", "svedese", "sveglio", "svelare", "svenuto", "svezia", "sviluppo", "svista", "svizzera", "svolta", "svuotare", "tabacco", "tabulato", "tacciare", "taciturno", "tale", "talismano", "tampone", "tannino", "tara", "tardivo", "targato", "tariffa", "tarpare", "tartaruga", "tasto", "tattico", "taverna", "tavolata", "tazza", "teca", "tecnico", "telefono", "temerario", "tempo", "temuto", "tendone", "tenero", "tensione", "tentacolo", "teorema", "terme", "terrazzo", "terzetto", "tesi", "tesserato", "testato", "tetro", "tettoia", "tifare", "tigella", "timbro", "tinto", "tipico", "tipografo", "tiraggio", "tiro", "titanio", "titolo", "titubante", "tizio", "tizzone", "toccare", "tollerare", "tolto", "tombola", "tomo", "tonfo", "tonsilla", "topazio", "topologia", "toppa", "torba", "tornare", "torrone", "tortora", "toscano", "tossire", "tostatura", "totano", "trabocco", "trachea", "trafila", "tragedia", "tralcio", "tramonto", "transito", "trapano", "trarre", "trasloco", "trattato", "trave", "treccia", "tremolio", "trespolo", "tributo", "tricheco", "trifoglio", "trillo", "trincea", "trio", "tristezza", "triturato", "trivella", "tromba", "trono", "troppo", "trottola", "trovare", "truccato", "tubatura", "tuffato", "tulipano", "tumulto", "tunisia", "turbare", "turchino", "tuta", "tutela", "ubicato", "uccello", "uccisore", "udire", "uditivo", "uffa", "ufficio", "uguale", "ulisse", "ultimato", "umano", "umile", "umorismo", "uncinetto", "ungere", "ungherese", "unicorno", "unificato", "unisono", "unitario", "unte", "uovo", "upupa", "uragano", "urgenza", "urlo", "usanza", "usato", "uscito", "usignolo", "usuraio", "utensile", "utilizzo", "utopia", "vacante", "vaccinato", "vagabondo", "vagliato", "valanga", "valgo", "valico", "valletta", "valoroso", "valutare", "valvola", "vampata", "vangare", "vanitoso", "vano", "vantaggio", "vanvera", "vapore", "varano", "varcato", "variante", "vasca", "vedetta", "vedova", "veduto", "vegetale", "veicolo", "velcro", "velina", "velluto", "veloce", "venato", "vendemmia", "vento", "verace", "verbale", "vergogna", "verifica", "vero", "verruca", "verticale", "vescica", "vessillo", "vestale", "veterano", "vetrina", "vetusto", "viandante", "vibrante", "vicenda", "vichingo", "vicinanza", "vidimare", "vigilia", "vigneto", "vigore", "vile", "villano", "vimini", "vincitore", "viola", "vipera", "virgola", "virologo", "virulento", "viscoso", "visione", "vispo", "vissuto", "visura", "vita", "vitello", "vittima", "vivanda", "vivido", "viziare", "voce", "voga", "volatile", "volere", "volpe", "voragine", "vulcano", "zampogna", "zanna", "zappato", "zattera", "zavorra", "zefiro", "zelante", "zelo", "zenzero", "zerbino", "zibetto", "zinco", "zircone", "zitto", "zolla", "zotico", "zucchero", "zufolo", "zulu", "zuppa"];

var italian$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': italian
});

var spanish = ["ábaco", "abdomen", "abeja", "abierto", "abogado", "abono", "aborto", "abrazo", "abrir", "abuelo", "abuso", "acabar", "academia", "acceso", "acción", "aceite", "acelga", "acento", "aceptar", "ácido", "aclarar", "acné", "acoger", "acoso", "activo", "acto", "actriz", "actuar", "acudir", "acuerdo", "acusar", "adicto", "admitir", "adoptar", "adorno", "aduana", "adulto", "aéreo", "afectar", "afición", "afinar", "afirmar", "ágil", "agitar", "agonía", "agosto", "agotar", "agregar", "agrio", "agua", "agudo", "águila", "aguja", "ahogo", "ahorro", "aire", "aislar", "ajedrez", "ajeno", "ajuste", "alacrán", "alambre", "alarma", "alba", "álbum", "alcalde", "aldea", "alegre", "alejar", "alerta", "aleta", "alfiler", "alga", "algodón", "aliado", "aliento", "alivio", "alma", "almeja", "almíbar", "altar", "alteza", "altivo", "alto", "altura", "alumno", "alzar", "amable", "amante", "amapola", "amargo", "amasar", "ámbar", "ámbito", "ameno", "amigo", "amistad", "amor", "amparo", "amplio", "ancho", "anciano", "ancla", "andar", "andén", "anemia", "ángulo", "anillo", "ánimo", "anís", "anotar", "antena", "antiguo", "antojo", "anual", "anular", "anuncio", "añadir", "añejo", "año", "apagar", "aparato", "apetito", "apio", "aplicar", "apodo", "aporte", "apoyo", "aprender", "aprobar", "apuesta", "apuro", "arado", "araña", "arar", "árbitro", "árbol", "arbusto", "archivo", "arco", "arder", "ardilla", "arduo", "área", "árido", "aries", "armonía", "arnés", "aroma", "arpa", "arpón", "arreglo", "arroz", "arruga", "arte", "artista", "asa", "asado", "asalto", "ascenso", "asegurar", "aseo", "asesor", "asiento", "asilo", "asistir", "asno", "asombro", "áspero", "astilla", "astro", "astuto", "asumir", "asunto", "atajo", "ataque", "atar", "atento", "ateo", "ático", "atleta", "átomo", "atraer", "atroz", "atún", "audaz", "audio", "auge", "aula", "aumento", "ausente", "autor", "aval", "avance", "avaro", "ave", "avellana", "avena", "avestruz", "avión", "aviso", "ayer", "ayuda", "ayuno", "azafrán", "azar", "azote", "azúcar", "azufre", "azul", "baba", "babor", "bache", "bahía", "baile", "bajar", "balanza", "balcón", "balde", "bambú", "banco", "banda", "baño", "barba", "barco", "barniz", "barro", "báscula", "bastón", "basura", "batalla", "batería", "batir", "batuta", "baúl", "bazar", "bebé", "bebida", "bello", "besar", "beso", "bestia", "bicho", "bien", "bingo", "blanco", "bloque", "blusa", "boa", "bobina", "bobo", "boca", "bocina", "boda", "bodega", "boina", "bola", "bolero", "bolsa", "bomba", "bondad", "bonito", "bono", "bonsái", "borde", "borrar", "bosque", "bote", "botín", "bóveda", "bozal", "bravo", "brazo", "brecha", "breve", "brillo", "brinco", "brisa", "broca", "broma", "bronce", "brote", "bruja", "brusco", "bruto", "buceo", "bucle", "bueno", "buey", "bufanda", "bufón", "búho", "buitre", "bulto", "burbuja", "burla", "burro", "buscar", "butaca", "buzón", "caballo", "cabeza", "cabina", "cabra", "cacao", "cadáver", "cadena", "caer", "café", "caída", "caimán", "caja", "cajón", "cal", "calamar", "calcio", "caldo", "calidad", "calle", "calma", "calor", "calvo", "cama", "cambio", "camello", "camino", "campo", "cáncer", "candil", "canela", "canguro", "canica", "canto", "caña", "cañón", "caoba", "caos", "capaz", "capitán", "capote", "captar", "capucha", "cara", "carbón", "cárcel", "careta", "carga", "cariño", "carne", "carpeta", "carro", "carta", "casa", "casco", "casero", "caspa", "castor", "catorce", "catre", "caudal", "causa", "cazo", "cebolla", "ceder", "cedro", "celda", "célebre", "celoso", "célula", "cemento", "ceniza", "centro", "cerca", "cerdo", "cereza", "cero", "cerrar", "certeza", "césped", "cetro", "chacal", "chaleco", "champú", "chancla", "chapa", "charla", "chico", "chiste", "chivo", "choque", "choza", "chuleta", "chupar", "ciclón", "ciego", "cielo", "cien", "cierto", "cifra", "cigarro", "cima", "cinco", "cine", "cinta", "ciprés", "circo", "ciruela", "cisne", "cita", "ciudad", "clamor", "clan", "claro", "clase", "clave", "cliente", "clima", "clínica", "cobre", "cocción", "cochino", "cocina", "coco", "código", "codo", "cofre", "coger", "cohete", "cojín", "cojo", "cola", "colcha", "colegio", "colgar", "colina", "collar", "colmo", "columna", "combate", "comer", "comida", "cómodo", "compra", "conde", "conejo", "conga", "conocer", "consejo", "contar", "copa", "copia", "corazón", "corbata", "corcho", "cordón", "corona", "correr", "coser", "cosmos", "costa", "cráneo", "cráter", "crear", "crecer", "creído", "crema", "cría", "crimen", "cripta", "crisis", "cromo", "crónica", "croqueta", "crudo", "cruz", "cuadro", "cuarto", "cuatro", "cubo", "cubrir", "cuchara", "cuello", "cuento", "cuerda", "cuesta", "cueva", "cuidar", "culebra", "culpa", "culto", "cumbre", "cumplir", "cuna", "cuneta", "cuota", "cupón", "cúpula", "curar", "curioso", "curso", "curva", "cutis", "dama", "danza", "dar", "dardo", "dátil", "deber", "débil", "década", "decir", "dedo", "defensa", "definir", "dejar", "delfín", "delgado", "delito", "demora", "denso", "dental", "deporte", "derecho", "derrota", "desayuno", "deseo", "desfile", "desnudo", "destino", "desvío", "detalle", "detener", "deuda", "día", "diablo", "diadema", "diamante", "diana", "diario", "dibujo", "dictar", "diente", "dieta", "diez", "difícil", "digno", "dilema", "diluir", "dinero", "directo", "dirigir", "disco", "diseño", "disfraz", "diva", "divino", "doble", "doce", "dolor", "domingo", "don", "donar", "dorado", "dormir", "dorso", "dos", "dosis", "dragón", "droga", "ducha", "duda", "duelo", "dueño", "dulce", "dúo", "duque", "durar", "dureza", "duro", "ébano", "ebrio", "echar", "eco", "ecuador", "edad", "edición", "edificio", "editor", "educar", "efecto", "eficaz", "eje", "ejemplo", "elefante", "elegir", "elemento", "elevar", "elipse", "élite", "elixir", "elogio", "eludir", "embudo", "emitir", "emoción", "empate", "empeño", "empleo", "empresa", "enano", "encargo", "enchufe", "encía", "enemigo", "enero", "enfado", "enfermo", "engaño", "enigma", "enlace", "enorme", "enredo", "ensayo", "enseñar", "entero", "entrar", "envase", "envío", "época", "equipo", "erizo", "escala", "escena", "escolar", "escribir", "escudo", "esencia", "esfera", "esfuerzo", "espada", "espejo", "espía", "esposa", "espuma", "esquí", "estar", "este", "estilo", "estufa", "etapa", "eterno", "ética", "etnia", "evadir", "evaluar", "evento", "evitar", "exacto", "examen", "exceso", "excusa", "exento", "exigir", "exilio", "existir", "éxito", "experto", "explicar", "exponer", "extremo", "fábrica", "fábula", "fachada", "fácil", "factor", "faena", "faja", "falda", "fallo", "falso", "faltar", "fama", "familia", "famoso", "faraón", "farmacia", "farol", "farsa", "fase", "fatiga", "fauna", "favor", "fax", "febrero", "fecha", "feliz", "feo", "feria", "feroz", "fértil", "fervor", "festín", "fiable", "fianza", "fiar", "fibra", "ficción", "ficha", "fideo", "fiebre", "fiel", "fiera", "fiesta", "figura", "fijar", "fijo", "fila", "filete", "filial", "filtro", "fin", "finca", "fingir", "finito", "firma", "flaco", "flauta", "flecha", "flor", "flota", "fluir", "flujo", "flúor", "fobia", "foca", "fogata", "fogón", "folio", "folleto", "fondo", "forma", "forro", "fortuna", "forzar", "fosa", "foto", "fracaso", "frágil", "franja", "frase", "fraude", "freír", "freno", "fresa", "frío", "frito", "fruta", "fuego", "fuente", "fuerza", "fuga", "fumar", "función", "funda", "furgón", "furia", "fusil", "fútbol", "futuro", "gacela", "gafas", "gaita", "gajo", "gala", "galería", "gallo", "gamba", "ganar", "gancho", "ganga", "ganso", "garaje", "garza", "gasolina", "gastar", "gato", "gavilán", "gemelo", "gemir", "gen", "género", "genio", "gente", "geranio", "gerente", "germen", "gesto", "gigante", "gimnasio", "girar", "giro", "glaciar", "globo", "gloria", "gol", "golfo", "goloso", "golpe", "goma", "gordo", "gorila", "gorra", "gota", "goteo", "gozar", "grada", "gráfico", "grano", "grasa", "gratis", "grave", "grieta", "grillo", "gripe", "gris", "grito", "grosor", "grúa", "grueso", "grumo", "grupo", "guante", "guapo", "guardia", "guerra", "guía", "guiño", "guion", "guiso", "guitarra", "gusano", "gustar", "haber", "hábil", "hablar", "hacer", "hacha", "hada", "hallar", "hamaca", "harina", "haz", "hazaña", "hebilla", "hebra", "hecho", "helado", "helio", "hembra", "herir", "hermano", "héroe", "hervir", "hielo", "hierro", "hígado", "higiene", "hijo", "himno", "historia", "hocico", "hogar", "hoguera", "hoja", "hombre", "hongo", "honor", "honra", "hora", "hormiga", "horno", "hostil", "hoyo", "hueco", "huelga", "huerta", "hueso", "huevo", "huida", "huir", "humano", "húmedo", "humilde", "humo", "hundir", "huracán", "hurto", "icono", "ideal", "idioma", "ídolo", "iglesia", "iglú", "igual", "ilegal", "ilusión", "imagen", "imán", "imitar", "impar", "imperio", "imponer", "impulso", "incapaz", "índice", "inerte", "infiel", "informe", "ingenio", "inicio", "inmenso", "inmune", "innato", "insecto", "instante", "interés", "íntimo", "intuir", "inútil", "invierno", "ira", "iris", "ironía", "isla", "islote", "jabalí", "jabón", "jamón", "jarabe", "jardín", "jarra", "jaula", "jazmín", "jefe", "jeringa", "jinete", "jornada", "joroba", "joven", "joya", "juerga", "jueves", "juez", "jugador", "jugo", "juguete", "juicio", "junco", "jungla", "junio", "juntar", "júpiter", "jurar", "justo", "juvenil", "juzgar", "kilo", "koala", "labio", "lacio", "lacra", "lado", "ladrón", "lagarto", "lágrima", "laguna", "laico", "lamer", "lámina", "lámpara", "lana", "lancha", "langosta", "lanza", "lápiz", "largo", "larva", "lástima", "lata", "látex", "latir", "laurel", "lavar", "lazo", "leal", "lección", "leche", "lector", "leer", "legión", "legumbre", "lejano", "lengua", "lento", "leña", "león", "leopardo", "lesión", "letal", "letra", "leve", "leyenda", "libertad", "libro", "licor", "líder", "lidiar", "lienzo", "liga", "ligero", "lima", "límite", "limón", "limpio", "lince", "lindo", "línea", "lingote", "lino", "linterna", "líquido", "liso", "lista", "litera", "litio", "litro", "llaga", "llama", "llanto", "llave", "llegar", "llenar", "llevar", "llorar", "llover", "lluvia", "lobo", "loción", "loco", "locura", "lógica", "logro", "lombriz", "lomo", "lonja", "lote", "lucha", "lucir", "lugar", "lujo", "luna", "lunes", "lupa", "lustro", "luto", "luz", "maceta", "macho", "madera", "madre", "maduro", "maestro", "mafia", "magia", "mago", "maíz", "maldad", "maleta", "malla", "malo", "mamá", "mambo", "mamut", "manco", "mando", "manejar", "manga", "maniquí", "manjar", "mano", "manso", "manta", "mañana", "mapa", "máquina", "mar", "marco", "marea", "marfil", "margen", "marido", "mármol", "marrón", "martes", "marzo", "masa", "máscara", "masivo", "matar", "materia", "matiz", "matriz", "máximo", "mayor", "mazorca", "mecha", "medalla", "medio", "médula", "mejilla", "mejor", "melena", "melón", "memoria", "menor", "mensaje", "mente", "menú", "mercado", "merengue", "mérito", "mes", "mesón", "meta", "meter", "método", "metro", "mezcla", "miedo", "miel", "miembro", "miga", "mil", "milagro", "militar", "millón", "mimo", "mina", "minero", "mínimo", "minuto", "miope", "mirar", "misa", "miseria", "misil", "mismo", "mitad", "mito", "mochila", "moción", "moda", "modelo", "moho", "mojar", "molde", "moler", "molino", "momento", "momia", "monarca", "moneda", "monja", "monto", "moño", "morada", "morder", "moreno", "morir", "morro", "morsa", "mortal", "mosca", "mostrar", "motivo", "mover", "móvil", "mozo", "mucho", "mudar", "mueble", "muela", "muerte", "muestra", "mugre", "mujer", "mula", "muleta", "multa", "mundo", "muñeca", "mural", "muro", "músculo", "museo", "musgo", "música", "muslo", "nácar", "nación", "nadar", "naipe", "naranja", "nariz", "narrar", "nasal", "natal", "nativo", "natural", "náusea", "naval", "nave", "navidad", "necio", "néctar", "negar", "negocio", "negro", "neón", "nervio", "neto", "neutro", "nevar", "nevera", "nicho", "nido", "niebla", "nieto", "niñez", "niño", "nítido", "nivel", "nobleza", "noche", "nómina", "noria", "norma", "norte", "nota", "noticia", "novato", "novela", "novio", "nube", "nuca", "núcleo", "nudillo", "nudo", "nuera", "nueve", "nuez", "nulo", "número", "nutria", "oasis", "obeso", "obispo", "objeto", "obra", "obrero", "observar", "obtener", "obvio", "oca", "ocaso", "océano", "ochenta", "ocho", "ocio", "ocre", "octavo", "octubre", "oculto", "ocupar", "ocurrir", "odiar", "odio", "odisea", "oeste", "ofensa", "oferta", "oficio", "ofrecer", "ogro", "oído", "oír", "ojo", "ola", "oleada", "olfato", "olivo", "olla", "olmo", "olor", "olvido", "ombligo", "onda", "onza", "opaco", "opción", "ópera", "opinar", "oponer", "optar", "óptica", "opuesto", "oración", "orador", "oral", "órbita", "orca", "orden", "oreja", "órgano", "orgía", "orgullo", "oriente", "origen", "orilla", "oro", "orquesta", "oruga", "osadía", "oscuro", "osezno", "oso", "ostra", "otoño", "otro", "oveja", "óvulo", "óxido", "oxígeno", "oyente", "ozono", "pacto", "padre", "paella", "página", "pago", "país", "pájaro", "palabra", "palco", "paleta", "pálido", "palma", "paloma", "palpar", "pan", "panal", "pánico", "pantera", "pañuelo", "papá", "papel", "papilla", "paquete", "parar", "parcela", "pared", "parir", "paro", "párpado", "parque", "párrafo", "parte", "pasar", "paseo", "pasión", "paso", "pasta", "pata", "patio", "patria", "pausa", "pauta", "pavo", "payaso", "peatón", "pecado", "pecera", "pecho", "pedal", "pedir", "pegar", "peine", "pelar", "peldaño", "pelea", "peligro", "pellejo", "pelo", "peluca", "pena", "pensar", "peñón", "peón", "peor", "pepino", "pequeño", "pera", "percha", "perder", "pereza", "perfil", "perico", "perla", "permiso", "perro", "persona", "pesa", "pesca", "pésimo", "pestaña", "pétalo", "petróleo", "pez", "pezuña", "picar", "pichón", "pie", "piedra", "pierna", "pieza", "pijama", "pilar", "piloto", "pimienta", "pino", "pintor", "pinza", "piña", "piojo", "pipa", "pirata", "pisar", "piscina", "piso", "pista", "pitón", "pizca", "placa", "plan", "plata", "playa", "plaza", "pleito", "pleno", "plomo", "pluma", "plural", "pobre", "poco", "poder", "podio", "poema", "poesía", "poeta", "polen", "policía", "pollo", "polvo", "pomada", "pomelo", "pomo", "pompa", "poner", "porción", "portal", "posada", "poseer", "posible", "poste", "potencia", "potro", "pozo", "prado", "precoz", "pregunta", "premio", "prensa", "preso", "previo", "primo", "príncipe", "prisión", "privar", "proa", "probar", "proceso", "producto", "proeza", "profesor", "programa", "prole", "promesa", "pronto", "propio", "próximo", "prueba", "público", "puchero", "pudor", "pueblo", "puerta", "puesto", "pulga", "pulir", "pulmón", "pulpo", "pulso", "puma", "punto", "puñal", "puño", "pupa", "pupila", "puré", "quedar", "queja", "quemar", "querer", "queso", "quieto", "química", "quince", "quitar", "rábano", "rabia", "rabo", "ración", "radical", "raíz", "rama", "rampa", "rancho", "rango", "rapaz", "rápido", "rapto", "rasgo", "raspa", "rato", "rayo", "raza", "razón", "reacción", "realidad", "rebaño", "rebote", "recaer", "receta", "rechazo", "recoger", "recreo", "recto", "recurso", "red", "redondo", "reducir", "reflejo", "reforma", "refrán", "refugio", "regalo", "regir", "regla", "regreso", "rehén", "reino", "reír", "reja", "relato", "relevo", "relieve", "relleno", "reloj", "remar", "remedio", "remo", "rencor", "rendir", "renta", "reparto", "repetir", "reposo", "reptil", "res", "rescate", "resina", "respeto", "resto", "resumen", "retiro", "retorno", "retrato", "reunir", "revés", "revista", "rey", "rezar", "rico", "riego", "rienda", "riesgo", "rifa", "rígido", "rigor", "rincón", "riñón", "río", "riqueza", "risa", "ritmo", "rito", "rizo", "roble", "roce", "rociar", "rodar", "rodeo", "rodilla", "roer", "rojizo", "rojo", "romero", "romper", "ron", "ronco", "ronda", "ropa", "ropero", "rosa", "rosca", "rostro", "rotar", "rubí", "rubor", "rudo", "rueda", "rugir", "ruido", "ruina", "ruleta", "rulo", "rumbo", "rumor", "ruptura", "ruta", "rutina", "sábado", "saber", "sabio", "sable", "sacar", "sagaz", "sagrado", "sala", "saldo", "salero", "salir", "salmón", "salón", "salsa", "salto", "salud", "salvar", "samba", "sanción", "sandía", "sanear", "sangre", "sanidad", "sano", "santo", "sapo", "saque", "sardina", "sartén", "sastre", "satán", "sauna", "saxofón", "sección", "seco", "secreto", "secta", "sed", "seguir", "seis", "sello", "selva", "semana", "semilla", "senda", "sensor", "señal", "señor", "separar", "sepia", "sequía", "ser", "serie", "sermón", "servir", "sesenta", "sesión", "seta", "setenta", "severo", "sexo", "sexto", "sidra", "siesta", "siete", "siglo", "signo", "sílaba", "silbar", "silencio", "silla", "símbolo", "simio", "sirena", "sistema", "sitio", "situar", "sobre", "socio", "sodio", "sol", "solapa", "soldado", "soledad", "sólido", "soltar", "solución", "sombra", "sondeo", "sonido", "sonoro", "sonrisa", "sopa", "soplar", "soporte", "sordo", "sorpresa", "sorteo", "sostén", "sótano", "suave", "subir", "suceso", "sudor", "suegra", "suelo", "sueño", "suerte", "sufrir", "sujeto", "sultán", "sumar", "superar", "suplir", "suponer", "supremo", "sur", "surco", "sureño", "surgir", "susto", "sutil", "tabaco", "tabique", "tabla", "tabú", "taco", "tacto", "tajo", "talar", "talco", "talento", "talla", "talón", "tamaño", "tambor", "tango", "tanque", "tapa", "tapete", "tapia", "tapón", "taquilla", "tarde", "tarea", "tarifa", "tarjeta", "tarot", "tarro", "tarta", "tatuaje", "tauro", "taza", "tazón", "teatro", "techo", "tecla", "técnica", "tejado", "tejer", "tejido", "tela", "teléfono", "tema", "temor", "templo", "tenaz", "tender", "tener", "tenis", "tenso", "teoría", "terapia", "terco", "término", "ternura", "terror", "tesis", "tesoro", "testigo", "tetera", "texto", "tez", "tibio", "tiburón", "tiempo", "tienda", "tierra", "tieso", "tigre", "tijera", "tilde", "timbre", "tímido", "timo", "tinta", "tío", "típico", "tipo", "tira", "tirón", "titán", "títere", "título", "tiza", "toalla", "tobillo", "tocar", "tocino", "todo", "toga", "toldo", "tomar", "tono", "tonto", "topar", "tope", "toque", "tórax", "torero", "tormenta", "torneo", "toro", "torpedo", "torre", "torso", "tortuga", "tos", "tosco", "toser", "tóxico", "trabajo", "tractor", "traer", "tráfico", "trago", "traje", "tramo", "trance", "trato", "trauma", "trazar", "trébol", "tregua", "treinta", "tren", "trepar", "tres", "tribu", "trigo", "tripa", "triste", "triunfo", "trofeo", "trompa", "tronco", "tropa", "trote", "trozo", "truco", "trueno", "trufa", "tubería", "tubo", "tuerto", "tumba", "tumor", "túnel", "túnica", "turbina", "turismo", "turno", "tutor", "ubicar", "úlcera", "umbral", "unidad", "unir", "universo", "uno", "untar", "uña", "urbano", "urbe", "urgente", "urna", "usar", "usuario", "útil", "utopía", "uva", "vaca", "vacío", "vacuna", "vagar", "vago", "vaina", "vajilla", "vale", "válido", "valle", "valor", "válvula", "vampiro", "vara", "variar", "varón", "vaso", "vecino", "vector", "vehículo", "veinte", "vejez", "vela", "velero", "veloz", "vena", "vencer", "venda", "veneno", "vengar", "venir", "venta", "venus", "ver", "verano", "verbo", "verde", "vereda", "verja", "verso", "verter", "vía", "viaje", "vibrar", "vicio", "víctima", "vida", "vídeo", "vidrio", "viejo", "viernes", "vigor", "vil", "villa", "vinagre", "vino", "viñedo", "violín", "viral", "virgo", "virtud", "visor", "víspera", "vista", "vitamina", "viudo", "vivaz", "vivero", "vivir", "vivo", "volcán", "volumen", "volver", "voraz", "votar", "voto", "voz", "vuelo", "vulgar", "yacer", "yate", "yegua", "yema", "yerno", "yeso", "yodo", "yoga", "yogur", "zafiro", "zanja", "zapato", "zarza", "zona", "zorro", "zumo", "zurdo"];

var spanish$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': spanish
});

var japanese = ["あいこくしん", "あいさつ", "あいだ", "あおぞら", "あかちゃん", "あきる", "あけがた", "あける", "あこがれる", "あさい", "あさひ", "あしあと", "あじわう", "あずかる", "あずき", "あそぶ", "あたえる", "あたためる", "あたりまえ", "あたる", "あつい", "あつかう", "あっしゅく", "あつまり", "あつめる", "あてな", "あてはまる", "あひる", "あぶら", "あぶる", "あふれる", "あまい", "あまど", "あまやかす", "あまり", "あみもの", "あめりか", "あやまる", "あゆむ", "あらいぐま", "あらし", "あらすじ", "あらためる", "あらゆる", "あらわす", "ありがとう", "あわせる", "あわてる", "あんい", "あんがい", "あんこ", "あんぜん", "あんてい", "あんない", "あんまり", "いいだす", "いおん", "いがい", "いがく", "いきおい", "いきなり", "いきもの", "いきる", "いくじ", "いくぶん", "いけばな", "いけん", "いこう", "いこく", "いこつ", "いさましい", "いさん", "いしき", "いじゅう", "いじょう", "いじわる", "いずみ", "いずれ", "いせい", "いせえび", "いせかい", "いせき", "いぜん", "いそうろう", "いそがしい", "いだい", "いだく", "いたずら", "いたみ", "いたりあ", "いちおう", "いちじ", "いちど", "いちば", "いちぶ", "いちりゅう", "いつか", "いっしゅん", "いっせい", "いっそう", "いったん", "いっち", "いってい", "いっぽう", "いてざ", "いてん", "いどう", "いとこ", "いない", "いなか", "いねむり", "いのち", "いのる", "いはつ", "いばる", "いはん", "いびき", "いひん", "いふく", "いへん", "いほう", "いみん", "いもうと", "いもたれ", "いもり", "いやがる", "いやす", "いよかん", "いよく", "いらい", "いらすと", "いりぐち", "いりょう", "いれい", "いれもの", "いれる", "いろえんぴつ", "いわい", "いわう", "いわかん", "いわば", "いわゆる", "いんげんまめ", "いんさつ", "いんしょう", "いんよう", "うえき", "うえる", "うおざ", "うがい", "うかぶ", "うかべる", "うきわ", "うくらいな", "うくれれ", "うけたまわる", "うけつけ", "うけとる", "うけもつ", "うける", "うごかす", "うごく", "うこん", "うさぎ", "うしなう", "うしろがみ", "うすい", "うすぎ", "うすぐらい", "うすめる", "うせつ", "うちあわせ", "うちがわ", "うちき", "うちゅう", "うっかり", "うつくしい", "うったえる", "うつる", "うどん", "うなぎ", "うなじ", "うなずく", "うなる", "うねる", "うのう", "うぶげ", "うぶごえ", "うまれる", "うめる", "うもう", "うやまう", "うよく", "うらがえす", "うらぐち", "うらない", "うりあげ", "うりきれ", "うるさい", "うれしい", "うれゆき", "うれる", "うろこ", "うわき", "うわさ", "うんこう", "うんちん", "うんてん", "うんどう", "えいえん", "えいが", "えいきょう", "えいご", "えいせい", "えいぶん", "えいよう", "えいわ", "えおり", "えがお", "えがく", "えきたい", "えくせる", "えしゃく", "えすて", "えつらん", "えのぐ", "えほうまき", "えほん", "えまき", "えもじ", "えもの", "えらい", "えらぶ", "えりあ", "えんえん", "えんかい", "えんぎ", "えんげき", "えんしゅう", "えんぜつ", "えんそく", "えんちょう", "えんとつ", "おいかける", "おいこす", "おいしい", "おいつく", "おうえん", "おうさま", "おうじ", "おうせつ", "おうたい", "おうふく", "おうべい", "おうよう", "おえる", "おおい", "おおう", "おおどおり", "おおや", "おおよそ", "おかえり", "おかず", "おがむ", "おかわり", "おぎなう", "おきる", "おくさま", "おくじょう", "おくりがな", "おくる", "おくれる", "おこす", "おこなう", "おこる", "おさえる", "おさない", "おさめる", "おしいれ", "おしえる", "おじぎ", "おじさん", "おしゃれ", "おそらく", "おそわる", "おたがい", "おたく", "おだやか", "おちつく", "おっと", "おつり", "おでかけ", "おとしもの", "おとなしい", "おどり", "おどろかす", "おばさん", "おまいり", "おめでとう", "おもいで", "おもう", "おもたい", "おもちゃ", "おやつ", "おやゆび", "およぼす", "おらんだ", "おろす", "おんがく", "おんけい", "おんしゃ", "おんせん", "おんだん", "おんちゅう", "おんどけい", "かあつ", "かいが", "がいき", "がいけん", "がいこう", "かいさつ", "かいしゃ", "かいすいよく", "かいぜん", "かいぞうど", "かいつう", "かいてん", "かいとう", "かいふく", "がいへき", "かいほう", "かいよう", "がいらい", "かいわ", "かえる", "かおり", "かかえる", "かがく", "かがし", "かがみ", "かくご", "かくとく", "かざる", "がぞう", "かたい", "かたち", "がちょう", "がっきゅう", "がっこう", "がっさん", "がっしょう", "かなざわし", "かのう", "がはく", "かぶか", "かほう", "かほご", "かまう", "かまぼこ", "かめれおん", "かゆい", "かようび", "からい", "かるい", "かろう", "かわく", "かわら", "がんか", "かんけい", "かんこう", "かんしゃ", "かんそう", "かんたん", "かんち", "がんばる", "きあい", "きあつ", "きいろ", "ぎいん", "きうい", "きうん", "きえる", "きおう", "きおく", "きおち", "きおん", "きかい", "きかく", "きかんしゃ", "ききて", "きくばり", "きくらげ", "きけんせい", "きこう", "きこえる", "きこく", "きさい", "きさく", "きさま", "きさらぎ", "ぎじかがく", "ぎしき", "ぎじたいけん", "ぎじにってい", "ぎじゅつしゃ", "きすう", "きせい", "きせき", "きせつ", "きそう", "きぞく", "きぞん", "きたえる", "きちょう", "きつえん", "ぎっちり", "きつつき", "きつね", "きてい", "きどう", "きどく", "きない", "きなが", "きなこ", "きぬごし", "きねん", "きのう", "きのした", "きはく", "きびしい", "きひん", "きふく", "きぶん", "きぼう", "きほん", "きまる", "きみつ", "きむずかしい", "きめる", "きもだめし", "きもち", "きもの", "きゃく", "きやく", "ぎゅうにく", "きよう", "きょうりゅう", "きらい", "きらく", "きりん", "きれい", "きれつ", "きろく", "ぎろん", "きわめる", "ぎんいろ", "きんかくじ", "きんじょ", "きんようび", "ぐあい", "くいず", "くうかん", "くうき", "くうぐん", "くうこう", "ぐうせい", "くうそう", "ぐうたら", "くうふく", "くうぼ", "くかん", "くきょう", "くげん", "ぐこう", "くさい", "くさき", "くさばな", "くさる", "くしゃみ", "くしょう", "くすのき", "くすりゆび", "くせげ", "くせん", "ぐたいてき", "くださる", "くたびれる", "くちこみ", "くちさき", "くつした", "ぐっすり", "くつろぐ", "くとうてん", "くどく", "くなん", "くねくね", "くのう", "くふう", "くみあわせ", "くみたてる", "くめる", "くやくしょ", "くらす", "くらべる", "くるま", "くれる", "くろう", "くわしい", "ぐんかん", "ぐんしょく", "ぐんたい", "ぐんて", "けあな", "けいかく", "けいけん", "けいこ", "けいさつ", "げいじゅつ", "けいたい", "げいのうじん", "けいれき", "けいろ", "けおとす", "けおりもの", "げきか", "げきげん", "げきだん", "げきちん", "げきとつ", "げきは", "げきやく", "げこう", "げこくじょう", "げざい", "けさき", "げざん", "けしき", "けしごむ", "けしょう", "げすと", "けたば", "けちゃっぷ", "けちらす", "けつあつ", "けつい", "けつえき", "けっこん", "けつじょ", "けっせき", "けってい", "けつまつ", "げつようび", "げつれい", "けつろん", "げどく", "けとばす", "けとる", "けなげ", "けなす", "けなみ", "けぬき", "げねつ", "けねん", "けはい", "げひん", "けぶかい", "げぼく", "けまり", "けみかる", "けむし", "けむり", "けもの", "けらい", "けろけろ", "けわしい", "けんい", "けんえつ", "けんお", "けんか", "げんき", "けんげん", "けんこう", "けんさく", "けんしゅう", "けんすう", "げんそう", "けんちく", "けんてい", "けんとう", "けんない", "けんにん", "げんぶつ", "けんま", "けんみん", "けんめい", "けんらん", "けんり", "こあくま", "こいぬ", "こいびと", "ごうい", "こうえん", "こうおん", "こうかん", "ごうきゅう", "ごうけい", "こうこう", "こうさい", "こうじ", "こうすい", "ごうせい", "こうそく", "こうたい", "こうちゃ", "こうつう", "こうてい", "こうどう", "こうない", "こうはい", "ごうほう", "ごうまん", "こうもく", "こうりつ", "こえる", "こおり", "ごかい", "ごがつ", "ごかん", "こくご", "こくさい", "こくとう", "こくない", "こくはく", "こぐま", "こけい", "こける", "ここのか", "こころ", "こさめ", "こしつ", "こすう", "こせい", "こせき", "こぜん", "こそだて", "こたい", "こたえる", "こたつ", "こちょう", "こっか", "こつこつ", "こつばん", "こつぶ", "こてい", "こてん", "ことがら", "ことし", "ことば", "ことり", "こなごな", "こねこね", "このまま", "このみ", "このよ", "ごはん", "こひつじ", "こふう", "こふん", "こぼれる", "ごまあぶら", "こまかい", "ごますり", "こまつな", "こまる", "こむぎこ", "こもじ", "こもち", "こもの", "こもん", "こやく", "こやま", "こゆう", "こゆび", "こよい", "こよう", "こりる", "これくしょん", "ころっけ", "こわもて", "こわれる", "こんいん", "こんかい", "こんき", "こんしゅう", "こんすい", "こんだて", "こんとん", "こんなん", "こんびに", "こんぽん", "こんまけ", "こんや", "こんれい", "こんわく", "ざいえき", "さいかい", "さいきん", "ざいげん", "ざいこ", "さいしょ", "さいせい", "ざいたく", "ざいちゅう", "さいてき", "ざいりょう", "さうな", "さかいし", "さがす", "さかな", "さかみち", "さがる", "さぎょう", "さくし", "さくひん", "さくら", "さこく", "さこつ", "さずかる", "ざせき", "さたん", "さつえい", "ざつおん", "ざっか", "ざつがく", "さっきょく", "ざっし", "さつじん", "ざっそう", "さつたば", "さつまいも", "さてい", "さといも", "さとう", "さとおや", "さとし", "さとる", "さのう", "さばく", "さびしい", "さべつ", "さほう", "さほど", "さます", "さみしい", "さみだれ", "さむけ", "さめる", "さやえんどう", "さゆう", "さよう", "さよく", "さらだ", "ざるそば", "さわやか", "さわる", "さんいん", "さんか", "さんきゃく", "さんこう", "さんさい", "ざんしょ", "さんすう", "さんせい", "さんそ", "さんち", "さんま", "さんみ", "さんらん", "しあい", "しあげ", "しあさって", "しあわせ", "しいく", "しいん", "しうち", "しえい", "しおけ", "しかい", "しかく", "じかん", "しごと", "しすう", "じだい", "したうけ", "したぎ", "したて", "したみ", "しちょう", "しちりん", "しっかり", "しつじ", "しつもん", "してい", "してき", "してつ", "じてん", "じどう", "しなぎれ", "しなもの", "しなん", "しねま", "しねん", "しのぐ", "しのぶ", "しはい", "しばかり", "しはつ", "しはらい", "しはん", "しひょう", "しふく", "じぶん", "しへい", "しほう", "しほん", "しまう", "しまる", "しみん", "しむける", "じむしょ", "しめい", "しめる", "しもん", "しゃいん", "しゃうん", "しゃおん", "じゃがいも", "しやくしょ", "しゃくほう", "しゃけん", "しゃこ", "しゃざい", "しゃしん", "しゃせん", "しゃそう", "しゃたい", "しゃちょう", "しゃっきん", "じゃま", "しゃりん", "しゃれい", "じゆう", "じゅうしょ", "しゅくはく", "じゅしん", "しゅっせき", "しゅみ", "しゅらば", "じゅんばん", "しょうかい", "しょくたく", "しょっけん", "しょどう", "しょもつ", "しらせる", "しらべる", "しんか", "しんこう", "じんじゃ", "しんせいじ", "しんちく", "しんりん", "すあげ", "すあし", "すあな", "ずあん", "すいえい", "すいか", "すいとう", "ずいぶん", "すいようび", "すうがく", "すうじつ", "すうせん", "すおどり", "すきま", "すくう", "すくない", "すける", "すごい", "すこし", "ずさん", "すずしい", "すすむ", "すすめる", "すっかり", "ずっしり", "ずっと", "すてき", "すてる", "すねる", "すのこ", "すはだ", "すばらしい", "ずひょう", "ずぶぬれ", "すぶり", "すふれ", "すべて", "すべる", "ずほう", "すぼん", "すまい", "すめし", "すもう", "すやき", "すらすら", "するめ", "すれちがう", "すろっと", "すわる", "すんぜん", "すんぽう", "せあぶら", "せいかつ", "せいげん", "せいじ", "せいよう", "せおう", "せかいかん", "せきにん", "せきむ", "せきゆ", "せきらんうん", "せけん", "せこう", "せすじ", "せたい", "せたけ", "せっかく", "せっきゃく", "ぜっく", "せっけん", "せっこつ", "せっさたくま", "せつぞく", "せつだん", "せつでん", "せっぱん", "せつび", "せつぶん", "せつめい", "せつりつ", "せなか", "せのび", "せはば", "せびろ", "せぼね", "せまい", "せまる", "せめる", "せもたれ", "せりふ", "ぜんあく", "せんい", "せんえい", "せんか", "せんきょ", "せんく", "せんげん", "ぜんご", "せんさい", "せんしゅ", "せんすい", "せんせい", "せんぞ", "せんたく", "せんちょう", "せんてい", "せんとう", "せんぬき", "せんねん", "せんぱい", "ぜんぶ", "ぜんぽう", "せんむ", "せんめんじょ", "せんもん", "せんやく", "せんゆう", "せんよう", "ぜんら", "ぜんりゃく", "せんれい", "せんろ", "そあく", "そいとげる", "そいね", "そうがんきょう", "そうき", "そうご", "そうしん", "そうだん", "そうなん", "そうび", "そうめん", "そうり", "そえもの", "そえん", "そがい", "そげき", "そこう", "そこそこ", "そざい", "そしな", "そせい", "そせん", "そそぐ", "そだてる", "そつう", "そつえん", "そっかん", "そつぎょう", "そっけつ", "そっこう", "そっせん", "そっと", "そとがわ", "そとづら", "そなえる", "そなた", "そふぼ", "そぼく", "そぼろ", "そまつ", "そまる", "そむく", "そむりえ", "そめる", "そもそも", "そよかぜ", "そらまめ", "そろう", "そんかい", "そんけい", "そんざい", "そんしつ", "そんぞく", "そんちょう", "ぞんび", "ぞんぶん", "そんみん", "たあい", "たいいん", "たいうん", "たいえき", "たいおう", "だいがく", "たいき", "たいぐう", "たいけん", "たいこ", "たいざい", "だいじょうぶ", "だいすき", "たいせつ", "たいそう", "だいたい", "たいちょう", "たいてい", "だいどころ", "たいない", "たいねつ", "たいのう", "たいはん", "だいひょう", "たいふう", "たいへん", "たいほ", "たいまつばな", "たいみんぐ", "たいむ", "たいめん", "たいやき", "たいよう", "たいら", "たいりょく", "たいる", "たいわん", "たうえ", "たえる", "たおす", "たおる", "たおれる", "たかい", "たかね", "たきび", "たくさん", "たこく", "たこやき", "たさい", "たしざん", "だじゃれ", "たすける", "たずさわる", "たそがれ", "たたかう", "たたく", "ただしい", "たたみ", "たちばな", "だっかい", "だっきゃく", "だっこ", "だっしゅつ", "だったい", "たてる", "たとえる", "たなばた", "たにん", "たぬき", "たのしみ", "たはつ", "たぶん", "たべる", "たぼう", "たまご", "たまる", "だむる", "ためいき", "ためす", "ためる", "たもつ", "たやすい", "たよる", "たらす", "たりきほんがん", "たりょう", "たりる", "たると", "たれる", "たれんと", "たろっと", "たわむれる", "だんあつ", "たんい", "たんおん", "たんか", "たんき", "たんけん", "たんご", "たんさん", "たんじょうび", "だんせい", "たんそく", "たんたい", "だんち", "たんてい", "たんとう", "だんな", "たんにん", "だんねつ", "たんのう", "たんぴん", "だんぼう", "たんまつ", "たんめい", "だんれつ", "だんろ", "だんわ", "ちあい", "ちあん", "ちいき", "ちいさい", "ちえん", "ちかい", "ちから", "ちきゅう", "ちきん", "ちけいず", "ちけん", "ちこく", "ちさい", "ちしき", "ちしりょう", "ちせい", "ちそう", "ちたい", "ちたん", "ちちおや", "ちつじょ", "ちてき", "ちてん", "ちぬき", "ちぬり", "ちのう", "ちひょう", "ちへいせん", "ちほう", "ちまた", "ちみつ", "ちみどろ", "ちめいど", "ちゃんこなべ", "ちゅうい", "ちゆりょく", "ちょうし", "ちょさくけん", "ちらし", "ちらみ", "ちりがみ", "ちりょう", "ちるど", "ちわわ", "ちんたい", "ちんもく", "ついか", "ついたち", "つうか", "つうじょう", "つうはん", "つうわ", "つかう", "つかれる", "つくね", "つくる", "つけね", "つける", "つごう", "つたえる", "つづく", "つつじ", "つつむ", "つとめる", "つながる", "つなみ", "つねづね", "つのる", "つぶす", "つまらない", "つまる", "つみき", "つめたい", "つもり", "つもる", "つよい", "つるぼ", "つるみく", "つわもの", "つわり", "てあし", "てあて", "てあみ", "ていおん", "ていか", "ていき", "ていけい", "ていこく", "ていさつ", "ていし", "ていせい", "ていたい", "ていど", "ていねい", "ていひょう", "ていへん", "ていぼう", "てうち", "ておくれ", "てきとう", "てくび", "でこぼこ", "てさぎょう", "てさげ", "てすり", "てそう", "てちがい", "てちょう", "てつがく", "てつづき", "でっぱ", "てつぼう", "てつや", "でぬかえ", "てぬき", "てぬぐい", "てのひら", "てはい", "てぶくろ", "てふだ", "てほどき", "てほん", "てまえ", "てまきずし", "てみじか", "てみやげ", "てらす", "てれび", "てわけ", "てわたし", "でんあつ", "てんいん", "てんかい", "てんき", "てんぐ", "てんけん", "てんごく", "てんさい", "てんし", "てんすう", "でんち", "てんてき", "てんとう", "てんない", "てんぷら", "てんぼうだい", "てんめつ", "てんらんかい", "でんりょく", "でんわ", "どあい", "といれ", "どうかん", "とうきゅう", "どうぐ", "とうし", "とうむぎ", "とおい", "とおか", "とおく", "とおす", "とおる", "とかい", "とかす", "ときおり", "ときどき", "とくい", "とくしゅう", "とくてん", "とくに", "とくべつ", "とけい", "とける", "とこや", "とさか", "としょかん", "とそう", "とたん", "とちゅう", "とっきゅう", "とっくん", "とつぜん", "とつにゅう", "とどける", "ととのえる", "とない", "となえる", "となり", "とのさま", "とばす", "どぶがわ", "とほう", "とまる", "とめる", "ともだち", "ともる", "どようび", "とらえる", "とんかつ", "どんぶり", "ないかく", "ないこう", "ないしょ", "ないす", "ないせん", "ないそう", "なおす", "ながい", "なくす", "なげる", "なこうど", "なさけ", "なたでここ", "なっとう", "なつやすみ", "ななおし", "なにごと", "なにもの", "なにわ", "なのか", "なふだ", "なまいき", "なまえ", "なまみ", "なみだ", "なめらか", "なめる", "なやむ", "ならう", "ならび", "ならぶ", "なれる", "なわとび", "なわばり", "にあう", "にいがた", "にうけ", "におい", "にかい", "にがて", "にきび", "にくしみ", "にくまん", "にげる", "にさんかたんそ", "にしき", "にせもの", "にちじょう", "にちようび", "にっか", "にっき", "にっけい", "にっこう", "にっさん", "にっしょく", "にっすう", "にっせき", "にってい", "になう", "にほん", "にまめ", "にもつ", "にやり", "にゅういん", "にりんしゃ", "にわとり", "にんい", "にんか", "にんき", "にんげん", "にんしき", "にんずう", "にんそう", "にんたい", "にんち", "にんてい", "にんにく", "にんぷ", "にんまり", "にんむ", "にんめい", "にんよう", "ぬいくぎ", "ぬかす", "ぬぐいとる", "ぬぐう", "ぬくもり", "ぬすむ", "ぬまえび", "ぬめり", "ぬらす", "ぬんちゃく", "ねあげ", "ねいき", "ねいる", "ねいろ", "ねぐせ", "ねくたい", "ねくら", "ねこぜ", "ねこむ", "ねさげ", "ねすごす", "ねそべる", "ねだん", "ねつい", "ねっしん", "ねつぞう", "ねったいぎょ", "ねぶそく", "ねふだ", "ねぼう", "ねほりはほり", "ねまき", "ねまわし", "ねみみ", "ねむい", "ねむたい", "ねもと", "ねらう", "ねわざ", "ねんいり", "ねんおし", "ねんかん", "ねんきん", "ねんぐ", "ねんざ", "ねんし", "ねんちゃく", "ねんど", "ねんぴ", "ねんぶつ", "ねんまつ", "ねんりょう", "ねんれい", "のいず", "のおづま", "のがす", "のきなみ", "のこぎり", "のこす", "のこる", "のせる", "のぞく", "のぞむ", "のたまう", "のちほど", "のっく", "のばす", "のはら", "のべる", "のぼる", "のみもの", "のやま", "のらいぬ", "のらねこ", "のりもの", "のりゆき", "のれん", "のんき", "ばあい", "はあく", "ばあさん", "ばいか", "ばいく", "はいけん", "はいご", "はいしん", "はいすい", "はいせん", "はいそう", "はいち", "ばいばい", "はいれつ", "はえる", "はおる", "はかい", "ばかり", "はかる", "はくしゅ", "はけん", "はこぶ", "はさみ", "はさん", "はしご", "ばしょ", "はしる", "はせる", "ぱそこん", "はそん", "はたん", "はちみつ", "はつおん", "はっかく", "はづき", "はっきり", "はっくつ", "はっけん", "はっこう", "はっさん", "はっしん", "はったつ", "はっちゅう", "はってん", "はっぴょう", "はっぽう", "はなす", "はなび", "はにかむ", "はぶらし", "はみがき", "はむかう", "はめつ", "はやい", "はやし", "はらう", "はろうぃん", "はわい", "はんい", "はんえい", "はんおん", "はんかく", "はんきょう", "ばんぐみ", "はんこ", "はんしゃ", "はんすう", "はんだん", "ぱんち", "ぱんつ", "はんてい", "はんとし", "はんのう", "はんぱ", "はんぶん", "はんぺん", "はんぼうき", "はんめい", "はんらん", "はんろん", "ひいき", "ひうん", "ひえる", "ひかく", "ひかり", "ひかる", "ひかん", "ひくい", "ひけつ", "ひこうき", "ひこく", "ひさい", "ひさしぶり", "ひさん", "びじゅつかん", "ひしょ", "ひそか", "ひそむ", "ひたむき", "ひだり", "ひたる", "ひつぎ", "ひっこし", "ひっし", "ひつじゅひん", "ひっす", "ひつぜん", "ぴったり", "ぴっちり", "ひつよう", "ひてい", "ひとごみ", "ひなまつり", "ひなん", "ひねる", "ひはん", "ひびく", "ひひょう", "ひほう", "ひまわり", "ひまん", "ひみつ", "ひめい", "ひめじし", "ひやけ", "ひやす", "ひよう", "びょうき", "ひらがな", "ひらく", "ひりつ", "ひりょう", "ひるま", "ひるやすみ", "ひれい", "ひろい", "ひろう", "ひろき", "ひろゆき", "ひんかく", "ひんけつ", "ひんこん", "ひんしゅ", "ひんそう", "ぴんち", "ひんぱん", "びんぼう", "ふあん", "ふいうち", "ふうけい", "ふうせん", "ぷうたろう", "ふうとう", "ふうふ", "ふえる", "ふおん", "ふかい", "ふきん", "ふくざつ", "ふくぶくろ", "ふこう", "ふさい", "ふしぎ", "ふじみ", "ふすま", "ふせい", "ふせぐ", "ふそく", "ぶたにく", "ふたん", "ふちょう", "ふつう", "ふつか", "ふっかつ", "ふっき", "ふっこく", "ぶどう", "ふとる", "ふとん", "ふのう", "ふはい", "ふひょう", "ふへん", "ふまん", "ふみん", "ふめつ", "ふめん", "ふよう", "ふりこ", "ふりる", "ふるい", "ふんいき", "ぶんがく", "ぶんぐ", "ふんしつ", "ぶんせき", "ふんそう", "ぶんぽう", "へいあん", "へいおん", "へいがい", "へいき", "へいげん", "へいこう", "へいさ", "へいしゃ", "へいせつ", "へいそ", "へいたく", "へいてん", "へいねつ", "へいわ", "へきが", "へこむ", "べにいろ", "べにしょうが", "へらす", "へんかん", "べんきょう", "べんごし", "へんさい", "へんたい", "べんり", "ほあん", "ほいく", "ぼうぎょ", "ほうこく", "ほうそう", "ほうほう", "ほうもん", "ほうりつ", "ほえる", "ほおん", "ほかん", "ほきょう", "ぼきん", "ほくろ", "ほけつ", "ほけん", "ほこう", "ほこる", "ほしい", "ほしつ", "ほしゅ", "ほしょう", "ほせい", "ほそい", "ほそく", "ほたて", "ほたる", "ぽちぶくろ", "ほっきょく", "ほっさ", "ほったん", "ほとんど", "ほめる", "ほんい", "ほんき", "ほんけ", "ほんしつ", "ほんやく", "まいにち", "まかい", "まかせる", "まがる", "まける", "まこと", "まさつ", "まじめ", "ますく", "まぜる", "まつり", "まとめ", "まなぶ", "まぬけ", "まねく", "まほう", "まもる", "まゆげ", "まよう", "まろやか", "まわす", "まわり", "まわる", "まんが", "まんきつ", "まんぞく", "まんなか", "みいら", "みうち", "みえる", "みがく", "みかた", "みかん", "みけん", "みこん", "みじかい", "みすい", "みすえる", "みせる", "みっか", "みつかる", "みつける", "みてい", "みとめる", "みなと", "みなみかさい", "みねらる", "みのう", "みのがす", "みほん", "みもと", "みやげ", "みらい", "みりょく", "みわく", "みんか", "みんぞく", "むいか", "むえき", "むえん", "むかい", "むかう", "むかえ", "むかし", "むぎちゃ", "むける", "むげん", "むさぼる", "むしあつい", "むしば", "むじゅん", "むしろ", "むすう", "むすこ", "むすぶ", "むすめ", "むせる", "むせん", "むちゅう", "むなしい", "むのう", "むやみ", "むよう", "むらさき", "むりょう", "むろん", "めいあん", "めいうん", "めいえん", "めいかく", "めいきょく", "めいさい", "めいし", "めいそう", "めいぶつ", "めいれい", "めいわく", "めぐまれる", "めざす", "めした", "めずらしい", "めだつ", "めまい", "めやす", "めんきょ", "めんせき", "めんどう", "もうしあげる", "もうどうけん", "もえる", "もくし", "もくてき", "もくようび", "もちろん", "もどる", "もらう", "もんく", "もんだい", "やおや", "やける", "やさい", "やさしい", "やすい", "やすたろう", "やすみ", "やせる", "やそう", "やたい", "やちん", "やっと", "やっぱり", "やぶる", "やめる", "ややこしい", "やよい", "やわらかい", "ゆうき", "ゆうびんきょく", "ゆうべ", "ゆうめい", "ゆけつ", "ゆしゅつ", "ゆせん", "ゆそう", "ゆたか", "ゆちゃく", "ゆでる", "ゆにゅう", "ゆびわ", "ゆらい", "ゆれる", "ようい", "ようか", "ようきゅう", "ようじ", "ようす", "ようちえん", "よかぜ", "よかん", "よきん", "よくせい", "よくぼう", "よけい", "よごれる", "よさん", "よしゅう", "よそう", "よそく", "よっか", "よてい", "よどがわく", "よねつ", "よやく", "よゆう", "よろこぶ", "よろしい", "らいう", "らくがき", "らくご", "らくさつ", "らくだ", "らしんばん", "らせん", "らぞく", "らたい", "らっか", "られつ", "りえき", "りかい", "りきさく", "りきせつ", "りくぐん", "りくつ", "りけん", "りこう", "りせい", "りそう", "りそく", "りてん", "りねん", "りゆう", "りゅうがく", "りよう", "りょうり", "りょかん", "りょくちゃ", "りょこう", "りりく", "りれき", "りろん", "りんご", "るいけい", "るいさい", "るいじ", "るいせき", "るすばん", "るりがわら", "れいかん", "れいぎ", "れいせい", "れいぞうこ", "れいとう", "れいぼう", "れきし", "れきだい", "れんあい", "れんけい", "れんこん", "れんさい", "れんしゅう", "れんぞく", "れんらく", "ろうか", "ろうご", "ろうじん", "ろうそく", "ろくが", "ろこつ", "ろじうら", "ろしゅつ", "ろせん", "ろてん", "ろめん", "ろれつ", "ろんぎ", "ろんぱ", "ろんぶん", "ろんり", "わかす", "わかめ", "わかやま", "わかれる", "わしつ", "わじまし", "わすれもの", "わらう", "われる"];

var japanese$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': japanese
});

var english = ["abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract", "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid", "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual", "adapt", "add", "addict", "address", "adjust", "admit", "adult", "advance", "advice", "aerobic", "affair", "afford", "afraid", "again", "age", "agent", "agree", "ahead", "aim", "air", "airport", "aisle", "alarm", "album", "alcohol", "alert", "alien", "all", "alley", "allow", "almost", "alone", "alpha", "already", "also", "alter", "always", "amateur", "amazing", "among", "amount", "amused", "analyst", "anchor", "ancient", "anger", "angle", "angry", "animal", "ankle", "announce", "annual", "another", "answer", "antenna", "antique", "anxiety", "any", "apart", "apology", "appear", "apple", "approve", "april", "arch", "arctic", "area", "arena", "argue", "arm", "armed", "armor", "army", "around", "arrange", "arrest", "arrive", "arrow", "art", "artefact", "artist", "artwork", "ask", "aspect", "assault", "asset", "assist", "assume", "asthma", "athlete", "atom", "attack", "attend", "attitude", "attract", "auction", "audit", "august", "aunt", "author", "auto", "autumn", "average", "avocado", "avoid", "awake", "aware", "away", "awesome", "awful", "awkward", "axis", "baby", "bachelor", "bacon", "badge", "bag", "balance", "balcony", "ball", "bamboo", "banana", "banner", "bar", "barely", "bargain", "barrel", "base", "basic", "basket", "battle", "beach", "bean", "beauty", "because", "become", "beef", "before", "begin", "behave", "behind", "believe", "below", "belt", "bench", "benefit", "best", "betray", "better", "between", "beyond", "bicycle", "bid", "bike", "bind", "biology", "bird", "birth", "bitter", "black", "blade", "blame", "blanket", "blast", "bleak", "bless", "blind", "blood", "blossom", "blouse", "blue", "blur", "blush", "board", "boat", "body", "boil", "bomb", "bone", "bonus", "book", "boost", "border", "boring", "borrow", "boss", "bottom", "bounce", "box", "boy", "bracket", "brain", "brand", "brass", "brave", "bread", "breeze", "brick", "bridge", "brief", "bright", "bring", "brisk", "broccoli", "broken", "bronze", "broom", "brother", "brown", "brush", "bubble", "buddy", "budget", "buffalo", "build", "bulb", "bulk", "bullet", "bundle", "bunker", "burden", "burger", "burst", "bus", "business", "busy", "butter", "buyer", "buzz", "cabbage", "cabin", "cable", "cactus", "cage", "cake", "call", "calm", "camera", "camp", "can", "canal", "cancel", "candy", "cannon", "canoe", "canvas", "canyon", "capable", "capital", "captain", "car", "carbon", "card", "cargo", "carpet", "carry", "cart", "case", "cash", "casino", "castle", "casual", "cat", "catalog", "catch", "category", "cattle", "caught", "cause", "caution", "cave", "ceiling", "celery", "cement", "census", "century", "cereal", "certain", "chair", "chalk", "champion", "change", "chaos", "chapter", "charge", "chase", "chat", "cheap", "check", "cheese", "chef", "cherry", "chest", "chicken", "chief", "child", "chimney", "choice", "choose", "chronic", "chuckle", "chunk", "churn", "cigar", "cinnamon", "circle", "citizen", "city", "civil", "claim", "clap", "clarify", "claw", "clay", "clean", "clerk", "clever", "click", "client", "cliff", "climb", "clinic", "clip", "clock", "clog", "close", "cloth", "cloud", "clown", "club", "clump", "cluster", "clutch", "coach", "coast", "coconut", "code", "coffee", "coil", "coin", "collect", "color", "column", "combine", "come", "comfort", "comic", "common", "company", "concert", "conduct", "confirm", "congress", "connect", "consider", "control", "convince", "cook", "cool", "copper", "copy", "coral", "core", "corn", "correct", "cost", "cotton", "couch", "country", "couple", "course", "cousin", "cover", "coyote", "crack", "cradle", "craft", "cram", "crane", "crash", "crater", "crawl", "crazy", "cream", "credit", "creek", "crew", "cricket", "crime", "crisp", "critic", "crop", "cross", "crouch", "crowd", "crucial", "cruel", "cruise", "crumble", "crunch", "crush", "cry", "crystal", "cube", "culture", "cup", "cupboard", "curious", "current", "curtain", "curve", "cushion", "custom", "cute", "cycle", "dad", "damage", "damp", "dance", "danger", "daring", "dash", "daughter", "dawn", "day", "deal", "debate", "debris", "decade", "december", "decide", "decline", "decorate", "decrease", "deer", "defense", "define", "defy", "degree", "delay", "deliver", "demand", "demise", "denial", "dentist", "deny", "depart", "depend", "deposit", "depth", "deputy", "derive", "describe", "desert", "design", "desk", "despair", "destroy", "detail", "detect", "develop", "device", "devote", "diagram", "dial", "diamond", "diary", "dice", "diesel", "diet", "differ", "digital", "dignity", "dilemma", "dinner", "dinosaur", "direct", "dirt", "disagree", "discover", "disease", "dish", "dismiss", "disorder", "display", "distance", "divert", "divide", "divorce", "dizzy", "doctor", "document", "dog", "doll", "dolphin", "domain", "donate", "donkey", "donor", "door", "dose", "double", "dove", "draft", "dragon", "drama", "drastic", "draw", "dream", "dress", "drift", "drill", "drink", "drip", "drive", "drop", "drum", "dry", "duck", "dumb", "dune", "during", "dust", "dutch", "duty", "dwarf", "dynamic", "eager", "eagle", "early", "earn", "earth", "easily", "east", "easy", "echo", "ecology", "economy", "edge", "edit", "educate", "effort", "egg", "eight", "either", "elbow", "elder", "electric", "elegant", "element", "elephant", "elevator", "elite", "else", "embark", "embody", "embrace", "emerge", "emotion", "employ", "empower", "empty", "enable", "enact", "end", "endless", "endorse", "enemy", "energy", "enforce", "engage", "engine", "enhance", "enjoy", "enlist", "enough", "enrich", "enroll", "ensure", "enter", "entire", "entry", "envelope", "episode", "equal", "equip", "era", "erase", "erode", "erosion", "error", "erupt", "escape", "essay", "essence", "estate", "eternal", "ethics", "evidence", "evil", "evoke", "evolve", "exact", "example", "excess", "exchange", "excite", "exclude", "excuse", "execute", "exercise", "exhaust", "exhibit", "exile", "exist", "exit", "exotic", "expand", "expect", "expire", "explain", "expose", "express", "extend", "extra", "eye", "eyebrow", "fabric", "face", "faculty", "fade", "faint", "faith", "fall", "false", "fame", "family", "famous", "fan", "fancy", "fantasy", "farm", "fashion", "fat", "fatal", "father", "fatigue", "fault", "favorite", "feature", "february", "federal", "fee", "feed", "feel", "female", "fence", "festival", "fetch", "fever", "few", "fiber", "fiction", "field", "figure", "file", "film", "filter", "final", "find", "fine", "finger", "finish", "fire", "firm", "first", "fiscal", "fish", "fit", "fitness", "fix", "flag", "flame", "flash", "flat", "flavor", "flee", "flight", "flip", "float", "flock", "floor", "flower", "fluid", "flush", "fly", "foam", "focus", "fog", "foil", "fold", "follow", "food", "foot", "force", "forest", "forget", "fork", "fortune", "forum", "forward", "fossil", "foster", "found", "fox", "fragile", "frame", "frequent", "fresh", "friend", "fringe", "frog", "front", "frost", "frown", "frozen", "fruit", "fuel", "fun", "funny", "furnace", "fury", "future", "gadget", "gain", "galaxy", "gallery", "game", "gap", "garage", "garbage", "garden", "garlic", "garment", "gas", "gasp", "gate", "gather", "gauge", "gaze", "general", "genius", "genre", "gentle", "genuine", "gesture", "ghost", "giant", "gift", "giggle", "ginger", "giraffe", "girl", "give", "glad", "glance", "glare", "glass", "glide", "glimpse", "globe", "gloom", "glory", "glove", "glow", "glue", "goat", "goddess", "gold", "good", "goose", "gorilla", "gospel", "gossip", "govern", "gown", "grab", "grace", "grain", "grant", "grape", "grass", "gravity", "great", "green", "grid", "grief", "grit", "grocery", "group", "grow", "grunt", "guard", "guess", "guide", "guilt", "guitar", "gun", "gym", "habit", "hair", "half", "hammer", "hamster", "hand", "happy", "harbor", "hard", "harsh", "harvest", "hat", "have", "hawk", "hazard", "head", "health", "heart", "heavy", "hedgehog", "height", "hello", "helmet", "help", "hen", "hero", "hidden", "high", "hill", "hint", "hip", "hire", "history", "hobby", "hockey", "hold", "hole", "holiday", "hollow", "home", "honey", "hood", "hope", "horn", "horror", "horse", "hospital", "host", "hotel", "hour", "hover", "hub", "huge", "human", "humble", "humor", "hundred", "hungry", "hunt", "hurdle", "hurry", "hurt", "husband", "hybrid", "ice", "icon", "idea", "identify", "idle", "ignore", "ill", "illegal", "illness", "image", "imitate", "immense", "immune", "impact", "impose", "improve", "impulse", "inch", "include", "income", "increase", "index", "indicate", "indoor", "industry", "infant", "inflict", "inform", "inhale", "inherit", "initial", "inject", "injury", "inmate", "inner", "innocent", "input", "inquiry", "insane", "insect", "inside", "inspire", "install", "intact", "interest", "into", "invest", "invite", "involve", "iron", "island", "isolate", "issue", "item", "ivory", "jacket", "jaguar", "jar", "jazz", "jealous", "jeans", "jelly", "jewel", "job", "join", "joke", "journey", "joy", "judge", "juice", "jump", "jungle", "junior", "junk", "just", "kangaroo", "keen", "keep", "ketchup", "key", "kick", "kid", "kidney", "kind", "kingdom", "kiss", "kit", "kitchen", "kite", "kitten", "kiwi", "knee", "knife", "knock", "know", "lab", "label", "labor", "ladder", "lady", "lake", "lamp", "language", "laptop", "large", "later", "latin", "laugh", "laundry", "lava", "law", "lawn", "lawsuit", "layer", "lazy", "leader", "leaf", "learn", "leave", "lecture", "left", "leg", "legal", "legend", "leisure", "lemon", "lend", "length", "lens", "leopard", "lesson", "letter", "level", "liar", "liberty", "library", "license", "life", "lift", "light", "like", "limb", "limit", "link", "lion", "liquid", "list", "little", "live", "lizard", "load", "loan", "lobster", "local", "lock", "logic", "lonely", "long", "loop", "lottery", "loud", "lounge", "love", "loyal", "lucky", "luggage", "lumber", "lunar", "lunch", "luxury", "lyrics", "machine", "mad", "magic", "magnet", "maid", "mail", "main", "major", "make", "mammal", "man", "manage", "mandate", "mango", "mansion", "manual", "maple", "marble", "march", "margin", "marine", "market", "marriage", "mask", "mass", "master", "match", "material", "math", "matrix", "matter", "maximum", "maze", "meadow", "mean", "measure", "meat", "mechanic", "medal", "media", "melody", "melt", "member", "memory", "mention", "menu", "mercy", "merge", "merit", "merry", "mesh", "message", "metal", "method", "middle", "midnight", "milk", "million", "mimic", "mind", "minimum", "minor", "minute", "miracle", "mirror", "misery", "miss", "mistake", "mix", "mixed", "mixture", "mobile", "model", "modify", "mom", "moment", "monitor", "monkey", "monster", "month", "moon", "moral", "more", "morning", "mosquito", "mother", "motion", "motor", "mountain", "mouse", "move", "movie", "much", "muffin", "mule", "multiply", "muscle", "museum", "mushroom", "music", "must", "mutual", "myself", "mystery", "myth", "naive", "name", "napkin", "narrow", "nasty", "nation", "nature", "near", "neck", "need", "negative", "neglect", "neither", "nephew", "nerve", "nest", "net", "network", "neutral", "never", "news", "next", "nice", "night", "noble", "noise", "nominee", "noodle", "normal", "north", "nose", "notable", "note", "nothing", "notice", "novel", "now", "nuclear", "number", "nurse", "nut", "oak", "obey", "object", "oblige", "obscure", "observe", "obtain", "obvious", "occur", "ocean", "october", "odor", "off", "offer", "office", "often", "oil", "okay", "old", "olive", "olympic", "omit", "once", "one", "onion", "online", "only", "open", "opera", "opinion", "oppose", "option", "orange", "orbit", "orchard", "order", "ordinary", "organ", "orient", "original", "orphan", "ostrich", "other", "outdoor", "outer", "output", "outside", "oval", "oven", "over", "own", "owner", "oxygen", "oyster", "ozone", "pact", "paddle", "page", "pair", "palace", "palm", "panda", "panel", "panic", "panther", "paper", "parade", "parent", "park", "parrot", "party", "pass", "patch", "path", "patient", "patrol", "pattern", "pause", "pave", "payment", "peace", "peanut", "pear", "peasant", "pelican", "pen", "penalty", "pencil", "people", "pepper", "perfect", "permit", "person", "pet", "phone", "photo", "phrase", "physical", "piano", "picnic", "picture", "piece", "pig", "pigeon", "pill", "pilot", "pink", "pioneer", "pipe", "pistol", "pitch", "pizza", "place", "planet", "plastic", "plate", "play", "please", "pledge", "pluck", "plug", "plunge", "poem", "poet", "point", "polar", "pole", "police", "pond", "pony", "pool", "popular", "portion", "position", "possible", "post", "potato", "pottery", "poverty", "powder", "power", "practice", "praise", "predict", "prefer", "prepare", "present", "pretty", "prevent", "price", "pride", "primary", "print", "priority", "prison", "private", "prize", "problem", "process", "produce", "profit", "program", "project", "promote", "proof", "property", "prosper", "protect", "proud", "provide", "public", "pudding", "pull", "pulp", "pulse", "pumpkin", "punch", "pupil", "puppy", "purchase", "purity", "purpose", "purse", "push", "put", "puzzle", "pyramid", "quality", "quantum", "quarter", "question", "quick", "quit", "quiz", "quote", "rabbit", "raccoon", "race", "rack", "radar", "radio", "rail", "rain", "raise", "rally", "ramp", "ranch", "random", "range", "rapid", "rare", "rate", "rather", "raven", "raw", "razor", "ready", "real", "reason", "rebel", "rebuild", "recall", "receive", "recipe", "record", "recycle", "reduce", "reflect", "reform", "refuse", "region", "regret", "regular", "reject", "relax", "release", "relief", "rely", "remain", "remember", "remind", "remove", "render", "renew", "rent", "reopen", "repair", "repeat", "replace", "report", "require", "rescue", "resemble", "resist", "resource", "response", "result", "retire", "retreat", "return", "reunion", "reveal", "review", "reward", "rhythm", "rib", "ribbon", "rice", "rich", "ride", "ridge", "rifle", "right", "rigid", "ring", "riot", "ripple", "risk", "ritual", "rival", "river", "road", "roast", "robot", "robust", "rocket", "romance", "roof", "rookie", "room", "rose", "rotate", "rough", "round", "route", "royal", "rubber", "rude", "rug", "rule", "run", "runway", "rural", "sad", "saddle", "sadness", "safe", "sail", "salad", "salmon", "salon", "salt", "salute", "same", "sample", "sand", "satisfy", "satoshi", "sauce", "sausage", "save", "say", "scale", "scan", "scare", "scatter", "scene", "scheme", "school", "science", "scissors", "scorpion", "scout", "scrap", "screen", "script", "scrub", "sea", "search", "season", "seat", "second", "secret", "section", "security", "seed", "seek", "segment", "select", "sell", "seminar", "senior", "sense", "sentence", "series", "service", "session", "settle", "setup", "seven", "shadow", "shaft", "shallow", "share", "shed", "shell", "sheriff", "shield", "shift", "shine", "ship", "shiver", "shock", "shoe", "shoot", "shop", "short", "shoulder", "shove", "shrimp", "shrug", "shuffle", "shy", "sibling", "sick", "side", "siege", "sight", "sign", "silent", "silk", "silly", "silver", "similar", "simple", "since", "sing", "siren", "sister", "situate", "six", "size", "skate", "sketch", "ski", "skill", "skin", "skirt", "skull", "slab", "slam", "sleep", "slender", "slice", "slide", "slight", "slim", "slogan", "slot", "slow", "slush", "small", "smart", "smile", "smoke", "smooth", "snack", "snake", "snap", "sniff", "snow", "soap", "soccer", "social", "sock", "soda", "soft", "solar", "soldier", "solid", "solution", "solve", "someone", "song", "soon", "sorry", "sort", "soul", "sound", "soup", "source", "south", "space", "spare", "spatial", "spawn", "speak", "special", "speed", "spell", "spend", "sphere", "spice", "spider", "spike", "spin", "spirit", "split", "spoil", "sponsor", "spoon", "sport", "spot", "spray", "spread", "spring", "spy", "square", "squeeze", "squirrel", "stable", "stadium", "staff", "stage", "stairs", "stamp", "stand", "start", "state", "stay", "steak", "steel", "stem", "step", "stereo", "stick", "still", "sting", "stock", "stomach", "stone", "stool", "story", "stove", "strategy", "street", "strike", "strong", "struggle", "student", "stuff", "stumble", "style", "subject", "submit", "subway", "success", "such", "sudden", "suffer", "sugar", "suggest", "suit", "summer", "sun", "sunny", "sunset", "super", "supply", "supreme", "sure", "surface", "surge", "surprise", "surround", "survey", "suspect", "sustain", "swallow", "swamp", "swap", "swarm", "swear", "sweet", "swift", "swim", "swing", "switch", "sword", "symbol", "symptom", "syrup", "system", "table", "tackle", "tag", "tail", "talent", "talk", "tank", "tape", "target", "task", "taste", "tattoo", "taxi", "teach", "team", "tell", "ten", "tenant", "tennis", "tent", "term", "test", "text", "thank", "that", "theme", "then", "theory", "there", "they", "thing", "this", "thought", "three", "thrive", "throw", "thumb", "thunder", "ticket", "tide", "tiger", "tilt", "timber", "time", "tiny", "tip", "tired", "tissue", "title", "toast", "tobacco", "today", "toddler", "toe", "together", "toilet", "token", "tomato", "tomorrow", "tone", "tongue", "tonight", "tool", "tooth", "top", "topic", "topple", "torch", "tornado", "tortoise", "toss", "total", "tourist", "toward", "tower", "town", "toy", "track", "trade", "traffic", "tragic", "train", "transfer", "trap", "trash", "travel", "tray", "treat", "tree", "trend", "trial", "tribe", "trick", "trigger", "trim", "trip", "trophy", "trouble", "truck", "true", "truly", "trumpet", "trust", "truth", "try", "tube", "tuition", "tumble", "tuna", "tunnel", "turkey", "turn", "turtle", "twelve", "twenty", "twice", "twin", "twist", "two", "type", "typical", "ugly", "umbrella", "unable", "unaware", "uncle", "uncover", "under", "undo", "unfair", "unfold", "unhappy", "uniform", "unique", "unit", "universe", "unknown", "unlock", "until", "unusual", "unveil", "update", "upgrade", "uphold", "upon", "upper", "upset", "urban", "urge", "usage", "use", "used", "useful", "useless", "usual", "utility", "vacant", "vacuum", "vague", "valid", "valley", "valve", "van", "vanish", "vapor", "various", "vast", "vault", "vehicle", "velvet", "vendor", "venture", "venue", "verb", "verify", "version", "very", "vessel", "veteran", "viable", "vibrant", "vicious", "victory", "video", "view", "village", "vintage", "violin", "virtual", "virus", "visa", "visit", "visual", "vital", "vivid", "vocal", "voice", "void", "volcano", "volume", "vote", "voyage", "wage", "wagon", "wait", "walk", "wall", "walnut", "want", "warfare", "warm", "warrior", "wash", "wasp", "waste", "water", "wave", "way", "wealth", "weapon", "wear", "weasel", "weather", "web", "wedding", "weekend", "weird", "welcome", "west", "wet", "whale", "what", "wheat", "wheel", "when", "where", "whip", "whisper", "wide", "width", "wife", "wild", "will", "win", "window", "wine", "wing", "wink", "winner", "winter", "wire", "wisdom", "wise", "wish", "witness", "wolf", "woman", "wonder", "wood", "wool", "word", "work", "world", "worry", "worth", "wrap", "wreck", "wrestle", "wrist", "write", "wrong", "yard", "year", "yellow", "you", "young", "youth", "zebra", "zero", "zone", "zoo"];

var english$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': english
});

var require$$0$2 = getCjsExportFromNamespace(chinese_simplified$1);

var require$$1 = getCjsExportFromNamespace(chinese_traditional$1);

var require$$2 = getCjsExportFromNamespace(korean$1);

var require$$3 = getCjsExportFromNamespace(french$1);

var require$$4 = getCjsExportFromNamespace(italian$1);

var require$$5 = getCjsExportFromNamespace(spanish$1);

var require$$6 = getCjsExportFromNamespace(japanese$1);

var require$$7 = getCjsExportFromNamespace(english$1);

var _wordlists = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  }); // browserify by default only pulls in files that are hard coded in requires
  // In order of last to first in this file, the default wordlist will be chosen
  // based on what is present. (Bundles may remove wordlists they don't need)

  var wordlists = {};
  exports.wordlists = wordlists;

  var _default;

  exports._default = _default;

  try {
    exports._default = _default = require$$0$2;
    wordlists.chinese_simplified = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$1;
    wordlists.chinese_traditional = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$2;
    wordlists.korean = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$3;
    wordlists.french = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$4;
    wordlists.italian = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$5;
    wordlists.spanish = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$6;
    wordlists.japanese = _default;
    wordlists.JA = _default;
  } catch (err) {}

  try {
    exports._default = _default = require$$7;
    wordlists.english = _default;
    wordlists.EN = _default;
  } catch (err) {}
});

var src$3 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var DEFAULT_WORDLIST = _wordlists._default;
  var INVALID_MNEMONIC = 'Invalid mnemonic';
  var INVALID_ENTROPY = 'Invalid entropy';
  var INVALID_CHECKSUM = 'Invalid mnemonic checksum';
  var WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\n' + 'Please explicitly pass a 2048 word array explicitly.';

  function lpad(str, padString, length) {
    while (str.length < length) {
      str = padString + str;
    }

    return str;
  }

  function binaryToByte(bin) {
    return parseInt(bin, 2);
  }

  function bytesToBinary(bytes) {
    return bytes.map(x => lpad(x.toString(2), '0', 8)).join('');
  }

  function deriveChecksumBits(entropyBuffer) {
    var ENT = entropyBuffer.length * 8;
    var CS = ENT / 32;
    var hash = browser$2('sha256').update(entropyBuffer).digest();
    return bytesToBinary([...hash]).slice(0, CS);
  }

  function salt(password) {
    return 'mnemonic' + (password || '');
  }

  function mnemonicToSeedSync(mnemonic, password) {
    var mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');
    var saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');
    return browser$4.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
  }

  exports.mnemonicToSeedSync = mnemonicToSeedSync;

  function mnemonicToSeed(mnemonic, password) {
    return new Promise((resolve, reject) => {
      try {
        var mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');
        var saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');
        browser$4.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', (err, data) => {
          if (err) return reject(err);else return resolve(data);
        });
      } catch (error) {
        return reject(error);
      }
    });
  }

  exports.mnemonicToSeed = mnemonicToSeed;

  function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = wordlist || DEFAULT_WORDLIST;

    if (!wordlist) {
      throw new Error(WORDLIST_REQUIRED);
    }

    var words = (mnemonic || '').normalize('NFKD').split(' ');
    if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC); // convert word indices to 11 bit binary strings

    var bits = words.map(word => {
      var index = wordlist.indexOf(word);
      if (index === -1) throw new Error(INVALID_MNEMONIC);
      return lpad(index.toString(2), '0', 11);
    }).join(''); // split the binary string into ENT/CS

    var dividerIndex = Math.floor(bits.length / 33) * 32;
    var entropyBits = bits.slice(0, dividerIndex);
    var checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare

    var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
    if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY);
    if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY);
    if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY);
    var entropy = Buffer.from(entropyBytes);
    var newChecksum = deriveChecksumBits(entropy);
    if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM);
    return entropy.toString('hex');
  }

  exports.mnemonicToEntropy = mnemonicToEntropy;

  function entropyToMnemonic(entropy, wordlist) {
    if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex');
    wordlist = wordlist || DEFAULT_WORDLIST;

    if (!wordlist) {
      throw new Error(WORDLIST_REQUIRED);
    } // 128 <= ENT <= 256


    if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY);
    if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY);
    if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);
    var entropyBits = bytesToBinary([...entropy]);
    var checksumBits = deriveChecksumBits(entropy);
    var bits = entropyBits + checksumBits;
    var chunks = bits.match(/(.{1,11})/g);
    var words = chunks.map(binary => {
      var index = binaryToByte(binary);
      return wordlist[index];
    });
    return wordlist[0] === '\u3042\u3044\u3053\u304f\u3057\u3093' // Japanese wordlist
    ? words.join('\u3000') : words.join(' ');
  }

  exports.entropyToMnemonic = entropyToMnemonic;

  function generateMnemonic(strength, rng, wordlist) {
    strength = strength || 128;
    if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY);
    rng = rng || browser$5;
    return entropyToMnemonic(rng(strength / 8), wordlist);
  }

  exports.generateMnemonic = generateMnemonic;

  function validateMnemonic(mnemonic, wordlist) {
    try {
      mnemonicToEntropy(mnemonic, wordlist);
    } catch (e) {
      return false;
    }

    return true;
  }

  exports.validateMnemonic = validateMnemonic;

  function setDefaultWordlist(language) {
    var result = _wordlists.wordlists[language];
    if (result) DEFAULT_WORDLIST = result;else throw new Error('Could not find wordlist for language "' + language + '"');
  }

  exports.setDefaultWordlist = setDefaultWordlist;

  function getDefaultWordlist() {
    if (!DEFAULT_WORDLIST) throw new Error('No Default Wordlist set');
    return Object.keys(_wordlists.wordlists).filter(lang => {
      if (lang === 'JA' || lang === 'EN') return false;
      return _wordlists.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);
    })[0];
  }

  exports.getDefaultWordlist = getDefaultWordlist;
  var _wordlists_2 = _wordlists;
  exports.wordlists = _wordlists_2.wordlists;
});
var index$3 = /*@__PURE__*/unwrapExports(src$3);

class HDWallet {
  /**
   * Get root node from the given mnemonic with an optional passphrase.
   */
  static fromMnemonic(mnemonic, passphrase) {
    return index$2.fromSeed(index$3.mnemonicToSeedSync(mnemonic, passphrase), configManager.get("network"));
  }
  /**
   * Get bip32 node from keys.
   */


  static fromKeys(keys, chainCode) {
    if (!keys.compressed) {
      throw new TypeError("BIP32 only allows compressed keys.");
    }

    return index$2.fromPrivateKey(Buffer.from(keys.privateKey, "hex"), chainCode, configManager.get("network"));
  }
  /**
   * Get key pair from the given node.
   */


  static getKeys(node) {
    return {
      publicKey: node.publicKey.toString("hex"),
      privateKey: node.privateKey.toString("hex"),
      compressed: true
    };
  }
  /**
   * Derives a node from the coin type as specified by slip44.
   */


  static deriveSlip44(root) {
    var hardened = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return root.derivePath("m/44'/".concat(this.slip44).concat(hardened ? "'" : ""));
  }
  /**
   * Derives a node from the network as specified by AIP20.
   */


  static deriveNetwork(root) {
    return this.deriveSlip44(root).deriveHardened(configManager.get("network.aip20") || 1);
  }

}
HDWallet.slip44 = 111;

class Message {
  static sign(message, passphrase) {
    var keys = Keys.fromPassphrase(passphrase);
    return {
      publicKey: keys.publicKey,
      signature: Hash$4.signECDSA(this.createHash(message), keys),
      message
    };
  }

  static signWithWif(message, wif, network) {
    if (!network) {
      network = configManager.get("network");
    }

    var keys = Keys.fromWIF(wif, network);
    return {
      publicKey: keys.publicKey,
      signature: Hash$4.signECDSA(this.createHash(message), keys),
      message
    };
  }

  static verify(_ref) {
    var {
      message,
      publicKey,
      signature
    } = _ref;
    return Hash$4.verifyECDSA(this.createHash(message), signature, publicKey);
  }

  static createHash(message) {
    return HashAlgorithms.sha256(message);
  }

}

var dayjs_min = createCommonjsModule(function (module, exports) {
  !function (t, n) {
     module.exports = n() ;
  }(commonjsGlobal, function () {

    var t = "millisecond",
        n = "second",
        e = "minute",
        r = "hour",
        i = "day",
        s = "week",
        u = "month",
        a = "quarter",
        o = "year",
        h = /^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,
        f = /\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
        c = function c(t, n, e) {
      var r = String(t);
      return !r || r.length >= n ? t : "" + Array(n + 1 - r.length).join(e) + t;
    },
        d = {
      s: c,
      z: function z(t) {
        var n = -t.utcOffset(),
            e = Math.abs(n),
            r = Math.floor(e / 60),
            i = e % 60;
        return (n <= 0 ? "+" : "-") + c(r, 2, "0") + ":" + c(i, 2, "0");
      },
      m: function m(t, n) {
        var e = 12 * (n.year() - t.year()) + (n.month() - t.month()),
            r = t.clone().add(e, u),
            i = n - r < 0,
            s = t.clone().add(e + (i ? -1 : 1), u);
        return Number(-(e + (n - r) / (i ? r - s : s - r)) || 0);
      },
      a: function a(t) {
        return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
      },
      p: function p(h) {
        return {
          M: u,
          y: o,
          w: s,
          d: i,
          h: r,
          m: e,
          s: n,
          ms: t,
          Q: a
        }[h] || String(h || "").toLowerCase().replace(/s$/, "");
      },
      u: function u(t) {
        return void 0 === t;
      }
    },
        $ = {
      name: "en",
      weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
      months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
    },
        l = "en",
        m = {};

    m[l] = $;

    var y = function y(t) {
      return t instanceof v;
    },
        M = function M(t, n, e) {
      var r;
      if (!t) return l;
      if ("string" == typeof t) m[t] && (r = t), n && (m[t] = n, r = t);else {
        var i = t.name;
        m[i] = t, r = i;
      }
      return e || (l = r), r;
    },
        g = function g(t, n, e) {
      if (y(t)) return t.clone();
      var r = n ? "string" == typeof n ? {
        format: n,
        pl: e
      } : n : {};
      return r.date = t, new v(r);
    },
        D = d;

    D.l = M, D.i = y, D.w = function (t, n) {
      return g(t, {
        locale: n.$L,
        utc: n.$u
      });
    };

    var v = function () {
      function c(t) {
        this.$L = this.$L || M(t.locale, null, !0), this.parse(t);
      }

      var d = c.prototype;
      return d.parse = function (t) {
        this.$d = function (t) {
          var n = t.date,
              e = t.utc;
          if (null === n) return new Date(NaN);
          if (D.u(n)) return new Date();
          if (n instanceof Date) return new Date(n);

          if ("string" == typeof n && !/Z$/i.test(n)) {
            var r = n.match(h);
            if (r) return e ? new Date(Date.UTC(r[1], r[2] - 1, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, r[7] || 0)) : new Date(r[1], r[2] - 1, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, r[7] || 0);
          }

          return new Date(n);
        }(t), this.init();
      }, d.init = function () {
        var t = this.$d;
        this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
      }, d.$utils = function () {
        return D;
      }, d.isValid = function () {
        return !("Invalid Date" === this.$d.toString());
      }, d.isSame = function (t, n) {
        var e = g(t);
        return this.startOf(n) <= e && e <= this.endOf(n);
      }, d.isAfter = function (t, n) {
        return g(t) < this.startOf(n);
      }, d.isBefore = function (t, n) {
        return this.endOf(n) < g(t);
      }, d.$g = function (t, n, e) {
        return D.u(t) ? this[n] : this.set(e, t);
      }, d.year = function (t) {
        return this.$g(t, "$y", o);
      }, d.month = function (t) {
        return this.$g(t, "$M", u);
      }, d.day = function (t) {
        return this.$g(t, "$W", i);
      }, d.date = function (t) {
        return this.$g(t, "$D", "date");
      }, d.hour = function (t) {
        return this.$g(t, "$H", r);
      }, d.minute = function (t) {
        return this.$g(t, "$m", e);
      }, d.second = function (t) {
        return this.$g(t, "$s", n);
      }, d.millisecond = function (n) {
        return this.$g(n, "$ms", t);
      }, d.unix = function () {
        return Math.floor(this.valueOf() / 1e3);
      }, d.valueOf = function () {
        return this.$d.getTime();
      }, d.startOf = function (t, a) {
        var h = this,
            f = !!D.u(a) || a,
            c = D.p(t),
            d = function d(t, n) {
          var e = D.w(h.$u ? Date.UTC(h.$y, n, t) : new Date(h.$y, n, t), h);
          return f ? e : e.endOf(i);
        },
            $ = function $(t, n) {
          return D.w(h.toDate()[t].apply(h.toDate(), (f ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(n)), h);
        },
            l = this.$W,
            m = this.$M,
            y = this.$D,
            M = "set" + (this.$u ? "UTC" : "");

        switch (c) {
          case o:
            return f ? d(1, 0) : d(31, 11);

          case u:
            return f ? d(1, m) : d(0, m + 1);

          case s:
            var g = this.$locale().weekStart || 0,
                v = (l < g ? l + 7 : l) - g;
            return d(f ? y - v : y + (6 - v), m);

          case i:
          case "date":
            return $(M + "Hours", 0);

          case r:
            return $(M + "Minutes", 1);

          case e:
            return $(M + "Seconds", 2);

          case n:
            return $(M + "Milliseconds", 3);

          default:
            return this.clone();
        }
      }, d.endOf = function (t) {
        return this.startOf(t, !1);
      }, d.$set = function (s, a) {
        var h,
            f = D.p(s),
            c = "set" + (this.$u ? "UTC" : ""),
            d = (h = {}, h[i] = c + "Date", h.date = c + "Date", h[u] = c + "Month", h[o] = c + "FullYear", h[r] = c + "Hours", h[e] = c + "Minutes", h[n] = c + "Seconds", h[t] = c + "Milliseconds", h)[f],
            $ = f === i ? this.$D + (a - this.$W) : a;

        if (f === u || f === o) {
          var l = this.clone().set("date", 1);
          l.$d[d]($), l.init(), this.$d = l.set("date", Math.min(this.$D, l.daysInMonth())).toDate();
        } else d && this.$d[d]($);

        return this.init(), this;
      }, d.set = function (t, n) {
        return this.clone().$set(t, n);
      }, d.get = function (t) {
        return this[D.p(t)]();
      }, d.add = function (t, a) {
        var h,
            f = this;
        t = Number(t);

        var c = D.p(a),
            d = function d(n) {
          var e = g(f);
          return D.w(e.date(e.date() + Math.round(n * t)), f);
        };

        if (c === u) return this.set(u, this.$M + t);
        if (c === o) return this.set(o, this.$y + t);
        if (c === i) return d(1);
        if (c === s) return d(7);
        var $ = (h = {}, h[e] = 6e4, h[r] = 36e5, h[n] = 1e3, h)[c] || 1,
            l = this.valueOf() + t * $;
        return D.w(l, this);
      }, d.subtract = function (t, n) {
        return this.add(-1 * t, n);
      }, d.format = function (t) {
        var n = this;
        if (!this.isValid()) return "Invalid Date";

        var e = t || "YYYY-MM-DDTHH:mm:ssZ",
            r = D.z(this),
            i = this.$locale(),
            s = this.$H,
            u = this.$m,
            a = this.$M,
            o = i.weekdays,
            h = i.months,
            c = function c(t, r, i, s) {
          return t && (t[r] || t(n, e)) || i[r].substr(0, s);
        },
            d = function d(t) {
          return D.s(s % 12 || 12, t, "0");
        },
            $ = i.meridiem || function (t, n, e) {
          var r = t < 12 ? "AM" : "PM";
          return e ? r.toLowerCase() : r;
        },
            l = {
          YY: String(this.$y).slice(-2),
          YYYY: this.$y,
          M: a + 1,
          MM: D.s(a + 1, 2, "0"),
          MMM: c(i.monthsShort, a, h, 3),
          MMMM: h[a] || h(this, e),
          D: this.$D,
          DD: D.s(this.$D, 2, "0"),
          d: String(this.$W),
          dd: c(i.weekdaysMin, this.$W, o, 2),
          ddd: c(i.weekdaysShort, this.$W, o, 3),
          dddd: o[this.$W],
          H: String(s),
          HH: D.s(s, 2, "0"),
          h: d(1),
          hh: d(2),
          a: $(s, u, !0),
          A: $(s, u, !1),
          m: String(u),
          mm: D.s(u, 2, "0"),
          s: String(this.$s),
          ss: D.s(this.$s, 2, "0"),
          SSS: D.s(this.$ms, 3, "0"),
          Z: r
        };

        return e.replace(f, function (t, n) {
          return n || l[t] || r.replace(":", "");
        });
      }, d.utcOffset = function () {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, d.diff = function (t, h, f) {
        var c,
            d = D.p(h),
            $ = g(t),
            l = 6e4 * ($.utcOffset() - this.utcOffset()),
            m = this - $,
            y = D.m(this, $);
        return y = (c = {}, c[o] = y / 12, c[u] = y, c[a] = y / 3, c[s] = (m - l) / 6048e5, c[i] = (m - l) / 864e5, c[r] = m / 36e5, c[e] = m / 6e4, c[n] = m / 1e3, c)[d] || m, f ? y : D.a(y);
      }, d.daysInMonth = function () {
        return this.endOf(u).$D;
      }, d.$locale = function () {
        return m[this.$L];
      }, d.locale = function (t, n) {
        if (!t) return this.$L;
        var e = this.clone();
        return e.$L = M(t, n, !0), e;
      }, d.clone = function () {
        return D.w(this.toDate(), this);
      }, d.toDate = function () {
        return new Date(this.$d);
      }, d.toJSON = function () {
        return this.isValid() ? this.toISOString() : null;
      }, d.toISOString = function () {
        return this.$d.toISOString();
      }, d.toString = function () {
        return this.$d.toUTCString();
      }, c;
    }();

    return g.prototype = v.prototype, g.extend = function (t, n) {
      return t(n, v, g), g;
    }, g.locale = M, g.isDayjs = y, g.unix = function (t) {
      return g(1e3 * t);
    }, g.en = m[l], g.Ls = m, g;
  });
});

class Slots {
  static getTime(time) {
    if (time === undefined) {
      time = dayjs_min().valueOf();
    }

    var start = dayjs_min(configManager.getMilestone(1).epoch).valueOf();
    return Math.floor((time - start) / 1000);
  }

  static getTimeInMsUntilNextSlot() {
    var nextSlotTime = this.getSlotTime(this.getNextSlot());
    var now = this.getTime();
    return (nextSlotTime - now) * 1000;
  }

  static getSlotNumber(epoch) {
    if (epoch === undefined) {
      epoch = this.getTime();
    }

    return Math.floor(epoch / configManager.getMilestone(1).blocktime);
  }

  static getSlotTime(slot) {
    return slot * configManager.getMilestone(1).blocktime;
  }

  static getNextSlot() {
    return this.getSlotNumber() + 1;
  }

  static isForgingAllowed(epoch) {
    if (epoch === undefined) {
      epoch = this.getTime();
    }

    var blockTime = configManager.getMilestone(1).blocktime;
    return epoch % blockTime < blockTime / 2;
  }

}

var index$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  bip38: bip38,
  Hash: Hash$4,
  HashAlgorithms: HashAlgorithms,
  HDWallet: HDWallet,
  Message: Message,
  Slots: Slots
});

var SATOSHI = 1e8;
var ARKTOSHI = SATOSHI;

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  SATOSHI: SATOSHI,
  ARKTOSHI: ARKTOSHI
});

var mapArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.mapArray = (iterable, iteratee) => {
    var result = new Array(iterable.length);

    for (var i = 0; i < iterable.length; i++) {
      result[i] = iteratee(iterable[i], i, iterable);
    }

    return result;
  };
});

var reduceArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reduceArray = (iterable, iteratee, initialValue) => {
    var result = initialValue;

    for (var i = 0; i < iterable.length; i++) {
      result = iteratee(result, iterable[i], i, iterable);
    }

    return result;
  };
});

var words = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.words = value => value.match(/[A-Z\xC0-\xD6\xD8-\xDE]?[a-z\xDF-\xF6\xF8-\xFF]+|[A-Z\xC0-\xD6\xD8-\xDE]+(?![a-z\xDF-\xF6\xF8-\xFF])|\d+/g);
});

var compoundWords = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.compoundWords = (value, transformer) => {
    var segments = words.words(value);

    if (segments === null) {
      return undefined;
    }

    return reduceArray.reduceArray(mapArray.mapArray(segments, word => word.toLowerCase()), transformer, "");
  };
});

var internal = createCommonjsModule(function (module, exports) {

  function __export(m) {
    for (var p in m) {
      if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
  }

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  __export(compoundWords);
});

var assign = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.assign = function (target) {
    for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
      var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];
      var keys = Object.keys(source);

      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        target[key] = source[key];
      }
    }

    return target;
  };
});

var getPathSegments = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var disallowedKeys = ["__proto__", "prototype", "constructor"];

  exports.getPathSegments = value => {
    var segments = Array.isArray(value) ? value : value.split(".");
    return segments.some(segment => disallowedKeys.includes(segment)) ? [] : segments;
  };
});

var isEnumerable = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isEnumerable = (object, prop) => Object.prototype.propertyIsEnumerable.call(object, prop);
});

var isObject$3 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isObject = value => typeof value === "object";
});

var isString = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isString = value => typeof value === "string";
});

var get$5 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.get = (object, path, defaultValue) => {
    if (!isObject$3.isObject(object) || !isString.isString(path)) {
      return defaultValue;
    }

    var pathSegments = getPathSegments.getPathSegments(path);

    for (var i = 0; i < pathSegments.length; i++) {
      if (!isEnumerable.isEnumerable(object, pathSegments[i])) {
        return defaultValue;
      }

      object = object[pathSegments[i]];

      if (object === undefined || object === null) {
        /* istanbul ignore else */
        if (i !== pathSegments.length - 1) {
          return defaultValue;
        }
        /* istanbul ignore next */


        break;
      }
    }

    return object;
  };
});

var mapObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.mapObject = (iterable, iteratee) => {
    var keys = Object.keys(iterable);
    var result = new Array(keys.length);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      result[i] = iteratee(iterable[key], key, iterable);
    }

    return result;
  };
});

var at = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.at = (object, paths) => Object.values(mapObject.mapObject(paths, path => get$5.get(object, path)));
});

var base64$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var encode = value => Buffer.from(value).toString("base64");

  var decode = value => Buffer.from(value, "base64").toString();

  exports.base64 = {
    encode,
    decode
  };
});

var bigNumber = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  class BigNumber {
    constructor(value) {
      this.value = this.toBigNumber(value);
    }

    static make(value) {
      return new BigNumber(value);
    }

    plus(other) {
      return new BigNumber(this.value + this.toBigNumber(other));
    }

    minus(other) {
      return new BigNumber(this.value - this.toBigNumber(other));
    }

    times(other) {
      return new BigNumber(this.value * this.toBigNumber(other));
    }

    dividedBy(other) {
      return new BigNumber(this.value / this.toBigNumber(other));
    }

    div(other) {
      return this.dividedBy(other);
    }

    isZero() {
      return this.value === BigInteger(0);
    }

    comparedTo(other) {
      var b = this.toBigNumber(other);

      if (this.value > b) {
        return 1;
      }

      if (this.value < b) {
        return -1;
      }

      return 0;
    }

    isLessThan(other) {
      return this.value < this.toBigNumber(other);
    }

    isLessThanEqual(other) {
      return this.value <= this.toBigNumber(other);
    }

    isGreaterThan(other) {
      return this.value > this.toBigNumber(other);
    }

    isGreaterThanEqual(other) {
      return this.value >= this.toBigNumber(other);
    }

    isEqualTo(other) {
      return this.value === this.toBigNumber(other);
    }

    isNegative() {
      return this.value < 0;
    }

    toFixed() {
      return this.value.toString();
    }

    toString() {
      var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      return this.value.toString(base);
    }

    toJSON() {
      return this.toFixed();
    }

    toBigNumber(value) {
      if (value instanceof BigNumber) {
        value = value.value;
      }

      return BigInteger(value);
    }

  }

  exports.BigNumber = BigNumber;
  BigNumber.ZERO = new BigNumber(0);
  BigNumber.ONE = new BigNumber(1);
  BigNumber.SATOSHI = new BigNumber(1e8);
});

var chars = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.chars = value => value.split("");
});

var binary = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var encode = value => chars.chars(value).map(character => character.charCodeAt(0).toString(2)).join(" ");

  var decode = value => value.split(" ").map(character => String.fromCharCode(parseInt(character, 2))).join("");

  exports.binary = {
    encode,
    decode
  };
});

var upperFirst = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.upperFirst = value => value[0].toUpperCase() + value.slice(1);
});

var camelCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.camelCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? upperFirst.upperFirst(word) : word));
});

var cappedMap = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  class CappedMap {
    constructor(maxSize) {
      this.maxSize = maxSize;
      this.store = new Map();
    }

    get(key) {
      return this.store.get(key);
    }

    set(key, value) {
      if (this.store.size >= this.maxSize) {
        this.store.delete(Array.from(this.store)[0][0]);
      }

      this.store = this.store.set(key, value);
    }

    has(key) {
      return this.store.has(key);
    }

    delete(key) {
      if (!this.store.has(key)) {
        return false;
      }

      this.store.delete(key);
      return !this.store.has(key);
    }

    clear() {
      this.store.clear();
    }

    resize(maxSize) {
      this.maxSize = maxSize;

      if (this.store.size > this.maxSize) {
        this.store = new Map(Array.from(this.store).slice(-Math.max(0, this.maxSize)));
      }
    }

    first() {
      return Array.from(this.store)[0][1];
    }

    last() {
      return Array.from(this.store)[this.store.size - 1][1];
    }

    keys() {
      return [...this.store.keys()];
    }

    values() {
      return [...this.store.values()];
    }

    count() {
      return this.store.size;
    }

  }

  exports.CappedMap = CappedMap;
});

var cappedSet = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  }); // A Set that is capped in size and acts like a FIFO.

  class CappedSet {
    constructor() {
      var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16384;
      this.data = new Set();
      this.maxSize = maxSize;
    }

    add(newElement) {
      if (this.data.size >= this.maxSize) {
        var oldest = this.data.values().next().value;
        this.data.delete(oldest);
      }

      this.data.add(newElement);
    }

    has(element) {
      return this.data.has(element);
    }

  }

  exports.CappedSet = CappedSet;
});

var isArray$4 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isArray = value => Array.isArray(value);
});

var getType = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.getType = value => Object.prototype.toString.call(value);
});

var isAsyncFunction = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isAsyncFunction = value => getType.getType(value) === "[object AsyncFunction]";
});

var isSyncFunction = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isSyncFunction = value => getType.getType(value) === "[object Function]";
});

var isFunction$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isFunction = value => isSyncFunction.isSyncFunction(value) || isAsyncFunction.isAsyncFunction(value);
});

var isNull = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNull = value => value === null;
});

var isUndefined = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isUndefined = value => value === undefined;
});

var castArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.castArray = value => {
    if (isNull.isNull(value) || isUndefined.isUndefined(value)) {
      return [];
    }

    if (isArray$4.isArray(value)) {
      return value;
    }

    if (isString.isString(value)) {
      return [value];
    }

    if (isFunction$2.isFunction(value[Symbol.iterator])) {
      return [...value];
    }

    return [value];
  };
});

var slice$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  /* istanbul ignore next */

  exports.slice = (array, start, end) => {
    var index = -1;
    var length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  };
});

var chunk = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.chunk = (iterable, chunkSize) => {
    var iterableLength = iterable.length;

    if (!iterableLength || chunkSize <= 0) {
      return [];
    }

    var index = 0;
    var resIndex = 0;
    var result = Array(Math.ceil(iterableLength / chunkSize));

    while (index < iterableLength) {
      result[resIndex++] = slice$1.slice(iterable, index, index += chunkSize);
    }

    return result;
  };
});

var cloneArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.cloneArray = input => {
    var sliced = new Array(input.length);

    for (var i = 0; i < input.length; i++) {
      sliced[i] = input[i];
    }

    return sliced;
  };
});

var fastCopy = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
     module.exports = factory() ;
  })(commonjsGlobal, function () {

    var toStringFunction = Function.prototype.toString;
    var create = Object.create,
        defineProperty = Object.defineProperty,
        getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
        getOwnPropertyNames = Object.getOwnPropertyNames,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        getPrototypeOf = Object.getPrototypeOf;
    var _a = Object.prototype,
        hasOwnProperty = _a.hasOwnProperty,
        propertyIsEnumerable = _a.propertyIsEnumerable;
    /**
     * @enum
     *
     * @const {Object} SUPPORTS
     *
     * @property {boolean} SYMBOL_PROPERTIES are symbol properties supported
     * @property {boolean} WEAKMAP is WeakMap supported
     */

    var SUPPORTS = {
      SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === 'function',
      WEAKMAP: typeof WeakMap === 'function'
    };
    /**
     * @function createCache
     *
     * @description
     * get a new cache object to prevent circular references
     *
     * @returns the new cache object
     */

    var createCache = function createCache() {
      if (SUPPORTS.WEAKMAP) {
        return new WeakMap();
      } // tiny implementation of WeakMap


      var object = create({
        has: function has(key) {
          return !!~object._keys.indexOf(key);
        },
        set: function set(key, value) {
          object._keys.push(key);

          object._values.push(value);
        },
        get: function get(key) {
          return object._values[object._keys.indexOf(key)];
        }
      });
      object._keys = [];
      object._values = [];
      return object;
    };
    /**
     * @function getCleanClone
     *
     * @description
     * get an empty version of the object with the same prototype it has
     *
     * @param object the object to build a clean clone from
     * @param realm the realm the object resides in
     * @returns the empty cloned object
     */


    var getCleanClone = function getCleanClone(object, realm) {
      if (!object.constructor) {
        return create(null);
      }

      var Constructor = object.constructor;
      var prototype = object.__proto__ || getPrototypeOf(object);

      if (Constructor === realm.Object) {
        return prototype === realm.Object.prototype ? {} : create(prototype);
      }

      if (~toStringFunction.call(Constructor).indexOf('[native code]')) {
        try {
          return new Constructor();
        } catch (_a) {}
      }

      return create(prototype);
    };
    /**
     * @function getObjectCloneLoose
     *
     * @description
     * get a copy of the object based on loose rules, meaning all enumerable keys
     * and symbols are copied, but property descriptors are not considered
     *
     * @param object the object to clone
     * @param realm the realm the object resides in
     * @param handleCopy the function that handles copying the object
     * @returns the copied object
     */


    var getObjectCloneLoose = function getObjectCloneLoose(object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively

      cache.set(object, clone);

      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          clone[key] = handleCopy(object[key], cache);
        }
      }

      if (SUPPORTS.SYMBOL_PROPERTIES) {
        var symbols = getOwnPropertySymbols(object);
        var length_1 = symbols.length;

        if (length_1) {
          for (var index = 0, symbol = void 0; index < length_1; index++) {
            symbol = symbols[index];

            if (propertyIsEnumerable.call(object, symbol)) {
              clone[symbol] = handleCopy(object[symbol], cache);
            }
          }
        }
      }

      return clone;
    };
    /**
     * @function getObjectCloneStrict
     *
     * @description
     * get a copy of the object based on strict rules, meaning all keys and symbols
     * are copied based on the original property descriptors
     *
     * @param object the object to clone
     * @param realm the realm the object resides in
     * @param handleCopy the function that handles copying the object
     * @returns the copied object
     */


    var getObjectCloneStrict = function getObjectCloneStrict(object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively

      cache.set(object, clone);
      var properties = SUPPORTS.SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
      var length = properties.length;

      if (length) {
        for (var index = 0, property = void 0, descriptor = void 0; index < length; index++) {
          property = properties[index];

          if (property !== 'callee' && property !== 'caller') {
            descriptor = getOwnPropertyDescriptor(object, property);
            descriptor.value = handleCopy(object[property], cache);
            defineProperty(clone, property, descriptor);
          }
        }
      }

      return clone;
    };
    /**
     * @function getRegExpFlags
     *
     * @description
     * get the flags to apply to the copied regexp
     *
     * @param regExp the regexp to get the flags of
     * @returns the flags for the regexp
     */


    var getRegExpFlags = function getRegExpFlags(regExp) {
      var flags = '';

      if (regExp.global) {
        flags += 'g';
      }

      if (regExp.ignoreCase) {
        flags += 'i';
      }

      if (regExp.multiline) {
        flags += 'm';
      }

      if (regExp.unicode) {
        flags += 'u';
      }

      if (regExp.sticky) {
        flags += 'y';
      }

      return flags;
    }; // utils


    var isArray = Array.isArray;

    var GLOBAL_THIS = function () {
      if (typeof self !== 'undefined') {
        return self;
      }

      if (typeof window !== 'undefined') {
        return window;
      }

      if (typeof commonjsGlobal !== 'undefined') {
        return commonjsGlobal;
      }

      if (console && console.error) {
        console.error('Unable to locate global object, returning "this".');
      }
    }();
    /**
     * @function copy
     *
     * @description
     * copy an object deeply as much as possible
     *
     * If `strict` is applied, then all properties (including non-enumerable ones)
     * are copied with their original property descriptors on both objects and arrays.
     *
     * The object is compared to the global constructors in the `realm` provided,
     * and the native constructor is always used to ensure that extensions of native
     * objects (allows in ES2015+) are maintained.
     *
     * @param object the object to copy
     * @param [options] the options for copying with
     * @param [options.isStrict] should the copy be strict
     * @param [options.realm] the realm (this) object the object is copied from
     * @returns the copied object
     */


    function copy(object, options) {
      // manually coalesced instead of default parameters for performance
      var isStrict = !!(options && options.isStrict);
      var realm = options && options.realm || GLOBAL_THIS;
      var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
      /**
       * @function handleCopy
       *
       * @description
       * copy the object recursively based on its type
       *
       * @param object the object to copy
       * @returns the copied object
       */

      var handleCopy = function handleCopy(object, cache) {
        if (!object || typeof object !== 'object') {
          return object;
        }

        if (cache.has(object)) {
          return cache.get(object);
        }

        var Constructor = object.constructor; // plain objects

        if (Constructor === realm.Object) {
          return getObjectClone(object, realm, handleCopy, cache);
        }

        var clone; // arrays

        if (isArray(object)) {
          // if strict, include non-standard properties
          if (isStrict) {
            return getObjectCloneStrict(object, realm, handleCopy, cache);
          }

          var length_1 = object.length;
          clone = new Constructor();
          cache.set(object, clone);

          for (var index = 0; index < length_1; index++) {
            clone[index] = handleCopy(object[index], cache);
          }

          return clone;
        } // dates


        if (object instanceof realm.Date) {
          return new Constructor(object.getTime());
        } // regexps


        if (object instanceof realm.RegExp) {
          clone = new Constructor(object.source, object.flags || getRegExpFlags(object));
          clone.lastIndex = object.lastIndex;
          return clone;
        } // maps


        if (realm.Map && object instanceof realm.Map) {
          clone = new Constructor();
          cache.set(object, clone);
          object.forEach(function (value, key) {
            clone.set(key, handleCopy(value, cache));
          });
          return clone;
        } // sets


        if (realm.Set && object instanceof realm.Set) {
          clone = new Constructor();
          cache.set(object, clone);
          object.forEach(function (value) {
            clone.add(handleCopy(value, cache));
          });
          return clone;
        } // buffers (node-only)


        if (realm.Buffer && realm.Buffer.isBuffer(object)) {
          clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(object.length) : new Constructor(object.length);
          cache.set(object, clone);
          object.copy(clone);
          return clone;
        } // arraybuffers / dataviews


        if (realm.ArrayBuffer) {
          // dataviews
          if (realm.ArrayBuffer.isView(object)) {
            clone = new Constructor(object.buffer.slice(0));
            cache.set(object, clone);
            return clone;
          } // arraybuffers


          if (object instanceof realm.ArrayBuffer) {
            clone = object.slice(0);
            cache.set(object, clone);
            return clone;
          }
        } // if the object cannot / should not be cloned, don't


        if ( // promise-like
        typeof object.then === 'function' || // errors
        object instanceof Error || // weakmaps
        realm.WeakMap && object instanceof realm.WeakMap || // weaksets
        realm.WeakSet && object instanceof realm.WeakSet) {
          return object;
        } // assume anything left is a custom constructor


        return getObjectClone(object, realm, handleCopy, cache);
      };

      return handleCopy(object, createCache());
    }
    /**
     * @function strictCopy
     *
     * @description
     * copy the object with `strict` option pre-applied
     *
     * @param object the object to copy
     * @param [options] the options for copying with
     * @param [options.realm] the realm (this) object the object is copied from
     * @returns the copied object
     */


    copy.strict = function strictCopy(object, options) {
      return copy(object, {
        isStrict: true,
        realm: options ? options.realm : void 0
      });
    };

    return copy;
  });
});

var cloneDeep = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var fast_copy_1 = __importDefault(fastCopy);

  exports.cloneDeep = object => fast_copy_1.default(object);
});

var cloneObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.cloneObject = input => {
    var keys = Object.keys(input);
    var cloned = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      cloned[key] = input[key];
    }

    return cloned;
  };
});

var clone = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.clone = iterable => isArray$4.isArray(iterable) ? cloneArray.cloneArray(iterable) : cloneObject.cloneObject(iterable);
});

var has$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.has = (object, path) => {
    if (!isObject$3.isObject(object) || !isString.isString(path)) {
      return false;
    }

    var pathSegments = getPathSegments.getPathSegments(path);

    for (var i = 0; i < pathSegments.length; i++) {
      if (!isObject$3.isObject(object)) {
        return false;
      }

      if (!(pathSegments[i] in object)) {
        return false;
      }

      object = object[pathSegments[i]];
    }

    return true;
  };
});

var sample = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.sample = iterable => iterable[Math.floor(Math.random() * iterable.length)];
});

var set$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.set = (object, path, value) => {
    if (!isObject$3.isObject(object) || !isString.isString(path)) {
      return false;
    }

    var pathSegments = getPathSegments.getPathSegments(path);

    for (var i = 0; i < pathSegments.length; i++) {
      var pathSegment = pathSegments[i];

      if (!isObject$3.isObject(object[pathSegment])) {
        object[pathSegment] = {};
      }

      if (i === pathSegments.length - 1) {
        object[pathSegment] = value;
      }

      object = object[pathSegment];
    }

    return true;
  };
});

var stringify$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.stringify = value => {
    try {
      return JSON.stringify(value);
    } catch (_a) {
      return undefined;
    }
  };
});

var unset = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.unset = (object, path) => {
    if (!isObject$3.isObject(object) || !isString.isString(path)) {
      return false;
    }

    var pathSegments = getPathSegments.getPathSegments(path);

    for (var i = 0; i < pathSegments.length; i++) {
      var pathSegment = pathSegments[i];

      if (i === pathSegments.length - 1) {
        delete object[pathSegment];
        return true;
      }

      object = object[pathSegment];

      if (!isObject$3.isObject(object)) {
        return false;
      }
    }
    /* istanbul ignore next */


    return false;
  };
});

var collection = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  class Collection {
    constructor() {
      this.collection = {};
    }

    all() {
      return this.collection;
    }

    entries() {
      return Object.entries(this.collection);
    }

    keys() {
      return Object.keys(this.collection);
    }

    values() {
      return Object.values(this.collection);
    }

    pull(key) {
      var item = get$5.get(this.collection, key);
      this.forget(key);
      return item;
    }

    get(key) {
      return get$5.get(this.collection, key);
    }

    set(key, value) {
      set$1.set(this.collection, key, value);
    }

    forget(key) {
      unset.unset(this.collection, key);
    }

    flush() {
      this.collection = {};
    }

    has(key) {
      return has$2.has(this.collection, key);
    }

    missing(key) {
      return !this.has(key);
    }

    count() {
      return Object.keys(this.collection).length;
    }

    isEmpty() {
      return this.count() <= 0;
    }

    isNotEmpty() {
      return !this.isEmpty();
    }

    random() {
      return sample.sample(this.values());
    }

    toJson() {
      var collection = {};

      for (var [key, value] of this.entries()) {
        collection[key] = value;
      }

      return stringify$1.stringify(collection);
    }

  }

  exports.Collection = Collection;
});

var concat$5 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.concat = function () {
    var result = [];

    for (var i = 0; i < arguments.length; i++) {
      var item = i < 0 || arguments.length <= i ? undefined : arguments[i];

      if (isArray$4.isArray(item)) {
        var childLength = item.length;

        for (var j = 0; j < childLength; j++) {
          result.push(item[j]);
        }
      } else {
        result.push(item);
      }
    }

    return result;
  };
});

var constantCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.constantCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? "_" : "") + word.toUpperCase());
});

var dotCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.dotCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? "." : "") + word);
});

var dotEnv = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var parse = contents => {
    var result = {};

    for (var line of contents.toString().split("\n")) {
      var matches = new RegExp(/^([^=:#]+?)[=:](.*)/).exec(line);

      if (!matches) {
        continue;
      }

      var key = matches[1].trim();
      var value = matches[2].replace(/^"(.*)"$/, "$1").trim();

      if (key && value) {
        if (new RegExp(/^\d+$/).test(value)) {
          result[key] = Number(value);
        } else if (["true", "false"].includes(value)) {
          result[key] = value === "true";
        } else {
          result[key] = value;
        }
      }
    }

    return result;
  };

  var parseFile = file => {
    return parse(crypto_1.readFileSync(file).toString());
  };

  var stringify = pairs => {
    var contents = [];

    for (var key of Object.keys(pairs).filter(Boolean)) {
      var value = pairs[key];
      contents.push(isString.isString(value) ? "".concat(key, "=\"").concat(value, "\"") : "".concat(key, "=").concat(value));
    }

    return contents.join("\n");
  };

  exports.dotenv = {
    parse,
    parseFile,
    stringify
  };
});

var every = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.every = (subject, iterator) => {
    for (var i = 0; i < subject.length; i++) {
      if (!iterator(subject[i], i, subject)) {
        return false;
      }
    }

    return true;
  };
});

/*
The MIT License (MIT)

Copyright (c) 2016 CoderPuppy

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
var _endianness;

function endianness() {
  if (typeof _endianness === 'undefined') {
    var a = new ArrayBuffer(2);
    var b = new Uint8Array(a);
    var c = new Uint16Array(a);
    b[0] = 1;
    b[1] = 2;

    if (c[0] === 258) {
      _endianness = 'BE';
    } else if (c[0] === 513) {
      _endianness = 'LE';
    } else {
      throw new Error('unable to figure out endianess');
    }
  }

  return _endianness;
}
function hostname() {
  if (typeof global$1.location !== 'undefined') {
    return global$1.location.hostname;
  } else return '';
}
function loadavg() {
  return [];
}
function uptime$1() {
  return 0;
}
function freemem() {
  return Number.MAX_VALUE;
}
function totalmem() {
  return Number.MAX_VALUE;
}
function cpus() {
  return [];
}
function type() {
  return 'Browser';
}
function release$1() {
  if (typeof global$1.navigator !== 'undefined') {
    return global$1.navigator.appVersion;
  }

  return '';
}
function networkInterfaces() {}
function getNetworkInterfaces() {}
function tmpDir() {
  return '/tmp';
}
var tmpdir = tmpDir;
var EOL = '\n';
var os = {
  EOL: EOL,
  tmpdir: tmpdir,
  tmpDir: tmpDir,
  networkInterfaces: networkInterfaces,
  getNetworkInterfaces: getNetworkInterfaces,
  release: release$1,
  type: type,
  cpus: cpus,
  totalmem: totalmem,
  freemem: freemem,
  uptime: uptime$1,
  loadavg: loadavg,
  hostname: hostname,
  endianness: endianness
};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;

  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];

    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
} // Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.


var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

var splitPath = function splitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
}; // path.resolve([from ...], to)
// posix version


function resolve() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : '/'; // Skip empty and invalid entries

    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  } // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)
  // Normalize the path


  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');
  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}
// posix version

function normalize(path) {
  var isPathAbsolute = isAbsolute(path),
      trailingSlash = substr(path, -1) === '/'; // Normalize the path

  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isPathAbsolute).join('/');

  if (!path && !isPathAbsolute) {
    path = '.';
  }

  if (path && trailingSlash) {
    path += '/';
  }

  return (isPathAbsolute ? '/' : '') + path;
}

function isAbsolute(path) {
  return path.charAt(0) === '/';
} // posix version

function join() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }

    return p;
  }).join('/'));
} // path.relative(from, to)
// posix version

function relative(from, to) {
  from = resolve(from).substr(1);
  to = resolve(to).substr(1);

  function trim(arr) {
    var start = 0;

    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;

    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;

  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];

  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join('/');
}
var sep = '/';
var delimiter = ':';
function dirname(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
}
function basename(path, ext) {
  var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?

  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }

  return f;
}
function extname(path) {
  return splitPath(path)[3];
}
var path_1 = {
  extname: extname,
  basename: basename,
  dirname: dirname,
  sep: sep,
  delimiter: delimiter,
  relative: relative,
  join: join,
  isAbsolute: isAbsolute,
  normalize: normalize,
  resolve: resolve
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }

  return res;
} // String.prototype.substr - negative index don't work in IE8


var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};

var expandTilde = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  }); // https://www.ibm.com/support/knowledgecenter/en/SSVJJU_6.4.0/com.ibm.IBMDS.doc_6.4/r_cr_asciicharset.html

  exports.expandTilde = path => {
    var home = os.homedir();

    if (path.charCodeAt(0) === 126) {
      if (path.charCodeAt(1) === 43) {
        return path_1.join(process.cwd(), path.slice(2));
      }

      return path_1.join(home, path.slice(1));
    }

    return path;
  };
});

var extension = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.extension = path => path_1.extname(path).substr(1) || undefined;
});

var fill = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.fill = (subject, value, start, end) => {
    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = subject.length;
    }

    var results = [...subject];

    for (var i = start; i < end; i++) {
      results[i] = value;
    }

    return results;
  };
});

var filterArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.filterArray = (iterable, iteratee) => {
    var result = [];

    for (var i = 0; i < iterable.length; i++) {
      if (iteratee(iterable[i], i, iterable)) {
        result.push(iterable[i]);
      }
    }

    return result;
  };
});

var filterObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.filterObject = (iterable, iteratee) => {
    var keys = Object.keys(iterable);
    var length = keys.length;
    var result = {};

    for (var i = 0; i < length; i++) {
      var key = keys[i];

      if (iteratee(iterable[key], key, iterable)) {
        result[key] = iterable[key];
      }
    }

    return result;
  };
});

var filter$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.filter = (iterable, iteratee) => isArray$4.isArray(iterable) ? filterArray.filterArray(iterable, iteratee) : filterObject.filterObject(iterable, iteratee);
});

var findIndex = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.findIndex = (iterable, iteratee) => {
    for (var i = 0; i < iterable.length; i++) {
      if (iteratee(iterable[i], i, iterable)) {
        return i;
      }
    }

    return -1;
  };
});

var findKey = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.findKey = (iterable, iteratee) => Object.keys(filterObject.filterObject(iterable, iteratee))[0];
});

var find = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.find = (iterable, iteratee) => {
    for (var i = 0; i < iterable.length; i++) {
      var item = iterable[i];

      if (iteratee(item, i, iterable)) {
        return item;
      }
    }

    return undefined;
  };
});

var firstMapEntry = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.firstMapEntry = map => Array.from(map)[0];
});

var firstMapKey = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.firstMapKey = map => firstMapEntry.firstMapEntry(map)[0];
});

var firstMapValue = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.firstMapValue = map => firstMapEntry.firstMapEntry(map)[1];
});

var flatten = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var flat = (iterable, stash) => {
    for (var element of iterable) {
      Array.isArray(element) ? flat(element, stash) : stash.push(element);
    }

    return stash;
  };

  exports.flatten = iterable => flat(iterable, []);
});

var formatNumber = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.formatNumber = (value, locales, options) => new Intl.NumberFormat(locales, options).format(value);
});

var formatString = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.formatString = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var output = args[0];
    args.shift();

    for (var i = 0; i < args.length; i++) {
      output = output.replace("{".concat(i, "}"), args[i]);
    }

    return output;
  };
});

var groupBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.groupBy = (iterable, iteratee) => {
    var groupedValues = {};

    for (var value of iterable) {
      var keyValue = iteratee(value);

      if (!groupedValues[keyValue]) {
        groupedValues[keyValue] = [];
      }

      groupedValues[keyValue].push(value);
    }

    return groupedValues;
  };
});

var hasProperty = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.hasProperty = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);
});

var some = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.some = (iterable, iteratee) => {
    for (var i = 0; i < iterable.length; i++) {
      if (iteratee(iterable[i], i, iterable)) {
        return true;
      }
    }

    return false;
  };
});

var hasSomeProperty = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.hasSomeProperty = (object, props) => some.some(props, prop => hasProperty.hasProperty(object, prop));
});

var hashString = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.hashString = value => {
    var hash = 5381;
    var remaining = value.length;

    while (remaining) {
      hash = hash * 33 ^ value.charCodeAt(--remaining);
    }

    return hash >>> 0;
  };
});

var head = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.head = values => values[0];
});

var headerCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.headerCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? "-" : "") + upperFirst.upperFirst(word));
});

var hex = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var encode = value => Buffer.from(value, "utf8").toString("hex");

  var decode = value => Buffer.from(value, "hex").toString();

  exports.hex = {
    encode,
    decode
  };
});

var hasFetch = isFunction$3(global$1.fetch) && isFunction$3(global$1.ReadableStream);

var _blobConstructor;

function blobConstructor() {
  if (typeof _blobConstructor !== 'undefined') {
    return _blobConstructor;
  }

  try {
    new global$1.Blob([new ArrayBuffer(1)]);
    _blobConstructor = true;
  } catch (e) {
    _blobConstructor = false;
  }

  return _blobConstructor;
}
var xhr;

function checkTypeSupport(type) {
  if (!xhr) {
    xhr = new global$1.XMLHttpRequest(); // If location.host is empty, e.g. if this page/worker was loaded
    // from a Blob, then use example.com to avoid an error

    xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
  }

  try {
    xhr.responseType = type;
    return xhr.responseType === type;
  } catch (e) {
    return false;
  }
} // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.


var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
var haveSlice = haveArrayBuffer && isFunction$3(global$1.ArrayBuffer.prototype.slice);
var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer'); // These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.

var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');
var overrideMimeType = isFunction$3(xhr.overrideMimeType);
var vbArray = isFunction$3(global$1.VBArray);

function isFunction$3(value) {
  return typeof value === 'function';
}

xhr = null; // Help gc

var rStates = {
  UNSENT: 0,
  OPENED: 1,
  HEADERS_RECEIVED: 2,
  LOADING: 3,
  DONE: 4
};
function IncomingMessage(xhr, response, mode) {
  var self = this;
  Readable.call(self);
  self._mode = mode;
  self.headers = {};
  self.rawHeaders = [];
  self.trailers = {};
  self.rawTrailers = []; // Fake the 'close' event, but only once 'end' fires

  self.on('end', function () {
    // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
    process.nextTick(function () {
      self.emit('close');
    });
  });

  var _read;

  if (mode === 'fetch') {
    self._fetchResponse = response;
    self.url = response.url;
    self.statusCode = response.status;
    self.statusMessage = response.statusText; // backwards compatible version of for (<item> of <iterable>):
    // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)

    for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
      self.headers[header[0].toLowerCase()] = header[1];
      self.rawHeaders.push(header[0], header[1]);
    } // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed


    var reader = response.body.getReader();

    _read = function read() {
      reader.read().then(function (result) {
        if (self._destroyed) return;

        if (result.done) {
          self.push(null);
          return;
        }

        self.push(new Buffer(result.value));

        _read();
      });
    };

    _read();
  } else {
    self._xhr = xhr;
    self._pos = 0;
    self.url = xhr.responseURL;
    self.statusCode = xhr.status;
    self.statusMessage = xhr.statusText;
    var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
    headers.forEach(function (header) {
      var matches = header.match(/^([^:]+):\s*(.*)/);

      if (matches) {
        var key = matches[1].toLowerCase();

        if (key === 'set-cookie') {
          if (self.headers[key] === undefined) {
            self.headers[key] = [];
          }

          self.headers[key].push(matches[2]);
        } else if (self.headers[key] !== undefined) {
          self.headers[key] += ', ' + matches[2];
        } else {
          self.headers[key] = matches[2];
        }

        self.rawHeaders.push(matches[1], matches[2]);
      }
    });
    self._charset = 'x-user-defined';

    if (!overrideMimeType) {
      var mimeType = self.rawHeaders['mime-type'];

      if (mimeType) {
        var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);

        if (charsetMatch) {
          self._charset = charsetMatch[1].toLowerCase();
        }
      }

      if (!self._charset) self._charset = 'utf-8'; // best guess
    }
  }
}
util.inherits(IncomingMessage, Readable);

IncomingMessage.prototype._read = function () {};

IncomingMessage.prototype._onXHRProgress = function () {
  var self = this;
  var xhr = self._xhr;
  var response = null;

  switch (self._mode) {
    case 'text:vbarray':
      // For IE9
      if (xhr.readyState !== rStates.DONE) break;

      try {
        // This fails in IE8
        response = new global$1.VBArray(xhr.responseBody).toArray();
      } catch (e) {// pass
      }

      if (response !== null) {
        self.push(new Buffer(response));
        break;
      }

    // Falls through in IE8

    case 'text':
      try {
        // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
        response = xhr.responseText;
      } catch (e) {
        self._mode = 'text:vbarray';
        break;
      }

      if (response.length > self._pos) {
        var newData = response.substr(self._pos);

        if (self._charset === 'x-user-defined') {
          var buffer = new Buffer(newData.length);

          for (var i = 0; i < newData.length; i++) {
            buffer[i] = newData.charCodeAt(i) & 0xff;
          }

          self.push(buffer);
        } else {
          self.push(newData, self._charset);
        }

        self._pos = response.length;
      }

      break;

    case 'arraybuffer':
      if (xhr.readyState !== rStates.DONE || !xhr.response) break;
      response = xhr.response;
      self.push(new Buffer(new Uint8Array(response)));
      break;

    case 'moz-chunked-arraybuffer':
      // take whole
      response = xhr.response;
      if (xhr.readyState !== rStates.LOADING || !response) break;
      self.push(new Buffer(new Uint8Array(response)));
      break;

    case 'ms-stream':
      response = xhr.response;
      if (xhr.readyState !== rStates.LOADING) break;
      var reader = new global$1.MSStreamReader();

      reader.onprogress = function () {
        if (reader.result.byteLength > self._pos) {
          self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
          self._pos = reader.result.byteLength;
        }
      };

      reader.onload = function () {
        self.push(null);
      }; // reader.onerror = ??? // TODO: this


      reader.readAsArrayBuffer(response);
      break;
  } // The ms-stream case handles end separately in reader.onload()


  if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
    self.push(null);
  }
};

// from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
function toArrayBuffer (buf) {
  // If the buffer is backed by a Uint8Array, a faster version will work
  if (buf instanceof Uint8Array) {
    // If the buffer isn't a subarray, return the underlying ArrayBuffer
    if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    } else if (typeof buf.buffer.slice === 'function') {
      // Otherwise we need to get a proper copy
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    }
  }

  if (buffer.isBuffer(buf)) {
    // This is the slow version that will work with any Buffer
    // implementation (even in old browsers)
    var arrayCopy = new Uint8Array(buf.length);
    var len = buf.length;

    for (var i = 0; i < len; i++) {
      arrayCopy[i] = buf[i];
    }

    return arrayCopy.buffer;
  } else {
    throw new Error('Argument must be a Buffer');
  }
}

function decideMode(preferBinary, useFetch) {
  if (hasFetch && useFetch) {
    return 'fetch';
  } else if (mozchunkedarraybuffer) {
    return 'moz-chunked-arraybuffer';
  } else if (msstream) {
    return 'ms-stream';
  } else if (arraybuffer && preferBinary) {
    return 'arraybuffer';
  } else if (vbArray && preferBinary) {
    return 'text:vbarray';
  } else {
    return 'text';
  }
}

function ClientRequest(opts) {
  var self = this;
  Writable.call(self);
  self._opts = opts;
  self._body = [];
  self._headers = {};
  if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
  Object.keys(opts.headers).forEach(function (name) {
    self.setHeader(name, opts.headers[name]);
  });
  var preferBinary;
  var useFetch = true;

  if (opts.mode === 'disable-fetch') {
    // If the use of XHR should be preferred and includes preserving the 'content-type' header
    useFetch = false;
    preferBinary = true;
  } else if (opts.mode === 'prefer-streaming') {
    // If streaming is a high priority but binary compatibility and
    // the accuracy of the 'content-type' header aren't
    preferBinary = false;
  } else if (opts.mode === 'allow-wrong-content-type') {
    // If streaming is more important than preserving the 'content-type' header
    preferBinary = !overrideMimeType;
  } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
    // Use binary if text streaming may corrupt data or the content-type header, or for speed
    preferBinary = true;
  } else {
    throw new Error('Invalid value for opts.mode');
  }

  self._mode = decideMode(preferBinary, useFetch);
  self.on('finish', function () {
    self._onFinish();
  });
}

util.inherits(ClientRequest, Writable); // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method

var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];

ClientRequest.prototype.setHeader = function (name, value) {
  var self = this;
  var lowerName = name.toLowerCase(); // This check is not necessary, but it prevents warnings from browsers about setting unsafe
  // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
  // http-browserify did it, so I will too.

  if (unsafeHeaders.indexOf(lowerName) !== -1) return;
  self._headers[lowerName] = {
    name: name,
    value: value
  };
};

ClientRequest.prototype.getHeader = function (name) {
  var self = this;
  return self._headers[name.toLowerCase()].value;
};

ClientRequest.prototype.removeHeader = function (name) {
  var self = this;
  delete self._headers[name.toLowerCase()];
};

ClientRequest.prototype._onFinish = function () {
  var self = this;
  if (self._destroyed) return;
  var opts = self._opts;
  var headersObj = self._headers;
  var body;

  if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
    if (blobConstructor()) {
      body = new global$1.Blob(self._body.map(function (buffer) {
        return toArrayBuffer(buffer);
      }), {
        type: (headersObj['content-type'] || {}).value || ''
      });
    } else {
      // get utf8 string
      body = Buffer.concat(self._body).toString();
    }
  }

  if (self._mode === 'fetch') {
    var headers = Object.keys(headersObj).map(function (name) {
      return [headersObj[name].name, headersObj[name].value];
    });
    global$1.fetch(self._opts.url, {
      method: self._opts.method,
      headers: headers,
      body: body,
      mode: 'cors',
      credentials: opts.withCredentials ? 'include' : 'same-origin'
    }).then(function (response) {
      self._fetchResponse = response;

      self._connect();
    }, function (reason) {
      self.emit('error', reason);
    });
  } else {
    var xhr = self._xhr = new global$1.XMLHttpRequest();

    try {
      xhr.open(self._opts.method, self._opts.url, true);
    } catch (err) {
      process.nextTick(function () {
        self.emit('error', err);
      });
      return;
    } // Can't set responseType on really old browsers


    if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];
    if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;
    if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');
    Object.keys(headersObj).forEach(function (name) {
      xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
    });
    self._response = null;

    xhr.onreadystatechange = function () {
      switch (xhr.readyState) {
        case rStates.LOADING:
        case rStates.DONE:
          self._onXHRProgress();

          break;
      }
    }; // Necessary for streaming in Firefox, since xhr.response is ONLY defined
    // in onprogress, not in onreadystatechange with xhr.readyState = 3


    if (self._mode === 'moz-chunked-arraybuffer') {
      xhr.onprogress = function () {
        self._onXHRProgress();
      };
    }

    xhr.onerror = function () {
      if (self._destroyed) return;
      self.emit('error', new Error('XHR error'));
    };

    try {
      xhr.send(body);
    } catch (err) {
      process.nextTick(function () {
        self.emit('error', err);
      });
      return;
    }
  }
};
/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */


function statusValid(xhr) {
  try {
    var status = xhr.status;
    return status !== null && status !== 0;
  } catch (e) {
    return false;
  }
}

ClientRequest.prototype._onXHRProgress = function () {
  var self = this;
  if (!statusValid(self._xhr) || self._destroyed) return;
  if (!self._response) self._connect();

  self._response._onXHRProgress();
};

ClientRequest.prototype._connect = function () {
  var self = this;
  if (self._destroyed) return;
  self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
  self.emit('response', self._response);
};

ClientRequest.prototype._write = function (chunk, encoding, cb) {
  var self = this;

  self._body.push(chunk);

  cb();
};

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
  var self = this;
  self._destroyed = true;
  if (self._response) self._response._destroyed = true;
  if (self._xhr) self._xhr.abort(); // Currently, there isn't a way to truly abort a fetch.
  // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
};

ClientRequest.prototype.end = function (data, encoding, cb) {
  var self = this;

  if (typeof data === 'function') {
    cb = data;
    data = undefined;
  }

  Writable.prototype.end.call(self, data, encoding, cb);
};

ClientRequest.prototype.flushHeaders = function () {};

ClientRequest.prototype.setTimeout = function () {};

ClientRequest.prototype.setNoDelay = function () {};

ClientRequest.prototype.setSocketKeepAlive = function () {};

/** Highest positive signed 32-bit float value */

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */

var base$3 = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80

var delimiter$1 = '-'; // '\x2D'
var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars

var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */

var errors$2 = {
  'overflow': 'Overflow: input needs wider integers to process',
  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  'invalid-input': 'Invalid input'
};
/** Convenience shortcuts */

var baseMinusTMin = base$3 - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;
/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */

function error$1(type) {
  throw new RangeError(errors$2[type]);
}
/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */


function map(array, fn) {
  var result = [];
  var length = array.length;

  while (length--) {
    result[length] = fn(array[length]);
  }

  return result;
}
/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */


function mapDomain(string, fn) {
  var parts = string.split('@');
  var result = '';

  if (parts.length > 1) {
    // In email addresses, only the domain name should be punycoded. Leave
    // the local part (i.e. everything up to `@`) intact.
    result = parts[0] + '@';
    string = parts[1];
  } // Avoid `split(regex)` for IE8 compatibility. See #17.


  string = string.replace(regexSeparators, '\x2E');
  var labels = string.split('.');
  var encoded = map(labels, fn).join('.');
  return result + encoded;
}
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */


function ucs2decode(string) {
  var output = [];
  var counter = 0;
  var length = string.length;

  while (counter < length) {
    var value = string.charCodeAt(counter++);

    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);

      if ((extra & 0xFC00) == 0xDC00) {
        // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }

  return output;
}
/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */


var digitToBasic = function digitToBasic(digit, flag) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};
/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */


var adapt = function adapt(delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);

  for (;
  /* no initialization */
  delta > baseMinusTMin * tMax >> 1; k += base$3) {
    delta = floor(delta / baseMinusTMin);
  }

  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};
/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */


var encode$a = function encode(input) {
  var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

  input = ucs2decode(input); // Cache the length.

  var inputLength = input.length; // Initialize the state.

  var n = initialN;
  var delta = 0;
  var bias = initialBias; // Handle the basic code points.

  for (var currentValue of input) {
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length;
  var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;
  // `basicLength` is the number of basic code points.
  // Finish the basic string with a delimiter unless it's empty.

  if (basicLength) {
    output.push(delimiter$1);
  } // Main encoding loop:


  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next
    // larger one:
    var m = maxInt;

    for (var _currentValue of input) {
      if (_currentValue >= n && _currentValue < m) {
        m = _currentValue;
      }
    } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    // but guard against overflow.


    var handledCPCountPlusOne = handledCPCount + 1;

    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error$1('overflow');
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (var _currentValue2 of input) {
      if (_currentValue2 < n && ++delta > maxInt) {
        error$1('overflow');
      }

      if (_currentValue2 == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;

        for (var k = base$3;;
        /* no condition */
        k += base$3) {
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

          if (q < t) {
            break;
          }

          var qMinusT = q - t;
          var baseMinusT = base$3 - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }

  return output.join('');
};
/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */


var toASCII = function toASCII(input) {
  return mapDomain(input, function (string) {
    return regexNonASCII.test(string) ? 'xn--' + encode$a(string) : string;
  });
};

// Copyright Joyent, Inc. and other Node contributors.
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty$2(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var decode$a = function decode(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty$2(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

// Copyright Joyent, Inc. and other Node contributors.

var stringifyPrimitive = function stringifyPrimitive(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

var encode$b = function encode(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (Array.isArray(obj[k])) {
        return obj[k].map(function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var querystring = createCommonjsModule(function (module, exports) {

  exports.decode = exports.parse = decode$a;
  exports.encode = exports.stringify = encode$b;
});

// Copyright Joyent, Inc. and other Node contributors.
var url_1 = {
  parse: urlParse,
  resolve: urlResolve,
  resolveObject: urlResolveObject,
  format: urlFormat,
  Url: Url
};
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.

var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
};

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  return parse$1(this, url, parseQueryString, slashesDenoteHost);
};

function parse$1(self, url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      self.path = rest;
      self.href = rest;
      self.pathname = simplePath[1];

      if (simplePath[2]) {
        self.search = simplePath[2];

        if (parseQueryString) {
          self.query = querystring.parse(self.search.substr(1));
        } else {
          self.query = self.search.substr(1);
        }
      } else if (parseQueryString) {
        self.search = '';
        self.query = {};
      }

      return self;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    self.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      self.slashes = true;
    }
  }

  var i, hec, l, p;

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      self.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    self.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    parseHost(self); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    self.hostname = self.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = self.hostname[0] === '[' && self.hostname[self.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = self.hostname.split(/\./);

      for (i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            self.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (self.hostname.length > hostnameMaxLen) {
      self.hostname = '';
    } else {
      // hostnames are always lower case.
      self.hostname = self.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      self.hostname = toASCII(self.hostname);
    }

    p = self.port ? ':' + self.port : '';
    var h = self.hostname || '';
    self.host = h + p;
    self.href += self.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      self.hostname = self.hostname.substr(1, self.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    self.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    self.search = rest.substr(qm);
    self.query = rest.substr(qm + 1);

    if (parseQueryString) {
      self.query = querystring.parse(self.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    self.search = '';
    self.query = {};
  }

  if (rest) self.pathname = rest;

  if (slashedProtocol[lowerProto] && self.hostname && !self.pathname) {
    self.pathname = '/';
  } //to support http.request


  if (self.pathname || self.search) {
    p = self.pathname || '';
    var s = self.search || '';
    self.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  self.href = format(self);
  return self;
} // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = parse$1({}, obj);
  return format(obj);
}

function format(self) {
  var auth = self.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

  if (self.host) {
    host = auth + self.host;
  } else if (self.hostname) {
    host = auth + (self.hostname.indexOf(':') === -1 ? self.hostname : '[' + this.hostname + ']');

    if (self.port) {
      host += ':' + self.port;
    }
  }

  if (self.query && util.isObject(self.query) && Object.keys(self.query).length) {
    query = querystring.stringify(self.query);
  }

  var search = self.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (self.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
}

Url.prototype.format = function () {
  return format(this);
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  var relPath;

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift())) {
      }

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
  relPath = relative.pathname && relative.pathname.split('/') || []; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  var authInHost;

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  return parseHost(this);
};

function parseHost(self) {
  var host = self.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      self.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) self.hostname = host;
}

function request(opts, cb) {
  if (typeof opts === 'string') opts = urlParse(opts); // Normally, the page is loaded from http or https, so not specifying a protocol
  // will result in a (valid) protocol-relative url. However, this won't work if
  // the protocol is something else, like 'file:'

  var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';
  var protocol = opts.protocol || defaultProtocol;
  var host = opts.hostname || opts.host;
  var port = opts.port;
  var path = opts.path || '/'; // Necessary for IPv6 addresses

  if (host && host.indexOf(':') !== -1) host = '[' + host + ']'; // This may be a relative url. The browser should always be able to interpret it correctly.

  opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
  opts.method = (opts.method || 'GET').toUpperCase();
  opts.headers = opts.headers || {}; // Also valid opts.auth, opts.mode

  var req = new ClientRequest(opts);
  if (cb) req.on('response', cb);
  return req;
}
function get$6(opts, cb) {
  var req = request(opts, cb);
  req.end();
  return req;
}
function Agent() {}
Agent.defaultMaxSockets = 4;
var METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];
var STATUS_CODES = {
  100: 'Continue',
  101: 'Switching Protocols',
  102: 'Processing',
  // RFC 2518, obsoleted by RFC 4918
  200: 'OK',
  201: 'Created',
  202: 'Accepted',
  203: 'Non-Authoritative Information',
  204: 'No Content',
  205: 'Reset Content',
  206: 'Partial Content',
  207: 'Multi-Status',
  // RFC 4918
  300: 'Multiple Choices',
  301: 'Moved Permanently',
  302: 'Moved Temporarily',
  303: 'See Other',
  304: 'Not Modified',
  305: 'Use Proxy',
  307: 'Temporary Redirect',
  400: 'Bad Request',
  401: 'Unauthorized',
  402: 'Payment Required',
  403: 'Forbidden',
  404: 'Not Found',
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Time-out',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Request Entity Too Large',
  414: 'Request-URI Too Large',
  415: 'Unsupported Media Type',
  416: 'Requested Range Not Satisfiable',
  417: 'Expectation Failed',
  418: 'I\'m a teapot',
  // RFC 2324
  422: 'Unprocessable Entity',
  // RFC 4918
  423: 'Locked',
  // RFC 4918
  424: 'Failed Dependency',
  // RFC 4918
  425: 'Unordered Collection',
  // RFC 4918
  426: 'Upgrade Required',
  // RFC 2817
  428: 'Precondition Required',
  // RFC 6585
  429: 'Too Many Requests',
  // RFC 6585
  431: 'Request Header Fields Too Large',
  // RFC 6585
  500: 'Internal Server Error',
  501: 'Not Implemented',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Time-out',
  505: 'HTTP Version Not Supported',
  506: 'Variant Also Negotiates',
  // RFC 2295
  507: 'Insufficient Storage',
  // RFC 4918
  509: 'Bandwidth Limit Exceeded',
  510: 'Not Extended',
  // RFC 2774
  511: 'Network Authentication Required' // RFC 6585

};
var https_1 = {
  request,
  get: get$6,
  Agent,
  METHODS,
  STATUS_CODES
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var http = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  class HttpError extends Error {
    constructor(response, error) {
      var message = error ? error.message : response.statusMessage;
      super(message);
      Object.defineProperty(this, "message", {
        enumerable: false,
        value: message
      });
      Object.defineProperty(this, "name", {
        enumerable: false,
        value: this.constructor.name
      });
      Object.defineProperty(this, "response", {
        enumerable: false,
        value: {
          statusMessage: response.statusMessage,
          statusCode: response.statusCode,
          headers: response.headers,
          data: response.data
        }
      });
      Error.captureStackTrace(this, this.constructor);
    }

  }

  exports.HttpError = HttpError;

  var sendRequest = (method, url, opts) => new Promise((res, rej) => {
    if (!isObject$3.isObject(opts)) {
      opts = {};
    }

    opts = _objectSpread(_objectSpread({}, opts), url_1.parse(url));
    opts.method = method.toLowerCase();
    /* istanbul ignore next */

    if (opts.protocol === "http:") {
      opts.agent = https_1.globalAgent;
    }

    if (isUndefined.isUndefined(opts.timeout)) {
      opts.timeout = 1500;
    }

    var req = https_1.request(opts, r => {
      var accumulator = "";
      r.setEncoding("utf8");
      r.on("data", chunk => accumulator += chunk);
      r.on("end", () => {
        var response = {
          method,
          statusCode: r.statusCode,
          statusMessage: r.statusMessage,
          data: "",
          headers: r.rawHeaders
        };
        var type = r.headers["content-type"];
        /* istanbul ignore next */

        if (type && accumulator && type.includes("application/json")) {
          try {
            accumulator = JSON.parse(accumulator);
          } catch (error) {
            rej(new HttpError(response, error));
          }
        }

        response.statusCode = r.statusCode;
        response.statusMessage = r.statusMessage;
        response.data = accumulator;

        if (r.statusCode && r.statusCode >= 400) {
          rej(new HttpError(response));
        }

        res(response);
      });
    });
    req.on("error", rej);
    req.on("timeout", () => req.abort());

    if (opts.body) {
      var body = JSON.stringify(opts.body);
      req.setHeader("content-type", "application/json");
      req.setHeader("content-length", Buffer.byteLength(body));
      req.write(body);
    }

    req.end();
  });

  exports.http = {
    get: (url, opts) => sendRequest("GET", url, opts),
    post: (url, opts) => sendRequest("POST", url, opts),
    put: (url, opts) => sendRequest("PUT", url, opts),
    patch: (url, opts) => sendRequest("PATCH", url, opts),
    delete: (url, opts) => sendRequest("DELETE", url, opts)
  };
});

var includes = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.includes = (iterable, value) => {
    if (isArray$4.isArray(iterable)) {
      return iterable.includes(value);
    }

    if (isString.isString(iterable)) {
      return iterable.includes(value);
    }

    if (isObject$3.isObject(iterable)) {
      return Object.values(iterable).includes(value);
    }

    return false;
  };
});

var indexOf$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.indexOf = (iterable, value, fromIndex) => {
    var length = iterable.length;
    var i = 0;

    if (fromIndex) {
      i = fromIndex;

      if (i < 0) {
        i += length;
        /* istanbul ignore else */

        if (i < 0) {
          i = 0;
        }
      }
    }

    for (; i < length; i++) {
      if (iterable[i] === value) {
        return i;
      }
    }

    return -1;
  };
});

var intersection = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.intersection = (target, source) => {
    var common = [];
    var hash = new Set(target);
    var found = new Set();

    for (var value of source) {
      if (hash.has(value) && !found.has(value)) {
        common.push(value);
        found.add(value);
      }
    }

    return [...common];
  };
});

var isArguments$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isArguments = value => getType.getType(value) === "[object Arguments]";
});

var isArrayOfType = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isArrayOfType = (value, type) => isArray$4.isArray(value) && value.every(element => typeof element === type);
});

var isBetween = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isBetween = (value, min, max) => value > min && value < max;
});

var isBigint = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isBigInt = value => typeof value === "bigint";
});
/*@__PURE__*/unwrapExports(isBigint);

var isBooleanArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isBooleanArray = value => isArrayOfType.isArrayOfType(value, "boolean");
});

var isBoolean = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isBoolean = value => typeof value === "boolean";
});

var isBuffer$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isBuffer = value => Buffer.isBuffer(value);
});

var isConstructor = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isConstructor = value => !!value.prototype && !!value.prototype.constructor.name;
});

var isDate$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isDate = value => value instanceof Date;
});

var isEmptyArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isEmptyArray = value => isArray$4.isArray(value) && value.length <= 0;
});

var isMap$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isMap = value => value instanceof Map;
});

var isEmptyMap = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isEmptyMap = value => isMap$1.isMap(value) && value.size <= 0;
});

var isEmptyObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isEmptyObject = value => isObject$3.isObject(value) && Object.keys(value).length <= 0;
});

var isSet$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isSet = value => value instanceof Set;
});

var isEmptySet = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isEmptySet = value => isSet$1.isSet(value) && value.size <= 0;
});

var isEmpty = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isEmpty = value => {
    if (!value) {
      return true;
    }

    if (value instanceof Map || value instanceof Set) {
      return value.size <= 0;
    }

    if (typeof value === "object" && Object.keys(value).length <= 0) {
      return true;
    }

    return value.length <= 0;
  };
});

var fastDeepEqual = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;

    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!equal(a[i], b[i])) return false;
      }

      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
    }

    for (i = length; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  } // true if both NaN, false otherwise


  return a !== a && b !== b;
};

var isEqual$1 = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var fast_deep_equal_1 = __importDefault(fastDeepEqual);

  exports.isEqual = fast_deep_equal_1.default;
});

var isError$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isError = value => value instanceof Error;
});

var isFalse = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isFalse = value => value === false;
});

var isGit = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isGit = value => new RegExp(/(?:git|ssh|https?|git@[-\w.]+):(\/\/)?(.*?)(\.git)(\/?|\#[-\d\w._]+?)$/).test(value);
});

var isGreaterThanOrEqual = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isGreaterThanOrEqual = (a, b) => a >= b;
});

var isGreaterThan = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isGreaterThan = (a, b) => a > b;
});

var isLessThanOrEqual = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isLessThanOrEqual = (a, b) => a <= b;
});

var isLessThan = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isLessThan = (a, b) => a < b;
});

var isMatch = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isMatch = (value, pattern) => new RegExp(pattern).test(value);
});

var isNegativeZero = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNegativeZero = value => Object.is(value, -0);
});

var isNumber$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNumber = value => typeof value === "number";
});

var isNegative = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNegative = value => isNumber$1.isNumber(value) && value < 0;
});

var isNil = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNil = value => isUndefined.isUndefined(value) || value === null;
});

var isNotBetween = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNotBetween = (value, a, b) => !isBetween.isBetween(value, a, b);
});

var isNotEqual = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNotEqual = (a, b) => !isEqual$1.isEqual(a, b);
});

var isNumberArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isNumberArray = value => isArrayOfType.isArrayOfType(value, "number");
});

var isPositiveZero = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isPositiveZero = value => Object.is(value, 0);
});

var isPositive = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isPositive = value => isNumber$1.isNumber(value) && value > 0;
});

var isPromise$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isPromise = value => value instanceof Promise;
});

var isRegExp$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isRegExp = value => value instanceof RegExp;
});

var protocols = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.protocols = value => value.substring(0, value.indexOf("://")).split("+").filter(Boolean);
});

var isSsh = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isSSH = value => {
    var results = protocols.protocols(value);

    if (results.includes("ssh") || results.includes("rsync") || results.includes("git")) {
      return true;
    }

    value = value.substring(value.indexOf("://") + 3);
    return value.indexOf("@") < value.indexOf(":");
  };
});

var isStringArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isStringArray = value => isArrayOfType.isArrayOfType(value, "string");
});

var isSymbol$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isSymbol = value => typeof value === "symbol";
});

var isTrue = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isTrue = value => value === true;
});

var isUri = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isURI = value => new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?").test(value);
});

var isUrl = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isURL = value => value instanceof url_1.URL;
});

var isWeakMap = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isWeakMap = value => value instanceof WeakMap;
});

var isWeakSet = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.isWeakSet = value => value instanceof WeakSet;
});

var kebabCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.kebabCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? "-" : "") + word);
});

var keyBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.keyBy = (iterable, iteratee) => iterable.reduce((result, value) => {
    result[iteratee(value)] = value;
    return result;
  }, {});
});

var keysIn = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.keysIn = value => {
    var prototype = Object.getPrototypeOf(value);
    return [...new Set(Object.getOwnPropertyNames(value).concat(prototype ? exports.keysIn(prototype) : []))];
  };
});

var keys$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.keys = value => Object.keys(value);
});

var lastIndexOf = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.lastIndexOf = (subject, target, fromIndex) => {
    var length = subject.length;
    var i = length - 1;

    if (fromIndex) {
      i = fromIndex;

      if (i < 0) {
        i += length;
      }
    }

    for (; i >= 0; i--) {
      if (subject[i] === target) {
        return i;
      }
    }

    return -1;
  };
});

var lastMapEntry = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.lastMapEntry = map => Array.from(map)[map.size - 1];
});

var lastMapKey = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.lastMapKey = map => lastMapEntry.lastMapEntry(map)[0];
});

var lastMapValue = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.lastMapValue = map => lastMapEntry.lastMapEntry(map)[1];
});

var last = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.last = values => values[values.length - 1];
});

var lowerCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.lowerCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? " " : "") + word.toLowerCase());
});

var lowerFirst = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.lowerFirst = value => value[0].toLowerCase() + value.slice(1);
});

var mapValues = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.mapValues = (iterable, iteratee) => {
    var keys = Object.keys(iterable);
    var result = {};

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      result[key] = iteratee(iterable[key], key, iterable);
    }

    return result;
  };
});

var map$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.map = (iterable, iteratee) => isArray$4.isArray(iterable) ? mapArray.mapArray(iterable, iteratee) : mapObject.mapObject(iterable, iteratee);
});

var maxBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.maxBy = (iterable, iteratee) => {
    var values = mapArray.mapArray(iterable, iteratee);
    var index = 0;
    var smallest = values[index];

    for (var i = 0; i < values.length; i++) {
      if (values[i] > smallest) {
        smallest = values[i];
        index = i;
      }
    }

    return iterable[index];
  };
});

var max = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.max = values => {
    var max = values[0];

    for (var i = 0; i < values.length; i++) {
      var value = values[i];
      max = value > max ? value : max;
    }

    return max;
  };
});

var isMergeableObject$1 = function isMergeableObject(value) {
  return isNonNullObject$1(value) && !isSpecial$1(value);
};

function isNonNullObject$1(value) {
  return !!value && typeof value === 'object';
}

function isSpecial$1(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement$1(value);
} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


var canUseSymbol$1 = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE$1 = canUseSymbol$1 ? Symbol.for('react.element') : 0xeac7;

function isReactElement$1(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE$1;
}

function emptyTarget$1(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified$1(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge$1(emptyTarget$1(value), value, options) : value;
}

function defaultArrayMerge$1(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified$1(element, options);
  });
}

function getMergeFunction$1(key, options) {
  if (!options.customMerge) {
    return deepmerge$1;
  }

  var customMerge = options.customMerge(key);
  return typeof customMerge === 'function' ? customMerge : deepmerge$1;
}

function getEnumerableOwnPropertySymbols$1(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}

function getKeys$1(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols$1(target));
}

function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
} // Protects from prototype poisoning and unexpected merging up the prototype chain.


function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.
}

function mergeObject$1(target, source, options) {
  var destination = {};

  if (options.isMergeableObject(target)) {
    getKeys$1(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified$1(target[key], options);
    });
  }

  getKeys$1(source).forEach(function (key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }

    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction$1(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified$1(source[key], options);
    }
  });
  return destination;
}

function deepmerge$1(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge$1;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject$1; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
  // implementations can use it. The caller may not replace it.

  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified$1;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified$1(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject$1(target, source, options);
  }
}

deepmerge$1.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge$1(prev, next, options);
  }, {});
};

var deepmerge_1$1 = deepmerge$1;
var cjs$1 = deepmerge_1$1;

var merge = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var deepmerge_1 = __importDefault(cjs$1);

  exports.merge = deepmerge_1.default;
});

var minBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.minBy = (iterable, iteratee) => {
    var values = mapArray.mapArray(iterable, iteratee);
    var index = 0;
    var smallest = values[index];

    for (var i = 0; i < values.length; i++) {
      if (values[i] < smallest) {
        smallest = values[i];
        index = i;
      }
    }

    return iterable[index];
  };
});

var min = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.min = values => {
    var min = values[0];

    for (var i = 0; i < values.length; i++) {
      var value = values[i];
      min = value < min ? value : min;
    }

    return min;
  };
});

var nsect = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var assert_1 = __importDefault(assert);
  /**
   * Perform an N-ary (e.g. binary search for N=2) on a given sorted sequence of elements.
   * It would find the first (lowest) element that matches according to a provided probe function.
   */


  class NSect {
    /**
     * Constructor.
     * @param {Number} nAry type of search to perform.
     * @param {Function} probe a probe callback function, it will be passed an array
     * of indexes, in ascending order, always with length nAry + 1 and it should return one of those
     * indexes, the last (highest) that matches the search criteria. For the algorithm to work the
     * sequence must be sorted - all elements that are lower than some must match and all elements
     * higher than that one must not match. This probe function will be called logA(sequence length)
     * times, where A, the base of the logarithm is equal to nAry.
     */
    constructor(nAry, probe) {
      this.nAry = nAry;
      this.probe = probe;
    }
    /**
     * Find the first (lowest) element satisfying a condition as defined by the probe function
     * in a range [low, high].
     * @param {Number} low lowest interval boundary (inclusive)
     * @param {Number} high highest interval boundary (inclusive)
     * @return {Number} the index of the first (lowest) element that satisfies the condition
     */


    find(low, high) {
      var _this = this;

      return _asyncToGenerator(function* () {
        var highestMatching;

        for (;;) {
          var indexesToProbe = _this.calcProbes(low, high);

          var temp = yield _this.probe(indexesToProbe);

          if (temp === undefined) {
            break;
          }

          highestMatching = temp;

          if (low + _this.nAry >= high) {
            // The range is narrowed so much that we probed every element in the range.
            // No need to narrow further - highestMatching contains the definitive result.
            break;
          } // If we probed for elements at heights, for example: 1000, 1100, 1200, 1300
          // and the probe returned that the highest matching is at:
          // A. 1300 (the highest we probed for), then we end the search and highestMatching
          //    contains the definitive result. One of the two happened:
          //    a. this is the first iteration of the loop and all elements in the sequence match, or
          //    b. this is the 2+ iteration and on the previous iteration the probe returned
          //       that 1301 is not a match (otherwise we wouldn't be probing [1000, 1300]).
          // B. 1100 (anything other than the highest), then this implies that the element
          //    at 1200 is not a match. So in the next iteration we probe for elements between
          //    1101 and 1199.
          // Case A.


          if (highestMatching === indexesToProbe[indexesToProbe.length - 1]) {
            break;
          } // Case B. From the example above, we have:
          // highestMatching = 1100
          // indexesToProbe[0] = 1000, is a match
          // indexesToProbe[1] = 1100, is a match
          // indexesToProbe[2] = 1200, is not a match
          // indexesToProbe[3] = 1300, is not a match
          // we will get indexOfHighestMatching = 1, and for the next iteration:
          // low = 1100 + 1 = 1101
          // high = indexesToProbe[1 + 1] - 1 = indexesToProbe[2] - 1 = 1200 - 1 = 1199


          var indexOfHighestMatching = indexesToProbe.indexOf(highestMatching);
          assert_1.default.notStrictEqual(indexOfHighestMatching, -1);
          assert_1.default(indexOfHighestMatching < indexesToProbe.length - 1);

          if (indexesToProbe[indexOfHighestMatching] + 1 === indexesToProbe[indexOfHighestMatching + 1]) {
            // In a narrow range, it may happen that:
            // highestMatching = 1100
            // indexesToProbe[0] = 1099, is a match
            // indexesToProbe[1] = 1100, is a match
            // indexesToProbe[2] = 1101, is not a match
            // indexesToProbe[3] = 1103, is not a match
            // indexOfHighestMatching = 1
            // Then we know highestMatching is the definitive result because the probe
            // declared that the data at index 1100 matches and the data at index 1101
            // does not match.
            break;
          }

          low = highestMatching + 1;
          high = indexesToProbe[indexOfHighestMatching + 1] - 1;
        }

        return highestMatching;
      })();
    }
    /**
     * Given an interval [low, high], split it in `nAry` intervals and return those intervals'
     * boundaries.
     * For example (assuming `nAry` is 8):
     * [1, 81] -> [1, 11, 21, 31, 41, 51, 61, 71, 81]
     * @param {Number} low lower boundary of the interval to split
     * @param {Number} high higher boundary of the interval to split
     * @return {Array} intervals' boundaries
     */


    calcProbes(low, high) {
      assert_1.default(low <= high, "".concat(low, " <= ").concat(high));
      var diff = high - low;
      var p = new Set();

      for (var i = 0; i < this.nAry + 1; i++) {
        var h = low + Math.round(diff * i / this.nAry);
        p.add(h);
      }

      return Array.from(p);
    }

  }

  exports.NSect = NSect;
});

var numberArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.numberArray = amount => [...Array(amount).keys()];
});

var numberToHex = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.numberToHex = function (num) {
    var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
    var indexHex = Number(num).toString(16);
    return "0".repeat(padding - indexHex.length) + indexHex;
  };
});

var omitBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.omitBy = (iterable, iteratee) => filter$1.filter(iterable, value => !iteratee(value));
});

// >>> HELPERS <<<
var orderHandler = function orderHandler(comparer) {
  return function (a, b, order) {
    return comparer(a, b, order) * order;
  };
};

var throwInvalidConfigError = function throwInvalidConfigError(context) {
  throw Error("Invalid sort config: " + context);
};

var unpackObjectSorter = function unpackObjectSorter(sortByObj) {
  var _a = sortByObj || {},
      asc = _a.asc,
      desc = _a.desc;

  var order = asc ? 1 : -1;
  var sortBy = asc || desc;

  if (asc && desc) {
    throw throwInvalidConfigError('Ambiguous object with `asc` and `desc` config properties');
  }

  if (!sortBy) {
    throwInvalidConfigError('Expected `asc` or `desc` property');
  }

  var comparer = sortByObj.comparer && orderHandler(sortByObj.comparer);
  return {
    order: order,
    sortBy: sortBy,
    comparer: comparer
  };
}; // >>> SORTERS <<<


var multiPropertySorterProvider = function multiPropertySorterProvider(defaultComparer) {
  return function multiPropertySorter(sortBy, sortByArray, depth, order, comparer, a, b) {
    var valA;
    var valB;

    if (typeof sortBy === 'string') {
      valA = a[sortBy];
      valB = b[sortBy];
    } else if (typeof sortBy === 'function') {
      valA = sortBy(a);
      valB = sortBy(b);
    } else {
      var objectSorterConfig = unpackObjectSorter(sortBy);
      return multiPropertySorter(objectSorterConfig.sortBy, sortByArray, depth, objectSorterConfig.order, objectSorterConfig.comparer || defaultComparer, a, b);
    }

    var equality = comparer(valA, valB, order);

    if (sortByArray.length > depth && (equality === 0 || valA == null && valB == null)) {
      return multiPropertySorter(sortByArray[depth], sortByArray, depth + 1, order, comparer, a, b);
    }

    return equality;
  };
};

var sort = function sort(order, ctx, sortBy, comparer) {
  var _a;

  if (!Array.isArray(ctx)) {
    return ctx;
  } // Unwrap sortBy if array with only 1 value


  if (Array.isArray(sortBy) && sortBy.length < 2) {
    _a = sortBy, sortBy = _a[0];
  }

  var sorter;

  if (sortBy === undefined || sortBy === true) {
    sorter = function sorter(a, b) {
      return comparer(a, b, order);
    };
  } else if (typeof sortBy === 'string') {
    if (sortBy.includes('.')) {
      throw throwInvalidConfigError('String syntax not allowed for nested properties.');
    }

    sorter = function sorter(a, b) {
      return comparer(a[sortBy], b[sortBy], order);
    };
  } else if (typeof sortBy === 'function') {
    sorter = function sorter(a, b) {
      return comparer(sortBy(a), sortBy(b), order);
    };
  } else if (Array.isArray(sortBy)) {
    sorter = multiPropertySorterProvider(comparer).bind(undefined, sortBy[0], sortBy, 1, order, comparer);
  } else {
    var objectSorterConfig = unpackObjectSorter(sortBy);
    return sort(objectSorterConfig.order, ctx, objectSorterConfig.sortBy, objectSorterConfig.comparer || comparer);
  }

  return ctx.sort(sorter);
};

function createSortInstance(opts) {
  var comparer = orderHandler(opts.comparer);
  return function (ctx) {
    return {
      /**
       * Sort array in ascending order. Mutates provided array by sorting it.
       * @example
       * sort([3, 1, 4]).asc();
       * sort(users).asc(u => u.firstName);
       * sort(users).asc([
       *   U => u.firstName
       *   u => u.lastName,
       * ]);
       */
      asc: function asc(sortBy) {
        return sort(1, ctx, sortBy, comparer);
      },

      /**
       * Sort array in descending order. Mutates provided array by sorting it.
       * @example
       * sort([3, 1, 4]).desc();
       * sort(users).desc(u => u.firstName);
       * sort(users).desc([
       *   U => u.firstName
       *   u => u.lastName,
       * ]);
       */
      desc: function desc(sortBy) {
        return sort(-1, ctx, sortBy, comparer);
      },

      /**
       * Sort array in ascending or descending order. It allows sorting on multiple props
       * in different order for each of them. Mutates provided array by sorting it.
       * @example
       * sort(users).by([
       *  { asc: u => u.score }
       *  { desc: u => u.age }
       * ]);
       */
      by: function by(sortBy) {
        return sort(1, ctx, sortBy, comparer);
      }
    };
  };
}

var defaultSort = createSortInstance({
  comparer: function comparer(a, b, order) {
    if (a == null) return order;
    if (b == null) return -order;
    if (a < b) return -1;
    if (a === b) return 0;
    return 1;
  }
}); // Attach createNewInstance to sort function

defaultSort['createNewInstance'] = createSortInstance;

var orderBy = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var fast_sort_1 = __importDefault(defaultSort);

  exports.orderBy = (values, iteratees, orders) => {
    if (isString.isString(iteratees)) {
      iteratees = [iteratees];
    } else if (isFunction$2.isFunction(iteratees)) {
      iteratees = [iteratees];
    }

    if (isString.isString(orders)) {
      orders = [orders];
    }

    return fast_sort_1.default(values).by(map$1.map(iteratees, (_, index) => ({
      [orders[index]]: iteratees[index]
    })));
  };
});

var ordinal = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var suffixes = ["th", "st", "nd", "rd"];

  exports.ordinal = value => value + (suffixes[value % 100] || suffixes[0]);
});

var parseGitUrl = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var getOwner = value => {
    var string = value.indexOf(":");
    return string > -1 ? value.slice(string + 1) : value;
  };

  exports.parseGitUrl = value => {
    var parsed = url_1.parse(value);

    if (value.startsWith("git@")) {
      parsed.host = url_1.parse("https://" + value).host;
    }

    if (!parsed.host) {
      throw new Error("Failed to find a host.");
    } // @ts-ignore - The previous host check will already exit if there are problems
    // but for some reason the node typings say the path could be undefined.
    // This doesn't seem to be the case and it always defaults to at least the host.


    var segments = parsed.path.split("/").filter(Boolean);

    if (segments.length === 1) {
      throw new Error("Failed to find a name.");
    }

    var owner = getOwner(segments[0]);
    var name = segments[1].replace(/^\W+|\.git$/g, "");
    var result = {
      host: parsed.host,
      owner,
      name,
      branch: (parsed.hash ? last.last(parsed.hash.split("#")) : segments[2]) || "master",
      repo: owner + "/" + name
    };
    return result;
  };
});

var parseUri = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.parseURI = value => {
    var matches = new RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?").exec(value);
    /* istanbul ignore next */

    if (isNull.isNull(matches)) {
      return undefined;
    }

    return {
      scheme: matches[2],
      authority: matches[4],
      path: matches[5],
      query: matches[7],
      fragment: matches[9]
    };
  };
});

var lib = createCommonjsModule(function (module, exports) {

  var internals = {
    suspectRx: /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*\:/
  };

  exports.parse = function (text) {
    // Normalize arguments
    var firstOptions = typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'object' && (arguments.length <= 1 ? undefined : arguments[1]);
    var reviver = (arguments.length <= 1 ? 0 : arguments.length - 1) > 1 || !firstOptions ? arguments.length <= 1 ? undefined : arguments[1] : undefined;
    var options = (arguments.length <= 1 ? 0 : arguments.length - 1) > 1 && (arguments.length <= 2 ? undefined : arguments[2]) || firstOptions || {}; // Parse normally, allowing exceptions

    var obj = JSON.parse(text, reviver); // options.protoAction: 'error' (default) / 'remove' / 'ignore'

    if (options.protoAction === 'ignore') {
      return obj;
    } // Ignore null and non-objects


    if (!obj || typeof obj !== 'object') {
      return obj;
    } // Check original string for potential exploit


    if (!text.match(internals.suspectRx)) {
      return obj;
    } // Scan result for proto keys


    exports.scan(obj, options);
    return obj;
  };

  exports.scan = function (obj) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var next = [obj];

    while (next.length) {
      var nodes = next;
      next = [];

      for (var node of nodes) {
        if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {
          // Avoid calling node.hasOwnProperty directly
          if (options.protoAction !== 'remove') {
            throw new SyntaxError('Object contains forbidden prototype property');
          }

          delete node.__proto__;
        }

        for (var key in node) {
          var value = node[key];

          if (value && typeof value === 'object') {
            next.push(node[key]);
          }
        }
      }
    }
  };

  exports.safeParse = function (text, reviver) {
    try {
      return exports.parse(text, reviver);
    } catch (ignoreError) {
      return null;
    }
  };
});

var parse$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.parse = json => lib.parse(json);
});

var partition = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.partition = (iterable, iteratee) => iterable.reduce((result, value) => {
    result[iteratee(value) ? 0 : 1].push(value);
    return result;
  }, [[], []]);
});

var pascalCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pascalCase = value => internal.compoundWords(value, (result, word) => result + upperFirst.upperFirst(word));
});

var pathCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pathCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? "/" : "") + word);
});

var pickBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pickBy = (iterable, iteratee) => filter$1.filter(iterable, value => iteratee(value));
});

var pick = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pick = (iterable, keys) => {
    var newValues = {};

    for (var key of keys) {
      newValues[key] = iterable[key];
    }

    return newValues;
  };
});

var pluck = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pluck = (input, field) => {
    var plucked = [];
    var count = 0;

    for (var i = 0; i < input.length; i++) {
      var value = input[i];

      if (value != null && value[field] !== undefined) {
        plucked[count++] = value[field];
      }
    }

    return plucked;
  };
});

var pluralize = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pluralize = function (value) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var output = value;

    if (count > 1) {
      output += "s";
    }

    return inclusive ? "".concat(count, " ").concat(output) : output;
  };
});

var prettyBytes = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var UNITS = ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];

  exports.prettyBytes = bytes => {
    if (bytes === 0 || bytes < 1) {
      return "".concat(bytes, " ").concat(UNITS[0]);
    }

    var exponent = Math.min(Math.floor(Math.log10(bytes) / 3), UNITS.length - 1);
    return Number((bytes / Math.pow(1000, exponent)).toPrecision(3)).toLocaleString() + " " + UNITS[exponent];
  };
});

var prettyTime = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var Symbols;

  (function (Symbols) {
    Symbols["days"] = "d";
    Symbols["hours"] = "h";
    Symbols["minutes"] = "m";
    Symbols["seconds"] = "s";
    Symbols["milliseconds"] = "ms";
    Symbols["microseconds"] = "\u00B5s";
    Symbols["nanoseconds"] = "ns";
  })(Symbols || (Symbols = {}));

  exports.prettyTime = value => {
    var fragments = [];
    var types = {
      days: Math.floor(value / 86400000),
      hours: Math.floor(value / 3600000) % 24,
      minutes: Math.floor(value / 60000) % 60,
      seconds: Math.floor(value / 1000) % 60,
      milliseconds: Math.floor(value) % 1000,
      microseconds: Math.floor(value * 1000) % 1000,
      nanoseconds: Math.floor(value * 1e6) % 1000
    };

    for (var type of ["days", "hours", "minutes", "seconds", "milliseconds", "microseconds", "nanoseconds"]) {
      var _value = types[type];

      if (_value && _value > 0) {
        fragments.push("".concat(_value).concat(Symbols[type]));
      }
    }

    return fragments.join(" ");
  };
});

var pullAllBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pullAllBy = (iterable, values, iteratee) => {
    var iterateeValues = {};
    return filter$1.filter(iterable, iterableItem => {
      var itemValue = iteratee(iterableItem);

      if (!iterateeValues[itemValue]) {
        iterateeValues[itemValue] = values.map(value => iteratee(value));
      }

      return !iterateeValues[itemValue].includes(itemValue);
    });
  };
});

var pull = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pull = function (iterable) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return filter$1.filter(iterable, item => !args.includes(item));
  };
});

var pullAll = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.pullAll = (iterable, iteratees) => pull.pull(iterable, ...iteratees);
});

var randomBase64 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.randomBase64 = length => crypto_1.randomBytes(Math.ceil(length * 3 / 4)).toString("base64").slice(0, length).replace(/\+/g, "0").replace(/\//g, "0");
});

var randomBits = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.randomBits = bits => crypto_1.randomBytes(Math.ceil(bits / 8));
});

var randomHex = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.randomHex = length => crypto_1.randomBytes(Math.ceil(length / 2)).toString("hex").slice(0, length);
});

var randomNumber = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.randomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);
});

var reduceObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reduceObject = (iterable, iteratee, initialValue) => {
    var keys = Object.keys(iterable);
    var result = initialValue;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      result = iteratee(result, iterable[key], key, iterable);
    }

    return result;
  };
});

var reduceRightArray = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reduceRightArray = (iterable, iteratee, initialValue) => {
    var result = initialValue;

    for (var i = iterable.length - 1; i >= 0; i--) {
      result = iteratee(result, iterable[i], i, iterable);
    }

    return result;
  };
});

var reduceRightObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reduceRightObject = (iterable, iteratee, initialValue) => {
    var keys = Object.keys(iterable);
    var result = initialValue;

    for (var i = keys.length - 1; i >= 0; i--) {
      var key = keys[i];
      result = iteratee(result, iterable[key], key, iterable);
    }

    return result;
  };
});

var reduceRight = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reduceRight = (iterable, iteratee, initialValue) => isArray$4.isArray(iterable) ? reduceRightArray.reduceRightArray(iterable, iteratee, initialValue) : reduceRightObject.reduceRightObject(iterable, iteratee, initialValue);
});

var reduce$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reduce = (iterable, iteratee, initialValue) => isArray$4.isArray(iterable) ? reduceArray.reduceArray(iterable, iteratee, initialValue) : reduceObject.reduceObject(iterable, iteratee, initialValue);
});

var reject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reject = (iterable, iteratee) => filter$1.filter(iterable, item => !iteratee(item));
});

var reverse$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.reverse = value => value.split("").reverse().join("");
});

var safeEqual$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.safeEqual = (a, b) => {
    try {
      return crypto_1.timingSafeEqual(a, b);
    } catch (_a) {
      return false;
    }
  };
});

var semver = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  }); // @ts-ignore

  var {
    compare
  } = new Intl.Collator(0, {
    numeric: 1
  });

  exports.comparator = (value, other) => {
    var a = value.split(".");
    var b = other.split(".");
    var hasSameMajor = compare(a[0], b[0]);

    if (hasSameMajor) {
      return hasSameMajor;
    }

    var hasSameMinor = compare(a[1], b[1]);

    if (hasSameMinor) {
      return hasSameMinor;
    }

    return compare(a.slice(2).join("."), b.slice(2).join("."));
  };

  var isEqual = (value, other) => exports.comparator(value, other) === 0;

  var isGreaterThan = (value, other) => exports.comparator(value, other) === 1;

  var isGreaterThanOrEqual = (value, other) => isGreaterThan(value, other) || isEqual(value, other);

  var isLessThan = (value, other) => exports.comparator(value, other) === -1;

  var isLessThanOrEqual = (value, other) => isLessThan(value, other) || isEqual(value, other);

  exports.semver = {
    isEqual,
    isGreaterThan,
    isGreaterThanOrEqual,
    isLessThan,
    isLessThanOrEqual
  };
});

var shuffle = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.shuffle = iterable => {
    var shuffledValues = cloneArray.cloneArray(iterable);

    for (var i = 0; i < shuffledValues.length; i++) {
      var rand = Math.floor(Math.random() * (i + 1));
      var value = shuffledValues[i];
      shuffledValues[i] = shuffledValues[rand];
      shuffledValues[rand] = value;
    }

    return shuffledValues;
  };
});

var sleep = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sleep = util.promisify(setTimeout);
});

var snakeCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.snakeCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? "_" : "") + word);
});

var sortByDesc = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var fast_sort_1 = __importDefault(defaultSort);

  exports.sortByDesc = (values, iteratees) => fast_sort_1.default(values).desc(iteratees);
});

var sortBy = createCommonjsModule(function (module, exports) {

  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
    return mod && mod.__esModule ? mod : {
      "default": mod
    };
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var fast_sort_1 = __importDefault(defaultSort);

  exports.sortBy = (values, iteratees) => fast_sort_1.default(values).asc(iteratees);
});

var startCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.startCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? " " : "") + upperFirst.upperFirst(word));
});

var tail = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.tail = values => slice$1.slice(values, 1, values.length);
});

var take = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.take = function (iterable) {
    var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    return slice$1.slice(iterable, 0, amount);
  };
});

var toString_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.toString = value => {
    if (isNil.isNil(value)) {
      return "";
    }

    return isString.isString(value) ? value : String(value);
  };
});

var toLower = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.toLower = value => toString_1.toString(value).toLowerCase();
});

var toUpper = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.toUpper = value => toString_1.toString(value).toUpperCase();
});

var trimTrailingSlash = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.trimTrailingSlash = value => value.replace(/\/+$/g, "");
});

var truncate$2 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.truncate = function (value) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      length: 30,
      omission: "...",
      omissionPosition: "right"
    };

    if (!options.length || options.length < 0) {
      options.length = 30;
    }

    if (!options.omission) {
      options.omission = "...";
    }

    if (!options.omissionPosition) {
      options.omissionPosition = "right";
    }

    var totalLength = value.length + options.omission.length;

    if (isLessThanOrEqual.isLessThanOrEqual(totalLength, options.length)) {
      return value;
    }

    if (options.omissionPosition === "right") {
      return value.substring(0, options.length - options.omission.length) + options.omission;
    }

    if (options.omissionPosition === "middle") {
      var odd = options.length % 2;
      var truncationLength = Math.floor((options.length - 1) / 2);
      return "".concat(value.slice(0, truncationLength - odd)).concat(options.omission).concat(value.slice(value.length - truncationLength + 1));
    }

    return options.omission + value.substring(value.length - options.length + options.omission.length);
  };
});

var uniqBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.uniqBy = (iterable, iteratee) => {
    var result = [];
    var set = new Set();

    for (var i = 0; i < iterable.length; i++) {
      var value = iteratee(iterable[i]);

      if (set.has(value)) {
        continue;
      }

      set.add(value);
      result.push(iterable[i]);
    }

    return result;
  };
});

var unionBy = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.unionBy = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var iteratee = args.pop();
    return uniqBy.uniqBy(flatten.flatten(args), iteratee);
  };
});

var uniq = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.uniq = iterable => {
    var result = [];

    for (var i = 0; i < iterable.length; i++) {
      var value = iterable[i];

      if (indexOf$1.indexOf(result, value) > -1) {
        continue;
      }

      result.push(value);
    }

    return result;
  };
});

var union = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.union = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return uniq.uniq(flatten.flatten(args));
  };
});

var upperCase = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.upperCase = value => internal.compoundWords(value, (result, word, index) => result + (index ? " " : "") + word.toUpperCase());
});

var zipObject = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.zipObject = (keys, values) => {
    var result = {};

    for (var i = 0; i < keys.length; i++) {
      result[keys[i]] = values[i];
    }

    return result;
  };
});

var orderBy$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.orderBy = (values, iteratees, orders) => orderBy.orderBy([...values], iteratees, orders);
});

var sortByDesc$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.sortByDesc = (values, iteratees) => sortByDesc.sortByDesc([...values], iteratees);
});

var sortBy$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.sortBy = (values, iteratees) => sortBy.sortBy([...values], iteratees);
});

var immutable = createCommonjsModule(function (module, exports) {

  function __export(m) {
    for (var p in m) {
      if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
  }

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  __export(orderBy$1);

  __export(sortByDesc$1);

  __export(sortBy$1);
});

var dist = createCommonjsModule(function (module, exports) {

  function __export(m) {
    for (var p in m) {
      if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
  }

  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) {
      if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result["default"] = mod;
    return result;
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  }); // Private

  __export(internal); // Public


  __export(assign);

  __export(at);

  __export(base64$2);

  __export(bigNumber);

  __export(binary);

  __export(camelCase);

  __export(cappedMap);

  __export(cappedSet);

  __export(castArray);

  __export(chars);

  __export(chunk);

  __export(cloneArray);

  __export(cloneDeep);

  __export(cloneObject);

  __export(clone);

  __export(collection);

  __export(concat$5);

  __export(constantCase);

  __export(dotCase);

  __export(dotEnv);

  __export(every);

  __export(expandTilde);

  __export(extension);

  __export(fill);

  __export(filterArray);

  __export(filterObject);

  __export(filter$1);

  __export(findIndex);

  __export(findKey);

  __export(find);

  __export(firstMapEntry);

  __export(firstMapKey);

  __export(firstMapValue);

  __export(flatten);

  __export(formatNumber);

  __export(formatString);

  __export(getPathSegments);

  __export(getType);

  __export(get$5);

  __export(groupBy);

  __export(hasProperty);

  __export(hasSomeProperty);

  __export(has$2);

  __export(hashString);

  __export(head);

  __export(headerCase);

  __export(hex);

  __export(http);

  __export(includes);

  __export(indexOf$1);

  __export(intersection);

  __export(isArguments$2);

  __export(isArrayOfType);

  __export(isArray$4);

  __export(isAsyncFunction);

  __export(isBetween);

  __export(isBigint);

  __export(isBooleanArray);

  __export(isBoolean);

  __export(isBuffer$2);

  __export(isConstructor);

  __export(isDate$1);

  __export(isEmptyArray);

  __export(isEmptyMap);

  __export(isEmptyObject);

  __export(isEmptySet);

  __export(isEmpty);

  __export(isEnumerable);

  __export(isEqual$1);

  __export(isError$1);

  __export(isFalse);

  __export(isFunction$2);

  __export(isGit);

  __export(isGreaterThanOrEqual);

  __export(isGreaterThan);

  __export(isLessThanOrEqual);

  __export(isLessThan);

  __export(isMap$1);

  __export(isMatch);

  __export(isNegativeZero);

  __export(isNegative);

  __export(isNil);

  __export(isNotBetween);

  __export(isNotEqual);

  __export(isNull);

  __export(isNumberArray);

  __export(isNumber$1);

  __export(isObject$3);

  __export(isPositiveZero);

  __export(isPositive);

  __export(isPromise$1);

  __export(isRegExp$1);

  __export(isSet$1);

  __export(isSsh);

  __export(isStringArray);

  __export(isString);

  __export(isSymbol$2);

  __export(isSyncFunction);

  __export(isTrue);

  __export(isUndefined);

  __export(isUri);

  __export(isUrl);

  __export(isWeakMap);

  __export(isWeakSet);

  __export(kebabCase);

  __export(keyBy);

  __export(keysIn);

  __export(keys$1);

  __export(lastIndexOf);

  __export(lastMapEntry);

  __export(lastMapKey);

  __export(lastMapValue);

  __export(last);

  __export(lowerCase);

  __export(lowerFirst);

  __export(mapArray);

  __export(mapObject);

  __export(mapValues);

  __export(map$1);

  __export(maxBy);

  __export(max);

  __export(merge);

  __export(minBy);

  __export(min);

  __export(nsect);

  __export(numberArray);

  __export(numberToHex);

  __export(omitBy);

  __export(orderBy);

  __export(ordinal);

  __export(parseGitUrl);

  __export(parseUri);

  __export(parse$2);

  __export(partition);

  __export(pascalCase);

  __export(pathCase);

  __export(pickBy);

  __export(pick);

  __export(pluck);

  __export(pluralize);

  __export(prettyBytes);

  __export(prettyTime);

  __export(protocols);

  __export(pullAllBy);

  __export(pullAll);

  __export(pull);

  __export(randomBase64);

  __export(randomBits);

  __export(randomHex);

  __export(randomNumber);

  __export(reduceArray);

  __export(reduceObject);

  __export(reduceRightArray);

  __export(reduceRightObject);

  __export(reduceRight);

  __export(reduce$1);

  __export(reject);

  __export(reverse$1);

  __export(safeEqual$2);

  __export(sample);

  __export(semver);

  __export(set$1);

  __export(shuffle);

  __export(sleep);

  __export(snakeCase);

  __export(some);

  __export(sortByDesc);

  __export(sortBy);

  __export(startCase);

  __export(stringify$1);

  __export(tail);

  __export(take);

  __export(toLower);

  __export(toString_1);

  __export(toUpper);

  __export(trimTrailingSlash);

  __export(truncate$2);

  __export(unionBy);

  __export(union);

  __export(uniqBy);

  __export(uniq);

  __export(unset);

  __export(upperCase);

  __export(upperFirst);

  __export(words);

  __export(zipObject); // Public - Namespaces


  var immutable$1 = __importStar(immutable);

  exports.immutable = immutable$1;
});
var index$5 = /*@__PURE__*/unwrapExports(dist);

var ipaddr = createCommonjsModule(function (module) {
  (function () {
    var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;
    ipaddr = {};
    root = this;

    if ( module !== null && module.exports) {
      module.exports = ipaddr;
    } else {
      root['ipaddr'] = ipaddr;
    }

    matchCIDR = function matchCIDR(first, second, partSize, cidrBits) {
      var part, shift;

      if (first.length !== second.length) {
        throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
      }

      part = 0;

      while (cidrBits > 0) {
        shift = partSize - cidrBits;

        if (shift < 0) {
          shift = 0;
        }

        if (first[part] >> shift !== second[part] >> shift) {
          return false;
        }

        cidrBits -= partSize;
        part += 1;
      }

      return true;
    };

    ipaddr.subnetMatch = function (address, rangeList, defaultName) {
      var k, len, rangeName, rangeSubnets, subnet;

      if (defaultName == null) {
        defaultName = 'unicast';
      }

      for (rangeName in rangeList) {
        rangeSubnets = rangeList[rangeName];

        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
          rangeSubnets = [rangeSubnets];
        }

        for (k = 0, len = rangeSubnets.length; k < len; k++) {
          subnet = rangeSubnets[k];

          if (address.kind() === subnet[0].kind()) {
            if (address.match.apply(address, subnet)) {
              return rangeName;
            }
          }
        }
      }

      return defaultName;
    };

    ipaddr.IPv4 = function () {
      function IPv4(octets) {
        var k, len, octet;

        if (octets.length !== 4) {
          throw new Error("ipaddr: ipv4 octet count should be 4");
        }

        for (k = 0, len = octets.length; k < len; k++) {
          octet = octets[k];

          if (!(0 <= octet && octet <= 255)) {
            throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
          }
        }

        this.octets = octets;
      }

      IPv4.prototype.kind = function () {
        return 'ipv4';
      };

      IPv4.prototype.toString = function () {
        return this.octets.join(".");
      };

      IPv4.prototype.toNormalizedString = function () {
        return this.toString();
      };

      IPv4.prototype.toByteArray = function () {
        return this.octets.slice(0);
      };

      IPv4.prototype.match = function (other, cidrRange) {
        var ref;

        if (cidrRange === void 0) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }

        if (other.kind() !== 'ipv4') {
          throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
        }

        return matchCIDR(this.octets, other.octets, 8, cidrRange);
      };

      IPv4.prototype.SpecialRanges = {
        unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
        broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
        multicast: [[new IPv4([224, 0, 0, 0]), 4]],
        linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
        loopback: [[new IPv4([127, 0, 0, 0]), 8]],
        carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
        "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
        reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
      };

      IPv4.prototype.range = function () {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };

      IPv4.prototype.toIPv4MappedAddress = function () {
        return ipaddr.IPv6.parse("::ffff:" + this.toString());
      };

      IPv4.prototype.prefixLengthFromSubnetMask = function () {
        var cidr, i, k, octet, stop, zeros, zerotable;
        zerotable = {
          0: 8,
          128: 7,
          192: 6,
          224: 5,
          240: 4,
          248: 3,
          252: 2,
          254: 1,
          255: 0
        };
        cidr = 0;
        stop = false;

        for (i = k = 3; k >= 0; i = k += -1) {
          octet = this.octets[i];

          if (octet in zerotable) {
            zeros = zerotable[octet];

            if (stop && zeros !== 0) {
              return null;
            }

            if (zeros !== 8) {
              stop = true;
            }

            cidr += zeros;
          } else {
            return null;
          }
        }

        return 32 - cidr;
      };

      return IPv4;
    }();

    ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
    ipv4Regexes = {
      fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
      longValue: new RegExp("^" + ipv4Part + "$", 'i')
    };

    ipaddr.IPv4.parser = function (string) {
      var match, parseIntAuto, part, shift, value;

      parseIntAuto = function parseIntAuto(string) {
        if (string[0] === "0" && string[1] !== "x") {
          return parseInt(string, 8);
        } else {
          return parseInt(string);
        }
      };

      if (match = string.match(ipv4Regexes.fourOctet)) {
        return function () {
          var k, len, ref, results;
          ref = match.slice(1, 6);
          results = [];

          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(parseIntAuto(part));
          }

          return results;
        }();
      } else if (match = string.match(ipv4Regexes.longValue)) {
        value = parseIntAuto(match[1]);

        if (value > 0xffffffff || value < 0) {
          throw new Error("ipaddr: address outside defined range");
        }

        return function () {
          var k, results;
          results = [];

          for (shift = k = 0; k <= 24; shift = k += 8) {
            results.push(value >> shift & 0xff);
          }

          return results;
        }().reverse();
      } else {
        return null;
      }
    };

    ipaddr.IPv6 = function () {
      function IPv6(parts, zoneId) {
        var i, k, l, len, part, ref;

        if (parts.length === 16) {
          this.parts = [];

          for (i = k = 0; k <= 14; i = k += 2) {
            this.parts.push(parts[i] << 8 | parts[i + 1]);
          }
        } else if (parts.length === 8) {
          this.parts = parts;
        } else {
          throw new Error("ipaddr: ipv6 part count should be 8 or 16");
        }

        ref = this.parts;

        for (l = 0, len = ref.length; l < len; l++) {
          part = ref[l];

          if (!(0 <= part && part <= 0xffff)) {
            throw new Error("ipaddr: ipv6 part should fit in 16 bits");
          }
        }

        if (zoneId) {
          this.zoneId = zoneId;
        }
      }

      IPv6.prototype.kind = function () {
        return 'ipv6';
      };

      IPv6.prototype.toString = function () {
        return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
      };

      IPv6.prototype.toRFC5952String = function () {
        var bestMatchIndex, bestMatchLength, match, regex, string;
        regex = /((^|:)(0(:|$)){2,})/g;
        string = this.toNormalizedString();
        bestMatchIndex = 0;
        bestMatchLength = -1;

        while (match = regex.exec(string)) {
          if (match[0].length > bestMatchLength) {
            bestMatchIndex = match.index;
            bestMatchLength = match[0].length;
          }
        }

        if (bestMatchLength < 0) {
          return string;
        }

        return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);
      };

      IPv6.prototype.toByteArray = function () {
        var bytes, k, len, part, ref;
        bytes = [];
        ref = this.parts;

        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          bytes.push(part >> 8);
          bytes.push(part & 0xff);
        }

        return bytes;
      };

      IPv6.prototype.toNormalizedString = function () {
        var addr, part, suffix;

        addr = function () {
          var k, len, ref, results;
          ref = this.parts;
          results = [];

          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(part.toString(16));
          }

          return results;
        }.call(this).join(":");

        suffix = '';

        if (this.zoneId) {
          suffix = '%' + this.zoneId;
        }

        return addr + suffix;
      };

      IPv6.prototype.toFixedLengthString = function () {
        var addr, part, suffix;

        addr = function () {
          var k, len, ref, results;
          ref = this.parts;
          results = [];

          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(part.toString(16).padStart(4, '0'));
          }

          return results;
        }.call(this).join(":");

        suffix = '';

        if (this.zoneId) {
          suffix = '%' + this.zoneId;
        }

        return addr + suffix;
      };

      IPv6.prototype.match = function (other, cidrRange) {
        var ref;

        if (cidrRange === void 0) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }

        if (other.kind() !== 'ipv6') {
          throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
        }

        return matchCIDR(this.parts, other.parts, 16, cidrRange);
      };

      IPv6.prototype.SpecialRanges = {
        unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
        linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
        multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
        loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
        uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
        ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
        rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
        rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
        '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
        teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
        reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
      };

      IPv6.prototype.range = function () {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };

      IPv6.prototype.isIPv4MappedAddress = function () {
        return this.range() === 'ipv4Mapped';
      };

      IPv6.prototype.toIPv4Address = function () {
        var high, low, ref;

        if (!this.isIPv4MappedAddress()) {
          throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
        }

        ref = this.parts.slice(-2), high = ref[0], low = ref[1];
        return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
      };

      IPv6.prototype.prefixLengthFromSubnetMask = function () {
        var cidr, i, k, part, stop, zeros, zerotable;
        zerotable = {
          0: 16,
          32768: 15,
          49152: 14,
          57344: 13,
          61440: 12,
          63488: 11,
          64512: 10,
          65024: 9,
          65280: 8,
          65408: 7,
          65472: 6,
          65504: 5,
          65520: 4,
          65528: 3,
          65532: 2,
          65534: 1,
          65535: 0
        };
        cidr = 0;
        stop = false;

        for (i = k = 7; k >= 0; i = k += -1) {
          part = this.parts[i];

          if (part in zerotable) {
            zeros = zerotable[part];

            if (stop && zeros !== 0) {
              return null;
            }

            if (zeros !== 16) {
              stop = true;
            }

            cidr += zeros;
          } else {
            return null;
          }
        }

        return 128 - cidr;
      };

      return IPv6;
    }();

    ipv6Part = "(?:[0-9a-f]+::?)+";
    zoneIndex = "%[0-9a-z]{1,}";
    ipv6Regexes = {
      zoneIndex: new RegExp(zoneIndex, 'i'),
      "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", 'i'),
      transitional: new RegExp("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)" + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), 'i')
    };

    expandIPv6 = function expandIPv6(string, parts) {
      var colonCount, lastColon, part, replacement, replacementCount, zoneId;

      if (string.indexOf('::') !== string.lastIndexOf('::')) {
        return null;
      }

      zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];

      if (zoneId) {
        zoneId = zoneId.substring(1);
        string = string.replace(/%.+$/, '');
      }

      colonCount = 0;
      lastColon = -1;

      while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
        colonCount++;
      }

      if (string.substr(0, 2) === '::') {
        colonCount--;
      }

      if (string.substr(-2, 2) === '::') {
        colonCount--;
      }

      if (colonCount > parts) {
        return null;
      }

      replacementCount = parts - colonCount;
      replacement = ':';

      while (replacementCount--) {
        replacement += '0:';
      }

      string = string.replace('::', replacement);

      if (string[0] === ':') {
        string = string.slice(1);
      }

      if (string[string.length - 1] === ':') {
        string = string.slice(0, -1);
      }

      parts = function () {
        var k, len, ref, results;
        ref = string.split(":");
        results = [];

        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          results.push(parseInt(part, 16));
        }

        return results;
      }();

      return {
        parts: parts,
        zoneId: zoneId
      };
    };

    ipaddr.IPv6.parser = function (string) {
      var addr, k, len, match, octet, octets, zoneId;

      if (ipv6Regexes['native'].test(string)) {
        return expandIPv6(string, 8);
      } else if (match = string.match(ipv6Regexes['transitional'])) {
        zoneId = match[6] || '';
        addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);

        if (addr.parts) {
          octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];

          for (k = 0, len = octets.length; k < len; k++) {
            octet = octets[k];

            if (!(0 <= octet && octet <= 255)) {
              return null;
            }
          }

          addr.parts.push(octets[0] << 8 | octets[1]);
          addr.parts.push(octets[2] << 8 | octets[3]);
          return {
            parts: addr.parts,
            zoneId: addr.zoneId
          };
        }
      }

      return null;
    };

    ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function (string) {
      return this.parser(string) !== null;
    };

    ipaddr.IPv4.isValid = function (string) {

      try {
        new this(this.parser(string));
        return true;
      } catch (error1) {
        return false;
      }
    };

    ipaddr.IPv4.isValidFourPartDecimal = function (string) {
      if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
        return true;
      } else {
        return false;
      }
    };

    ipaddr.IPv6.isValid = function (string) {
      var addr;

      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }

      try {
        addr = this.parser(string);
        new this(addr.parts, addr.zoneId);
        return true;
      } catch (error1) {
        return false;
      }
    };

    ipaddr.IPv4.parse = function (string) {
      var parts;
      parts = this.parser(string);

      if (parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }

      return new this(parts);
    };

    ipaddr.IPv6.parse = function (string) {
      var addr;
      addr = this.parser(string);

      if (addr.parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }

      return new this(addr.parts, addr.zoneId);
    };

    ipaddr.IPv4.parseCIDR = function (string) {
      var maskLength, match, parsed;

      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);

        if (maskLength >= 0 && maskLength <= 32) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, 'toString', {
            value: function value() {
              return this.join('/');
            }
          });
          return parsed;
        }
      }

      throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };

    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {
      var filledOctetCount, j, octets;
      prefix = parseInt(prefix);

      if (prefix < 0 || prefix > 32) {
        throw new Error('ipaddr: invalid IPv4 prefix length');
      }

      octets = [0, 0, 0, 0];
      j = 0;
      filledOctetCount = Math.floor(prefix / 8);

      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }

      if (filledOctetCount < 4) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
      }

      return new this(octets);
    };

    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {
      var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;

      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;

        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }

        return new this(octets);
      } catch (error1) {
        throw new Error('ipaddr: the address does not have IPv4 CIDR format');
      }
    };

    ipaddr.IPv4.networkAddressFromCIDR = function (string) {
      var cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;

      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;

        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }

        return new this(octets);
      } catch (error1) {
        throw new Error('ipaddr: the address does not have IPv4 CIDR format');
      }
    };

    ipaddr.IPv6.parseCIDR = function (string) {
      var maskLength, match, parsed;

      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);

        if (maskLength >= 0 && maskLength <= 128) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, 'toString', {
            value: function value() {
              return this.join('/');
            }
          });
          return parsed;
        }
      }

      throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };

    ipaddr.isValid = function (string) {
      return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };

    ipaddr.parse = function (string) {
      if (ipaddr.IPv6.isValid(string)) {
        return ipaddr.IPv6.parse(string);
      } else if (ipaddr.IPv4.isValid(string)) {
        return ipaddr.IPv4.parse(string);
      } else {
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
      }
    };

    ipaddr.parseCIDR = function (string) {

      try {
        return ipaddr.IPv6.parseCIDR(string);
      } catch (error1) {

        try {
          return ipaddr.IPv4.parseCIDR(string);
        } catch (error1) {
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
        }
      }
    };

    ipaddr.fromByteArray = function (bytes) {
      var length;
      length = bytes.length;

      if (length === 4) {
        return new ipaddr.IPv4(bytes);
      } else if (length === 16) {
        return new ipaddr.IPv6(bytes);
      } else {
        throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
      }
    };

    ipaddr.process = function (string) {
      var addr;
      addr = this.parse(string);

      if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
        return addr.toIPv4Address();
      } else {
        return addr;
      }
    };
  }).call(commonjsGlobal);
});

var isLocalHost = function isLocalHost(ip) {
  var includeNetworkInterfaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  try {
    var parsed = ipaddr.parse(ip);

    if (parsed.range() === "loopback" || ip.startsWith("0") || ["127.0.0.1", "::ffff:127.0.0.1"].includes(ip)) {
      return true;
    }

    if (includeNetworkInterfaces) {
      var interfaces = os.networkInterfaces();
      return Object.keys(interfaces).some(ifname => interfaces[ifname].some(iface => iface.address === ip));
    }

    return false;
  } catch (error) {
    return false;
  }
};

var sanitizeRemoteAddress = ip => {
  try {
    return ipaddr.process(ip).toString();
  } catch (error) {
    return undefined;
  }
};

var isValidPeer = function isValidPeer(peer) {
  var includeNetworkInterfaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  peer.ip = sanitizeRemoteAddress(peer.ip);

  if (!peer.ip) {
    return false;
  }

  if (isLocalHost(peer.ip, includeNetworkInterfaces)) {
    return false;
  }

  return true;
};

var getExceptionIds = src(_ => {
  var s = new Set();
  var blockIds = configManager.get("exceptions.blocks") || [];
  var transactionIds = configManager.get("exceptions.transactions") || [];

  for (var blockId of blockIds) {
    s.add(blockId);
  }

  for (var transactionId of transactionIds) {
    s.add(transactionId);
  }

  return s;
});
var getGenesisTransactionIds = src(_ => {
  var s = new Set();
  var genesisTransactions = configManager.get("genesisBlock.transactions") || [];

  for (var transaction of genesisTransactions) {
    s.add(transaction.id);
  }

  return s;
});
/**
 * Get human readable string from satoshis
 */

var formatSatoshi = amount => {
  var localeString = (+amount / SATOSHI).toLocaleString("en", {
    minimumFractionDigits: 0,
    maximumFractionDigits: 8
  });
  return "".concat(localeString, " ").concat(configManager.get("network.client.symbol"));
};
/**
 * Check if the given block or transaction id is an exception.
 */

var isException = blockOrTransaction => {
  var network = configManager.get("network");

  if (typeof blockOrTransaction.id !== "string") {
    return false;
  }

  if (blockOrTransaction.id.length < 64) {
    // old block ids, we check that the transactions inside the block are correct
    var blockExceptionTxIds = (configManager.get("exceptions.blocksTransactions") || {})[blockOrTransaction.id];
    var blockTransactions = blockOrTransaction.transactions || [];

    if (!blockExceptionTxIds || blockExceptionTxIds.length !== blockTransactions.length) {
      return false;
    }

    blockExceptionTxIds.sort();
    var blockToCheckTxIds = blockTransactions.map(tx => tx.id).sort();

    for (var i = 0; i < blockExceptionTxIds.length; i++) {
      if (blockToCheckTxIds[i] !== blockExceptionTxIds[i]) {
        return false;
      }
    }
  }

  return getExceptionIds(network).has(blockOrTransaction.id);
};
var isGenesisTransaction = id => {
  var network = configManager.get("network");
  return getGenesisTransactionIds(network).has(id);
};
var numberToHex$1 = function numberToHex(num) {
  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var indexHex = Number(num).toString(16);
  return "0".repeat(padding - indexHex.length) + indexHex;
};
var maxVendorFieldLength = height => configManager.getMilestone(height).vendorFieldLength;
var isSupportedTransactionVersion = version => {
  var aip11 = configManager.getMilestone().aip11;

  if (aip11 && version !== 2) {
    return false;
  }

  if (!aip11 && version !== 1) {
    return false;
  }

  return true;
};

var index$6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  formatSatoshi: formatSatoshi,
  isException: isException,
  isGenesisTransaction: isGenesisTransaction,
  numberToHex: numberToHex$1,
  maxVendorFieldLength: maxVendorFieldLength,
  isSupportedTransactionVersion: isSupportedTransactionVersion,
  Base58: Base58,
  BigNumber: index$5.BigNumber,
  isValidPeer: isValidPeer,
  isLocalHost: isLocalHost
});

var uri_all = createCommonjsModule(function (module, exports) {
  /** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
  (function (global, factory) {
     factory(exports) ;
  })(commonjsGlobal, function (exports) {

    function merge() {
      for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
        sets[_key] = arguments[_key];
      }

      if (sets.length > 1) {
        sets[0] = sets[0].slice(0, -1);
        var xl = sets.length - 1;

        for (var x = 1; x < xl; ++x) {
          sets[x] = sets[x].slice(1, -1);
        }

        sets[xl] = sets[xl].slice(1);
        return sets.join('');
      } else {
        return sets[0];
      }
    }

    function subexp(str) {
      return "(?:" + str + ")";
    }

    function typeOf(o) {
      return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    }

    function toUpperCase(str) {
      return str.toUpperCase();
    }

    function toArray(obj) {
      return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    }

    function assign(target, source) {
      var obj = target;

      if (source) {
        for (var key in source) {
          obj[key] = source[key];
        }
      }

      return obj;
    }

    function buildExps(isIRI) {
      var ALPHA$$ = "[A-Za-z]",
          DIGIT$$ = "[0-9]",
          HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
          PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
          //expanded
      GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
          SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
          RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
          UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
          //subset, excludes bidi control characters
      IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
          //subset
      UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
          SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
          USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
          DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
          //relaxed parsing rules
      IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
          H16$ = subexp(HEXDIG$$ + "{1,4}"),
          LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
          IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
          //                           6( h16 ":" ) ls32
      IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
          //                      "::" 5( h16 ":" ) ls32
      IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
          //[               h16 ] "::" 4( h16 ":" ) ls32
      IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
          //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
      IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
          //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
      IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
          //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
      IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
          //[ *4( h16 ":" ) h16 ] "::"              ls32
      IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
          //[ *5( h16 ":" ) h16 ] "::"              h16
      IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
          //[ *6( h16 ":" ) h16 ] "::"
      IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
          ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
          //RFC 6874, with relaxed parsing rules
      IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
          //RFC 6874
      REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
          PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
          SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
          QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
      return {
        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegExp(UNRESERVED$$, "g"),
        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
        PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules

      };
    }

    var URI_PROTOCOL = buildExps(false);
    var IRI_PROTOCOL = buildExps(true);

    var slicedToArray = function () {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"]) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      return function (arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();

    var toConsumableArray = function toConsumableArray(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      } else {
        return Array.from(arr);
      }
    };
    /** Highest positive signed 32-bit float value */


    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */

    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80

    var delimiter = '-'; // '\x2D'

    /** Regular expressions */

    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars

    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */

    var errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    };
    /** Convenience shortcuts */

    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */

    function error$1(type) {
      throw new RangeError(errors[type]);
    }
    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */


    function map(array, fn) {
      var result = [];
      var length = array.length;

      while (length--) {
        result[length] = fn(array[length]);
      }

      return result;
    }
    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */


    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';

      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      } // Avoid `split(regex)` for IE8 compatibility. See #17.


      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map(labels, fn).join('.');
      return result + encoded;
    }
    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */


    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;

      while (counter < length) {
        var value = string.charCodeAt(counter++);

        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // It's a high surrogate, and there is a next character.
          var extra = string.charCodeAt(counter++);

          if ((extra & 0xFC00) == 0xDC00) {
            // Low surrogate.
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // It's an unmatched surrogate; only append this code unit, in case the
            // next code unit is the high surrogate of a surrogate pair.
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }

      return output;
    }
    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */


    var ucs2encode = function ucs2encode(array) {
      return String.fromCodePoint.apply(String, toConsumableArray(array));
    };
    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */


    var basicToDigit = function basicToDigit(codePoint) {
      if (codePoint - 0x30 < 0x0A) {
        return codePoint - 0x16;
      }

      if (codePoint - 0x41 < 0x1A) {
        return codePoint - 0x41;
      }

      if (codePoint - 0x61 < 0x1A) {
        return codePoint - 0x61;
      }

      return base;
    };
    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */


    var digitToBasic = function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */


    var adapt = function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);

      for (;
      /* no initialization */
      delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }

      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */


    var decode = function decode(input) {
      // Don't use UCS-2.
      var output = [];
      var inputLength = input.length;
      var i = 0;
      var n = initialN;
      var bias = initialBias; // Handle the basic code points: let `basic` be the number of input code
      // points before the last delimiter, or `0` if there is none, then copy
      // the first basic code points to the output.

      var basic = input.lastIndexOf(delimiter);

      if (basic < 0) {
        basic = 0;
      }

      for (var j = 0; j < basic; ++j) {
        // if it's not a basic code point
        if (input.charCodeAt(j) >= 0x80) {
          error$1('not-basic');
        }

        output.push(input.charCodeAt(j));
      } // Main decoding loop: start just after the last delimiter if any basic code
      // points were copied; start at the beginning otherwise.


      for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;)
      /* no final expression */
      {
        // `index` is the index of the next character to be consumed.
        // Decode a generalized variable-length integer into `delta`,
        // which gets added to `i`. The overflow checking is easier
        // if we increase `i` as we go, then subtract off its starting
        // value at the end to obtain `delta`.
        var oldi = i;

        for (var w = 1, k = base;;
        /* no condition */
        k += base) {
          if (index >= inputLength) {
            error$1('invalid-input');
          }

          var digit = basicToDigit(input.charCodeAt(index++));

          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error$1('overflow');
          }

          i += digit * w;
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

          if (digit < t) {
            break;
          }

          var baseMinusT = base - t;

          if (w > floor(maxInt / baseMinusT)) {
            error$1('overflow');
          }

          w *= baseMinusT;
        }

        var out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
        // incrementing `n` each time, so we'll fix that now:

        if (floor(i / out) > maxInt - n) {
          error$1('overflow');
        }

        n += floor(i / out);
        i %= out; // Insert `n` at position `i` of the output.

        output.splice(i++, 0, n);
      }

      return String.fromCodePoint.apply(String, output);
    };
    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */


    var encode = function encode(input) {
      var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

      input = ucs2decode(input); // Cache the length.

      var inputLength = input.length; // Initialize the state.

      var n = initialN;
      var delta = 0;
      var bias = initialBias; // Handle the basic code points.

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _currentValue2 = _step.value;

          if (_currentValue2 < 0x80) {
            output.push(stringFromCharCode(_currentValue2));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var basicLength = output.length;
      var handledCPCount = basicLength; // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.
      // Finish the basic string with a delimiter unless it's empty.

      if (basicLength) {
        output.push(delimiter);
      } // Main encoding loop:


      while (handledCPCount < inputLength) {
        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        var m = maxInt;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var currentValue = _step2.value;

            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
          // but guard against overflow.

        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var handledCPCountPlusOne = handledCPCount + 1;

        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error$1('overflow');
        }

        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _currentValue = _step3.value;

            if (_currentValue < n && ++delta > maxInt) {
              error$1('overflow');
            }

            if (_currentValue == n) {
              // Represent delta as a generalized variable-length integer.
              var q = delta;

              for (var k = base;;
              /* no condition */
              k += base) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (q < t) {
                  break;
                }

                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                q = floor(qMinusT / baseMinusT);
              }

              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        ++delta;
        ++n;
      }

      return output.join('');
    };
    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */


    var toUnicode = function toUnicode(input) {
      return mapDomain(input, function (string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */


    var toASCII = function toASCII(input) {
      return mapDomain(input, function (string) {
        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
      });
    };
    /*--------------------------------------------------------------------------*/

    /** Define the public API */


    var punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      'version': '2.1.0',

      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      'ucs2': {
        'decode': ucs2decode,
        'encode': ucs2encode
      },
      'decode': decode,
      'encode': encode,
      'toASCII': toASCII,
      'toUnicode': toUnicode
    };
    /**
     * URI.js
     *
     * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/uri-js
     */

    /**
     * Copyright 2011 Gary Court. All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     *    1. Redistributions of source code must retain the above copyright notice, this list of
     *       conditions and the following disclaimer.
     *
     *    2. Redistributions in binary form must reproduce the above copyright notice, this list
     *       of conditions and the following disclaimer in the documentation and/or other materials
     *       provided with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation are those of the
     * authors and should not be interpreted as representing official policies, either expressed
     * or implied, of Gary Court.
     */

    var SCHEMES = {};

    function pctEncChar(chr) {
      var c = chr.charCodeAt(0);
      var e = void 0;
      if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
      return e;
    }

    function pctDecChars(str) {
      var newStr = "";
      var i = 0;
      var il = str.length;

      while (i < il) {
        var c = parseInt(str.substr(i + 1, 2), 16);

        if (c < 128) {
          newStr += String.fromCharCode(c);
          i += 3;
        } else if (c >= 194 && c < 224) {
          if (il - i >= 6) {
            var c2 = parseInt(str.substr(i + 4, 2), 16);
            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
          } else {
            newStr += str.substr(i, 6);
          }

          i += 6;
        } else if (c >= 224) {
          if (il - i >= 9) {
            var _c = parseInt(str.substr(i + 4, 2), 16);

            var c3 = parseInt(str.substr(i + 7, 2), 16);
            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
          } else {
            newStr += str.substr(i, 9);
          }

          i += 9;
        } else {
          newStr += str.substr(i, 3);
          i += 3;
        }
      }

      return newStr;
    }

    function _normalizeComponentEncoding(components, protocol) {
      function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
      }

      if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
      if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      return components;
    }

    function _stripLeadingZeros(str) {
      return str.replace(/^0*(.*)/, "$1") || "0";
    }

    function _normalizeIPv4(host, protocol) {
      var matches = host.match(protocol.IPV4ADDRESS) || [];

      var _matches = slicedToArray(matches, 2),
          address = _matches[1];

      if (address) {
        return address.split(".").map(_stripLeadingZeros).join(".");
      } else {
        return host;
      }
    }

    function _normalizeIPv6(host, protocol) {
      var matches = host.match(protocol.IPV6ADDRESS) || [];

      var _matches2 = slicedToArray(matches, 3),
          address = _matches2[1],
          zone = _matches2[2];

      if (address) {
        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
            last = _address$toLowerCase$2[0],
            first = _address$toLowerCase$2[1];

        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
        var lastFields = last.split(":").map(_stripLeadingZeros);
        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
        var lastFieldsStart = lastFields.length - fieldCount;
        var fields = Array(fieldCount);

        for (var x = 0; x < fieldCount; ++x) {
          fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
        }

        if (isLastFieldIPv4Address) {
          fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }

        var allZeroFields = fields.reduce(function (acc, field, index) {
          if (!field || field === "0") {
            var lastLongest = acc[acc.length - 1];

            if (lastLongest && lastLongest.index + lastLongest.length === index) {
              lastLongest.length++;
            } else {
              acc.push({
                index: index,
                length: 1
              });
            }
          }

          return acc;
        }, []);
        var longestZeroFields = allZeroFields.sort(function (a, b) {
          return b.length - a.length;
        })[0];
        var newHost = void 0;

        if (longestZeroFields && longestZeroFields.length > 1) {
          var newFirst = fields.slice(0, longestZeroFields.index);
          var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
          newHost = newFirst.join(":") + "::" + newLast.join(":");
        } else {
          newHost = fields.join(":");
        }

        if (zone) {
          newHost += "%" + zone;
        }

        return newHost;
      } else {
        return host;
      }
    }

    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;

    function parse(uriString) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var components = {};
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
      var matches = uriString.match(URI_PARSE);

      if (matches) {
        if (NO_MATCH_IS_UNDEFINED) {
          //store each component
          components.scheme = matches[1];
          components.userinfo = matches[3];
          components.host = matches[4];
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || "";
          components.query = matches[7];
          components.fragment = matches[8]; //fix port number

          if (isNaN(components.port)) {
            components.port = matches[5];
          }
        } else {
          //IE FIX for improper RegExp matching
          //store each component
          components.scheme = matches[1] || undefined;
          components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
          components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || "";
          components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
          components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined; //fix port number

          if (isNaN(components.port)) {
            components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
          }
        }

        if (components.host) {
          //normalize IP hosts
          components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
        } //determine reference type


        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
          components.reference = "same-document";
        } else if (components.scheme === undefined) {
          components.reference = "relative";
        } else if (components.fragment === undefined) {
          components.reference = "absolute";
        } else {
          components.reference = "uri";
        } //check for reference errors


        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
          components.error = components.error || "URI is not a " + options.reference + " reference.";
        } //find scheme handler


        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]; //check if scheme can't handle IRIs

        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
          //if host component is a domain name
          if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
            //convert Unicode IDN -> ASCII IDN
            try {
              components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
            } catch (e) {
              components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
            }
          } //convert IRI -> URI


          _normalizeComponentEncoding(components, URI_PROTOCOL);
        } else {
          //normalize encodings
          _normalizeComponentEncoding(components, protocol);
        } //perform scheme specific parsing


        if (schemeHandler && schemeHandler.parse) {
          schemeHandler.parse(components, options);
        }
      } else {
        components.error = components.error || "URI can not be parsed.";
      }

      return components;
    }

    function _recomposeAuthority(components, options) {
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];

      if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
      }

      if (components.host !== undefined) {
        //normalize IP hosts, add brackets and escape zone separator for IPv6
        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
          return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
        }));
      }

      if (typeof components.port === "number") {
        uriTokens.push(":");
        uriTokens.push(components.port.toString(10));
      }

      return uriTokens.length ? uriTokens.join("") : undefined;
    }

    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;

    function removeDotSegments(input) {
      var output = [];

      while (input.length) {
        if (input.match(RDS1)) {
          input = input.replace(RDS1, "");
        } else if (input.match(RDS2)) {
          input = input.replace(RDS2, "/");
        } else if (input.match(RDS3)) {
          input = input.replace(RDS3, "/");
          output.pop();
        } else if (input === "." || input === "..") {
          input = "";
        } else {
          var im = input.match(RDS5);

          if (im) {
            var s = im[0];
            input = input.slice(s.length);
            output.push(s);
          } else {
            throw new Error("Unexpected dot segment condition");
          }
        }
      }

      return output.join("");
    }

    function serialize(components) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = []; //find scheme handler

      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()]; //perform scheme specific serialization

      if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);

      if (components.host) {
        //if host component is an IPv6 address
        if (protocol.IPV6ADDRESS.test(components.host)) ; //TODO: normalize IPv6 address as per RFC 5952
        //if host component is a domain name
        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
            //convert IDN via punycode
            try {
              components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
            } catch (e) {
              components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }
          }
      } //normalize encoding


      _normalizeComponentEncoding(components, protocol);

      if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(":");
      }

      var authority = _recomposeAuthority(components, options);

      if (authority !== undefined) {
        if (options.reference !== "suffix") {
          uriTokens.push("//");
        }

        uriTokens.push(authority);

        if (components.path && components.path.charAt(0) !== "/") {
          uriTokens.push("/");
        }
      }

      if (components.path !== undefined) {
        var s = components.path;

        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
          s = removeDotSegments(s);
        }

        if (authority === undefined) {
          s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
        }

        uriTokens.push(s);
      }

      if (components.query !== undefined) {
        uriTokens.push("?");
        uriTokens.push(components.query);
      }

      if (components.fragment !== undefined) {
        uriTokens.push("#");
        uriTokens.push(components.fragment);
      }

      return uriTokens.join(""); //merge tokens into a string
    }

    function resolveComponents(base, relative) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var skipNormalization = arguments[3];
      var target = {};

      if (!skipNormalization) {
        base = parse(serialize(base, options), options); //normalize base components

        relative = parse(serialize(relative, options), options); //normalize relative components
      }

      options = options || {};

      if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme; //target.authority = relative.authority;

        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
          //target.authority = relative.authority;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (!relative.path) {
            target.path = base.path;

            if (relative.query !== undefined) {
              target.query = relative.query;
            } else {
              target.query = base.query;
            }
          } else {
            if (relative.path.charAt(0) === "/") {
              target.path = removeDotSegments(relative.path);
            } else {
              if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                target.path = "/" + relative.path;
              } else if (!base.path) {
                target.path = relative.path;
              } else {
                target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
              }

              target.path = removeDotSegments(target.path);
            }

            target.query = relative.query;
          } //target.authority = base.authority;


          target.userinfo = base.userinfo;
          target.host = base.host;
          target.port = base.port;
        }

        target.scheme = base.scheme;
      }

      target.fragment = relative.fragment;
      return target;
    }

    function resolve(baseURI, relativeURI, options) {
      var schemelessOptions = assign({
        scheme: 'null'
      }, options);
      return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    }

    function normalize(uri, options) {
      if (typeof uri === "string") {
        uri = serialize(parse(uri, options), options);
      } else if (typeOf(uri) === "object") {
        uri = parse(serialize(uri, options), options);
      }

      return uri;
    }

    function equal(uriA, uriB, options) {
      if (typeof uriA === "string") {
        uriA = serialize(parse(uriA, options), options);
      } else if (typeOf(uriA) === "object") {
        uriA = serialize(uriA, options);
      }

      if (typeof uriB === "string") {
        uriB = serialize(parse(uriB, options), options);
      } else if (typeOf(uriB) === "object") {
        uriB = serialize(uriB, options);
      }

      return uriA === uriB;
    }

    function escapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    }

    function unescapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    }

    var handler = {
      scheme: "http",
      domainHost: true,
      parse: function parse(components, options) {
        //report missing host
        if (!components.host) {
          components.error = components.error || "HTTP URIs must have a host.";
        }

        return components;
      },
      serialize: function serialize(components, options) {
        //normalize the default port
        if (components.port === (String(components.scheme).toLowerCase() !== "https" ? 80 : 443) || components.port === "") {
          components.port = undefined;
        } //normalize the empty path


        if (!components.path) {
          components.path = "/";
        } //NOTE: We do not parse query strings for HTTP URIs
        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
        //and not the HTTP spec.


        return components;
      }
    };
    var handler$1 = {
      scheme: "https",
      domainHost: handler.domainHost,
      parse: handler.parse,
      serialize: handler.serialize
    };
    var O = {};

    var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ( "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
    var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive

    var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
    //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
    //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
    //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
    //const VCHAR$$ = "[\\x21-\\x7E]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
    //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
    //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
    //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');

    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
    var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    var NOT_HFVALUE = NOT_HFNAME;

    function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(UNRESERVED) ? str : decStr;
    }

    var handler$2 = {
      scheme: "mailto",
      parse: function parse$$1(components, options) {
        var mailtoComponents = components;
        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
        mailtoComponents.path = undefined;

        if (mailtoComponents.query) {
          var unknownHeaders = false;
          var headers = {};
          var hfields = mailtoComponents.query.split("&");

          for (var x = 0, xl = hfields.length; x < xl; ++x) {
            var hfield = hfields[x].split("=");

            switch (hfield[0]) {
              case "to":
                var toAddrs = hfield[1].split(",");

                for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                  to.push(toAddrs[_x]);
                }

                break;

              case "subject":
                mailtoComponents.subject = unescapeComponent(hfield[1], options);
                break;

              case "body":
                mailtoComponents.body = unescapeComponent(hfield[1], options);
                break;

              default:
                unknownHeaders = true;
                headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                break;
            }
          }

          if (unknownHeaders) mailtoComponents.headers = headers;
        }

        mailtoComponents.query = undefined;

        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
          var addr = to[_x2].split("@");

          addr[0] = unescapeComponent(addr[0]);

          if (!options.unicodeSupport) {
            //convert Unicode IDN -> ASCII IDN
            try {
              addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
            } catch (e) {
              mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
            }
          } else {
            addr[1] = unescapeComponent(addr[1], options).toLowerCase();
          }

          to[_x2] = addr.join("@");
        }

        return mailtoComponents;
      },
      serialize: function serialize$$1(mailtoComponents, options) {
        var components = mailtoComponents;
        var to = toArray(mailtoComponents.to);

        if (to) {
          for (var x = 0, xl = to.length; x < xl; ++x) {
            var toAddr = String(to[x]);
            var atIdx = toAddr.lastIndexOf("@");
            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
            var domain = toAddr.slice(atIdx + 1); //convert IDN via punycode

            try {
              domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
            } catch (e) {
              components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }

            to[x] = localPart + "@" + domain;
          }

          components.path = to.join(",");
        }

        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
        if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
        if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
        var fields = [];

        for (var name in headers) {
          if (headers[name] !== O[name]) {
            fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
          }
        }

        if (fields.length) {
          components.query = fields.join("&");
        }

        return components;
      }
    };
    var URN_PARSE = /^([^\:]+)\:(.*)/; //RFC 2141

    var handler$3 = {
      scheme: "urn",
      parse: function parse$$1(components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;

        if (matches) {
          var scheme = options.scheme || urnComponents.scheme || "urn";
          var nid = matches[1].toLowerCase();
          var nss = matches[2];
          var urnScheme = scheme + ":" + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          urnComponents.nid = nid;
          urnComponents.nss = nss;
          urnComponents.path = undefined;

          if (schemeHandler) {
            urnComponents = schemeHandler.parse(urnComponents, options);
          }
        } else {
          urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }

        return urnComponents;
      },
      serialize: function serialize$$1(urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = urnComponents.nid;
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];

        if (schemeHandler) {
          urnComponents = schemeHandler.serialize(urnComponents, options);
        }

        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ":" + nss;
        return uriComponents;
      }
    };
    var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/; //RFC 4122

    var handler$4 = {
      scheme: "urn:uuid",
      parse: function parse(urnComponents, options) {
        var uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = undefined;

        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
          uuidComponents.error = uuidComponents.error || "UUID is not valid.";
        }

        return uuidComponents;
      },
      serialize: function serialize(uuidComponents, options) {
        var urnComponents = uuidComponents; //normalize UUID

        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
        return urnComponents;
      }
    };
    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;
    exports.SCHEMES = SCHEMES;
    exports.pctEncChar = pctEncChar;
    exports.pctDecChars = pctDecChars;
    exports.parse = parse;
    exports.removeDotSegments = removeDotSegments;
    exports.serialize = serialize;
    exports.resolveComponents = resolveComponents;
    exports.resolve = resolve;
    exports.normalize = normalize;
    exports.equal = equal;
    exports.escapeComponent = escapeComponent;
    exports.unescapeComponent = unescapeComponent;
    Object.defineProperty(exports, '__esModule', {
      value: true
    });
  });
});
/*@__PURE__*/unwrapExports(uri_all);

var isArray$5 = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;

var fastDeepEqual$1 = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray$5(a),
        arrB = isArray$5(b),
        i,
        length,
        key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!equal(a[i], b[i])) return false;
      }

      return true;
    }

    if (arrA != arrB) return false;
    var dateA = a instanceof Date,
        dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();
    var regexpA = a instanceof RegExp,
        regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();
    var keys = keyList(a);
    length = keys.length;
    if (length !== keyList(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!hasProp.call(b, keys[i])) return false;
    }

    for (i = length; i-- !== 0;) {
      key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  return a !== a && b !== b;
};

// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode

var ucs2length = function ucs2length(str) {
  var length = 0,
      len = str.length,
      pos = 0,
      value;

  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);

    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
    }
  }

  return length;
};

var util$3 = {
  copy: copy$3,
  checkDataType: checkDataType,
  checkDataTypes: checkDataTypes,
  coerceToTypes: coerceToTypes,
  toHash: toHash,
  getProperty: getProperty,
  escapeQuotes: escapeQuotes,
  equal: fastDeepEqual$1,
  ucs2length: ucs2length,
  varOccurences: varOccurences,
  varReplace: varReplace,
  cleanUpCode: cleanUpCode,
  finalCleanUpCode: finalCleanUpCode,
  schemaHasRules: schemaHasRules,
  schemaHasRulesExcept: schemaHasRulesExcept,
  schemaUnknownRules: schemaUnknownRules,
  toQuotedString: toQuotedString,
  getPathExpr: getPathExpr,
  getPath: getPath,
  getData: getData,
  unescapeFragment: unescapeFragment,
  unescapeJsonPointer: unescapeJsonPointer,
  escapeFragment: escapeFragment,
  escapeJsonPointer: escapeJsonPointer
};

function copy$3(o, to) {
  to = to || {};

  for (var key in o) {
    to[key] = o[key];
  }

  return to;
}

function checkDataType(dataType, data, negate) {
  var EQUAL = negate ? ' !== ' : ' === ',
      AND = negate ? ' || ' : ' && ',
      OK = negate ? '!' : '',
      NOT = negate ? '' : '!';

  switch (dataType) {
    case 'null':
      return data + EQUAL + 'null';

    case 'array':
      return OK + 'Array.isArray(' + data + ')';

    case 'object':
      return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '"object"' + AND + NOT + 'Array.isArray(' + data + '))';

    case 'integer':
      return '(typeof ' + data + EQUAL + '"number"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + ')';

    default:
      return 'typeof ' + data + EQUAL + '"' + dataType + '"';
  }
}

function checkDataTypes(dataTypes, data) {
  switch (dataTypes.length) {
    case 1:
      return checkDataType(dataTypes[0], data, true);

    default:
      var code = '';
      var types = toHash(dataTypes);

      if (types.array && types.object) {
        code = types.null ? '(' : '(!' + data + ' || ';
        code += 'typeof ' + data + ' !== "object")';
        delete types.null;
        delete types.array;
        delete types.object;
      }

      if (types.number) delete types.integer;

      for (var t in types) {
        code += (code ? ' && ' : '') + checkDataType(t, data, true);
      }

      return code;
  }
}

var COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);

function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];

    for (var i = 0; i < dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
    }

    if (types.length) return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
    return ['array'];
  }
}

function toHash(arr) {
  var hash = {};

  for (var i = 0; i < arr.length; i++) {
    hash[arr[i]] = true;
  }

  return hash;
}

var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /'|\\/g;

function getProperty(key) {
  return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + escapeQuotes(key) + "']";
}

function escapeQuotes(str) {
  return str.replace(SINGLE_QUOTE, '\\$&').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\f/g, '\\f').replace(/\t/g, '\\t');
}

function varOccurences(str, dataVar) {
  dataVar += '[^0-9]';
  var matches = str.match(new RegExp(dataVar, 'g'));
  return matches ? matches.length : 0;
}

function varReplace(str, dataVar, expr) {
  dataVar += '([^0-9])';
  expr = expr.replace(/\$/g, '$$$$');
  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
}

var EMPTY_ELSE = /else\s*{\s*}/g,
    EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,
    EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;

function cleanUpCode(out) {
  return out.replace(EMPTY_ELSE, '').replace(EMPTY_IF_NO_ELSE, '').replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
}

var ERRORS_REGEXP = /[^v.]errors/g,
    REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,
    REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g,
    RETURN_VALID = 'return errors === 0;',
    RETURN_TRUE = 'validate.errors = null; return true;',
    RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/,
    RETURN_DATA_ASYNC = 'return data;',
    ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,
    REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;

function finalCleanUpCode(out, async) {
  var matches = out.match(ERRORS_REGEXP);

  if (matches && matches.length == 2) {
    out = async ? out.replace(REMOVE_ERRORS_ASYNC, '').replace(RETURN_ASYNC, RETURN_DATA_ASYNC) : out.replace(REMOVE_ERRORS, '').replace(RETURN_VALID, RETURN_TRUE);
  }

  matches = out.match(ROOTDATA_REGEXP);
  if (!matches || matches.length !== 3) return out;
  return out.replace(REMOVE_ROOTDATA, '');
}

function schemaHasRules(schema, rules) {
  if (typeof schema == 'boolean') return !schema;

  for (var key in schema) {
    if (rules[key]) return true;
  }
}

function schemaHasRulesExcept(schema, rules, exceptKeyword) {
  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';

  for (var key in schema) {
    if (key != exceptKeyword && rules[key]) return true;
  }
}

function schemaUnknownRules(schema, rules) {
  if (typeof schema == 'boolean') return;

  for (var key in schema) {
    if (!rules[key]) return key;
  }
}

function toQuotedString(str) {
  return '\'' + escapeQuotes(str) + '\'';
}

function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers // false by default
  ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')') : isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'';
  return joinPaths(currentPath, path);
}

function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers // false by default
  ? toQuotedString('/' + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
  return joinPaths(currentPath, path);
}

var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;

function getData($data, lvl, paths) {
  var up, jsonPointer, data, matches;
  if ($data === '') return 'rootData';

  if ($data[0] == '/') {
    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
    jsonPointer = $data;
    data = 'rootData';
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER);
    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
    up = +matches[1];
    jsonPointer = matches[2];

    if (jsonPointer == '#') {
      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
      return paths[lvl - up];
    }

    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
    data = 'data' + (lvl - up || '');
    if (!jsonPointer) return data;
  }

  var expr = data;
  var segments = jsonPointer.split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment) {
      data += getProperty(unescapeJsonPointer(segment));
      expr += ' && ' + data;
    }
  }

  return expr;
}

function joinPaths(a, b) {
  if (a == '""') return b;
  return (a + ' + ' + b).replace(/' \+ '/g, '');
}

function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}

function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}

function escapeJsonPointer(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

var schema_obj = SchemaObject;

function SchemaObject(obj) {
  util$3.copy(obj, this);
}

var jsonSchemaTraverse = createCommonjsModule(function (module) {

  var traverse = module.exports = function (schema, opts, cb) {
    // Legacy support for v0.3.1 and earlier.
    if (typeof opts == 'function') {
      cb = opts;
      opts = {};
    }

    cb = opts.cb || cb;
    var pre = typeof cb == 'function' ? cb : cb.pre || function () {};

    var post = cb.post || function () {};

    _traverse(opts, pre, post, schema, '', schema);
  };

  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true
  };
  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };
  traverse.propsKeywords = {
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };
  traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };

  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);

      for (var key in schema) {
        var sch = schema[key];

        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i = 0; i < sch.length; i++) {
              _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
            }
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == 'object') {
            for (var prop in sch) {
              _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            }
          }
        } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
          _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
        }
      }

      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
  }

  function escapeJsonPtr(str) {
    return str.replace(/~/g, '~0').replace(/\//g, '~1');
  }
});

var resolve_1 = resolve$1;
resolve$1.normalizeId = normalizeId;
resolve$1.fullPath = getFullPath;
resolve$1.url = resolveUrl;
resolve$1.ids = resolveIds;
resolve$1.inlineRef = inlineRef;
resolve$1.schema = resolveSchema;
/**
 * [resolve and compile the references ($ref)]
 * @this   Ajv
 * @param  {Function} compile reference to schema compilation funciton (localCompile)
 * @param  {Object} root object with information about the root schema for the current schema
 * @param  {String} ref reference to resolve
 * @return {Object|Function} schema object (if the schema can be inlined) or validation function
 */

function resolve$1(compile, root, ref) {
  /* jshint validthis: true */
  var refVal = this._refs[ref];

  if (typeof refVal == 'string') {
    if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve$1.call(this, compile, root, refVal);
  }

  refVal = refVal || this._schemas[ref];

  if (refVal instanceof schema_obj) {
    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
  }

  var res = resolveSchema.call(this, root, ref);
  var schema, v, baseId;

  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }

  if (schema instanceof schema_obj) {
    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
  } else if (schema !== undefined) {
    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
  }

  return v;
}
/**
 * Resolve schema, its root and baseId
 * @this Ajv
 * @param  {Object} root root object with properties schema, refVal, refs
 * @param  {String} ref  reference to resolve
 * @return {Object} object with properties schema, root, baseId
 */


function resolveSchema(root, ref) {
  /* jshint validthis: true */
  var p = uri_all.parse(ref),
      refPath = _getFullPath(p),
      baseId = getFullPath(this._getId(root.schema));

  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];

    if (typeof refVal == 'string') {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof schema_obj) {
      if (!refVal.validate) this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];

      if (refVal instanceof schema_obj) {
        if (!refVal.validate) this._compile(refVal);
        if (id == normalizeId(ref)) return {
          schema: refVal,
          root: root,
          baseId: baseId
        };
        root = refVal;
      } else {
        return;
      }
    }

    if (!root.schema) return;
    baseId = getFullPath(this._getId(root.schema));
  }

  return getJsonPointer.call(this, p, baseId, root.schema, root);
}
/* @this Ajv */


function resolveRecursive(root, ref, parsedRef) {
  /* jshint validthis: true */
  var res = resolveSchema.call(this, root, ref);

  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;

    var id = this._getId(schema);

    if (id) baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
}

var PREVENT_SCOPE_CHANGE = util$3.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
/* @this Ajv */

function getJsonPointer(parsedRef, baseId, schema, root) {
  /* jshint validthis: true */
  parsedRef.fragment = parsedRef.fragment || '';
  if (parsedRef.fragment.slice(0, 1) != '/') return;
  var parts = parsedRef.fragment.split('/');

  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];

    if (part) {
      part = util$3.unescapeFragment(part);
      schema = schema[part];
      if (schema === undefined) break;
      var id;

      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);

        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref);

          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }

  if (schema !== undefined && schema !== root.schema) return {
    schema: schema,
    root: root,
    baseId: baseId
  };
}

var SIMPLE_INLINED = util$3.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);

function inlineRef(schema, limit) {
  if (limit === false) return false;
  if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;
}

function checkNoRef(schema) {
  var item;

  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return false;
      item = schema[key];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  }

  return true;
}

function countKeys(schema) {
  var count = 0,
      item;

  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object') count += countKeys(item);
      if (count == Infinity) return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return Infinity;

      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if (typeof item == 'object') count += countKeys(item) + 1;
        if (count == Infinity) return Infinity;
      }
    }
  }

  return count;
}

function getFullPath(id, normalize) {
  if (normalize !== false) id = normalizeId(id);
  var p = uri_all.parse(id);
  return _getFullPath(p);
}

function _getFullPath(p) {
  return uri_all.serialize(p).split('#')[0] + '#';
}

var TRAILING_SLASH_HASH = /#\/?$/;

function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
}

function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return uri_all.resolve(baseId, id);
}
/* @this Ajv */


function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = {
    '': schemaId
  };
  var fullPaths = {
    '': getFullPath(schemaId, false)
  };
  var localRefs = {};
  var self = this;
  jsonSchemaTraverse(schema, {
    allKeys: true
  }, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (jsonPtr === '') return;

    var id = self._getId(sch);

    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
    if (keyIndex !== undefined) fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util$3.escapeFragment(keyIndex));

    if (typeof id == 'string') {
      id = baseId = normalizeId(baseId ? uri_all.resolve(baseId, id) : id);
      var refVal = self._refs[id];
      if (typeof refVal == 'string') refVal = self._refs[refVal];

      if (refVal && refVal.schema) {
        if (!fastDeepEqual$1(sch, refVal.schema)) throw new Error('id "' + id + '" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == '#') {
          if (localRefs[id] && !fastDeepEqual$1(sch, localRefs[id])) throw new Error('id "' + id + '" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self._refs[id] = fullPath;
        }
      }
    }

    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });
  return localRefs;
}

var error_classes = {
  Validation: errorSubclass(ValidationError),
  MissingRef: errorSubclass(MissingRefError)
};

function ValidationError(errors) {
  this.message = 'validation failed';
  this.errors = errors;
  this.ajv = this.validation = true;
}

MissingRefError.message = function (baseId, ref) {
  return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
};

function MissingRefError(baseId, ref, message) {
  this.message = message || MissingRefError.message(baseId, ref);
  this.missingRef = resolve_1.url(baseId, ref);
  this.missingSchema = resolve_1.normalizeId(resolve_1.fullPath(this.missingRef));
}

function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
}

var fastJsonStableStringify = function fastJsonStableStringify(data, opts) {
  if (!opts) opts = {};
  if (typeof opts === 'function') opts = {
    cmp: opts
  };
  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

  var cmp = opts.cmp && function (f) {
    return function (node) {
      return function (a, b) {
        var aobj = {
          key: a,
          value: node[a]
        };
        var bobj = {
          key: b,
          value: node[b]
        };
        return f(aobj, bobj);
      };
    };
  }(opts.cmp);

  var seen = [];
  return function stringify(node) {
    if (node && node.toJSON && typeof node.toJSON === 'function') {
      node = node.toJSON();
    }

    if (node === undefined) return;
    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
    if (typeof node !== 'object') return JSON.stringify(node);
    var i, out;

    if (Array.isArray(node)) {
      out = '[';

      for (i = 0; i < node.length; i++) {
        if (i) out += ',';
        out += stringify(node[i]) || 'null';
      }

      return out + ']';
    }

    if (node === null) return 'null';

    if (seen.indexOf(node) !== -1) {
      if (cycles) return JSON.stringify('__cycle__');
      throw new TypeError('Converting circular structure to JSON');
    }

    var seenIndex = seen.push(node) - 1;
    var keys = Object.keys(node).sort(cmp && cmp(node));
    out = '';

    for (i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = stringify(node[key]);
      if (!value) continue;
      if (out) out += ',';
      out += JSON.stringify(key) + ':' + value;
    }

    seen.splice(seenIndex, 1);
    return '{' + out + '}';
  }(data);
};

var validate = function generate_validate(it, $keyword, $ruleType) {
  var out = '';

  var $async = it.schema.$async === true,
      $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
      $id = it.self._getId(it.schema);

  if (it.opts.strictKeywords) {
    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);

    if ($unknownKwd) {
      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);else throw new Error($keywordsMsg);
    }
  }

  if (it.isTop) {
    out += ' var validate = ';

    if ($async) {
      it.async = true;
      out += 'async ';
    }

    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';

    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
      out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
    }
  }

  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
    var $keyword = 'false schema';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;

    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += ' var ' + $valid + ' = false; ';
      }

      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

        if (it.opts.messages !== false) {
          out += ' , message: \'boolean schema is false\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      var __err = out;
      out = $$outStack.pop();

      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += ' return data; ';
        } else {
          out += ' validate.errors = null; return true; ';
        }
      } else {
        out += ' var ' + $valid + ' = true; ';
      }
    }

    if (it.isTop) {
      out += ' }; return validate; ';
    }

    return out;
  }

  if (it.isTop) {
    var $top = it.isTop,
        $lvl = it.level = 0,
        $dataLvl = it.dataLevel = 0,
        $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [undefined];

    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
      var $defaultMsg = 'default is ignored in the schema root';
      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);
    }

    out += ' var vErrors = null; ';
    out += ' var errors = 0;     ';
    out += ' if (rootData === undefined) rootData = data; ';
  } else {
    var $lvl = it.level,
        $dataLvl = it.dataLevel,
        $data = 'data' + ($dataLvl || '');
    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
    if ($async && !it.async) throw new Error('async schema in sync schema');
    out += ' var errs_' + $lvl + ' = errors;';
  }

  var $valid = 'valid' + $lvl,
      $breakOnError = !it.opts.allErrors,
      $closingBraces1 = '',
      $closingBraces2 = '';
  var $errorKeyword;
  var $typeSchema = it.schema.type,
      $typeIsArray = Array.isArray($typeSchema);

  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
    if ($typeIsArray) {
      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
    } else if ($typeSchema != 'null') {
      $typeSchema = [$typeSchema, 'null'];
      $typeIsArray = true;
    }
  }

  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }

  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == 'fail') {
      throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    }
  }

  if (it.schema.$comment && it.opts.$comment) {
    out += ' ' + it.RULES.all.$comment.code(it, '$comment');
  }

  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }

    var $rulesGroup = it.RULES.types[$typeSchema];

    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
      var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type';
      var $schemaPath = it.schemaPath + '.type',
          $errSchemaPath = it.errSchemaPath + '/type',
          $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') { ';

      if ($coerceToTypes) {
        var $dataType = 'dataType' + $lvl,
            $coerced = 'coerced' + $lvl;
        out += ' var ' + $dataType + ' = typeof ' + $data + '; ';

        if (it.opts.coerceTypes == 'array') {
          out += ' if (' + $dataType + ' == \'object\' && Array.isArray(' + $data + ')) ' + $dataType + ' = \'array\'; ';
        }

        out += ' var ' + $coerced + ' = undefined; ';
        var $bracesCoercion = '';
        var arr1 = $coerceToTypes;

        if (arr1) {
          var $type,
              $i = -1,
              l1 = arr1.length - 1;

          while ($i < l1) {
            $type = arr1[$i += 1];

            if ($i) {
              out += ' if (' + $coerced + ' === undefined) { ';
              $bracesCoercion += '}';
            }

            if (it.opts.coerceTypes == 'array' && $type != 'array') {
              out += ' if (' + $dataType + ' == \'array\' && ' + $data + '.length == 1) { ' + $coerced + ' = ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + ';  } ';
            }

            if ($type == 'string') {
              out += ' if (' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\') ' + $coerced + ' = \'\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \'\'; ';
            } else if ($type == 'number' || $type == 'integer') {
              out += ' if (' + $dataType + ' == \'boolean\' || ' + $data + ' === null || (' + $dataType + ' == \'string\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';

              if ($type == 'integer') {
                out += ' && !(' + $data + ' % 1)';
              }

              out += ')) ' + $coerced + ' = +' + $data + '; ';
            } else if ($type == 'boolean') {
              out += ' if (' + $data + ' === \'false\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \'true\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';
            } else if ($type == 'null') {
              out += ' if (' + $data + ' === \'\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';
            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
              out += ' if (' + $dataType + ' == \'string\' || ' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';
            }
          }
        }

        out += ' ' + $bracesCoercion + ' if (' + $coerced + ' === undefined) {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';

          if ($typeIsArray) {
            out += '' + $typeSchema.join(",");
          } else {
            out += '' + $typeSchema;
          }

          out += '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';

            if ($typeIsArray) {
              out += '' + $typeSchema.join(",");
            } else {
              out += '' + $typeSchema;
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        out += ' } else {  ';
        var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' ' + $data + ' = ' + $coerced + '; ';

        if (!$dataLvl) {
          out += 'if (' + $parentData + ' !== undefined)';
        }

        out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } ';
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';

          if ($typeIsArray) {
            out += '' + $typeSchema.join(",");
          } else {
            out += '' + $typeSchema;
          }

          out += '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'should be ';

            if ($typeIsArray) {
              out += '' + $typeSchema.join(",");
            } else {
              out += '' + $typeSchema;
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      }

      out += ' } ';
    }
  }

  if (it.schema.$ref && !$refKeywords) {
    out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';

    if ($breakOnError) {
      out += ' } if (errors === ';

      if ($top) {
        out += '0';
      } else {
        out += 'errs_' + $lvl;
      }

      out += ') { ';
      $closingBraces2 += '}';
    }
  } else {
    var arr2 = it.RULES;

    if (arr2) {
      var $rulesGroup,
          i2 = -1,
          l2 = arr2.length - 1;

      while (i2 < l2) {
        $rulesGroup = arr2[i2 += 1];

        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + it.util.checkDataType($rulesGroup.type, $data) + ') { ';
          }

          if (it.opts.useDefaults) {
            if ($rulesGroup.type == 'object' && it.schema.properties) {
              var $schema = it.schema.properties,
                  $schemaKeys = Object.keys($schema);
              var arr3 = $schemaKeys;

              if (arr3) {
                var $propertyKey,
                    i3 = -1,
                    l3 = arr3.length - 1;

                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $sch = $schema[$propertyKey];

                  if ($sch.default !== undefined) {
                    var $passData = $data + it.util.getProperty($propertyKey);

                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + $passData + ' === undefined ';

                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \'\' ';
                      }

                      out += ' ) ' + $passData + ' = ';

                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + it.useDefault($sch.default) + ' ';
                      } else {
                        out += ' ' + JSON.stringify($sch.default) + ' ';
                      }

                      out += '; ';
                    }
                  }
                }
              }
            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;

              if (arr4) {
                var $sch,
                    $i = -1,
                    l4 = arr4.length - 1;

                while ($i < l4) {
                  $sch = arr4[$i += 1];

                  if ($sch.default !== undefined) {
                    var $passData = $data + '[' + $i + ']';

                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + $passData + ' === undefined ';

                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + $passData + ' === null || ' + $passData + ' === \'\' ';
                      }

                      out += ' ) ' + $passData + ' = ';

                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + it.useDefault($sch.default) + ' ';
                      } else {
                        out += ' ' + JSON.stringify($sch.default) + ' ';
                      }

                      out += '; ';
                    }
                  }
                }
              }
            }
          }

          var arr5 = $rulesGroup.rules;

          if (arr5) {
            var $rule,
                i5 = -1,
                l5 = arr5.length - 1;

            while (i5 < l5) {
              $rule = arr5[i5 += 1];

              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);

                if ($code) {
                  out += ' ' + $code + ' ';

                  if ($breakOnError) {
                    $closingBraces1 += '}';
                  }
                }
              }
            }
          }

          if ($breakOnError) {
            out += ' ' + $closingBraces1 + ' ';
            $closingBraces1 = '';
          }

          if ($rulesGroup.type) {
            out += ' } ';

            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += ' else { ';
              var $schemaPath = it.schemaPath + '.type',
                  $errSchemaPath = it.errSchemaPath + '/type';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = '';
              /* istanbul ignore else */

              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';

                if ($typeIsArray) {
                  out += '' + $typeSchema.join(",");
                } else {
                  out += '' + $typeSchema;
                }

                out += '\' } ';

                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ';

                  if ($typeIsArray) {
                    out += '' + $typeSchema.join(",");
                  } else {
                    out += '' + $typeSchema;
                  }

                  out += '\' ';
                }

                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                }

                out += ' } ';
              } else {
                out += ' {} ';
              }

              var __err = out;
              out = $$outStack.pop();

              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }

              out += ' } ';
            }
          }

          if ($breakOnError) {
            out += ' if (errors === ';

            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + $lvl;
            }

            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces2 + ' ';
  }

  if ($top) {
    if ($async) {
      out += ' if (errors === 0) return data;           ';
      out += ' else throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
    }

    out += ' }; return validate;';
  } else {
    out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';
  }

  out = it.util.cleanUpCode(out);

  if ($top) {
    out = it.util.finalCleanUpCode(out, $async);
  }

  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;

    for (var i = 0; i < rules.length; i++) {
      if ($shouldUseRule(rules[i])) return true;
    }
  }

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined || $rule.implements && $ruleImplementsSomeKeyword($rule);
  }

  function $ruleImplementsSomeKeyword($rule) {
    var impl = $rule.implements;

    for (var i = 0; i < impl.length; i++) {
      if (it.schema[impl[i]] !== undefined) return true;
    }
  }

  return out;
};

/**
 * Functions below are used inside compiled validations function
 */


var ucs2length$1 = util$3.ucs2length; // this error is thrown by async schemas to return validation errors via exception

var ValidationError$1 = error_classes.Validation;
var compile_1 = compile$1;
/**
 * Compiles schema to validation function
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Object} root object with information about the root schema for this schema
 * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
 * @param  {String} baseId base ID for IDs in the schema
 * @return {Function} validation function
 */

function compile$1(schema, root, localRefs, baseId) {
  /* jshint validthis: true, evil: true */

  /* eslint no-shadow: 0 */
  var self = this,
      opts = this._opts,
      refVal = [undefined],
      refs = {},
      patterns = [],
      patternsHash = {},
      defaults = [],
      defaultsHash = {},
      customRules = [];
  root = root || {
    schema: schema,
    refVal: refVal,
    refs: refs
  };
  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling) return compilation.callValidate = callValidate;
  var formats = this._formats;
  var RULES = this.RULES;

  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;

    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode) cv.source = v.source;
    }

    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }
  /* @this   {*} - custom context, see passContext option */


  function callValidate() {
    /* jshint validthis: true */
    var validate = compilation.validate;
    var result = validate.apply(this, arguments);
    callValidate.errors = validate.errors;
    return result;
  }

  function localCompile(_schema, _root, localRefs, baseId) {
    var isRoot = !_root || _root && _root.schema == _schema;
    if (_root.schema != root.schema) return compile$1.call(self, _schema, _root, localRefs, baseId);
    var $async = _schema.$async === true;
    var sourceCode = validate({
      isTop: true,
      schema: _schema,
      isRoot: isRoot,
      baseId: baseId,
      root: _root,
      schemaPath: '',
      errSchemaPath: '#',
      errorPath: '""',
      MissingRefError: error_classes.MissingRef,
      RULES: RULES,
      validate: validate,
      util: util$3,
      resolve: resolve_1,
      resolveRef: resolveRef,
      usePattern: usePattern,
      useDefault: useDefault,
      useCustomRule: useCustomRule,
      opts: opts,
      formats: formats,
      logger: self.logger,
      self: self
    });
    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;
    if (opts.processCode) sourceCode = opts.processCode(sourceCode); // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));

    var validate$1;

    try {
      var makeValidate = new Function('self', 'RULES', 'formats', 'root', 'refVal', 'defaults', 'customRules', 'equal', 'ucs2length', 'ValidationError', sourceCode);
      validate$1 = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, fastDeepEqual$1, ucs2length$1, ValidationError$1);
      refVal[0] = validate$1;
    } catch (e) {
      self.logger.error('Error compiling schema, function code:', sourceCode);
      throw e;
    }

    validate$1.schema = _schema;
    validate$1.errors = null;
    validate$1.refs = refs;
    validate$1.refVal = refVal;
    validate$1.root = isRoot ? validate$1 : _root;
    if ($async) validate$1.$async = true;

    if (opts.sourceCode === true) {
      validate$1.source = {
        code: sourceCode,
        patterns: patterns,
        defaults: defaults
      };
    }

    return validate$1;
  }

  function resolveRef(baseId, ref, isRoot) {
    ref = resolve_1.url(baseId, ref);
    var refIndex = refs[ref];

    var _refVal, refCode;

    if (refIndex !== undefined) {
      _refVal = refVal[refIndex];
      refCode = 'refVal[' + refIndex + ']';
      return resolvedRef(_refVal, refCode);
    }

    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref];

      if (rootRefId !== undefined) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }

    refCode = addLocalRef(ref);
    var v = resolve_1.call(self, localCompile, root, ref);

    if (v === undefined) {
      var localSchema = localRefs && localRefs[ref];

      if (localSchema) {
        v = resolve_1.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile$1.call(self, localSchema, root, localRefs, baseId);
      }
    }

    if (v === undefined) {
      removeLocalRef(ref);
    } else {
      replaceLocalRef(ref, v);
      return resolvedRef(v, refCode);
    }
  }

  function addLocalRef(ref, v) {
    var refId = refVal.length;
    refVal[refId] = v;
    refs[ref] = refId;
    return 'refVal' + refId;
  }

  function removeLocalRef(ref) {
    delete refs[ref];
  }

  function replaceLocalRef(ref, v) {
    var refId = refs[ref];
    refVal[refId] = v;
  }

  function resolvedRef(refVal, code) {
    return typeof refVal == 'object' || typeof refVal == 'boolean' ? {
      code: code,
      schema: refVal,
      inline: true
    } : {
      code: code,
      $async: refVal && !!refVal.$async
    };
  }

  function usePattern(regexStr) {
    var index = patternsHash[regexStr];

    if (index === undefined) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }

    return 'pattern' + index;
  }

  function useDefault(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
        return '' + value;

      case 'string':
        return util$3.toQuotedString(value);

      case 'object':
        if (value === null) return 'null';
        var valueStr = fastJsonStableStringify(value);
        var index = defaultsHash[valueStr];

        if (index === undefined) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }

        return 'default' + index;
    }
  }

  function useCustomRule(rule, schema, parentSchema, it) {
    if (self._opts.validateSchema !== false) {
      var deps = rule.definition.dependencies;
      if (deps && !deps.every(function (keyword) {
        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
      })) throw new Error('parent schema must have all required keywords: ' + deps.join(','));
      var validateSchema = rule.definition.validateSchema;

      if (validateSchema) {
        var valid = validateSchema(schema);

        if (!valid) {
          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
          if (self._opts.validateSchema == 'log') self.logger.error(message);else throw new Error(message);
        }
      }
    }

    var compile = rule.definition.compile,
        inline = rule.definition.inline,
        macro = rule.definition.macro;
    var validate;

    if (compile) {
      validate = compile.call(self, schema, parentSchema, it);
    } else if (macro) {
      validate = macro.call(self, schema, parentSchema, it);
      if (opts.validateSchema !== false) self.validateSchema(validate, true);
    } else if (inline) {
      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
    } else {
      validate = rule.definition.validate;
      if (!validate) return;
    }

    if (validate === undefined) throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
    var index = customRules.length;
    customRules[index] = validate;
    return {
      code: 'customRule' + index,
      validate: validate
    };
  }
}
/**
 * Checks if the schema is currently compiled
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
 */


function checkCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0) return {
    index: index,
    compiling: true
  };
  index = this._compilations.length;
  this._compilations[index] = {
    schema: schema,
    root: root,
    baseId: baseId
  };
  return {
    index: index,
    compiling: false
  };
}
/**
 * Removes the schema from the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 */


function endCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0) this._compilations.splice(i, 1);
}
/**
 * Index of schema compilation in the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Integer} compilation index
 */


function compIndex(schema, root, baseId) {
  /* jshint validthis: true */
  for (var i = 0; i < this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
  }

  return -1;
}

function patternCode(i, patterns) {
  return 'var pattern' + i + ' = new RegExp(' + util$3.toQuotedString(patterns[i]) + ');';
}

function defaultCode(i) {
  return 'var default' + i + ' = defaults[' + i + '];';
}

function refValCode(i, refVal) {
  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
}

function customRuleCode(i) {
  return 'var customRule' + i + ' = customRules[' + i + '];';
}

function vars(arr, statement) {
  if (!arr.length) return '';
  var code = '';

  for (var i = 0; i < arr.length; i++) {
    code += statement(i, arr);
  }

  return code;
}

var cache$1 = createCommonjsModule(function (module) {

  var Cache = module.exports = function Cache() {
    this._cache = {};
  };

  Cache.prototype.put = function Cache_put(key, value) {
    this._cache[key] = value;
  };

  Cache.prototype.get = function Cache_get(key) {
    return this._cache[key];
  };

  Cache.prototype.del = function Cache_del(key) {
    delete this._cache[key];
  };

  Cache.prototype.clear = function Cache_clear() {
    this._cache = {};
  };
});

var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i; // uri-template: https://tools.ietf.org/html/rfc6570

var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i; // For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;

var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER$1 = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER$1 = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
var formats_1 = formats;

function formats(mode) {
  mode = mode == 'full' ? 'full' : 'fast';
  return util$3.copy(formats[mode]);
}

formats.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
  'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,
  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  'uri-template': URITEMPLATE,
  url: URL,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex$1,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  'json-pointer': JSON_POINTER$1,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  'relative-json-pointer': RELATIVE_JSON_POINTER$1
};
formats.full = {
  date: date,
  time: time,
  'date-time': date_time,
  uri: uri,
  'uri-reference': URIREF,
  'uri-template': URITEMPLATE,
  url: URL,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: hostname$1,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex$1,
  uuid: UUID,
  'json-pointer': JSON_POINTER$1,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  'relative-json-pointer': RELATIVE_JSON_POINTER$1
};

function isLeapYear(year) {
  // https://tools.ietf.org/html/rfc3339#appendix-C
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function date(str) {
  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
  var matches = str.match(DATE);
  if (!matches) return false;
  var year = +matches[1];
  var month = +matches[2];
  var day = +matches[3];
  return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
}

function time(str, full) {
  var matches = str.match(TIME);
  if (!matches) return false;
  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
}

var DATE_TIME_SEPARATOR = /t|\s/i;

function date_time(str) {
  // http://tools.ietf.org/html/rfc3339#section-5.6
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}

function hostname$1(str) {
  // https://tools.ietf.org/html/rfc1034#section-3.5
  // https://tools.ietf.org/html/rfc1123#section-2
  return str.length <= 255 && HOSTNAME.test(str);
}

var NOT_URI_FRAGMENT = /\/|:/;

function uri(str) {
  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}

var Z_ANCHOR = /[^\\]\\Z/;

function regex$1(str) {
  if (Z_ANCHOR.test(str)) return false;

  try {
    new RegExp(str);
    return true;
  } catch (e) {
    return false;
  }
}

var ref = function generate_ref(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $async, $refCode;

  if ($schema == '#' || $schema == '#/') {
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    } else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);

    if ($refVal === undefined) {
      var $message = it.MissingRefError.message(it.baseId, $schema);

      if (it.opts.missingRefs == 'fail') {
        it.logger.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + '$ref' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { ref: \'' + it.util.escapeQuotes($schema) + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'can\\\'t resolve reference ' + it.util.escapeQuotes($schema) + '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: ' + it.util.toQuotedString($schema) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        if ($breakOnError) {
          out += ' if (false) { ';
        }
      } else if (it.opts.missingRefs == 'ignore') {
        it.logger.warn($message);

        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
      out += ' ' + $code + ' ';

      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
      }
    } else {
      $async = $refVal.$async === true || it.async && $refVal.$async !== false;
      $refCode = $refVal.code;
    }
  }

  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';

    if (it.opts.passContext) {
      out += ' ' + $refCode + '.call(this, ';
    } else {
      out += ' ' + $refCode + '( ';
    }

    out += ' ' + $data + ', (dataPath || \'\')';

    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }

    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';
    var __callValidate = out;
    out = $$outStack.pop();

    if ($async) {
      if (!it.async) throw new Error('async schema referenced by sync schema');

      if ($breakOnError) {
        out += ' var ' + $valid + '; ';
      }

      out += ' try { await ' + __callValidate + '; ';

      if ($breakOnError) {
        out += ' ' + $valid + ' = true; ';
      }

      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';

      if ($breakOnError) {
        out += ' ' + $valid + ' = false; ';
      }

      out += ' } ';

      if ($breakOnError) {
        out += ' if (' + $valid + ') { ';
      }
    } else {
      out += ' if (!' + __callValidate + ') { if (vErrors === null) vErrors = ' + $refCode + '.errors; else vErrors = vErrors.concat(' + $refCode + '.errors); errors = vErrors.length; } ';

      if ($breakOnError) {
        out += ' else { ';
      }
    }
  }

  return out;
};

var allOf = function generate_allOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
      $allSchemasEmpty = true;
  var arr1 = $schema;

  if (arr1) {
    var $sch,
        $i = -1,
        l1 = arr1.length - 1;

    while ($i < l1) {
      $sch = arr1[$i += 1];

      if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all)) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;

        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }

  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += ' if (true) { ';
    } else {
      out += ' ' + $closingBraces.slice(0, -1) + ' ';
    }
  }

  out = it.util.cleanUpCode(out);
  return out;
};

var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $noEmptySchema = $schema.every(function ($sch) {
    return it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all);
  });

  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;

    if (arr1) {
      var $sch,
          $i = -1,
          l1 = arr1.length - 1;

      while ($i < l1) {
        $sch = arr1[$i += 1];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';
        $closingBraces += '}';
      }
    }

    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $valid + ') {   var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'anyOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should match some schema in anyOf\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }

    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';

    if (it.opts.allErrors) {
      out += ' } ';
    }

    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }

  return out;
};

var comment = function generate_comment(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $comment = it.util.toQuotedString($schema);

  if (it.opts.$comment === true) {
    out += ' console.log(' + $comment + ');';
  } else if (typeof it.opts.$comment == 'function') {
    out += ' self._opts.$comment(' + $comment + ', ' + it.util.toQuotedString($errSchemaPath) + ', validate.root.schema);';
  }

  return out;
};

var _const = function generate_const(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
  }

  if (!$isData) {
    out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';
  }

  out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'const' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValue: schema' + $lvl + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to constant\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' }';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var contains = function generate_contains(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId,
      $nonEmptySchema = it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all);
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';

  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $nextValid + ' = false; for (var ' + $idx + ' = 0; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;

    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }

    out += ' if (' + $nextValid + ') break; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $nextValid + ') {';
  } else {
    out += ' if (' + $data + '.length == 0) {';
  }

  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'contains' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should contain a valid item\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' } else { ';

  if ($nonEmptySchema) {
    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
  }

  if (it.opts.allErrors) {
    out += ' } ';
  }

  out = it.util.cleanUpCode(out);
  return out;
};

var dependencies$1 = function generate_dependencies(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $schemaDeps = {},
      $propertyDeps = {},
      $ownProperties = it.opts.ownProperties;

  for ($property in $schema) {
    var $sch = $schema[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }

  out += 'var ' + $errs + ' = errors;';
  var $currentErrorPath = it.errorPath;
  out += 'var missing' + $lvl + ';';

  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];

    if ($deps.length) {
      out += ' if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';

      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($property) + '\') ';
      }

      if ($breakOnError) {
        out += ' && ( ';
        var arr1 = $deps;

        if (arr1) {
          var $propertyKey,
              $i = -1,
              l1 = arr1.length - 1;

          while ($i < l1) {
            $propertyKey = arr1[$i += 1];

            if ($i) {
              out += ' || ';
            }

            var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';
          }
        }

        out += ')) {  ';
        var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }

        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'should have ';

            if ($deps.length == 1) {
              out += 'property ' + it.util.escapeQuotes($deps[0]);
            } else {
              out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
            }

            out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        out += ' ) { ';
        var arr2 = $deps;

        if (arr2) {
          var $propertyKey,
              i2 = -1,
              l2 = arr2.length - 1;

          while (i2 < l2) {
            $propertyKey = arr2[i2 += 1];
            var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;

            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }

            out += ' if ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') {  var err =   ';
            /* istanbul ignore else */

            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';

              if (it.opts.messages !== false) {
                out += ' , message: \'should have ';

                if ($deps.length == 1) {
                  out += 'property ' + it.util.escapeQuotes($deps[0]);
                } else {
                  out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
                }

                out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
              }

              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }

              out += ' } ';
            } else {
              out += ' {} ';
            }

            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }

      out += ' }   ';

      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }

  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;

  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];

    if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all)) {
      out += ' ' + $nextValid + ' = true; if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';

      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($property) + '\') ';
      }

      out += ') { ';
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' }  ';

      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  }

  if ($breakOnError) {
    out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  out = it.util.cleanUpCode(out);
  return out;
};

var _enum = function generate_enum(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
  }

  var $i = 'i' + $lvl,
      $vSchema = 'schema' + $lvl;

  if (!$isData) {
    out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';
  }

  out += 'var ' + $valid + ';';

  if ($isData) {
    out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
  }

  out += '' + $valid + ' = false;for (var ' + $i + '=0; ' + $i + '<' + $vSchema + '.length; ' + $i + '++) if (equal(' + $data + ', ' + $vSchema + '[' + $i + '])) { ' + $valid + ' = true; break; }';

  if ($isData) {
    out += '  }  ';
  }

  out += ' if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'enum' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValues: schema' + $lvl + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be equal to one of the allowed values\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' }';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var format$1 = function generate_format(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');

  if (it.opts.format === false) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }

    return out;
  }

  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $unknownFormats = it.opts.unknownFormats,
      $allowUnknown = Array.isArray($unknownFormats);

  if ($isData) {
    var $format = 'format' + $lvl,
        $isObject = 'isObject' + $lvl,
        $formatType = 'formatType' + $lvl;
    out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var ' + $isObject + ' = typeof ' + $format + ' == \'object\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; var ' + $formatType + ' = ' + $isObject + ' && ' + $format + '.type || \'string\'; if (' + $isObject + ') { ';

    if (it.async) {
      out += ' var async' + $lvl + ' = ' + $format + '.async; ';
    }

    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';

    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
    }

    out += ' (';

    if ($unknownFormats != 'ignore') {
      out += ' (' + $schemaValue + ' && !' + $format + ' ';

      if ($allowUnknown) {
        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';
      }

      out += ') || ';
    }

    out += ' (' + $format + ' && ' + $formatType + ' == \'' + $ruleType + '\' && !(typeof ' + $format + ' == \'function\' ? ';

    if (it.async) {
      out += ' (async' + $lvl + ' ? await ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';
    } else {
      out += ' ' + $format + '(' + $data + ') ';
    }

    out += ' : ' + $format + '.test(' + $data + '))))) {';
  } else {
    var $format = it.formats[$schema];

    if (!$format) {
      if ($unknownFormats == 'ignore') {
        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');

        if ($breakOnError) {
          out += ' if (true) { ';
        }

        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }

        return out;
      } else {
        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
      }
    }

    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
    var $formatType = $isObject && $format.type || 'string';

    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }

    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }

      return out;
    }

    if ($async) {
      if (!it.async) throw new Error('async format in sync schema');
      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
      out += ' if (!(await ' + $formatRef + '(' + $data + '))) { ';
    } else {
      out += ' if (! ';
      var $formatRef = 'formats' + it.util.getProperty($schema);
      if ($isObject) $formatRef += '.validate';

      if (typeof $format == 'function') {
        out += ' ' + $formatRef + '(' + $data + ') ';
      } else {
        out += ' ' + $formatRef + '.test(' + $data + ') ';
      }

      out += ') { ';
    }
  }

  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'format' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += '  } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should match format "';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }

      out += '"\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' } ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var _if = function generate_if(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $thenSch = it.schema['then'],
      $elseSch = it.schema['else'],
      $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == 'object' && Object.keys($thenSch).length > 0 : it.util.schemaHasRules($thenSch, it.RULES.all)),
      $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == 'object' && Object.keys($elseSch).length > 0 : it.util.schemaHasRules($elseSch, it.RULES.all)),
      $currentBaseId = $it.baseId;

  if ($thenPresent || $elsePresent) {
    var $ifClause;
    $it.createErrors = false;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = true;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    out += '  ' + it.validate($it) + ' ';
    $it.baseId = $currentBaseId;
    $it.createErrors = true;
    out += '  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;

    if ($thenPresent) {
      out += ' if (' + $nextValid + ') {  ';
      $it.schema = it.schema['then'];
      $it.schemaPath = it.schemaPath + '.then';
      $it.errSchemaPath = it.errSchemaPath + '/then';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';

      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + ' = \'then\'; ';
      } else {
        $ifClause = '\'then\'';
      }

      out += ' } ';

      if ($elsePresent) {
        out += ' else { ';
      }
    } else {
      out += ' if (!' + $nextValid + ') { ';
    }

    if ($elsePresent) {
      $it.schema = it.schema['else'];
      $it.schemaPath = it.schemaPath + '.else';
      $it.errSchemaPath = it.errSchemaPath + '/else';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';

      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + ' = \'else\'; ';
      } else {
        $ifClause = '\'else\'';
      }

      out += ' } ';
    }

    out += ' if (!' + $valid + ') {   var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'if' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { failingKeyword: ' + $ifClause + ' } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should match "\' + ' + $ifClause + ' + \'" schema\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }

    out += ' }   ';

    if ($breakOnError) {
      out += ' else { ';
    }

    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }

  return out;
};

var items = function generate_items(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $currentBaseId = it.baseId;
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';

  if (Array.isArray($schema)) {
    var $additionalItems = it.schema.additionalItems;

    if ($additionalItems === false) {
      out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += '  if (!' + $valid + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = '';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + 'additionalItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schema.length + ' } ';

        if (it.opts.messages !== false) {
          out += ' , message: \'should NOT have more than ' + $schema.length + ' items\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      var __err = out;
      out = $$outStack.pop();

      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }

      out += ' } ';
      $errSchemaPath = $currErrSchemaPath;

      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }

    var arr1 = $schema;

    if (arr1) {
      var $sch,
          $i = -1,
          l1 = arr1.length - 1;

      while ($i < l1) {
        $sch = arr1[$i += 1];

        if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all)) {
          out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          out += ' }  ';

          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }

    if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0 : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $schema.length + ') {  for (var ' + $idx + ' = ' + $schema.length + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;

      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
      } else {
        out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
      }

      if ($breakOnError) {
        out += ' if (!' + $nextValid + ') break; ';
      }

      out += ' } }  ';

      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  } else if (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;

    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }

    if ($breakOnError) {
      out += ' if (!' + $nextValid + ') break; ';
    }

    out += ' }';
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  out = it.util.cleanUpCode(out);
  return out;
};

var _limit = function generate__limit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $isMax = $keyword == 'maximum',
      $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $notOp = $isMax ? '>' : '<',
      $errorKeyword = undefined;

  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $exclType = 'exclType' + $lvl,
        $exclIsNumber = 'exclIsNumber' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' var ' + $exclusive + '; var ' + $exclType + ' = typeof ' + $schemaValueExcl + '; if (' + $exclType + ' != \'boolean\' && ' + $exclType + ' != \'undefined\' && ' + $exclType + ' != \'number\') { ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' } else if ( ';

    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
    }

    out += ' ' + $exclType + ' == \'number\' ? ( (' + $exclusive + ' = ' + $schemaValue + ' === undefined || ' + $schemaValueExcl + ' ' + $op + '= ' + $schemaValue + ') ? ' + $data + ' ' + $notOp + '= ' + $schemaValueExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) : ( (' + $exclusive + ' = ' + $schemaValueExcl + ' === true) ? ' + $data + ' ' + $notOp + '= ' + $schemaValue + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\'; ';

    if ($schema === undefined) {
      $errorKeyword = $exclusiveKeyword;
      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
      $schemaValue = $schemaValueExcl;
      $isData = $isDataExcl;
    }
  } else {
    var $exclIsNumber = typeof $schemaExcl == 'number',
        $opStr = $op;

    if ($exclIsNumber && $isData) {
      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';

      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
      }

      out += ' ( ' + $schemaValue + ' === undefined || ' + $schemaExcl + ' ' + $op + '= ' + $schemaValue + ' ? ' + $data + ' ' + $notOp + '= ' + $schemaExcl + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' ) || ' + $data + ' !== ' + $data + ') { ';
    } else {
      if ($exclIsNumber && $schema === undefined) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += '=';
      } else {
        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);

        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $notOp += '=';
        } else {
          $exclusive = false;
          $opStr += '=';
        }
      }

      var $opExpr = '\'' + $opStr + '\'';
      out += ' if ( ';

      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
      }

      out += ' ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') { ';
    }
  }

  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit: ' + $schemaValue + ', exclusive: ' + $exclusive + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + $opStr + ' ';

      if ($isData) {
        out += '\' + ' + $schemaValue;
      } else {
        out += '' + $schemaValue + '\'';
      }
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += ' } ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $op = $keyword == 'maxItems' ? '>' : '<';
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }

  out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';

      if ($keyword == 'maxItems') {
        out += 'more';
      } else {
        out += 'fewer';
      }

      out += ' than ';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }

      out += ' items\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $op = $keyword == 'maxLength' ? '>' : '<';
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }

  if (it.opts.unicode === false) {
    out += ' ' + $data + '.length ';
  } else {
    out += ' ucs2length(' + $data + ') ';
  }

  out += ' ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT be ';

      if ($keyword == 'maxLength') {
        out += 'longer';
      } else {
        out += 'shorter';
      }

      out += ' than ';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }

      out += ' characters\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $op = $keyword == 'maxProperties' ? '>' : '<';
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
  }

  out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should NOT have ';

      if ($keyword == 'maxProperties') {
        out += 'more';
      } else {
        out += 'fewer';
      }

      out += ' than ';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + $schema;
      }

      out += ' properties\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  out += 'var division' + $lvl + ';if (';

  if ($isData) {
    out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + ' != \'number\' || ';
  }

  out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';

  if (it.opts.multipleOfPrecision) {
    out += ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';
  } else {
    out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';
  }

  out += ' ) ';

  if ($isData) {
    out += '  )  ';
  }

  out += ' ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'multipleOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { multipleOf: ' + $schemaValue + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be multiple of ';

      if ($isData) {
        out += '\' + ' + $schemaValue;
      } else {
        out += '' + $schemaValue + '\'';
      }
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var not = function generate_not(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;

  if (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;

    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }

    out += ' ' + it.validate($it) + ' ';
    $it.createErrors = true;
    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (' + $nextValid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';

    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    out += '  var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT be valid\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if ($breakOnError) {
      out += ' if (false) { ';
    }
  }

  return out;
};

var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
      $prevValid = 'prevValid' + $lvl,
      $passingSchemas = 'passingSchemas' + $lvl;
  out += 'var ' + $errs + ' = errors , ' + $prevValid + ' = false , ' + $valid + ' = false , ' + $passingSchemas + ' = null; ';
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema;

  if (arr1) {
    var $sch,
        $i = -1,
        l1 = arr1.length - 1;

    while ($i < l1) {
      $sch = arr1[$i += 1];

      if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all)) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
      } else {
        out += ' var ' + $nextValid + ' = true; ';
      }

      if ($i) {
        out += ' if (' + $nextValid + ' && ' + $prevValid + ') { ' + $valid + ' = false; ' + $passingSchemas + ' = [' + $passingSchemas + ', ' + $i + ']; } else { ';
        $closingBraces += '}';
      }

      out += ' if (' + $nextValid + ') { ' + $valid + ' = ' + $prevValid + ' = true; ' + $passingSchemas + ' = ' + $i + '; }';
    }
  }

  it.compositeRule = $it.compositeRule = $wasComposite;
  out += '' + $closingBraces + 'if (!' + $valid + ') {   var err =   ';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'oneOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { passingSchemas: ' + $passingSchemas + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should match exactly one schema in oneOf\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; return false; ';
    }
  }

  out += '} else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }';

  if (it.opts.allErrors) {
    out += ' } ';
  }

  return out;
};

var pattern = function generate_pattern(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
  out += 'if ( ';

  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
  }

  out += ' !' + $regexp + '.test(' + $data + ') ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + 'pattern' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { pattern:  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += '  } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should match pattern "';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }

      out += '"\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '} ';

  if ($breakOnError) {
    out += ' else { ';
  }

  return out;
};

var properties = function generate_properties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $dataNxt = $it.dataLevel = it.dataLevel + 1,
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl;
  var $schemaKeys = Object.keys($schema || {}),
      $pProperties = it.schema.patternProperties || {},
      $pPropertyKeys = Object.keys($pProperties),
      $aProperties = it.schema.additionalProperties,
      $someProperties = $schemaKeys.length || $pPropertyKeys.length,
      $noAdditional = $aProperties === false,
      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
      $removeAdditional = it.opts.removeAdditional,
      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
  var $required = it.schema.required;
  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';

  if ($ownProperties) {
    out += ' var ' + $dataProperties + ' = undefined;';
  }

  if ($checkAdditional) {
    if ($ownProperties) {
      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }

    if ($someProperties) {
      out += ' var isAdditional' + $lvl + ' = !(false ';

      if ($schemaKeys.length) {
        if ($schemaKeys.length > 8) {
          out += ' || validate.schema' + $schemaPath + '.hasOwnProperty(' + $key + ') ';
        } else {
          var arr1 = $schemaKeys;

          if (arr1) {
            var $propertyKey,
                i1 = -1,
                l1 = arr1.length - 1;

            while (i1 < l1) {
              $propertyKey = arr1[i1 += 1];
              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';
            }
          }
        }
      }

      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;

        if (arr2) {
          var $pProperty,
              $i = -1,
              l2 = arr2.length - 1;

          while ($i < l2) {
            $pProperty = arr2[$i += 1];
            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';
          }
        }
      }

      out += ' ); if (isAdditional' + $lvl + ') { ';
    }

    if ($removeAdditional == 'all') {
      out += ' delete ' + $data + '[' + $key + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = '\' + ' + $key + ' + \'';

      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }

      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + $data + '[' + $key + ']; ';
        } else {
          out += ' ' + $nextValid + ' = false; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = '';
          /* istanbul ignore else */

          if (it.createErrors !== false) {
            out += ' { keyword: \'' + 'additionalProperties' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \'' + $additionalProperty + '\' } ';

            if (it.opts.messages !== false) {
              out += ' , message: \'';

              if (it.opts._errorDataPathProperty) {
                out += 'is an invalid additional property';
              } else {
                out += 'should NOT have additional properties';
              }

              out += '\' ';
            }

            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }

            out += ' } ';
          } else {
            out += ' {} ';
          }

          var __err = out;
          out = $$outStack.pop();

          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + __err + ']); ';
            } else {
              out += ' validate.errors = [' + __err + ']; return false; ';
            }
          } else {
            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }

          $errSchemaPath = $currErrSchemaPath;

          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + $errs + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }
        }
      }

      it.errorPath = $currentErrorPath;
    }

    if ($someProperties) {
      out += ' } ';
    }

    out += ' }  ';

    if ($breakOnError) {
      out += ' if (' + $nextValid + ') { ';
      $closingBraces += '}';
    }
  }

  var $useDefaults = it.opts.useDefaults && !it.compositeRule;

  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;

    if (arr3) {
      var $propertyKey,
          i3 = -1,
          l3 = arr3.length - 1;

      while (i3 < l3) {
        $propertyKey = arr3[i3 += 1];
        var $sch = $schema[$propertyKey];

        if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all)) {
          var $prop = it.util.getProperty($propertyKey),
              $passData = $data + $prop,
              $hasDefault = $useDefaults && $sch.default !== undefined;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + $nextData + ' = ' + $passData + '; ';
          }

          if ($hasDefault) {
            out += ' ' + $code + ' ';
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += ' if ( ' + $useData + ' === undefined ';

              if ($ownProperties) {
                out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
              }

              out += ') { ' + $nextValid + ' = false; ';
              var $currentErrorPath = it.errorPath,
                  $currErrSchemaPath = $errSchemaPath,
                  $missingProperty = it.util.escapeQuotes($propertyKey);

              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }

              $errSchemaPath = it.errSchemaPath + '/required';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = '';
              /* istanbul ignore else */

              if (it.createErrors !== false) {
                out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

                if (it.opts.messages !== false) {
                  out += ' , message: \'';

                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += 'should have required property \\\'' + $missingProperty + '\\\'';
                  }

                  out += '\' ';
                }

                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
                }

                out += ' } ';
              } else {
                out += ' {} ';
              }

              var __err = out;
              out = $$outStack.pop();

              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }

              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if ( ' + $useData + ' === undefined ';

                if ($ownProperties) {
                  out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
                }

                out += ') { ' + $nextValid + ' = true; } else { ';
              } else {
                out += ' if (' + $useData + ' !== undefined ';

                if ($ownProperties) {
                  out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
                }

                out += ' ) { ';
              }
            }

            out += ' ' + $code + ' } ';
          }
        }

        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }

  if ($pPropertyKeys.length) {
    var arr4 = $pPropertyKeys;

    if (arr4) {
      var $pProperty,
          i4 = -1,
          l4 = arr4.length - 1;

      while (i4 < l4) {
        $pProperty = arr4[i4 += 1];
        var $sch = $pProperties[$pProperty];

        if (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);

          if ($ownProperties) {
            out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
          } else {
            out += ' for (var ' + $key + ' in ' + $data + ') { ';
          }

          out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;

          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }

          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }

          out += ' } ';

          if ($breakOnError) {
            out += ' else ' + $nextValid + ' = true; ';
          }

          out += ' }  ';

          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  out = it.util.cleanUpCode(out);
  return out;
};

var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  out += 'var ' + $errs + ' = errors;';

  if (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all)) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
        $idx = 'idx' + $lvl,
        $i = 'i' + $lvl,
        $invalidName = '\' + ' + $key + ' + \'',
        $dataNxt = $it.dataLevel = it.dataLevel + 1,
        $nextData = 'data' + $dataNxt,
        $dataProperties = 'dataProperties' + $lvl,
        $ownProperties = it.opts.ownProperties,
        $currentBaseId = it.baseId;

    if ($ownProperties) {
      out += ' var ' + $dataProperties + ' = undefined; ';
    }

    if ($ownProperties) {
      out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }

    out += ' var startErrs' + $lvl + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;

    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }

    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (!' + $nextValid + ') { for (var ' + $i + '=startErrs' + $lvl + '; ' + $i + '<errors; ' + $i + '++) { vErrors[' + $i + '].propertyName = ' + $key + '; }   var err =   ';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'propertyNames' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { propertyName: \'' + $invalidName + '\' } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'property name \\\'' + $invalidName + '\\\' is invalid\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }

    if ($breakOnError) {
      out += ' break; ';
    }

    out += ' } }';
  }

  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }

  out = it.util.cleanUpCode(out);
  return out;
};

var required = function generate_required(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
  }

  var $vSchema = 'schema' + $lvl;

  if (!$isData) {
    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;

      if (arr1) {
        var $property,
            i1 = -1,
            l1 = arr1.length - 1;

        while (i1 < l1) {
          $property = arr1[i1 += 1];
          var $propertySch = it.schema.properties[$property];

          if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == 'object' && Object.keys($propertySch).length > 0 : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
  }

  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath,
        $loopRequired = $isData || $required.length >= it.opts.loopRequired,
        $ownProperties = it.opts.ownProperties;

    if ($breakOnError) {
      out += ' var missing' + $lvl + '; ';

      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }

        var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }

        out += ' var ' + $valid + ' = true; ';

        if ($isData) {
          out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
        }

        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { ' + $valid + ' = ' + $data + '[' + $vSchema + '[' + $i + ']] !== undefined ';

        if ($ownProperties) {
          out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }

        out += '; if (!' + $valid + ') break; } ';

        if ($isData) {
          out += '  }  ';
        }

        out += '  if (!' + $valid + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'';

            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        out += ' } else { ';
      } else {
        out += ' if ( ';
        var arr2 = $required;

        if (arr2) {
          var $propertyKey,
              $i = -1,
              l2 = arr2.length - 1;

          while ($i < l2) {
            $propertyKey = arr2[$i += 1];

            if ($i) {
              out += ' || ';
            }

            var $prop = it.util.getProperty($propertyKey),
                $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ') ) ';
          }
        }

        out += ') {  ';
        var $propertyPath = 'missing' + $lvl,
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
        }

        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = '';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'';

            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        var __err = out;
        out = $$outStack.pop();

        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }

        out += ' } else { ';
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }

        var $i = 'i' + $lvl,
            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
            $missingProperty = '\' + ' + $propertyPath + ' + \'';

        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }

        if ($isData) {
          out += ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   ';
          /* istanbul ignore else */

          if (it.createErrors !== false) {
            out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

            if (it.opts.messages !== false) {
              out += ' , message: \'';

              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += 'should have required property \\\'' + $missingProperty + '\\\'';
              }

              out += '\' ';
            }

            if (it.opts.verbose) {
              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }

            out += ' } ';
          } else {
            out += ' {} ';
          }

          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + $vSchema + ' !== undefined) { ';
        }

        out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { if (' + $data + '[' + $vSchema + '[' + $i + ']] === undefined ';

        if ($ownProperties) {
          out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }

        out += ') {  var err =   ';
        /* istanbul ignore else */

        if (it.createErrors !== false) {
          out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

          if (it.opts.messages !== false) {
            out += ' , message: \'';

            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += 'should have required property \\\'' + $missingProperty + '\\\'';
            }

            out += '\' ';
          }

          if (it.opts.verbose) {
            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
          }

          out += ' } ';
        } else {
          out += ' {} ';
        }

        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';

        if ($isData) {
          out += '  }  ';
        }
      } else {
        var arr3 = $required;

        if (arr3) {
          var $propertyKey,
              i3 = -1,
              l3 = arr3.length - 1;

          while (i3 < l3) {
            $propertyKey = arr3[i3 += 1];
            var $prop = it.util.getProperty($propertyKey),
                $missingProperty = it.util.escapeQuotes($propertyKey),
                $useData = $data + $prop;

            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }

            out += ' if ( ' + $useData + ' === undefined ';

            if ($ownProperties) {
              out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', \'' + it.util.escapeQuotes($propertyKey) + '\') ';
            }

            out += ') {  var err =   ';
            /* istanbul ignore else */

            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';

              if (it.opts.messages !== false) {
                out += ' , message: \'';

                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += 'should have required property \\\'' + $missingProperty + '\\\'';
                }

                out += '\' ';
              }

              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }

              out += ' } ';
            } else {
              out += ' {} ';
            }

            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
    }

    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }

  return out;
};

var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if (($schema || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out += ' var ' + $valid + '; if (' + $schemaValue + ' === false || ' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'boolean\') ' + $valid + ' = false; else { ';
    }

    out += ' var i = ' + $data + '.length , ' + $valid + ' = true , j; if (i > 1) { ';
    var $itemType = it.schema.items && it.schema.items.type,
        $typeIsArray = Array.isArray($itemType);

    if (!$itemType || $itemType == 'object' || $itemType == 'array' || $typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0)) {
      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + $data + '[i], ' + $data + '[j])) { ' + $valid + ' = false; break outer; } } } ';
    } else {
      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + $data + '[i]; ';
      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
      out += ' if (' + it.util[$method]($itemType, 'item', true) + ') continue; ';

      if ($typeIsArray) {
        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
      }

      out += ' if (typeof itemIndices[item] == \'number\') { ' + $valid + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
    }

    out += ' } ';

    if ($isData) {
      out += '  }  ';
    }

    out += ' if (!' + $valid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + 'uniqueItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { i: i, j: j } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema:  ';

        if ($isData) {
          out += 'validate.schema' + $schemaPath;
        } else {
          out += '' + $schema;
        }

        out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' } ';

    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }

  return out;
};

var dotjs = {
  '$ref': ref,
  allOf: allOf,
  anyOf: anyOf,
  '$comment': comment,
  const: _const,
  contains: contains,
  dependencies: dependencies$1,
  'enum': _enum,
  format: format$1,
  'if': _if,
  items: items,
  maximum: _limit,
  minimum: _limit,
  maxItems: _limitItems,
  minItems: _limitItems,
  maxLength: _limitLength,
  minLength: _limitLength,
  maxProperties: _limitProperties,
  minProperties: _limitProperties,
  multipleOf: multipleOf,
  not: not,
  oneOf: oneOf,
  pattern: pattern,
  properties: properties,
  propertyNames: propertyNames,
  required: required,
  uniqueItems: uniqueItems,
  validate: validate
};

var toHash$1 = util$3.toHash;

var rules = function rules() {
  var RULES = [{
    type: 'number',
    rules: [{
      'maximum': ['exclusiveMaximum']
    }, {
      'minimum': ['exclusiveMinimum']
    }, 'multipleOf', 'format']
  }, {
    type: 'string',
    rules: ['maxLength', 'minLength', 'pattern', 'format']
  }, {
    type: 'array',
    rules: ['maxItems', 'minItems', 'items', 'contains', 'uniqueItems']
  }, {
    type: 'object',
    rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames', {
      'properties': ['additionalProperties', 'patternProperties']
    }]
  }, {
    rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if']
  }];
  var ALL = ['type', '$comment'];
  var KEYWORDS = ['$schema', '$id', 'id', '$data', '$async', 'title', 'description', 'default', 'definitions', 'examples', 'readOnly', 'writeOnly', 'contentMediaType', 'contentEncoding', 'additionalItems', 'then', 'else'];
  var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];
  RULES.all = toHash$1(ALL);
  RULES.types = toHash$1(TYPES);
  RULES.forEach(function (group) {
    group.rules = group.rules.map(function (keyword) {
      var implKeywords;

      if (typeof keyword == 'object') {
        var key = Object.keys(keyword)[0];
        implKeywords = keyword[key];
        keyword = key;
        implKeywords.forEach(function (k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }

      ALL.push(keyword);
      var rule = RULES.all[keyword] = {
        keyword: keyword,
        code: dotjs[keyword],
        implements: implKeywords
      };
      return rule;
    });
    RULES.all.$comment = {
      keyword: '$comment',
      code: dotjs.$comment
    };
    if (group.type) RULES.types[group.type] = group;
  });
  RULES.keywords = toHash$1(ALL.concat(KEYWORDS));
  RULES.custom = {};
  return RULES;
};

var KEYWORDS = ['multipleOf', 'maximum', 'exclusiveMaximum', 'minimum', 'exclusiveMinimum', 'maxLength', 'minLength', 'pattern', 'additionalItems', 'maxItems', 'minItems', 'uniqueItems', 'maxProperties', 'minProperties', 'required', 'additionalProperties', 'enum', 'format', 'const'];

var data = function data(metaSchema, keywordsJsonPointers) {
  for (var i = 0; i < keywordsJsonPointers.length; i++) {
    metaSchema = JSON.parse(JSON.stringify(metaSchema));
    var segments = keywordsJsonPointers[i].split('/');
    var keywords = metaSchema;
    var j;

    for (j = 1; j < segments.length; j++) {
      keywords = keywords[segments[j]];
    }

    for (j = 0; j < KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];

      if (schema) {
        keywords[key] = {
          anyOf: [schema, {
            $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#'
          }]
        };
      }
    }
  }

  return metaSchema;
};

var MissingRefError$1 = error_classes.MissingRef;
var async$1 = compileAsync;
/**
 * Creates validating function for passed schema with asynchronous loading of missing schemas.
 * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
 * @this  Ajv
 * @param {Object}   schema schema object
 * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
 * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
 * @return {Promise} promise that resolves with a validating function.
 */

function compileAsync(schema, meta, callback) {
  /* eslint no-shadow: 0 */

  /* global Promise */

  /* jshint validthis: true */
  var self = this;
  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');

  if (typeof meta == 'function') {
    callback = meta;
    meta = undefined;
  }

  var p = loadMetaSchemaOf(schema).then(function () {
    var schemaObj = self._addSchema(schema, undefined, meta);

    return schemaObj.validate || _compileAsync(schemaObj);
  });

  if (callback) {
    p.then(function (v) {
      callback(null, v);
    }, callback);
  }

  return p;

  function loadMetaSchemaOf(sch) {
    var $schema = sch.$schema;
    return $schema && !self.getSchema($schema) ? compileAsync.call(self, {
      $ref: $schema
    }, true) : Promise.resolve();
  }

  function _compileAsync(schemaObj) {
    try {
      return self._compile(schemaObj);
    } catch (e) {
      if (e instanceof MissingRefError$1) return loadMissingSchema(e);
      throw e;
    }

    function loadMissingSchema(e) {
      var ref = e.missingSchema;
      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');
      var schemaPromise = self._loadingSchemas[ref];

      if (!schemaPromise) {
        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
        schemaPromise.then(removePromise, removePromise);
      }

      return schemaPromise.then(function (sch) {
        if (!added(ref)) {
          return loadMetaSchemaOf(sch).then(function () {
            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
          });
        }
      }).then(function () {
        return _compileAsync(schemaObj);
      });

      function removePromise() {
        delete self._loadingSchemas[ref];
      }

      function added(ref) {
        return self._refs[ref] || self._schemas[ref];
      }
    }
  }
}

var custom$7 = function generate_custom(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  var $rule = this,
      $definition = 'definition' + $lvl,
      $rDef = $rule.definition,
      $closingBraces = '';
  var $compile, $inline, $macro, $ruleValidate, $validateCode;

  if ($isData && $rDef.$data) {
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out += ' var ' + $definition + ' = RULES.custom[\'' + $keyword + '\'].definition; var ' + $validateCode + ' = ' + $definition + '.validate;';
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }

  var $ruleErrs = $validateCode + '.errors',
      $i = 'i' + $lvl,
      $ruleErr = 'ruleErr' + $lvl,
      $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');

  if (!($inline || $macro)) {
    out += '' + $ruleErrs + ' = null;';
  }

  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';

  if ($isData && $rDef.$data) {
    $closingBraces += '}';
    out += ' if (' + $schemaValue + ' === undefined) { ' + $valid + ' = true; } else { ';

    if ($validateSchema) {
      $closingBraces += '}';
      out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') { ';
    }
  }

  if ($inline) {
    if ($rDef.statements) {
      out += ' ' + $ruleValidate.validate + ' ';
    } else {
      out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $code;
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    out += '  ' + $validateCode + '.call( ';

    if (it.opts.passContext) {
      out += 'this';
    } else {
      out += 'self';
    }

    if ($compile || $rDef.schema === false) {
      out += ' , ' + $data + ' ';
    } else {
      out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';
    }

    out += ' , (dataPath || \'\')';

    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }

    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
        $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';
    var def_callRuleValidate = out;
    out = $$outStack.pop();

    if ($rDef.errors === false) {
      out += ' ' + $valid + ' = ';

      if ($asyncKeyword) {
        out += 'await ';
      }

      out += '' + def_callRuleValidate + '; ';
    } else {
      if ($asyncKeyword) {
        $ruleErrs = 'customErrors' + $lvl;
        out += ' var ' + $ruleErrs + ' = null; try { ' + $valid + ' = await ' + def_callRuleValidate + '; } catch (e) { ' + $valid + ' = false; if (e instanceof ValidationError) ' + $ruleErrs + ' = e.errors; else throw e; } ';
      } else {
        out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';
      }
    }
  }

  if ($rDef.modifying) {
    out += ' if (' + $parentData + ') ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';
  }

  out += '' + $closingBraces;

  if ($rDef.valid) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  } else {
    out += ' if ( ';

    if ($rDef.valid === undefined) {
      out += ' !';

      if ($macro) {
        out += '' + $nextValid;
      } else {
        out += '' + $valid;
      }
    } else {
      out += ' ' + !$rDef.valid + ' ';
    }

    out += ') { ';
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';

      if (it.opts.messages !== false) {
        out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    var def_customError = out;
    out = $$outStack.pop();

    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != 'full') {
          out += '  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';

          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }

          out += ' } ';
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + def_customError + ' ';
        } else {
          out += ' if (' + $errs + ' == errors) { ' + def_customError + ' } else {  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';

          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }

          out += ' } } ';
        }
      }
    } else if ($macro) {
      out += '   var err =   ';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';

        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';

      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += ' ' + def_customError + ' ';
      } else {
        out += ' if (Array.isArray(' + $ruleErrs + ')) { if (vErrors === null) vErrors = ' + $ruleErrs + '; else vErrors = vErrors.concat(' + $ruleErrs + '); errors = vErrors.length;  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + ';  ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';

        if (it.opts.verbose) {
          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
        }

        out += ' } } else { ' + def_customError + ' } ';
      }
    }

    out += ' } ';

    if ($breakOnError) {
      out += ' else { ';
    }
  }

  return out;
};

var $schema = "http://json-schema.org/draft-07/schema#";
var $id = "http://json-schema.org/draft-07/schema#";
var title$1 = "Core schema meta-schema";
var definitions = {
  schemaArray: {
    type: "array",
    minItems: 1,
    items: {
      $ref: "#"
    }
  },
  nonNegativeInteger: {
    type: "integer",
    minimum: 0
  },
  nonNegativeIntegerDefault0: {
    allOf: [{
      $ref: "#/definitions/nonNegativeInteger"
    }, {
      "default": 0
    }]
  },
  simpleTypes: {
    "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
  },
  stringArray: {
    type: "array",
    items: {
      type: "string"
    },
    uniqueItems: true,
    "default": []
  }
};
var type$1 = ["object", "boolean"];
var properties$1 = {
  $id: {
    type: "string",
    format: "uri-reference"
  },
  $schema: {
    type: "string",
    format: "uri"
  },
  $ref: {
    type: "string",
    format: "uri-reference"
  },
  $comment: {
    type: "string"
  },
  title: {
    type: "string"
  },
  description: {
    type: "string"
  },
  "default": true,
  readOnly: {
    type: "boolean",
    "default": false
  },
  examples: {
    type: "array",
    items: true
  },
  multipleOf: {
    type: "number",
    exclusiveMinimum: 0
  },
  maximum: {
    type: "number"
  },
  exclusiveMaximum: {
    type: "number"
  },
  minimum: {
    type: "number"
  },
  exclusiveMinimum: {
    type: "number"
  },
  maxLength: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minLength: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  pattern: {
    type: "string",
    format: "regex"
  },
  additionalItems: {
    $ref: "#"
  },
  items: {
    anyOf: [{
      $ref: "#"
    }, {
      $ref: "#/definitions/schemaArray"
    }],
    "default": true
  },
  maxItems: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minItems: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  uniqueItems: {
    type: "boolean",
    "default": false
  },
  contains: {
    $ref: "#"
  },
  maxProperties: {
    $ref: "#/definitions/nonNegativeInteger"
  },
  minProperties: {
    $ref: "#/definitions/nonNegativeIntegerDefault0"
  },
  required: {
    $ref: "#/definitions/stringArray"
  },
  additionalProperties: {
    $ref: "#"
  },
  definitions: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  properties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    "default": {}
  },
  patternProperties: {
    type: "object",
    additionalProperties: {
      $ref: "#"
    },
    propertyNames: {
      format: "regex"
    },
    "default": {}
  },
  dependencies: {
    type: "object",
    additionalProperties: {
      anyOf: [{
        $ref: "#"
      }, {
        $ref: "#/definitions/stringArray"
      }]
    }
  },
  propertyNames: {
    $ref: "#"
  },
  "const": true,
  "enum": {
    type: "array",
    items: true,
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [{
      $ref: "#/definitions/simpleTypes"
    }, {
      type: "array",
      items: {
        $ref: "#/definitions/simpleTypes"
      },
      minItems: 1,
      uniqueItems: true
    }]
  },
  format: {
    type: "string"
  },
  contentMediaType: {
    type: "string"
  },
  contentEncoding: {
    type: "string"
  },
  "if": {
    $ref: "#"
  },
  then: {
    $ref: "#"
  },
  "else": {
    $ref: "#"
  },
  allOf: {
    $ref: "#/definitions/schemaArray"
  },
  anyOf: {
    $ref: "#/definitions/schemaArray"
  },
  oneOf: {
    $ref: "#/definitions/schemaArray"
  },
  not: {
    $ref: "#"
  }
};
var jsonSchemaDraft07 = {
  $schema: $schema,
  $id: $id,
  title: title$1,
  definitions: definitions,
  type: type$1,
  properties: properties$1,
  "default": true
};

var jsonSchemaDraft07$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $schema: $schema,
  $id: $id,
  title: title$1,
  definitions: definitions,
  type: type$1,
  properties: properties$1,
  'default': jsonSchemaDraft07
});

var require$$2$1 = getCjsExportFromNamespace(jsonSchemaDraft07$1);

var definition_schema = {
  $id: 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js',
  definitions: {
    simpleTypes: require$$2$1.definitions.simpleTypes
  },
  type: 'object',
  dependencies: {
    schema: ['validate'],
    $data: ['validate'],
    statements: ['inline'],
    valid: {
      not: {
        required: ['macro']
      }
    }
  },
  properties: {
    type: require$$2$1.properties.type,
    schema: {
      type: 'boolean'
    },
    statements: {
      type: 'boolean'
    },
    dependencies: {
      type: 'array',
      items: {
        type: 'string'
      }
    },
    metaSchema: {
      type: 'object'
    },
    modifying: {
      type: 'boolean'
    },
    valid: {
      type: 'boolean'
    },
    $data: {
      type: 'boolean'
    },
    async: {
      type: 'boolean'
    },
    errors: {
      anyOf: [{
        type: 'boolean'
      }, {
        const: 'full'
      }]
    }
  }
};

var IDENTIFIER$1 = /^[a-z_$][a-z0-9_$-]*$/i;
var keyword = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword,
  validate: validateKeyword
};
/**
 * Define custom keyword
 * @this  Ajv
 * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
 * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
 * @return {Ajv} this for method chaining
 */

function addKeyword(keyword, definition) {
  /* jshint validthis: true */

  /* eslint no-shadow: 0 */
  var RULES = this.RULES;
  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');
  if (!IDENTIFIER$1.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');

  if (definition) {
    this.validateKeyword(definition, true);
    var dataType = definition.type;

    if (Array.isArray(dataType)) {
      for (var i = 0; i < dataType.length; i++) {
        _addRule(keyword, dataType[i], definition);
      }
    } else {
      _addRule(keyword, dataType, definition);
    }

    var metaSchema = definition.metaSchema;

    if (metaSchema) {
      if (definition.$data && this._opts.$data) {
        metaSchema = {
          anyOf: [metaSchema, {
            '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#'
          }]
        };
      }

      definition.validateSchema = this.compile(metaSchema, true);
    }
  }

  RULES.keywords[keyword] = RULES.all[keyword] = true;

  function _addRule(keyword, dataType, definition) {
    var ruleGroup;

    for (var i = 0; i < RULES.length; i++) {
      var rg = RULES[i];

      if (rg.type == dataType) {
        ruleGroup = rg;
        break;
      }
    }

    if (!ruleGroup) {
      ruleGroup = {
        type: dataType,
        rules: []
      };
      RULES.push(ruleGroup);
    }

    var rule = {
      keyword: keyword,
      definition: definition,
      custom: true,
      code: custom$7,
      implements: definition.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword] = rule;
  }

  return this;
}
/**
 * Get keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
 */


function getKeyword(keyword) {
  /* jshint validthis: true */
  var rule = this.RULES.custom[keyword];
  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
}
/**
 * Remove keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Ajv} this for method chaining
 */


function removeKeyword(keyword) {
  /* jshint validthis: true */
  var RULES = this.RULES;
  delete RULES.keywords[keyword];
  delete RULES.all[keyword];
  delete RULES.custom[keyword];

  for (var i = 0; i < RULES.length; i++) {
    var rules = RULES[i].rules;

    for (var j = 0; j < rules.length; j++) {
      if (rules[j].keyword == keyword) {
        rules.splice(j, 1);
        break;
      }
    }
  }

  return this;
}
/**
 * Validate keyword definition
 * @this  Ajv
 * @param {Object} definition keyword definition object.
 * @param {Boolean} throwError true to throw exception if definition is invalid
 * @return {boolean} validation result
 */


function validateKeyword(definition, throwError) {
  validateKeyword.errors = null;
  var v = this._validateKeyword = this._validateKeyword || this.compile(definition_schema, true);
  if (v(definition)) return true;
  validateKeyword.errors = v.errors;
  if (throwError) throw new Error('custom keyword definition is invalid: ' + this.errorsText(v.errors));else return false;
}

var $schema$1 = "http://json-schema.org/draft-07/schema#";
var $id$1 = "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#";
var description$1 = "Meta-schema for $data reference (JSON Schema extension proposal)";
var type$2 = "object";
var required$1 = ["$data"];
var properties$2 = {
  $data: {
    type: "string",
    anyOf: [{
      format: "relative-json-pointer"
    }, {
      format: "json-pointer"
    }]
  }
};
var additionalProperties = false;
var data$1 = {
  $schema: $schema$1,
  $id: $id$1,
  description: description$1,
  type: type$2,
  required: required$1,
  properties: properties$2,
  additionalProperties: additionalProperties
};

var data$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $schema: $schema$1,
  $id: $id$1,
  description: description$1,
  type: type$2,
  required: required$1,
  properties: properties$2,
  additionalProperties: additionalProperties,
  'default': data$1
});

var require$$1$1 = getCjsExportFromNamespace(data$2);

var ajv = Ajv;
Ajv.prototype.validate = validate$1;
Ajv.prototype.compile = compile$2;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;
Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;
Ajv.prototype.compileAsync = async$1;
Ajv.prototype.addKeyword = keyword.add;
Ajv.prototype.getKeyword = keyword.get;
Ajv.prototype.removeKeyword = keyword.remove;
Ajv.prototype.validateKeyword = keyword.validate;
Ajv.ValidationError = error_classes.Validation;
Ajv.MissingRefError = error_classes.MissingRef;
Ajv.$dataMetaSchema = data;
var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';
var META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults'];
var META_SUPPORT_DATA = ['/properties'];
/**
 * Creates validator instance.
 * Usage: `Ajv(opts)`
 * @param {Object} opts optional options
 * @return {Object} ajv instance
 */

function Ajv(opts) {
  if (!(this instanceof Ajv)) return new Ajv(opts);
  opts = this._opts = util$3.copy(opts) || {};
  setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats_1(opts.format);
  this._cache = opts.cache || new cache$1();
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules();
  this._getId = chooseGetId(opts);
  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = fastJsonStableStringify;
  this._metaOpts = getMetaSchemaOptions(this);
  if (opts.formats) addInitialFormats(this);
  addDefaultMetaSchema(this);
  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
  if (opts.nullable) this.addKeyword('nullable', {
    metaSchema: {
      type: 'boolean'
    }
  });
  addInitialSchemas(this);
}
/**
 * Validate data using schema
 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
 * @this   Ajv
 * @param  {String|Object} schemaKeyRef key, ref or schema object
 * @param  {Any} data to be validated
 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
 */


function validate$1(schemaKeyRef, data) {
  var v;

  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);

    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async !== true) this.errors = v.errors;
  return valid;
}
/**
 * Create validating function for passed schema.
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
 * @return {Function} validating function
 */


function compile$2(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);

  return schemaObj.validate || this._compile(schemaObj);
}
/**
 * Adds schema to the instance.
 * @this   Ajv
 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
 * @return {Ajv} this for method chaining
 */


function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      this.addSchema(schema[i], undefined, _skipValidation, _meta);
    }

    return this;
  }

  var id = this._getId(schema);

  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');
  key = resolve_1.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}
/**
 * Add schema that will be used to validate other schemas
 * options in META_IGNORE_OPTIONS are alway set to false
 * @this   Ajv
 * @param {Object} schema schema object
 * @param {String} key optional schema key
 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
 * @return {Ajv} this for method chaining
 */


function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}
/**
 * Validate schema
 * @this   Ajv
 * @param {Object} schema schema to validate
 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
 * @return {Boolean} true if schema is valid
 */


function validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);

  if (!$schema) {
    this.logger.warn('meta-schema not available');
    this.errors = null;
    return true;
  }

  var valid = this.validate($schema, schema);

  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);
  }

  return valid;
}

function defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta = typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;
  return self._opts.defaultMeta;
}
/**
 * Get compiled schema from the instance by `key` or `ref`.
 * @this   Ajv
 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
 * @return {Function} schema validating function (with property `schema`).
 */


function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);

  switch (typeof schemaObj) {
    case 'object':
      return schemaObj.validate || this._compile(schemaObj);

    case 'string':
      return this.getSchema(schemaObj);

    case 'undefined':
      return _getSchemaFragment(this, keyRef);
  }
}

function _getSchemaFragment(self, ref) {
  var res = resolve_1.schema.call(self, {
    schema: {}
  }, ref);

  if (res) {
    var schema = res.schema,
        root = res.root,
        baseId = res.baseId;
    var v = compile_1.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new schema_obj({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
}

function _getSchemaObj(self, keyRef) {
  keyRef = resolve_1.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}
/**
 * Remove cached schema(s).
 * If no parameter is passed all schemas but meta-schemas are removed.
 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
 * @this   Ajv
 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
 * @return {Ajv} this for method chaining
 */


function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);

    _removeAllSchemas(this, this._refs, schemaKeyRef);

    return this;
  }

  switch (typeof schemaKeyRef) {
    case 'undefined':
      _removeAllSchemas(this, this._schemas);

      _removeAllSchemas(this, this._refs);

      this._cache.clear();

      return this;

    case 'string':
      var schemaObj = _getSchemaObj(this, schemaKeyRef);

      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;

    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;

      this._cache.del(cacheKey);

      var id = this._getId(schemaKeyRef);

      if (id) {
        id = resolve_1.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }

  }

  return this;
}

function _removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];

    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);

      delete schemas[keyRef];
    }
  }
}
/* @this   Ajv */


function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;

  var cached = this._cache.get(cacheKey);

  if (cached) return cached;
  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
  var id = resolve_1.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) checkUnique(this, id);
  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve_1.normalizeId(schema.$schema))) this.validateSchema(schema, true);
  var localRefs = resolve_1.ids.call(this, schema);
  var schemaObj = new schema_obj({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });
  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;

  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);
  return schemaObj;
}
/* @this   Ajv */


function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true) callValidate.$async = true;
    return callValidate;
  }

  schemaObj.compiling = true;
  var currentOpts;

  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;

  try {
    v = compile_1.call(this, schemaObj.schema, root, schemaObj.localRefs);
  } catch (e) {
    delete schemaObj.validate;
    throw e;
  } finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;
  /* @this   {*} - custom context, see passContext option */

  function callValidate() {
    /* jshint validthis: true */
    var _validate = schemaObj.validate;

    var result = _validate.apply(this, arguments);

    callValidate.errors = _validate.errors;
    return result;
  }
}

function chooseGetId(opts) {
  switch (opts.schemaId) {
    case 'auto':
      return _get$IdOrId;

    case 'id':
      return _getId;

    default:
      return _get$Id;
  }
}
/* @this   Ajv */


function _getId(schema) {
  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
  return schema.id;
}
/* @this   Ajv */


function _get$Id(schema) {
  if (schema.id) this.logger.warn('schema id ignored', schema.id);
  return schema.$id;
}

function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
}
/**
 * Convert array of error message objects to string
 * @this   Ajv
 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
 * @param  {Object} options optional options with properties `separator` and `dataVar`.
 * @return {String} human readable string with all errors descriptions
 */


function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;
  var text = '';

  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }

  return text.slice(0, -separator.length);
}
/**
 * Add custom format
 * @this   Ajv
 * @param {String} name format name
 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
 * @return {Ajv} this for method chaining
 */


function addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  return this;
}

function addDefaultMetaSchema(self) {
  var $dataSchema;

  if (self._opts.$data) {
    $dataSchema = require$$1$1;
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }

  if (self._opts.meta === false) return;
  var metaSchema = require$$2$1;
  if (self._opts.$data) metaSchema = data(metaSchema, META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
}

function addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) {
    self.addSchema(optsSchemas[key], key);
  }
}

function addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
}

function checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
}

function getMetaSchemaOptions(self) {
  var metaOpts = util$3.copy(self._opts);

  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) {
    delete metaOpts[META_IGNORE_OPTIONS[i]];
  }

  return metaOpts;
}

function setLogger(self) {
  var logger = self._opts.logger;

  if (logger === false) {
    self.logger = {
      log: noop$1,
      warn: noop$1,
      error: noop$1
    };
  } else {
    if (logger === undefined) logger = console;
    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');
    self.logger = logger;
  }
}

function noop$1() {}

var CONSTRUCTORS = {
  Object: Object,
  Array: Array,
  Function: Function,
  Number: Number,
  String: String,
  Date: Date,
  RegExp: RegExp
};

var _instanceof = function defFunc(ajv) {
  /* istanbul ignore else */
  if (typeof Buffer != 'undefined') CONSTRUCTORS.Buffer = Buffer;
  /* istanbul ignore else */

  if (typeof Promise != 'undefined') CONSTRUCTORS.Promise = Promise;
  defFunc.definition = {
    compile: function compile(schema) {
      if (typeof schema == 'string') {
        var Constructor = getConstructor(schema);
        return function (data) {
          return data instanceof Constructor;
        };
      }

      var constructors = schema.map(getConstructor);
      return function (data) {
        for (var i = 0; i < constructors.length; i++) {
          if (data instanceof constructors[i]) return true;
        }

        return false;
      };
    },
    CONSTRUCTORS: CONSTRUCTORS,
    metaSchema: {
      anyOf: [{
        type: 'string'
      }, {
        type: 'array',
        items: {
          type: 'string'
        }
      }]
    }
  };
  ajv.addKeyword('instanceof', defFunc.definition);
  return ajv;

  function getConstructor(c) {
    var Constructor = CONSTRUCTORS[c];
    if (Constructor) return Constructor;
    throw new Error('invalid "instanceof" keyword value ' + c);
  }
};

var range$2 = function defFunc(ajv) {
  defFunc.definition = {
    type: 'number',
    macro: function macro(schema, parentSchema) {
      var min = schema[0],
          max = schema[1],
          exclusive = parentSchema.exclusiveRange;
      validateRangeSchema(min, max, exclusive);
      return exclusive === true ? {
        exclusiveMinimum: min,
        exclusiveMaximum: max
      } : {
        minimum: min,
        maximum: max
      };
    },
    metaSchema: {
      type: 'array',
      minItems: 2,
      maxItems: 2,
      items: {
        type: 'number'
      }
    }
  };
  ajv.addKeyword('range', defFunc.definition);
  ajv.addKeyword('exclusiveRange');
  return ajv;

  function validateRangeSchema(min, max, exclusive) {
    if (exclusive !== undefined && typeof exclusive != 'boolean') throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');
    if (min > max || exclusive && min == max) throw new Error('There are no numbers in range');
  }
};

var regexp = function defFunc(ajv) {
  defFunc.definition = {
    type: 'string',
    inline: function inline(it, keyword, schema) {
      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';

      function getRegExp() {
        try {
          if (typeof schema == 'object') return new RegExp(schema.pattern, schema.flags);
          var rx = schema.match(/^\/(.*)\/([gimuy]*)$/);
          if (rx) return new RegExp(rx[1], rx[2]);
          throw new Error('cannot parse string into RegExp');
        } catch (e) {
          console.error('regular expression', schema, 'is invalid');
          throw e;
        }
      }
    },
    metaSchema: {
      type: ['string', 'object'],
      properties: {
        pattern: {
          type: 'string'
        },
        flags: {
          type: 'string'
        }
      },
      required: ['pattern'],
      additionalProperties: false
    }
  };
  ajv.addKeyword('regexp', defFunc.definition);
  return ajv;
};

var KNOWN_TYPES = ['undefined', 'string', 'number', 'object', 'function', 'boolean', 'symbol'];

var _typeof = function defFunc(ajv) {
  defFunc.definition = {
    inline: function inline(it, keyword, schema) {
      var data = 'data' + (it.dataLevel || '');
      if (typeof schema == 'string') return 'typeof ' + data + ' == "' + schema + '"';
      schema = 'validate.schema' + it.schemaPath + '.' + keyword;
      return schema + '.indexOf(typeof ' + data + ') >= 0';
    },
    metaSchema: {
      anyOf: [{
        type: 'string',
        enum: KNOWN_TYPES
      }, {
        type: 'array',
        items: {
          type: 'string',
          enum: KNOWN_TYPES
        }
      }]
    }
  };
  ajv.addKeyword('typeof', defFunc.definition);
  return ajv;
};

var sequences = {};
var DEFAULTS = {
  timestamp: function timestamp() {
    return Date.now();
  },
  datetime: function datetime() {
    return new Date().toISOString();
  },
  date: function date() {
    return new Date().toISOString().slice(0, 10);
  },
  time: function time() {
    return new Date().toISOString().slice(11);
  },
  random: function random() {
    return Math.random();
  },
  randomint: function randomint(args) {
    var limit = args && args.max || 2;
    return function () {
      return Math.floor(Math.random() * limit);
    };
  },
  seq: function seq(args) {
    var name = args && args.name || '';
    sequences[name] = sequences[name] || 0;
    return function () {
      return sequences[name]++;
    };
  }
};

var dynamicDefaults = function defFunc(ajv) {
  defFunc.definition = {
    compile: function compile(schema, parentSchema, it) {
      var funcs = {};

      for (var key in schema) {
        var d = schema[key];
        var func = getDefault(typeof d == 'string' ? d : d.func);
        funcs[key] = func.length ? func(d.args) : func;
      }

      return it.opts.useDefaults && !it.compositeRule ? assignDefaults : noop;

      function assignDefaults(data) {
        for (var prop in schema) {
          if (data[prop] === undefined || it.opts.useDefaults == 'empty' && (data[prop] === null || data[prop] === '')) data[prop] = funcs[prop]();
        }

        return true;
      }

      function noop() {
        return true;
      }
    },
    DEFAULTS: DEFAULTS,
    metaSchema: {
      type: 'object',
      additionalProperties: {
        type: ['string', 'object'],
        additionalProperties: false,
        required: ['func', 'args'],
        properties: {
          func: {
            type: 'string'
          },
          args: {
            type: 'object'
          }
        }
      }
    }
  };
  ajv.addKeyword('dynamicDefaults', defFunc.definition);
  return ajv;

  function getDefault(d) {
    var def = DEFAULTS[d];
    if (def) return def;
    throw new Error('invalid "dynamicDefaults" keyword property value: ' + d);
  }
};

var allRequired = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema, parentSchema) {
      if (!schema) return true;
      var properties = Object.keys(parentSchema.properties);
      if (properties.length == 0) return true;
      return {
        required: properties
      };
    },
    metaSchema: {
      type: 'boolean'
    },
    dependencies: ['properties']
  };
  ajv.addKeyword('allRequired', defFunc.definition);
  return ajv;
};

var anyRequired = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema) {
      if (schema.length == 0) return true;
      if (schema.length == 1) return {
        required: schema
      };
      var schemas = schema.map(function (prop) {
        return {
          required: [prop]
        };
      });
      return {
        anyOf: schemas
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };
  ajv.addKeyword('anyRequired', defFunc.definition);
  return ajv;
};

var oneRequired = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema) {
      if (schema.length == 0) return true;
      if (schema.length == 1) return {
        required: schema
      };
      var schemas = schema.map(function (prop) {
        return {
          required: [prop]
        };
      });
      return {
        oneOf: schemas
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };
  ajv.addKeyword('oneRequired', defFunc.definition);
  return ajv;
};

var prohibited = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema) {
      if (schema.length == 0) return true;
      if (schema.length == 1) return {
        not: {
          required: schema
        }
      };
      var schemas = schema.map(function (prop) {
        return {
          required: [prop]
        };
      });
      return {
        not: {
          anyOf: schemas
        }
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };
  ajv.addKeyword('prohibited', defFunc.definition);
  return ajv;
};

var SCALAR_TYPES = ['number', 'integer', 'string', 'boolean', 'null'];

var uniqueItemProperties = function defFunc(ajv) {
  defFunc.definition = {
    type: 'array',
    compile: function compile(keys, parentSchema, it) {
      var equal = it.util.equal;
      var scalar = getScalarKeys(keys, parentSchema);
      return function (data) {
        if (data.length > 1) {
          for (var k = 0; k < keys.length; k++) {
            var i,
                key = keys[k];

            if (scalar[k]) {
              var hash = {};

              for (i = data.length; i--;) {
                if (!data[i] || typeof data[i] != 'object') continue;
                var prop = data[i][key];
                if (prop && typeof prop == 'object') continue;
                if (typeof prop == 'string') prop = '"' + prop;
                if (hash[prop]) return false;
                hash[prop] = true;
              }
            } else {
              for (i = data.length; i--;) {
                if (!data[i] || typeof data[i] != 'object') continue;

                for (var j = i; j--;) {
                  if (data[j] && typeof data[j] == 'object' && equal(data[i][key], data[j][key])) return false;
                }
              }
            }
          }
        }

        return true;
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };
  ajv.addKeyword('uniqueItemProperties', defFunc.definition);
  return ajv;
};

function getScalarKeys(keys, schema) {
  return keys.map(function (key) {
    var properties = schema.items && schema.items.properties;
    var propType = properties && properties[key] && properties[key].type;
    return Array.isArray(propType) ? propType.indexOf('object') < 0 && propType.indexOf('array') < 0 : SCALAR_TYPES.indexOf(propType) >= 0;
  });
}

var _util = {
  metaSchemaRef: metaSchemaRef
};
var META_SCHEMA_ID$1 = 'http://json-schema.org/draft-07/schema';

function metaSchemaRef(ajv) {
  var defaultMeta = ajv._opts.defaultMeta;
  if (typeof defaultMeta == 'string') return {
    $ref: defaultMeta
  };
  if (ajv.getSchema(META_SCHEMA_ID$1)) return {
    $ref: META_SCHEMA_ID$1
  };
  console.warn('meta schema not defined');
  return {};
}

var deepProperties = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function macro(schema) {
      var schemas = [];

      for (var pointer in schema) {
        schemas.push(getSchema$1(pointer, schema[pointer]));
      }

      return {
        'allOf': schemas
      };
    },
    metaSchema: {
      type: 'object',
      propertyNames: {
        type: 'string',
        format: 'json-pointer'
      },
      additionalProperties: _util.metaSchemaRef(ajv)
    }
  };
  ajv.addKeyword('deepProperties', defFunc.definition);
  return ajv;
};

function getSchema$1(jsonPointer, schema) {
  var segments = jsonPointer.split('/');
  var rootSchema = {};
  var pointerSchema = rootSchema;

  for (var i = 1; i < segments.length; i++) {
    var segment = segments[i];
    var isLast = i == segments.length - 1;
    segment = unescapeJsonPointer$1(segment);
    var properties = pointerSchema.properties = {};
    var items = undefined;

    if (/[0-9]+/.test(segment)) {
      var count = +segment;
      items = pointerSchema.items = [];

      while (count--) {
        items.push({});
      }
    }

    pointerSchema = isLast ? schema : {};
    properties[segment] = pointerSchema;
    if (items) items.push(pointerSchema);
  }

  return rootSchema;
}

function unescapeJsonPointer$1(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

var deepRequired = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    inline: function inline(it, keyword, schema) {
      var expr = '';

      for (var i = 0; i < schema.length; i++) {
        if (i) expr += ' && ';
        expr += '(' + getData$1(schema[i], it.dataLevel) + ' !== undefined)';
      }

      return expr;
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        format: 'json-pointer'
      }
    }
  };
  ajv.addKeyword('deepRequired', defFunc.definition);
  return ajv;
};

function getData$1(jsonPointer, lvl) {
  var data = 'data' + (lvl || '');
  if (!jsonPointer) return data;
  var expr = data;
  var segments = jsonPointer.split('/');

  for (var i = 1; i < segments.length; i++) {
    var segment = segments[i];
    data += getProperty$1(unescapeJsonPointer$2(segment));
    expr += ' && ' + data;
  }

  return expr;
}

var IDENTIFIER$2 = /^[a-z$_][a-z$_0-9]*$/i;
var INTEGER = /^[0-9]+$/;
var SINGLE_QUOTE$1 = /'|\\/g;

function getProperty$1(key) {
  return INTEGER.test(key) ? '[' + key + ']' : IDENTIFIER$2.test(key) ? '.' + key : "['" + key.replace(SINGLE_QUOTE$1, '\\$&') + "']";
}

function unescapeJsonPointer$2(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

var _formatLimit = function generate__formatLimit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  out += 'var ' + $valid + ' = undefined;';

  if (it.opts.format === false) {
    out += ' ' + $valid + ' = true; ';
    return out;
  }

  var $schemaFormat = it.schema.format,
      $isDataFormat = it.opts.$data && $schemaFormat.$data,
      $closingBraces = '';

  if ($isDataFormat) {
    var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),
        $format = 'format' + $lvl,
        $compare = 'compare' + $lvl;
    out += ' var ' + $format + ' = formats[' + $schemaValueFormat + '] , ' + $compare + ' = ' + $format + ' && ' + $format + '.compare;';
  } else {
    var $format = it.formats[$schemaFormat];

    if (!($format && $format.compare)) {
      out += '  ' + $valid + ' = true; ';
      return out;
    }

    var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';
  }

  var $isMax = $keyword == 'formatMaximum',
      $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),
      $schemaExcl = it.schema[$exclusiveKeyword],
      $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
      $op = $isMax ? '<' : '>',
      $result = 'result' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
      $schemaValue;

  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }

  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
        $exclusive = 'exclusive' + $lvl,
        $opExpr = 'op' + $lvl,
        $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' if (typeof ' + $schemaValueExcl + ' != \'boolean\' && ' + $schemaValueExcl + ' !== undefined) { ' + $valid + ' = false; ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    /* istanbul ignore else */

    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_formatExclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';

      if (it.opts.messages !== false) {
        out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
      }

      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }

      out += ' } ';
    } else {
      out += ' {} ';
    }

    var __err = out;
    out = $$outStack.pop();

    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }

    out += ' }  ';

    if ($breakOnError) {
      $closingBraces += '}';
      out += ' else { ';
    }

    if ($isData) {
      out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
      $closingBraces += '}';
    }

    if ($isDataFormat) {
      out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
      $closingBraces += '}';
    }

    out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; var ' + $exclusive + ' = ' + $schemaValueExcl + ' === true; if (' + $valid + ' === undefined) { ' + $valid + ' = ' + $exclusive + ' ? ' + $result + ' ' + $op + ' 0 : ' + $result + ' ' + $op + '= 0; } if (!' + $valid + ') var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\';';
  } else {
    var $exclusive = $schemaExcl === true,
        $opStr = $op;
    if (!$exclusive) $opStr += '=';
    var $opExpr = '\'' + $opStr + '\'';

    if ($isData) {
      out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
      $closingBraces += '}';
    }

    if ($isDataFormat) {
      out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
      $closingBraces += '}';
    }

    out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; if (' + $valid + ' === undefined) ' + $valid + ' = ' + $result + ' ' + $op;

    if (!$exclusive) {
      out += '=';
    }

    out += ' 0;';
  }

  out += '' + $closingBraces + 'if (!' + $valid + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = '';
  /* istanbul ignore else */

  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_formatLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit:  ';

    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }

    out += ' , exclusive: ' + $exclusive + ' } ';

    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + $opStr + ' "';

      if ($isData) {
        out += '\' + ' + $schemaValue + ' + \'';
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }

      out += '"\' ';
    }

    if (it.opts.verbose) {
      out += ' , schema:  ';

      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }

      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }

    out += ' } ';
  } else {
    out += ' {} ';
  }

  var __err = out;
  out = $$outStack.pop();

  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }

  out += '}';
  return out;
};

var TIME$1 = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var DATE_TIME_SEPARATOR$1 = /t|\s/i;
var COMPARE_FORMATS = {
  date: compareDate,
  time: compareTime,
  'date-time': compareDateTime
};
var $dataMetaSchema = {
  type: 'object',
  required: ['$data'],
  properties: {
    $data: {
      type: 'string',
      anyOf: [{
        format: 'relative-json-pointer'
      }, {
        format: 'json-pointer'
      }]
    }
  },
  additionalProperties: false
};

var _formatLimit$1 = function _formatLimit$1(minMax) {
  var keyword = 'format' + minMax;
  return function defFunc(ajv) {
    defFunc.definition = {
      type: 'string',
      inline: _formatLimit,
      statements: true,
      errors: 'full',
      dependencies: ['format'],
      metaSchema: {
        anyOf: [{
          type: 'string'
        }, $dataMetaSchema]
      }
    };
    ajv.addKeyword(keyword, defFunc.definition);
    ajv.addKeyword('formatExclusive' + minMax, {
      dependencies: ['format' + minMax],
      metaSchema: {
        anyOf: [{
          type: 'boolean'
        }, $dataMetaSchema]
      }
    });
    extendFormats(ajv);
    return ajv;
  };
};

function extendFormats(ajv) {
  var formats = ajv._formats;

  for (var name in COMPARE_FORMATS) {
    var format = formats[name]; // the last condition is needed if it's RegExp from another window

    if (typeof format != 'object' || format instanceof RegExp || !format.validate) format = formats[name] = {
      validate: format
    };
    if (!format.compare) format.compare = COMPARE_FORMATS[name];
  }
}

function compareDate(d1, d2) {
  if (!(d1 && d2)) return;
  if (d1 > d2) return 1;
  if (d1 < d2) return -1;
  if (d1 === d2) return 0;
}

function compareTime(t1, t2) {
  if (!(t1 && t2)) return;
  t1 = t1.match(TIME$1);
  t2 = t2.match(TIME$1);
  if (!(t1 && t2)) return;
  t1 = t1[1] + t1[2] + t1[3] + (t1[4] || '');
  t2 = t2[1] + t2[2] + t2[3] + (t2[4] || '');
  if (t1 > t2) return 1;
  if (t1 < t2) return -1;
  if (t1 === t2) return 0;
}

function compareDateTime(dt1, dt2) {
  if (!(dt1 && dt2)) return;
  dt1 = dt1.split(DATE_TIME_SEPARATOR$1);
  dt2 = dt2.split(DATE_TIME_SEPARATOR$1);
  var res = compareDate(dt1[0], dt2[0]);
  if (res === undefined) return;
  return res || compareTime(dt1[1], dt2[1]);
}

var formatMinimum = _formatLimit$1('Minimum');

var formatMaximum = _formatLimit$1('Maximum');

var patternRequired = function generate_patternRequired(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $matched = 'patternMatched' + $lvl,
      $dataProperties = 'dataProperties' + $lvl,
      $closingBraces = '',
      $ownProperties = it.opts.ownProperties;
  out += 'var ' + $valid + ' = true;';

  if ($ownProperties) {
    out += ' var ' + $dataProperties + ' = undefined;';
  }

  var arr1 = $schema;

  if (arr1) {
    var $pProperty,
        i1 = -1,
        l1 = arr1.length - 1;

    while (i1 < l1) {
      $pProperty = arr1[i1 += 1];
      out += ' var ' + $matched + ' = false;  ';

      if ($ownProperties) {
        out += ' ' + $dataProperties + ' = ' + $dataProperties + ' || Object.keys(' + $data + '); for (var ' + $idx + '=0; ' + $idx + '<' + $dataProperties + '.length; ' + $idx + '++) { var ' + $key + ' = ' + $dataProperties + '[' + $idx + ']; ';
      } else {
        out += ' for (var ' + $key + ' in ' + $data + ') { ';
      }

      out += ' ' + $matched + ' = ' + it.usePattern($pProperty) + '.test(' + $key + '); if (' + $matched + ') break; } ';
      var $missingPattern = it.util.escapeQuotes($pProperty);
      out += ' if (!' + $matched + ') { ' + $valid + ' = false;  var err =   ';
      /* istanbul ignore else */

      if (it.createErrors !== false) {
        out += ' { keyword: \'' + 'patternRequired' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingPattern: \'' + $missingPattern + '\' } ';

        if (it.opts.messages !== false) {
          out += ' , message: \'should have property matching pattern \\\'' + $missingPattern + '\\\'\' ';
        }

        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }

        out += ' } ';
      } else {
        out += ' {} ';
      }

      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';

      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }

  out += '' + $closingBraces;
  return out;
};

var patternRequired$1 = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    inline: patternRequired,
    statements: true,
    errors: 'full',
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        format: 'regex'
      },
      uniqueItems: true
    }
  };
  ajv.addKeyword('patternRequired', defFunc.definition);
  return ajv;
};

var _switch = function generate_switch(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $ifPassed = 'ifPassed' + it.level,
      $currentBaseId = $it.baseId,
      $shouldContinue;
  out += 'var ' + $ifPassed + ';';
  var arr1 = $schema;

  if (arr1) {
    var $sch,
        $caseIndex = -1,
        l1 = arr1.length - 1;

    while ($caseIndex < l1) {
      $sch = arr1[$caseIndex += 1];

      if ($caseIndex && !$shouldContinue) {
        out += ' if (!' + $ifPassed + ') { ';
        $closingBraces += '}';
      }

      if ($sch.if && it.util.schemaHasRules($sch.if, it.RULES.all)) {
        out += ' var ' + $errs + ' = errors;   ';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        $it.createErrors = false;
        $it.schema = $sch.if;
        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';
        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        $it.createErrors = true;
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' ' + $ifPassed + ' = ' + $nextValid + '; if (' + $ifPassed + ') {  ';

        if (typeof $sch.then == 'boolean') {
          if ($sch.then === false) {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = '';
            /* istanbul ignore else */

            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'switch' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';

              if (it.opts.messages !== false) {
                out += ' , message: \'should pass "switch" keyword validation\' ';
              }

              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }

              out += ' } ';
            } else {
              out += ' {} ';
            }

            var __err = out;
            out = $$outStack.pop();

            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + __err + ']); ';
              } else {
                out += ' validate.errors = [' + __err + ']; return false; ';
              }
            } else {
              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }

          out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
        } else {
          $it.schema = $sch.then;
          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
          out += '  ' + it.validate($it) + ' ';
          $it.baseId = $currentBaseId;
        }

        out += '  } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } } ';
      } else {
        out += ' ' + $ifPassed + ' = true;  ';

        if (typeof $sch.then == 'boolean') {
          if ($sch.then === false) {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = '';
            /* istanbul ignore else */

            if (it.createErrors !== false) {
              out += ' { keyword: \'' + 'switch' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';

              if (it.opts.messages !== false) {
                out += ' , message: \'should pass "switch" keyword validation\' ';
              }

              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
              }

              out += ' } ';
            } else {
              out += ' {} ';
            }

            var __err = out;
            out = $$outStack.pop();

            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + __err + ']); ';
              } else {
                out += ' validate.errors = [' + __err + ']; return false; ';
              }
            } else {
              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }

          out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
        } else {
          $it.schema = $sch.then;
          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
          out += '  ' + it.validate($it) + ' ';
          $it.baseId = $currentBaseId;
        }
      }

      $shouldContinue = $sch.continue;
    }
  }

  out += '' + $closingBraces + 'var ' + $valid + ' = ' + $nextValid + '; ';
  out = it.util.cleanUpCode(out);
  return out;
};

var _switch$1 = function defFunc(ajv) {
  if (ajv.RULES.keywords.switch && ajv.RULES.keywords.if) return;
  var metaSchemaRef = _util.metaSchemaRef(ajv);
  defFunc.definition = {
    inline: _switch,
    statements: true,
    errors: 'full',
    metaSchema: {
      type: 'array',
      items: {
        required: ['then'],
        properties: {
          'if': metaSchemaRef,
          'then': {
            anyOf: [{
              type: 'boolean'
            }, metaSchemaRef]
          },
          'continue': {
            type: 'boolean'
          }
        },
        additionalProperties: false,
        dependencies: {
          'continue': ['if']
        }
      }
    }
  };
  ajv.addKeyword('switch', defFunc.definition);
  return ajv;
};

var select = function defFunc(ajv) {
  if (!ajv._opts.$data) {
    console.warn('keyword select requires $data option');
    return ajv;
  }

  var metaSchemaRef = _util.metaSchemaRef(ajv);
  var compiledCaseSchemas = [];
  defFunc.definition = {
    validate: function v(schema, data, parentSchema) {
      if (parentSchema.selectCases === undefined) throw new Error('keyword "selectCases" is absent');
      var compiled = getCompiledSchemas(parentSchema, false);
      var validate = compiled.cases[schema];
      if (validate === undefined) validate = compiled.default;
      if (typeof validate == 'boolean') return validate;
      var valid = validate(data);
      if (!valid) v.errors = validate.errors;
      return valid;
    },
    $data: true,
    metaSchema: {
      type: ['string', 'number', 'boolean', 'null']
    }
  };
  ajv.addKeyword('select', defFunc.definition);
  ajv.addKeyword('selectCases', {
    compile: function compile(schemas, parentSchema) {
      var compiled = getCompiledSchemas(parentSchema);

      for (var value in schemas) {
        compiled.cases[value] = compileOrBoolean(schemas[value]);
      }

      return function () {
        return true;
      };
    },
    valid: true,
    metaSchema: {
      type: 'object',
      additionalProperties: metaSchemaRef
    }
  });
  ajv.addKeyword('selectDefault', {
    compile: function compile(schema, parentSchema) {
      var compiled = getCompiledSchemas(parentSchema);
      compiled.default = compileOrBoolean(schema);
      return function () {
        return true;
      };
    },
    valid: true,
    metaSchema: metaSchemaRef
  });
  return ajv;

  function getCompiledSchemas(parentSchema, create) {
    var compiled;
    compiledCaseSchemas.some(function (c) {
      if (c.parentSchema === parentSchema) {
        compiled = c;
        return true;
      }
    });

    if (!compiled && create !== false) {
      compiled = {
        parentSchema: parentSchema,
        cases: {},
        default: true
      };
      compiledCaseSchemas.push(compiled);
    }

    return compiled;
  }

  function compileOrBoolean(schema) {
    return typeof schema == 'boolean' ? schema : ajv.compile(schema);
  }
};

var transform = function defFunc(ajv) {
  var transform = {
    trimLeft: function trimLeft(value) {
      return value.replace(/^[\s]+/, '');
    },
    trimRight: function trimRight(value) {
      return value.replace(/[\s]+$/, '');
    },
    trim: function trim(value) {
      return value.trim();
    },
    toLowerCase: function toLowerCase(value) {
      return value.toLowerCase();
    },
    toUpperCase: function toUpperCase(value) {
      return value.toUpperCase();
    },
    toEnumCase: function toEnumCase(value, cfg) {
      return cfg.hash[makeHashTableKey(value)] || value;
    }
  };
  defFunc.definition = {
    type: 'string',
    errors: false,
    modifying: true,
    valid: true,
    compile: function compile(schema, parentSchema) {
      var cfg;

      if (schema.indexOf('toEnumCase') !== -1) {
        // build hash table to enum values
        cfg = {
          hash: {}
        }; // requires `enum` in schema

        if (!parentSchema.enum) throw new Error('Missing enum. To use `transform:["toEnumCase"]`, `enum:[...]` is required.');

        for (var i = parentSchema.enum.length; i--; i) {
          var v = parentSchema.enum[i];
          if (typeof v !== 'string') continue;
          var k = makeHashTableKey(v); // requires all `enum` values have unique keys

          if (cfg.hash[k]) throw new Error('Invalid enum uniqueness. To use `transform:["toEnumCase"]`, all values must be unique when case insensitive.');
          cfg.hash[k] = v;
        }
      }

      return function (data, dataPath, object, key) {
        // skip if value only
        if (!object) return; // apply transform in order provided

        for (var j = 0, l = schema.length; j < l; j++) {
          data = transform[schema[j]](data, cfg);
        }

        object[key] = data;
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        enum: ['trimLeft', 'trimRight', 'trim', 'toLowerCase', 'toUpperCase', 'toEnumCase']
      }
    }
  };
  ajv.addKeyword('transform', defFunc.definition);
  return ajv;

  function makeHashTableKey(value) {
    return value.toLowerCase();
  }
};

var keywords$1 = {
  'instanceof': _instanceof,
  range: range$2,
  regexp: regexp,
  'typeof': _typeof,
  dynamicDefaults: dynamicDefaults,
  allRequired: allRequired,
  anyRequired: anyRequired,
  oneRequired: oneRequired,
  prohibited: prohibited,
  uniqueItemProperties: uniqueItemProperties,
  deepProperties: deepProperties,
  deepRequired: deepRequired,
  formatMinimum: formatMinimum,
  formatMaximum: formatMaximum,
  patternRequired: patternRequired$1,
  'switch': _switch$1,
  select: select,
  transform: transform
};

var ajvKeywords = defineKeywords;
/**
 * Defines one or several keywords in ajv instance
 * @param  {Ajv} ajv validator instance
 * @param  {String|Array<String>|undefined} keyword keyword(s) to define
 * @return {Ajv} ajv instance (for chaining)
 */

function defineKeywords(ajv, keyword) {
  if (Array.isArray(keyword)) {
    for (var i = 0; i < keyword.length; i++) {
      get$7(keyword[i])(ajv);
    }

    return ajv;
  }

  if (keyword) {
    get$7(keyword)(ajv);
    return ajv;
  }

  for (keyword in keywords$1) {
    get$7(keyword)(ajv);
  }

  return ajv;
}

defineKeywords.get = get$7;

function get$7(keyword) {
  var defFunc = keywords$1[keyword];
  if (!defFunc) throw new Error('Unknown keyword ' + keyword);
  return defFunc;
}

var TransactionType;

(function (TransactionType) {
  TransactionType[TransactionType["Transfer"] = 0] = "Transfer";
  TransactionType[TransactionType["SecondSignature"] = 1] = "SecondSignature";
  TransactionType[TransactionType["DelegateRegistration"] = 2] = "DelegateRegistration";
  TransactionType[TransactionType["Vote"] = 3] = "Vote";
  TransactionType[TransactionType["MultiSignature"] = 4] = "MultiSignature";
  TransactionType[TransactionType["Ipfs"] = 5] = "Ipfs";
  TransactionType[TransactionType["MultiPayment"] = 6] = "MultiPayment";
  TransactionType[TransactionType["DelegateResignation"] = 7] = "DelegateResignation";
  TransactionType[TransactionType["HtlcLock"] = 8] = "HtlcLock";
  TransactionType[TransactionType["HtlcClaim"] = 9] = "HtlcClaim";
  TransactionType[TransactionType["HtlcRefund"] = 10] = "HtlcRefund";
})(TransactionType || (TransactionType = {}));

var TransactionTypeGroup;

(function (TransactionTypeGroup) {
  TransactionTypeGroup[TransactionTypeGroup["Test"] = 0] = "Test";
  TransactionTypeGroup[TransactionTypeGroup["Core"] = 1] = "Core"; // Everything above is available to anyone

  TransactionTypeGroup[TransactionTypeGroup["Reserved"] = 1000] = "Reserved";
})(TransactionTypeGroup || (TransactionTypeGroup = {}));

var HtlcLockExpirationType;

(function (HtlcLockExpirationType) {
  HtlcLockExpirationType[HtlcLockExpirationType["EpochTimestamp"] = 1] = "EpochTimestamp";
  HtlcLockExpirationType[HtlcLockExpirationType["BlockHeight"] = 2] = "BlockHeight";
})(HtlcLockExpirationType || (HtlcLockExpirationType = {}));

var enums = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get TransactionType () { return TransactionType; },
  get TransactionTypeGroup () { return TransactionTypeGroup; },
  get HtlcLockExpirationType () { return HtlcLockExpirationType; }
});

var signedTransaction = {
  anyOf: [{
    required: ["id", "signature"]
  }, {
    required: ["id", "signature", "signatures"]
  }, {
    required: ["id", "signatures"]
  }]
};
var strictTransaction = {
  additionalProperties: false
};
var transactionBaseSchema = {
  $id: undefined,
  type: "object",
  if: {
    properties: {
      version: {
        anyOf: [{
          type: "null"
        }, {
          const: 1
        }]
      }
    }
  },
  then: {
    required: ["type", "senderPublicKey", "fee", "amount", "timestamp"]
  },
  else: {
    required: ["type", "senderPublicKey", "fee", "amount", "nonce"]
  },
  properties: {
    id: {
      anyOf: [{
        $ref: "transactionId"
      }, {
        type: "null"
      }]
    },
    version: {
      enum: [1, 2]
    },
    network: {
      $ref: "networkByte"
    },
    timestamp: {
      type: "integer",
      minimum: 0
    },
    nonce: {
      bignumber: {
        minimum: 0
      }
    },
    typeGroup: {
      type: "integer",
      minimum: 0
    },
    amount: {
      bignumber: {
        minimum: 1,
        bypassGenesis: true
      }
    },
    fee: {
      bignumber: {
        minimum: 0,
        bypassGenesis: true
      }
    },
    senderPublicKey: {
      $ref: "publicKey"
    },
    signature: {
      $ref: "alphanumeric"
    },
    secondSignature: {
      $ref: "alphanumeric"
    },
    signSignature: {
      $ref: "alphanumeric"
    },
    signatures: {
      type: "array",
      minItems: 1,
      maxItems: 16,
      additionalItems: false,
      uniqueItems: true,
      items: {
        allOf: [{
          minLength: 130,
          maxLength: 130
        }, {
          $ref: "alphanumeric"
        }]
      }
    }
  }
};
var extend = (parent, properties) => {
  return cjs(parent, properties);
};
var signedSchema = schema => {
  var signed = extend(schema, signedTransaction);
  signed.$id = "".concat(schema.$id, "Signed");
  return signed;
};
var strictSchema = schema => {
  var signed = signedSchema(schema);
  var strict = extend(signed, strictTransaction);
  strict.$id = "".concat(schema.$id, "Strict");
  return strict;
};
var transfer = extend(transactionBaseSchema, {
  $id: "transfer",
  required: ["recipientId"],
  properties: {
    type: {
      transactionType: TransactionType.Transfer
    },
    fee: {
      bignumber: {
        minimum: 1,
        bypassGenesis: true
      }
    },
    vendorField: {
      anyOf: [{
        type: "null"
      }, {
        type: "string",
        format: "vendorField"
      }]
    },
    recipientId: {
      $ref: "address"
    },
    expiration: {
      type: "integer",
      minimum: 0
    }
  }
});
var secondSignature = extend(transactionBaseSchema, {
  $id: "secondSignature",
  required: ["asset"],
  properties: {
    type: {
      transactionType: TransactionType.SecondSignature
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    secondSignature: {
      type: "null"
    },
    asset: {
      type: "object",
      required: ["signature"],
      properties: {
        signature: {
          type: "object",
          required: ["publicKey"],
          properties: {
            publicKey: {
              $ref: "publicKey"
            }
          }
        }
      }
    }
  }
});
var delegateRegistration = extend(transactionBaseSchema, {
  $id: "delegateRegistration",
  required: ["asset"],
  properties: {
    type: {
      transactionType: TransactionType.DelegateRegistration
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1,
        bypassGenesis: true
      }
    },
    asset: {
      type: "object",
      required: ["delegate"],
      properties: {
        delegate: {
          type: "object",
          required: ["username"],
          properties: {
            username: {
              $ref: "delegateUsername"
            }
          }
        }
      }
    }
  }
});
var vote = extend(transactionBaseSchema, {
  $id: "vote",
  required: ["asset"],
  properties: {
    type: {
      transactionType: TransactionType.Vote
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    recipientId: {
      $ref: "address"
    },
    asset: {
      type: "object",
      required: ["votes"],
      properties: {
        votes: {
          type: "array",
          minItems: 1,
          maxItems: 1,
          additionalItems: false,
          items: {
            $ref: "walletVote"
          }
        }
      }
    }
  }
});
var multiSignature = extend(transactionBaseSchema, {
  $id: "multiSignature",
  required: ["asset", "signatures"],
  properties: {
    type: {
      transactionType: TransactionType.MultiSignature
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    asset: {
      type: "object",
      required: ["multiSignature"],
      properties: {
        multiSignature: {
          type: "object",
          required: ["min", "publicKeys"],
          properties: {
            min: {
              type: "integer",
              minimum: 1,
              maximum: {
                $data: "1/publicKeys/length"
              }
            },
            publicKeys: {
              type: "array",
              minItems: 1,
              maxItems: 16,
              additionalItems: false,
              uniqueItems: true,
              items: {
                $ref: "publicKey"
              }
            }
          }
        }
      }
    },
    signatures: {
      type: "array",
      minItems: {
        $data: "1/asset/multiSignature/min"
      },
      maxItems: {
        $data: "1/asset/multiSignature/publicKeys/length"
      },
      additionalItems: false,
      uniqueItems: true,
      items: {
        allOf: [{
          minLength: 130,
          maxLength: 130
        }, {
          $ref: "alphanumeric"
        }]
      }
    }
  }
}); // Multisignature legacy transactions have a different signatures property.
// Then we delete the "signatures" property definition to implement our own.

var transactionBaseSchemaNoSignatures = extend(transactionBaseSchema, {});
delete transactionBaseSchemaNoSignatures.properties.signatures;
var multiSignatureLegacy = extend(transactionBaseSchemaNoSignatures, {
  $id: "multiSignatureLegacy",
  required: ["asset"],
  properties: {
    version: {
      anyOf: [{
        type: "null"
      }, {
        const: 1
      }]
    },
    type: {
      transactionType: TransactionType.MultiSignature
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    asset: {
      type: "object",
      required: ["multiSignatureLegacy"],
      properties: {
        multiSignatureLegacy: {
          type: "object",
          required: ["keysgroup", "min", "lifetime"],
          properties: {
            min: {
              type: "integer",
              minimum: 1,
              maximum: {
                $data: "1/keysgroup/length"
              }
            },
            lifetime: {
              type: "integer",
              minimum: 1,
              maximum: 72
            },
            keysgroup: {
              type: "array",
              minItems: 1,
              maxItems: 16,
              additionalItems: false,
              items: {
                allOf: [{
                  type: "string",
                  minimum: 67,
                  maximum: 67,
                  transform: ["toLowerCase"]
                }]
              }
            }
          }
        }
      }
    },
    signatures: {
      type: "array",
      minItems: 1,
      maxItems: 1,
      additionalItems: false,
      items: {
        $ref: "alphanumeric"
      }
    }
  }
});
var ipfs = extend(transactionBaseSchema, {
  $id: "ipfs",
  properties: {
    type: {
      transactionType: TransactionType.Ipfs
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    asset: {
      type: "object",
      required: ["ipfs"],
      properties: {
        ipfs: {
          allOf: [{
            minLength: 2,
            maxLength: 90
          }, {
            $ref: "base58"
          }]
        }
      }
    }
  }
});
var htlcLock = extend(transactionBaseSchema, {
  $id: "htlcLock",
  properties: {
    type: {
      transactionType: TransactionType.HtlcLock
    },
    amount: {
      bignumber: {
        minimum: 1
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    recipientId: {
      $ref: "address"
    },
    vendorField: {
      anyOf: [{
        type: "null"
      }, {
        type: "string",
        format: "vendorField"
      }]
    },
    asset: {
      type: "object",
      required: ["lock"],
      properties: {
        lock: {
          type: "object",
          required: ["secretHash", "expiration"],
          properties: {
            secretHash: {
              allOf: [{
                minLength: 64,
                maxLength: 64
              }, {
                $ref: "hex"
              }]
            },
            expiration: {
              type: "object",
              required: ["type", "value"],
              properties: {
                type: {
                  enum: [1, 2]
                },
                value: {
                  type: "integer",
                  minimum: 0
                }
              }
            }
          }
        }
      }
    }
  }
});
var htlcClaim = extend(transactionBaseSchema, {
  $id: "htlcClaim",
  properties: {
    type: {
      transactionType: TransactionType.HtlcClaim
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    asset: {
      type: "object",
      required: ["claim"],
      properties: {
        claim: {
          type: "object",
          required: ["lockTransactionId", "unlockSecret"],
          properties: {
            lockTransactionId: {
              $ref: "transactionId"
            },
            unlockSecret: {
              allOf: [{
                minLength: 64,
                maxLength: 64
              }, {
                $ref: "hex"
              }]
            }
          }
        }
      }
    }
  }
});
var htlcRefund = extend(transactionBaseSchema, {
  $id: "htlcRefund",
  properties: {
    type: {
      transactionType: TransactionType.HtlcRefund
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    asset: {
      type: "object",
      required: ["refund"],
      properties: {
        refund: {
          type: "object",
          required: ["lockTransactionId"],
          properties: {
            lockTransactionId: {
              $ref: "transactionId"
            }
          }
        }
      }
    }
  }
});
var multiPayment = extend(transactionBaseSchema, {
  $id: "multiPayment",
  properties: {
    type: {
      transactionType: TransactionType.MultiPayment
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    },
    vendorField: {
      anyOf: [{
        type: "null"
      }, {
        type: "string",
        format: "vendorField"
      }]
    },
    asset: {
      type: "object",
      required: ["payments"],
      properties: {
        payments: {
          type: "array",
          minItems: 2,
          additionalItems: false,
          uniqueItems: false,
          items: {
            type: "object",
            required: ["amount", "recipientId"],
            properties: {
              amount: {
                bignumber: {
                  minimum: 1
                }
              },
              recipientId: {
                $ref: "address"
              }
            }
          }
        }
      }
    }
  }
});
var delegateResignation = extend(transactionBaseSchema, {
  $id: "delegateResignation",
  properties: {
    type: {
      transactionType: TransactionType.DelegateResignation
    },
    amount: {
      bignumber: {
        minimum: 0,
        maximum: 0
      }
    },
    fee: {
      bignumber: {
        minimum: 1
      }
    }
  }
});

var schemas = /*#__PURE__*/Object.freeze({
  __proto__: null,
  transactionBaseSchema: transactionBaseSchema,
  extend: extend,
  signedSchema: signedSchema,
  strictSchema: strictSchema,
  transfer: transfer,
  secondSignature: secondSignature,
  delegateRegistration: delegateRegistration,
  vote: vote,
  multiSignature: multiSignature,
  multiSignatureLegacy: multiSignatureLegacy,
  ipfs: ipfs,
  htlcLock: htlcLock,
  htlcClaim: htlcClaim,
  htlcRefund: htlcRefund,
  multiPayment: multiPayment,
  delegateResignation: delegateResignation
});

var vendorField = ajv => {
  ajv.addFormat("vendorField", data => {
    try {
      return Buffer.from(data, "utf8").length <= maxVendorFieldLength();
    } catch (_unused) {
      return false;
    }
  });
};

var validPeer = ajv => {
  ajv.addFormat("peer", ip => {
    try {
      return isValidPeer({
        ip
      }, false);
    } catch (_unused2) {
      return false;
    }
  });
};

var formats$1 = [vendorField, validPeer];

var maxBytes = ajv => {
  ajv.addKeyword("maxBytes", {
    type: "string",

    compile(schema, parentSchema) {
      return data => {
        if (parentSchema.type !== "string") {
          return false;
        }

        return Buffer.from(data, "utf8").byteLength <= schema;
      };
    },

    errors: false,
    metaSchema: {
      type: "integer",
      minimum: 0
    }
  });
};

var transactionType = ajv => {
  ajv.addKeyword("transactionType", {
    compile(schema) {
      return (data, dataPath, parentObject) => {
        // Impose dynamic multipayment limit based on milestone
        if (data === TransactionType.MultiPayment && parentObject && (!parentObject.typeGroup || parentObject.typeGroup === 1)) {
          if (parentObject.asset && parentObject.asset.payments) {
            var limit = configManager.getMilestone().multiPaymentLimit || 500;
            return parentObject.asset.payments.length <= limit;
          }
        }

        return data === schema;
      };
    },

    errors: false,
    metaSchema: {
      type: "integer",
      minimum: 0
    }
  });
};

var network$4 = ajv => {
  ajv.addKeyword("network", {
    compile(schema) {
      return data => {
        return schema && data === configManager.get("network.pubKeyHash");
      };
    },

    errors: false,
    metaSchema: {
      type: "boolean"
    }
  });
};

var bignumber = ajv => {
  var instanceOf = ajvKeywords.get("instanceof").definition;
  instanceOf.CONSTRUCTORS.BigNumber = index$5.BigNumber;
  ajv.addKeyword("bignumber", {
    compile(schema) {
      return (data, dataPath, parentObject, property) => {
        var minimum = typeof schema.minimum !== "undefined" ? schema.minimum : 0;
        var maximum = typeof schema.maximum !== "undefined" ? schema.maximum : "9223372036854775807"; // 8 byte maximum

        if (data !== 0 && !data) {
          return false;
        }

        var bignum;

        try {
          bignum = index$5.BigNumber.make(data);
        } catch (_unused) {
          return false;
        }

        if (parentObject && property) {
          parentObject[property] = bignum;
        }

        var bypassGenesis = false;

        if (schema.bypassGenesis) {
          if (parentObject.id) {
            if (schema.block) {
              bypassGenesis = parentObject.height === 1;
            } else {
              bypassGenesis = isGenesisTransaction(parentObject.id);
            }
          }
        }

        if (bignum.isLessThan(minimum) && !(bignum.isZero() && bypassGenesis)) {
          return false;
        }

        if (bignum.isGreaterThan(maximum) && !bypassGenesis) {
          return false;
        }

        return true;
      };
    },

    errors: false,
    modifying: true,
    metaSchema: {
      type: "object",
      properties: {
        minimum: {
          type: "integer"
        },
        maximum: {
          type: "integer"
        },
        bypassGenesis: {
          type: "boolean"
        },
        block: {
          type: "boolean"
        }
      },
      additionalItems: false
    }
  });
};

var blockId = ajv => {
  ajv.addKeyword("blockId", {
    compile(schema) {
      return (data, dataPath, parentObject) => {
        if (parentObject && parentObject.height === 1 && schema.allowNullWhenGenesis) {
          return !data || Number(data) === 0;
        }

        if (typeof data !== "string") {
          return false;
        } // Partial SHA256 block id (old/legacy), before the switch to full SHA256.
        // 8 byte integer either decimal without leading zeros or hex with leading zeros.


        var isPartial = /^[0-9]{1,20}$/.test(data) || /^[0-9a-f]{16}$/i.test(data);
        var isFullSha256 = /^[0-9a-f]{64}$/i.test(data);

        if (parentObject && parentObject.height) {
          var height = schema.isPreviousBlock ? parentObject.height - 1 : parentObject.height;
          var constants = configManager.getMilestone(height);
          return constants.block.idFullSha256 ? isFullSha256 : isPartial;
        }

        return isPartial || isFullSha256;
      };
    },

    errors: false,
    metaSchema: {
      type: "object",
      properties: {
        allowNullWhenGenesis: {
          type: "boolean"
        },
        isPreviousBlock: {
          type: "boolean"
        }
      },
      additionalItems: false
    }
  });
};

var keywords$2 = [bignumber, blockId, maxBytes, network$4, transactionType];

var schemas$1 = {
  hex: {
    $id: "hex",
    type: "string",
    pattern: "^[0123456789A-Fa-f]+$"
  },
  base58: {
    $id: "base58",
    type: "string",
    pattern: "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$"
  },
  alphanumeric: {
    $id: "alphanumeric",
    type: "string",
    pattern: "^[a-zA-Z0-9]+$"
  },
  transactionId: {
    $id: "transactionId",
    allOf: [{
      minLength: 64,
      maxLength: 64
    }, {
      $ref: "hex"
    }]
  },
  networkByte: {
    $id: "networkByte",
    network: true
  },
  address: {
    $id: "address",
    allOf: [{
      minLength: 34,
      maxLength: 34
    }, {
      $ref: "base58"
    }]
  },
  publicKey: {
    $id: "publicKey",
    allOf: [{
      minLength: 66,
      maxLength: 66
    }, {
      $ref: "hex"
    }, {
      transform: ["toLowerCase"]
    }]
  },
  walletVote: {
    $id: "walletVote",
    allOf: [{
      type: "string",
      pattern: "^[+|-][a-zA-Z0-9]{66}$"
    }, {
      transform: ["toLowerCase"]
    }]
  },
  username: {
    $id: "delegateUsername",
    allOf: [{
      type: "string",
      pattern: "^[a-z0-9!@$&_.]+$"
    }, {
      minLength: 1,
      maxLength: 20
    }, {
      transform: ["toLowerCase"]
    }]
  },
  genericName: {
    $id: "genericName",
    allOf: [{
      type: "string",
      pattern: "^[a-zA-Z0-9]+(( - |[ ._-])[a-zA-Z0-9]+)*[.]?$"
    }, {
      minLength: 1,
      maxLength: 40
    }]
  },
  uri: {
    $id: "uri",
    allOf: [{
      format: "uri"
    }, {
      minLength: 4,
      maxLength: 80
    }]
  },
  blockHeader: {
    $id: "blockHeader",
    type: "object",
    required: ["id", "timestamp", "previousBlock", "height", "totalAmount", "totalFee", "reward", "generatorPublicKey", "blockSignature"],
    properties: {
      id: {
        blockId: {}
      },
      idHex: {
        blockId: {}
      },
      version: {
        type: "integer",
        minimum: 0
      },
      timestamp: {
        type: "integer",
        minimum: 0
      },
      previousBlock: {
        blockId: {
          allowNullWhenGenesis: true,
          isPreviousBlock: true
        }
      },
      previousBlockHex: {
        blockId: {
          allowNullWhenGenesis: true,
          isPreviousBlock: true
        }
      },
      height: {
        type: "integer",
        minimum: 1
      },
      numberOfTransactions: {
        type: "integer"
      },
      totalAmount: {
        bignumber: {
          minimum: 0,
          bypassGenesis: true,
          block: true
        }
      },
      totalFee: {
        bignumber: {
          minimum: 0,
          bypassGenesis: true,
          block: true
        }
      },
      reward: {
        bignumber: {
          minimum: 0
        }
      },
      payloadLength: {
        type: "integer",
        minimum: 0
      },
      payloadHash: {
        $ref: "hex"
      },
      generatorPublicKey: {
        $ref: "publicKey"
      },
      blockSignature: {
        $ref: "hex"
      }
    }
  },
  block: {
    $id: "block",
    $ref: "blockHeader",
    properties: {
      transactions: {
        $ref: "transactions",
        minItems: {
          $data: "1/numberOfTransactions"
        },
        maxItems: {
          $data: "1/numberOfTransactions"
        }
      }
    }
  }
};

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class Validator {
  constructor(options) {
    this.transactionSchemas = new Map();
    this.ajv = this.instantiateAjv(options);
  }

  static make() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return new Validator(options);
  }

  getInstance() {
    return this.ajv;
  }

  validate(schemaKeyRef, data) {
    return this.validateSchema(this.ajv, schemaKeyRef, data);
  }

  validateException(schemaKeyRef, data) {
    var ajv = this.instantiateAjv({
      allErrors: true,
      verbose: true
    });

    for (var schema of this.transactionSchemas.values()) {
      this.extendTransactionSchema(ajv, schema);
    }

    return this.validateSchema(ajv, schemaKeyRef, data);
  }

  addFormat(name, format) {
    this.ajv.addFormat(name, format);
  }

  addKeyword(keyword, definition) {
    this.ajv.addKeyword(keyword, definition);
  }

  addSchema(schema, key) {
    this.ajv.addSchema(schema, key);
  }

  removeKeyword(keyword) {
    this.ajv.removeKeyword(keyword);
  }

  removeSchema(schemaKeyRef) {
    this.ajv.removeSchema(schemaKeyRef);
  }

  extendTransaction(schema, remove) {
    this.extendTransactionSchema(this.ajv, schema, remove);
  }

  validateSchema(ajv, schemaKeyRef, data) {
    try {
      ajv.validate(schemaKeyRef, data);
      var error = ajv.errors ? ajv.errorsText() : undefined;
      return {
        value: data,
        error,
        errors: ajv.errors
      };
    } catch (error) {
      return {
        value: undefined,
        error: error.stack,
        errors: []
      };
    }
  }

  instantiateAjv(options) {
    var ajv$1 = new ajv(_objectSpread$1(_objectSpread$1({}, {
      $data: true,
      schemas: schemas$1,
      removeAdditional: true,
      extendRefs: true
    }), options));
    ajvKeywords(ajv$1);

    for (var addKeyword of keywords$2) {
      addKeyword(ajv$1);
    }

    for (var addFormat of formats$1) {
      addFormat(ajv$1);
    }

    return ajv$1;
  }

  extendTransactionSchema(ajv, schema, remove) {
    if (remove) {
      this.transactionSchemas.delete(schema.$id);
      ajv.removeSchema(schema.$id);
      ajv.removeSchema("".concat(schema.$id, "Signed"));
      ajv.removeSchema("".concat(schema.$id, "Strict"));
    } else {
      this.transactionSchemas.set(schema.$id, schema);
      ajv.addSchema(schema);
      ajv.addSchema(signedSchema(schema));
      ajv.addSchema(strictSchema(schema));
    }

    this.updateTransactionArray(ajv);
  }

  updateTransactionArray(ajv) {
    ajv.removeSchema("block");
    ajv.removeSchema("transactions");
    ajv.addSchema({
      $id: "transactions",
      type: "array",
      additionalItems: false,
      items: {
        anyOf: [...this.transactionSchemas.keys()].map(schema => ({
          $ref: "".concat(schema, "Signed")
        }))
      }
    });
    ajv.addSchema(schemas$1.block);
  }

}
var validator = Validator.make();

var index$7 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Validator: Validator,
  validator: validator
});

var long_1 = createCommonjsModule(function (module) {
  /*
   Copyright 2013 Daniel Wirtz <dcode@dcode.io>
   Copyright 2009 The Closure Library Authors. All Rights Reserved.
  
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
  
   http://www.apache.org/licenses/LICENSE-2.0
  
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS-IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

  /**
   * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/long.js for details
   */
  (function (global, factory) {
    /* AMD */
    if (typeof commonjsRequire === 'function' && 'object' === "object" && module && module["exports"]) module["exports"] = factory();
      /* Global */
      else (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();
  })(commonjsGlobal, function () {
    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @constructor
     */

    function Long(low, high, unsigned) {
      /**
       * The low 32 bits as a signed value.
       * @type {number}
       */
      this.low = low | 0;
      /**
       * The high 32 bits as a signed value.
       * @type {number}
       */

      this.high = high | 0;
      /**
       * Whether unsigned or not.
       * @type {boolean}
       */

      this.unsigned = !!unsigned;
    } // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.

    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @private
     */


    Long.prototype.__isLong__;
    Object.defineProperty(Long.prototype, "__isLong__", {
      value: true,
      enumerable: false,
      configurable: false
    });
    /**
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     * @inner
     */

    function isLong(obj) {
      return (obj && obj["__isLong__"]) === true;
    }
    /**
     * Tests if the specified object is a Long.
     * @function
     * @param {*} obj Object
     * @returns {boolean}
     */


    Long.isLong = isLong;
    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */

    var INT_CACHE = {};
    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */

    var UINT_CACHE = {};
    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */

    function fromInt(value, unsigned) {
      var obj, cachedObj, cache;

      if (unsigned) {
        value >>>= 0;

        if (cache = 0 <= value && value < 256) {
          cachedObj = UINT_CACHE[value];
          if (cachedObj) return cachedObj;
        }

        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache) UINT_CACHE[value] = obj;
        return obj;
      } else {
        value |= 0;

        if (cache = -128 <= value && value < 128) {
          cachedObj = INT_CACHE[value];
          if (cachedObj) return cachedObj;
        }

        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache) INT_CACHE[value] = obj;
        return obj;
      }
    }
    /**
     * Returns a Long representing the given 32 bit integer value.
     * @function
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */


    Long.fromInt = fromInt;
    /**
     * @param {number} value
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */

    function fromNumber(value, unsigned) {
      if (isNaN(value) || !isFinite(value)) return unsigned ? UZERO : ZERO;

      if (unsigned) {
        if (value < 0) return UZERO;
        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
      } else {
        if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
      }

      if (value < 0) return fromNumber(-value, unsigned).neg();
      return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    }
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @function
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */


    Long.fromNumber = fromNumber;
    /**
     * @param {number} lowBits
     * @param {number} highBits
     * @param {boolean=} unsigned
     * @returns {!Long}
     * @inner
     */

    function fromBits(lowBits, highBits, unsigned) {
      return new Long(lowBits, highBits, unsigned);
    }
    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @function
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     */


    Long.fromBits = fromBits;
    /**
     * @function
     * @param {number} base
     * @param {number} exponent
     * @returns {number}
     * @inner
     */

    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

    /**
     * @param {string} str
     * @param {(boolean|number)=} unsigned
     * @param {number=} radix
     * @returns {!Long}
     * @inner
     */

    function fromString(str, unsigned, radix) {
      if (str.length === 0) throw Error('empty string');
      if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return ZERO;

      if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned, unsigned = false;
      } else {
        unsigned = !!unsigned;
      }

      radix = radix || 10;
      if (radix < 2 || 36 < radix) throw RangeError('radix');
      var p;
      if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
      } // Do several (8) digits each time through the loop, so as to
      // minimize the calls to the very expensive emulated div.

      var radixToPower = fromNumber(pow_dbl(radix, 8));
      var result = ZERO;

      for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);

        if (size < 8) {
          var power = fromNumber(pow_dbl(radix, size));
          result = result.mul(power).add(fromNumber(value));
        } else {
          result = result.mul(radixToPower);
          result = result.add(fromNumber(value));
        }
      }

      result.unsigned = unsigned;
      return result;
    }
    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @function
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     */


    Long.fromString = fromString;
    /**
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
     * @returns {!Long}
     * @inner
     */

    function fromValue(val) {
      if (val
      /* is compatible */
      instanceof Long) return val;
      if (typeof val === 'number') return fromNumber(val);
      if (typeof val === 'string') return fromString(val); // Throws for non-objects, converts non-instanceof Long:

      return fromBits(val.low, val.high, val.unsigned);
    }
    /**
     * Converts the specified value to a Long.
     * @function
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @returns {!Long}
     */


    Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.

    /**
     * @type {number}
     * @const
     * @inner
     */

    var TWO_PWR_16_DBL = 1 << 16;
    /**
     * @type {number}
     * @const
     * @inner
     */

    var TWO_PWR_24_DBL = 1 << 24;
    /**
     * @type {number}
     * @const
     * @inner
     */

    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    /**
     * @type {number}
     * @const
     * @inner
     */

    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    /**
     * @type {number}
     * @const
     * @inner
     */

    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    /**
     * @type {!Long}
     * @const
     * @inner
     */

    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
    /**
     * @type {!Long}
     * @inner
     */

    var ZERO = fromInt(0);
    /**
     * Signed zero.
     * @type {!Long}
     */

    Long.ZERO = ZERO;
    /**
     * @type {!Long}
     * @inner
     */

    var UZERO = fromInt(0, true);
    /**
     * Unsigned zero.
     * @type {!Long}
     */

    Long.UZERO = UZERO;
    /**
     * @type {!Long}
     * @inner
     */

    var ONE = fromInt(1);
    /**
     * Signed one.
     * @type {!Long}
     */

    Long.ONE = ONE;
    /**
     * @type {!Long}
     * @inner
     */

    var UONE = fromInt(1, true);
    /**
     * Unsigned one.
     * @type {!Long}
     */

    Long.UONE = UONE;
    /**
     * @type {!Long}
     * @inner
     */

    var NEG_ONE = fromInt(-1);
    /**
     * Signed negative one.
     * @type {!Long}
     */

    Long.NEG_ONE = NEG_ONE;
    /**
     * @type {!Long}
     * @inner
     */

    var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
    /**
     * Maximum signed value.
     * @type {!Long}
     */

    Long.MAX_VALUE = MAX_VALUE;
    /**
     * @type {!Long}
     * @inner
     */

    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
    /**
     * Maximum unsigned value.
     * @type {!Long}
     */

    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
    /**
     * @type {!Long}
     * @inner
     */

    var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
    /**
     * Minimum signed value.
     * @type {!Long}
     */

    Long.MIN_VALUE = MIN_VALUE;
    /**
     * @alias Long.prototype
     * @inner
     */

    var LongPrototype = Long.prototype;
    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     */

    LongPrototype.toInt = function toInt() {
      return this.unsigned ? this.low >>> 0 : this.low;
    };
    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     */


    LongPrototype.toNumber = function toNumber() {
      if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     */


    LongPrototype.toString = function toString(radix) {
      radix = radix || 10;
      if (radix < 2 || 36 < radix) throw RangeError('radix');
      if (this.isZero()) return '0';

      if (this.isNegative()) {
        // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
          // We need to change the Long value before it can be negated, so we remove
          // the bottom-most digit in this base and then recurse to do the rest.
          var radixLong = fromNumber(radix),
              div = this.div(radixLong),
              rem1 = div.mul(radixLong).sub(this);
          return div.toString(radix) + rem1.toInt().toString(radix);
        } else return '-' + this.neg().toString(radix);
      } // Do several (6) digits each time through the loop, so as to
      // minimize the calls to the very expensive emulated div.


      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
          rem = this;
      var result = '';

      while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero()) return digits + result;else {
          while (digits.length < 6) {
            digits = '0' + digits;
          }

          result = '' + digits + result;
        }
      }
    };
    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     */


    LongPrototype.getHighBits = function getHighBits() {
      return this.high;
    };
    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     */


    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
      return this.high >>> 0;
    };
    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     */


    LongPrototype.getLowBits = function getLowBits() {
      return this.low;
    };
    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     */


    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
      return this.low >>> 0;
    };
    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     */


    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
      if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
      var val = this.high != 0 ? this.high : this.low;

      for (var bit = 31; bit > 0; bit--) {
        if ((val & 1 << bit) != 0) break;
      }

      return this.high != 0 ? bit + 33 : bit + 1;
    };
    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     */


    LongPrototype.isZero = function isZero() {
      return this.high === 0 && this.low === 0;
    };
    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     */


    LongPrototype.isNegative = function isNegative() {
      return !this.unsigned && this.high < 0;
    };
    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     */


    LongPrototype.isPositive = function isPositive() {
      return this.unsigned || this.high >= 0;
    };
    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     */


    LongPrototype.isOdd = function isOdd() {
      return (this.low & 1) === 1;
    };
    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     */


    LongPrototype.isEven = function isEven() {
      return (this.low & 1) === 0;
    };
    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.equals = function equals(other) {
      if (!isLong(other)) other = fromValue(other);
      if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
      return this.high === other.high && this.low === other.low;
    };
    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.eq = LongPrototype.equals;
    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */

    LongPrototype.notEquals = function notEquals(other) {
      return !this.eq(
      /* validates */
      other);
    };
    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.neq = LongPrototype.notEquals;
    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */

    LongPrototype.lessThan = function lessThan(other) {
      return this.comp(
      /* validates */
      other) < 0;
    };
    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.lt = LongPrototype.lessThan;
    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */

    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
      return this.comp(
      /* validates */
      other) <= 0;
    };
    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.lte = LongPrototype.lessThanOrEqual;
    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */

    LongPrototype.greaterThan = function greaterThan(other) {
      return this.comp(
      /* validates */
      other) > 0;
    };
    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.gt = LongPrototype.greaterThan;
    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */

    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
      return this.comp(
      /* validates */
      other) >= 0;
    };
    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     */


    LongPrototype.gte = LongPrototype.greaterThanOrEqual;
    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */

    LongPrototype.compare = function compare(other) {
      if (!isLong(other)) other = fromValue(other);
      if (this.eq(other)) return 0;
      var thisNeg = this.isNegative(),
          otherNeg = other.isNegative();
      if (thisNeg && !otherNeg) return -1;
      if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same

      if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned

      return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    /**
     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     */


    LongPrototype.comp = LongPrototype.compare;
    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     */

    LongPrototype.negate = function negate() {
      if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
      return this.not().add(ONE);
    };
    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     */


    LongPrototype.neg = LongPrototype.negate;
    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     */

    LongPrototype.add = function add(addend) {
      if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

      var a48 = this.high >>> 16;
      var a32 = this.high & 0xFFFF;
      var a16 = this.low >>> 16;
      var a00 = this.low & 0xFFFF;
      var b48 = addend.high >>> 16;
      var b32 = addend.high & 0xFFFF;
      var b16 = addend.low >>> 16;
      var b00 = addend.low & 0xFFFF;
      var c48 = 0,
          c32 = 0,
          c16 = 0,
          c00 = 0;
      c00 += a00 + b00;
      c16 += c00 >>> 16;
      c00 &= 0xFFFF;
      c16 += a16 + b16;
      c32 += c16 >>> 16;
      c16 &= 0xFFFF;
      c32 += a32 + b32;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c48 += a48 + b48;
      c48 &= 0xFFFF;
      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */


    LongPrototype.subtract = function subtract(subtrahend) {
      if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
      return this.add(subtrahend.neg());
    };
    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     */


    LongPrototype.sub = LongPrototype.subtract;
    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */

    LongPrototype.multiply = function multiply(multiplier) {
      if (this.isZero()) return ZERO;
      if (!isLong(multiplier)) multiplier = fromValue(multiplier);
      if (multiplier.isZero()) return ZERO;
      if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
      if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;

      if (this.isNegative()) {
        if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();
      } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication


      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
      // We can skip products that would overflow.

      var a48 = this.high >>> 16;
      var a32 = this.high & 0xFFFF;
      var a16 = this.low >>> 16;
      var a00 = this.low & 0xFFFF;
      var b48 = multiplier.high >>> 16;
      var b32 = multiplier.high & 0xFFFF;
      var b16 = multiplier.low >>> 16;
      var b00 = multiplier.low & 0xFFFF;
      var c48 = 0,
          c32 = 0,
          c16 = 0,
          c00 = 0;
      c00 += a00 * b00;
      c16 += c00 >>> 16;
      c00 &= 0xFFFF;
      c16 += a16 * b00;
      c32 += c16 >>> 16;
      c16 &= 0xFFFF;
      c16 += a00 * b16;
      c32 += c16 >>> 16;
      c16 &= 0xFFFF;
      c32 += a32 * b00;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c32 += a16 * b16;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c32 += a00 * b32;
      c48 += c32 >>> 16;
      c32 &= 0xFFFF;
      c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
      c48 &= 0xFFFF;
      return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     */


    LongPrototype.mul = LongPrototype.multiply;
    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or
     *  unsigned if this Long is unsigned.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */

    LongPrototype.divide = function divide(divisor) {
      if (!isLong(divisor)) divisor = fromValue(divisor);
      if (divisor.isZero()) throw Error('division by zero');
      if (this.isZero()) return this.unsigned ? UZERO : ZERO;
      var approx, rem, res;

      if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
          if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
          else if (divisor.eq(MIN_VALUE)) return ONE;else {
              // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
              var halfThis = this.shr(1);
              approx = halfThis.div(divisor).shl(1);

              if (approx.eq(ZERO)) {
                return divisor.isNegative() ? ONE : NEG_ONE;
              } else {
                rem = this.sub(divisor.mul(approx));
                res = approx.add(rem.div(divisor));
                return res;
              }
            }
        } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;

        if (this.isNegative()) {
          if (divisor.isNegative()) return this.neg().div(divisor.neg());
          return this.neg().div(divisor).neg();
        } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();

        res = ZERO;
      } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned) divisor = divisor.toUnsigned();
        if (divisor.gt(this)) return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
          return UONE;
        res = UZERO;
      } // Repeat the following until the remainder is less than other:  find a
      // floating-point that approximates remainder / other *from below*, add this
      // into the result, and subtract it from the remainder.  It is critical that
      // the approximate value is less than or equal to the real value so that the
      // remainder never becomes negative.


      rem = this;

      while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.

        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
            // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
        approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);

        while (approxRem.isNegative() || approxRem.gt(rem)) {
          approx -= delta;
          approxRes = fromNumber(approx, this.unsigned);
          approxRem = approxRes.mul(divisor);
        } // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.


        if (approxRes.isZero()) approxRes = ONE;
        res = res.add(approxRes);
        rem = rem.sub(approxRem);
      }

      return res;
    };
    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     */


    LongPrototype.div = LongPrototype.divide;
    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */

    LongPrototype.modulo = function modulo(divisor) {
      if (!isLong(divisor)) divisor = fromValue(divisor);
      return this.sub(this.div(divisor).mul(divisor));
    };
    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     */


    LongPrototype.mod = LongPrototype.modulo;
    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     */

    LongPrototype.not = function not() {
      return fromBits(~this.low, ~this.high, this.unsigned);
    };
    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */


    LongPrototype.and = function and(other) {
      if (!isLong(other)) other = fromValue(other);
      return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */


    LongPrototype.or = function or(other) {
      if (!isLong(other)) other = fromValue(other);
      return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     */


    LongPrototype.xor = function xor(other) {
      if (!isLong(other)) other = fromValue(other);
      return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */


    LongPrototype.shiftLeft = function shiftLeft(numBits) {
      if (isLong(numBits)) numBits = numBits.toInt();
      if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */


    LongPrototype.shl = LongPrototype.shiftLeft;
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */

    LongPrototype.shiftRight = function shiftRight(numBits) {
      if (isLong(numBits)) numBits = numBits.toInt();
      if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */


    LongPrototype.shr = LongPrototype.shiftRight;
    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */

    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
      if (isLong(numBits)) numBits = numBits.toInt();
      numBits &= 63;
      if (numBits === 0) return this;else {
        var high = this.high;

        if (numBits < 32) {
          var low = this.low;
          return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32) return fromBits(high, 0, this.unsigned);else return fromBits(high >>> numBits - 32, 0, this.unsigned);
      }
    };
    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     */


    LongPrototype.shru = LongPrototype.shiftRightUnsigned;
    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     */

    LongPrototype.toSigned = function toSigned() {
      if (!this.unsigned) return this;
      return fromBits(this.low, this.high, false);
    };
    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     */


    LongPrototype.toUnsigned = function toUnsigned() {
      if (this.unsigned) return this;
      return fromBits(this.low, this.high, true);
    };
    /**
     * Converts this Long to its byte representation.
     * @param {boolean=} le Whether little or big endian, defaults to big endian
     * @returns {!Array.<number>} Byte representation
     */


    LongPrototype.toBytes = function (le) {
      return le ? this.toBytesLE() : this.toBytesBE();
    };
    /**
     * Converts this Long to its little endian byte representation.
     * @returns {!Array.<number>} Little endian byte representation
     */


    LongPrototype.toBytesLE = function () {
      var hi = this.high,
          lo = this.low;
      return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24 & 0xff, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24 & 0xff];
    };
    /**
     * Converts this Long to its big endian byte representation.
     * @returns {!Array.<number>} Big endian byte representation
     */


    LongPrototype.toBytesBE = function () {
      var hi = this.high,
          lo = this.low;
      return [hi >>> 24 & 0xff, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24 & 0xff, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
    };

    return Long;
  });
});

var bytebuffer = createCommonjsModule(function (module) {
  /*
   Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>
  
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
  
   http://www.apache.org/licenses/LICENSE-2.0
  
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
   */

  /**
   * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
   * Backing buffer: ArrayBuffer, Accessor: Uint8Array
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/bytebuffer.js for details
   */
  (function (global, factory) {
    /* AMD */
    if (typeof commonjsRequire === 'function' && 'object' === "object" && module && module["exports"]) module['exports'] = function () {
        var Long;

        try {
          Long = long_1;
        } catch (e) {}

        return factory(Long);
      }();
      /* Global */
      else (global["dcodeIO"] = global["dcodeIO"] || {})["ByteBuffer"] = factory(global["dcodeIO"]["Long"]);
  })(commonjsGlobal, function (Long) {
    /**
     * Constructs a new ByteBuffer.
     * @class The swiss army knife for binary data in JavaScript.
     * @exports ByteBuffer
     * @constructor
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @expose
     */

    var ByteBuffer = function ByteBuffer(capacity, littleEndian, noAssert) {
      if (typeof capacity === 'undefined') capacity = ByteBuffer.DEFAULT_CAPACITY;
      if (typeof littleEndian === 'undefined') littleEndian = ByteBuffer.DEFAULT_ENDIAN;
      if (typeof noAssert === 'undefined') noAssert = ByteBuffer.DEFAULT_NOASSERT;

      if (!noAssert) {
        capacity = capacity | 0;
        if (capacity < 0) throw RangeError("Illegal capacity");
        littleEndian = !!littleEndian;
        noAssert = !!noAssert;
      }
      /**
       * Backing ArrayBuffer.
       * @type {!ArrayBuffer}
       * @expose
       */


      this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);
      /**
       * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.
       * @type {?Uint8Array}
       * @expose
       */

      this.view = capacity === 0 ? null : new Uint8Array(this.buffer);
      /**
       * Absolute read/write offset.
       * @type {number}
       * @expose
       * @see ByteBuffer#flip
       * @see ByteBuffer#clear
       */

      this.offset = 0;
      /**
       * Marked offset.
       * @type {number}
       * @expose
       * @see ByteBuffer#mark
       * @see ByteBuffer#reset
       */

      this.markedOffset = -1;
      /**
       * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.
       * @type {number}
       * @expose
       * @see ByteBuffer#flip
       * @see ByteBuffer#clear
       */

      this.limit = capacity;
      /**
       * Whether to use little endian byte order, defaults to `false` for big endian.
       * @type {boolean}
       * @expose
       */

      this.littleEndian = littleEndian;
      /**
       * Whether to skip assertions of offsets and values, defaults to `false`.
       * @type {boolean}
       * @expose
       */

      this.noAssert = noAssert;
    };
    /**
     * ByteBuffer version.
     * @type {string}
     * @const
     * @expose
     */


    ByteBuffer.VERSION = "5.0.1";
    /**
     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.
     * @type {boolean}
     * @const
     * @expose
     */

    ByteBuffer.LITTLE_ENDIAN = true;
    /**
     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.
     * @type {boolean}
     * @const
     * @expose
     */

    ByteBuffer.BIG_ENDIAN = false;
    /**
     * Default initial capacity of `16`.
     * @type {number}
     * @expose
     */

    ByteBuffer.DEFAULT_CAPACITY = 16;
    /**
     * Default endianess of `false` for big endian.
     * @type {boolean}
     * @expose
     */

    ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;
    /**
     * Default no assertions flag of `false`.
     * @type {boolean}
     * @expose
     */

    ByteBuffer.DEFAULT_NOASSERT = false;
    /**
     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded
     *  and int64 support is not available.
     * @type {?Long}
     * @const
     * @see https://github.com/dcodeIO/long.js
     * @expose
     */

    ByteBuffer.Long = Long || null;
    /**
     * @alias ByteBuffer.prototype
     * @inner
     */

    var ByteBufferPrototype = ByteBuffer.prototype;
    /**
     * An indicator used to reliably determine if an object is a ByteBuffer or not.
     * @type {boolean}
     * @const
     * @expose
     * @private
     */

    ByteBufferPrototype.__isByteBuffer__;
    Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
      value: true,
      enumerable: false,
      configurable: false
    }); // helpers

    /**
     * @type {!ArrayBuffer}
     * @inner
     */

    var EMPTY_BUFFER = new ArrayBuffer(0);
    /**
     * String.fromCharCode reference for compile-time renaming.
     * @type {function(...number):string}
     * @inner
     */

    var stringFromCharCode = String.fromCharCode;
    /**
     * Creates a source function for a string.
     * @param {string} s String to read from
     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are
     *  no more characters left.
     * @throws {TypeError} If the argument is invalid
     * @inner
     */

    function stringSource(s) {
      var i = 0;
      return function () {
        return i < s.length ? s.charCodeAt(i++) : null;
      };
    }
    /**
     * Creates a destination function for a string.
     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
     *  Returns the final string when called without arguments.
     * @inner
     */


    function stringDestination() {
      var cs = [],
          ps = [];
      return function () {
        if (arguments.length === 0) return ps.join('') + stringFromCharCode.apply(String, cs);
        if (cs.length + arguments.length > 1024) ps.push(stringFromCharCode.apply(String, cs)), cs.length = 0;
        Array.prototype.push.apply(cs, arguments);
      };
    }
    /**
     * Gets the accessor type.
     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)
     * @expose
     */


    ByteBuffer.accessor = function () {
      return Uint8Array;
    };
    /**
     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.
     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer}
     * @expose
     */


    ByteBuffer.allocate = function (capacity, littleEndian, noAssert) {
      return new ByteBuffer(capacity, littleEndian, noAssert);
    };
    /**
     * Concatenates multiple ByteBuffers into one.
     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate
     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string ("base64", "hex", "binary",
     *  defaults to "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults
     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} Concatenated ByteBuffer
     * @expose
     */


    ByteBuffer.concat = function (buffers, encoding, littleEndian, noAssert) {
      if (typeof encoding === 'boolean' || typeof encoding !== 'string') {
        noAssert = littleEndian;
        littleEndian = encoding;
        encoding = undefined;
      }

      var capacity = 0;

      for (var i = 0, k = buffers.length, length; i < k; ++i) {
        if (!ByteBuffer.isByteBuffer(buffers[i])) buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
        length = buffers[i].limit - buffers[i].offset;
        if (length > 0) capacity += length;
      }

      if (capacity === 0) return new ByteBuffer(0, littleEndian, noAssert);
      var bb = new ByteBuffer(capacity, littleEndian, noAssert),
          bi;
      i = 0;

      while (i < k) {
        bi = buffers[i++];
        length = bi.limit - bi.offset;
        if (length <= 0) continue;
        bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
        bb.offset += length;
      }

      bb.limit = bb.offset;
      bb.offset = 0;
      return bb;
    };
    /**
     * Tests if the specified type is a ByteBuffer.
     * @param {*} bb ByteBuffer to test
     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`
     * @expose
     */


    ByteBuffer.isByteBuffer = function (bb) {
      return (bb && bb["__isByteBuffer__"]) === true;
    };
    /**
     * Gets the backing buffer type.
     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)
     * @expose
     */


    ByteBuffer.type = function () {
      return ArrayBuffer;
    };
    /**
     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its
     *  {@link ByteBuffer#limit} to the length of the wrapped data.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped
     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string ("base64", "hex", "binary", defaults to
     *  "utf8")
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`
     * @expose
     */


    ByteBuffer.wrap = function (buffer, encoding, littleEndian, noAssert) {
      if (typeof encoding !== 'string') {
        noAssert = littleEndian;
        littleEndian = encoding;
        encoding = undefined;
      }

      if (typeof buffer === 'string') {
        if (typeof encoding === 'undefined') encoding = "utf8";

        switch (encoding) {
          case "base64":
            return ByteBuffer.fromBase64(buffer, littleEndian);

          case "hex":
            return ByteBuffer.fromHex(buffer, littleEndian);

          case "binary":
            return ByteBuffer.fromBinary(buffer, littleEndian);

          case "utf8":
            return ByteBuffer.fromUTF8(buffer, littleEndian);

          case "debug":
            return ByteBuffer.fromDebug(buffer, littleEndian);

          default:
            throw Error("Unsupported encoding: " + encoding);
        }
      }

      if (buffer === null || typeof buffer !== 'object') throw TypeError("Illegal buffer");
      var bb;

      if (ByteBuffer.isByteBuffer(buffer)) {
        bb = ByteBufferPrototype.clone.call(buffer);
        bb.markedOffset = -1;
        return bb;
      }

      if (buffer instanceof Uint8Array) {
        // Extract ArrayBuffer from Uint8Array
        bb = new ByteBuffer(0, littleEndian, noAssert);

        if (buffer.length > 0) {
          // Avoid references to more than one EMPTY_BUFFER
          bb.buffer = buffer.buffer;
          bb.offset = buffer.byteOffset;
          bb.limit = buffer.byteOffset + buffer.byteLength;
          bb.view = new Uint8Array(buffer.buffer);
        }
      } else if (buffer instanceof ArrayBuffer) {
        // Reuse ArrayBuffer
        bb = new ByteBuffer(0, littleEndian, noAssert);

        if (buffer.byteLength > 0) {
          bb.buffer = buffer;
          bb.offset = 0;
          bb.limit = buffer.byteLength;
          bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
        }
      } else if (Object.prototype.toString.call(buffer) === "[object Array]") {
        // Create from octets
        bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
        bb.limit = buffer.length;

        for (var i = 0; i < buffer.length; ++i) {
          bb.view[i] = buffer[i];
        }
      } else throw TypeError("Illegal buffer"); // Otherwise fail


      return bb;
    };
    /**
     * Writes the array as a bitset.
     * @param {Array<boolean>} value Array of booleans to write
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */


    ByteBufferPrototype.writeBitSet = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (!(value instanceof Array)) throw TypeError("Illegal BitSet: Not an array");
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      var start = offset,
          bits = value.length,
          bytes = bits >> 3,
          bit = 0,
          k;
      offset += this.writeVarint32(bits, offset);

      while (bytes--) {
        k = !!value[bit++] & 1 | (!!value[bit++] & 1) << 1 | (!!value[bit++] & 1) << 2 | (!!value[bit++] & 1) << 3 | (!!value[bit++] & 1) << 4 | (!!value[bit++] & 1) << 5 | (!!value[bit++] & 1) << 6 | (!!value[bit++] & 1) << 7;
        this.writeByte(k, offset++);
      }

      if (bit < bits) {
        var m = 0;
        k = 0;

        while (bit < bits) {
          k = k | (!!value[bit++] & 1) << m++;
        }

        this.writeByte(k, offset++);
      }

      if (relative) {
        this.offset = offset;
        return this;
      }

      return offset - start;
    };
    /**
     * Reads a BitSet as an array of booleans.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {Array<boolean>
     * @expose
     */


    ByteBufferPrototype.readBitSet = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;
      var ret = this.readVarint32(offset),
          bits = ret.value,
          bytes = bits >> 3,
          bit = 0,
          value = [],
          k;
      offset += ret.length;

      while (bytes--) {
        k = this.readByte(offset++);
        value[bit++] = !!(k & 0x01);
        value[bit++] = !!(k & 0x02);
        value[bit++] = !!(k & 0x04);
        value[bit++] = !!(k & 0x08);
        value[bit++] = !!(k & 0x10);
        value[bit++] = !!(k & 0x20);
        value[bit++] = !!(k & 0x40);
        value[bit++] = !!(k & 0x80);
      }

      if (bit < bits) {
        var m = 0;
        k = this.readByte(offset++);

        while (bit < bits) {
          value[bit++] = !!(k >> m++ & 1);
        }
      }

      if (relative) {
        this.offset = offset;
      }

      return value;
    };
    /**
     * Reads the specified number of bytes.
     * @param {number} length Number of bytes to read
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.
     * @returns {!ByteBuffer}
     * @expose
     */


    ByteBufferPrototype.readBytes = function (length, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + length > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
      }

      var slice = this.slice(offset, offset + length);
      if (relative) this.offset += length;
      return slice;
    };
    /**
     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.
     * @function
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.writeBytes = ByteBufferPrototype.append; // types/ints/int8

    /**
     * Writes an 8bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */

    ByteBufferPrototype.writeInt8 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value |= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 1;
      var capacity0 = this.buffer.byteLength;
      if (offset > capacity0) this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
      offset -= 1;
      this.view[offset] = value;
      if (relative) this.offset += 1;
      return this;
    };
    /**
     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;
    /**
     * Reads an 8bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */

    ByteBufferPrototype.readInt8 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
      }

      var value = this.view[offset];
      if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed

      if (relative) this.offset += 1;
      return value;
    };
    /**
     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */


    ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;
    /**
     * Writes an 8bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */

    ByteBufferPrototype.writeUint8 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value >>>= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 1;
      var capacity1 = this.buffer.byteLength;
      if (offset > capacity1) this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
      offset -= 1;
      this.view[offset] = value;
      if (relative) this.offset += 1;
      return this;
    };
    /**
     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;
    /**
     * Reads an 8bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */

    ByteBufferPrototype.readUint8 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
      }

      var value = this.view[offset];
      if (relative) this.offset += 1;
      return value;
    };
    /**
     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.
     * @returns {number} Value read
     * @expose
     */


    ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8; // types/ints/int16

    /**
     * Writes a 16bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */

    ByteBufferPrototype.writeInt16 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value |= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 2;
      var capacity2 = this.buffer.byteLength;
      if (offset > capacity2) this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
      offset -= 2;

      if (this.littleEndian) {
        this.view[offset + 1] = (value & 0xFF00) >>> 8;
        this.view[offset] = value & 0x00FF;
      } else {
        this.view[offset] = (value & 0xFF00) >>> 8;
        this.view[offset + 1] = value & 0x00FF;
      }

      if (relative) this.offset += 2;
      return this;
    };
    /**
     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */


    ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;
    /**
     * Reads a 16bit signed integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */

    ByteBufferPrototype.readInt16 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
      }

      var value = 0;

      if (this.littleEndian) {
        value = this.view[offset];
        value |= this.view[offset + 1] << 8;
      } else {
        value = this.view[offset] << 8;
        value |= this.view[offset + 1];
      }

      if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed

      if (relative) this.offset += 2;
      return value;
    };
    /**
     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */


    ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;
    /**
     * Writes a 16bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */

    ByteBufferPrototype.writeUint16 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value >>>= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 2;
      var capacity3 = this.buffer.byteLength;
      if (offset > capacity3) this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
      offset -= 2;

      if (this.littleEndian) {
        this.view[offset + 1] = (value & 0xFF00) >>> 8;
        this.view[offset] = value & 0x00FF;
      } else {
        this.view[offset] = (value & 0xFF00) >>> 8;
        this.view[offset + 1] = value & 0x00FF;
      }

      if (relative) this.offset += 2;
      return this;
    };
    /**
     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @throws {TypeError} If `offset` or `value` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */


    ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;
    /**
     * Reads a 16bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */

    ByteBufferPrototype.readUint16 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 2 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
      }

      var value = 0;

      if (this.littleEndian) {
        value = this.view[offset];
        value |= this.view[offset + 1] << 8;
      } else {
        value = this.view[offset] << 8;
        value |= this.view[offset + 1];
      }

      if (relative) this.offset += 2;
      return value;
    };
    /**
     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.
     * @function
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.
     * @returns {number} Value read
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @expose
     */


    ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16; // types/ints/int32

    /**
     * Writes a 32bit signed integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */

    ByteBufferPrototype.writeInt32 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value |= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 4;
      var capacity4 = this.buffer.byteLength;
      if (offset > capacity4) this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
      offset -= 4;

      if (this.littleEndian) {
        this.view[offset + 3] = value >>> 24 & 0xFF;
        this.view[offset + 2] = value >>> 16 & 0xFF;
        this.view[offset + 1] = value >>> 8 & 0xFF;
        this.view[offset] = value & 0xFF;
      } else {
        this.view[offset] = value >>> 24 & 0xFF;
        this.view[offset + 1] = value >>> 16 & 0xFF;
        this.view[offset + 2] = value >>> 8 & 0xFF;
        this.view[offset + 3] = value & 0xFF;
      }

      if (relative) this.offset += 4;
      return this;
    };
    /**
     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */


    ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;
    /**
     * Reads a 32bit signed integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */

    ByteBufferPrototype.readInt32 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
      }

      var value = 0;

      if (this.littleEndian) {
        value = this.view[offset + 2] << 16;
        value |= this.view[offset + 1] << 8;
        value |= this.view[offset];
        value += this.view[offset + 3] << 24 >>> 0;
      } else {
        value = this.view[offset + 1] << 16;
        value |= this.view[offset + 2] << 8;
        value |= this.view[offset + 3];
        value += this.view[offset] << 24 >>> 0;
      }

      value |= 0; // Cast to signed

      if (relative) this.offset += 4;
      return value;
    };
    /**
     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.
     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */


    ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;
    /**
     * Writes a 32bit unsigned integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */

    ByteBufferPrototype.writeUint32 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value >>>= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 4;
      var capacity5 = this.buffer.byteLength;
      if (offset > capacity5) this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
      offset -= 4;

      if (this.littleEndian) {
        this.view[offset + 3] = value >>> 24 & 0xFF;
        this.view[offset + 2] = value >>> 16 & 0xFF;
        this.view[offset + 1] = value >>> 8 & 0xFF;
        this.view[offset] = value & 0xFF;
      } else {
        this.view[offset] = value >>> 24 & 0xFF;
        this.view[offset + 1] = value >>> 16 & 0xFF;
        this.view[offset + 2] = value >>> 8 & 0xFF;
        this.view[offset + 3] = value & 0xFF;
      }

      if (relative) this.offset += 4;
      return this;
    };
    /**
     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @expose
     */


    ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;
    /**
     * Reads a 32bit unsigned integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */

    ByteBufferPrototype.readUint32 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
      }

      var value = 0;

      if (this.littleEndian) {
        value = this.view[offset + 2] << 16;
        value |= this.view[offset + 1] << 8;
        value |= this.view[offset];
        value += this.view[offset + 3] << 24 >>> 0;
      } else {
        value = this.view[offset + 1] << 16;
        value |= this.view[offset + 2] << 8;
        value |= this.view[offset + 3];
        value += this.view[offset] << 24 >>> 0;
      }

      if (relative) this.offset += 4;
      return value;
    };
    /**
     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number} Value read
     * @expose
     */


    ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32; // types/ints/int64

    if (Long) {
      /**
       * Writes a 64bit signed integer.
       * @param {number|!Long} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */
      ByteBufferPrototype.writeInt64 = function (value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        if (!this.noAssert) {
          if (typeof value === 'number') value = Long.fromNumber(value);else if (typeof value === 'string') value = Long.fromString(value);else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }

        if (typeof value === 'number') value = Long.fromNumber(value);else if (typeof value === 'string') value = Long.fromString(value);
        offset += 8;
        var capacity6 = this.buffer.byteLength;
        if (offset > capacity6) this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
        offset -= 8;
        var lo = value.low,
            hi = value.high;

        if (this.littleEndian) {
          this.view[offset + 3] = lo >>> 24 & 0xFF;
          this.view[offset + 2] = lo >>> 16 & 0xFF;
          this.view[offset + 1] = lo >>> 8 & 0xFF;
          this.view[offset] = lo & 0xFF;
          offset += 4;
          this.view[offset + 3] = hi >>> 24 & 0xFF;
          this.view[offset + 2] = hi >>> 16 & 0xFF;
          this.view[offset + 1] = hi >>> 8 & 0xFF;
          this.view[offset] = hi & 0xFF;
        } else {
          this.view[offset] = hi >>> 24 & 0xFF;
          this.view[offset + 1] = hi >>> 16 & 0xFF;
          this.view[offset + 2] = hi >>> 8 & 0xFF;
          this.view[offset + 3] = hi & 0xFF;
          offset += 4;
          this.view[offset] = lo >>> 24 & 0xFF;
          this.view[offset + 1] = lo >>> 16 & 0xFF;
          this.view[offset + 2] = lo >>> 8 & 0xFF;
          this.view[offset + 3] = lo & 0xFF;
        }

        if (relative) this.offset += 8;
        return this;
      };
      /**
       * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.
       * @param {number|!Long} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */


      ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;
      /**
       * Reads a 64bit signed integer.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!Long}
       * @expose
       */

      ByteBufferPrototype.readInt64 = function (offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        if (!this.noAssert) {
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
        }

        var lo = 0,
            hi = 0;

        if (this.littleEndian) {
          lo = this.view[offset + 2] << 16;
          lo |= this.view[offset + 1] << 8;
          lo |= this.view[offset];
          lo += this.view[offset + 3] << 24 >>> 0;
          offset += 4;
          hi = this.view[offset + 2] << 16;
          hi |= this.view[offset + 1] << 8;
          hi |= this.view[offset];
          hi += this.view[offset + 3] << 24 >>> 0;
        } else {
          hi = this.view[offset + 1] << 16;
          hi |= this.view[offset + 2] << 8;
          hi |= this.view[offset + 3];
          hi += this.view[offset] << 24 >>> 0;
          offset += 4;
          lo = this.view[offset + 1] << 16;
          lo |= this.view[offset + 2] << 8;
          lo |= this.view[offset + 3];
          lo += this.view[offset] << 24 >>> 0;
        }

        var value = new Long(lo, hi, false);
        if (relative) this.offset += 8;
        return value;
      };
      /**
       * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!Long}
       * @expose
       */


      ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;
      /**
       * Writes a 64bit unsigned integer.
       * @param {number|!Long} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */

      ByteBufferPrototype.writeUint64 = function (value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        if (!this.noAssert) {
          if (typeof value === 'number') value = Long.fromNumber(value);else if (typeof value === 'string') value = Long.fromString(value);else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }

        if (typeof value === 'number') value = Long.fromNumber(value);else if (typeof value === 'string') value = Long.fromString(value);
        offset += 8;
        var capacity7 = this.buffer.byteLength;
        if (offset > capacity7) this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
        offset -= 8;
        var lo = value.low,
            hi = value.high;

        if (this.littleEndian) {
          this.view[offset + 3] = lo >>> 24 & 0xFF;
          this.view[offset + 2] = lo >>> 16 & 0xFF;
          this.view[offset + 1] = lo >>> 8 & 0xFF;
          this.view[offset] = lo & 0xFF;
          offset += 4;
          this.view[offset + 3] = hi >>> 24 & 0xFF;
          this.view[offset + 2] = hi >>> 16 & 0xFF;
          this.view[offset + 1] = hi >>> 8 & 0xFF;
          this.view[offset] = hi & 0xFF;
        } else {
          this.view[offset] = hi >>> 24 & 0xFF;
          this.view[offset + 1] = hi >>> 16 & 0xFF;
          this.view[offset + 2] = hi >>> 8 & 0xFF;
          this.view[offset + 3] = hi & 0xFF;
          offset += 4;
          this.view[offset] = lo >>> 24 & 0xFF;
          this.view[offset + 1] = lo >>> 16 & 0xFF;
          this.view[offset + 2] = lo >>> 8 & 0xFF;
          this.view[offset + 3] = lo & 0xFF;
        }

        if (relative) this.offset += 8;
        return this;
      };
      /**
       * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.
       * @function
       * @param {number|!Long} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!ByteBuffer} this
       * @expose
       */


      ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;
      /**
       * Reads a 64bit unsigned integer.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!Long}
       * @expose
       */

      ByteBufferPrototype.readUint64 = function (offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        if (!this.noAssert) {
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
        }

        var lo = 0,
            hi = 0;

        if (this.littleEndian) {
          lo = this.view[offset + 2] << 16;
          lo |= this.view[offset + 1] << 8;
          lo |= this.view[offset];
          lo += this.view[offset + 3] << 24 >>> 0;
          offset += 4;
          hi = this.view[offset + 2] << 16;
          hi |= this.view[offset + 1] << 8;
          hi |= this.view[offset];
          hi += this.view[offset + 3] << 24 >>> 0;
        } else {
          hi = this.view[offset + 1] << 16;
          hi |= this.view[offset + 2] << 8;
          hi |= this.view[offset + 3];
          hi += this.view[offset] << 24 >>> 0;
          offset += 4;
          lo = this.view[offset + 1] << 16;
          lo |= this.view[offset + 2] << 8;
          lo |= this.view[offset + 3];
          lo += this.view[offset] << 24 >>> 0;
        }

        var value = new Long(lo, hi, true);
        if (relative) this.offset += 8;
        return value;
      };
      /**
       * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.
       * @function
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
       * @returns {!Long}
       * @expose
       */


      ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;
    } // Long
    // types/floats/float32

    /*
     ieee754 - https://github.com/feross/ieee754
       The MIT License (MIT)
       Copyright (c) Feross Aboukhadijeh
       Permission is hereby granted, free of charge, to any person obtaining a copy
     of this software and associated documentation files (the "Software"), to deal
     in the Software without restriction, including without limitation the rights
     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     copies of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:
       The above copyright notice and this permission notice shall be included in
     all copies or substantial portions of the Software.
       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     THE SOFTWARE.
    */

    /**
     * Reads an IEEE754 float from a byte array.
     * @param {!Array} buffer
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @returns {number}
     * @inner
     */


    function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
      var e,
          m,
          eLen = nBytes * 8 - mLen - 1,
          eMax = (1 << eLen) - 1,
          eBias = eMax >> 1,
          nBits = -7,
          i = isLE ? nBytes - 1 : 0,
          d = isLE ? -1 : 1,
          s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }
    /**
     * Writes an IEEE754 float to a byte array.
     * @param {!Array} buffer
     * @param {number} value
     * @param {number} offset
     * @param {boolean} isLE
     * @param {number} mLen
     * @param {number} nBytes
     * @inner
     */


    function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
      var e,
          m,
          c,
          eLen = nBytes * 8 - mLen - 1,
          eMax = (1 << eLen) - 1,
          eBias = eMax >> 1,
          rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          i = isLE ? 0 : nBytes - 1,
          d = isLE ? 1 : -1,
          s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }
    /**
     * Writes a 32bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.writeFloat32 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number') throw TypeError("Illegal value: " + value + " (not a number)");
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 4;
      var capacity8 = this.buffer.byteLength;
      if (offset > capacity8) this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
      offset -= 4;
      ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
      if (relative) this.offset += 4;
      return this;
    };
    /**
     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;
    /**
     * Reads a 32bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */

    ByteBufferPrototype.readFloat32 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
      }

      var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
      if (relative) this.offset += 4;
      return value;
    };
    /**
     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.
     * @returns {number}
     * @expose
     */


    ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32; // types/floats/float64

    /**
     * Writes a 64bit float.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */

    ByteBufferPrototype.writeFloat64 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number') throw TypeError("Illegal value: " + value + " (not a number)");
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      offset += 8;
      var capacity9 = this.buffer.byteLength;
      if (offset > capacity9) this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
      offset -= 8;
      ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
      if (relative) this.offset += 8;
      return this;
    };
    /**
     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.
     * @function
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;
    /**
     * Reads a 64bit float.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */

    ByteBufferPrototype.readFloat64 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 8 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
      }

      var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
      if (relative) this.offset += 8;
      return value;
    };
    /**
     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.
     * @function
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.
     * @returns {number}
     * @expose
     */


    ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64; // types/varints/varint32

    /**
     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.
     * @type {number}
     * @const
     * @expose
     */

    ByteBuffer.MAX_VARINT32_BYTES = 5;
    /**
     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.
     * @param {number} value Value to encode
     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}
     * @expose
     */

    ByteBuffer.calculateVarint32 = function (value) {
      // ref: src/google/protobuf/io/coded_stream.cc
      value = value >>> 0;
      if (value < 1 << 7) return 1;else if (value < 1 << 14) return 2;else if (value < 1 << 21) return 3;else if (value < 1 << 28) return 4;else return 5;
    };
    /**
     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.
     * @param {number} n Signed 32bit integer
     * @returns {number} Unsigned zigzag encoded 32bit integer
     * @expose
     */


    ByteBuffer.zigZagEncode32 = function (n) {
      return ((n |= 0) << 1 ^ n >> 31) >>> 0; // ref: src/google/protobuf/wire_format_lite.h
    };
    /**
     * Decodes a zigzag encoded signed 32bit integer.
     * @param {number} n Unsigned zigzag encoded 32bit integer
     * @returns {number} Signed 32bit integer
     * @expose
     */


    ByteBuffer.zigZagDecode32 = function (n) {
      return n >>> 1 ^ -(n & 1) | 0; // // ref: src/google/protobuf/wire_format_lite.h
    };
    /**
     * Writes a 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */


    ByteBufferPrototype.writeVarint32 = function (value, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value |= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      var size = ByteBuffer.calculateVarint32(value),
          b;
      offset += size;
      var capacity10 = this.buffer.byteLength;
      if (offset > capacity10) this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
      offset -= size;
      value >>>= 0;

      while (value >= 0x80) {
        b = value & 0x7f | 0x80;
        this.view[offset++] = b;
        value >>>= 7;
      }

      this.view[offset++] = value;

      if (relative) {
        this.offset = offset;
        return this;
      }

      return size;
    };
    /**
     * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.
     * @param {number} value Value to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written
     * @expose
     */


    ByteBufferPrototype.writeVarint32ZigZag = function (value, offset) {
      return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
    };
    /**
     * Reads a 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available
     *  to fully decode the varint.
     * @expose
     */


    ByteBufferPrototype.readVarint32 = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
      }

      var c = 0,
          value = 0 >>> 0,
          b;

      do {
        if (!this.noAssert && offset > this.limit) {
          var err = Error("Truncated");
          err['truncated'] = true;
          throw err;
        }

        b = this.view[offset++];
        if (c < 5) value |= (b & 0x7f) << 7 * c;
        ++c;
      } while ((b & 0x80) !== 0);

      value |= 0;

      if (relative) {
        this.offset = offset;
        return value;
      }

      return {
        "value": value,
        "length": c
      };
    };
    /**
     * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read
     *  and the actual number of bytes read.
     * @throws {Error} If it's not a valid varint
     * @expose
     */


    ByteBufferPrototype.readVarint32ZigZag = function (offset) {
      var val = this.readVarint32(offset);
      if (typeof val === 'object') val["value"] = ByteBuffer.zigZagDecode32(val["value"]);else val = ByteBuffer.zigZagDecode32(val);
      return val;
    }; // types/varints/varint64


    if (Long) {
      /**
       * Maximum number of bytes required to store a 64bit base 128 variable-length integer.
       * @type {number}
       * @const
       * @expose
       */
      ByteBuffer.MAX_VARINT64_BYTES = 10;
      /**
       * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.
       * @param {number|!Long} value Value to encode
       * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}
       * @expose
       */

      ByteBuffer.calculateVarint64 = function (value) {
        if (typeof value === 'number') value = Long.fromNumber(value);else if (typeof value === 'string') value = Long.fromString(value); // ref: src/google/protobuf/io/coded_stream.cc

        var part0 = value.toInt() >>> 0,
            part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
            part2 = value.shiftRightUnsigned(56).toInt() >>> 0;

        if (part2 == 0) {
          if (part1 == 0) {
            if (part0 < 1 << 14) return part0 < 1 << 7 ? 1 : 2;else return part0 < 1 << 21 ? 3 : 4;
          } else {
            if (part1 < 1 << 14) return part1 < 1 << 7 ? 5 : 6;else return part1 < 1 << 21 ? 7 : 8;
          }
        } else return part2 < 1 << 7 ? 9 : 10;
      };
      /**
       * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.
       * @param {number|!Long} value Signed long
       * @returns {!Long} Unsigned zigzag encoded long
       * @expose
       */


      ByteBuffer.zigZagEncode64 = function (value) {
        if (typeof value === 'number') value = Long.fromNumber(value, false);else if (typeof value === 'string') value = Long.fromString(value, false);else if (value.unsigned !== false) value = value.toSigned(); // ref: src/google/protobuf/wire_format_lite.h

        return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
      };
      /**
       * Decodes a zigzag encoded signed 64bit integer.
       * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number
       * @returns {!Long} Signed long
       * @expose
       */


      ByteBuffer.zigZagDecode64 = function (value) {
        if (typeof value === 'number') value = Long.fromNumber(value, false);else if (typeof value === 'string') value = Long.fromString(value, false);else if (value.unsigned !== false) value = value.toSigned(); // ref: src/google/protobuf/wire_format_lite.h

        return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
      };
      /**
       * Writes a 64bit base 128 variable-length integer.
       * @param {number|Long} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
       * @expose
       */


      ByteBufferPrototype.writeVarint64 = function (value, offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        if (!this.noAssert) {
          if (typeof value === 'number') value = Long.fromNumber(value);else if (typeof value === 'string') value = Long.fromString(value);else if (!(value && value instanceof Long)) throw TypeError("Illegal value: " + value + " (not an integer or Long)");
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
        }

        if (typeof value === 'number') value = Long.fromNumber(value, false);else if (typeof value === 'string') value = Long.fromString(value, false);else if (value.unsigned !== false) value = value.toSigned();
        var size = ByteBuffer.calculateVarint64(value),
            part0 = value.toInt() >>> 0,
            part1 = value.shiftRightUnsigned(28).toInt() >>> 0,
            part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
        offset += size;
        var capacity11 = this.buffer.byteLength;
        if (offset > capacity11) this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
        offset -= size;

        switch (size) {
          case 10:
            this.view[offset + 9] = part2 >>> 7 & 0x01;

          case 9:
            this.view[offset + 8] = size !== 9 ? part2 | 0x80 : part2 & 0x7F;

          case 8:
            this.view[offset + 7] = size !== 8 ? part1 >>> 21 | 0x80 : part1 >>> 21 & 0x7F;

          case 7:
            this.view[offset + 6] = size !== 7 ? part1 >>> 14 | 0x80 : part1 >>> 14 & 0x7F;

          case 6:
            this.view[offset + 5] = size !== 6 ? part1 >>> 7 | 0x80 : part1 >>> 7 & 0x7F;

          case 5:
            this.view[offset + 4] = size !== 5 ? part1 | 0x80 : part1 & 0x7F;

          case 4:
            this.view[offset + 3] = size !== 4 ? part0 >>> 21 | 0x80 : part0 >>> 21 & 0x7F;

          case 3:
            this.view[offset + 2] = size !== 3 ? part0 >>> 14 | 0x80 : part0 >>> 14 & 0x7F;

          case 2:
            this.view[offset + 1] = size !== 2 ? part0 >>> 7 | 0x80 : part0 >>> 7 & 0x7F;

          case 1:
            this.view[offset] = size !== 1 ? part0 | 0x80 : part0 & 0x7F;
        }

        if (relative) {
          this.offset += size;
          return this;
        } else {
          return size;
        }
      };
      /**
       * Writes a zig-zag encoded 64bit base 128 variable-length integer.
       * @param {number|Long} value Value to write
       * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  written if omitted.
       * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.
       * @expose
       */


      ByteBufferPrototype.writeVarint64ZigZag = function (value, offset) {
        return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
      };
      /**
       * Reads a 64bit base 128 variable-length integer. Requires Long.js.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
       *  the actual number of bytes read.
       * @throws {Error} If it's not a valid varint
       * @expose
       */


      ByteBufferPrototype.readVarint64 = function (offset) {
        var relative = typeof offset === 'undefined';
        if (relative) offset = this.offset;

        if (!this.noAssert) {
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
        } // ref: src/google/protobuf/io/coded_stream.cc


        var start = offset,
            part0 = 0,
            part1 = 0,
            part2 = 0,
            b = 0;
        b = this.view[offset++];
        part0 = b & 0x7F;

        if (b & 0x80) {
          b = this.view[offset++];
          part0 |= (b & 0x7F) << 7;

          if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
            b = this.view[offset++];
            part0 |= (b & 0x7F) << 14;

            if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
              b = this.view[offset++];
              part0 |= (b & 0x7F) << 21;

              if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                b = this.view[offset++];
                part1 = b & 0x7F;

                if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                  b = this.view[offset++];
                  part1 |= (b & 0x7F) << 7;

                  if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                    b = this.view[offset++];
                    part1 |= (b & 0x7F) << 14;

                    if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                      b = this.view[offset++];
                      part1 |= (b & 0x7F) << 21;

                      if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                        b = this.view[offset++];
                        part2 = b & 0x7F;

                        if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                          b = this.view[offset++];
                          part2 |= (b & 0x7F) << 7;

                          if (b & 0x80 || this.noAssert && typeof b === 'undefined') {
                            throw Error("Buffer overrun");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        var value = Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, false);

        if (relative) {
          this.offset = offset;
          return value;
        } else {
          return {
            'value': value,
            'length': offset - start
          };
        }
      };
      /**
       * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.
       * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
       *  read if omitted.
       * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and
       *  the actual number of bytes read.
       * @throws {Error} If it's not a valid varint
       * @expose
       */


      ByteBufferPrototype.readVarint64ZigZag = function (offset) {
        var val = this.readVarint64(offset);
        if (val && val['value'] instanceof Long) val["value"] = ByteBuffer.zigZagDecode64(val["value"]);else val = ByteBuffer.zigZagDecode64(val);
        return val;
      };
    } // Long
    // types/strings/cstring

    /**
     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL
     *  characters itself.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  contained in `str` + 1 if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written
     * @expose
     */


    ByteBufferPrototype.writeCString = function (str, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;
      var i,
          k = str.length;

      if (!this.noAssert) {
        if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");

        for (i = 0; i < k; ++i) {
          if (str.charCodeAt(i) === 0) throw RangeError("Illegal str: Contains NULL-characters");
        }

        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      } // UTF8 strings do not contain zero bytes in between except for the zero character, so:


      k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
      offset += k + 1;
      var capacity12 = this.buffer.byteLength;
      if (offset > capacity12) this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
      offset -= k + 1;
      utfx.encodeUTF16toUTF8(stringSource(str), function (b) {
        this.view[offset++] = b;
      }.bind(this));
      this.view[offset++] = 0;

      if (relative) {
        this.offset = offset;
        return this;
      }

      return k;
    };
    /**
     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters
     *  itself.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */


    ByteBufferPrototype.readCString = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
      }

      var start = offset;
 // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:

      var sd,
          b = -1;
      utfx.decodeUTF8toUTF16(function () {
        if (b === 0) return null;
        if (offset >= this.limit) throw RangeError("Illegal range: Truncated data, " + offset + " < " + this.limit);
        b = this.view[offset++];
        return b === 0 ? null : b;
      }.bind(this), sd = stringDestination(), true);

      if (relative) {
        this.offset = offset;
        return sd();
      } else {
        return {
          "string": sd(),
          "length": offset - start
        };
      }
    }; // types/strings/istring

    /**
     * Writes a length as uint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */


    ByteBufferPrototype.writeIString = function (str, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      var start = offset,
          k;
      k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
      offset += 4 + k;
      var capacity13 = this.buffer.byteLength;
      if (offset > capacity13) this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
      offset -= 4 + k;

      if (this.littleEndian) {
        this.view[offset + 3] = k >>> 24 & 0xFF;
        this.view[offset + 2] = k >>> 16 & 0xFF;
        this.view[offset + 1] = k >>> 8 & 0xFF;
        this.view[offset] = k & 0xFF;
      } else {
        this.view[offset] = k >>> 24 & 0xFF;
        this.view[offset + 1] = k >>> 16 & 0xFF;
        this.view[offset + 2] = k >>> 8 & 0xFF;
        this.view[offset + 3] = k & 0xFF;
      }

      offset += 4;
      utfx.encodeUTF16toUTF8(stringSource(str), function (b) {
        this.view[offset++] = b;
      }.bind(this));
      if (offset !== start + 4 + k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + 4 + k));

      if (relative) {
        this.offset = offset;
        return this;
      }

      return offset - start;
    };
    /**
     * Reads a length as uint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */


    ByteBufferPrototype.readIString = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 4 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
      }

      var start = offset;
      var len = this.readUint32(offset);
      var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
      offset += str['length'];

      if (relative) {
        this.offset = offset;
        return str['string'];
      } else {
        return {
          'string': str['string'],
          'length': offset - start
        };
      }
    }; // types/strings/utf8string

    /**
     * Metrics representing number of UTF8 characters. Evaluates to `c`.
     * @type {string}
     * @const
     * @expose
     */


    ByteBuffer.METRICS_CHARS = 'c';
    /**
     * Metrics representing number of bytes. Evaluates to `b`.
     * @type {string}
     * @const
     * @expose
     */

    ByteBuffer.METRICS_BYTES = 'b';
    /**
     * Writes an UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */

    ByteBufferPrototype.writeUTF8String = function (str, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      var k;
      var start = offset;
      k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
      offset += k;
      var capacity14 = this.buffer.byteLength;
      if (offset > capacity14) this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
      offset -= k;
      utfx.encodeUTF16toUTF8(stringSource(str), function (b) {
        this.view[offset++] = b;
      }.bind(this));

      if (relative) {
        this.offset = offset;
        return this;
      }

      return offset - start;
    };
    /**
     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.
     * @function
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.
     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.
     * @expose
     */


    ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;
    /**
     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's
     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 characters
     * @expose
     */

    ByteBuffer.calculateUTF8Chars = function (str) {
      return utfx.calculateUTF16asUTF8(stringSource(str))[0];
    };
    /**
     * Calculates the number of UTF8 bytes of a string.
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */


    ByteBuffer.calculateUTF8Bytes = function (str) {
      return utfx.calculateUTF16asUTF8(stringSource(str))[1];
    };
    /**
     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.
     * @function
     * @param {string} str String to calculate
     * @returns {number} Number of UTF8 bytes
     * @expose
     */


    ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;
    /**
     * Reads an UTF8 encoded string.
     * @param {number} length Number of characters or bytes to read.
     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */

    ByteBufferPrototype.readUTF8String = function (length, metrics, offset) {
      if (typeof metrics === 'number') {
        offset = metrics;
        metrics = undefined;
      }

      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;
      if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;

      if (!this.noAssert) {
        if (typeof length !== 'number' || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
        length |= 0;
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      var i = 0,
          start = offset,
          sd;

      if (metrics === ByteBuffer.METRICS_CHARS) {
        // The same for node and the browser
        sd = stringDestination();
        utfx.decodeUTF8(function () {
          return i < length && offset < this.limit ? this.view[offset++] : null;
        }.bind(this), function (cp) {
          ++i;
          utfx.UTF8toUTF16(cp, sd);
        });
        if (i !== length) throw RangeError("Illegal range: Truncated data, " + i + " == " + length);

        if (relative) {
          this.offset = offset;
          return sd();
        } else {
          return {
            "string": sd(),
            "length": offset - start
          };
        }
      } else if (metrics === ByteBuffer.METRICS_BYTES) {
        if (!this.noAssert) {
          if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
          offset >>>= 0;
          if (offset < 0 || offset + length > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
        }

        var k = offset + length;
        utfx.decodeUTF8toUTF16(function () {
          return offset < k ? this.view[offset++] : null;
        }.bind(this), sd = stringDestination(), this.noAssert);
        if (offset !== k) throw RangeError("Illegal range: Truncated data, " + offset + " == " + k);

        if (relative) {
          this.offset = offset;
          return sd();
        } else {
          return {
            'string': sd(),
            'length': offset - start
          };
        }
      } else throw TypeError("Unsupported metrics: " + metrics);
    };
    /**
     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.
     * @function
     * @param {number} length Number of characters or bytes to read
     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to
     *  {@link ByteBuffer.METRICS_CHARS}.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     */


    ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String; // types/strings/vstring

    /**
     * Writes a length as varint32 prefixed UTF8 encoded string.
     * @param {string} str String to write
     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written
     * @expose
     * @see ByteBuffer#writeVarint32
     */

    ByteBufferPrototype.writeVString = function (str, offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      var start = offset,
          k,
          l;
      k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
      l = ByteBuffer.calculateVarint32(k);
      offset += l + k;
      var capacity15 = this.buffer.byteLength;
      if (offset > capacity15) this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
      offset -= l + k;
      offset += this.writeVarint32(k, offset);
      utfx.encodeUTF16toUTF8(stringSource(str), function (b) {
        this.view[offset++] = b;
      }.bind(this));
      if (offset !== start + k + l) throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + k + l));

      if (relative) {
        this.offset = offset;
        return this;
      }

      return offset - start;
    };
    /**
     * Reads a length as varint32 prefixed UTF8 encoded string.
     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string
     *  read and the actual number of bytes read.
     * @expose
     * @see ByteBuffer#readVarint32
     */


    ByteBufferPrototype.readVString = function (offset) {
      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 1 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
      }

      var start = offset;
      var len = this.readVarint32(offset);
      var str = this.readUTF8String(len['value'], ByteBuffer.METRICS_BYTES, offset += len['length']);
      offset += str['length'];

      if (relative) {
        this.offset = offset;
        return str['string'];
      } else {
        return {
          'string': str['string'],
          'length': offset - start
        };
      }
    };
    /**
     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended
     *  data's length.
     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets
     *  will be modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`
     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`
     */


    ByteBufferPrototype.append = function (source, encoding, offset) {
      if (typeof encoding === 'number' || typeof encoding !== 'string') {
        offset = encoding;
        encoding = undefined;
      }

      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      if (!(source instanceof ByteBuffer)) source = ByteBuffer.wrap(source, encoding);
      var length = source.limit - source.offset;
      if (length <= 0) return this; // Nothing to append

      offset += length;
      var capacity16 = this.buffer.byteLength;
      if (offset > capacity16) this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
      offset -= length;
      this.view.set(source.view.subarray(source.offset, source.limit), offset);
      source.offset += length;
      if (relative) this.offset += length;
      return this;
    };
    /**
     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the
        specified offset up to the length of this ByteBuffer's data.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  read if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#append
     */


    ByteBufferPrototype.appendTo = function (target, offset) {
      target.append(this, offset);
      return this;
    };
    /**
     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to
     *  disable them if your code already makes sure that everything is valid.
     * @param {boolean} assert `true` to enable assertions, otherwise `false`
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.assert = function (assert) {
      this.noAssert = !assert;
      return this;
    };
    /**
     * Gets the capacity of this ByteBuffer's backing buffer.
     * @returns {number} Capacity of the backing buffer
     * @expose
     */


    ByteBufferPrototype.capacity = function () {
      return this.buffer.byteLength;
    };
    /**
     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the
     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.clear = function () {
      this.offset = 0;
      this.limit = this.buffer.byteLength;
      this.markedOffset = -1;
      return this;
    };
    /**
     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},
     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.
     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`
     * @returns {!ByteBuffer} Cloned instance
     * @expose
     */


    ByteBufferPrototype.clone = function (copy) {
      var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);

      if (copy) {
        bb.buffer = new ArrayBuffer(this.buffer.byteLength);
        bb.view = new Uint8Array(bb.buffer);
      } else {
        bb.buffer = this.buffer;
        bb.view = this.view;
      }

      bb.offset = this.offset;
      bb.markedOffset = this.markedOffset;
      bb.limit = this.limit;
      return bb;
    };
    /**
     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes
     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and
     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.compact = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;

      if (!this.noAssert) {
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      if (begin === 0 && end === this.buffer.byteLength) return this; // Already compacted

      var len = end - begin;

      if (len === 0) {
        this.buffer = EMPTY_BUFFER;
        this.view = null;
        if (this.markedOffset >= 0) this.markedOffset -= begin;
        this.offset = 0;
        this.limit = 0;
        return this;
      }

      var buffer = new ArrayBuffer(len);
      var view = new Uint8Array(buffer);
      view.set(this.view.subarray(begin, end));
      this.buffer = buffer;
      this.view = view;
      if (this.markedOffset >= 0) this.markedOffset -= begin;
      this.offset = 0;
      this.limit = len;
      return this;
    };
    /**
     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Copy
     * @expose
     */


    ByteBufferPrototype.copy = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;

      if (!this.noAssert) {
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      if (begin === end) return new ByteBuffer(0, this.littleEndian, this.noAssert);
      var capacity = end - begin,
          bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
      bb.offset = 0;
      bb.limit = capacity;
      if (bb.markedOffset >= 0) bb.markedOffset -= begin;
      this.copyTo(bb, 0, begin, end);
      return bb;
    };
    /**
     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}
     *  by the number of bytes copied if omitted.
     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the
     *  number of bytes copied if omitted.
     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.copyTo = function (target, targetOffset, sourceOffset, sourceLimit) {
      var relative, targetRelative;

      if (!this.noAssert) {
        if (!ByteBuffer.isByteBuffer(target)) throw TypeError("Illegal target: Not a ByteBuffer");
      }

      targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;
      sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;
      sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;
      if (targetOffset < 0 || targetOffset > target.buffer.byteLength) throw RangeError("Illegal target range: 0 <= " + targetOffset + " <= " + target.buffer.byteLength);
      if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength) throw RangeError("Illegal source range: 0 <= " + sourceOffset + " <= " + this.buffer.byteLength);
      var len = sourceLimit - sourceOffset;
      if (len === 0) return target; // Nothing to copy

      target.ensureCapacity(targetOffset + len);
      target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);
      if (relative) this.offset += len;
      if (targetRelative) target.offset += len;
      return this;
    };
    /**
     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the
     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,
     *  the required capacity will be used instead.
     * @param {number} capacity Required capacity
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.ensureCapacity = function (capacity) {
      var current = this.buffer.byteLength;
      if (current < capacity) return this.resize((current *= 2) > capacity ? current : capacity);
      return this;
    };
    /**
     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.
     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes
     *  written if omitted. defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} this
     * @expose
     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes
     */


    ByteBufferPrototype.fill = function (value, begin, end) {
      var relative = typeof begin === 'undefined';
      if (relative) begin = this.offset;
      if (typeof value === 'string' && value.length > 0) value = value.charCodeAt(0);
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;

      if (!this.noAssert) {
        if (typeof value !== 'number' || value % 1 !== 0) throw TypeError("Illegal value: " + value + " (not an integer)");
        value |= 0;
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      if (begin >= end) return this; // Nothing to fill

      while (begin < end) {
        this.view[begin++] = value;
      }

      if (relative) this.offset = begin;
      return this;
    };
    /**
     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and
     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.flip = function () {
      this.limit = this.offset;
      this.offset = 0;
      return this;
    };
    /**
     * Marks an offset on this ByteBuffer to be used later.
     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `offset` is not a valid number
     * @throws {RangeError} If `offset` is out of bounds
     * @see ByteBuffer#reset
     * @expose
     */


    ByteBufferPrototype.mark = function (offset) {
      offset = typeof offset === 'undefined' ? this.offset : offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      this.markedOffset = offset;
      return this;
    };
    /**
     * Sets the byte order.
     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.order = function (littleEndian) {
      if (!this.noAssert) {
        if (typeof littleEndian !== 'boolean') throw TypeError("Illegal littleEndian: Not a boolean");
      }

      this.littleEndian = !!littleEndian;
      return this;
    };
    /**
     * Switches (to) little endian byte order.
     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.LE = function (littleEndian) {
      this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;
      return this;
    };
    /**
     * Switches (to) big endian byte order.
     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.BE = function (bigEndian) {
      this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;
      return this;
    };
    /**
     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be
     *  modified according to the performed read operation.
     * @param {(string|number)=} encoding Encoding if `data` is a string ("base64", "hex", "binary", defaults to "utf8")
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`
     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`
     */


    ByteBufferPrototype.prepend = function (source, encoding, offset) {
      if (typeof encoding === 'number' || typeof encoding !== 'string') {
        offset = encoding;
        encoding = undefined;
      }

      var relative = typeof offset === 'undefined';
      if (relative) offset = this.offset;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: " + offset + " (not an integer)");
        offset >>>= 0;
        if (offset < 0 || offset + 0 > this.buffer.byteLength) throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
      }

      if (!(source instanceof ByteBuffer)) source = ByteBuffer.wrap(source, encoding);
      var len = source.limit - source.offset;
      if (len <= 0) return this; // Nothing to prepend

      var diff = len - offset;

      if (diff > 0) {
        // Not enough space before offset, so resize + move
        var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
        var view = new Uint8Array(buffer);
        view.set(this.view.subarray(offset, this.buffer.byteLength), len);
        this.buffer = buffer;
        this.view = view;
        this.offset += diff;
        if (this.markedOffset >= 0) this.markedOffset += diff;
        this.limit += diff;
        offset += diff;
      } else {
        var arrayView = new Uint8Array(this.buffer);
      }

      this.view.set(source.view.subarray(source.offset, source.limit), offset - len);
      source.offset = source.limit;
      if (relative) this.offset -= len;
      return this;
    };
    /**
     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the
     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer
     *  will be resized and its contents moved accordingly.
     * @param {!ByteBuffer} target Target ByteBuffer
     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes
     *  prepended if omitted.
     * @returns {!ByteBuffer} this
     * @expose
     * @see ByteBuffer#prepend
     */


    ByteBufferPrototype.prependTo = function (target, offset) {
      target.prepend(this, offset);
      return this;
    };
    /**
     * Prints debug information about this ByteBuffer's contents.
     * @param {function(string)=} out Output function to call, defaults to console.log
     * @expose
     */


    ByteBufferPrototype.printDebug = function (out) {
      if (typeof out !== 'function') out = console.log.bind(console);
      out(this.toString() + "\n" + "-------------------------------------------------------------------\n" + this.toDebug(
      /* columns */
      true));
    };
    /**
     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and
     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.
     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.
     * @expose
     */


    ByteBufferPrototype.remaining = function () {
      return this.limit - this.offset;
    };
    /**
     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}
     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been
     *  marked, sets `offset = 0`.
     * @returns {!ByteBuffer} this
     * @see ByteBuffer#mark
     * @expose
     */


    ByteBufferPrototype.reset = function () {
      if (this.markedOffset >= 0) {
        this.offset = this.markedOffset;
        this.markedOffset = -1;
      } else {
        this.offset = 0;
      }

      return this;
    };
    /**
     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that
     *  large or larger.
     * @param {number} capacity Capacity required
     * @returns {!ByteBuffer} this
     * @throws {TypeError} If `capacity` is not a number
     * @throws {RangeError} If `capacity < 0`
     * @expose
     */


    ByteBufferPrototype.resize = function (capacity) {
      if (!this.noAssert) {
        if (typeof capacity !== 'number' || capacity % 1 !== 0) throw TypeError("Illegal capacity: " + capacity + " (not an integer)");
        capacity |= 0;
        if (capacity < 0) throw RangeError("Illegal capacity: 0 <= " + capacity);
      }

      if (this.buffer.byteLength < capacity) {
        var buffer = new ArrayBuffer(capacity);
        var view = new Uint8Array(buffer);
        view.set(this.view);
        this.buffer = buffer;
        this.view = view;
      }

      return this;
    };
    /**
     * Reverses this ByteBuffer's contents.
     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.reverse = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;

      if (!this.noAssert) {
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      if (begin === end) return this; // Nothing to reverse

      Array.prototype.reverse.call(this.view.subarray(begin, end));
      return this;
    };
    /**
     * Skips the next `length` bytes. This will just advance
     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.
     * @returns {!ByteBuffer} this
     * @expose
     */


    ByteBufferPrototype.skip = function (length) {
      if (!this.noAssert) {
        if (typeof length !== 'number' || length % 1 !== 0) throw TypeError("Illegal length: " + length + " (not an integer)");
        length |= 0;
      }

      var offset = this.offset + length;

      if (!this.noAssert) {
        if (offset < 0 || offset > this.buffer.byteLength) throw RangeError("Illegal length: 0 <= " + this.offset + " + " + length + " <= " + this.buffer.byteLength);
      }

      this.offset = offset;
      return this;
    };
    /**
     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.
     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.
     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}
     * @expose
     */


    ByteBufferPrototype.slice = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;

      if (!this.noAssert) {
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      var bb = this.clone();
      bb.offset = begin;
      bb.limit = end;
      return bb;
    };
    /**
     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if
     *  possible. Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */


    ByteBufferPrototype.toBuffer = function (forceCopy) {
      var offset = this.offset,
          limit = this.limit;

      if (!this.noAssert) {
        if (typeof offset !== 'number' || offset % 1 !== 0) throw TypeError("Illegal offset: Not an integer");
        offset >>>= 0;
        if (typeof limit !== 'number' || limit % 1 !== 0) throw TypeError("Illegal limit: Not an integer");
        limit >>>= 0;
        if (offset < 0 || offset > limit || limit > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + offset + " <= " + limit + " <= " + this.buffer.byteLength);
      } // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is
      // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:


      if (!forceCopy && offset === 0 && limit === this.buffer.byteLength) return this.buffer;
      if (offset === limit) return EMPTY_BUFFER;
      var buffer = new ArrayBuffer(limit - offset);
      new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
      return buffer;
    };
    /**
     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between
     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.
     * @function
     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.
     *  Defaults to `false`
     * @returns {!ArrayBuffer} Contents as an ArrayBuffer
     * @expose
     */


    ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;
    /**
     * Converts the ByteBuffer's contents to a string.
     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows
     *  direct conversion to "utf8", "hex", "base64" and "binary" encoding. "debug" returns a hex representation with
     *  highlighted offsets.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}
     * @returns {string} String representation
     * @throws {Error} If `encoding` is invalid
     * @expose
     */

    ByteBufferPrototype.toString = function (encoding, begin, end) {
      if (typeof encoding === 'undefined') return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
      if (typeof encoding === 'number') encoding = "utf8", begin = encoding, end = begin;

      switch (encoding) {
        case "utf8":
          return this.toUTF8(begin, end);

        case "base64":
          return this.toBase64(begin, end);

        case "hex":
          return this.toHex(begin, end);

        case "binary":
          return this.toBinary(begin, end);

        case "debug":
          return this.toDebug();

        case "columns":
          return this.toColumns();

        default:
          throw Error("Unsupported encoding: " + encoding);
      }
    }; // lxiv-embeddable

    /**
     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/lxiv for details
     */


    var lxiv = function () {
      /**
       * lxiv namespace.
       * @type {!Object.<string,*>}
       * @exports lxiv
       */

      var lxiv = {};
      /**
       * Character codes for output.
       * @type {!Array.<number>}
       * @inner
       */

      var aout = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47];
      /**
       * Character codes for input.
       * @type {!Array.<number>}
       * @inner
       */

      var ain = [];

      for (var i = 0, k = aout.length; i < k; ++i) {
        ain[aout[i]] = i;
      }
      /**
       * Encodes bytes to base64 char codes.
       * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if
       *  there are no more bytes left.
       * @param {!function(number)} dst Characters destination as a function successively called with each encoded char
       *  code.
       */


      lxiv.encode = function (src, dst) {
        var b, t;

        while ((b = src()) !== null) {
          dst(aout[b >> 2 & 0x3f]);
          t = (b & 0x3) << 4;

          if ((b = src()) !== null) {
            t |= b >> 4 & 0xf;
            dst(aout[(t | b >> 4 & 0xf) & 0x3f]);
            t = (b & 0xf) << 2;
            if ((b = src()) !== null) dst(aout[(t | b >> 6 & 0x3) & 0x3f]), dst(aout[b & 0x3f]);else dst(aout[t & 0x3f]), dst(61);
          } else dst(aout[t & 0x3f]), dst(61), dst(61);
        }
      };
      /**
       * Decodes base64 char codes to bytes.
       * @param {!function():number|null} src Characters source as a function returning the next char code respectively
       *  `null` if there are no more characters left.
       * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
       * @throws {Error} If a character code is invalid
       */


      lxiv.decode = function (src, dst) {
        var c, t1, t2;

        function fail(c) {
          throw Error("Illegal character code: " + c);
        }

        while ((c = src()) !== null) {
          t1 = ain[c];
          if (typeof t1 === 'undefined') fail(c);

          if ((c = src()) !== null) {
            t2 = ain[c];
            if (typeof t2 === 'undefined') fail(c);
            dst(t1 << 2 >>> 0 | (t2 & 0x30) >> 4);

            if ((c = src()) !== null) {
              t1 = ain[c];
              if (typeof t1 === 'undefined') if (c === 61) break;else fail(c);
              dst((t2 & 0xf) << 4 >>> 0 | (t1 & 0x3c) >> 2);

              if ((c = src()) !== null) {
                t2 = ain[c];
                if (typeof t2 === 'undefined') if (c === 61) break;else fail(c);
                dst((t1 & 0x3) << 6 >>> 0 | t2);
              }
            }
          }
        }
      };
      /**
       * Tests if a string is valid base64.
       * @param {string} str String to test
       * @returns {boolean} `true` if valid, otherwise `false`
       */


      lxiv.test = function (str) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
      };

      return lxiv;
    }(); // encodings/base64

    /**
     * Encodes this ByteBuffer's contents to a base64 encoded string.
     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.
     * @returns {string} Base64 encoded string
     * @throws {RangeError} If `begin` or `end` is out of bounds
     * @expose
     */


    ByteBufferPrototype.toBase64 = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;
      begin = begin | 0;
      end = end | 0;
      if (begin < 0 || end > this.capacity || begin > end) throw RangeError("begin, end");
      var sd;
      lxiv.encode(function () {
        return begin < end ? this.view[begin++] : null;
      }.bind(this), sd = stringDestination());
      return sd();
    };
    /**
     * Decodes a base64 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */


    ByteBuffer.fromBase64 = function (str, littleEndian) {
      if (typeof str !== 'string') throw TypeError("str");
      var bb = new ByteBuffer(str.length / 4 * 3, littleEndian),
          i = 0;
      lxiv.decode(stringSource(str), function (b) {
        bb.view[i++] = b;
      });
      bb.limit = i;
      return bb;
    };
    /**
     * Encodes a binary string to base64 like `window.btoa` does.
     * @param {string} str Binary string
     * @returns {string} Base64 encoded string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa
     * @expose
     */


    ByteBuffer.btoa = function (str) {
      return ByteBuffer.fromBinary(str).toBase64();
    };
    /**
     * Decodes a base64 encoded string to binary like `window.atob` does.
     * @param {string} b64 Base64 encoded string
     * @returns {string} Binary string
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob
     * @expose
     */


    ByteBuffer.atob = function (b64) {
      return ByteBuffer.fromBase64(b64).toBinary();
    }; // encodings/binary

    /**
     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Binary encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */


    ByteBufferPrototype.toBinary = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;
      begin |= 0;
      end |= 0;
      if (begin < 0 || end > this.capacity() || begin > end) throw RangeError("begin, end");
      if (begin === end) return "";
      var chars = [],
          parts = [];

      while (begin < end) {
        chars.push(this.view[begin++]);
        if (chars.length >= 1024) parts.push(String.fromCharCode.apply(String, chars)), chars = [];
      }

      return parts.join('') + String.fromCharCode.apply(String, chars);
    };
    /**
     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */


    ByteBuffer.fromBinary = function (str, littleEndian) {
      if (typeof str !== 'string') throw TypeError("str");
      var i = 0,
          k = str.length,
          charCode,
          bb = new ByteBuffer(k, littleEndian);

      while (i < k) {
        charCode = str.charCodeAt(i);
        if (charCode > 0xff) throw RangeError("illegal char code: " + charCode);
        bb.view[i++] = charCode;
      }

      bb.limit = k;
      return bb;
    }; // encodings/debug

    /**
     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:
     * * `<` : offset,
     * * `'` : markedOffset,
     * * `>` : limit,
     * * `|` : offset and limit,
     * * `[` : offset and markedOffset,
     * * `]` : markedOffset and limit,
     * * `!` : offset, markedOffset and limit
     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`
     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`
     * @expose
     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`
     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`
     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`
     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`
     */


    ByteBufferPrototype.toDebug = function (columns) {
      var i = -1,
          k = this.buffer.byteLength,
          b,
          hex = "",
          asc = "",
          out = "";

      while (i < k) {
        if (i !== -1) {
          b = this.view[i];
          if (b < 0x10) hex += "0" + b.toString(16).toUpperCase();else hex += b.toString(16).toUpperCase();
          if (columns) asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';
        }

        ++i;

        if (columns) {
          if (i > 0 && i % 16 === 0 && i !== k) {
            while (hex.length < 3 * 16 + 3) {
              hex += " ";
            }

            out += hex + asc + "\n";
            hex = asc = "";
          }
        }

        if (i === this.offset && i === this.limit) hex += i === this.markedOffset ? "!" : "|";else if (i === this.offset) hex += i === this.markedOffset ? "[" : "<";else if (i === this.limit) hex += i === this.markedOffset ? "]" : ">";else hex += i === this.markedOffset ? "'" : columns || i !== 0 && i !== k ? " " : "";
      }

      if (columns && hex !== " ") {
        while (hex.length < 3 * 16 + 3) {
          hex += " ";
        }

        out += hex + asc + "\n";
      }

      return columns ? out : hex;
    };
    /**
     * Decodes a hex encoded string with marked offsets to a ByteBuffer.
     * @param {string} str Debug string to decode (not be generated with `columns = true`)
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     * @see ByteBuffer#toDebug
     */


    ByteBuffer.fromDebug = function (str, littleEndian, noAssert) {
      var k = str.length,
          bb = new ByteBuffer((k + 1) / 3 | 0, littleEndian, noAssert);
      var i = 0,
          j = 0,
          ch,
          b,
          rs = false,
          // Require symbol next
      ho = false,
          hm = false,
          hl = false,
          // Already has offset (ho), markedOffset (hm), limit (hl)?
      fail = false;

      while (i < k) {
        switch (ch = str.charAt(i++)) {
          case '!':
            if (!noAssert) {
              if (ho || hm || hl) {
                fail = true;
                break;
              }

              ho = hm = hl = true;
            }

            bb.offset = bb.markedOffset = bb.limit = j;
            rs = false;
            break;

          case '|':
            if (!noAssert) {
              if (ho || hl) {
                fail = true;
                break;
              }

              ho = hl = true;
            }

            bb.offset = bb.limit = j;
            rs = false;
            break;

          case '[':
            if (!noAssert) {
              if (ho || hm) {
                fail = true;
                break;
              }

              ho = hm = true;
            }

            bb.offset = bb.markedOffset = j;
            rs = false;
            break;

          case '<':
            if (!noAssert) {
              if (ho) {
                fail = true;
                break;
              }

              ho = true;
            }

            bb.offset = j;
            rs = false;
            break;

          case ']':
            if (!noAssert) {
              if (hl || hm) {
                fail = true;
                break;
              }

              hl = hm = true;
            }

            bb.limit = bb.markedOffset = j;
            rs = false;
            break;

          case '>':
            if (!noAssert) {
              if (hl) {
                fail = true;
                break;
              }

              hl = true;
            }

            bb.limit = j;
            rs = false;
            break;

          case "'":
            if (!noAssert) {
              if (hm) {
                fail = true;
                break;
              }

              hm = true;
            }

            bb.markedOffset = j;
            rs = false;
            break;

          case ' ':
            rs = false;
            break;

          default:
            if (!noAssert) {
              if (rs) {
                fail = true;
                break;
              }
            }

            b = parseInt(ch + str.charAt(i++), 16);

            if (!noAssert) {
              if (isNaN(b) || b < 0 || b > 255) throw TypeError("Illegal str: Not a debug encoded string");
            }

            bb.view[j++] = b;
            rs = true;
        }

        if (fail) throw TypeError("Illegal str: Invalid symbol at " + i);
      }

      if (!noAssert) {
        if (!ho || !hl) throw TypeError("Illegal str: Missing offset or limit");
        if (j < bb.buffer.byteLength) throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + j + " < " + k);
      }

      return bb;
    }; // encodings/hex

    /**
     * Encodes this ByteBuffer's contents to a hex encoded string.
     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.
     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.
     * @returns {string} Hex encoded string
     * @expose
     */


    ByteBufferPrototype.toHex = function (begin, end) {
      begin = typeof begin === 'undefined' ? this.offset : begin;
      end = typeof end === 'undefined' ? this.limit : end;

      if (!this.noAssert) {
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      var out = new Array(end - begin),
          b;

      while (begin < end) {
        b = this.view[begin++];
        if (b < 0x10) out.push("0", b.toString(16));else out.push(b.toString(16));
      }

      return out.join('');
    };
    /**
     * Decodes a hex encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */


    ByteBuffer.fromHex = function (str, littleEndian, noAssert) {
      if (!noAssert) {
        if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
        if (str.length % 2 !== 0) throw TypeError("Illegal str: Length not a multiple of 2");
      }

      var k = str.length,
          bb = new ByteBuffer(k / 2 | 0, littleEndian),
          b;

      for (var i = 0, j = 0; i < k; i += 2) {
        b = parseInt(str.substring(i, i + 2), 16);
        if (!noAssert) if (!isFinite(b) || b < 0 || b > 255) throw TypeError("Illegal str: Contains non-hex characters");
        bb.view[j++] = b;
      }

      bb.limit = j;
      return bb;
    }; // utfx-embeddable

    /**
     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>
     * Released under the Apache License, Version 2.0
     * see: https://github.com/dcodeIO/utfx for details
     */


    var utfx = function () {
      /**
       * utfx namespace.
       * @inner
       * @type {!Object.<string,*>}
       */

      var utfx = {};
      /**
       * Maximum valid code point.
       * @type {number}
       * @const
       */

      utfx.MAX_CODEPOINT = 0x10FFFF;
      /**
       * Encodes UTF8 code points to UTF8 bytes.
       * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
       *  respectively `null` if there are no more code points left or a single numeric code point.
       * @param {!function(number)} dst Bytes destination as a function successively called with the next byte
       */

      utfx.encodeUTF8 = function (src, dst) {
        var cp = null;
        if (typeof src === 'number') cp = src, src = function src() {
          return null;
        };

        while (cp !== null || (cp = src()) !== null) {
          if (cp < 0x80) dst(cp & 0x7F);else if (cp < 0x800) dst(cp >> 6 & 0x1F | 0xC0), dst(cp & 0x3F | 0x80);else if (cp < 0x10000) dst(cp >> 12 & 0x0F | 0xE0), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);else dst(cp >> 18 & 0x07 | 0xF0), dst(cp >> 12 & 0x3F | 0x80), dst(cp >> 6 & 0x3F | 0x80), dst(cp & 0x3F | 0x80);
          cp = null;
        }
      };
      /**
       * Decodes UTF8 bytes to UTF8 code points.
       * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
       *  are no more bytes left.
       * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.
       * @throws {RangeError} If a starting byte is invalid in UTF8
       * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the
       *  remaining bytes.
       */


      utfx.decodeUTF8 = function (src, dst) {
        var a,
            b,
            c,
            d,
            fail = function fail(b) {
          b = b.slice(0, b.indexOf(null));
          var err = Error(b.toString());
          err.name = "TruncatedError";
          err['bytes'] = b;
          throw err;
        };

        while ((a = src()) !== null) {
          if ((a & 0x80) === 0) dst(a);else if ((a & 0xE0) === 0xC0) (b = src()) === null && fail([a, b]), dst((a & 0x1F) << 6 | b & 0x3F);else if ((a & 0xF0) === 0xE0) ((b = src()) === null || (c = src()) === null) && fail([a, b, c]), dst((a & 0x0F) << 12 | (b & 0x3F) << 6 | c & 0x3F);else if ((a & 0xF8) === 0xF0) ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([a, b, c, d]), dst((a & 0x07) << 18 | (b & 0x3F) << 12 | (c & 0x3F) << 6 | d & 0x3F);else throw RangeError("Illegal starting byte: " + a);
        }
      };
      /**
       * Converts UTF16 characters to UTF8 code points.
       * @param {!function():number|null} src Characters source as a function returning the next char code respectively
       *  `null` if there are no more characters left.
       * @param {!function(number)} dst Code points destination as a function successively called with each converted code
       *  point.
       */


      utfx.UTF16toUTF8 = function (src, dst) {
        var c1,
            c2 = null;

        while (true) {
          if ((c1 = c2 !== null ? c2 : src()) === null) break;

          if (c1 >= 0xD800 && c1 <= 0xDFFF) {
            if ((c2 = src()) !== null) {
              if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                dst((c1 - 0xD800) * 0x400 + c2 - 0xDC00 + 0x10000);
                c2 = null;
                continue;
              }
            }
          }

          dst(c1);
        }

        if (c2 !== null) dst(c2);
      };
      /**
       * Converts UTF8 code points to UTF16 characters.
       * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point
       *  respectively `null` if there are no more code points left or a single numeric code point.
       * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
       * @throws {RangeError} If a code point is out of range
       */


      utfx.UTF8toUTF16 = function (src, dst) {
        var cp = null;
        if (typeof src === 'number') cp = src, src = function src() {
          return null;
        };

        while (cp !== null || (cp = src()) !== null) {
          if (cp <= 0xFFFF) dst(cp);else cp -= 0x10000, dst((cp >> 10) + 0xD800), dst(cp % 0x400 + 0xDC00);
          cp = null;
        }
      };
      /**
       * Converts and encodes UTF16 characters to UTF8 bytes.
       * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
       *  if there are no more characters left.
       * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
       */


      utfx.encodeUTF16toUTF8 = function (src, dst) {
        utfx.UTF16toUTF8(src, function (cp) {
          utfx.encodeUTF8(cp, dst);
        });
      };
      /**
       * Decodes and converts UTF8 bytes to UTF16 characters.
       * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there
       *  are no more bytes left.
       * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.
       * @throws {RangeError} If a starting byte is invalid in UTF8
       * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.
       */


      utfx.decodeUTF8toUTF16 = function (src, dst) {
        utfx.decodeUTF8(src, function (cp) {
          utfx.UTF8toUTF16(cp, dst);
        });
      };
      /**
       * Calculates the byte length of an UTF8 code point.
       * @param {number} cp UTF8 code point
       * @returns {number} Byte length
       */


      utfx.calculateCodePoint = function (cp) {
        return cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
      };
      /**
       * Calculates the number of UTF8 bytes required to store UTF8 code points.
       * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively
       *  `null` if there are no more code points left.
       * @returns {number} The number of UTF8 bytes required
       */


      utfx.calculateUTF8 = function (src) {
        var cp,
            l = 0;

        while ((cp = src()) !== null) {
          l += cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
        }

        return l;
      };
      /**
       * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.
       * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively
       *  `null` if there are no more characters left.
       * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.
       */


      utfx.calculateUTF16asUTF8 = function (src) {
        var n = 0,
            l = 0;
        utfx.UTF16toUTF8(src, function (cp) {
          ++n;
          l += cp < 0x80 ? 1 : cp < 0x800 ? 2 : cp < 0x10000 ? 3 : 4;
        });
        return [n, l];
      };

      return utfx;
    }(); // encodings/utf8

    /**
     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded
     *  string.
     * @returns {string} Hex encoded string
     * @throws {RangeError} If `offset > limit`
     * @expose
     */


    ByteBufferPrototype.toUTF8 = function (begin, end) {
      if (typeof begin === 'undefined') begin = this.offset;
      if (typeof end === 'undefined') end = this.limit;

      if (!this.noAssert) {
        if (typeof begin !== 'number' || begin % 1 !== 0) throw TypeError("Illegal begin: Not an integer");
        begin >>>= 0;
        if (typeof end !== 'number' || end % 1 !== 0) throw TypeError("Illegal end: Not an integer");
        end >>>= 0;
        if (begin < 0 || begin > end || end > this.buffer.byteLength) throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
      }

      var sd;

      try {
        utfx.decodeUTF8toUTF16(function () {
          return begin < end ? this.view[begin++] : null;
        }.bind(this), sd = stringDestination());
      } catch (e) {
        if (begin !== end) throw RangeError("Illegal range: Truncated data, " + begin + " != " + end);
      }

      return sd();
    };
    /**
     * Decodes an UTF8 encoded string to a ByteBuffer.
     * @param {string} str String to decode
     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to
     *  {@link ByteBuffer.DEFAULT_ENDIAN}.
     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to
     *  {@link ByteBuffer.DEFAULT_NOASSERT}.
     * @returns {!ByteBuffer} ByteBuffer
     * @expose
     */


    ByteBuffer.fromUTF8 = function (str, littleEndian, noAssert) {
      if (!noAssert) if (typeof str !== 'string') throw TypeError("Illegal str: Not a string");
      var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),
          i = 0;
      utfx.encodeUTF16toUTF8(stringSource(str), function (b) {
        bb.view[i++] = b;
      });
      bb.limit = i;
      return bb;
    };

    return ByteBuffer;
  });
});

class Serializer {
  static getBytes(transaction) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var version = transaction.version || 1;

    if (options.acceptLegacyVersion || isSupportedTransactionVersion(version)) {
      if (version === 1) {
        return this.getBytesV1(transaction, options);
      } else {
        return this.serialize(TransactionTypeFactory.create(transaction), options);
      }
    } else {
      throw new TransactionVersionError(version);
    }
  }
  /**
   * Serializes the given transaction according to AIP11.
   */


  static serialize(transaction) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var buffer = new bytebuffer(512, true);
    this.serializeCommon(transaction.data, buffer);
    this.serializeVendorField(transaction, buffer);
    var typeBuffer = transaction.serialize(options).flip();
    buffer.append(typeBuffer);
    this.serializeSignatures(transaction.data, buffer, options);
    var flippedBuffer = buffer.flip().toBuffer();
    transaction.serialized = flippedBuffer;
    return flippedBuffer;
  }
  /**
   * Serializes the given transaction prior to AIP11 (legacy).
   */


  static getBytesV1(transaction) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var assetSize = 0;
    var assetBytes;

    switch (transaction.type) {
      case TransactionType.SecondSignature:
        {
          var {
            signature
          } = transaction.asset;

          var _bb = new bytebuffer(33, true);

          var publicKeyBuffer = Buffer.from(signature.publicKey, "hex");

          for (var byte of publicKeyBuffer) {
            _bb.writeByte(byte);
          }

          _bb.flip();

          assetBytes = new Uint8Array(_bb.toArrayBuffer());
          assetSize = assetBytes.length;
          break;
        }

      case TransactionType.DelegateRegistration:
        {
          assetBytes = Buffer.from(transaction.asset.delegate.username, "utf8");
          assetSize = assetBytes.length;
          break;
        }

      case TransactionType.Vote:
        {
          if (transaction.asset.votes) {
            assetBytes = Buffer.from(transaction.asset.votes.join(""), "utf8");
            assetSize = assetBytes.length;
          }

          break;
        }

      case TransactionType.MultiSignature:
        {
          var keysgroupBuffer = Buffer.from(transaction.asset.multiSignatureLegacy.keysgroup.join(""), "utf8");

          var _bb2 = new bytebuffer(1 + 1 + keysgroupBuffer.length, true);

          _bb2.writeByte(transaction.asset.multiSignatureLegacy.min);

          _bb2.writeByte(transaction.asset.multiSignatureLegacy.lifetime);

          for (var _byte of keysgroupBuffer) {
            _bb2.writeByte(_byte);
          }

          _bb2.flip();

          assetBytes = _bb2.toBuffer();
          assetSize = assetBytes.length;
          break;
        }
    }

    var bb = new bytebuffer(1 + 4 + 32 + 8 + 8 + 21 + 64 + 64 + 64 + assetSize, true);
    bb.writeByte(transaction.type);
    bb.writeInt(transaction.timestamp);
    var senderPublicKeyBuffer = Buffer.from(transaction.senderPublicKey, "hex");

    for (var _byte2 of senderPublicKeyBuffer) {
      bb.writeByte(_byte2);
    } // Apply fix for broken type 1 and 4 transactions, which were
    // erroneously calculated with a recipient id.


    var {
      transactionIdFixTable
    } = configManager.get("exceptions");
    var isBrokenTransaction = transactionIdFixTable && Object.values(transactionIdFixTable).includes(transaction.id);

    if (isBrokenTransaction || transaction.recipientId && transaction.type !== 1 && transaction.type !== 4) {
      var recipientId = transaction.recipientId || Address.fromPublicKey(transaction.senderPublicKey, transaction.network);
      var recipient = Address.toBuffer(recipientId).addressBuffer;

      for (var _byte3 of recipient) {
        bb.writeByte(_byte3);
      }
    } else {
      for (var i = 0; i < 21; i++) {
        bb.writeByte(0);
      }
    }

    if (transaction.vendorField) {
      var vf = Buffer.from(transaction.vendorField);
      var fillstart = vf.length;

      for (var _i = 0; _i < fillstart; _i++) {
        bb.writeByte(vf[_i]);
      }

      for (var _i2 = fillstart; _i2 < 64; _i2++) {
        bb.writeByte(0);
      }
    } else {
      for (var _i3 = 0; _i3 < 64; _i3++) {
        bb.writeByte(0);
      }
    } // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.


    bb.writeInt64(transaction.amount.toString()); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    bb.writeInt64(transaction.fee.toString());

    if (assetSize > 0) {
      for (var _i4 = 0; _i4 < assetSize; _i4++) {
        bb.writeByte(assetBytes[_i4]);
      }
    }

    if (!options.excludeSignature && transaction.signature) {
      var signatureBuffer = Buffer.from(transaction.signature, "hex");

      for (var _byte4 of signatureBuffer) {
        bb.writeByte(_byte4);
      }
    }

    if (!options.excludeSecondSignature && transaction.secondSignature) {
      var signSignatureBuffer = Buffer.from(transaction.secondSignature, "hex");

      for (var _byte5 of signSignatureBuffer) {
        bb.writeByte(_byte5);
      }
    }

    bb.flip();
    var arrayBuffer = new Uint8Array(bb.toArrayBuffer());
    var buffer = [];

    for (var _i5 = 0; _i5 < arrayBuffer.length; _i5++) {
      buffer[_i5] = arrayBuffer[_i5];
    }

    return Buffer.from(buffer);
  }

  static serializeCommon(transaction, buffer) {
    transaction.version = transaction.version || 0x01;

    if (transaction.typeGroup === undefined) {
      transaction.typeGroup = TransactionTypeGroup.Core;
    }

    buffer.writeByte(0xff);
    buffer.writeByte(transaction.version);
    buffer.writeByte(transaction.network || configManager.get("network.pubKeyHash"));

    if (transaction.version === 1) {
      buffer.writeByte(transaction.type);
      buffer.writeUint32(transaction.timestamp);
    } else {
      buffer.writeUint32(transaction.typeGroup);
      buffer.writeUint16(transaction.type); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

      buffer.writeUint64(transaction.nonce.toString());
    }

    buffer.append(transaction.senderPublicKey, "hex"); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    buffer.writeUint64(transaction.fee.toString());
  }

  static serializeVendorField(transaction, buffer) {
    if (transaction.hasVendorField()) {
      var {
        data
      } = transaction;

      if (data.vendorField) {
        var vf = Buffer.from(data.vendorField, "utf8");
        buffer.writeByte(vf.length);
        buffer.append(vf);
      } else {
        buffer.writeByte(0x00);
      }
    } else {
      buffer.writeByte(0x00);
    }
  }

  static serializeSignatures(transaction, buffer) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (transaction.signature && !options.excludeSignature) {
      buffer.append(transaction.signature, "hex");
    }

    var secondSignature = transaction.secondSignature || transaction.signSignature;

    if (secondSignature && !options.excludeSecondSignature) {
      buffer.append(secondSignature, "hex");
    }

    if (transaction.signatures) {
      if (transaction.version === 1 && isException(transaction)) {
        buffer.append("ff", "hex"); // 0xff separator to signal start of multi-signature transactions

        buffer.append(transaction.signatures.join(""), "hex");
      } else if (!options.excludeMultiSignature) {
        buffer.append(transaction.signatures.join(""), "hex");
      }
    }
  }

}

class InternalTransactionType {
  constructor(type, typeGroup) {
    this.type = type;
    this.typeGroup = typeGroup;
  }

  static from(type, typeGroup) {
    if (typeGroup === undefined) {
      typeGroup = TransactionTypeGroup.Core;
    }

    var compositeType = "".concat(typeGroup, "-").concat(type);

    if (!this.types.has(compositeType)) {
      this.types.set(compositeType, new InternalTransactionType(type, typeGroup));
    }

    return this.types.get(compositeType);
  }

  toString() {
    if (this.typeGroup === TransactionTypeGroup.Core) {
      return "Core/".concat(this.type);
    }

    return "".concat(this.typeGroup, "/").concat(this.type);
  }

}
InternalTransactionType.types = new Map();

class TransactionTypeFactory {
  static initialize(transactionTypes) {
    this.transactionTypes = transactionTypes;
  }

  static create(data) {
    var instance = new (this.get(data.type, data.typeGroup))();
    instance.data = data;
    instance.data.version = data.version || 1;
    return instance;
  }

  static get(type, typeGroup) {
    var internalType = InternalTransactionType.from(type, typeGroup);

    if (this.transactionTypes.has(internalType)) {
      return this.transactionTypes.get(internalType);
    }

    throw new UnkownTransactionError(internalType.toString());
  }

}

class Utils {
  static toBytes(data) {
    return Serializer.serialize(TransactionTypeFactory.create(data));
  }

  static toHash(transaction, options) {
    return HashAlgorithms.sha256(Serializer.getBytes(transaction, options));
  }

  static getId(transaction) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var id = Utils.toHash(transaction, options).toString("hex"); // WORKAROUND:
    // A handful of mainnet transactions have an invalid recipient. Due to a
    // refactor of the Address network byte validation it is no longer
    // trivially possible to handle them. If an invalid address is encountered
    // during transfer serialization, the error is bubbled up to defer the
    // `AddressNetworkByteError` until the actual id is available to call
    // `isException`.

    if (options.addressError && !isException({
      id
    })) {
      throw new AddressNetworkError(options.addressError);
    } // Apply fix for broken type 1 and 4 transactions, which were
    // erroneously calculated with a recipient id.


    var {
      transactionIdFixTable
    } = configManager.get("exceptions");

    if (transactionIdFixTable && transactionIdFixTable[id]) {
      return transactionIdFixTable[id];
    }

    return id;
  }

}

class Verifier {
  static verify(data) {
    if (isException(data)) {
      return true;
    }

    if (configManager.getMilestone().aip11 && (!data.version || data.version === 1)) {
      return false;
    }

    return Verifier.verifyHash(data);
  }

  static verifySecondSignature(transaction, publicKey) {
    var secondSignature = transaction.secondSignature || transaction.signSignature;

    if (!secondSignature) {
      return false;
    }

    var hash = Utils.toHash(transaction, {
      excludeSecondSignature: true
    });
    return this.internalVerifySignature(hash, secondSignature, publicKey);
  }

  static verifySignatures(transaction, multiSignature) {
    if (!multiSignature) {
      throw new InvalidMultiSignatureAssetError();
    }

    var {
      publicKeys,
      min
    } = multiSignature;
    var {
      signatures
    } = transaction;
    var hash = Utils.toHash(transaction, {
      excludeSignature: true,
      excludeSecondSignature: true,
      excludeMultiSignature: true
    });
    var publicKeyIndexes = {};
    var verified = false;
    var verifiedSignatures = 0;

    for (var i = 0; i < signatures.length; i++) {
      var signature = signatures[i];
      var publicKeyIndex = parseInt(signature.slice(0, 2), 16);

      if (!publicKeyIndexes[publicKeyIndex]) {
        publicKeyIndexes[publicKeyIndex] = true;
      } else {
        throw new DuplicateParticipantInMultiSignatureError();
      }

      var partialSignature = signature.slice(2, 130);
      var publicKey = publicKeys[publicKeyIndex];

      if (Hash$4.verifySchnorr(hash, partialSignature, publicKey)) {
        verifiedSignatures++;
      }

      if (verifiedSignatures === min) {
        verified = true;
        break;
      } else if (signatures.length - (i + 1 - verifiedSignatures) < min) {
        break;
      }
    }

    return verified;
  }

  static verifyHash(data) {
    var {
      signature,
      senderPublicKey
    } = data;

    if (!signature) {
      return false;
    }

    var hash = Utils.toHash(data, {
      excludeSignature: true,
      excludeSecondSignature: true
    });
    return this.internalVerifySignature(hash, signature, senderPublicKey);
  }

  static verifySchema(data) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var {
      $id
    } = TransactionTypeFactory.get(data.type, data.typeGroup).getSchema();
    return validator.validate(strict ? "".concat($id, "Strict") : "".concat($id), data);
  }

  static internalVerifySignature(hash, signature, publicKey) {
    var isSchnorr = Buffer.from(signature, "hex").byteLength === 64;

    if (isSchnorr) {
      return Hash$4.verifySchnorr(hash, signature, publicKey);
    }

    return Hash$4.verifyECDSA(hash, signature, publicKey);
  }

}

class Transaction {
  get id() {
    return this.data.id;
  }

  get type() {
    return this.data.type;
  }

  get typeGroup() {
    return this.data.typeGroup;
  }

  get verified() {
    return this.isVerified;
  }

  get key() {
    return this.__proto__.constructor.key;
  }

  get staticFee() {
    return this.__proto__.constructor.staticFee({
      data: this.data
    });
  }

  static getSchema() {
    throw new NotImplementedError();
  }

  static staticFee() {
    var feeContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var milestones = configManager.getMilestone(feeContext.height);

    if (milestones.fees && milestones.fees.staticFees) {
      var fee = milestones.fees.staticFees[this.key];

      if (fee !== undefined) {
        return index$5.BigNumber.make(fee);
      }
    }

    return this.defaultStaticFee;
  }

  verify() {
    return Verifier.verify(this.data);
  }

  verifySecondSignature(publicKey) {
    return Verifier.verifySecondSignature(this.data, publicKey);
  }

  verifySchema() {
    return Verifier.verifySchema(this.data);
  }

  toJson() {
    var data = JSON.parse(JSON.stringify(this.data));

    if (data.typeGroup === TransactionTypeGroup.Core) {
      delete data.typeGroup;
    }

    if (data.version === 1) {
      delete data.nonce;
    } else {
      delete data.timestamp;
    }

    return data;
  }

  hasVendorField() {
    return false;
  }

}
Transaction.type = undefined;
Transaction.typeGroup = undefined;
Transaction.key = undefined;
Transaction.defaultStaticFee = index$5.BigNumber.ZERO;

class TransferTransaction extends Transaction {
  static getSchema() {
    return transfer;
  }

  hasVendorField() {
    return true;
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(24, true); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    buffer.writeUint64(data.amount.toString());
    buffer.writeUint32(data.expiration || 0);
    var {
      addressBuffer,
      addressError
    } = Address.toBuffer(data.recipientId);
    options.addressError = addressError;
    buffer.append(addressBuffer);
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    data.amount = index$5.BigNumber.make(buf.readUint64().toString());
    data.expiration = buf.readUint32();
    data.recipientId = Address.fromBuffer(buf.readBytes(21).toBuffer());
  }

}
TransferTransaction.typeGroup = TransactionTypeGroup.Core;
TransferTransaction.type = TransactionType.Transfer;
TransferTransaction.key = "transfer";
TransferTransaction.defaultStaticFee = index$5.BigNumber.make("10000000");

class SecondSignatureRegistrationTransaction extends Transaction {
  static getSchema() {
    return secondSignature;
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(33, true);
    buffer.append(data.asset.signature.publicKey, "hex");
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    data.asset = {
      signature: {
        publicKey: buf.readBytes(33).toString("hex")
      }
    };
  }

}
SecondSignatureRegistrationTransaction.typeGroup = TransactionTypeGroup.Core;
SecondSignatureRegistrationTransaction.type = TransactionType.SecondSignature;
SecondSignatureRegistrationTransaction.key = "secondSignature";
SecondSignatureRegistrationTransaction.defaultStaticFee = index$5.BigNumber.make("500000000");

class DelegateRegistrationTransaction extends Transaction {
  static getSchema() {
    return delegateRegistration;
  }

  serialize(options) {
    var {
      data
    } = this;
    var delegateBytes = Buffer.from(data.asset.delegate.username, "utf8");
    var buffer = new bytebuffer(delegateBytes.length, true);
    buffer.writeByte(delegateBytes.length);
    buffer.append(delegateBytes, "hex");
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var usernamelength = buf.readUint8();
    data.asset = {
      delegate: {
        username: buf.readString(usernamelength)
      }
    };
  }

}
DelegateRegistrationTransaction.typeGroup = TransactionTypeGroup.Core;
DelegateRegistrationTransaction.type = TransactionType.DelegateRegistration;
DelegateRegistrationTransaction.key = "delegateRegistration";
DelegateRegistrationTransaction.defaultStaticFee = index$5.BigNumber.make("2500000000");

class VoteTransaction extends Transaction {
  static getSchema() {
    return vote;
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(24, true);
    var voteBytes = data.asset.votes.map(vote => (vote[0] === "+" ? "01" : "00") + vote.slice(1)).join("");
    buffer.writeByte(data.asset.votes.length);
    buffer.append(voteBytes, "hex");
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var votelength = buf.readUint8();
    data.asset = {
      votes: []
    };

    for (var i = 0; i < votelength; i++) {
      var vote = buf.readBytes(34).toString("hex");
      vote = (vote[1] === "1" ? "+" : "-") + vote.slice(2);
      data.asset.votes.push(vote);
    }
  }

}
VoteTransaction.typeGroup = TransactionTypeGroup.Core;
VoteTransaction.type = TransactionType.Vote;
VoteTransaction.key = "vote";
VoteTransaction.defaultStaticFee = index$5.BigNumber.make("100000000");

class MultiSignatureRegistrationTransaction extends Transaction {
  static getSchema() {
    return multiSignature;
  }

  static staticFee() {
    var feeContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var staticFee = super.staticFee(feeContext);
    var data = feeContext.data;

    if (data) {
      if (data.version === 2) {
        return staticFee.times(data.asset.multiSignature.publicKeys.length + 1);
      } else {
        return staticFee.times(data.asset.multiSignatureLegacy.keysgroup.length + 1);
      }
    }

    return staticFee;
  }

  verify() {
    return isException(this.data) || configManager.getMilestone().aip11 && super.verify();
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer;

    if (data.version === 2) {
      var {
        min,
        publicKeys
      } = data.asset.multiSignature;
      buffer = new bytebuffer(2 + publicKeys.length * 33);
      buffer.writeUint8(min);
      buffer.writeUint8(publicKeys.length);

      for (var publicKey of publicKeys) {
        buffer.append(publicKey, "hex");
      }
    } else {
      // Legacy
      var joined = data.asset.multiSignatureLegacy.keysgroup.map(k => k[0] === "+" ? k.slice(1) : k).join("");
      var keysgroupBuffer = Buffer.from(joined, "hex");
      buffer = new bytebuffer(keysgroupBuffer.length + 3, true);
      buffer.writeByte(data.asset.multiSignatureLegacy.min);
      buffer.writeByte(data.asset.multiSignatureLegacy.keysgroup.length);
      buffer.writeByte(data.asset.multiSignatureLegacy.lifetime);
      buffer.append(keysgroupBuffer, "hex");
    }

    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;

    if (data.version === 2) {
      var multiSignature = {
        publicKeys: [],
        min: 0
      };
      multiSignature.min = buf.readUint8();
      var count = buf.readUint8();

      for (var i = 0; i < count; i++) {
        var publicKey = buf.readBytes(33).toString("hex");
        multiSignature.publicKeys.push(publicKey);
      }

      data.asset = {
        multiSignature
      };
    } else {
      // Legacy
      var multiSignatureLegacy = {
        keysgroup: [],
        lifetime: 0,
        min: 0
      };
      multiSignatureLegacy.min = buf.readUint8();
      var num = buf.readUint8();
      multiSignatureLegacy.lifetime = buf.readUint8();

      for (var index = 0; index < num; index++) {
        var key = buf.readBytes(33).toString("hex");
        multiSignatureLegacy.keysgroup.push(key);
      }

      data.asset = {
        multiSignatureLegacy
      };
    }
  }

}
MultiSignatureRegistrationTransaction.typeGroup = TransactionTypeGroup.Core;
MultiSignatureRegistrationTransaction.type = TransactionType.MultiSignature;
MultiSignatureRegistrationTransaction.key = "multiSignature";
MultiSignatureRegistrationTransaction.defaultStaticFee = index$5.BigNumber.make("500000000");

class IpfsTransaction extends Transaction {
  static getSchema() {
    return ipfs;
  }

  verify() {
    return configManager.getMilestone().aip11 && super.verify();
  }

  serialize(options) {
    var {
      data
    } = this;
    var ipfsBuffer = base58$2.decode(data.asset.ipfs);
    var buffer = new bytebuffer(ipfsBuffer.length, true);
    buffer.append(ipfsBuffer, "hex");
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var hashFunction = buf.readUint8();
    var ipfsHashLength = buf.readUint8();
    var ipfsHash = buf.readBytes(ipfsHashLength).toBuffer();
    var buffer = Buffer.alloc(ipfsHashLength + 2);
    buffer.writeUInt8(hashFunction, 0);
    buffer.writeUInt8(ipfsHashLength, 1);
    buffer.fill(ipfsHash, 2);
    data.asset = {
      ipfs: base58$2.encode(buffer)
    };
  }

}
IpfsTransaction.typeGroup = TransactionTypeGroup.Core;
IpfsTransaction.type = TransactionType.Ipfs;
IpfsTransaction.key = "ipfs";
IpfsTransaction.defaultStaticFee = index$5.BigNumber.make("500000000");

class MultiPaymentTransaction extends Transaction {
  static getSchema() {
    return multiPayment;
  }

  verify() {
    return configManager.getMilestone().aip11 && super.verify();
  }

  hasVendorField() {
    return true;
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(2 + data.asset.payments.length * 29, true);
    buffer.writeUint16(data.asset.payments.length);

    for (var payment of data.asset.payments) {
      // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.
      buffer.writeUint64(payment.amount.toString());
      var {
        addressBuffer,
        addressError
      } = Address.toBuffer(payment.recipientId);
      options.addressError = addressError || options.addressError;
      buffer.append(addressBuffer);
    }

    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var payments = [];
    var total = buf.readUint16();

    for (var j = 0; j < total; j++) {
      payments.push({
        amount: index$5.BigNumber.make(buf.readUint64().toString()),
        recipientId: Address.fromBuffer(buf.readBytes(21).toBuffer())
      });
    }

    data.amount = index$5.BigNumber.ZERO;
    data.asset = {
      payments
    };
  }

}
MultiPaymentTransaction.typeGroup = TransactionTypeGroup.Core;
MultiPaymentTransaction.type = TransactionType.MultiPayment;
MultiPaymentTransaction.key = "multiPayment";
MultiPaymentTransaction.defaultStaticFee = index$5.BigNumber.make("10000000");

class DelegateResignationTransaction extends Transaction {
  static getSchema() {
    return delegateResignation;
  }

  verify() {
    return configManager.getMilestone().aip11 && super.verify();
  }

  serialize(options) {
    return new bytebuffer(0);
  }

  deserialize(buf) {
    return;
  }

}
DelegateResignationTransaction.typeGroup = TransactionTypeGroup.Core;
DelegateResignationTransaction.type = TransactionType.DelegateResignation;
DelegateResignationTransaction.key = "delegateResignation";
DelegateResignationTransaction.defaultStaticFee = index$5.BigNumber.make("2500000000");

class HtlcLockTransaction extends Transaction {
  static getSchema() {
    return htlcLock;
  }

  verify() {
    var milestone = configManager.getMilestone();
    return milestone.aip11 === true && milestone.htlcEnabled === true && super.verify();
  }

  hasVendorField() {
    return true;
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(8 + 32 + 1 + 4 + 21, true); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    buffer.writeUint64(data.amount.toString());
    buffer.append(Buffer.from(data.asset.lock.secretHash, "hex"));
    buffer.writeUint8(data.asset.lock.expiration.type);
    buffer.writeUint32(data.asset.lock.expiration.value);
    buffer.append(Address.toBuffer(data.recipientId).addressBuffer);
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var amount = index$5.BigNumber.make(buf.readUint64().toString());
    var secretHash = buf.readBytes(32).toString("hex");
    var expirationType = buf.readUint8();
    var expirationValue = buf.readUint32();
    var recipientId = Address.fromBuffer(buf.readBytes(21).toBuffer());
    data.amount = amount;
    data.recipientId = recipientId;
    data.asset = {
      lock: {
        secretHash,
        expiration: {
          type: expirationType,
          value: expirationValue
        }
      }
    };
  }

}
HtlcLockTransaction.typeGroup = TransactionTypeGroup.Core;
HtlcLockTransaction.type = TransactionType.HtlcLock;
HtlcLockTransaction.key = "htlcLock";
HtlcLockTransaction.defaultStaticFee = index$5.BigNumber.make("10000000");

class HtlcClaimTransaction extends Transaction {
  static getSchema() {
    return htlcClaim;
  }

  verify() {
    var milestone = configManager.getMilestone();
    return milestone.aip11 === true && milestone.htlcEnabled === true && super.verify();
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(32 + 32, true);
    buffer.append(Buffer.from(data.asset.claim.lockTransactionId, "hex"));
    buffer.append(Buffer.from(data.asset.claim.unlockSecret, "hex"));
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var lockTransactionId = buf.readBytes(32).toString("hex");
    var unlockSecret = buf.readBytes(32).toString("hex");
    data.asset = {
      claim: {
        lockTransactionId,
        unlockSecret
      }
    };
  }

}
HtlcClaimTransaction.typeGroup = TransactionTypeGroup.Core;
HtlcClaimTransaction.type = TransactionType.HtlcClaim;
HtlcClaimTransaction.key = "htlcClaim";
HtlcClaimTransaction.defaultStaticFee = index$5.BigNumber.ZERO;

class HtlcRefundTransaction extends Transaction {
  static getSchema() {
    return htlcRefund;
  }

  verify() {
    var milestone = configManager.getMilestone();
    return milestone.aip11 === true && milestone.htlcEnabled === true && super.verify();
  }

  serialize(options) {
    var {
      data
    } = this;
    var buffer = new bytebuffer(32, true);
    buffer.append(Buffer.from(data.asset.refund.lockTransactionId, "hex"));
    return buffer;
  }

  deserialize(buf) {
    var {
      data
    } = this;
    var lockTransactionId = buf.readBytes(32).toString("hex");
    data.asset = {
      refund: {
        lockTransactionId
      }
    };
  }

}
HtlcRefundTransaction.typeGroup = TransactionTypeGroup.Core;
HtlcRefundTransaction.type = TransactionType.HtlcRefund;
HtlcRefundTransaction.key = "htlcRefund";
HtlcRefundTransaction.defaultStaticFee = index$5.BigNumber.ZERO;

class Signer {
  static sign(transaction, keys, options) {
    options = options || {
      excludeSignature: true,
      excludeSecondSignature: true
    };
    var hash = Utils.toHash(transaction, options);
    var signature = transaction.version > 1 ? Hash$4.signSchnorr(hash, keys) : Hash$4.signECDSA(hash, keys);

    if (!transaction.signature && !options.excludeMultiSignature) {
      transaction.signature = signature;
    }

    return signature;
  }

  static secondSign(transaction, keys) {
    var hash = Utils.toHash(transaction, {
      excludeSecondSignature: true
    });
    var signature = transaction.version > 1 ? Hash$4.signSchnorr(hash, keys) : Hash$4.signECDSA(hash, keys);

    if (!transaction.secondSignature) {
      transaction.secondSignature = signature;
    }

    return signature;
  }

  static multiSign(transaction, keys) {
    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

    if (!transaction.signatures) {
      transaction.signatures = [];
    }

    index = index === -1 ? transaction.signatures.length : index;
    var hash = Utils.toHash(transaction, {
      excludeSignature: true,
      excludeSecondSignature: true,
      excludeMultiSignature: true
    });
    var signature = Hash$4.signSchnorr(hash, keys);
    var indexedSignature = "".concat(numberToHex$1(index)).concat(signature);
    transaction.signatures.push(indexedSignature);
    return indexedSignature;
  }

}

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class TransactionBuilder {
  constructor() {
    this.signWithSenderAsRecipient = false;
    this.data = {
      id: undefined,
      timestamp: Slots.getTime(),
      typeGroup: TransactionTypeGroup.Test,
      nonce: index$5.BigNumber.ZERO,
      version: configManager.getMilestone().aip11 ? 0x02 : 0x01
    };
  }

  build() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return TransactionFactory.fromData(_objectSpread$2(_objectSpread$2({}, this.data), data), false);
  }

  version(version) {
    this.data.version = version;
    return this.instance();
  }

  typeGroup(typeGroup) {
    this.data.typeGroup = typeGroup;
    return this.instance();
  }

  nonce(nonce) {
    if (nonce) {
      this.data.nonce = index$5.BigNumber.make(nonce);
    }

    return this.instance();
  }

  network(network) {
    this.data.network = network;
    return this.instance();
  }

  fee(fee) {
    if (fee) {
      this.data.fee = index$5.BigNumber.make(fee);
    }

    return this.instance();
  }

  amount(amount) {
    this.data.amount = index$5.BigNumber.make(amount);
    return this.instance();
  }

  recipientId(recipientId) {
    this.data.recipientId = recipientId;
    return this.instance();
  }

  senderPublicKey(publicKey) {
    this.data.senderPublicKey = publicKey;
    return this.instance();
  }

  vendorField(vendorField) {
    var limit = maxVendorFieldLength();

    if (vendorField) {
      if (Buffer.from(vendorField).length > limit) {
        throw new VendorFieldLengthExceededError(limit);
      }

      this.data.vendorField = vendorField;
    }

    return this.instance();
  }

  sign(passphrase) {
    var keys = Keys.fromPassphrase(passphrase);
    return this.signWithKeyPair(keys);
  }

  signWithWif(wif, networkWif) {
    var keys = Keys.fromWIF(wif, {
      wif: networkWif || configManager.get("network.wif")
    });
    return this.signWithKeyPair(keys);
  }

  secondSign(secondPassphrase) {
    return this.secondSignWithKeyPair(Keys.fromPassphrase(secondPassphrase));
  }

  secondSignWithWif(wif, networkWif) {
    var keys = Keys.fromWIF(wif, {
      wif: networkWif || configManager.get("network.wif")
    });
    return this.secondSignWithKeyPair(keys);
  }

  multiSign(passphrase, index) {
    var keys = Keys.fromPassphrase(passphrase);
    return this.multiSignWithKeyPair(index, keys);
  }

  multiSignWithWif(index, wif, networkWif) {
    var keys = Keys.fromWIF(wif, {
      wif: networkWif || configManager.get("network.wif")
    });
    return this.multiSignWithKeyPair(index, keys);
  }

  verify() {
    return Verifier.verifyHash(this.data);
  }

  getStruct() {
    if (!this.data.senderPublicKey || !this.data.signature && !this.data.signatures) {
      throw new MissingTransactionSignatureError();
    }

    var struct = {
      id: Utils.getId(this.data).toString(),
      signature: this.data.signature,
      secondSignature: this.data.secondSignature,
      version: this.data.version,
      type: this.data.type,
      fee: this.data.fee,
      senderPublicKey: this.data.senderPublicKey,
      network: this.data.network
    };

    if (this.data.version === 1) {
      struct.timestamp = this.data.timestamp;
    } else {
      struct.typeGroup = this.data.typeGroup;
      struct.nonce = this.data.nonce;
    }

    if (Array.isArray(this.data.signatures)) {
      struct.signatures = this.data.signatures;
    }

    return struct;
  }

  signWithKeyPair(keys) {
    this.data.senderPublicKey = keys.publicKey;

    if (this.signWithSenderAsRecipient) {
      this.data.recipientId = Address.fromPublicKey(keys.publicKey, this.data.network);
    }

    this.data.signature = Signer.sign(this.getSigningObject(), keys);
    return this.instance();
  }

  secondSignWithKeyPair(keys) {
    this.data.secondSignature = Signer.secondSign(this.getSigningObject(), keys);
    return this.instance();
  }

  multiSignWithKeyPair(index, keys) {
    if (!this.data.signatures) {
      this.data.signatures = [];
    }

    this.version(2);
    Signer.multiSign(this.getSigningObject(), keys, index);
    return this.instance();
  }

  getSigningObject() {
    var data = _objectSpread$2({}, this.data);

    for (var key of Object.keys(data)) {
      if (["model", "network", "id"].includes(key)) {
        delete data[key];
      }
    }

    return data;
  }

}

class DelegateRegistrationBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = DelegateRegistrationTransaction.type;
    this.data.typeGroup = DelegateRegistrationTransaction.typeGroup;
    this.data.fee = DelegateRegistrationTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.recipientId = undefined;
    this.data.senderPublicKey = undefined;
    this.data.asset = {
      delegate: {}
    };
  }

  usernameAsset(username) {
    this.data.asset.delegate.username = username;
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.recipientId = this.data.recipientId;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class DelegateResignationBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = DelegateResignationTransaction.type;
    this.data.typeGroup = DelegateResignationTransaction.typeGroup;
    this.data.version = 2;
    this.data.fee = DelegateResignationTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.senderPublicKey = undefined;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    return struct;
  }

  instance() {
    return this;
  }

}

class HtlcClaimBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = HtlcClaimTransaction.type;
    this.data.typeGroup = HtlcClaimTransaction.typeGroup;
    this.data.fee = HtlcClaimTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.asset = {};
  }

  htlcClaimAsset(claimAsset) {
    this.data.asset = {
      claim: claimAsset
    };
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class HtlcLockBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = HtlcLockTransaction.type;
    this.data.typeGroup = HtlcLockTransaction.typeGroup;
    this.data.recipientId = undefined;
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.fee = HtlcLockTransaction.staticFee();
    this.data.vendorField = undefined;
    this.data.asset = {};
  }

  htlcLockAsset(lockAsset) {
    this.data.asset = {
      lock: lockAsset
    };
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.recipientId = this.data.recipientId;
    struct.amount = this.data.amount;
    struct.vendorField = this.data.vendorField;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class HtlcRefundBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = HtlcRefundTransaction.type;
    this.data.typeGroup = HtlcRefundTransaction.typeGroup;
    this.data.fee = HtlcRefundTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.asset = {};
  }

  htlcRefundAsset(refundAsset) {
    this.data.asset = {
      refund: refundAsset
    };
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class IPFSBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = IpfsTransaction.type;
    this.data.typeGroup = IpfsTransaction.typeGroup;
    this.data.fee = IpfsTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.asset = {};
  }

  ipfsAsset(ipfsId) {
    this.data.asset = {
      ipfs: ipfsId
    };
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class MultiPaymentBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = MultiPaymentTransaction.type;
    this.data.typeGroup = MultiPaymentTransaction.typeGroup;
    this.data.fee = MultiPaymentTransaction.staticFee();
    this.data.vendorField = undefined;
    this.data.asset = {
      payments: []
    };
    this.data.amount = index$5.BigNumber.make(0);
  }

  addPayment(recipientId, amount) {
    var limit = configManager.getMilestone().multiPaymentLimit || 500;

    if (this.data.asset.payments.length >= limit) {
      throw new MaximumPaymentCountExceededError(limit);
    }

    this.data.asset.payments.push({
      amount: index$5.BigNumber.make(amount),
      recipientId
    });
    return this;
  }

  getStruct() {
    if (!this.data.asset.payments || !Array.isArray(this.data.asset.payments) || this.data.asset.payments.length <= 1) {
      throw new MinimumPaymentCountSubceededError();
    }

    var struct = super.getStruct();
    struct.senderPublicKey = this.data.senderPublicKey;
    struct.vendorField = this.data.vendorField;
    struct.amount = this.data.amount;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class MultiSignatureBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = MultiSignatureRegistrationTransaction.type;
    this.data.typeGroup = MultiSignatureRegistrationTransaction.typeGroup;
    this.data.version = 2;
    this.data.fee = index$5.BigNumber.ZERO;
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.recipientId = undefined;
    this.data.senderPublicKey = undefined;
    this.data.asset = {
      multiSignature: {
        min: 0,
        publicKeys: []
      }
    };
  }

  participant(publicKey) {
    var {
      publicKeys
    } = this.data.asset.multiSignature;

    if (publicKeys.length <= 16) {
      publicKeys.push(publicKey);
      this.data.fee = MultiSignatureRegistrationTransaction.staticFee({
        data: this.data
      });
    }

    return this;
  }

  min(min) {
    this.data.asset.multiSignature.min = min;
    return this;
  }

  multiSignatureAsset(multiSignature) {
    this.data.asset.multiSignature = multiSignature;
    this.data.fee = MultiSignatureRegistrationTransaction.staticFee({
      data: this.data
    });
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.recipientId = this.data.recipientId;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class SecondSignatureBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = SecondSignatureRegistrationTransaction.type;
    this.data.typeGroup = SecondSignatureRegistrationTransaction.typeGroup;
    this.data.fee = SecondSignatureRegistrationTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.recipientId = undefined;
    this.data.senderPublicKey = undefined;
    this.data.asset = {
      signature: {}
    };
  }

  signatureAsset(secondPassphrase) {
    this.data.asset.signature.publicKey = Keys.fromPassphrase(secondPassphrase).publicKey;
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.recipientId = this.data.recipientId;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class TransferBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = TransferTransaction.type;
    this.data.typeGroup = TransferTransaction.typeGroup;
    this.data.fee = TransferTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.recipientId = undefined;
    this.data.senderPublicKey = undefined;
    this.data.expiration = 0;
  }

  expiration(expiration) {
    this.data.expiration = expiration;
    return this.instance();
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.recipientId = this.data.recipientId;
    struct.asset = this.data.asset;
    struct.vendorField = this.data.vendorField;
    struct.expiration = this.data.expiration;
    return struct;
  }

  instance() {
    return this;
  }

}

class VoteBuilder extends TransactionBuilder {
  constructor() {
    super();
    this.data.type = VoteTransaction.type;
    this.data.typeGroup = VoteTransaction.typeGroup;
    this.data.fee = VoteTransaction.staticFee();
    this.data.amount = index$5.BigNumber.ZERO;
    this.data.recipientId = undefined;
    this.data.senderPublicKey = undefined;
    this.data.asset = {
      votes: []
    };
    this.signWithSenderAsRecipient = true;
  }

  votesAsset(votes) {
    this.data.asset.votes = votes;
    return this;
  }

  getStruct() {
    var struct = super.getStruct();
    struct.amount = this.data.amount;
    struct.recipientId = this.data.recipientId;
    struct.asset = this.data.asset;
    return struct;
  }

  instance() {
    return this;
  }

}

class BuilderFactory {
  static transfer() {
    return new TransferBuilder();
  }

  static secondSignature() {
    return new SecondSignatureBuilder();
  }

  static delegateRegistration() {
    return new DelegateRegistrationBuilder();
  }

  static vote() {
    return new VoteBuilder();
  }

  static multiSignature() {
    return new MultiSignatureBuilder();
  }

  static ipfs() {
    return new IPFSBuilder();
  }

  static multiPayment() {
    return new MultiPaymentBuilder();
  }

  static delegateResignation() {
    return new DelegateResignationBuilder();
  }

  static htlcLock() {
    return new HtlcLockBuilder();
  }

  static htlcClaim() {
    return new HtlcClaimBuilder();
  }

  static htlcRefund() {
    return new HtlcRefundBuilder();
  }

}

class Deserializer {
  static deserialize(serialized) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var data = {};
    var buffer = this.getByteBuffer(serialized);
    this.deserializeCommon(data, buffer);
    var instance = TransactionTypeFactory.create(data);
    this.deserializeVendorField(instance, buffer); // Deserialize type specific parts

    instance.deserialize(buffer);
    this.deserializeSignatures(data, buffer);

    if (options.acceptLegacyVersion || isSupportedTransactionVersion(data.version)) {
      if (data.version === 1) {
        this.applyV1Compatibility(data);
      }
    } else {
      throw new TransactionVersionError(data.version);
    }

    instance.serialized = buffer.flip().toBuffer();
    return instance;
  }

  static deserializeCommon(transaction, buf) {
    buf.skip(1); // Skip 0xFF marker

    transaction.version = buf.readUint8();
    transaction.network = buf.readUint8();

    if (transaction.version === 1) {
      transaction.type = buf.readUint8();
      transaction.timestamp = buf.readUint32();
    } else {
      transaction.typeGroup = buf.readUint32();
      transaction.type = buf.readUint16();
      transaction.nonce = index$5.BigNumber.make(buf.readUint64().toString());
    }

    transaction.senderPublicKey = buf.readBytes(33).toString("hex");
    transaction.fee = index$5.BigNumber.make(buf.readUint64().toString());
    transaction.amount = index$5.BigNumber.ZERO;
  }

  static deserializeVendorField(transaction, buf) {
    var vendorFieldLength = buf.readUint8();

    if (vendorFieldLength > 0) {
      if (transaction.hasVendorField()) {
        var vendorFieldBuffer = buf.readBytes(vendorFieldLength).toBuffer();
        transaction.data.vendorField = vendorFieldBuffer.toString("utf8");
      } else {
        buf.skip(vendorFieldLength);
      }
    }
  }

  static deserializeSignatures(transaction, buf) {
    if (transaction.version === 1) {
      this.deserializeECDSA(transaction, buf);
    } else {
      this.deserializeSchnorrOrECDSA(transaction, buf);
    }
  }

  static deserializeSchnorrOrECDSA(transaction, buf) {
    if (this.detectSchnorr(buf)) {
      this.deserializeSchnorr(transaction, buf);
    } else {
      this.deserializeECDSA(transaction, buf);
    }
  }

  static deserializeECDSA(transaction, buf) {
    var currentSignatureLength = () => {
      buf.mark();
      var lengthHex = buf.skip(1).readBytes(1).toString("hex");
      buf.reset();
      return parseInt(lengthHex, 16) + 2;
    }; // Signature


    if (buf.remaining()) {
      var signatureLength = currentSignatureLength();
      transaction.signature = buf.readBytes(signatureLength).toString("hex");
    }

    var beginningMultiSignature = () => {
      buf.mark();
      var marker = buf.readUint8();
      buf.reset();
      return marker === 255;
    }; // Second Signature


    if (buf.remaining() && !beginningMultiSignature()) {
      var secondSignatureLength = currentSignatureLength();
      transaction.secondSignature = buf.readBytes(secondSignatureLength).toString("hex");
    } // Multi Signatures


    if (buf.remaining() && beginningMultiSignature()) {
      buf.skip(1);
      var multiSignature = buf.readBytes(buf.limit - buf.offset).toString("hex");
      transaction.signatures = [multiSignature];
    }

    if (buf.remaining()) {
      throw new InvalidTransactionBytesError("signature buffer not exhausted");
    }
  }

  static deserializeSchnorr(transaction, buf) {
    var canReadNonMultiSignature = () => {
      return buf.remaining() && (buf.remaining() % 64 === 0 || buf.remaining() % 65 !== 0);
    };

    if (canReadNonMultiSignature()) {
      transaction.signature = buf.readBytes(64).toString("hex");
    }

    if (canReadNonMultiSignature()) {
      transaction.secondSignature = buf.readBytes(64).toString("hex");
    }

    if (buf.remaining()) {
      if (buf.remaining() % 65 === 0) {
        transaction.signatures = [];
        var count = buf.remaining() / 65;
        var publicKeyIndexes = {};

        for (var i = 0; i < count; i++) {
          var multiSignaturePart = buf.readBytes(65).toString("hex");
          var publicKeyIndex = parseInt(multiSignaturePart.slice(0, 2), 16);

          if (!publicKeyIndexes[publicKeyIndex]) {
            publicKeyIndexes[publicKeyIndex] = true;
          } else {
            throw new DuplicateParticipantInMultiSignatureError();
          }

          transaction.signatures.push(multiSignaturePart);
        }
      } else {
        throw new InvalidTransactionBytesError("signature buffer not exhausted");
      }
    }
  }

  static detectSchnorr(buf) {
    var remaining = buf.remaining(); // `signature` / `secondSignature`

    if (remaining === 64 || remaining === 128) {
      return true;
    } // `signatures` of a multi signature transaction (type != 4)


    if (remaining % 65 === 0) {
      return true;
    } // only possiblity left is a type 4 transaction with and without a `secondSignature`.


    if ((remaining - 64) % 65 === 0 || (remaining - 128) % 65 === 0) {
      return true;
    }

    return false;
  } // tslint:disable-next-line:member-ordering


  static applyV1Compatibility(transaction) {
    transaction.secondSignature = transaction.secondSignature || transaction.signSignature;
    transaction.typeGroup = TransactionTypeGroup.Core;

    if (transaction.type === TransactionType.Vote) {
      transaction.recipientId = Address.fromPublicKey(transaction.senderPublicKey, transaction.network);
    } else if (transaction.type === TransactionType.MultiSignature) {
      transaction.asset.multiSignatureLegacy.keysgroup = transaction.asset.multiSignatureLegacy.keysgroup.map(k => k.startsWith("+") ? k : "+".concat(k));
    }
  }

  static getByteBuffer(serialized) {
    if (!(serialized instanceof Buffer)) {
      serialized = Buffer.from(serialized, "hex");
    }

    var buffer = new bytebuffer(serialized.length, true);
    buffer.append(serialized);
    buffer.reset();
    return buffer;
  }

}

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class TransactionFactory {
  static fromHex(hex) {
    return this.fromSerialized(hex);
  }

  static fromBytes(buffer) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return this.fromSerialized(buffer ? buffer.toString("hex") : undefined, strict);
  }
  /**
   * Deserializes a transaction from `buffer` with the given `id`. It is faster
   * than `fromBytes` at the cost of vital safety checks (validation, verification and id calculation).
   *
   * NOTE: Only use this internally when it is safe to assume the buffer has already been
   * verified.
   */


  static fromBytesUnsafe(buffer, id) {
    try {
      var options = {
        acceptLegacyVersion: true
      };
      var transaction = Deserializer.deserialize(buffer, options);
      transaction.data.id = id || Utils.getId(transaction.data, options);
      transaction.isVerified = true;
      return transaction;
    } catch (error) {
      throw new InvalidTransactionBytesError(error.message);
    }
  }

  static fromJson(json) {
    var data = _objectSpread$3({}, json);

    data.amount = index$5.BigNumber.make(data.amount);
    data.fee = index$5.BigNumber.make(data.fee);
    return this.fromData(data);
  }

  static fromData(data) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var {
      value,
      error
    } = Verifier.verifySchema(data, strict);

    if (error && !isException(value)) {
      throw new TransactionSchemaError(error);
    }

    var transaction = TransactionTypeFactory.create(value);
    var {
      version
    } = transaction.data;

    if (version === 1) {
      Deserializer.applyV1Compatibility(transaction.data);
    }

    Serializer.serialize(transaction);
    return this.fromBytes(transaction.serialized, strict);
  }

  static fromSerialized(serialized) {
    var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    try {
      var transaction = Deserializer.deserialize(serialized);
      transaction.data.id = Utils.getId(transaction.data);
      var {
        value,
        error
      } = Verifier.verifySchema(transaction.data, strict);

      if (error && !isException(value)) {
        throw new TransactionSchemaError(error);
      }

      transaction.isVerified = transaction.verify();
      return transaction;
    } catch (error) {
      if (error instanceof TransactionVersionError || error instanceof TransactionSchemaError || error instanceof DuplicateParticipantInMultiSignatureError) {
        throw error;
      }

      throw new InvalidTransactionBytesError(error.message);
    }
  }

}

class TransactionRegistry {
  constructor() {
    this.transactionTypes = new Map();
    TransactionTypeFactory.initialize(this.transactionTypes);
    this.registerTransactionType(TransferTransaction);
    this.registerTransactionType(SecondSignatureRegistrationTransaction);
    this.registerTransactionType(DelegateRegistrationTransaction);
    this.registerTransactionType(VoteTransaction);
    this.registerTransactionType(MultiSignatureRegistrationTransaction);
    this.registerTransactionType(IpfsTransaction);
    this.registerTransactionType(MultiPaymentTransaction);
    this.registerTransactionType(DelegateResignationTransaction);
    this.registerTransactionType(HtlcLockTransaction);
    this.registerTransactionType(HtlcClaimTransaction);
    this.registerTransactionType(HtlcRefundTransaction); // registering multisignature legacy schema separate after splitting the main
    // multisignature schema into current implementation and legacy

    validator.extendTransaction(multiSignatureLegacy, false);
  }

  registerTransactionType(constructor) {
    var {
      typeGroup,
      type
    } = constructor;
    var internalType = InternalTransactionType.from(type, typeGroup);

    if (this.transactionTypes.has(internalType)) {
      throw new TransactionAlreadyRegisteredError(constructor.name);
    }

    if (Array.from(this.transactionTypes.values()).some((_ref) => {
      var {
        key
      } = _ref;
      return key === constructor.key;
    })) {
      throw new TransactionKeyAlreadyRegisteredError(constructor.key);
    }

    this.transactionTypes.set(internalType, constructor);
    this.updateSchemas(constructor);
  }

  deregisterTransactionType(constructor) {
    var {
      typeGroup,
      type
    } = constructor;
    var internalType = InternalTransactionType.from(type, typeGroup);

    if (!this.transactionTypes.has(internalType)) {
      throw new UnkownTransactionError(internalType.toString());
    }

    if (typeGroup === TransactionTypeGroup.Core) {
      throw new CoreTransactionTypeGroupImmutableError();
    }

    var schema = this.transactionTypes.get(internalType);
    this.updateSchemas(schema, true);
    this.transactionTypes.delete(internalType);
  }

  updateSchemas(transaction, remove) {
    validator.extendTransaction(transaction.getSchema(), remove);
  }

}

var transactionRegistry = new TransactionRegistry();

var index$8 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  TransactionRegistry: transactionRegistry,
  TransactionBuilder: TransactionBuilder,
  BuilderFactory: BuilderFactory,
  Deserializer: Deserializer,
  TransactionFactory: TransactionFactory,
  Serializer: Serializer,
  Signer: Signer,
  Transaction: Transaction,
  TransferTransaction: TransferTransaction,
  SecondSignatureRegistrationTransaction: SecondSignatureRegistrationTransaction,
  DelegateRegistrationTransaction: DelegateRegistrationTransaction,
  VoteTransaction: VoteTransaction,
  MultiSignatureRegistrationTransaction: MultiSignatureRegistrationTransaction,
  IpfsTransaction: IpfsTransaction,
  MultiPaymentTransaction: MultiPaymentTransaction,
  DelegateResignationTransaction: DelegateResignationTransaction,
  HtlcLockTransaction: HtlcLockTransaction,
  HtlcClaimTransaction: HtlcClaimTransaction,
  HtlcRefundTransaction: HtlcRefundTransaction,
  TransactionTypeFactory: TransactionTypeFactory,
  InternalTransactionType: InternalTransactionType,
  schemas: schemas,
  Utils: Utils,
  Verifier: Verifier
});

class Deserializer$1 {
  static deserialize(serializedHex) {
    var headerOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var block = {};
    var transactions = [];
    var buffer = Buffer.from(serializedHex, "hex");
    var buf = new bytebuffer(buffer.length, true);
    buf.append(buffer);
    buf.reset();
    this.deserializeHeader(block, buf);
    headerOnly = headerOnly || buf.remaining() === 0;

    if (!headerOnly) {
      transactions = this.deserializeTransactions(block, buf, options.deserializeTransactionsUnchecked);
    }

    block.idHex = Block.getIdHex(block);
    block.id = Block.getId(block);
    var {
      outlookTable
    } = configManager.get("exceptions");

    if (outlookTable && outlookTable[block.id]) {
      var constants = configManager.getMilestone(block.height);

      if (constants.block.idFullSha256) {
        block.id = outlookTable[block.id];
        block.idHex = block.id;
      } else {
        block.id = outlookTable[block.id];
        block.idHex = Block.toBytesHex(block.id);
      }
    }

    return {
      data: block,
      transactions
    };
  }

  static deserializeHeader(block, buf) {
    block.version = buf.readUint32();
    block.timestamp = buf.readUint32();
    block.height = buf.readUint32();
    var constants = configManager.getMilestone(block.height - 1 || 1);

    if (constants.block.idFullSha256) {
      block.previousBlockHex = buf.readBytes(32).toString("hex");
      block.previousBlock = block.previousBlockHex;
    } else {
      block.previousBlockHex = buf.readBytes(8).toString("hex");
      block.previousBlock = index$5.BigNumber.make("0x".concat(block.previousBlockHex)).toString();
    }

    block.numberOfTransactions = buf.readUint32();
    block.totalAmount = index$5.BigNumber.make(buf.readUint64().toString());
    block.totalFee = index$5.BigNumber.make(buf.readUint64().toString());
    block.reward = index$5.BigNumber.make(buf.readUint64().toString());
    block.payloadLength = buf.readUint32();
    block.payloadHash = buf.readBytes(32).toString("hex");
    block.generatorPublicKey = buf.readBytes(33).toString("hex");

    var signatureLength = () => {
      buf.mark();
      var lengthHex = buf.skip(1).readBytes(1).toString("hex");
      buf.reset();
      return parseInt(lengthHex, 16) + 2;
    };

    block.blockSignature = buf.readBytes(signatureLength()).toString("hex");
  }

  static deserializeTransactions(block, buf) {
    var deserializeTransactionsUnchecked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var transactionLengths = [];

    for (var i = 0; i < block.numberOfTransactions; i++) {
      transactionLengths.push(buf.readUint32());
    }

    var transactions = [];
    block.transactions = [];

    for (var length of transactionLengths) {
      var transactionBytes = buf.readBytes(length).toBuffer();
      var transaction = deserializeTransactionsUnchecked ? TransactionFactory.fromBytesUnsafe(transactionBytes) : TransactionFactory.fromBytes(transactionBytes);
      transactions.push(transaction);
      block.transactions.push(transaction.data);
    }

    return transactions;
  }

}

class Serializer$1 {
  static size(block) {
    var size = this.headerSize(block.data) + block.data.blockSignature.length / 2;

    for (var transaction of block.transactions) {
      size += 4
      /* tx length */
      + transaction.serialized.length;
    }

    return size;
  }

  static serializeWithTransactions(block) {
    var transactions = block.transactions || [];
    block.numberOfTransactions = block.numberOfTransactions || transactions.length;
    var serializedHeader = this.serialize(block);
    var buffer = new bytebuffer(serializedHeader.length + transactions.length * 4, true).append(serializedHeader).skip(transactions.length * 4);

    for (var i = 0; i < transactions.length; i++) {
      var serialized = Utils.toBytes(transactions[i]);
      buffer.writeUint32(serialized.length, serializedHeader.length + i * 4);
      buffer.append(serialized);
    }

    return buffer.flip().toBuffer();
  }

  static serialize(block) {
    var includeSignature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var buffer = new bytebuffer(512, true);
    this.serializeHeader(block, buffer);

    if (includeSignature) {
      this.serializeSignature(block, buffer);
    }

    return buffer.flip().toBuffer();
  }

  static headerSize(block) {
    var constants = configManager.getMilestone(block.height - 1 || 1);
    return 4 + // version
    4 + // timestamp
    4 + ( // height
    constants.block.idFullSha256 ? 32 : 8) + // previousBlock
    4 + // numberOfTransactions
    8 + // totalAmount
    8 + // totalFee
    8 + // reward
    4 + // payloadLength
    block.payloadHash.length / 2 + block.generatorPublicKey.length / 2;
  }

  static serializeHeader(block, buffer) {
    var constants = configManager.getMilestone(block.height - 1 || 1);

    if (constants.block.idFullSha256) {
      if (block.previousBlock.length !== 64) {
        throw new PreviousBlockIdFormatError(block.height, block.previousBlock);
      }

      block.previousBlockHex = block.previousBlock;
    } else {
      block.previousBlockHex = Block.toBytesHex(block.previousBlock);
    }

    buffer.writeUint32(block.version);
    buffer.writeUint32(block.timestamp);
    buffer.writeUint32(block.height);
    buffer.append(block.previousBlockHex, "hex");
    buffer.writeUint32(block.numberOfTransactions); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    buffer.writeUint64(block.totalAmount.toString()); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    buffer.writeUint64(block.totalFee.toString()); // @ts-ignore - The ByteBuffer types say we can't use strings but the code actually handles them.

    buffer.writeUint64(block.reward.toString());
    buffer.writeUint32(block.payloadLength);
    buffer.append(block.payloadHash, "hex");
    buffer.append(block.generatorPublicKey, "hex");
    assert.strictEqual(buffer.offset, this.headerSize(block));
  }

  static serializeSignature(block, buffer) {
    if (block.blockSignature) {
      buffer.append(block.blockSignature, "hex");
    }
  }

}

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class Block {
  constructor(_ref) {
    var {
      data,
      transactions,
      id
    } = _ref;
    this.data = data; // TODO genesis block calculated id is wrong for some reason

    if (this.data.height === 1) {
      this.applyGenesisBlockFix(id || data.id);
    } // fix on real timestamp, this is overloading transaction
    // timestamp with block timestamp for storage only
    // also add sequence to keep database sequence


    this.transactions = transactions.map((transaction, index) => {
      transaction.data.blockId = this.data.id;
      transaction.timestamp = this.data.timestamp;
      transaction.data.sequence = index;
      return transaction;
    });
    delete this.data.transactions;
    this.verification = this.verify(); // Order of transactions messed up in mainnet V1

    var {
      wrongTransactionOrder
    } = configManager.get("exceptions");

    if (wrongTransactionOrder && wrongTransactionOrder[this.data.id]) {
      var fixedOrderIds = wrongTransactionOrder[this.data.id];
      this.transactions = fixedOrderIds.map(id => this.transactions.find(transaction => transaction.id === id));
    }
  }

  static applySchema(data) {
    var result = validator.validate("block", data);

    if (!result.error) {
      return result.value;
    }

    result = validator.validateException("block", data);

    for (var err of result.errors) {
      var fatal = false;
      var match = err.dataPath.match(/\.transactions\[([0-9]+)\]/);

      if (match === null) {
        if (!isException(data)) {
          fatal = true;
        }
      } else {
        var txIndex = match[1];
        var tx = data.transactions[txIndex];

        if (tx.id === undefined || !isException(tx)) {
          fatal = true;
        }
      }

      if (fatal) {
        throw new BlockSchemaError(data.height, "Invalid data".concat(err.dataPath ? " at " + err.dataPath : "", ": ") + "".concat(err.message, ": ").concat(JSON.stringify(err.data)));
      }
    }

    return result.value;
  }

  static deserialize(hexString) {
    var headerOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return Deserializer$1.deserialize(hexString, headerOnly).data;
  }

  static serializeWithTransactions(block) {
    return Serializer$1.serializeWithTransactions(block);
  }

  static serialize(block) {
    var includeSignature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return Serializer$1.serialize(block, includeSignature);
  }

  static getIdHex(data) {
    var constants = configManager.getMilestone(data.height);
    var payloadHash = Block.serialize(data);
    var hash = HashAlgorithms.sha256(payloadHash);

    if (constants.block.idFullSha256) {
      return hash.toString("hex");
    }

    var temp = Buffer.alloc(8);

    for (var i = 0; i < 8; i++) {
      temp[i] = hash[7 - i];
    }

    return temp.toString("hex");
  }

  static toBytesHex(data) {
    var temp = data ? index$5.BigNumber.make(data).toString(16) : "";
    return "0".repeat(16 - temp.length) + temp;
  }

  static getId(data) {
    var constants = configManager.getMilestone(data.height);
    var idHex = Block.getIdHex(data);
    return constants.block.idFullSha256 ? idHex : index$5.BigNumber.make("0x".concat(idHex)).toString();
  }

  getHeader() {
    var header = Object.assign({}, this.data);
    delete header.transactions;
    return header;
  }

  verifySignature() {
    var bytes = Block.serialize(this.data, false);
    var hash = HashAlgorithms.sha256(bytes);
    return Hash$4.verifyECDSA(hash, this.data.blockSignature, this.data.generatorPublicKey);
  }

  toJson() {
    var data = JSON.parse(JSON.stringify(this.data));
    data.reward = this.data.reward.toString();
    data.totalAmount = this.data.totalAmount.toString();
    data.totalFee = this.data.totalFee.toString();
    data.transactions = this.transactions.map(transaction => transaction.toJson());
    return data;
  }

  verify() {
    var block = this.data;
    var result = {
      verified: false,
      containsMultiSignatures: false,
      errors: []
    };

    try {
      var constants = configManager.getMilestone(block.height);

      if (block.height !== 1) {
        if (!block.previousBlock) {
          result.errors.push("Invalid previous block");
        }
      }

      if (!block.reward.isEqualTo(constants.reward)) {
        result.errors.push(["Invalid block reward:", block.reward, "expected:", constants.reward].join(" "));
      }

      var valid = this.verifySignature();

      if (!valid) {
        result.errors.push("Failed to verify block signature");
      }

      if (block.version !== constants.block.version) {
        result.errors.push("Invalid block version");
      }

      if (Slots.getSlotNumber(block.timestamp) > Slots.getSlotNumber()) {
        result.errors.push("Invalid block timestamp");
      }

      var serializedBuffer = Block.serializeWithTransactions(_objectSpread$4(_objectSpread$4({}, block), {}, {
        transactions: this.transactions.map(tx => tx.data)
      }));

      if (serializedBuffer.byteLength > constants.block.maxPayload) {
        result.errors.push("Payload is too large: ".concat(serializedBuffer.byteLength, " > ").concat(constants.block.maxPayload));
      }

      var invalidTransactions = this.transactions.filter(tx => !tx.verified);

      if (invalidTransactions.length > 0) {
        result.errors.push("One or more transactions are not verified:");

        for (var invalidTransaction of invalidTransactions) {
          result.errors.push("=> ".concat(invalidTransaction.serialized.toString("hex")));
        }

        result.containsMultiSignatures = invalidTransactions.some(tx => !!tx.data.signatures);
      }

      if (this.transactions.length !== block.numberOfTransactions) {
        result.errors.push("Invalid number of transactions");
      }

      if (this.transactions.length > constants.block.maxTransactions) {
        if (block.height > 1) {
          result.errors.push("Transactions length is too high");
        }
      } // Checking if transactions of the block adds up to block values.


      var appliedTransactions = {};
      var totalAmount = index$5.BigNumber.ZERO;
      var totalFee = index$5.BigNumber.ZERO;
      var payloadBuffers = [];

      for (var transaction of this.transactions) {
        var bytes = Buffer.from(transaction.data.id, "hex");

        if (appliedTransactions[transaction.data.id]) {
          result.errors.push("Encountered duplicate transaction: ".concat(transaction.data.id));
        }

        if (transaction.data.expiration > 0 && transaction.data.expiration <= this.data.height) {
          var _isException = configManager.get("network.name") === "devnet" && constants.ignoreExpiredTransactions;

          if (!_isException) {
            result.errors.push("Encountered expired transaction: ".concat(transaction.data.id));
          }
        }

        if (transaction.data.version === 1 && !constants.block.acceptExpiredTransactionTimestamps) {
          var now = block.timestamp;

          if (transaction.data.timestamp > now + 3600 + constants.blocktime) {
            result.errors.push("Encountered future transaction: ".concat(transaction.data.id));
          } else if (now - transaction.data.timestamp > 21600) {
            result.errors.push("Encountered expired transaction: ".concat(transaction.data.id));
          }
        }

        appliedTransactions[transaction.data.id] = transaction.data;
        totalAmount = totalAmount.plus(transaction.data.amount);
        totalFee = totalFee.plus(transaction.data.fee);
        payloadBuffers.push(bytes);
      }

      if (!totalAmount.isEqualTo(block.totalAmount)) {
        result.errors.push("Invalid total amount");
      }

      if (!totalFee.isEqualTo(block.totalFee)) {
        result.errors.push("Invalid total fee");
      }

      if (HashAlgorithms.sha256(payloadBuffers).toString("hex") !== block.payloadHash) {
        result.errors.push("Invalid payload hash");
      }
    } catch (error) {
      result.errors.push(error);
    }

    result.verified = result.errors.length === 0;
    return result;
  }

  applyGenesisBlockFix(id) {
    this.data.id = id;
    this.data.idHex = Block.toBytesHex(id);
  }

}

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
class BlockFactory {
  // @TODO: add a proper type hint for data
  static make(data, keys) {
    data.generatorPublicKey = keys.publicKey;
    var payloadHash = Block.serialize(data, false);
    var hash = HashAlgorithms.sha256(payloadHash);
    data.blockSignature = Hash$4.signECDSA(hash, keys);
    data.id = Block.getId(data);
    return this.fromData(data);
  }

  static fromHex(hex) {
    return this.fromSerialized(hex);
  }

  static fromBytes(buffer) {
    return this.fromSerialized(buffer ? buffer.toString("hex") : undefined);
  }

  static fromJson(json) {
    // @ts-ignore
    var data = _objectSpread$5({}, json);

    data.totalAmount = index$5.BigNumber.make(data.totalAmount);
    data.totalFee = index$5.BigNumber.make(data.totalFee);
    data.reward = index$5.BigNumber.make(data.reward);

    for (var transaction of data.transactions) {
      transaction.amount = index$5.BigNumber.make(transaction.amount);
      transaction.fee = index$5.BigNumber.make(transaction.fee);
    }

    return this.fromData(data);
  }

  static fromData(data) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    data = Block.applySchema(data);
    var serialized = Block.serializeWithTransactions(data).toString("hex");
    var block = new Block(_objectSpread$5(_objectSpread$5({}, Deserializer$1.deserialize(serialized, false, options)), {}, {
      id: data.id
    }));
    block.serialized = serialized;
    return block;
  }

  static fromSerialized(serialized) {
    var deserialized = Deserializer$1.deserialize(serialized);
    deserialized.data = Block.applySchema(deserialized.data);
    var block = new Block(deserialized);
    block.serialized = serialized;
    return block;
  }

}

var index$9 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Block: Block,
  Deserializer: Deserializer$1,
  BlockFactory: BlockFactory,
  Serializer: Serializer$1
});

var index$a = /*#__PURE__*/Object.freeze({
  __proto__: null
});

var types$6 = /*#__PURE__*/Object.freeze({
  __proto__: null
});

export { index$9 as Blocks, constants as Constants, index$4 as Crypto, enums as Enums, errors as Errors, index$1 as Identities, index$a as Interfaces, index as Managers, networks as Networks, index$8 as Transactions, types$6 as Types, index$6 as Utils, index$7 as Validation };
